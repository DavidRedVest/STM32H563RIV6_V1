
firmware.elf:     file format elf32-littlearm


Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	e000      	b.n	8000262 <__do_global_dtors_aux+0x12>
 8000260:	bf00      	nop
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	2000084c 	.word	0x2000084c
 800026c:	00000000 	.word	0x00000000
 8000270:	0800a81c 	.word	0x0800a81c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	e000      	b.n	8000282 <frame_dummy+0xe>
 8000280:	bf00      	nop
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000850 	.word	0x20000850
 800028c:	0800a81c 	.word	0x0800a81c

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_ldivmod>:
 8000b8c:	b97b      	cbnz	r3, 8000bae <__aeabi_ldivmod+0x22>
 8000b8e:	b972      	cbnz	r2, 8000bae <__aeabi_ldivmod+0x22>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bfbe      	ittt	lt
 8000b94:	2000      	movlt	r0, #0
 8000b96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b9a:	e006      	blt.n	8000baa <__aeabi_ldivmod+0x1e>
 8000b9c:	bf08      	it	eq
 8000b9e:	2800      	cmpeq	r0, #0
 8000ba0:	bf1c      	itt	ne
 8000ba2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000baa:	f000 ba03 	b.w	8000fb4 <__aeabi_idiv0>
 8000bae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	db09      	blt.n	8000bce <__aeabi_ldivmod+0x42>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db1a      	blt.n	8000bf4 <__aeabi_ldivmod+0x68>
 8000bbe:	f000 f883 	bl	8000cc8 <__udivmoddi4>
 8000bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bca:	b004      	add	sp, #16
 8000bcc:	4770      	bx	lr
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db1b      	blt.n	8000c10 <__aeabi_ldivmod+0x84>
 8000bd8:	f000 f876 	bl	8000cc8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	4252      	negs	r2, r2
 8000bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf2:	4770      	bx	lr
 8000bf4:	4252      	negs	r2, r2
 8000bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfa:	f000 f865 	bl	8000cc8 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4240      	negs	r0, r0
 8000c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f857 	bl	8000cc8 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4252      	negs	r2, r2
 8000c26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 b9b8 	b.w	8000fb4 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff41 	bl	8000aec <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcb7 	bl	8000608 <__aeabi_dmul>
 8000c9a:	f000 f98d 	bl	8000fb8 <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc38 	bl	8000514 <__aeabi_ui2d>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca8:	f7ff fcae 	bl	8000608 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf0 	bl	8000298 <__aeabi_dsub>
 8000cb8:	f000 f97e 	bl	8000fb8 <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d148      	bne.n	8000d68 <__udivmoddi4+0xa0>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d961      	bls.n	8000da0 <__udivmoddi4+0xd8>
 8000cdc:	fab2 f382 	clz	r3, r2
 8000ce0:	b143      	cbz	r3, 8000cf4 <__udivmoddi4+0x2c>
 8000ce2:	f1c3 0120 	rsb	r1, r3, #32
 8000ce6:	409f      	lsls	r7, r3
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	409c      	lsls	r4, r3
 8000cee:	fa20 f101 	lsr.w	r1, r0, r1
 8000cf2:	430f      	orrs	r7, r1
 8000cf4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d02:	fb01 7716 	mls	r7, r1, r6, r7
 8000d06:	fb06 f00e 	mul.w	r0, r6, lr
 8000d0a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x5c>
 8000d12:	eb1c 0202 	adds.w	r2, ip, r2
 8000d16:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x5a>
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f200 8137 	bhi.w	8000f90 <__udivmoddi4+0x2c8>
 8000d22:	463e      	mov	r6, r7
 8000d24:	1a12      	subs	r2, r2, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d2c:	fb01 2210 	mls	r2, r1, r0, r2
 8000d30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x86>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x84>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 811c 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	2600      	movs	r6, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0x9a>
 8000d5a:	40dc      	lsrs	r4, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e9c5 4300 	strd	r4, r3, [r5]
 8000d62:	4631      	mov	r1, r6
 8000d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0xb8>
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	f000 80fd 	beq.w	8000f6c <__udivmoddi4+0x2a4>
 8000d72:	2600      	movs	r6, #0
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	4630      	mov	r0, r6
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d80:	fab3 f683 	clz	r6, r3
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d14b      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	f0c0 80f2 	bcc.w	8000f72 <__udivmoddi4+0x2aa>
 8000d8e:	4282      	cmp	r2, r0
 8000d90:	f240 80ef 	bls.w	8000f72 <__udivmoddi4+0x2aa>
 8000d94:	4630      	mov	r0, r6
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e3      	beq.n	8000d62 <__udivmoddi4+0x9a>
 8000d9a:	e9c5 4700 	strd	r4, r7, [r5]
 8000d9e:	e7e0      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xdc>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f382 	clz	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 809d 	bne.w	8000ee8 <__udivmoddi4+0x220>
 8000dae:	1a89      	subs	r1, r1, r2
 8000db0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000db4:	b297      	uxth	r7, r2
 8000db6:	2601      	movs	r6, #1
 8000db8:	0c20      	lsrs	r0, r4, #16
 8000dba:	fbb1 f2fe 	udiv	r2, r1, lr
 8000dbe:	fb0e 1112 	mls	r1, lr, r2, r1
 8000dc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc6:	fb07 f002 	mul.w	r0, r7, r2
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d90f      	bls.n	8000dee <__udivmoddi4+0x126>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000dd6:	bf2c      	ite	cs
 8000dd8:	f04f 0901 	movcs.w	r9, #1
 8000ddc:	f04f 0900 	movcc.w	r9, #0
 8000de0:	4288      	cmp	r0, r1
 8000de2:	d903      	bls.n	8000dec <__udivmoddi4+0x124>
 8000de4:	f1b9 0f00 	cmp.w	r9, #0
 8000de8:	f000 80cf 	beq.w	8000f8a <__udivmoddi4+0x2c2>
 8000dec:	4642      	mov	r2, r8
 8000dee:	1a09      	subs	r1, r1, r0
 8000df0:	b2a4      	uxth	r4, r4
 8000df2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfa:	fb00 f707 	mul.w	r7, r0, r7
 8000dfe:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e02:	42a7      	cmp	r7, r4
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x150>
 8000e06:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14e>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f200 80b4 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e16:	4608      	mov	r0, r1
 8000e18:	1be4      	subs	r4, r4, r7
 8000e1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e1e:	e79b      	b.n	8000d58 <__udivmoddi4+0x90>
 8000e20:	f1c6 0720 	rsb	r7, r6, #32
 8000e24:	40b3      	lsls	r3, r6
 8000e26:	fa01 f406 	lsl.w	r4, r1, r6
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	40f9      	lsrs	r1, r7
 8000e30:	40b2      	lsls	r2, r6
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	fb09 1118 	mls	r1, r9, r8, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb08 f00e 	mul.w	r0, r8, lr
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d90f      	bls.n	8000e7e <__udivmoddi4+0x1b6>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0b01 	movcs.w	fp, #1
 8000e6c:	f04f 0b00 	movcc.w	fp, #0
 8000e70:	4288      	cmp	r0, r1
 8000e72:	d903      	bls.n	8000e7c <__udivmoddi4+0x1b4>
 8000e74:	f1bb 0f00 	cmp.w	fp, #0
 8000e78:	f000 808d 	beq.w	8000f96 <__udivmoddi4+0x2ce>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	1a09      	subs	r1, r1, r0
 8000e80:	b2a4      	uxth	r4, r4
 8000e82:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e86:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e8e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1de>
 8000e96:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e9e:	d201      	bcs.n	8000ea4 <__udivmoddi4+0x1dc>
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d87f      	bhi.n	8000fa4 <__udivmoddi4+0x2dc>
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eaa:	eba1 010e 	sub.w	r1, r1, lr
 8000eae:	fba0 9802 	umull	r9, r8, r0, r2
 8000eb2:	4541      	cmp	r1, r8
 8000eb4:	464c      	mov	r4, r9
 8000eb6:	46c6      	mov	lr, r8
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0x1f8>
 8000eba:	d106      	bne.n	8000eca <__udivmoddi4+0x202>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d204      	bcs.n	8000eca <__udivmoddi4+0x202>
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	ebb9 0402 	subs.w	r4, r9, r2
 8000ec6:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d070      	beq.n	8000fb0 <__udivmoddi4+0x2e8>
 8000ece:	1b1a      	subs	r2, r3, r4
 8000ed0:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed4:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed8:	fa01 f707 	lsl.w	r7, r1, r7
 8000edc:	40f1      	lsrs	r1, r6
 8000ede:	2600      	movs	r6, #0
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	e73c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	f1c3 0020 	rsb	r0, r3, #32
 8000ef0:	fa01 f203 	lsl.w	r2, r1, r3
 8000ef4:	fa21 f600 	lsr.w	r6, r1, r0
 8000ef8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000efc:	fa24 f100 	lsr.w	r1, r4, r0
 8000f00:	fa1f f78c 	uxth.w	r7, ip
 8000f04:	409c      	lsls	r4, r3
 8000f06:	4311      	orrs	r1, r2
 8000f08:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f0c:	0c0a      	lsrs	r2, r1, #16
 8000f0e:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f12:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f16:	fb00 f607 	mul.w	r6, r0, r7
 8000f1a:	4296      	cmp	r6, r2
 8000f1c:	d90e      	bls.n	8000f3c <__udivmoddi4+0x274>
 8000f1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f26:	bf2c      	ite	cs
 8000f28:	f04f 0901 	movcs.w	r9, #1
 8000f2c:	f04f 0900 	movcc.w	r9, #0
 8000f30:	4296      	cmp	r6, r2
 8000f32:	d902      	bls.n	8000f3a <__udivmoddi4+0x272>
 8000f34:	f1b9 0f00 	cmp.w	r9, #0
 8000f38:	d031      	beq.n	8000f9e <__udivmoddi4+0x2d6>
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	1b92      	subs	r2, r2, r6
 8000f3e:	b289      	uxth	r1, r1
 8000f40:	fbb2 f6fe 	udiv	r6, r2, lr
 8000f44:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f4c:	fb06 f207 	mul.w	r2, r6, r7
 8000f50:	428a      	cmp	r2, r1
 8000f52:	d907      	bls.n	8000f64 <__udivmoddi4+0x29c>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f5c:	d201      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000f5e:	428a      	cmp	r2, r1
 8000f60:	d823      	bhi.n	8000faa <__udivmoddi4+0x2e2>
 8000f62:	4646      	mov	r6, r8
 8000f64:	1a89      	subs	r1, r1, r2
 8000f66:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f6a:	e725      	b.n	8000db8 <__udivmoddi4+0xf0>
 8000f6c:	462e      	mov	r6, r5
 8000f6e:	4628      	mov	r0, r5
 8000f70:	e6f7      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000f72:	1a84      	subs	r4, r0, r2
 8000f74:	eb61 0303 	sbc.w	r3, r1, r3
 8000f78:	2001      	movs	r0, #1
 8000f7a:	461f      	mov	r7, r3
 8000f7c:	e70b      	b.n	8000d96 <__udivmoddi4+0xce>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e749      	b.n	8000e18 <__udivmoddi4+0x150>
 8000f84:	4464      	add	r4, ip
 8000f86:	3802      	subs	r0, #2
 8000f88:	e6e1      	b.n	8000d4e <__udivmoddi4+0x86>
 8000f8a:	3a02      	subs	r2, #2
 8000f8c:	4461      	add	r1, ip
 8000f8e:	e72e      	b.n	8000dee <__udivmoddi4+0x126>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e6c6      	b.n	8000d24 <__udivmoddi4+0x5c>
 8000f96:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e76f      	b.n	8000e7e <__udivmoddi4+0x1b6>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4462      	add	r2, ip
 8000fa2:	e7cb      	b.n	8000f3c <__udivmoddi4+0x274>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e77d      	b.n	8000ea6 <__udivmoddi4+0x1de>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	e7d9      	b.n	8000f64 <__udivmoddi4+0x29c>
 8000fb0:	462e      	mov	r6, r5
 8000fb2:	e6d6      	b.n	8000d62 <__udivmoddi4+0x9a>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <MX_SPI2_Init>:
#include "draw.h"

SPI_HandleTypeDef hspi2;

void MX_SPI2_Init(void)
{
 8000ff8:	b538      	push	{r3, r4, r5, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ffa:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ffe:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 8001000:	4813      	ldr	r0, [pc, #76]	; (8001050 <MX_SPI2_Init+0x58>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001002:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001004:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001008:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800100c:	e9c0 3105 	strd	r3, r1, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x7;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001010:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001014:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001018:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001020:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001024:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001028:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800102c:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001030:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001034:	6603      	str	r3, [r0, #96]	; 0x60
  hspi2.Instance = SPI2;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <MX_SPI2_Init+0x5c>)
  hspi2.Init.CRCPolynomial = 0x7;
 8001038:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800103a:	6341      	str	r1, [r0, #52]	; 0x34
  hspi2.Instance = SPI2;
 800103c:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800103e:	f007 fda7 	bl	8008b90 <HAL_SPI_Init>
 8001042:	b900      	cbnz	r0, 8001046 <MX_SPI2_Init+0x4e>
  {
    Error_Handler();
  }
}
 8001044:	bd38      	pop	{r3, r4, r5, pc}
 8001046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 800104a:	f000 bef5 	b.w	8001e38 <Error_Handler>
 800104e:	bf00      	nop
 8001050:	20000868 	.word	0x20000868
 8001054:	40003800 	.word	0x40003800

08001058 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001058:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	2100      	movs	r1, #0
{
 800105c:	4604      	mov	r4, r0
 800105e:	b0cb      	sub	sp, #300	; 0x12c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001060:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001064:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800106a:	e9cd 1105 	strd	r1, r1, [sp, #20]
 800106e:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001070:	f009 f95e 	bl	800a330 <memset>
  if(spiHandle->Instance==SPI2)
 8001074:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_SPI_MspInit+0xc0>)
 8001076:	6822      	ldr	r2, [r4, #0]
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800107c:	b04b      	add	sp, #300	; 0x12c
 800107e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001084:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001086:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001088:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800108c:	f004 f81c 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 8001090:	2800      	cmp	r0, #0
 8001092:	d13d      	bne.n	8001110 <HAL_SPI_MspInit+0xb8>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001096:	2106      	movs	r1, #6
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109a:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109c:	2405      	movs	r4, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_SPI_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	481f      	ldr	r0, [pc, #124]	; (8001120 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010a2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80010a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80010ae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80010b2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80010b6:	9200      	str	r2, [sp, #0]
 80010b8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80010be:	f042 0204 	orr.w	r2, r2, #4
 80010c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80010c6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80010ca:	f002 0204 	and.w	r2, r2, #4
 80010ce:	9201      	str	r2, [sp, #4]
 80010d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80010d6:	433a      	orrs	r2, r7
 80010d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80010dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80010e0:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	403b      	ands	r3, r7
 80010e4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e6:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	e9cd 7604 	strd	r7, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ee:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010f0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010f2:	f003 f8b1 	bl	8004258 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010fa:	480a      	ldr	r0, [pc, #40]	; (8001124 <HAL_SPI_MspInit+0xcc>)
 80010fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001104:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001106:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001108:	f003 f8a6 	bl	8004258 <HAL_GPIO_Init>
}
 800110c:	b04b      	add	sp, #300	; 0x12c
 800110e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001110:	f000 fe92 	bl	8001e38 <Error_Handler>
 8001114:	e7be      	b.n	8001094 <HAL_SPI_MspInit+0x3c>
 8001116:	bf00      	nop
 8001118:	40003800 	.word	0x40003800
 800111c:	44020c00 	.word	0x44020c00
 8001120:	42020800 	.word	0x42020800
 8001124:	42020400 	.word	0x42020400

08001128 <bsp_lcd_init>:
  }
}


void bsp_lcd_init(void)
{
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	2400      	movs	r4, #0
{
 800112c:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001132:	e9cd 4405 	strd	r4, r4, [sp, #20]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b20      	ldr	r3, [pc, #128]	; (80011b8 <bsp_lcd_init+0x90>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_GPIOD_CLK_ENABLE();
	
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 800113e:	4f1f      	ldr	r7, [pc, #124]	; (80011bc <bsp_lcd_init+0x94>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	f042 0202 	orr.w	r2, r2, #2
 8001144:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001148:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800114c:	4e1c      	ldr	r6, [pc, #112]	; (80011c0 <bsp_lcd_init+0x98>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800114e:	f002 0202 	and.w	r2, r2, #2
 8001152:	9201      	str	r2, [sp, #4]
 8001154:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 800115a:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800115c:	f042 0208 	orr.w	r2, r2, #8
 8001160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001164:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 8001168:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 8001170:	f44f 6101 	mov.w	r1, #2064	; 0x810
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001174:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 8001176:	f003 f945 	bl	8004404 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800117a:	4622      	mov	r2, r4
 800117c:	4630      	mov	r0, r6
 800117e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001182:	f003 f93f 	bl	8004404 <HAL_GPIO_WritePin>
	
	/*Configure GPIO pins : PB11 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 8001188:	f44f 6301 	mov.w	r3, #2064	; 0x810
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	4638      	mov	r0, r7
 800118e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 8001190:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001196:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001198:	f003 f85e 	bl	8004258 <HAL_GPIO_Init>
	
	/*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800119c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 80011a2:	4630      	mov	r0, r6
 80011a4:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011aa:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 80011ae:	f003 f853 	bl	8004258 <HAL_GPIO_Init>
  
  
}
 80011b2:	b009      	add	sp, #36	; 0x24
 80011b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b6:	bf00      	nop
 80011b8:	44020c00 	.word	0x44020c00
 80011bc:	42020400 	.word	0x42020400
 80011c0:	42020c00 	.word	0x42020c00

080011c4 <bsp_test_lcd>:

void bsp_test_lcd(void)
{
 80011c4:	b530      	push	{r4, r5, lr}

#if 1

	Draw_String(0, 0, "www.100ask.net\r\n10ask.taobao.com", 0x0000ff00, 0); /* 绘制字符丿 */
 80011c6:	2400      	movs	r4, #0
	extern const unsigned char gImage_100ask[36968]; 
	Draw_Picture(0, 100, gImage_100ask);  /* 绘制图片 */

	Draw_Circle(60, 250, 50, 0xffffff); /* 画圆 */

	Draw_Rectangle(180, 200, 280, 300, 0xffffff); /* 画矩彿 */
 80011c8:	f06f 457f 	mvn.w	r5, #4278190080	; 0xff000000
{
 80011cc:	b083      	sub	sp, #12
	Draw_String(0, 0, "www.100ask.net\r\n10ask.taobao.com", 0x0000ff00, 0); /* 绘制字符丿 */
 80011ce:	4621      	mov	r1, r4
 80011d0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80011d4:	4620      	mov	r0, r4
 80011d6:	4a1c      	ldr	r2, [pc, #112]	; (8001248 <bsp_test_lcd+0x84>)
 80011d8:	9400      	str	r4, [sp, #0]
 80011da:	f000 fb0d 	bl	80017f8 <Draw_String>
	Draw_ChineseFont(0, 40, "悦己之作方能悦人", 0xff0000, 0); /* 绘制汉字 */
 80011de:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80011e2:	4620      	mov	r0, r4
 80011e4:	2128      	movs	r1, #40	; 0x28
 80011e6:	4a19      	ldr	r2, [pc, #100]	; (800124c <bsp_test_lcd+0x88>)
 80011e8:	9400      	str	r4, [sp, #0]
 80011ea:	f000 fc47 	bl	8001a7c <Draw_ChineseFont>
	Draw_Picture(0, 100, gImage_100ask);  /* 绘制图片 */
 80011ee:	4620      	mov	r0, r4
 80011f0:	2164      	movs	r1, #100	; 0x64
 80011f2:	4a17      	ldr	r2, [pc, #92]	; (8001250 <bsp_test_lcd+0x8c>)
 80011f4:	f000 fd0a 	bl	8001c0c <Draw_Picture>
	Draw_Circle(60, 250, 50, 0xffffff); /* 画圆 */
 80011f8:	462b      	mov	r3, r5
 80011fa:	2232      	movs	r2, #50	; 0x32
 80011fc:	21fa      	movs	r1, #250	; 0xfa
 80011fe:	203c      	movs	r0, #60	; 0x3c
 8001200:	f000 fbba 	bl	8001978 <Draw_Circle>
	Draw_Rectangle(180, 200, 280, 300, 0xffffff); /* 画矩彿 */
 8001204:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001208:	f44f 728c 	mov.w	r2, #280	; 0x118
 800120c:	21c8      	movs	r1, #200	; 0xc8
 800120e:	20b4      	movs	r0, #180	; 0xb4
 8001210:	9500      	str	r5, [sp, #0]
 8001212:	f000 fb8d 	bl	8001930 <Draw_Rectangle>
	
	Draw_String(240, 160, "Hello", 0x00ff0000, 0x00ffffff);
 8001216:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800121a:	21a0      	movs	r1, #160	; 0xa0
 800121c:	4a0d      	ldr	r2, [pc, #52]	; (8001254 <bsp_test_lcd+0x90>)
 800121e:	9500      	str	r5, [sp, #0]
 8001220:	20f0      	movs	r0, #240	; 0xf0
 8001222:	f000 fae9 	bl	80017f8 <Draw_String>
	
	Draw_ChineseFont(200, 200, "百问网悦己之使", 0xff0000, 0); /* 绘制汉字 */
 8001226:	21c8      	movs	r1, #200	; 0xc8
 8001228:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800122c:	4608      	mov	r0, r1
 800122e:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <bsp_test_lcd+0x94>)
 8001230:	9400      	str	r4, [sp, #0]
 8001232:	f000 fc23 	bl	8001a7c <Draw_ChineseFont>
	
	extern const unsigned char gImage_ufo[19888];
	Draw_Picture(300, 50, gImage_ufo);  /* 绘制图片 */
 8001236:	2132      	movs	r1, #50	; 0x32
 8001238:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <bsp_test_lcd+0x98>)
#endif
}
 800123e:	b003      	add	sp, #12
 8001240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	Draw_Picture(300, 50, gImage_ufo);  /* 绘制图片 */
 8001244:	f000 bce2 	b.w	8001c0c <Draw_Picture>
 8001248:	0800a838 	.word	0x0800a838
 800124c:	0800a85c 	.word	0x0800a85c
 8001250:	0800bf4c 	.word	0x0800bf4c
 8001254:	0800a878 	.word	0x0800a878
 8001258:	0800a880 	.word	0x0800a880
 800125c:	08014fb4 	.word	0x08014fb4

08001260 <bsp_led_init>:
#include "bsp_led.h"

//PC12
void bsp_led_init()
{
 8001260:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8001262:	2400      	movs	r4, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();	
	__HAL_RCC_GPIOC_CLK_ENABLE();

	
	/*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001264:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2601      	movs	r6, #1
{
 800126a:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 800126c:	e9cd 4405 	strd	r4, r4, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001270:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <bsp_led_init+0x60>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8001272:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001274:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001278:	a903      	add	r1, sp, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 800127a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800127e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001282:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	480f      	ldr	r0, [pc, #60]	; (80012c4 <bsp_led_init+0x64>)
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001288:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800128c:	9201      	str	r2, [sp, #4]
 800128e:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001290:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001294:	f042 0204 	orr.w	r2, r2, #4
 8001298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800129c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	9604      	str	r6, [sp, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012aa:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f002 ffd4 	bl	8004258 <HAL_GPIO_Init>
	
	/*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);	
 80012b0:	4622      	mov	r2, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	4803      	ldr	r0, [pc, #12]	; (80012c4 <bsp_led_init+0x64>)
 80012b6:	f003 f8a5 	bl	8004404 <HAL_GPIO_WritePin>
}
 80012ba:	b008      	add	sp, #32
 80012bc:	bd70      	pop	{r4, r5, r6, pc}
 80012be:	bf00      	nop
 80012c0:	44020c00 	.word	0x44020c00
 80012c4:	42020800 	.word	0x42020800

080012c8 <bsp_led_toggle>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}

void bsp_led_toggle()
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80012c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012cc:	4801      	ldr	r0, [pc, #4]	; (80012d4 <bsp_led_toggle+0xc>)
 80012ce:	f003 b89f 	b.w	8004410 <HAL_GPIO_TogglePin>
 80012d2:	bf00      	nop
 80012d4:	42020800 	.word	0x42020800

080012d8 <MX_UART4_Init>:
  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80012d8:	2300      	movs	r3, #0
  huart4.Init.BaudRate = 115200;
 80012da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 80012de:	220c      	movs	r2, #12
{
 80012e0:	b510      	push	{r4, lr}
  huart4.Instance = UART4;
 80012e2:	481d      	ldr	r0, [pc, #116]	; (8001358 <MX_UART4_Init+0x80>)
 80012e4:	4c1d      	ldr	r4, [pc, #116]	; (800135c <MX_UART4_Init+0x84>)
  huart4.Init.BaudRate = 115200;
 80012e6:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart4.Init.Parity = UART_PARITY_NONE;
 80012ea:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart4.Instance = UART4;
 80012fa:	6004      	str	r4, [r0, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80012fc:	f008 fbdc 	bl	8009ab8 <HAL_UART_Init>
 8001300:	b970      	cbnz	r0, 8001320 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4814      	ldr	r0, [pc, #80]	; (8001358 <MX_UART4_Init+0x80>)
 8001306:	f008 fc55 	bl	8009bb4 <HAL_UARTEx_SetTxFifoThreshold>
 800130a:	b988      	cbnz	r0, 8001330 <MX_UART4_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800130c:	2100      	movs	r1, #0
 800130e:	4812      	ldr	r0, [pc, #72]	; (8001358 <MX_UART4_Init+0x80>)
 8001310:	f008 fc7a 	bl	8009c08 <HAL_UARTEx_SetRxFifoThreshold>
 8001314:	b9a0      	cbnz	r0, 8001340 <MX_UART4_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001316:	4810      	ldr	r0, [pc, #64]	; (8001358 <MX_UART4_Init+0x80>)
 8001318:	f008 fc28 	bl	8009b6c <HAL_UARTEx_EnableFifoMode>
 800131c:	b9b8      	cbnz	r0, 800134e <MX_UART4_Init+0x76>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800131e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001320:	f000 fd8a 	bl	8001e38 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001324:	2100      	movs	r1, #0
 8001326:	480c      	ldr	r0, [pc, #48]	; (8001358 <MX_UART4_Init+0x80>)
 8001328:	f008 fc44 	bl	8009bb4 <HAL_UARTEx_SetTxFifoThreshold>
 800132c:	2800      	cmp	r0, #0
 800132e:	d0ed      	beq.n	800130c <MX_UART4_Init+0x34>
    Error_Handler();
 8001330:	f000 fd82 	bl	8001e38 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001334:	2100      	movs	r1, #0
 8001336:	4808      	ldr	r0, [pc, #32]	; (8001358 <MX_UART4_Init+0x80>)
 8001338:	f008 fc66 	bl	8009c08 <HAL_UARTEx_SetRxFifoThreshold>
 800133c:	2800      	cmp	r0, #0
 800133e:	d0ea      	beq.n	8001316 <MX_UART4_Init+0x3e>
    Error_Handler();
 8001340:	f000 fd7a 	bl	8001e38 <Error_Handler>
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_UART4_Init+0x80>)
 8001346:	f008 fc11 	bl	8009b6c <HAL_UARTEx_EnableFifoMode>
 800134a:	2800      	cmp	r0, #0
 800134c:	d0e7      	beq.n	800131e <MX_UART4_Init+0x46>
}
 800134e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001352:	f000 bd71 	b.w	8001e38 <Error_Handler>
 8001356:	bf00      	nop
 8001358:	20000b6c 	.word	0x20000b6c
 800135c:	40004c00 	.word	0x40004c00

08001360 <MX_USART2_UART_Init>:
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001360:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001362:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001366:	220c      	movs	r2, #12
{
 8001368:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800136a:	481d      	ldr	r0, [pc, #116]	; (80013e0 <MX_USART2_UART_Init+0x80>)
 800136c:	4c1d      	ldr	r4, [pc, #116]	; (80013e4 <MX_USART2_UART_Init+0x84>)
  huart2.Init.BaudRate = 115200;
 800136e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001376:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800137a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart2.Instance = USART2;
 8001382:	6004      	str	r4, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001384:	f008 fb98 	bl	8009ab8 <HAL_UART_Init>
 8001388:	b970      	cbnz	r0, 80013a8 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800138a:	2100      	movs	r1, #0
 800138c:	4814      	ldr	r0, [pc, #80]	; (80013e0 <MX_USART2_UART_Init+0x80>)
 800138e:	f008 fc11 	bl	8009bb4 <HAL_UARTEx_SetTxFifoThreshold>
 8001392:	b988      	cbnz	r0, 80013b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001394:	2100      	movs	r1, #0
 8001396:	4812      	ldr	r0, [pc, #72]	; (80013e0 <MX_USART2_UART_Init+0x80>)
 8001398:	f008 fc36 	bl	8009c08 <HAL_UARTEx_SetRxFifoThreshold>
 800139c:	b9a0      	cbnz	r0, 80013c8 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800139e:	4810      	ldr	r0, [pc, #64]	; (80013e0 <MX_USART2_UART_Init+0x80>)
 80013a0:	f008 fbe4 	bl	8009b6c <HAL_UARTEx_EnableFifoMode>
 80013a4:	b9b8      	cbnz	r0, 80013d6 <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013a6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80013a8:	f000 fd46 	bl	8001e38 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ac:	2100      	movs	r1, #0
 80013ae:	480c      	ldr	r0, [pc, #48]	; (80013e0 <MX_USART2_UART_Init+0x80>)
 80013b0:	f008 fc00 	bl	8009bb4 <HAL_UARTEx_SetTxFifoThreshold>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d0ed      	beq.n	8001394 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80013b8:	f000 fd3e 	bl	8001e38 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013bc:	2100      	movs	r1, #0
 80013be:	4808      	ldr	r0, [pc, #32]	; (80013e0 <MX_USART2_UART_Init+0x80>)
 80013c0:	f008 fc22 	bl	8009c08 <HAL_UARTEx_SetRxFifoThreshold>
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d0ea      	beq.n	800139e <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80013c8:	f000 fd36 	bl	8001e38 <Error_Handler>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_USART2_UART_Init+0x80>)
 80013ce:	f008 fbcd 	bl	8009b6c <HAL_UARTEx_EnableFifoMode>
 80013d2:	2800      	cmp	r0, #0
 80013d4:	d0e7      	beq.n	80013a6 <MX_USART2_UART_Init+0x46>
}
 80013d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80013da:	f000 bd2d 	b.w	8001e38 <Error_Handler>
 80013de:	bf00      	nop
 80013e0:	20000ad8 	.word	0x20000ad8
 80013e4:	40004400 	.word	0x40004400

080013e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013e8:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ea:	2100      	movs	r1, #0
{
 80013ec:	4604      	mov	r4, r0
 80013ee:	b0cd      	sub	sp, #308	; 0x134
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f0:	f44f 7284 	mov.w	r2, #264	; 0x108
 80013f4:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80013fa:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80013fe:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001400:	f008 ff96 	bl	800a330 <memset>
  if(uartHandle->Instance==UART4)
 8001404:	4a93      	ldr	r2, [pc, #588]	; (8001654 <HAL_UART_MspInit+0x26c>)
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	4293      	cmp	r3, r2
 800140a:	d005      	beq.n	8001418 <HAL_UART_MspInit+0x30>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800140c:	4a92      	ldr	r2, [pc, #584]	; (8001658 <HAL_UART_MspInit+0x270>)
 800140e:	4293      	cmp	r3, r2
 8001410:	f000 8084 	beq.w	800151c <HAL_UART_MspInit+0x134>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001414:	b04d      	add	sp, #308	; 0x134
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001418:	2208      	movs	r2, #8
 800141a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800141c:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800141e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001422:	f003 fe51 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 8001426:	2800      	cmp	r0, #0
 8001428:	f040 8101 	bne.w	800162e <HAL_UART_MspInit+0x246>
    __HAL_RCC_UART4_CLK_ENABLE();
 800142c:	4b8b      	ldr	r3, [pc, #556]	; (800165c <HAL_UART_MspInit+0x274>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2600      	movs	r6, #0
    __HAL_RCC_UART4_CLK_ENABLE();
 8001430:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001434:	2708      	movs	r7, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 8001436:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800143a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800143e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	4887      	ldr	r0, [pc, #540]	; (8001660 <HAL_UART_MspInit+0x278>)
    __HAL_RCC_UART4_CLK_ENABLE();
 8001444:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001448:	9201      	str	r2, [sp, #4]
 800144a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	f042 0201 	orr.w	r2, r2, #1
 8001456:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800145a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800145e:	4d81      	ldr	r5, [pc, #516]	; (8001664 <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001468:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146c:	e9cd 6607 	strd	r6, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001470:	e9cd 3205 	strd	r3, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001474:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f002 feef 	bl	8004258 <HAL_GPIO_Init>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800147a:	4b7b      	ldr	r3, [pc, #492]	; (8001668 <HAL_UART_MspInit+0x280>)
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART4_TX;
 800147c:	221c      	movs	r2, #28
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800147e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001482:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001484:	2301      	movs	r3, #1
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001486:	4628      	mov	r0, r5
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001488:	e9c5 6605 	strd	r6, r6, [r5, #20]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800148c:	e9c5 6607 	strd	r6, r6, [r5, #28]
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001490:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001494:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001498:	60ae      	str	r6, [r5, #8]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 800149a:	612f      	str	r7, [r5, #16]
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 800149c:	636e      	str	r6, [r5, #52]	; 0x34
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800149e:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART4_TX;
 80014a0:	606a      	str	r2, [r5, #4]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80014a2:	f002 fae5 	bl	8003a70 <HAL_DMA_Init>
 80014a6:	2800      	cmp	r0, #0
 80014a8:	f040 80be 	bne.w	8001628 <HAL_UART_MspInit+0x240>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014ac:	2110      	movs	r1, #16
 80014ae:	486d      	ldr	r0, [pc, #436]	; (8001664 <HAL_UART_MspInit+0x27c>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel3);
 80014b0:	67e5      	str	r5, [r4, #124]	; 0x7c
 80014b2:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014b4:	f002 fe4c 	bl	8004150 <HAL_DMA_ConfigChannelAttributes>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	f040 80b2 	bne.w	8001622 <HAL_UART_MspInit+0x23a>
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80014be:	2300      	movs	r3, #0
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80014c0:	2201      	movs	r2, #1
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_UART4_RX;
 80014c2:	201b      	movs	r0, #27
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 80014c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80014c8:	4d68      	ldr	r5, [pc, #416]	; (800166c <HAL_UART_MspInit+0x284>)
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80014ca:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 80014ce:	e9c5 3303 	strd	r3, r3, [r5, #12]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80014d2:	e9c5 3306 	strd	r3, r3, [r5, #24]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 80014d6:	e9c5 3208 	strd	r3, r2, [r5, #32]
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80014da:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 80014de:	e9c5 330c 	strd	r3, r3, [r5, #48]	; 0x30
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80014e2:	4b63      	ldr	r3, [pc, #396]	; (8001670 <HAL_UART_MspInit+0x288>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80014e4:	4628      	mov	r0, r5
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 80014e6:	6169      	str	r1, [r5, #20]
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 80014e8:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 80014ea:	f002 fac1 	bl	8003a70 <HAL_DMA_Init>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	f040 8094 	bne.w	800161c <HAL_UART_MspInit+0x234>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014f4:	2110      	movs	r1, #16
 80014f6:	485d      	ldr	r0, [pc, #372]	; (800166c <HAL_UART_MspInit+0x284>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel1);
 80014f8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80014fc:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80014fe:	f002 fe27 	bl	8004150 <HAL_DMA_ConfigChannelAttributes>
 8001502:	2800      	cmp	r0, #0
 8001504:	f040 8087 	bne.w	8001616 <HAL_UART_MspInit+0x22e>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001508:	2200      	movs	r2, #0
 800150a:	2105      	movs	r1, #5
 800150c:	203d      	movs	r0, #61	; 0x3d
 800150e:	f002 f9fd 	bl	800390c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001512:	203d      	movs	r0, #61	; 0x3d
 8001514:	f002 fa38 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 8001518:	b04d      	add	sp, #308	; 0x134
 800151a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800151c:	2202      	movs	r2, #2
 800151e:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001520:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001522:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001526:	f003 fdcf 	bl	80050c8 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	2800      	cmp	r0, #0
 800152c:	f040 8082 	bne.w	8001634 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_UART_MspInit+0x274>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001532:	2107      	movs	r1, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 8001534:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800153a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800153e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001542:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	4846      	ldr	r0, [pc, #280]	; (8001660 <HAL_UART_MspInit+0x278>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800154c:	9203      	str	r2, [sp, #12]
 800154e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001550:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001554:	4d47      	ldr	r5, [pc, #284]	; (8001674 <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	f042 0201 	orr.w	r2, r2, #1
 800155a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800155e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001562:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	9304      	str	r3, [sp, #16]
 800156a:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156e:	9109      	str	r1, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	e9cd 6607 	strd	r6, r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157a:	f002 fe6d 	bl	8004258 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 800157e:	2301      	movs	r3, #1
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8001580:	2117      	movs	r1, #23
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001582:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001586:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800158a:	4b3b      	ldr	r3, [pc, #236]	; (8001678 <HAL_UART_MspInit+0x290>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800158c:	4628      	mov	r0, r5
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001592:	e9c5 6606 	strd	r6, r6, [r5, #24]
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001596:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 800159a:	612e      	str	r6, [r5, #16]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800159c:	622e      	str	r6, [r5, #32]
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 800159e:	636e      	str	r6, [r5, #52]	; 0x34
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_RX;
 80015a0:	6069      	str	r1, [r5, #4]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80015a2:	616a      	str	r2, [r5, #20]
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80015a4:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 80015a6:	f002 fa63 	bl	8003a70 <HAL_DMA_Init>
 80015aa:	2800      	cmp	r0, #0
 80015ac:	d14e      	bne.n	800164c <HAL_UART_MspInit+0x264>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80015ae:	2110      	movs	r1, #16
 80015b0:	4830      	ldr	r0, [pc, #192]	; (8001674 <HAL_UART_MspInit+0x28c>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel2);
 80015b2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80015b6:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 80015b8:	f002 fdca 	bl	8004150 <HAL_DMA_ConfigChannelAttributes>
 80015bc:	2800      	cmp	r0, #0
 80015be:	d142      	bne.n	8001646 <HAL_UART_MspInit+0x25e>
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80015c4:	4d2d      	ldr	r5, [pc, #180]	; (800167c <HAL_UART_MspInit+0x294>)
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80015c6:	2300      	movs	r3, #0
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART2_TX;
 80015c8:	2018      	movs	r0, #24
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 80015ca:	2201      	movs	r2, #1
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015cc:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 80015ce:	2108      	movs	r1, #8
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80015d0:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80015d4:	e9c5 3305 	strd	r3, r3, [r5, #20]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80015d8:	e9c5 3307 	strd	r3, r3, [r5, #28]
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80015dc:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 80015e0:	636b      	str	r3, [r5, #52]	; 0x34
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_UART_MspInit+0x298>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80015e4:	4628      	mov	r0, r5
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 80015e6:	e9c5 2209 	strd	r2, r2, [r5, #36]	; 0x24
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 80015ea:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 80015ec:	6129      	str	r1, [r5, #16]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 80015ee:	f002 fa3f 	bl	8003a70 <HAL_DMA_Init>
 80015f2:	bb28      	cbnz	r0, 8001640 <HAL_UART_MspInit+0x258>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80015f4:	2110      	movs	r1, #16
 80015f6:	4821      	ldr	r0, [pc, #132]	; (800167c <HAL_UART_MspInit+0x294>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel0);
 80015f8:	67e5      	str	r5, [r4, #124]	; 0x7c
 80015fa:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 80015fc:	f002 fda8 	bl	8004150 <HAL_DMA_ConfigChannelAttributes>
 8001600:	b9d8      	cbnz	r0, 800163a <HAL_UART_MspInit+0x252>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001602:	2200      	movs	r2, #0
 8001604:	2105      	movs	r1, #5
 8001606:	203b      	movs	r0, #59	; 0x3b
 8001608:	f002 f980 	bl	800390c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800160c:	203b      	movs	r0, #59	; 0x3b
 800160e:	f002 f9bb 	bl	8003988 <HAL_NVIC_EnableIRQ>
}
 8001612:	b04d      	add	sp, #308	; 0x134
 8001614:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001616:	f000 fc0f 	bl	8001e38 <Error_Handler>
 800161a:	e775      	b.n	8001508 <HAL_UART_MspInit+0x120>
      Error_Handler();
 800161c:	f000 fc0c 	bl	8001e38 <Error_Handler>
 8001620:	e768      	b.n	80014f4 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8001622:	f000 fc09 	bl	8001e38 <Error_Handler>
 8001626:	e74a      	b.n	80014be <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001628:	f000 fc06 	bl	8001e38 <Error_Handler>
 800162c:	e73e      	b.n	80014ac <HAL_UART_MspInit+0xc4>
      Error_Handler();
 800162e:	f000 fc03 	bl	8001e38 <Error_Handler>
 8001632:	e6fb      	b.n	800142c <HAL_UART_MspInit+0x44>
      Error_Handler();
 8001634:	f000 fc00 	bl	8001e38 <Error_Handler>
 8001638:	e77a      	b.n	8001530 <HAL_UART_MspInit+0x148>
      Error_Handler();
 800163a:	f000 fbfd 	bl	8001e38 <Error_Handler>
 800163e:	e7e0      	b.n	8001602 <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8001640:	f000 fbfa 	bl	8001e38 <Error_Handler>
 8001644:	e7d6      	b.n	80015f4 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8001646:	f000 fbf7 	bl	8001e38 <Error_Handler>
 800164a:	e7b9      	b.n	80015c0 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 800164c:	f000 fbf4 	bl	8001e38 <Error_Handler>
 8001650:	e7ad      	b.n	80015ae <HAL_UART_MspInit+0x1c6>
 8001652:	bf00      	nop
 8001654:	40004c00 	.word	0x40004c00
 8001658:	40004400 	.word	0x40004400
 800165c:	44020c00 	.word	0x44020c00
 8001660:	42020000 	.word	0x42020000
 8001664:	20000a60 	.word	0x20000a60
 8001668:	400201d0 	.word	0x400201d0
 800166c:	20000970 	.word	0x20000970
 8001670:	400200d0 	.word	0x400200d0
 8001674:	200009e8 	.word	0x200009e8
 8001678:	40020150 	.word	0x40020150
 800167c:	200008f8 	.word	0x200008f8
 8001680:	40020050 	.word	0x40020050

08001684 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop

08001688 <HAL_UARTEx_RxEventCallback>:
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{

}
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop

0800168c <HAL_UART_ErrorCallback>:
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop

08001690 <myputstr>:
	return ch;	
}

void myputstr(const char *str)
{
	while(*str) {
 8001690:	7801      	ldrb	r1, [r0, #0]
 8001692:	b141      	cbz	r1, 80016a6 <myputstr+0x16>
	while((UART4->ISR&0X40)==0);//循环发送,直到发送完毕   
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <myputstr+0x18>)
 8001696:	69d3      	ldr	r3, [r2, #28]
 8001698:	065b      	lsls	r3, r3, #25
 800169a:	d5fc      	bpl.n	8001696 <myputstr+0x6>
	UART4->TDR = (uint8_t) ch;
 800169c:	6291      	str	r1, [r2, #40]	; 0x28
	while(*str) {
 800169e:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80016a2:	2900      	cmp	r1, #0
 80016a4:	d1f7      	bne.n	8001696 <myputstr+0x6>
		//HAL_UART_Transmit(&huart1, (uint8_t *)str, 1, 0xFFFF);
		myputchar(*str);
		str++;
	}

}
 80016a6:	4770      	bx	lr
 80016a8:	40004c00 	.word	0x40004c00

080016ac <Draw_Init>:
{
#ifdef FERRRTOS_FLAG
	/* 创建mutex */
	g_spi_lcd_lock = xSemaphoreCreateMutex();
#endif
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 80016ac:	4901      	ldr	r1, [pc, #4]	; (80016b4 <Draw_Init+0x8>)
 80016ae:	4802      	ldr	r0, [pc, #8]	; (80016b8 <Draw_Init+0xc>)
 80016b0:	f002 b81e 	b.w	80036f0 <LCD_GetInfo>
 80016b4:	20000c04 	.word	0x20000c04
 80016b8:	20000c08 	.word	0x20000c08

080016bc <Draw_Clear>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Clear(uint32_t dwColor)
{
 80016bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016be:	4606      	mov	r6, r0
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);

    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 80016c0:	2100      	movs	r1, #0
 80016c2:	4f17      	ldr	r7, [pc, #92]	; (8001720 <Draw_Clear+0x64>)
    g = g >> 2;
 80016c4:	f3c6 2485 	ubfx	r4, r6, #10, #6
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 80016c8:	4d16      	ldr	r5, [pc, #88]	; (8001724 <Draw_Clear+0x68>)
    r = r >> 3;
 80016ca:	f3c6 4cc4 	ubfx	ip, r6, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80016ce:	0164      	lsls	r4, r4, #5
 80016d0:	ea44 24cc 	orr.w	r4, r4, ip, lsl #11
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 80016d4:	682b      	ldr	r3, [r5, #0]
 80016d6:	683a      	ldr	r2, [r7, #0]
    b = b >> 2;
 80016d8:	f3c6 0685 	ubfx	r6, r6, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80016dc:	4334      	orrs	r4, r6
{
 80016de:	b083      	sub	sp, #12
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 80016e0:	3b01      	subs	r3, #1
 80016e2:	4608      	mov	r0, r1
 80016e4:	3a01      	subs	r2, #1
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 80016e6:	ba64      	rev16	r4, r4
 80016e8:	f8ad 4006 	strh.w	r4, [sp, #6]
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 80016ec:	f002 f80c 	bl	8003708 <LCD_SetWindows>
    LCD_SetDataLine();
 80016f0:	f001 fea6 	bl	8003440 <LCD_SetDataLine>
    
    for(uint32_t x = 0; x < g_lcd_width; x++)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2600      	movs	r6, #0
 80016f8:	b17b      	cbz	r3, 800171a <Draw_Clear+0x5e>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 80016fa:	682b      	ldr	r3, [r5, #0]
 80016fc:	2400      	movs	r4, #0
 80016fe:	b143      	cbz	r3, 8001712 <Draw_Clear+0x56>
            LCD_WriteDatas((uint8_t *)&wColor, 2);
 8001700:	2102      	movs	r1, #2
 8001702:	f10d 0006 	add.w	r0, sp, #6
 8001706:	f001 fea3 	bl	8003450 <LCD_WriteDatas>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	3401      	adds	r4, #1
 800170e:	42a3      	cmp	r3, r4
 8001710:	d8f6      	bhi.n	8001700 <Draw_Clear+0x44>
    for(uint32_t x = 0; x < g_lcd_width; x++)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	3601      	adds	r6, #1
 8001716:	42b3      	cmp	r3, r6
 8001718:	d8ef      	bhi.n	80016fa <Draw_Clear+0x3e>
}
 800171a:	b003      	add	sp, #12
 800171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800171e:	bf00      	nop
 8001720:	20000c08 	.word	0x20000c08
 8001724:	20000c04 	.word	0x20000c04

08001728 <Draw_Pixel>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Pixel(int x, int y, uint32_t dwColor)
{
 8001728:	b510      	push	{r4, lr}
 800172a:	4696      	mov	lr, r2
    g = g >> 2;
 800172c:	f3ce 2c85 	ubfx	ip, lr, #10, #6
    r = r >> 3;
 8001730:	f3ce 44c4 	ubfx	r4, lr, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001734:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    b = b >> 2;
 8001738:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800173c:	ea4c 2cc4 	orr.w	ip, ip, r4, lsl #11
 8001740:	ea4c 0c0e 	orr.w	ip, ip, lr
{
 8001744:	b082      	sub	sp, #8
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 800174a:	fa9c fc9c 	rev16.w	ip, ip
 800174e:	f8ad c006 	strh.w	ip, [sp, #6]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001752:	f001 ffd9 	bl	8003708 <LCD_SetWindows>
    LCD_SetDataLine();
 8001756:	f001 fe73 	bl	8003440 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 800175a:	2102      	movs	r1, #2
 800175c:	f10d 0006 	add.w	r0, sp, #6
 8001760:	f001 fe76 	bl	8003450 <LCD_WriteDatas>
    bitmap.width = 1;
    bitmap.height = 1;
    bitmap.datas = (uint8_t *)&wColor;
    
    Draw_Region(x, y, &bitmap);
}
 8001764:	b002      	add	sp, #8
 8001766:	bd10      	pop	{r4, pc}

08001768 <Draw_ASCII>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_ASCII(uint32_t x, uint32_t y, char c, uint32_t front_color, uint32_t back_color)
{
 8001768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800176c:	b0c0      	sub	sp, #256	; 0x100
 800176e:	466e      	mov	r6, sp
 8001770:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8001772:	f50d 7880 	add.w	r8, sp, #256	; 0x100
    g = g >> 2;
 8001776:	f3c4 2585 	ubfx	r5, r4, #10, #6
    r = r >> 3;
 800177a:	f3c4 47c4 	ubfx	r7, r4, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800177e:	016d      	lsls	r5, r5, #5
 8001780:	ea45 25c7 	orr.w	r5, r5, r7, lsl #11
    b = b >> 2;
 8001784:	f3c4 0485 	ubfx	r4, r4, #2, #6
 8001788:	4f1a      	ldr	r7, [pc, #104]	; (80017f4 <Draw_ASCII+0x8c>)
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800178a:	4325      	orrs	r5, r4
    g = g >> 2;
 800178c:	f3c3 2485 	ubfx	r4, r3, #10, #6
 8001790:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001794:	0164      	lsls	r4, r4, #5
    r = r >> 3;
 8001796:	f3c3 42c4 	ubfx	r2, r3, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800179a:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
    b = b >> 2;
 800179e:	f3c3 0385 	ubfx	r3, r3, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80017a2:	431c      	orrs	r4, r3
 80017a4:	ba6d      	rev16	r5, r5
 80017a6:	ba64      	rev16	r4, r4
 80017a8:	b2ad      	uxth	r5, r5
    wColor = (wColor >> 8) | (wColor << 8);
 80017aa:	b2a4      	uxth	r4, r4
    for (i = 0; i < 16; i++)
    {
        data = fontdata_8x16[c*16+i];
        for (bit = 7; bit >= 0; bit--)
        {
            if (data & (1<<bit))
 80017ac:	46b4      	mov	ip, r6
        for (bit = 7; bit >= 0; bit--)
 80017ae:	2307      	movs	r3, #7
        data = fontdata_8x16[c*16+i];
 80017b0:	f817 2b01 	ldrb.w	r2, [r7], #1
            if (data & (1<<bit))
 80017b4:	fa42 fe03 	asr.w	lr, r2, r3
 80017b8:	f01e 0f01 	tst.w	lr, #1
 80017bc:	bf14      	ite	ne
 80017be:	46a6      	movne	lr, r4
 80017c0:	46ae      	moveq	lr, r5
        for (bit = 7; bit >= 0; bit--)
 80017c2:	3b01      	subs	r3, #1
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
            else
            {
                color = back_color;
            }
            
            buf[i * 8 + (7-bit)] = color;
 80017c8:	f82c eb02 	strh.w	lr, [ip], #2
        for (bit = 7; bit >= 0; bit--)
 80017cc:	d1f2      	bne.n	80017b4 <Draw_ASCII+0x4c>
    for (i = 0; i < 16; i++)
 80017ce:	3610      	adds	r6, #16
 80017d0:	4546      	cmp	r6, r8
 80017d2:	d1eb      	bne.n	80017ac <Draw_ASCII+0x44>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80017d4:	f101 030f 	add.w	r3, r1, #15
 80017d8:	1dc2      	adds	r2, r0, #7
 80017da:	f001 ff95 	bl	8003708 <LCD_SetWindows>
    LCD_SetDataLine();
 80017de:	f001 fe2f 	bl	8003440 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80017e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017e6:	4668      	mov	r0, sp
 80017e8:	f001 fe32 	bl	8003450 <LCD_WriteDatas>
    bitmap.datas = (uint8_t *)buf;
    
    Draw_Region(x, y, &bitmap);

    return 8; /* 这个字符宽度为8 */
}
 80017ec:	2008      	movs	r0, #8
 80017ee:	b040      	add	sp, #256	; 0x100
 80017f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017f4:	0800a898 	.word	0x0800a898

080017f8 <Draw_String>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_String(uint32_t x, uint32_t y, char *str, uint32_t front_color, uint32_t back_color)
{
 80017f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017fc:	468b      	mov	fp, r1
 80017fe:	469a      	mov	sl, r3
    size_t i;
    int line_width = 0;
 8001800:	2700      	movs	r7, #0
{
 8001802:	b085      	sub	sp, #20
 8001804:	4605      	mov	r5, r0
    for (i = 0; i < strlen(str); i++)
 8001806:	4610      	mov	r0, r2
{
 8001808:	4616      	mov	r6, r2
    for (i = 0; i < strlen(str); i++)
 800180a:	463c      	mov	r4, r7
 800180c:	f008 fe00 	bl	800a410 <strlen>
            if (x >= 8)
                x -= 8;
        }
        else
        {
            if (x + 8 >= g_lcd_width)
 8001810:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800188c <Draw_String+0x94>
 8001814:	4653      	mov	r3, sl
            {
                x = 0;
                y += 16;
            }

            if (y + 16 >= g_lcd_height)
 8001816:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001890 <Draw_String+0x98>
 800181a:	46da      	mov	sl, fp
 800181c:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    for (i = 0; i < strlen(str); i++)
 8001820:	e022      	b.n	8001868 <Draw_String+0x70>
        else if (str[i] == '\n')
 8001822:	2a0a      	cmp	r2, #10
 8001824:	d027      	beq.n	8001876 <Draw_String+0x7e>
        else if (str[i] == '\b')
 8001826:	2a08      	cmp	r2, #8
 8001828:	d028      	beq.n	800187c <Draw_String+0x84>
            if (x + 8 >= g_lcd_width)
 800182a:	f8d9 1000 	ldr.w	r1, [r9]
 800182e:	f105 0008 	add.w	r0, r5, #8
 8001832:	4288      	cmp	r0, r1
                y += 16;
 8001834:	bf28      	it	cs
 8001836:	f10a 0a10 	addcs.w	sl, sl, #16
            if (y + 16 >= g_lcd_height)
 800183a:	f8d8 1000 	ldr.w	r1, [r8]
 800183e:	f10a 0010 	add.w	r0, sl, #16
                x = 0;
 8001842:	bf28      	it	cs
 8001844:	2500      	movcs	r5, #0
            if (y + 16 >= g_lcd_height)
 8001846:	4288      	cmp	r0, r1
 8001848:	d21c      	bcs.n	8001884 <Draw_String+0x8c>
                return line_width;

            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 800184a:	4651      	mov	r1, sl
 800184c:	4628      	mov	r0, r5
 800184e:	f8cd b000 	str.w	fp, [sp]
 8001852:	9303      	str	r3, [sp, #12]
 8001854:	f7ff ff88 	bl	8001768 <Draw_ASCII>
 8001858:	4602      	mov	r2, r0
    for (i = 0; i < strlen(str); i++)
 800185a:	4630      	mov	r0, r6
            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 800185c:	4417      	add	r7, r2
    for (i = 0; i < strlen(str); i++)
 800185e:	f008 fdd7 	bl	800a410 <strlen>
 8001862:	9b03      	ldr	r3, [sp, #12]
            x += 8;
 8001864:	3508      	adds	r5, #8
    for (i = 0; i < strlen(str); i++)
 8001866:	3401      	adds	r4, #1
 8001868:	4284      	cmp	r4, r0
 800186a:	d20b      	bcs.n	8001884 <Draw_String+0x8c>
        if (str[i] == '\r')
 800186c:	5d32      	ldrb	r2, [r6, r4]
 800186e:	2a0d      	cmp	r2, #13
 8001870:	d1d7      	bne.n	8001822 <Draw_String+0x2a>
            x = 0;
 8001872:	2500      	movs	r5, #0
 8001874:	e7f7      	b.n	8001866 <Draw_String+0x6e>
            y += 16;
 8001876:	f10a 0a10 	add.w	sl, sl, #16
 800187a:	e7f4      	b.n	8001866 <Draw_String+0x6e>
            if (x >= 8)
 800187c:	2d07      	cmp	r5, #7
 800187e:	d9f2      	bls.n	8001866 <Draw_String+0x6e>
                x -= 8;
 8001880:	3d08      	subs	r5, #8
 8001882:	e7f0      	b.n	8001866 <Draw_String+0x6e>
        }
    }

    return line_width;
}
 8001884:	4638      	mov	r0, r7
 8001886:	b005      	add	sp, #20
 8001888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800188c:	20000c08 	.word	0x20000c08
 8001890:	20000c04 	.word	0x20000c04

08001894 <Draw_Line>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Line(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint32_t front_color)
{
 8001894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t t;
    uint32_t yerr=0,delta_x,delta_y;
	uint32_t xerr = 0;
 8001898:	2400      	movs	r4, #0
{
 800189a:	b087      	sub	sp, #28
 800189c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    int incx,incy,uRow,uCol; 
    delta_x=x2-x1; //计算坐标增量
    delta_y=y2-y1; 
    uRow=x1; 
    uCol=y1; 
    if(delta_x>0)incx=1; //设置单步方向
 800189e:	ebb2 0900 	subs.w	r9, r2, r0
    g = g >> 2;
 80018a2:	f3c6 2585 	ubfx	r5, r6, #10, #6
    r = r >> 3;
 80018a6:	f3c6 47c4 	ubfx	r7, r6, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80018aa:	ea4f 1545 	mov.w	r5, r5, lsl #5
    uRow=x1; 
 80018ae:	4602      	mov	r2, r0
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80018b0:	ea45 25c7 	orr.w	r5, r5, r7, lsl #11
    if(delta_x>0)incx=1; //设置单步方向
 80018b4:	bf14      	ite	ne
 80018b6:	2001      	movne	r0, #1
 80018b8:	4620      	moveq	r0, r4
    b = b >> 2;
 80018ba:	f3c6 0685 	ubfx	r6, r6, #2, #6
    else if(delta_x==0)incx=0;//垂直线
    else {incx=-1;delta_x=-delta_x;} 
    if(delta_y>0)incy=1; 
 80018be:	ebb3 0801 	subs.w	r8, r3, r1
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80018c2:	ea45 0506 	orr.w	r5, r5, r6
    uCol=y1; 
 80018c6:	460b      	mov	r3, r1
    if(delta_y>0)incy=1; 
 80018c8:	bf14      	ite	ne
 80018ca:	2101      	movne	r1, #1
 80018cc:	4621      	moveq	r1, r4
 80018ce:	45c1      	cmp	r9, r8
 80018d0:	464e      	mov	r6, r9
 80018d2:	ba6d      	rev16	r5, r5
 80018d4:	bf38      	it	cc
 80018d6:	4646      	movcc	r6, r8
 80018d8:	fa1f fb85 	uxth.w	fp, r5
    else if(delta_y==0)incy=0;//水平线
    else{incy=-1;delta_y=-delta_y;} 
    if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
    else distance=delta_y; 
    for(t=0;t<=distance+1;t++ )//画线输出
 80018dc:	4627      	mov	r7, r4
    uint32_t yerr=0,delta_x,delta_y;
 80018de:	4625      	mov	r5, r4
    if(delta_x>0)incx=1; //设置单步方向
 80018e0:	9002      	str	r0, [sp, #8]
    if(delta_y>0)incy=1; 
 80018e2:	9103      	str	r1, [sp, #12]
    for(t=0;t<=distance+1;t++ )//画线输出
 80018e4:	f106 0a01 	add.w	sl, r6, #1
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80018e8:	4619      	mov	r1, r3
 80018ea:	4610      	mov	r0, r2
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	9200      	str	r2, [sp, #0]
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 80018f0:	f8ad b016 	strh.w	fp, [sp, #22]
    {  
        Draw_Pixel(uRow, uCol, front_color);//画点
        xerr+=delta_x ; 
 80018f4:	444c      	add	r4, r9
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80018f6:	f001 ff07 	bl	8003708 <LCD_SetWindows>
    LCD_SetDataLine();
 80018fa:	f001 fda1 	bl	8003440 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80018fe:	2102      	movs	r1, #2
 8001900:	f10d 0016 	add.w	r0, sp, #22
 8001904:	f001 fda4 	bl	8003450 <LCD_WriteDatas>
        yerr+=delta_y ; 
        if(xerr>distance) 
 8001908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800190c:	42a6      	cmp	r6, r4
    for(t=0;t<=distance+1;t++ )//画线输出
 800190e:	f107 0701 	add.w	r7, r7, #1
        yerr+=delta_y ; 
 8001912:	4445      	add	r5, r8
        if(xerr>distance) 
 8001914:	d202      	bcs.n	800191c <Draw_Line+0x88>
        { 
            xerr-=distance; 
            uRow+=incx; 
 8001916:	9902      	ldr	r1, [sp, #8]
            xerr-=distance; 
 8001918:	1ba4      	subs	r4, r4, r6
            uRow+=incx; 
 800191a:	440a      	add	r2, r1
        } 
        if(yerr>distance) 
 800191c:	42ae      	cmp	r6, r5
 800191e:	d202      	bcs.n	8001926 <Draw_Line+0x92>
        { 
            yerr-=distance; 
            uCol+=incy; 
 8001920:	9903      	ldr	r1, [sp, #12]
            yerr-=distance; 
 8001922:	1bad      	subs	r5, r5, r6
            uCol+=incy; 
 8001924:	440b      	add	r3, r1
    for(t=0;t<=distance+1;t++ )//画线输出
 8001926:	4557      	cmp	r7, sl
 8001928:	d9de      	bls.n	80018e8 <Draw_Line+0x54>
        } 
    }  
} 
 800192a:	b007      	add	sp, #28
 800192c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001930 <Draw_Rectangle>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Rectangle(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint32_t front_color)
{
 8001930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001934:	461c      	mov	r4, r3
 8001936:	4606      	mov	r6, r0
 8001938:	460d      	mov	r5, r1
 800193a:	4690      	mov	r8, r2
 800193c:	b082      	sub	sp, #8
 800193e:	9f08      	ldr	r7, [sp, #32]
    Draw_Line(x1,y1,x2,y1,front_color);
 8001940:	460b      	mov	r3, r1
 8001942:	9700      	str	r7, [sp, #0]
 8001944:	f7ff ffa6 	bl	8001894 <Draw_Line>
    Draw_Line(x1,y1,x1,y2,front_color);
 8001948:	4623      	mov	r3, r4
 800194a:	4632      	mov	r2, r6
 800194c:	4629      	mov	r1, r5
 800194e:	4630      	mov	r0, r6
 8001950:	9700      	str	r7, [sp, #0]
 8001952:	f7ff ff9f 	bl	8001894 <Draw_Line>
    Draw_Line(x1,y2,x2,y2,front_color);
 8001956:	4630      	mov	r0, r6
 8001958:	4623      	mov	r3, r4
 800195a:	4642      	mov	r2, r8
 800195c:	4621      	mov	r1, r4
 800195e:	9700      	str	r7, [sp, #0]
 8001960:	f7ff ff98 	bl	8001894 <Draw_Line>
    Draw_Line(x2,y1,x2,y2,front_color);
 8001964:	4623      	mov	r3, r4
 8001966:	4642      	mov	r2, r8
 8001968:	4629      	mov	r1, r5
 800196a:	4640      	mov	r0, r8
 800196c:	9708      	str	r7, [sp, #32]
}
 800196e:	b002      	add	sp, #8
 8001970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Draw_Line(x2,y1,x2,y2,front_color);
 8001974:	f7ff bf8e 	b.w	8001894 <Draw_Line>

08001978 <Draw_Circle>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Circle(uint32_t x0, uint32_t y0, uint32_t r, uint32_t front_color)
{
 8001978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800197c:	461d      	mov	r5, r3
    int a,b;
    int di;
    a=0;b=r;      
    di=3-(r<<1);             //判断下个点位置的标志
 800197e:	0053      	lsls	r3, r2, #1
{
 8001980:	b089      	sub	sp, #36	; 0x24
    di=3-(r<<1);             //判断下个点位置的标志
 8001982:	f1c3 0303 	rsb	r3, r3, #3
    while(a<=b)
 8001986:	2a00      	cmp	r2, #0
{
 8001988:	e9cd 0100 	strd	r0, r1, [sp]
    di=3-(r<<1);             //判断下个点位置的标志
 800198c:	9302      	str	r3, [sp, #8]
    while(a<=b)
 800198e:	db71      	blt.n	8001a74 <Draw_Circle+0xfc>
    g = g >> 2;
 8001990:	f3c5 2385 	ubfx	r3, r5, #10, #6
 8001994:	4616      	mov	r6, r2
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001996:	015b      	lsls	r3, r3, #5
    r = r >> 3;
 8001998:	f3c5 42c4 	ubfx	r2, r5, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800199c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    b = b >> 2;
 80019a0:	f3c5 0285 	ubfx	r2, r5, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80019a4:	4313      	orrs	r3, r2
 80019a6:	ba5b      	rev16	r3, r3
 80019a8:	b29b      	uxth	r3, r3
    a=0;b=r;      
 80019aa:	2400      	movs	r4, #0
 80019ac:	9305      	str	r3, [sp, #20]
 80019ae:	e008      	b.n	80019c2 <Draw_Circle+0x4a>
        a++;
        //使用Bresenham算法画圆
        if(di<0)di +=4*a+6;   
        else
        {
            di+=10+4*(a-b);   
 80019b0:	9a02      	ldr	r2, [sp, #8]
 80019b2:	1ba3      	subs	r3, r4, r6
 80019b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            b--;
 80019b8:	3e01      	subs	r6, #1
            di+=10+4*(a-b);   
 80019ba:	330a      	adds	r3, #10
    while(a<=b)
 80019bc:	42a6      	cmp	r6, r4
            di+=10+4*(a-b);   
 80019be:	9302      	str	r3, [sp, #8]
    while(a<=b)
 80019c0:	db58      	blt.n	8001a74 <Draw_Circle+0xfc>
        Draw_Pixel(x0+a, y0-b, front_color);             //5
 80019c2:	9f00      	ldr	r7, [sp, #0]
 80019c4:	9b01      	ldr	r3, [sp, #4]
 80019c6:	eb07 0904 	add.w	r9, r7, r4
 80019ca:	eba3 0b06 	sub.w	fp, r3, r6
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 80019ce:	9f05      	ldr	r7, [sp, #20]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80019d0:	464a      	mov	r2, r9
 80019d2:	4659      	mov	r1, fp
 80019d4:	4648      	mov	r0, r9
 80019d6:	465b      	mov	r3, fp
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 80019d8:	f8ad 701e 	strh.w	r7, [sp, #30]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80019dc:	f001 fe94 	bl	8003708 <LCD_SetWindows>
    LCD_SetDataLine();
 80019e0:	9b01      	ldr	r3, [sp, #4]
 80019e2:	eba3 0a04 	sub.w	sl, r3, r4
 80019e6:	f001 fd2b 	bl	8003440 <LCD_SetDataLine>
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 80019ea:	9f00      	ldr	r7, [sp, #0]
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80019ec:	2102      	movs	r1, #2
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 80019ee:	19f7      	adds	r7, r6, r7
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80019f0:	f10d 001e 	add.w	r0, sp, #30
 80019f4:	f001 fd2c 	bl	8003450 <LCD_WriteDatas>
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 80019f8:	eb0a 0344 	add.w	r3, sl, r4, lsl #1
 80019fc:	4638      	mov	r0, r7
 80019fe:	462a      	mov	r2, r5
 8001a00:	4651      	mov	r1, sl
 8001a02:	9304      	str	r3, [sp, #16]
 8001a04:	9703      	str	r7, [sp, #12]
 8001a06:	f7ff fe8f 	bl	8001728 <Draw_Pixel>
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 8001a0a:	9b04      	ldr	r3, [sp, #16]
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 8001a0c:	9a01      	ldr	r2, [sp, #4]
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 8001a0e:	4619      	mov	r1, r3
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 8001a10:	eb06 0802 	add.w	r8, r6, r2
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 8001a14:	9803      	ldr	r0, [sp, #12]
 8001a16:	462a      	mov	r2, r5
 8001a18:	f7ff fe86 	bl	8001728 <Draw_Pixel>
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 8001a1c:	0067      	lsls	r7, r4, #1
 8001a1e:	4641      	mov	r1, r8
 8001a20:	4648      	mov	r0, r9
 8001a22:	462a      	mov	r2, r5
 8001a24:	eba9 0707 	sub.w	r7, r9, r7
 8001a28:	f8cd 800c 	str.w	r8, [sp, #12]
 8001a2c:	f7ff fe7c 	bl	8001728 <Draw_Pixel>
        Draw_Pixel(x0-b, y0+a, front_color);             
 8001a30:	9b00      	ldr	r3, [sp, #0]
        Draw_Pixel(x0-a, y0+b, front_color);             //1       
 8001a32:	462a      	mov	r2, r5
 8001a34:	4638      	mov	r0, r7
 8001a36:	9903      	ldr	r1, [sp, #12]
        Draw_Pixel(x0-b, y0+a, front_color);             
 8001a38:	eba3 0806 	sub.w	r8, r3, r6
        Draw_Pixel(x0-a, y0+b, front_color);             //1       
 8001a3c:	f7ff fe74 	bl	8001728 <Draw_Pixel>
        Draw_Pixel(x0-b, y0+a, front_color);             
 8001a40:	9b04      	ldr	r3, [sp, #16]
 8001a42:	462a      	mov	r2, r5
 8001a44:	4619      	mov	r1, r3
 8001a46:	4640      	mov	r0, r8
 8001a48:	f7ff fe6e 	bl	8001728 <Draw_Pixel>
        Draw_Pixel(x0-a, y0-b, front_color);             //2             
 8001a4c:	462a      	mov	r2, r5
 8001a4e:	4659      	mov	r1, fp
 8001a50:	4638      	mov	r0, r7
 8001a52:	f7ff fe69 	bl	8001728 <Draw_Pixel>
        Draw_Pixel(x0-b, y0-a, front_color);             //7                 
 8001a56:	462a      	mov	r2, r5
 8001a58:	4651      	mov	r1, sl
 8001a5a:	4640      	mov	r0, r8
 8001a5c:	f7ff fe64 	bl	8001728 <Draw_Pixel>
        if(di<0)di +=4*a+6;   
 8001a60:	9b02      	ldr	r3, [sp, #8]
        a++;
 8001a62:	3401      	adds	r4, #1
        if(di<0)di +=4*a+6;   
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001a6a:	daa1      	bge.n	80019b0 <Draw_Circle+0x38>
 8001a6c:	3306      	adds	r3, #6
    while(a<=b)
 8001a6e:	42a6      	cmp	r6, r4
        if(di<0)di +=4*a+6;   
 8001a70:	9302      	str	r3, [sp, #8]
    while(a<=b)
 8001a72:	daa6      	bge.n	80019c2 <Draw_Circle+0x4a>
        }                           
    }
} 
 8001a74:	b009      	add	sp, #36	; 0x24
 8001a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a7a:	bf00      	nop

08001a7c <Draw_ChineseFont>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_ChineseFont(uint32_t x, uint32_t y, char *cn, uint32_t front_color, uint32_t back_color)
{
 8001a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a80:	ed2d 8b02 	vpush	{d8}
    uint32_t x0=x;
    uint32_t y0=y;
    static uint8_t *buf;
    BitMap bitmap; 

    if (!buf)
 8001a84:	4c5d      	ldr	r4, [pc, #372]	; (8001bfc <Draw_ChineseFont+0x180>)
{
 8001a86:	b083      	sub	sp, #12
    if (!buf)
 8001a88:	6824      	ldr	r4, [r4, #0]
{
 8001a8a:	4606      	mov	r6, r0
    if (!buf)
 8001a8c:	9400      	str	r4, [sp, #0]
{
 8001a8e:	461c      	mov	r4, r3
    if (!buf)
 8001a90:	9b00      	ldr	r3, [sp, #0]
{
 8001a92:	460f      	mov	r7, r1
 8001a94:	4615      	mov	r5, r2
 8001a96:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!buf)
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80a4 	beq.w	8001be8 <Draw_ChineseFont+0x16c>
 8001aa0:	1ceb      	adds	r3, r5, #3
    g = g >> 2;
 8001aa2:	f3c8 2a85 	ubfx	sl, r8, #10, #6
 8001aa6:	f3c4 2985 	ubfx	r9, r4, #10, #6
 8001aaa:	9300      	str	r3, [sp, #0]
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001aac:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    r = r >> 3;
 8001ab0:	f3c8 43c4 	ubfx	r3, r8, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001ab4:	ea4a 2ac3 	orr.w	sl, sl, r3, lsl #11
 8001ab8:	ea4f 1949 	mov.w	r9, r9, lsl #5
    r = r >> 3;
 8001abc:	f3c4 43c4 	ubfx	r3, r4, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001ac0:	ea49 29c3 	orr.w	r9, r9, r3, lsl #11
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001ac4:	f107 031c 	add.w	r3, r7, #28
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001ac8:	463d      	mov	r5, r7
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001aca:	ee08 3a10 	vmov	s16, r3
    b = b >> 2;
 8001ace:	f3c8 0885 	ubfx	r8, r8, #2, #6
 8001ad2:	f3c4 0485 	ubfx	r4, r4, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001ad6:	ea4a 0a08 	orr.w	sl, sl, r8
 8001ada:	ea49 0904 	orr.w	r9, r9, r4
 8001ade:	fa9a fa9a 	rev16.w	sl, sl
 8001ae2:	fa99 f999 	rev16.w	r9, r9
 8001ae6:	fa1f fa8a 	uxth.w	sl, sl
 8001aea:	fa1f f989 	uxth.w	r9, r9
        buf = malloc(32*29*2);
        if (!buf)
            return;
    }
    
    while (*cn != '\0')
 8001aee:	9b00      	ldr	r3, [sp, #0]
 8001af0:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 8001af4:	2900      	cmp	r1, #0
 8001af6:	d072      	beq.n	8001bde <Draw_ChineseFont+0x162>
    {
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8001af8:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <Draw_ChineseFont+0x184>)
 8001afa:	4634      	mov	r4, r6
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d05d      	beq.n	8001bbe <Draw_ChineseFont+0x142>
 8001b02:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001c08 <Draw_ChineseFont+0x18c>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001b06:	f106 021f 	add.w	r2, r6, #31
 8001b0a:	e008      	b.n	8001b1e <Draw_ChineseFont+0xa2>
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8001b0c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8001b10:	f10b 0b78 	add.w	fp, fp, #120	; 0x78
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d052      	beq.n	8001bbe <Draw_ChineseFont+0x142>
        {   //wordNum扫描字库CnChar32x29的字数
            if ((CnChar32x29[wordNum].Index[0]==*cn)
 8001b18:	9900      	ldr	r1, [sp, #0]
 8001b1a:	f811 1c03 	ldrb.w	r1, [r1, #-3]
 8001b1e:	4299      	cmp	r1, r3
 8001b20:	d1f4      	bne.n	8001b0c <Draw_ChineseFont+0x90>
                 &&(CnChar32x29[wordNum].Index[1]==*(cn+1))
 8001b22:	9b00      	ldr	r3, [sp, #0]
 8001b24:	f81b 1c76 	ldrb.w	r1, [fp, #-118]
 8001b28:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8001b2c:	4299      	cmp	r1, r3
 8001b2e:	d1ed      	bne.n	8001b0c <Draw_ChineseFont+0x90>
                 &&(CnChar32x29[wordNum].Index[2]==*(cn+2)))
 8001b30:	9b00      	ldr	r3, [sp, #0]
 8001b32:	f81b 1c75 	ldrb.w	r1, [fp, #-117]
 8001b36:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8001b3a:	4299      	cmp	r1, r3
 8001b3c:	d1e6      	bne.n	8001b0c <Draw_ChineseFont+0x90>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, front_color);
                        }                       
                        else
                        {
                            //Draw_Pixel(x,y,back_color);
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, back_color);
 8001b3e:	4b2f      	ldr	r3, [pc, #188]	; (8001bfc <Draw_ChineseFont+0x180>)
 8001b40:	f1ab 0e74 	sub.w	lr, fp, #116	; 0x74
 8001b44:	f8d3 8000 	ldr.w	r8, [r3]
                    color=CnChar32x29[wordNum].Msk[i];
 8001b48:	f04f 0c08 	mov.w	ip, #8
 8001b4c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
                    for(j=0;j<8;j++) 
 8001b50:	e010      	b.n	8001b74 <Draw_ChineseFont+0xf8>
    tmpBuf[y*w + x] = dwColor;    
 8001b52:	f828 9013 	strh.w	r9, [r8, r3, lsl #1]
                        } 
                        color<<=1;
                        x++;
 8001b56:	3401      	adds	r4, #1
                        if((x-x0)==32)
 8001b58:	1ba3      	subs	r3, r4, r6
 8001b5a:	2b20      	cmp	r3, #32
                        color<<=1;
 8001b5c:	ea4f 0040 	mov.w	r0, r0, lsl #1
                        if((x-x0)==32)
 8001b60:	d105      	bne.n	8001b6e <Draw_ChineseFont+0xf2>
                        {
                            x=x0;
                            y++;
 8001b62:	3501      	adds	r5, #1
                            if((y-y0)==29)
 8001b64:	1beb      	subs	r3, r5, r7
                            {
                                y=y0;
 8001b66:	2b1d      	cmp	r3, #29
 8001b68:	bf08      	it	eq
 8001b6a:	463d      	moveq	r5, r7
 8001b6c:	4634      	mov	r4, r6
                    for(j=0;j<8;j++) 
 8001b6e:	f1bc 0c01 	subs.w	ip, ip, #1
 8001b72:	d00d      	beq.n	8001b90 <Draw_ChineseFont+0x114>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, front_color);
 8001b74:	1be9      	subs	r1, r5, r7
 8001b76:	1ba3      	subs	r3, r4, r6
                        if((color&0x80)==0x80)
 8001b78:	f010 0f80 	tst.w	r0, #128	; 0x80
    tmpBuf[y*w + x] = dwColor;    
 8001b7c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
                        if((color&0x80)==0x80)
 8001b80:	d1e7      	bne.n	8001b52 <Draw_ChineseFont+0xd6>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, back_color);
 8001b82:	1beb      	subs	r3, r5, r7
 8001b84:	1ba1      	subs	r1, r4, r6
    tmpBuf[y*w + x] = dwColor;    
 8001b86:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 8001b8a:	f828 a013 	strh.w	sl, [r8, r3, lsl #1]
}
 8001b8e:	e7e2      	b.n	8001b56 <Draw_ChineseFont+0xda>
                for(i=0; i<116; i++) 
 8001b90:	45de      	cmp	lr, fp
 8001b92:	d1d9      	bne.n	8001b48 <Draw_ChineseFont+0xcc>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001b94:	ee18 3a10 	vmov	r3, s16
 8001b98:	4639      	mov	r1, r7
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	9201      	str	r2, [sp, #4]
 8001b9e:	f001 fdb3 	bl	8003708 <LCD_SetWindows>
    LCD_SetDataLine();
 8001ba2:	f001 fc4d 	bl	8003440 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001ba6:	4640      	mov	r0, r8
 8001ba8:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8001bac:	f001 fc50 	bl	8003450 <LCD_WriteDatas>
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8001bb0:	f89b 3001 	ldrb.w	r3, [fp, #1]
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001bb4:	9a01      	ldr	r2, [sp, #4]
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8001bb6:	f10b 0b78 	add.w	fp, fp, #120	; 0x78
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ac      	bne.n	8001b18 <Draw_ChineseFont+0x9c>
            
        } //for (wordNum=0; wordNum<20; wordNum++)结束
        cn += 3;  /* 一个汉字的UTF8编码占据3字节 */
        x += 32;
        
        if (x >= g_lcd_width)
 8001bbe:	4b11      	ldr	r3, [pc, #68]	; (8001c04 <Draw_ChineseFont+0x188>)
        x += 32;
 8001bc0:	f104 0620 	add.w	r6, r4, #32
        if (x >= g_lcd_width)
 8001bc4:	681a      	ldr	r2, [r3, #0]
        {
            x = 0;
            y += 29;
        }

        if (y + 29 >= g_lcd_width)
 8001bc6:	9900      	ldr	r1, [sp, #0]
        if (x >= g_lcd_width)
 8001bc8:	42b2      	cmp	r2, r6
            y += 29;
 8001bca:	bf98      	it	ls
 8001bcc:	351d      	addls	r5, #29
        if (y + 29 >= g_lcd_width)
 8001bce:	f105 031d 	add.w	r3, r5, #29
            x = 0;
 8001bd2:	bf98      	it	ls
 8001bd4:	2600      	movls	r6, #0
        if (y + 29 >= g_lcd_width)
 8001bd6:	3103      	adds	r1, #3
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	9100      	str	r1, [sp, #0]
 8001bdc:	d887      	bhi.n	8001aee <Draw_ChineseFont+0x72>
            return;
        
        x0=x;
    }
}   
 8001bde:	b003      	add	sp, #12
 8001be0:	ecbd 8b02 	vpop	{d8}
 8001be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buf = malloc(32*29*2);
 8001be8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8001bec:	f008 f8de 	bl	8009dac <malloc>
 8001bf0:	4b02      	ldr	r3, [pc, #8]	; (8001bfc <Draw_ChineseFont+0x180>)
 8001bf2:	6018      	str	r0, [r3, #0]
        if (!buf)
 8001bf4:	2800      	cmp	r0, #0
 8001bf6:	f47f af53 	bne.w	8001aa0 <Draw_ChineseFont+0x24>
 8001bfa:	e7f0      	b.n	8001bde <Draw_ChineseFont+0x162>
 8001bfc:	20000c00 	.word	0x20000c00
 8001c00:	0800b898 	.word	0x0800b898
 8001c04:	20000c08 	.word	0x20000c08
 8001c08:	0800b90f 	.word	0x0800b90f

08001c0c <Draw_Picture>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Picture(uint32_t x, uint32_t y, const uint8_t *pic)
{
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	4616      	mov	r6, r2
    P_HEADCOLOR pHead = (P_HEADCOLOR)pic;
    BitMap bitmap; 

    int w = pHead->w;
 8001c10:	8875      	ldrh	r5, [r6, #2]
    int h = pHead->h;
 8001c12:	f8b6 c004 	ldrh.w	ip, [r6, #4]

    /* 转为小字节序 */
    w = ((w<<8)|(w>>8)) & 0xffff;
 8001c16:	122c      	asrs	r4, r5, #8
 8001c18:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    h = ((h<<8)|(h>>8)) & 0xffff;
 8001c1c:	ea4f 252c 	mov.w	r5, ip, asr #8
 8001c20:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001c24:	1e42      	subs	r2, r0, #1
 8001c26:	1e4b      	subs	r3, r1, #1
    w = ((w<<8)|(w>>8)) & 0xffff;
 8001c28:	b2a4      	uxth	r4, r4
    h = ((h<<8)|(h>>8)) & 0xffff;
 8001c2a:	b2ad      	uxth	r5, r5
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001c2c:	4422      	add	r2, r4
 8001c2e:	442b      	add	r3, r5
 8001c30:	f001 fd6a 	bl	8003708 <LCD_SetWindows>
    LCD_SetDataLine();
 8001c34:	f001 fc04 	bl	8003440 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001c38:	fb05 f104 	mul.w	r1, r5, r4
 8001c3c:	f106 0008 	add.w	r0, r6, #8
 8001c40:	0049      	lsls	r1, r1, #1

    bitmap.width = w;
    bitmap.height = h;        
    bitmap.datas = (uint8_t *)pic;
    Draw_Region(x, y, &bitmap);
}
 8001c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001c46:	f001 bc03 	b.w	8003450 <LCD_WriteDatas>
 8001c4a:	bf00      	nop

08001c4c <MX_GPDMA1_Init>:
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001c4c:	4b18      	ldr	r3, [pc, #96]	; (8001cb0 <MX_GPDMA1_Init+0x64>)
{
 8001c4e:	b500      	push	{lr}
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001c50:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
{
 8001c54:	b083      	sub	sp, #12
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001c56:	f040 0001 	orr.w	r0, r0, #1
 8001c5a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8001c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

  /* GPDMA1 interrupt Init */
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001c62:	2200      	movs	r2, #0
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001c64:	f003 0301 	and.w	r3, r3, #1
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001c68:	2105      	movs	r1, #5
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001c6a:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001c6c:	201b      	movs	r0, #27
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001c6e:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001c70:	f001 fe4c 	bl	800390c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001c74:	201b      	movs	r0, #27
 8001c76:	f001 fe87 	bl	8003988 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 5, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2105      	movs	r1, #5
 8001c7e:	201c      	movs	r0, #28
 8001c80:	f001 fe44 	bl	800390c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001c84:	201c      	movs	r0, #28
 8001c86:	f001 fe7f 	bl	8003988 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 5, 0);
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2105      	movs	r1, #5
 8001c8e:	201d      	movs	r0, #29
 8001c90:	f001 fe3c 	bl	800390c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001c94:	201d      	movs	r0, #29
 8001c96:	f001 fe77 	bl	8003988 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 5, 0);
 8001c9a:	201e      	movs	r0, #30
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2105      	movs	r1, #5
 8001ca0:	f001 fe34 	bl	800390c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001ca4:	201e      	movs	r0, #30
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001ca6:	b003      	add	sp, #12
 8001ca8:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001cac:	f001 be6c 	b.w	8003988 <HAL_NVIC_EnableIRQ>
 8001cb0:	44020c00 	.word	0x44020c00

08001cb4 <rt_hw_console_output>:

rt_weak void rt_hw_console_output(const char *str)
{
    /* empty console output */

    myputstr(str);
 8001cb4:	f7ff bcec 	b.w	8001690 <myputstr>

08001cb8 <rt_kprintf>:
 * @param fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
rt_weak int rt_kprintf(const char *fmt, ...)
{
 8001cb8:	b40f      	push	{r0, r1, r2, r3}
 8001cba:	b530      	push	{r4, r5, lr}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	ab06      	add	r3, sp, #24
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8001cc0:	4d0a      	ldr	r5, [pc, #40]	; (8001cec <rt_kprintf+0x34>)
{
 8001cc2:	f853 2b04 	ldr.w	r2, [r3], #4
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8001cc6:	217f      	movs	r1, #127	; 0x7f
 8001cc8:	4628      	mov	r0, r5
    va_start(args, fmt);
 8001cca:	9301      	str	r3, [sp, #4]
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8001ccc:	f001 f836 	bl	8002d3c <rt_vsnprintf>
 8001cd0:	4604      	mov	r4, r0
    if (length > RT_CONSOLEBUF_SIZE - 1)
    {
        length = RT_CONSOLEBUF_SIZE - 1;
    }

    rt_hw_console_output(rt_log_buf);
 8001cd2:	4628      	mov	r0, r5
 8001cd4:	f7ff ffee 	bl	8001cb4 <rt_hw_console_output>

    va_end(args);

    return length;
}
 8001cd8:	2c7f      	cmp	r4, #127	; 0x7f
 8001cda:	4620      	mov	r0, r4
 8001cdc:	bf28      	it	cs
 8001cde:	207f      	movcs	r0, #127	; 0x7f
 8001ce0:	b003      	add	sp, #12
 8001ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ce6:	b004      	add	sp, #16
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	20000c0c 	.word	0x20000c0c

08001cf0 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001cf0:	b5d0      	push	{r4, r6, r7, lr}

	uint8_t c = 0;
 8001cf2:	2400      	movs	r4, #0
{
 8001cf4:	b09c      	sub	sp, #112	; 0x70
	uint8_t c = 0;
 8001cf6:	f88d 4003 	strb.w	r4, [sp, #3]
	float sum = 3.141592654;

  HAL_Init();
 8001cfa:	f001 fdab 	bl	8003854 <HAL_Init>
}

static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cfe:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001d02:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001d06:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8001d0e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8001d12:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d16:	4a42      	ldr	r2, [pc, #264]	; (8001e20 <main+0x130>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d18:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001d1a:	6913      	ldr	r3, [r2, #16]
 8001d1c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001d20:	6113      	str	r3, [r2, #16]
 8001d22:	6913      	ldr	r3, [r2, #16]
 8001d24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d2c:	6953      	ldr	r3, [r2, #20]
 8001d2e:	071b      	lsls	r3, r3, #28
 8001d30:	d5fc      	bpl.n	8001d2c <main+0x3c>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d32:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001d34:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d36:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d3a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8001d42:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d44:	2128      	movs	r1, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d46:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d4a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001d4e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d50:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001d52:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8001d54:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d56:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8001d58:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d5a:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8001d5e:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001d60:	9115      	str	r1, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d62:	f002 fd7f 	bl	8004864 <HAL_RCC_OscConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b100      	cbz	r0, 8001d6c <main+0x7c>
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 8001d6a:	e7fe      	b.n	8001d6a <main+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d6c:	221f      	movs	r2, #31
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d6e:	2105      	movs	r1, #5
 8001d70:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d72:	e9cd 4303 	strd	r4, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d76:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001d7a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7c:	9202      	str	r2, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d7e:	f002 fc11 	bl	80045a4 <HAL_RCC_ClockConfig>
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d146      	bne.n	8001e14 <main+0x124>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8001d86:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <main+0x134>)
 8001d88:	6813      	ldr	r3, [r2, #0]
 8001d8a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d8e:	f043 0320 	orr.w	r3, r3, #32
 8001d92:	6013      	str	r3, [r2, #0]
  bsp_led_init();
 8001d94:	f7ff fa64 	bl	8001260 <bsp_led_init>
  bsp_lcd_init();
 8001d98:	f7ff f9c6 	bl	8001128 <bsp_lcd_init>
  MX_SPI2_Init();
 8001d9c:	f7ff f92c 	bl	8000ff8 <MX_SPI2_Init>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001da0:	f002 fb40 	bl	8004424 <HAL_ICACHE_Enable>
 8001da4:	4604      	mov	r4, r0
 8001da6:	bbb0      	cbnz	r0, 8001e16 <main+0x126>
	rt_kprintf("UART CNT:%d %lf\r\n",c,sum);
 8001da8:	a71b      	add	r7, pc, #108	; (adr r7, 8001e18 <main+0x128>)
 8001daa:	e9d7 6700 	ldrd	r6, r7, [r7]
  MX_GPDMA1_Init();
 8001dae:	f7ff ff4d 	bl	8001c4c <MX_GPDMA1_Init>
  MX_USART2_UART_Init();
 8001db2:	f7ff fad5 	bl	8001360 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001db6:	f7ff fa8f 	bl	80012d8 <MX_UART4_Init>
  LCD_Init(1);
 8001dba:	2001      	movs	r0, #1
 8001dbc:	f001 fb66 	bl	800348c <LCD_Init>
  Draw_Init();
 8001dc0:	f7ff fc74 	bl	80016ac <Draw_Init>
  Draw_Clear(0);
 8001dc4:	4620      	mov	r0, r4
 8001dc6:	f7ff fc79 	bl	80016bc <Draw_Clear>
  bsp_test_lcd();
 8001dca:	f7ff f9fb 	bl	80011c4 <bsp_test_lcd>
  rt_kprintf("Hello World! \r\n");
 8001dce:	4816      	ldr	r0, [pc, #88]	; (8001e28 <main+0x138>)
 8001dd0:	f7ff ff72 	bl	8001cb8 <rt_kprintf>
	HAL_UART_Transmit_DMA(&huart2, &c, 1);
 8001dd4:	4c15      	ldr	r4, [pc, #84]	; (8001e2c <main+0x13c>)
	bsp_led_toggle();
 8001dd6:	f7ff fa77 	bl	80012c8 <bsp_led_toggle>
	HAL_UART_Transmit_DMA(&huart2, &c, 1);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f10d 0103 	add.w	r1, sp, #3
 8001de0:	4620      	mov	r0, r4
 8001de2:	f007 f9f9 	bl	80091d8 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart4, &c, 1);
 8001de6:	2201      	movs	r2, #1
 8001de8:	f10d 0103 	add.w	r1, sp, #3
 8001dec:	4810      	ldr	r0, [pc, #64]	; (8001e30 <main+0x140>)
 8001dee:	f007 f9f3 	bl	80091d8 <HAL_UART_Transmit_DMA>
	rt_kprintf("UART CNT:%d %lf\r\n",c,sum);
 8001df2:	463b      	mov	r3, r7
 8001df4:	4632      	mov	r2, r6
 8001df6:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8001dfa:	480e      	ldr	r0, [pc, #56]	; (8001e34 <main+0x144>)
 8001dfc:	f7ff ff5c 	bl	8001cb8 <rt_kprintf>
    HAL_Delay(500);
 8001e00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e04:	f001 fd5e 	bl	80038c4 <HAL_Delay>
	c++;
 8001e08:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	f88d 3003 	strb.w	r3, [sp, #3]
  while (1)
 8001e12:	e7e0      	b.n	8001dd6 <main+0xe6>
  while(1)
 8001e14:	e7fe      	b.n	8001e14 <main+0x124>
 8001e16:	e7fe      	b.n	8001e16 <main+0x126>
 8001e18:	60000000 	.word	0x60000000
 8001e1c:	400921fb 	.word	0x400921fb
 8001e20:	44020800 	.word	0x44020800
 8001e24:	40022000 	.word	0x40022000
 8001e28:	0800bf28 	.word	0x0800bf28
 8001e2c:	20000ad8 	.word	0x20000ad8
 8001e30:	20000b6c 	.word	0x20000b6c
 8001e34:	0800bf38 	.word	0x0800bf38

08001e38 <Error_Handler>:
 8001e38:	e7fe      	b.n	8001e38 <Error_Handler>
 8001e3a:	bf00      	nop

08001e3c <out_buffer>:


// internal buffer output
static inline void out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8001e3c:	429a      	cmp	r2, r3
    ((char*)buffer)[idx] = character;
 8001e3e:	bf38      	it	cc
 8001e40:	5488      	strbcc	r0, [r1, r2]
  }
}
 8001e42:	4770      	bx	lr

08001e44 <out_discard>:

// internal null output
static inline void out_discard(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop

08001e48 <out_rev_>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t out_rev_(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8001e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e4c:	469a      	mov	sl, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 8001e50:	4617      	mov	r7, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001e52:	079a      	lsls	r2, r3, #30
{
 8001e54:	4606      	mov	r6, r0
 8001e56:	468b      	mov	fp, r1
 8001e58:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8001e5c:	d111      	bne.n	8001e82 <out_rev_+0x3a>
    for (size_t i = len; i < width; i++) {
 8001e5e:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d20d      	bcs.n	8001e82 <out_rev_+0x3a>
 8001e66:	4613      	mov	r3, r2
 8001e68:	463c      	mov	r4, r7
 8001e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001e6c:	1a9d      	subs	r5, r3, r2
 8001e6e:	443d      	add	r5, r7
      out(' ', buffer, idx++, maxlen);
 8001e70:	4622      	mov	r2, r4
 8001e72:	4653      	mov	r3, sl
 8001e74:	4659      	mov	r1, fp
 8001e76:	2020      	movs	r0, #32
 8001e78:	3401      	adds	r4, #1
 8001e7a:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8001e7c:	42ac      	cmp	r4, r5
 8001e7e:	d1f7      	bne.n	8001e70 <out_rev_+0x28>
 8001e80:	e000      	b.n	8001e84 <out_rev_+0x3c>
 8001e82:	463d      	mov	r5, r7
    }
  }

  // reverse string
  while (len) {
 8001e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e86:	b173      	cbz	r3, 8001ea6 <out_rev_+0x5e>
 8001e88:	eb08 0403 	add.w	r4, r8, r3
 8001e8c:	eb04 0905 	add.w	r9, r4, r5
 8001e90:	eba9 0204 	sub.w	r2, r9, r4
    out(buf[--len], buffer, idx++, maxlen);
 8001e94:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8001e98:	4653      	mov	r3, sl
 8001e9a:	4659      	mov	r1, fp
 8001e9c:	47b0      	blx	r6
  while (len) {
 8001e9e:	4544      	cmp	r4, r8
 8001ea0:	d1f6      	bne.n	8001e90 <out_rev_+0x48>
    out(buf[--len], buffer, idx++, maxlen);
 8001ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001ea4:	441d      	add	r5, r3
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8001ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001ea8:	079b      	lsls	r3, r3, #30
 8001eaa:	d50e      	bpl.n	8001eca <out_rev_+0x82>
    while (idx - start_idx < width) {
 8001eac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001eae:	1bef      	subs	r7, r5, r7
 8001eb0:	42bb      	cmp	r3, r7
 8001eb2:	d90a      	bls.n	8001eca <out_rev_+0x82>
 8001eb4:	461c      	mov	r4, r3
      out(' ', buffer, idx++, maxlen);
 8001eb6:	462a      	mov	r2, r5
 8001eb8:	4653      	mov	r3, sl
 8001eba:	4659      	mov	r1, fp
 8001ebc:	2020      	movs	r0, #32
    while (idx - start_idx < width) {
 8001ebe:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 8001ec0:	47b0      	blx	r6
    while (idx - start_idx < width) {
 8001ec2:	42a7      	cmp	r7, r4
      out(' ', buffer, idx++, maxlen);
 8001ec4:	f105 0501 	add.w	r5, r5, #1
    while (idx - start_idx < width) {
 8001ec8:	d3f5      	bcc.n	8001eb6 <out_rev_+0x6e>
    }
  }

  return idx;
}
 8001eca:	4628      	mov	r0, r5
 8001ecc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001ed0 <print_integer>:
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
}

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 8001ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ed4:	ed2d 8b04 	vpush	{d8-d9}
 8001ed8:	b08f      	sub	sp, #60	; 0x3c
 8001eda:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
 8001ede:	ee09 3a90 	vmov	s19, r3
 8001ee2:	e9dd 561c 	ldrd	r5, r6, [sp, #112]	; 0x70
 8001ee6:	e9dd 9a20 	ldrd	r9, sl, [sp, #128]	; 0x80
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;

  if (!value) {
 8001eea:	ea55 0306 	orrs.w	r3, r5, r6
{
 8001eee:	ee08 0a10 	vmov	s16, r0
 8001ef2:	ee08 1a90 	vmov	s17, r1
 8001ef6:	ee09 2a10 	vmov	s18, r2
 8001efa:	f89d 707c 	ldrb.w	r7, [sp, #124]	; 0x7c
 8001efe:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8001f02:	9405      	str	r4, [sp, #20]
  if (!value) {
 8001f04:	d15d      	bne.n	8001fc2 <print_integer+0xf2>
    if ( !(flags & FLAGS_PRECISION) ) {
 8001f06:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8001f0a:	f040 80b2 	bne.w	8002072 <print_integer+0x1a2>
      buf[len++] = '0';
 8001f0e:	2330      	movs	r3, #48	; 0x30
      flags &= ~FLAGS_HASH;
 8001f10:	f02b 0b10 	bic.w	fp, fp, #16
      buf[len++] = '0';
 8001f14:	f88d 3018 	strb.w	r3, [sp, #24]
    if (!(flags & FLAGS_LEFT)) {
 8001f18:	f01b 0f02 	tst.w	fp, #2
 8001f1c:	ab06      	add	r3, sp, #24
      buf[len++] = '0';
 8001f1e:	f04f 0401 	mov.w	r4, #1
 8001f22:	9304      	str	r3, [sp, #16]
    if (!(flags & FLAGS_LEFT)) {
 8001f24:	d07a      	beq.n	800201c <print_integer+0x14c>
 8001f26:	4623      	mov	r3, r4
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001f28:	4599      	cmp	r9, r3
 8001f2a:	d90d      	bls.n	8001f48 <print_integer+0x78>
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	d00b      	beq.n	8001f48 <print_integer+0x78>
 8001f30:	9804      	ldr	r0, [sp, #16]
 8001f32:	1e5a      	subs	r2, r3, #1
      buf[len++] = '0';
 8001f34:	2130      	movs	r1, #48	; 0x30
 8001f36:	4402      	add	r2, r0
 8001f38:	e001      	b.n	8001f3e <print_integer+0x6e>
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001f3a:	2b20      	cmp	r3, #32
 8001f3c:	d004      	beq.n	8001f48 <print_integer+0x78>
      buf[len++] = '0';
 8001f3e:	3301      	adds	r3, #1
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001f40:	4599      	cmp	r9, r3
      buf[len++] = '0';
 8001f42:	f802 1f01 	strb.w	r1, [r2, #1]!
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001f46:	d1f8      	bne.n	8001f3a <print_integer+0x6a>
    if (base == BASE_OCTAL && (len > unpadded_len)) {
 8001f48:	2f08      	cmp	r7, #8
 8001f4a:	d103      	bne.n	8001f54 <print_integer+0x84>
 8001f4c:	429c      	cmp	r4, r3
      flags &= ~FLAGS_HASH;
 8001f4e:	bf38      	it	cc
 8001f50:	f02b 0b10 	biccc.w	fp, fp, #16
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8001f54:	f241 0210 	movw	r2, #4112	; 0x1010
 8001f58:	ea1b 0f02 	tst.w	fp, r2
 8001f5c:	d011      	beq.n	8001f82 <print_integer+0xb2>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8001f5e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8001f62:	d07c      	beq.n	800205e <print_integer+0x18e>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001f64:	2f10      	cmp	r7, #16
 8001f66:	f000 80bb 	beq.w	80020e0 <print_integer+0x210>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8001f6a:	2f02      	cmp	r7, #2
 8001f6c:	f000 80a1 	beq.w	80020b2 <print_integer+0x1e2>
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d012      	beq.n	8001f9a <print_integer+0xca>
      buf[len++] = '0';
 8001f74:	2130      	movs	r1, #48	; 0x30
 8001f76:	185a      	adds	r2, r3, r1
 8001f78:	3208      	adds	r2, #8
 8001f7a:	446a      	add	r2, sp
 8001f7c:	f802 1c20 	strb.w	r1, [r2, #-32]
 8001f80:	3301      	adds	r3, #1
  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	d009      	beq.n	8001f9a <print_integer+0xca>
    if (negative) {
 8001f86:	9a05      	ldr	r2, [sp, #20]
 8001f88:	2a00      	cmp	r2, #0
 8001f8a:	d078      	beq.n	800207e <print_integer+0x1ae>
      buf[len++] = '-';
 8001f8c:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
 8001f8e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8001f92:	446a      	add	r2, sp
 8001f94:	f802 1c20 	strb.w	r1, [r2, #-32]
 8001f98:	3301      	adds	r3, #1
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8001f9a:	9c04      	ldr	r4, [sp, #16]
 8001f9c:	9301      	str	r3, [sp, #4]
 8001f9e:	ee19 2a10 	vmov	r2, s18
 8001fa2:	ee19 3a90 	vmov	r3, s19
 8001fa6:	ee18 1a90 	vmov	r1, s17
 8001faa:	ee18 0a10 	vmov	r0, s16
 8001fae:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001fb2:	9400      	str	r4, [sp, #0]
 8001fb4:	f7ff ff48 	bl	8001e48 <out_rev_>
      value /= base;
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
  }

  return print_integer_finalization(out, buffer, idx, maxlen, buf, len, negative, base, precision, width, flags);
}
 8001fb8:	b00f      	add	sp, #60	; 0x3c
 8001fba:	ecbd 8b04 	vpop	{d8-d9}
 8001fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fc2:	f01b 0f20 	tst.w	fp, #32
 8001fc6:	bf14      	ite	ne
 8001fc8:	2341      	movne	r3, #65	; 0x41
 8001fca:	2361      	moveq	r3, #97	; 0x61
 8001fcc:	aa06      	add	r2, sp, #24
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8001fce:	3b0a      	subs	r3, #10
 8001fd0:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 8001fd4:	4690      	mov	r8, r2
  size_t len = 0U;
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	4699      	mov	r9, r3
 8001fda:	9204      	str	r2, [sp, #16]
 8001fdc:	e003      	b.n	8001fe6 <print_integer+0x116>
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8001fde:	2c20      	cmp	r4, #32
 8001fe0:	d017      	beq.n	8002012 <print_integer+0x142>
      value /= base;
 8001fe2:	4605      	mov	r5, r0
 8001fe4:	460e      	mov	r6, r1
      const char digit = (char)(value % base);
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	4631      	mov	r1, r6
 8001fea:	463a      	mov	r2, r7
 8001fec:	2300      	movs	r3, #0
 8001fee:	f7fe fe1d 	bl	8000c2c <__aeabi_uldivmod>
 8001ff2:	b2d2      	uxtb	r2, r2
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8001ff4:	2a09      	cmp	r2, #9
 8001ff6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8001ffa:	bf8a      	itet	hi
 8001ffc:	444a      	addhi	r2, r9
 8001ffe:	b2da      	uxtbls	r2, r3
 8002000:	b2d2      	uxtbhi	r2, r2
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8002002:	42bd      	cmp	r5, r7
 8002004:	f176 0300 	sbcs.w	r3, r6, #0
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8002008:	f808 2b01 	strb.w	r2, [r8], #1
 800200c:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8002010:	d2e5      	bcs.n	8001fde <print_integer+0x10e>
 8002012:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
    if (!(flags & FLAGS_LEFT)) {
 8002016:	f01b 0f02 	tst.w	fp, #2
 800201a:	d184      	bne.n	8001f26 <print_integer+0x56>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800201c:	f1ba 0f00 	cmp.w	sl, #0
 8002020:	d081      	beq.n	8001f26 <print_integer+0x56>
 8002022:	f01b 0f01 	tst.w	fp, #1
 8002026:	f43f af7e 	beq.w	8001f26 <print_integer+0x56>
 800202a:	9b05      	ldr	r3, [sp, #20]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d152      	bne.n	80020d6 <print_integer+0x206>
 8002030:	f01b 0f0c 	tst.w	fp, #12
 8002034:	d14f      	bne.n	80020d6 <print_integer+0x206>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002036:	4554      	cmp	r4, sl
 8002038:	f4bf af75 	bcs.w	8001f26 <print_integer+0x56>
 800203c:	2c1f      	cmp	r4, #31
 800203e:	d84d      	bhi.n	80020dc <print_integer+0x20c>
 8002040:	9804      	ldr	r0, [sp, #16]
 8002042:	1e62      	subs	r2, r4, #1
 8002044:	4623      	mov	r3, r4
        buf[len++] = '0';
 8002046:	2130      	movs	r1, #48	; 0x30
 8002048:	4402      	add	r2, r0
 800204a:	e001      	b.n	8002050 <print_integer+0x180>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800204c:	2b20      	cmp	r3, #32
 800204e:	d045      	beq.n	80020dc <print_integer+0x20c>
        buf[len++] = '0';
 8002050:	3301      	adds	r3, #1
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002052:	4553      	cmp	r3, sl
        buf[len++] = '0';
 8002054:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002058:	d1f8      	bne.n	800204c <print_integer+0x17c>
 800205a:	4653      	mov	r3, sl
 800205c:	e764      	b.n	8001f28 <print_integer+0x58>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 800205e:	b9c3      	cbnz	r3, 8002092 <print_integer+0x1c2>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002060:	2f10      	cmp	r7, #16
 8002062:	d055      	beq.n	8002110 <print_integer+0x240>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002064:	2f02      	cmp	r7, #2
 8002066:	d060      	beq.n	800212a <print_integer+0x25a>
      buf[len++] = '0';
 8002068:	2330      	movs	r3, #48	; 0x30
 800206a:	f88d 3018 	strb.w	r3, [sp, #24]
 800206e:	2301      	movs	r3, #1
 8002070:	e789      	b.n	8001f86 <print_integer+0xb6>
    else if (base == BASE_HEX) {
 8002072:	2f10      	cmp	r7, #16
 8002074:	d029      	beq.n	80020ca <print_integer+0x1fa>
 8002076:	ab06      	add	r3, sp, #24
  size_t len = 0U;
 8002078:	2400      	movs	r4, #0
 800207a:	9304      	str	r3, [sp, #16]
 800207c:	e7cb      	b.n	8002016 <print_integer+0x146>
    else if (flags & FLAGS_PLUS) {
 800207e:	f01b 0f04 	tst.w	fp, #4
 8002082:	d104      	bne.n	800208e <print_integer+0x1be>
    else if (flags & FLAGS_SPACE) {
 8002084:	f01b 0f08 	tst.w	fp, #8
 8002088:	d087      	beq.n	8001f9a <print_integer+0xca>
      buf[len++] = ' ';
 800208a:	2120      	movs	r1, #32
 800208c:	e77f      	b.n	8001f8e <print_integer+0xbe>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800208e:	212b      	movs	r1, #43	; 0x2b
 8002090:	e77d      	b.n	8001f8e <print_integer+0xbe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8002092:	4599      	cmp	r9, r3
 8002094:	d002      	beq.n	800209c <print_integer+0x1cc>
 8002096:	459a      	cmp	sl, r3
 8002098:	f47f af64 	bne.w	8001f64 <print_integer+0x94>
      if (unpadded_len < len) {
 800209c:	429c      	cmp	r4, r3
 800209e:	f4bf af61 	bcs.w	8001f64 <print_integer+0x94>
      if (len && (base == BASE_HEX)) {
 80020a2:	1e5a      	subs	r2, r3, #1
 80020a4:	d0dc      	beq.n	8002060 <print_integer+0x190>
 80020a6:	2f10      	cmp	r7, #16
 80020a8:	d044      	beq.n	8002134 <print_integer+0x264>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80020aa:	2f02      	cmp	r7, #2
 80020ac:	d005      	beq.n	80020ba <print_integer+0x1ea>
        len--;
 80020ae:	4613      	mov	r3, r2
 80020b0:	e760      	b.n	8001f74 <print_integer+0xa4>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	f43f af71 	beq.w	8001f9a <print_integer+0xca>
 80020b8:	461a      	mov	r2, r3
      buf[len++] = 'b';
 80020ba:	2162      	movs	r1, #98	; 0x62
 80020bc:	f102 0338 	add.w	r3, r2, #56	; 0x38
 80020c0:	446b      	add	r3, sp
 80020c2:	f803 1c20 	strb.w	r1, [r3, #-32]
 80020c6:	1c53      	adds	r3, r2, #1
 80020c8:	e752      	b.n	8001f70 <print_integer+0xa0>
      flags &= ~FLAGS_HASH;
 80020ca:	ab06      	add	r3, sp, #24
  size_t len = 0U;
 80020cc:	2400      	movs	r4, #0
      flags &= ~FLAGS_HASH;
 80020ce:	f02b 0b10 	bic.w	fp, fp, #16
 80020d2:	9304      	str	r3, [sp, #16]
 80020d4:	e79f      	b.n	8002016 <print_integer+0x146>
        width--;
 80020d6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80020da:	e7ac      	b.n	8002036 <print_integer+0x166>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80020dc:	2320      	movs	r3, #32
 80020de:	e733      	b.n	8001f48 <print_integer+0x78>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80020e0:	f01b 0f20 	tst.w	fp, #32
 80020e4:	d00b      	beq.n	80020fe <print_integer+0x22e>
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	f43f af57 	beq.w	8001f9a <print_integer+0xca>
        len--;
 80020ec:	4619      	mov	r1, r3
      buf[len++] = 'X';
 80020ee:	2258      	movs	r2, #88	; 0x58
 80020f0:	f101 0338 	add.w	r3, r1, #56	; 0x38
 80020f4:	446b      	add	r3, sp
 80020f6:	f803 2c20 	strb.w	r2, [r3, #-32]
 80020fa:	1c4b      	adds	r3, r1, #1
 80020fc:	e738      	b.n	8001f70 <print_integer+0xa0>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80020fe:	2b20      	cmp	r3, #32
 8002100:	f43f af4b 	beq.w	8001f9a <print_integer+0xca>
      buf[len++] = 'x';
 8002104:	9a04      	ldr	r2, [sp, #16]
 8002106:	18d1      	adds	r1, r2, r3
 8002108:	3301      	adds	r3, #1
 800210a:	2278      	movs	r2, #120	; 0x78
 800210c:	700a      	strb	r2, [r1, #0]
 800210e:	e72f      	b.n	8001f70 <print_integer+0xa0>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002110:	f01b 0f20 	tst.w	fp, #32
 8002114:	d104      	bne.n	8002120 <print_integer+0x250>
      buf[len++] = 'x';
 8002116:	2378      	movs	r3, #120	; 0x78
 8002118:	f88d 3018 	strb.w	r3, [sp, #24]
 800211c:	2301      	movs	r3, #1
 800211e:	e729      	b.n	8001f74 <print_integer+0xa4>
      buf[len++] = 'X';
 8002120:	2358      	movs	r3, #88	; 0x58
 8002122:	f88d 3018 	strb.w	r3, [sp, #24]
 8002126:	2301      	movs	r3, #1
 8002128:	e724      	b.n	8001f74 <print_integer+0xa4>
      buf[len++] = 'b';
 800212a:	2362      	movs	r3, #98	; 0x62
 800212c:	f88d 3018 	strb.w	r3, [sp, #24]
 8002130:	2301      	movs	r3, #1
 8002132:	e71f      	b.n	8001f74 <print_integer+0xa4>
        if (unpadded_len < len) {
 8002134:	4294      	cmp	r4, r2
 8002136:	d208      	bcs.n	800214a <print_integer+0x27a>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002138:	f01b 0f20 	tst.w	fp, #32
          len--;
 800213c:	f1a3 0102 	sub.w	r1, r3, #2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002140:	d1d5      	bne.n	80020ee <print_integer+0x21e>
      buf[len++] = 'x';
 8002142:	4613      	mov	r3, r2
 8002144:	9a04      	ldr	r2, [sp, #16]
 8002146:	4411      	add	r1, r2
 8002148:	e7df      	b.n	800210a <print_integer+0x23a>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800214a:	f01b 0f20 	tst.w	fp, #32
        len--;
 800214e:	4613      	mov	r3, r2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002150:	d0d8      	beq.n	8002104 <print_integer+0x234>
 8002152:	e7cb      	b.n	80020ec <print_integer+0x21c>

08002154 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
 8002154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002158:	ed2d 8b02 	vpush	{d8}
 800215c:	469b      	mov	fp, r3
 800215e:	b083      	sub	sp, #12
  struct double_components number_;
  number_.is_negative = get_sign(number);
  double abs_number = (number_.is_negative) ? -number : number;
 8002160:	0fdb      	lsrs	r3, r3, #31
{
 8002162:	4692      	mov	sl, r2
 8002164:	4605      	mov	r5, r0
  double abs_number = (number_.is_negative) ? -number : number;
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	d002      	beq.n	8002170 <get_components+0x1c>
 800216a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800216e:	469b      	mov	fp, r3
  number_.integral = (int_fast64_t)abs_number;
 8002170:	4650      	mov	r0, sl
 8002172:	4659      	mov	r1, fp
 8002174:	f7fe fd72 	bl	8000c5c <__aeabi_d2lz>
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8002178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800217a:	4b40      	ldr	r3, [pc, #256]	; (800227c <get_components+0x128>)
  number_.integral = (int_fast64_t)abs_number;
 800217c:	4606      	mov	r6, r0
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 800217e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002182:	ed93 8b00 	vldr	d8, [r3]
  number_.integral = (int_fast64_t)abs_number;
 8002186:	9100      	str	r1, [sp, #0]
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8002188:	f7fe fa10 	bl	80005ac <__aeabi_l2d>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4650      	mov	r0, sl
 8002192:	4659      	mov	r1, fp
 8002194:	f7fe f880 	bl	8000298 <__aeabi_dsub>
 8002198:	ec53 2b18 	vmov	r2, r3, d8
 800219c:	f7fe fa34 	bl	8000608 <__aeabi_dmul>
 80021a0:	4680      	mov	r8, r0
 80021a2:	4689      	mov	r9, r1
  number_.fractional = (int_fast64_t)remainder;
 80021a4:	f7fe fd5a 	bl	8000c5c <__aeabi_d2lz>
 80021a8:	4604      	mov	r4, r0
 80021aa:	460f      	mov	r7, r1

  remainder -= (double) number_.fractional;
 80021ac:	f7fe f9fe 	bl	80005ac <__aeabi_l2d>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4640      	mov	r0, r8
 80021b6:	4649      	mov	r1, r9
 80021b8:	f7fe f86e 	bl	8000298 <__aeabi_dsub>

  if (remainder > 0.5) {
 80021bc:	2200      	movs	r2, #0
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <get_components+0x12c>)
  remainder -= (double) number_.fractional;
 80021c0:	4680      	mov	r8, r0
 80021c2:	4689      	mov	r9, r1
  if (remainder > 0.5) {
 80021c4:	f7fe fcb0 	bl	8000b28 <__aeabi_dcmpgt>
 80021c8:	2800      	cmp	r0, #0
 80021ca:	d03c      	beq.n	8002246 <get_components+0xf2>
    ++number_.fractional;
 80021cc:	3401      	adds	r4, #1
 80021ce:	f147 0700 	adc.w	r7, r7, #0
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 80021d2:	4639      	mov	r1, r7
 80021d4:	4620      	mov	r0, r4
 80021d6:	f7fe f9e9 	bl	80005ac <__aeabi_l2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	ec51 0b18 	vmov	r0, r1, d8
 80021e2:	f7fe fc8d 	bl	8000b00 <__aeabi_dcmple>
 80021e6:	2800      	cmp	r0, #0
 80021e8:	d13c      	bne.n	8002264 <get_components+0x110>
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
    }
  }

  if (precision == 0U) {
 80021ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80021ec:	b9f3      	cbnz	r3, 800222c <get_components+0xd8>
    remainder = abs_number - (double) number_.integral;
 80021ee:	4630      	mov	r0, r6
 80021f0:	9900      	ldr	r1, [sp, #0]
 80021f2:	f7fe f9db 	bl	80005ac <__aeabi_l2d>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4650      	mov	r0, sl
 80021fc:	4659      	mov	r1, fp
 80021fe:	f7fe f84b 	bl	8000298 <__aeabi_dsub>
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 8002202:	2200      	movs	r2, #0
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <get_components+0x12c>)
    remainder = abs_number - (double) number_.integral;
 8002206:	4680      	mov	r8, r0
 8002208:	4689      	mov	r9, r1
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 800220a:	f7fe fc6f 	bl	8000aec <__aeabi_dcmplt>
 800220e:	b130      	cbz	r0, 800221e <get_components+0xca>
 8002210:	4640      	mov	r0, r8
 8002212:	4649      	mov	r1, r9
 8002214:	2200      	movs	r2, #0
 8002216:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <get_components+0x12c>)
 8002218:	f7fe fc86 	bl	8000b28 <__aeabi_dcmpgt>
 800221c:	b130      	cbz	r0, 800222c <get_components+0xd8>
 800221e:	07f3      	lsls	r3, r6, #31
 8002220:	d504      	bpl.n	800222c <get_components+0xd8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8002222:	9b00      	ldr	r3, [sp, #0]
 8002224:	3601      	adds	r6, #1
 8002226:	f143 0300 	adc.w	r3, r3, #0
 800222a:	9300      	str	r3, [sp, #0]
    }
  }
  return number_;
}
 800222c:	4628      	mov	r0, r5
  return number_;
 800222e:	9b00      	ldr	r3, [sp, #0]
 8002230:	602e      	str	r6, [r5, #0]
 8002232:	e9c5 3401 	strd	r3, r4, [r5, #4]
 8002236:	9b01      	ldr	r3, [sp, #4]
 8002238:	60ef      	str	r7, [r5, #12]
 800223a:	742b      	strb	r3, [r5, #16]
}
 800223c:	b003      	add	sp, #12
 800223e:	ecbd 8b02 	vpop	{d8}
 8002242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (remainder == 0.5) {
 8002246:	4640      	mov	r0, r8
 8002248:	4649      	mov	r1, r9
 800224a:	2200      	movs	r2, #0
 800224c:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <get_components+0x12c>)
 800224e:	f7fe fc43 	bl	8000ad8 <__aeabi_dcmpeq>
 8002252:	2800      	cmp	r0, #0
 8002254:	d0c9      	beq.n	80021ea <get_components+0x96>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 8002256:	ea54 0307 	orrs.w	r3, r4, r7
 800225a:	d10b      	bne.n	8002274 <get_components+0x120>
      ++number_.fractional;
 800225c:	3401      	adds	r4, #1
 800225e:	f147 0700 	adc.w	r7, r7, #0
 8002262:	e7c2      	b.n	80021ea <get_components+0x96>
      number_.fractional = 0;
 8002264:	2400      	movs	r4, #0
      ++number_.integral;
 8002266:	9b00      	ldr	r3, [sp, #0]
 8002268:	3601      	adds	r6, #1
 800226a:	f143 0300 	adc.w	r3, r3, #0
      number_.fractional = 0;
 800226e:	4627      	mov	r7, r4
      ++number_.integral;
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	e7ba      	b.n	80021ea <get_components+0x96>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 8002274:	07e2      	lsls	r2, r4, #31
 8002276:	d5b8      	bpl.n	80021ea <get_components+0x96>
 8002278:	e7f0      	b.n	800225c <get_components+0x108>
 800227a:	bf00      	nop
 800227c:	08019d90 	.word	0x08019d90
 8002280:	3fe00000 	.word	0x3fe00000

08002284 <print_broken_up_decimal.isra.0>:
  }
  return components;
}
#endif

static size_t print_broken_up_decimal(
 8002284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002288:	ed2d 8b04 	vpush	{d8-d9}
 800228c:	b087      	sub	sp, #28
 800228e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8002292:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8002294:	9404      	str	r4, [sp, #16]
 8002296:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8002298:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800229c:	ee08 4a10 	vmov	s16, r4
 80022a0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80022a2:	9502      	str	r5, [sp, #8]
 80022a4:	ee08 4a90 	vmov	s17, r4
 80022a8:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80022aa:	460d      	mov	r5, r1
 80022ac:	ee09 4a10 	vmov	s18, r4
 80022b0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80022b2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80022b4:	ee09 4a90 	vmov	s19, r4
 80022b8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80022ba:	9403      	str	r4, [sp, #12]
 80022bc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80022be:	9401      	str	r4, [sp, #4]
 80022c0:	4604      	mov	r4, r0
  struct double_components number_, out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned int precision,
  unsigned int width, unsigned int flags, char *buf, size_t len)
{
  if (precision != 0U) {
 80022c2:	f1b9 0f00 	cmp.w	r9, #0
 80022c6:	d049      	beq.n	800235c <print_broken_up_decimal.isra.0+0xd8>
 80022c8:	4698      	mov	r8, r3
    // do fractional part, as an unsigned number

    unsigned int count = precision;

    if (flags & FLAGS_ADAPT_EXP && !(flags & FLAGS_HASH)) {
 80022ca:	9b01      	ldr	r3, [sp, #4]
 80022cc:	4617      	mov	r7, r2
 80022ce:	f403 6301 	and.w	r3, r3, #2064	; 0x810
 80022d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d6:	f000 8099 	beq.w	800240c <print_broken_up_decimal.isra.0+0x188>
 80022da:	9a02      	ldr	r2, [sp, #8]
 80022dc:	1e73      	subs	r3, r6, #1
 80022de:	eb02 0b03 	add.w	fp, r2, r3
 80022e2:	9405      	str	r4, [sp, #20]
 80022e4:	e017      	b.n	8002316 <print_broken_up_decimal.isra.0+0x92>
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
        --count;
        buf[len++] = (char)('0' + number_.fractional % 10U);
 80022e6:	4638      	mov	r0, r7
 80022e8:	4641      	mov	r1, r8
 80022ea:	220a      	movs	r2, #10
 80022ec:	2300      	movs	r3, #0
 80022ee:	f7fe fc4d 	bl	8000b8c <__aeabi_ldivmod>
 80022f2:	4694      	mov	ip, r2
        if (!(number_.fractional /= 10U)) {
 80022f4:	4638      	mov	r0, r7
        buf[len++] = (char)('0' + number_.fractional % 10U);
 80022f6:	f10c 0730 	add.w	r7, ip, #48	; 0x30
        if (!(number_.fractional /= 10U)) {
 80022fa:	4641      	mov	r1, r8
 80022fc:	2300      	movs	r3, #0
        buf[len++] = (char)('0' + number_.fractional % 10U);
 80022fe:	f80b 7f01 	strb.w	r7, [fp, #1]!
        if (!(number_.fractional /= 10U)) {
 8002302:	220a      	movs	r2, #10
 8002304:	f7fe fc42 	bl	8000b8c <__aeabi_ldivmod>
 8002308:	ea51 0300 	orrs.w	r3, r1, r0
 800230c:	4607      	mov	r7, r0
 800230e:	4688      	mov	r8, r1
 8002310:	d066      	beq.n	80023e0 <print_broken_up_decimal.isra.0+0x15c>
        --count;
 8002312:	46a1      	mov	r9, r4
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8002314:	4656      	mov	r6, sl
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002316:	2e20      	cmp	r6, #32
        --count;
 8002318:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
        buf[len++] = (char)('0' + number_.fractional % 10U);
 800231c:	f106 0a01 	add.w	sl, r6, #1
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002320:	d1e1      	bne.n	80022e6 <print_broken_up_decimal.isra.0+0x62>
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002322:	9b01      	ldr	r3, [sp, #4]
 8002324:	f003 0303 	and.w	r3, r3, #3
 8002328:	2b01      	cmp	r3, #1
 800232a:	f000 809a 	beq.w	8002462 <print_broken_up_decimal.isra.0+0x1de>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800232e:	2720      	movs	r7, #32
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8002330:	9b01      	ldr	r3, [sp, #4]
 8002332:	ee19 2a10 	vmov	r2, s18
 8002336:	9317      	str	r3, [sp, #92]	; 0x5c
 8002338:	9b03      	ldr	r3, [sp, #12]
 800233a:	ee18 1a90 	vmov	r1, s17
 800233e:	e9cd 7315 	strd	r7, r3, [sp, #84]	; 0x54
 8002342:	ee18 0a10 	vmov	r0, s16
 8002346:	ee19 3a90 	vmov	r3, s19
 800234a:	9c02      	ldr	r4, [sp, #8]
 800234c:	9414      	str	r4, [sp, #80]	; 0x50
}
 800234e:	b007      	add	sp, #28
 8002350:	ecbd 8b04 	vpop	{d8-d9}
 8002354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8002358:	f7ff bd76 	b.w	8001e48 <out_rev_>
    if (flags & FLAGS_HASH) {
 800235c:	9b01      	ldr	r3, [sp, #4]
 800235e:	06d9      	lsls	r1, r3, #27
 8002360:	d505      	bpl.n	800236e <print_broken_up_decimal.isra.0+0xea>
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002362:	2e20      	cmp	r6, #32
 8002364:	d0dd      	beq.n	8002322 <print_broken_up_decimal.isra.0+0x9e>
        buf[len++] = '.';
 8002366:	232e      	movs	r3, #46	; 0x2e
 8002368:	9a02      	ldr	r2, [sp, #8]
 800236a:	5593      	strb	r3, [r2, r6]
 800236c:	3601      	adds	r6, #1
 800236e:	9b02      	ldr	r3, [sp, #8]
 8002370:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8002374:	4498      	add	r8, r3
 8002376:	e000      	b.n	800237a <print_broken_up_decimal.isra.0+0xf6>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8002378:	463e      	mov	r6, r7
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800237a:	2e20      	cmp	r6, #32
    buf[len++] = (char)('0' + (number_.integral % 10));
 800237c:	f106 0701 	add.w	r7, r6, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002380:	d0cf      	beq.n	8002322 <print_broken_up_decimal.isra.0+0x9e>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8002382:	4620      	mov	r0, r4
 8002384:	4629      	mov	r1, r5
 8002386:	220a      	movs	r2, #10
 8002388:	2300      	movs	r3, #0
 800238a:	f7fe fbff 	bl	8000b8c <__aeabi_ldivmod>
 800238e:	4694      	mov	ip, r2
    if (!(number_.integral /= 10)) {
 8002390:	4620      	mov	r0, r4
    buf[len++] = (char)('0' + (number_.integral % 10));
 8002392:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    if (!(number_.integral /= 10)) {
 8002396:	2300      	movs	r3, #0
 8002398:	4629      	mov	r1, r5
    buf[len++] = (char)('0' + (number_.integral % 10));
 800239a:	f808 4f01 	strb.w	r4, [r8, #1]!
    if (!(number_.integral /= 10)) {
 800239e:	220a      	movs	r2, #10
 80023a0:	f7fe fbf4 	bl	8000b8c <__aeabi_ldivmod>
 80023a4:	ea51 0300 	orrs.w	r3, r1, r0
 80023a8:	4604      	mov	r4, r0
 80023aa:	460d      	mov	r5, r1
 80023ac:	d1e4      	bne.n	8002378 <print_broken_up_decimal.isra.0+0xf4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d062      	beq.n	800247e <print_broken_up_decimal.isra.0+0x1fa>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80023b8:	2f20      	cmp	r7, #32
 80023ba:	d0b8      	beq.n	800232e <print_broken_up_decimal.isra.0+0xaa>
    if (number_.is_negative) {
 80023bc:	9b04      	ldr	r3, [sp, #16]
 80023be:	b123      	cbz	r3, 80023ca <print_broken_up_decimal.isra.0+0x146>
      buf[len++] = '-';
 80023c0:	232d      	movs	r3, #45	; 0x2d
 80023c2:	9a02      	ldr	r2, [sp, #8]
 80023c4:	55d3      	strb	r3, [r2, r7]
 80023c6:	3701      	adds	r7, #1
 80023c8:	e7b2      	b.n	8002330 <print_broken_up_decimal.isra.0+0xac>
    else if (flags & FLAGS_PLUS) {
 80023ca:	9b01      	ldr	r3, [sp, #4]
 80023cc:	075a      	lsls	r2, r3, #29
 80023ce:	d443      	bmi.n	8002458 <print_broken_up_decimal.isra.0+0x1d4>
    else if (flags & FLAGS_SPACE) {
 80023d0:	9b01      	ldr	r3, [sp, #4]
 80023d2:	071b      	lsls	r3, r3, #28
 80023d4:	d5ac      	bpl.n	8002330 <print_broken_up_decimal.isra.0+0xac>
      buf[len++] = ' ';
 80023d6:	2320      	movs	r3, #32
 80023d8:	9a02      	ldr	r2, [sp, #8]
 80023da:	55d3      	strb	r3, [r2, r7]
 80023dc:	3701      	adds	r7, #1
 80023de:	e7a7      	b.n	8002330 <print_broken_up_decimal.isra.0+0xac>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80023e0:	f1ba 0f20 	cmp.w	sl, #32
 80023e4:	4623      	mov	r3, r4
 80023e6:	9c05      	ldr	r4, [sp, #20]
 80023e8:	d09b      	beq.n	8002322 <print_broken_up_decimal.isra.0+0x9e>
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d068      	beq.n	80024c0 <print_broken_up_decimal.isra.0+0x23c>
 80023ee:	9b02      	ldr	r3, [sp, #8]
        buf[len++] = '0';
 80023f0:	2130      	movs	r1, #48	; 0x30
 80023f2:	199a      	adds	r2, r3, r6
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80023f4:	4656      	mov	r6, sl
        buf[len++] = '0';
 80023f6:	3601      	adds	r6, #1
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80023f8:	2e20      	cmp	r6, #32
        buf[len++] = '0';
 80023fa:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80023fe:	d090      	beq.n	8002322 <print_broken_up_decimal.isra.0+0x9e>
 8002400:	43f3      	mvns	r3, r6
 8002402:	444b      	add	r3, r9
 8002404:	eb1a 0f03 	cmn.w	sl, r3
 8002408:	d1f5      	bne.n	80023f6 <print_broken_up_decimal.isra.0+0x172>
 800240a:	e7ac      	b.n	8002366 <print_broken_up_decimal.isra.0+0xe2>
      if (number_.fractional > 0) {
 800240c:	2a01      	cmp	r2, #1
 800240e:	f178 0300 	sbcs.w	r3, r8, #0
 8002412:	dbac      	blt.n	800236e <print_broken_up_decimal.isra.0+0xea>
          if (digit != 0) {
 8002414:	4610      	mov	r0, r2
 8002416:	4641      	mov	r1, r8
 8002418:	220a      	movs	r2, #10
 800241a:	2300      	movs	r3, #0
 800241c:	f7fe fbb6 	bl	8000b8c <__aeabi_ldivmod>
 8002420:	4313      	orrs	r3, r2
 8002422:	f47f af5a 	bne.w	80022da <print_broken_up_decimal.isra.0+0x56>
          number_.fractional /= 10U;
 8002426:	4638      	mov	r0, r7
 8002428:	4641      	mov	r1, r8
 800242a:	220a      	movs	r2, #10
 800242c:	2300      	movs	r3, #0
 800242e:	f7fe fbad 	bl	8000b8c <__aeabi_ldivmod>
 8002432:	220a      	movs	r2, #10
 8002434:	2300      	movs	r3, #0
 8002436:	46bb      	mov	fp, r7
 8002438:	46c2      	mov	sl, r8
 800243a:	4607      	mov	r7, r0
 800243c:	4688      	mov	r8, r1
 800243e:	f7fe fba5 	bl	8000b8c <__aeabi_ldivmod>
          if (digit != 0) {
 8002442:	4313      	orrs	r3, r2
          --count;
 8002444:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
          if (digit != 0) {
 8002448:	d0ed      	beq.n	8002426 <print_broken_up_decimal.isra.0+0x1a2>
    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 800244a:	f1bb 0f0a 	cmp.w	fp, #10
 800244e:	f17a 0300 	sbcs.w	r3, sl, #0
 8002452:	f6bf af42 	bge.w	80022da <print_broken_up_decimal.isra.0+0x56>
 8002456:	e78a      	b.n	800236e <print_broken_up_decimal.isra.0+0xea>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002458:	232b      	movs	r3, #43	; 0x2b
 800245a:	9a02      	ldr	r2, [sp, #8]
 800245c:	55d3      	strb	r3, [r2, r7]
 800245e:	3701      	adds	r7, #1
 8002460:	e766      	b.n	8002330 <print_broken_up_decimal.isra.0+0xac>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002462:	9b03      	ldr	r3, [sp, #12]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f43f af62 	beq.w	800232e <print_broken_up_decimal.isra.0+0xaa>
 800246a:	9a04      	ldr	r2, [sp, #16]
 800246c:	bb0a      	cbnz	r2, 80024b2 <print_broken_up_decimal.isra.0+0x22e>
 800246e:	9a01      	ldr	r2, [sp, #4]
 8002470:	f012 0f0c 	tst.w	r2, #12
 8002474:	f43f af5b 	beq.w	800232e <print_broken_up_decimal.isra.0+0xaa>
      width--;
 8002478:	3b01      	subs	r3, #1
 800247a:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800247c:	e757      	b.n	800232e <print_broken_up_decimal.isra.0+0xaa>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800247e:	9b03      	ldr	r3, [sp, #12]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d099      	beq.n	80023b8 <print_broken_up_decimal.isra.0+0x134>
 8002484:	9b04      	ldr	r3, [sp, #16]
 8002486:	b1b3      	cbz	r3, 80024b6 <print_broken_up_decimal.isra.0+0x232>
      width--;
 8002488:	9b03      	ldr	r3, [sp, #12]
 800248a:	3b01      	subs	r3, #1
 800248c:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800248e:	9b03      	ldr	r3, [sp, #12]
 8002490:	429f      	cmp	r7, r3
 8002492:	d291      	bcs.n	80023b8 <print_broken_up_decimal.isra.0+0x134>
 8002494:	2f1f      	cmp	r7, #31
 8002496:	f63f af4a 	bhi.w	800232e <print_broken_up_decimal.isra.0+0xaa>
 800249a:	9b02      	ldr	r3, [sp, #8]
      buf[len++] = '0';
 800249c:	9a03      	ldr	r2, [sp, #12]
 800249e:	441e      	add	r6, r3
 80024a0:	2330      	movs	r3, #48	; 0x30
 80024a2:	3701      	adds	r7, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80024a4:	4297      	cmp	r7, r2
      buf[len++] = '0';
 80024a6:	f806 3f01 	strb.w	r3, [r6, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80024aa:	d085      	beq.n	80023b8 <print_broken_up_decimal.isra.0+0x134>
 80024ac:	2f20      	cmp	r7, #32
 80024ae:	d1f8      	bne.n	80024a2 <print_broken_up_decimal.isra.0+0x21e>
 80024b0:	e73d      	b.n	800232e <print_broken_up_decimal.isra.0+0xaa>
      width--;
 80024b2:	9b03      	ldr	r3, [sp, #12]
 80024b4:	e7e0      	b.n	8002478 <print_broken_up_decimal.isra.0+0x1f4>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80024b6:	9b01      	ldr	r3, [sp, #4]
 80024b8:	f013 0f0c 	tst.w	r3, #12
 80024bc:	d0e7      	beq.n	800248e <print_broken_up_decimal.isra.0+0x20a>
 80024be:	e7e3      	b.n	8002488 <print_broken_up_decimal.isra.0+0x204>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80024c0:	4656      	mov	r6, sl
 80024c2:	e750      	b.n	8002366 <print_broken_up_decimal.isra.0+0xe2>
 80024c4:	0000      	movs	r0, r0
	...

080024c8 <print_exponential_number>:
}

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
 80024c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024cc:	ed2d 8b04 	vpush	{d8-d9}
 80024d0:	b097      	sub	sp, #92	; 0x5c
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 80024d2:	9c25      	ldr	r4, [sp, #148]	; 0x94
{
 80024d4:	2700      	movs	r7, #0
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 80024d6:	0fe4      	lsrs	r4, r4, #31
{
 80024d8:	4689      	mov	r9, r1
 80024da:	4698      	mov	r8, r3
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 80024dc:	940d      	str	r4, [sp, #52]	; 0x34
  const bool negative = get_sign(number);
 80024de:	940f      	str	r4, [sp, #60]	; 0x3c
{
 80024e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80024e2:	920c      	str	r2, [sp, #48]	; 0x30
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
 80024e4:	b12c      	cbz	r4, 80024f2 <print_exponential_number+0x2a>
 80024e6:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80024ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80024ee:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
 80024f2:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80024f6:	2200      	movs	r2, #0
 80024f8:	2300      	movs	r3, #0
 80024fa:	f7fe faed 	bl	8000ad8 <__aeabi_dcmpeq>
 80024fe:	900e      	str	r0, [sp, #56]	; 0x38
 8002500:	2800      	cmp	r0, #0
 8002502:	d055      	beq.n	80025b0 <print_exponential_number+0xe8>
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
  if (flags & FLAGS_ADAPT_EXP) {
 8002504:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002506:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800250a:	f040 81c3 	bne.w	8002894 <print_exponential_number+0x3cc>
 800250e:	461f      	mov	r7, r3
  bool fall_back_to_decimal_only_mode = false;
 8002510:	469b      	mov	fp, r3

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
 8002512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002514:	b12b      	cbz	r3, 8002522 <print_exponential_number+0x5a>
 8002516:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 800251a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800251e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8002522:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8002526:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002528:	a810      	add	r0, sp, #64	; 0x40
 800252a:	9100      	str	r1, [sp, #0]
 800252c:	f7ff fe12 	bl	8002154 <get_components>
 8002530:	e9dd 6a12 	ldrd	r6, sl, [sp, #72]	; 0x48
 8002534:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8002538:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800253c:	930d      	str	r3, [sp, #52]	; 0x34
    get_normalized_components(negative, precision, abs_number, normalization);

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
 800253e:	2f00      	cmp	r7, #0
 8002540:	f000 8189 	beq.w	8002856 <print_exponential_number+0x38e>
    if ( (flags & FLAGS_ADAPT_EXP) && exp10 >= -1 && decimal_part_components.integral == powers_of_10[exp10 + 1]) {
 8002544:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002546:	051f      	lsls	r7, r3, #20
 8002548:	d511      	bpl.n	800256e <print_exponential_number+0xa6>
 800254a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800254e:	db0e      	blt.n	800256e <print_exponential_number+0xa6>
 8002550:	4620      	mov	r0, r4
 8002552:	4629      	mov	r1, r5
 8002554:	f7fe f82a 	bl	80005ac <__aeabi_l2d>
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <print_exponential_number+0xe4>)
 800255a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800255e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002562:	f7fe fab9 	bl	8000ad8 <__aeabi_dcmpeq>
 8002566:	b110      	cbz	r0, 800256e <print_exponential_number+0xa6>
      exp10++; // Not strictly necessary, since exp10 is no longer really used
      precision--;
 8002568:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800256a:	3b01      	subs	r3, #1
 800256c:	9326      	str	r3, [sp, #152]	; 0x98
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const size_t start_idx = idx;
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 800256e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002570:	4620      	mov	r0, r4
 8002572:	9309      	str	r3, [sp, #36]	; 0x24
 8002574:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002576:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8002578:	9308      	str	r3, [sp, #32]
 800257a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800257c:	9400      	str	r4, [sp, #0]
 800257e:	9307      	str	r3, [sp, #28]
 8002580:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002582:	4632      	mov	r2, r6
 8002584:	9306      	str	r3, [sp, #24]
 8002586:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002588:	4629      	mov	r1, r5
 800258a:	e9cd 8304 	strd	r8, r3, [sp, #16]
 800258e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002590:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8002594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	4653      	mov	r3, sl
 800259a:	f7ff fe73 	bl	8002284 <print_broken_up_decimal.isra.0>
 800259e:	4604      	mov	r4, r0
      // We need to right-pad with spaces to meet the width requirement
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 80025a0:	4620      	mov	r0, r4
 80025a2:	b017      	add	sp, #92	; 0x5c
 80025a4:	ecbd 8b04 	vpop	{d8-d9}
 80025a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025ac:	08019d90 	.word	0x08019d90
  return dwba;
 80025b0:	e9dd 6524 	ldrd	r6, r5, [sp, #144]	; 0x90
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 80025b4:	f3c5 500a 	ubfx	r0, r5, #20, #11
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80025b8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80025bc:	f7fd ffba 	bl	8000534 <__aeabi_i2d>
 80025c0:	a3ce      	add	r3, pc, #824	; (adr r3, 80028fc <print_exponential_number+0x434>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f7fe f81f 	bl	8000608 <__aeabi_dmul>
 80025ca:	a3ce      	add	r3, pc, #824	; (adr r3, 8002904 <print_exponential_number+0x43c>)
 80025cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d0:	f7fd fe64 	bl	800029c <__adddf3>
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80025d4:	f3c5 0313 	ubfx	r3, r5, #0, #20
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80025d8:	460d      	mov	r5, r1
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80025da:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80025de:	4604      	mov	r4, r0
 80025e0:	2200      	movs	r2, #0
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80025e2:	4630      	mov	r0, r6
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80025e4:	4bbe      	ldr	r3, [pc, #760]	; (80028e0 <print_exponential_number+0x418>)
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80025e6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80025ea:	f7fd fe55 	bl	8000298 <__aeabi_dsub>
 80025ee:	a3b4      	add	r3, pc, #720	; (adr r3, 80028c0 <print_exponential_number+0x3f8>)
 80025f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f4:	f7fe f808 	bl	8000608 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4620      	mov	r0, r4
 80025fe:	4629      	mov	r1, r5
 8002600:	f7fd fe4c 	bl	800029c <__adddf3>
 8002604:	f7fe fa9a 	bl	8000b3c <__aeabi_d2iz>
 8002608:	4683      	mov	fp, r0
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 800260a:	f7fd ff93 	bl	8000534 <__aeabi_i2d>
 800260e:	a3ae      	add	r3, pc, #696	; (adr r3, 80028c8 <print_exponential_number+0x400>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	4604      	mov	r4, r0
 8002616:	460d      	mov	r5, r1
 8002618:	f7fd fff6 	bl	8000608 <__aeabi_dmul>
 800261c:	2200      	movs	r2, #0
 800261e:	4bb1      	ldr	r3, [pc, #708]	; (80028e4 <print_exponential_number+0x41c>)
 8002620:	f7fd fe3c 	bl	800029c <__adddf3>
 8002624:	f7fe fa8a 	bl	8000b3c <__aeabi_d2iz>
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002628:	a3a9      	add	r3, pc, #676	; (adr r3, 80028d0 <print_exponential_number+0x408>)
 800262a:	e9d3 2300 	ldrd	r2, r3, [r3]
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 800262e:	4682      	mov	sl, r0
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8002630:	4629      	mov	r1, r5
 8002632:	4620      	mov	r0, r4
 8002634:	f7fd ffe8 	bl	8000608 <__aeabi_dmul>
 8002638:	4604      	mov	r4, r0
 800263a:	4650      	mov	r0, sl
 800263c:	460d      	mov	r5, r1
 800263e:	f7fd ff79 	bl	8000534 <__aeabi_i2d>
 8002642:	a3a5      	add	r3, pc, #660	; (adr r3, 80028d8 <print_exponential_number+0x410>)
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f7fd ffde 	bl	8000608 <__aeabi_dmul>
 800264c:	4602      	mov	r2, r0
 800264e:	460b      	mov	r3, r1
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fd fe20 	bl	8000298 <__aeabi_dsub>
      const double z2 = z * z;
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 800265c:	4604      	mov	r4, r0
 800265e:	460d      	mov	r5, r1
      const double z2 = z * z;
 8002660:	f7fd ffd2 	bl	8000608 <__aeabi_dmul>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8002664:	4622      	mov	r2, r4
      const double z2 = z * z;
 8002666:	4606      	mov	r6, r0
 8002668:	460f      	mov	r7, r1
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800266a:	462b      	mov	r3, r5
 800266c:	4620      	mov	r0, r4
 800266e:	4629      	mov	r1, r5
 8002670:	f7fd fe14 	bl	800029c <__adddf3>
 8002674:	2200      	movs	r2, #0
 8002676:	ec41 0b18 	vmov	d8, r0, r1
 800267a:	4b9b      	ldr	r3, [pc, #620]	; (80028e8 <print_exponential_number+0x420>)
 800267c:	4630      	mov	r0, r6
 800267e:	4639      	mov	r1, r7
 8002680:	f7fe f8ec 	bl	800085c <__aeabi_ddiv>
 8002684:	2200      	movs	r2, #0
 8002686:	4b99      	ldr	r3, [pc, #612]	; (80028ec <print_exponential_number+0x424>)
 8002688:	f7fd fe08 	bl	800029c <__adddf3>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4630      	mov	r0, r6
 8002692:	4639      	mov	r1, r7
 8002694:	f7fe f8e2 	bl	800085c <__aeabi_ddiv>
 8002698:	2200      	movs	r2, #0
 800269a:	4b95      	ldr	r3, [pc, #596]	; (80028f0 <print_exponential_number+0x428>)
 800269c:	f7fd fdfe 	bl	800029c <__adddf3>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4630      	mov	r0, r6
 80026a6:	4639      	mov	r1, r7
 80026a8:	f7fe f8d8 	bl	800085c <__aeabi_ddiv>
 80026ac:	4622      	mov	r2, r4
 80026ae:	462b      	mov	r3, r5
 80026b0:	4604      	mov	r4, r0
 80026b2:	460d      	mov	r5, r1
 80026b4:	2000      	movs	r0, #0
 80026b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026ba:	f7fd fded 	bl	8000298 <__aeabi_dsub>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4620      	mov	r0, r4
 80026c4:	4629      	mov	r1, r5
 80026c6:	f7fd fde9 	bl	800029c <__adddf3>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ec51 0b18 	vmov	r0, r1, d8
 80026d2:	f7fe f8c3 	bl	800085c <__aeabi_ddiv>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 80026d6:	f20a 3aff 	addw	sl, sl, #1023	; 0x3ff
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80026da:	2200      	movs	r2, #0
 80026dc:	4b85      	ldr	r3, [pc, #532]	; (80028f4 <print_exponential_number+0x42c>)
 80026de:	f7fd fddd 	bl	800029c <__adddf3>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 80026e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80026e4:	ea4f 530a 	mov.w	r3, sl, lsl #20
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80026e8:	f7fd ff8e 	bl	8000608 <__aeabi_dmul>
      if (abs_number < conv.F) {
 80026ec:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80026f0:	4604      	mov	r4, r0
 80026f2:	460d      	mov	r5, r1
      if (abs_number < conv.F) {
 80026f4:	f7fe fa18 	bl	8000b28 <__aeabi_dcmpgt>
 80026f8:	2800      	cmp	r0, #0
 80026fa:	f040 80c2 	bne.w	8002882 <print_exponential_number+0x3ba>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80026fe:	4620      	mov	r0, r4
 8002700:	4629      	mov	r1, r5
    abs_exp10_covered_by_powers_table = PRINTF_ABS(exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
 8002702:	f10b 0311 	add.w	r3, fp, #17
 8002706:	2b22      	cmp	r3, #34	; 0x22
 8002708:	bf94      	ite	ls
 800270a:	2701      	movls	r7, #1
 800270c:	2700      	movhi	r7, #0
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 800270e:	f200 8159 	bhi.w	80029c4 <print_exponential_number+0x4fc>
 8002712:	4a79      	ldr	r2, [pc, #484]	; (80028f8 <print_exponential_number+0x430>)
 8002714:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8002718:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 800271c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002720:	ed92 7b00 	vldr	d7, [r2]
 8002724:	eeb0 8a47 	vmov.f32	s16, s14
 8002728:	eef0 8a67 	vmov.f32	s17, s15
  if (flags & FLAGS_ADAPT_EXP) {
 800272c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800272e:	0512      	lsls	r2, r2, #20
 8002730:	f140 80ec 	bpl.w	800290c <print_exponential_number+0x444>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8002734:	f11b 0f04 	cmn.w	fp, #4
 8002738:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800273a:	f280 81f8 	bge.w	8002b2e <print_exponential_number+0x666>
        (int) precision - 1 - exp10 :
 800273e:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8002740:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002744:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8002746:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800274c:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 800274e:	2f00      	cmp	r7, #0
 8002750:	f040 80e3 	bne.w	800291a <print_exponential_number+0x452>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8002754:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8002758:	ec57 6b18 	vmov	r6, r7, d8
  components.is_negative = negative;
 800275c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800275e:	ee18 2a10 	vmov	r2, s16
  components.is_negative = negative;
 8002762:	930d      	str	r3, [sp, #52]	; 0x34
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8002764:	463b      	mov	r3, r7
 8002766:	f7fe f879 	bl	800085c <__aeabi_ddiv>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 800276a:	f7fe fa77 	bl	8000c5c <__aeabi_d2lz>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8002772:	f7fd ff1b 	bl	80005ac <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 8002776:	463b      	mov	r3, r7
 8002778:	ee18 2a10 	vmov	r2, s16
 800277c:	f7fd ff44 	bl	8000608 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8002784:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8002788:	f7fd fd86 	bl	8000298 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 800278c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800278e:	4b5a      	ldr	r3, [pc, #360]	; (80028f8 <print_exponential_number+0x430>)
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8002790:	4606      	mov	r6, r0
  double prec_power_of_10 = powers_of_10[precision];
 8002792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002796:	ed93 7b00 	vldr	d7, [r3]
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 800279a:	ee17 3a90 	vmov	r3, s15
 800279e:	f3c7 520a 	ubfx	r2, r7, #20, #11
 80027a2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80027a6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80027aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 80027ae:	2a00      	cmp	r2, #0
 80027b0:	bfb8      	it	lt
 80027b2:	4252      	neglt	r2, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	bfb8      	it	lt
 80027b8:	425b      	neglt	r3, r3
 80027ba:	429a      	cmp	r2, r3
  double prec_power_of_10 = powers_of_10[precision];
 80027bc:	eeb0 9a47 	vmov.f32	s18, s14
 80027c0:	eef0 9a67 	vmov.f32	s19, s15
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 80027c4:	460f      	mov	r7, r1
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 80027c6:	f340 819c 	ble.w	8002b02 <print_exponential_number+0x63a>
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 80027ca:	ec53 2b17 	vmov	r2, r3, d7
 80027ce:	ec51 0b18 	vmov	r0, r1, d8
 80027d2:	f7fe f843 	bl	800085c <__aeabi_ddiv>
 80027d6:	460b      	mov	r3, r1
 80027d8:	4602      	mov	r2, r0
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 80027da:	4639      	mov	r1, r7
 80027dc:	4630      	mov	r0, r6
 80027de:	f7fe f83d 	bl	800085c <__aeabi_ddiv>
 80027e2:	4606      	mov	r6, r0
 80027e4:	460f      	mov	r7, r1
  if (precision == 0U) {
 80027e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    components.integral += (scaled_remainder >= rounding_threshold);
 80027e8:	4630      	mov	r0, r6
 80027ea:	4639      	mov	r1, r7
  if (precision == 0U) {
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80cf 	beq.w	8002990 <print_exponential_number+0x4c8>
    components.fractional = (int_fast64_t) scaled_remainder;
 80027f2:	f7fe fa33 	bl	8000c5c <__aeabi_d2lz>
 80027f6:	468a      	mov	sl, r1
 80027f8:	900e      	str	r0, [sp, #56]	; 0x38
    scaled_remainder -= components.fractional;
 80027fa:	f7fd fed7 	bl	80005ac <__aeabi_l2d>
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4630      	mov	r0, r6
 8002804:	4639      	mov	r1, r7
 8002806:	f7fd fd47 	bl	8000298 <__aeabi_dsub>
    components.fractional += (scaled_remainder >= rounding_threshold);
 800280a:	2200      	movs	r2, #0
 800280c:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <print_exponential_number+0x41c>)
    scaled_remainder -= components.fractional;
 800280e:	4606      	mov	r6, r0
 8002810:	460f      	mov	r7, r1
    components.fractional += (scaled_remainder >= rounding_threshold);
 8002812:	f7fe f97f 	bl	8000b14 <__aeabi_dcmpge>
 8002816:	4603      	mov	r3, r0
    if (scaled_remainder == rounding_threshold) {
 8002818:	4630      	mov	r0, r6
    components.fractional += (scaled_remainder >= rounding_threshold);
 800281a:	1e1e      	subs	r6, r3, #0
 800281c:	bf18      	it	ne
 800281e:	2601      	movne	r6, #1
 8002820:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (scaled_remainder == rounding_threshold) {
 8002822:	4639      	mov	r1, r7
    components.fractional += (scaled_remainder >= rounding_threshold);
 8002824:	18f6      	adds	r6, r6, r3
    if (scaled_remainder == rounding_threshold) {
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	4b2e      	ldr	r3, [pc, #184]	; (80028e4 <print_exponential_number+0x41c>)
    components.fractional += (scaled_remainder >= rounding_threshold);
 800282c:	f14a 0a00 	adc.w	sl, sl, #0
    if (scaled_remainder == rounding_threshold) {
 8002830:	f7fe f952 	bl	8000ad8 <__aeabi_dcmpeq>
 8002834:	b108      	cbz	r0, 800283a <print_exponential_number+0x372>
      components.fractional &= ~((int_fast64_t) 0x1);
 8002836:	f026 0601 	bic.w	r6, r6, #1
    if ((double) components.fractional >= prec_power_of_10) {
 800283a:	4630      	mov	r0, r6
 800283c:	4651      	mov	r1, sl
 800283e:	f7fd feb5 	bl	80005ac <__aeabi_l2d>
 8002842:	ec53 2b19 	vmov	r2, r3, d9
 8002846:	f7fe f965 	bl	8000b14 <__aeabi_dcmpge>
 800284a:	b120      	cbz	r0, 8002856 <print_exponential_number+0x38e>
      ++components.integral;
 800284c:	3401      	adds	r4, #1
 800284e:	f145 0500 	adc.w	r5, r5, #0
      components.fractional = 0;
 8002852:	2600      	movs	r6, #0
 8002854:	46b2      	mov	sl, r6
    if (decimal_part_components.integral >= 10) {
 8002856:	2c0a      	cmp	r4, #10
 8002858:	f175 0300 	sbcs.w	r3, r5, #0
 800285c:	db05      	blt.n	800286a <print_exponential_number+0x3a2>
      decimal_part_components.fractional = 0;
 800285e:	2600      	movs	r6, #0
      decimal_part_components.integral = 1;
 8002860:	2401      	movs	r4, #1
      decimal_part_components.fractional = 0;
 8002862:	46b2      	mov	sl, r6
      decimal_part_components.integral = 1;
 8002864:	4635      	mov	r5, r6
      exp10++;
 8002866:	f10b 0b01 	add.w	fp, fp, #1
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 800286a:	f10b 0363 	add.w	r3, fp, #99	; 0x63
 800286e:	2bc6      	cmp	r3, #198	; 0xc6
 8002870:	f200 80ab 	bhi.w	80029ca <print_exponential_number+0x502>
      0U :
 8002874:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002876:	f013 0702 	ands.w	r7, r3, #2
 800287a:	f040 8129 	bne.w	8002ad0 <print_exponential_number+0x608>
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 800287e:	2704      	movs	r7, #4
 8002880:	e104      	b.n	8002a8c <print_exponential_number+0x5c4>
        conv.F /= 10;
 8002882:	4620      	mov	r0, r4
 8002884:	4629      	mov	r1, r5
 8002886:	2200      	movs	r2, #0
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <print_exponential_number+0x424>)
        exp10--;
 800288a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        conv.F /= 10;
 800288e:	f7fd ffe5 	bl	800085c <__aeabi_ddiv>
 8002892:	e736      	b.n	8002702 <print_exponential_number+0x23a>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8002894:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002896:	2b01      	cmp	r3, #1
 8002898:	bf38      	it	cc
 800289a:	2301      	movcc	r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	f340 811a 	ble.w	8002ad6 <print_exponential_number+0x60e>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 80028a2:	f04f 0b00 	mov.w	fp, #0
        (int) precision - 1 - exp10 :
 80028a6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80028a8:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 80028aa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80028ae:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 80028b0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80028b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b6:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 80028b8:	2701      	movs	r7, #1
 80028ba:	e62a      	b.n	8002512 <print_exponential_number+0x4a>
 80028bc:	f3af 8000 	nop.w
 80028c0:	636f4361 	.word	0x636f4361
 80028c4:	3fd287a7 	.word	0x3fd287a7
 80028c8:	0979a371 	.word	0x0979a371
 80028cc:	400a934f 	.word	0x400a934f
 80028d0:	bbb55516 	.word	0xbbb55516
 80028d4:	40026bb1 	.word	0x40026bb1
 80028d8:	fefa39ef 	.word	0xfefa39ef
 80028dc:	3fe62e42 	.word	0x3fe62e42
 80028e0:	3ff80000 	.word	0x3ff80000
 80028e4:	3fe00000 	.word	0x3fe00000
 80028e8:	402c0000 	.word	0x402c0000
 80028ec:	40240000 	.word	0x40240000
 80028f0:	40180000 	.word	0x40180000
 80028f4:	3ff00000 	.word	0x3ff00000
 80028f8:	08019d90 	.word	0x08019d90
 80028fc:	509f79fb 	.word	0x509f79fb
 8002900:	3fd34413 	.word	0x3fd34413
 8002904:	8b60c8b3 	.word	0x8b60c8b3
 8002908:	3fc68a28 	.word	0x3fc68a28
 800290c:	f1bb 0f00 	cmp.w	fp, #0
 8002910:	f280 80f1 	bge.w	8002af6 <print_exponential_number+0x62e>
 8002914:	2b22      	cmp	r3, #34	; 0x22
 8002916:	f63f af1d 	bhi.w	8002754 <print_exponential_number+0x28c>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800291a:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800291e:	ec57 6b18 	vmov	r6, r7, d8
  components.is_negative = negative;
 8002922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8002924:	ee18 2a10 	vmov	r2, s16
  components.is_negative = negative;
 8002928:	930d      	str	r3, [sp, #52]	; 0x34
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800292a:	463b      	mov	r3, r7
 800292c:	f7fd fe6c 	bl	8000608 <__aeabi_dmul>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 8002930:	f7fe f994 	bl	8000c5c <__aeabi_d2lz>
 8002934:	4604      	mov	r4, r0
 8002936:	460d      	mov	r5, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8002938:	f7fd fe38 	bl	80005ac <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 800293c:	463b      	mov	r3, r7
 800293e:	ee18 2a10 	vmov	r2, s16
 8002942:	f7fd ff8b 	bl	800085c <__aeabi_ddiv>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 800294a:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800294e:	f7fd fca3 	bl	8000298 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 8002952:	4e7f      	ldr	r6, [pc, #508]	; (8002b50 <print_exponential_number+0x688>)
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8002954:	463b      	mov	r3, r7
  double prec_power_of_10 = powers_of_10[precision];
 8002956:	9f26      	ldr	r7, [sp, #152]	; 0x98
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8002958:	ee18 2a10 	vmov	r2, s16
  double prec_power_of_10 = powers_of_10[precision];
 800295c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8002960:	ed96 7b00 	vldr	d7, [r6]
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8002964:	460f      	mov	r7, r1
 8002966:	4606      	mov	r6, r0
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8002968:	ec51 0b17 	vmov	r0, r1, d7
  double prec_power_of_10 = powers_of_10[precision];
 800296c:	eeb0 9a47 	vmov.f32	s18, s14
 8002970:	eef0 9a67 	vmov.f32	s19, s15
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8002974:	f7fd fe48 	bl	8000608 <__aeabi_dmul>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8002978:	463b      	mov	r3, r7
 800297a:	4632      	mov	r2, r6
 800297c:	f7fd fe44 	bl	8000608 <__aeabi_dmul>
 8002980:	4606      	mov	r6, r0
 8002982:	460f      	mov	r7, r1
  if (precision == 0U) {
 8002984:	9b26      	ldr	r3, [sp, #152]	; 0x98
    components.integral += (scaled_remainder >= rounding_threshold);
 8002986:	4630      	mov	r0, r6
 8002988:	4639      	mov	r1, r7
  if (precision == 0U) {
 800298a:	2b00      	cmp	r3, #0
 800298c:	f47f af31 	bne.w	80027f2 <print_exponential_number+0x32a>
    components.integral += (scaled_remainder >= rounding_threshold);
 8002990:	2200      	movs	r2, #0
 8002992:	4b70      	ldr	r3, [pc, #448]	; (8002b54 <print_exponential_number+0x68c>)
 8002994:	f7fe f8be 	bl	8000b14 <__aeabi_dcmpge>
 8002998:	4603      	mov	r3, r0
 800299a:	3b00      	subs	r3, #0
 800299c:	bf18      	it	ne
 800299e:	2301      	movne	r3, #1
    if (scaled_remainder == rounding_threshold) {
 80029a0:	4630      	mov	r0, r6
    components.integral += (scaled_remainder >= rounding_threshold);
 80029a2:	191c      	adds	r4, r3, r4
    if (scaled_remainder == rounding_threshold) {
 80029a4:	4639      	mov	r1, r7
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	4b6a      	ldr	r3, [pc, #424]	; (8002b54 <print_exponential_number+0x68c>)
    components.integral += (scaled_remainder >= rounding_threshold);
 80029ac:	f145 0500 	adc.w	r5, r5, #0
    if (scaled_remainder == rounding_threshold) {
 80029b0:	f7fe f892 	bl	8000ad8 <__aeabi_dcmpeq>
 80029b4:	2800      	cmp	r0, #0
 80029b6:	f43f af4c 	beq.w	8002852 <print_exponential_number+0x38a>
    components.fractional = 0;
 80029ba:	9e26      	ldr	r6, [sp, #152]	; 0x98
      components.integral &= ~((int_fast64_t) 0x1);
 80029bc:	f024 0401 	bic.w	r4, r4, #1
    components.fractional = 0;
 80029c0:	46b2      	mov	sl, r6
 80029c2:	e748      	b.n	8002856 <print_exponential_number+0x38e>
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 80029c4:	ec41 0b18 	vmov	d8, r0, r1
 80029c8:	e6b0      	b.n	800272c <print_exponential_number+0x264>
      0U :
 80029ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80029cc:	f013 0702 	ands.w	r7, r3, #2
 80029d0:	d05b      	beq.n	8002a8a <print_exponential_number+0x5c2>
 80029d2:	2304      	movs	r3, #4
 80029d4:	930e      	str	r3, [sp, #56]	; 0x38
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 80029d6:	4620      	mov	r0, r4
 80029d8:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80029da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80029dc:	9407      	str	r4, [sp, #28]
 80029de:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80029e0:	9309      	str	r3, [sp, #36]	; 0x24
 80029e2:	e9cd 9402 	strd	r9, r4, [sp, #8]
 80029e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80029e8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80029ea:	9401      	str	r4, [sp, #4]
 80029ec:	2400      	movs	r4, #0
 80029ee:	9308      	str	r3, [sp, #32]
 80029f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80029f2:	4632      	mov	r2, r6
 80029f4:	9305      	str	r3, [sp, #20]
 80029f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80029f8:	4629      	mov	r1, r5
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	f8cd 8010 	str.w	r8, [sp, #16]
 8002a00:	4653      	mov	r3, sl
 8002a02:	9406      	str	r4, [sp, #24]
 8002a04:	f7ff fc3e 	bl	8002284 <print_broken_up_decimal.isra.0>
 8002a08:	4602      	mov	r2, r0
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8002a0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002a0c:	4649      	mov	r1, r9
 8002a0e:	f013 0f20 	tst.w	r3, #32
 8002a12:	bf14      	ite	ne
 8002a14:	2045      	movne	r0, #69	; 0x45
 8002a16:	2065      	moveq	r0, #101	; 0x65
 8002a18:	4643      	mov	r3, r8
 8002a1a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002a1c:	1c54      	adds	r4, r2, #1
 8002a1e:	47a8      	blx	r5
    idx = print_integer(out, buffer, idx, maxlen,
 8002a20:	f1bb 0f00 	cmp.w	fp, #0
 8002a24:	dd74      	ble.n	8002b10 <print_exponential_number+0x648>
 8002a26:	465a      	mov	r2, fp
 8002a28:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8002a2c:	e9cd 2300 	strd	r2, r3, [sp]
 8002a30:	2305      	movs	r3, #5
 8002a32:	ea4f 70db 	mov.w	r0, fp, lsr #31
 8002a36:	9002      	str	r0, [sp, #8]
 8002a38:	9306      	str	r3, [sp, #24]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	230a      	movs	r3, #10
 8002a3e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002a40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8002a42:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8002a46:	4622      	mov	r2, r4
 8002a48:	9105      	str	r1, [sp, #20]
 8002a4a:	4643      	mov	r3, r8
 8002a4c:	4649      	mov	r1, r9
 8002a4e:	4630      	mov	r0, r6
 8002a50:	f7ff fa3e 	bl	8001ed0 <print_integer>
 8002a54:	4604      	mov	r4, r0
    if (flags & FLAGS_LEFT) {
 8002a56:	2f00      	cmp	r7, #0
 8002a58:	f43f ada2 	beq.w	80025a0 <print_exponential_number+0xd8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8002a5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002a5e:	1ac5      	subs	r5, r0, r3
 8002a60:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8002a62:	42ab      	cmp	r3, r5
 8002a64:	f67f ad9c 	bls.w	80025a0 <print_exponential_number+0xd8>
 8002a68:	461f      	mov	r7, r3
 8002a6a:	4622      	mov	r2, r4
 8002a6c:	4643      	mov	r3, r8
 8002a6e:	4649      	mov	r1, r9
 8002a70:	2020      	movs	r0, #32
 8002a72:	3501      	adds	r5, #1
 8002a74:	47b0      	blx	r6
 8002a76:	42af      	cmp	r7, r5
 8002a78:	f104 0401 	add.w	r4, r4, #1
 8002a7c:	d8f5      	bhi.n	8002a6a <print_exponential_number+0x5a2>
}
 8002a7e:	4620      	mov	r0, r4
 8002a80:	b017      	add	sp, #92	; 0x5c
 8002a82:	ecbd 8b04 	vpop	{d8-d9}
 8002a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 8002a8a:	2705      	movs	r7, #5
        width - exp10_part_width :
 8002a8c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8002a8e:	4620      	mov	r0, r4
        width - exp10_part_width :
 8002a90:	429f      	cmp	r7, r3
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8002a92:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8002a94:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8002a96:	9309      	str	r3, [sp, #36]	; 0x24
 8002a98:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8002a9a:	9407      	str	r4, [sp, #28]
 8002a9c:	9308      	str	r3, [sp, #32]
 8002a9e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002aa0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002aa2:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8002aa6:	9305      	str	r3, [sp, #20]
 8002aa8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002aac:	4632      	mov	r2, r6
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	4629      	mov	r1, r5
 8002ab2:	4653      	mov	r3, sl
 8002ab4:	f8cd 8010 	str.w	r8, [sp, #16]
 8002ab8:	9401      	str	r4, [sp, #4]
        width - exp10_part_width :
 8002aba:	d230      	bcs.n	8002b1e <print_exponential_number+0x656>
 8002abc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8002abe:	1be4      	subs	r4, r4, r7
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8002ac0:	9406      	str	r4, [sp, #24]
 8002ac2:	f7ff fbdf 	bl	8002284 <print_broken_up_decimal.isra.0>
    idx = print_integer(out, buffer, idx, maxlen,
 8002ac6:	1e7b      	subs	r3, r7, #1
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8002ac8:	4602      	mov	r2, r0
    idx = print_integer(out, buffer, idx, maxlen,
 8002aca:	2700      	movs	r7, #0
 8002acc:	930e      	str	r3, [sp, #56]	; 0x38
 8002ace:	e79c      	b.n	8002a0a <print_exponential_number+0x542>
      0U :
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	930e      	str	r3, [sp, #56]	; 0x38
 8002ad4:	e77f      	b.n	80029d6 <print_exponential_number+0x50e>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 8002ad6:	f04f 0b00 	mov.w	fp, #0
        (int) precision - 1 - exp10 :
 8002ada:	9b26      	ldr	r3, [sp, #152]	; 0x98
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8002adc:	f1bb 0f00 	cmp.w	fp, #0
        (int) precision - 1 - exp10 :
 8002ae0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8002ae4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002ae8:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8002aea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af0:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8002af2:	f6ff ae2c 	blt.w	800274e <print_exponential_number+0x286>
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
 8002af6:	f1bb 0f00 	cmp.w	fp, #0
 8002afa:	f47f ae2b 	bne.w	8002754 <print_exponential_number+0x28c>
 8002afe:	465f      	mov	r7, fp
 8002b00:	e507      	b.n	8002512 <print_exponential_number+0x4a>
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 8002b02:	ec53 2b18 	vmov	r2, r3, d8
 8002b06:	ec51 0b17 	vmov	r0, r1, d7
 8002b0a:	f7fd fea7 	bl	800085c <__aeabi_ddiv>
 8002b0e:	e733      	b.n	8002978 <print_exponential_number+0x4b0>
                ABS_FOR_PRINTING(exp10),
 8002b10:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8002b14:	f1db 0200 	rsbs	r2, fp, #0
 8002b18:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002b1c:	e786      	b.n	8002a2c <print_exponential_number+0x564>
    idx = print_integer(out, buffer, idx, maxlen,
 8002b1e:	1e7c      	subs	r4, r7, #1
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8002b20:	2700      	movs	r7, #0
 8002b22:	9706      	str	r7, [sp, #24]
    idx = print_integer(out, buffer, idx, maxlen,
 8002b24:	940e      	str	r4, [sp, #56]	; 0x38
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8002b26:	f7ff fbad 	bl	8002284 <print_broken_up_decimal.isra.0>
 8002b2a:	4602      	mov	r2, r0
  if (! fall_back_to_decimal_only_mode) {
 8002b2c:	e76d      	b.n	8002a0a <print_exponential_number+0x542>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	bf38      	it	cc
 8002b32:	2301      	movcc	r3, #1
 8002b34:	459b      	cmp	fp, r3
 8002b36:	dad0      	bge.n	8002ada <print_exponential_number+0x612>
        (int) precision - 1 - exp10 :
 8002b38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	eba3 030b 	sub.w	r3, r3, fp
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8002b40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002b44:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8002b46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002b48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b4c:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8002b4e:	e6b3      	b.n	80028b8 <print_exponential_number+0x3f0>
 8002b50:	08019d90 	.word	0x08019d90
 8002b54:	3fe00000 	.word	0x3fe00000

08002b58 <print_floating_point>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS


static size_t print_floating_point(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int precision, unsigned int width, unsigned int flags, bool prefer_exponential)
{
 8002b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b5c:	b09d      	sub	sp, #116	; 0x74
 8002b5e:	e9dd 5428 	ldrd	r5, r4, [sp, #160]	; 0xa0
 8002b62:	940c      	str	r4, [sp, #48]	; 0x30
 8002b64:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8002b66:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 8002b6a:	940b      	str	r4, [sp, #44]	; 0x2c
 8002b6c:	f89d 40ac 	ldrb.w	r4, [sp, #172]	; 0xac
 8002b70:	4680      	mov	r8, r0
 8002b72:	4689      	mov	r9, r1
 8002b74:	4692      	mov	sl, r2
 8002b76:	469b      	mov	fp, r3
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;

  // test for special values
  if (value != value)
 8002b78:	4632      	mov	r2, r6
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	4630      	mov	r0, r6
 8002b7e:	4639      	mov	r1, r7
{
 8002b80:	940d      	str	r4, [sp, #52]	; 0x34
  if (value != value)
 8002b82:	f7fd ffa9 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d07c      	beq.n	8002c84 <print_floating_point+0x12c>
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	4639      	mov	r1, r7
 8002b8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b92:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8002b96:	f7fd ffa9 	bl	8000aec <__aeabi_dcmplt>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	f040 80a3 	bne.w	8002ce6 <print_floating_point+0x18e>
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 8002ba0:	4630      	mov	r0, r6
 8002ba2:	4639      	mov	r1, r7
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ba8:	4b5f      	ldr	r3, [pc, #380]	; (8002d28 <print_floating_point+0x1d0>)
 8002baa:	f7fd ffbd 	bl	8000b28 <__aeabi_dcmpgt>
 8002bae:	bb38      	cbnz	r0, 8002c00 <print_floating_point+0xa8>
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  if (!prefer_exponential && ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8002bb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d13d      	bne.n	8002c32 <print_floating_point+0xda>
 8002bb6:	a358      	add	r3, pc, #352	; (adr r3, 8002d18 <print_floating_point+0x1c0>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	4630      	mov	r0, r6
 8002bbe:	4639      	mov	r1, r7
 8002bc0:	f7fd ffb2 	bl	8000b28 <__aeabi_dcmpgt>
 8002bc4:	b940      	cbnz	r0, 8002bd8 <print_floating_point+0x80>
 8002bc6:	a356      	add	r3, pc, #344	; (adr r3, 8002d20 <print_floating_point+0x1c8>)
 8002bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bcc:	4630      	mov	r0, r6
 8002bce:	4639      	mov	r1, r7
 8002bd0:	f7fd ff8c 	bl	8000aec <__aeabi_dcmplt>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d02c      	beq.n	8002c32 <print_floating_point+0xda>
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    return print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
 8002bd8:	2400      	movs	r4, #0
 8002bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bdc:	9502      	str	r5, [sp, #8]
 8002bde:	9304      	str	r3, [sp, #16]
 8002be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002be2:	ad14      	add	r5, sp, #80	; 0x50
 8002be4:	9303      	str	r3, [sp, #12]
 8002be6:	4652      	mov	r2, sl
 8002be8:	465b      	mov	r3, fp
 8002bea:	4649      	mov	r1, r9
 8002bec:	4640      	mov	r0, r8
 8002bee:	e9cd 6700 	strd	r6, r7, [sp]
 8002bf2:	e9cd 5405 	strd	r5, r4, [sp, #20]
 8002bf6:	f7ff fc67 	bl	80024c8 <print_exponential_number>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
#endif
      print_decimal_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
}
 8002bfa:	b01d      	add	sp, #116	; 0x74
 8002bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002c00:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002c02:	4d4a      	ldr	r5, [pc, #296]	; (8002d2c <print_floating_point+0x1d4>)
 8002c04:	9429      	str	r4, [sp, #164]	; 0xa4
 8002c06:	f004 0404 	and.w	r4, r4, #4
 8002c0a:	2c00      	cmp	r4, #0
 8002c0c:	4c48      	ldr	r4, [pc, #288]	; (8002d30 <print_floating_point+0x1d8>)
 8002c0e:	bf18      	it	ne
 8002c10:	462c      	movne	r4, r5
 8002c12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c14:	9426      	str	r4, [sp, #152]	; 0x98
 8002c16:	9328      	str	r3, [sp, #160]	; 0xa0
 8002c18:	bf0c      	ite	eq
 8002c1a:	2403      	moveq	r4, #3
 8002c1c:	2404      	movne	r4, #4
 8002c1e:	465b      	mov	r3, fp
 8002c20:	4652      	mov	r2, sl
 8002c22:	4649      	mov	r1, r9
 8002c24:	4640      	mov	r0, r8
 8002c26:	9427      	str	r4, [sp, #156]	; 0x9c
}
 8002c28:	b01d      	add	sp, #116	; 0x74
 8002c2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002c2e:	f7ff b90b 	b.w	8001e48 <out_rev_>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8002c34:	2030      	movs	r0, #48	; 0x30
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8002c36:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002c3a:	bf08      	it	eq
 8002c3c:	2506      	moveq	r5, #6
 8002c3e:	ab14      	add	r3, sp, #80	; 0x50
 8002c40:	462c      	mov	r4, r5
 8002c42:	f1a5 0220 	sub.w	r2, r5, #32
 8002c46:	e004      	b.n	8002c52 <print_floating_point+0xfa>
    precision--;
 8002c48:	3c01      	subs	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8002c4a:	4294      	cmp	r4, r2
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8002c4c:	f803 0b01 	strb.w	r0, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8002c50:	d05a      	beq.n	8002d08 <print_floating_point+0x1b0>
 8002c52:	2c11      	cmp	r4, #17
 8002c54:	eba5 0104 	sub.w	r1, r5, r4
 8002c58:	d8f6      	bhi.n	8002c48 <print_floating_point+0xf0>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 8002c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002c5c:	b31b      	cbz	r3, 8002ca6 <print_floating_point+0x14e>
 8002c5e:	ab14      	add	r3, sp, #80	; 0x50
 8002c60:	9305      	str	r3, [sp, #20]
 8002c62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c64:	9106      	str	r1, [sp, #24]
 8002c66:	9304      	str	r3, [sp, #16]
 8002c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002c6a:	4652      	mov	r2, sl
 8002c6c:	9303      	str	r3, [sp, #12]
 8002c6e:	4649      	mov	r1, r9
 8002c70:	465b      	mov	r3, fp
 8002c72:	4640      	mov	r0, r8
 8002c74:	e9cd 6700 	strd	r6, r7, [sp]
 8002c78:	9402      	str	r4, [sp, #8]
 8002c7a:	f7ff fc25 	bl	80024c8 <print_exponential_number>
}
 8002c7e:	b01d      	add	sp, #116	; 0x74
 8002c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002c84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c86:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002c88:	9329      	str	r3, [sp, #164]	; 0xa4
 8002c8a:	9428      	str	r4, [sp, #160]	; 0xa0
 8002c8c:	465b      	mov	r3, fp
 8002c8e:	2403      	movs	r4, #3
 8002c90:	4652      	mov	r2, sl
 8002c92:	4649      	mov	r1, r9
 8002c94:	4640      	mov	r0, r8
 8002c96:	4d27      	ldr	r5, [pc, #156]	; (8002d34 <print_floating_point+0x1dc>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002c98:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002c9a:	9526      	str	r5, [sp, #152]	; 0x98
}
 8002c9c:	b01d      	add	sp, #116	; 0x74
 8002c9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002ca2:	f7ff b8d1 	b.w	8001e48 <out_rev_>
  struct double_components value_ = get_components(number, precision);
 8002ca6:	4632      	mov	r2, r6
 8002ca8:	463b      	mov	r3, r7
 8002caa:	a80e      	add	r0, sp, #56	; 0x38
 8002cac:	9400      	str	r4, [sp, #0]
 8002cae:	910d      	str	r1, [sp, #52]	; 0x34
 8002cb0:	f7ff fa50 	bl	8002154 <get_components>
  return print_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
 8002cb4:	ab14      	add	r3, sp, #80	; 0x50
 8002cb6:	9308      	str	r3, [sp, #32]
 8002cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002cba:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002cbc:	9307      	str	r3, [sp, #28]
 8002cbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002cc0:	9109      	str	r1, [sp, #36]	; 0x24
 8002cc2:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8002cc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002cca:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8002cce:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8002cd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8002cdc:	f7ff fad2 	bl	8002284 <print_broken_up_decimal.isra.0>
}
 8002ce0:	b01d      	add	sp, #116	; 0x74
 8002ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002ce8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002cea:	9329      	str	r3, [sp, #164]	; 0xa4
 8002cec:	9428      	str	r4, [sp, #160]	; 0xa0
 8002cee:	465b      	mov	r3, fp
 8002cf0:	2404      	movs	r4, #4
 8002cf2:	4652      	mov	r2, sl
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	4d0f      	ldr	r5, [pc, #60]	; (8002d38 <print_floating_point+0x1e0>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002cfa:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002cfc:	9526      	str	r5, [sp, #152]	; 0x98
}
 8002cfe:	b01d      	add	sp, #116	; 0x74
 8002d00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002d04:	f7ff b8a0 	b.w	8001e48 <out_rev_>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 8002d08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d0a:	2120      	movs	r1, #32
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d0ca      	beq.n	8002ca6 <print_floating_point+0x14e>
 8002d10:	e7a5      	b.n	8002c5e <print_floating_point+0x106>
 8002d12:	bf00      	nop
 8002d14:	f3af 8000 	nop.w
 8002d18:	00000000 	.word	0x00000000
 8002d1c:	41cdcd65 	.word	0x41cdcd65
 8002d20:	00000000 	.word	0x00000000
 8002d24:	c1cdcd65 	.word	0xc1cdcd65
 8002d28:	7fefffff 	.word	0x7fefffff
 8002d2c:	08019d68 	.word	0x08019d68
 8002d30:	08019d64 	.word	0x08019d64
 8002d34:	08019d70 	.word	0x08019d70
 8002d38:	08019d74 	.word	0x08019d74

08002d3c <rt_vsnprintf>:
#if (RTTHREAD_VERSION >= 40100) || (RTTHREAD_VERSION < 40000 && RTTHREAD_VERSION >= 30106)
int rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#else
rt_int32_t rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#endif
{
 8002d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d40:	460d      	mov	r5, r1
 8002d42:	461f      	mov	r7, r3
    out = out_discard;
 8002d44:	1e01      	subs	r1, r0, #0
 8002d46:	4b9b      	ldr	r3, [pc, #620]	; (8002fb4 <rt_vsnprintf+0x278>)
 8002d48:	4e9b      	ldr	r6, [pc, #620]	; (8002fb8 <rt_vsnprintf+0x27c>)
  while (*format)
 8002d4a:	7810      	ldrb	r0, [r2, #0]
    out = out_discard;
 8002d4c:	bf0c      	ite	eq
 8002d4e:	469b      	moveq	fp, r3
 8002d50:	46b3      	movne	fp, r6
{
 8002d52:	462b      	mov	r3, r5
 8002d54:	b08f      	sub	sp, #60	; 0x3c
  while (*format)
 8002d56:	2800      	cmp	r0, #0
 8002d58:	f000 827a 	beq.w	8003250 <rt_vsnprintf+0x514>
 8002d5c:	4614      	mov	r4, r2
 8002d5e:	2500      	movs	r5, #0
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 8002d60:	46ba      	mov	sl, r7
 8002d62:	4688      	mov	r8, r1
 8002d64:	4699      	mov	r9, r3
 8002d66:	e009      	b.n	8002d7c <rt_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 8002d68:	462a      	mov	r2, r5
 8002d6a:	464b      	mov	r3, r9
 8002d6c:	4641      	mov	r1, r8
 8002d6e:	47d8      	blx	fp
 8002d70:	3501      	adds	r5, #1
      format++;
 8002d72:	3401      	adds	r4, #1
  while (*format)
 8002d74:	7820      	ldrb	r0, [r4, #0]
 8002d76:	2800      	cmp	r0, #0
 8002d78:	f000 80aa 	beq.w	8002ed0 <rt_vsnprintf+0x194>
    if (*format != '%') {
 8002d7c:	2825      	cmp	r0, #37	; 0x25
 8002d7e:	d1f3      	bne.n	8002d68 <rt_vsnprintf+0x2c>
    flags = 0U;
 8002d80:	2100      	movs	r1, #0
      format++;
 8002d82:	1c63      	adds	r3, r4, #1
 8002d84:	461c      	mov	r4, r3
      switch (*format) {
 8002d86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002d8a:	f1a0 0220 	sub.w	r2, r0, #32
 8002d8e:	2a10      	cmp	r2, #16
 8002d90:	d80a      	bhi.n	8002da8 <rt_vsnprintf+0x6c>
 8002d92:	e8df f002 	tbb	[pc, r2]
 8002d96:	099a      	.short	0x099a
 8002d98:	09099709 	.word	0x09099709
 8002d9c:	09090909 	.word	0x09090909
 8002da0:	91099409 	.word	0x91099409
 8002da4:	0909      	.short	0x0909
 8002da6:	8e          	.byte	0x8e
 8002da7:	00          	.byte	0x00
    if (is_digit_(*format)) {
 8002da8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8002dac:	2b09      	cmp	r3, #9
 8002dae:	f240 80ab 	bls.w	8002f08 <rt_vsnprintf+0x1cc>
    else if (*format == '*') {
 8002db2:	282a      	cmp	r0, #42	; 0x2a
 8002db4:	f000 80b5 	beq.w	8002f22 <rt_vsnprintf+0x1e6>
    width = 0U;
 8002db8:	2600      	movs	r6, #0
    if (*format == '.') {
 8002dba:	282e      	cmp	r0, #46	; 0x2e
 8002dbc:	f000 8095 	beq.w	8002eea <rt_vsnprintf+0x1ae>
    precision = 0U;
 8002dc0:	2700      	movs	r7, #0
    switch (*format) {
 8002dc2:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8002dc6:	2b12      	cmp	r3, #18
 8002dc8:	d818      	bhi.n	8002dfc <rt_vsnprintf+0xc0>
 8002dca:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002dce:	00fc      	.short	0x00fc
 8002dd0:	00f70017 	.word	0x00f70017
 8002dd4:	01040017 	.word	0x01040017
 8002dd8:	00170017 	.word	0x00170017
 8002ddc:	00170017 	.word	0x00170017
 8002de0:	00170017 	.word	0x00170017
 8002de4:	00130017 	.word	0x00130017
 8002de8:	00170017 	.word	0x00170017
 8002dec:	00170017 	.word	0x00170017
 8002df0:	00130017 	.word	0x00130017
    switch (*format) {
 8002df4:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002df6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 8002dfa:	3401      	adds	r4, #1
    switch (*format) {
 8002dfc:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8002e00:	2b53      	cmp	r3, #83	; 0x53
 8002e02:	f200 8098 	bhi.w	8002f36 <rt_vsnprintf+0x1fa>
 8002e06:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002e0a:	0185      	.short	0x0185
 8002e0c:	00960096 	.word	0x00960096
 8002e10:	00960096 	.word	0x00960096
 8002e14:	00960096 	.word	0x00960096
 8002e18:	00960096 	.word	0x00960096
 8002e1c:	00960096 	.word	0x00960096
 8002e20:	00960096 	.word	0x00960096
 8002e24:	00960096 	.word	0x00960096
 8002e28:	00960096 	.word	0x00960096
 8002e2c:	00960096 	.word	0x00960096
 8002e30:	00960096 	.word	0x00960096
 8002e34:	00960096 	.word	0x00960096
 8002e38:	00960096 	.word	0x00960096
 8002e3c:	00960096 	.word	0x00960096
 8002e40:	00960096 	.word	0x00960096
 8002e44:	00960096 	.word	0x00960096
 8002e48:	019c0096 	.word	0x019c0096
 8002e4c:	019c00ee 	.word	0x019c00ee
 8002e50:	00960096 	.word	0x00960096
 8002e54:	00960096 	.word	0x00960096
 8002e58:	00960096 	.word	0x00960096
 8002e5c:	00960096 	.word	0x00960096
 8002e60:	00960096 	.word	0x00960096
 8002e64:	00960096 	.word	0x00960096
 8002e68:	00960096 	.word	0x00960096
 8002e6c:	00960096 	.word	0x00960096
 8002e70:	0096009d 	.word	0x0096009d
 8002e74:	00960096 	.word	0x00960096
 8002e78:	00960096 	.word	0x00960096
 8002e7c:	00960096 	.word	0x00960096
 8002e80:	00960096 	.word	0x00960096
 8002e84:	0124009d 	.word	0x0124009d
 8002e88:	019c009d 	.word	0x019c009d
 8002e8c:	019c00ee 	.word	0x019c00ee
 8002e90:	009d0096 	.word	0x009d0096
 8002e94:	00960096 	.word	0x00960096
 8002e98:	00960096 	.word	0x00960096
 8002e9c:	009d0096 	.word	0x009d0096
 8002ea0:	00960108 	.word	0x00960108
 8002ea4:	013d0096 	.word	0x013d0096
 8002ea8:	009d0096 	.word	0x009d0096
 8002eac:	00960096 	.word	0x00960096
 8002eb0:	009d      	.short	0x009d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8002eb2:	f041 0101 	orr.w	r1, r1, #1
    } while (n);
 8002eb6:	e765      	b.n	8002d84 <rt_vsnprintf+0x48>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8002eb8:	f041 0102 	orr.w	r1, r1, #2
    } while (n);
 8002ebc:	e762      	b.n	8002d84 <rt_vsnprintf+0x48>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8002ebe:	f041 0104 	orr.w	r1, r1, #4
    } while (n);
 8002ec2:	e75f      	b.n	8002d84 <rt_vsnprintf+0x48>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8002ec4:	f041 0110 	orr.w	r1, r1, #16
    } while (n);
 8002ec8:	e75c      	b.n	8002d84 <rt_vsnprintf+0x48>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8002eca:	f041 0108 	orr.w	r1, r1, #8
    } while (n);
 8002ece:	e759      	b.n	8002d84 <rt_vsnprintf+0x48>
  return (int)idx;
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	462c      	mov	r4, r5
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8002ed6:	42ab      	cmp	r3, r5
 8002ed8:	d800      	bhi.n	8002edc <rt_vsnprintf+0x1a0>
 8002eda:	1e5d      	subs	r5, r3, #1
 8002edc:	462a      	mov	r2, r5
 8002ede:	2000      	movs	r0, #0
 8002ee0:	47d8      	blx	fp
  return __vsnprintf(out_buffer, buf, size, fmt, args);
}
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	b00f      	add	sp, #60	; 0x3c
 8002ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (is_digit_(*format)) {
 8002eea:	7860      	ldrb	r0, [r4, #1]
      flags |= FLAGS_PRECISION;
 8002eec:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      if (is_digit_(*format)) {
 8002ef0:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8002ef4:	2a09      	cmp	r2, #9
      format++;
 8002ef6:	f104 0301 	add.w	r3, r4, #1
      if (is_digit_(*format)) {
 8002efa:	f240 8114 	bls.w	8003126 <rt_vsnprintf+0x3ea>
      else if (*format == '*') {
 8002efe:	282a      	cmp	r0, #42	; 0x2a
 8002f00:	f000 8136 	beq.w	8003170 <rt_vsnprintf+0x434>
      format++;
 8002f04:	461c      	mov	r4, r3
 8002f06:	e75b      	b.n	8002dc0 <rt_vsnprintf+0x84>
  unsigned int i = 0U;
 8002f08:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002f0a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8002f0e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  while (is_digit_(**str)) {
 8002f12:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002f16:	3e30      	subs	r6, #48	; 0x30
  while (is_digit_(**str)) {
 8002f18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8002f1c:	2b09      	cmp	r3, #9
 8002f1e:	d9f4      	bls.n	8002f0a <rt_vsnprintf+0x1ce>
 8002f20:	e74b      	b.n	8002dba <rt_vsnprintf+0x7e>
      const int w = va_arg(va, int);
 8002f22:	f85a 6b04 	ldr.w	r6, [sl], #4
    if (*format == '.') {
 8002f26:	7860      	ldrb	r0, [r4, #1]
      if (w < 0) {
 8002f28:	2e00      	cmp	r6, #0
        flags |= FLAGS_LEFT;    // reverse padding
 8002f2a:	bfbc      	itt	lt
 8002f2c:	f041 0102 	orrlt.w	r1, r1, #2
        width = (unsigned int)-w;
 8002f30:	4276      	neglt	r6, r6
      format++;
 8002f32:	3401      	adds	r4, #1
 8002f34:	e741      	b.n	8002dba <rt_vsnprintf+0x7e>
        out(*format, buffer, idx++, maxlen);
 8002f36:	462a      	mov	r2, r5
 8002f38:	464b      	mov	r3, r9
 8002f3a:	4641      	mov	r1, r8
        format++;
 8002f3c:	3401      	adds	r4, #1
        out(*format, buffer, idx++, maxlen);
 8002f3e:	3501      	adds	r5, #1
 8002f40:	47d8      	blx	fp
        break;
 8002f42:	e717      	b.n	8002d74 <rt_vsnprintf+0x38>
        if (*format == 'x' || *format == 'X') {
 8002f44:	2878      	cmp	r0, #120	; 0x78
 8002f46:	f000 812b 	beq.w	80031a0 <rt_vsnprintf+0x464>
 8002f4a:	2858      	cmp	r0, #88	; 0x58
 8002f4c:	f000 8183 	beq.w	8003256 <rt_vsnprintf+0x51a>
        else if (*format == 'o') {
 8002f50:	286f      	cmp	r0, #111	; 0x6f
 8002f52:	f000 81a4 	beq.w	800329e <rt_vsnprintf+0x562>
        else if (*format == 'b') {
 8002f56:	2862      	cmp	r0, #98	; 0x62
 8002f58:	f000 8202 	beq.w	8003360 <rt_vsnprintf+0x624>
        if ((*format != 'i') && (*format != 'd')) {
 8002f5c:	2869      	cmp	r0, #105	; 0x69
          base = BASE_DECIMAL;
 8002f5e:	f04f 020a 	mov.w	r2, #10
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8002f62:	f021 0310 	bic.w	r3, r1, #16
        if ((*format != 'i') && (*format != 'd')) {
 8002f66:	f040 819c 	bne.w	80032a2 <rt_vsnprintf+0x566>
        if (flags & FLAGS_PRECISION) {
 8002f6a:	0549      	lsls	r1, r1, #21
 8002f6c:	f100 811d 	bmi.w	80031aa <rt_vsnprintf+0x46e>
          if (flags & FLAGS_LONG_LONG) {
 8002f70:	0599      	lsls	r1, r3, #22
 8002f72:	f100 819f 	bmi.w	80032b4 <rt_vsnprintf+0x578>
          else if (flags & FLAGS_LONG) {
 8002f76:	05d8      	lsls	r0, r3, #23
            const long value = va_arg(va, long);
 8002f78:	f85a 1b04 	ldr.w	r1, [sl], #4
          else if (flags & FLAGS_LONG) {
 8002f7c:	d403      	bmi.n	8002f86 <rt_vsnprintf+0x24a>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8002f7e:	0658      	lsls	r0, r3, #25
 8002f80:	f140 81b0 	bpl.w	80032e4 <rt_vsnprintf+0x5a8>
 8002f84:	b249      	sxtb	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8002f86:	2900      	cmp	r1, #0
 8002f88:	f340 81ce 	ble.w	8003328 <rt_vsnprintf+0x5ec>
 8002f8c:	468c      	mov	ip, r1
 8002f8e:	17c8      	asrs	r0, r1, #31
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8002f90:	e9cd 2703 	strd	r2, r7, [sp, #12]
 8002f94:	462a      	mov	r2, r5
 8002f96:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8002f9a:	e9cd c000 	strd	ip, r0, [sp]
 8002f9e:	0fc9      	lsrs	r1, r1, #31
 8002fa0:	9102      	str	r1, [sp, #8]
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8002fa2:	464b      	mov	r3, r9
 8002fa4:	4641      	mov	r1, r8
 8002fa6:	4658      	mov	r0, fp
 8002fa8:	f7fe ff92 	bl	8001ed0 <print_integer>
 8002fac:	4605      	mov	r5, r0
        format++;
 8002fae:	3401      	adds	r4, #1
        break;
 8002fb0:	e6e0      	b.n	8002d74 <rt_vsnprintf+0x38>
 8002fb2:	bf00      	nop
 8002fb4:	08001e45 	.word	0x08001e45
 8002fb8:	08001e3d 	.word	0x08001e3d
    switch (*format) {
 8002fbc:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8002fbe:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        format++;
 8002fc2:	3401      	adds	r4, #1
        break;
 8002fc4:	e71a      	b.n	8002dfc <rt_vsnprintf+0xc0>
        if (*format == 'h') {
 8002fc6:	7860      	ldrb	r0, [r4, #1]
 8002fc8:	2868      	cmp	r0, #104	; 0x68
 8002fca:	f000 8137 	beq.w	800323c <rt_vsnprintf+0x500>
        flags |= FLAGS_SHORT;
 8002fce:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        format++;
 8002fd2:	3401      	adds	r4, #1
 8002fd4:	e712      	b.n	8002dfc <rt_vsnprintf+0xc0>
        if (*format == 'l') {
 8002fd6:	7860      	ldrb	r0, [r4, #1]
 8002fd8:	286c      	cmp	r0, #108	; 0x6c
 8002fda:	f000 8134 	beq.w	8003246 <rt_vsnprintf+0x50a>
        flags |= FLAGS_LONG;
 8002fde:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 8002fe2:	3401      	adds	r4, #1
 8002fe4:	e70a      	b.n	8002dfc <rt_vsnprintf+0xc0>
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8002fe6:	462a      	mov	r2, r5
 8002fe8:	2300      	movs	r3, #0
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8002fea:	2846      	cmp	r0, #70	; 0x46
 8002fec:	bf08      	it	eq
 8002fee:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8002ff2:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8002ff6:	f10a 0a07 	add.w	sl, sl, #7
 8002ffa:	9702      	str	r7, [sp, #8]
 8002ffc:	f02a 0a07 	bic.w	sl, sl, #7
        format++;
 8003000:	3401      	adds	r4, #1
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8003002:	9305      	str	r3, [sp, #20]
 8003004:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 8003008:	464b      	mov	r3, r9
 800300a:	4641      	mov	r1, r8
 800300c:	4658      	mov	r0, fp
 800300e:	e9cd 6700 	strd	r6, r7, [sp]
 8003012:	f7ff fda1 	bl	8002b58 <print_floating_point>
 8003016:	4605      	mov	r5, r0
        break;
 8003018:	e6ac      	b.n	8002d74 <rt_vsnprintf+0x38>
        uintptr_t value = (uintptr_t)va_arg(va, void*);
 800301a:	f85a 3b04 	ldr.w	r3, [sl], #4
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 800301e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003022:	f041 0101 	orr.w	r1, r1, #1
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 80e6 	beq.w	80031f8 <rt_vsnprintf+0x4bc>
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	9106      	str	r1, [sp, #24]
 8003032:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003036:	210a      	movs	r1, #10
 8003038:	2310      	movs	r3, #16
 800303a:	462a      	mov	r2, r5
 800303c:	9105      	str	r1, [sp, #20]
 800303e:	9303      	str	r3, [sp, #12]
 8003040:	4641      	mov	r1, r8
 8003042:	464b      	mov	r3, r9
 8003044:	4658      	mov	r0, fp
 8003046:	9704      	str	r7, [sp, #16]
 8003048:	f7fe ff42 	bl	8001ed0 <print_integer>
        format++;
 800304c:	3401      	adds	r4, #1
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 800304e:	4605      	mov	r5, r0
        break;
 8003050:	e690      	b.n	8002d74 <rt_vsnprintf+0x38>
        if (!(flags & FLAGS_LEFT)) {
 8003052:	078f      	lsls	r7, r1, #30
 8003054:	f140 810d 	bpl.w	8003272 <rt_vsnprintf+0x536>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003058:	f85a 0b04 	ldr.w	r0, [sl], #4
 800305c:	462a      	mov	r2, r5
 800305e:	464b      	mov	r3, r9
 8003060:	4641      	mov	r1, r8
 8003062:	b2c0      	uxtb	r0, r0
 8003064:	47d8      	blx	fp
 8003066:	1c6f      	adds	r7, r5, #1
          while (l++ < width) {
 8003068:	2e01      	cmp	r6, #1
 800306a:	bf98      	it	ls
 800306c:	463d      	movls	r5, r7
 800306e:	d99e      	bls.n	8002fae <rt_vsnprintf+0x272>
 8003070:	4435      	add	r5, r6
            out(' ', buffer, idx++, maxlen);
 8003072:	463a      	mov	r2, r7
 8003074:	464b      	mov	r3, r9
 8003076:	4641      	mov	r1, r8
 8003078:	2020      	movs	r0, #32
 800307a:	3701      	adds	r7, #1
 800307c:	47d8      	blx	fp
          while (l++ < width) {
 800307e:	42af      	cmp	r7, r5
 8003080:	d1f7      	bne.n	8003072 <rt_vsnprintf+0x336>
 8003082:	e794      	b.n	8002fae <rt_vsnprintf+0x272>
        const char* p = va_arg(va, char*);
 8003084:	4653      	mov	r3, sl
 8003086:	f853 2b04 	ldr.w	r2, [r3], #4
 800308a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
        if (p == NULL) {
 800308e:	2a00      	cmp	r2, #0
 8003090:	d075      	beq.n	800317e <rt_vsnprintf+0x442>
  for (s = str; *s && maxsize--; ++s);
 8003092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003094:	7818      	ldrb	r0, [r3, #0]
          unsigned int l = strnlen_s_(p, precision ? precision : (size_t)-1);
 8003096:	2f00      	cmp	r7, #0
 8003098:	f040 80e6 	bne.w	8003268 <rt_vsnprintf+0x52c>
  for (s = str; *s && maxsize--; ++s);
 800309c:	f06f 0301 	mvn.w	r3, #1
 80030a0:	2800      	cmp	r0, #0
 80030a2:	f000 8174 	beq.w	800338e <rt_vsnprintf+0x652>
 80030a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030a8:	3301      	adds	r3, #1
 80030aa:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80030ae:	441a      	add	r2, r3
 80030b0:	e001      	b.n	80030b6 <rt_vsnprintf+0x37a>
 80030b2:	4592      	cmp	sl, r2
 80030b4:	d003      	beq.n	80030be <rt_vsnprintf+0x382>
 80030b6:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f9      	bne.n	80030b2 <rt_vsnprintf+0x376>
  return (unsigned int)(s - str);
 80030be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030c0:	ebaa 0303 	sub.w	r3, sl, r3
 80030c4:	930b      	str	r3, [sp, #44]	; 0x2c
          if (flags & FLAGS_PRECISION) {
 80030c6:	f411 6380 	ands.w	r3, r1, #1024	; 0x400
 80030ca:	930c      	str	r3, [sp, #48]	; 0x30
 80030cc:	d004      	beq.n	80030d8 <rt_vsnprintf+0x39c>
            l = (l < precision ? l : precision);
 80030ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030d0:	42bb      	cmp	r3, r7
 80030d2:	bf28      	it	cs
 80030d4:	463b      	movcs	r3, r7
 80030d6:	930b      	str	r3, [sp, #44]	; 0x2c
          if (!(flags & FLAGS_LEFT)) {
 80030d8:	f011 0302 	ands.w	r3, r1, #2
 80030dc:	930d      	str	r3, [sp, #52]	; 0x34
 80030de:	f000 810a 	beq.w	80032f6 <rt_vsnprintf+0x5ba>
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80030e2:	2800      	cmp	r0, #0
 80030e4:	f000 809b 	beq.w	800321e <rt_vsnprintf+0x4e2>
 80030e8:	462a      	mov	r2, r5
 80030ea:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80030ee:	9409      	str	r4, [sp, #36]	; 0x24
 80030f0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80030f2:	b124      	cbz	r4, 80030fe <rt_vsnprintf+0x3c2>
 80030f4:	1e7b      	subs	r3, r7, #1
 80030f6:	2f00      	cmp	r7, #0
 80030f8:	f000 808d 	beq.w	8003216 <rt_vsnprintf+0x4da>
 80030fc:	461f      	mov	r7, r3
            out(*(p++), buffer, idx++, maxlen);
 80030fe:	464b      	mov	r3, r9
 8003100:	4641      	mov	r1, r8
 8003102:	47d8      	blx	fp
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003104:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
            out(*(p++), buffer, idx++, maxlen);
 8003108:	3501      	adds	r5, #1
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800310a:	2800      	cmp	r0, #0
 800310c:	f000 8083 	beq.w	8003216 <rt_vsnprintf+0x4da>
            out(*(p++), buffer, idx++, maxlen);
 8003110:	462a      	mov	r2, r5
 8003112:	e7ee      	b.n	80030f2 <rt_vsnprintf+0x3b6>
        out('%', buffer, idx++, maxlen);
 8003114:	1c68      	adds	r0, r5, #1
 8003116:	462a      	mov	r2, r5
 8003118:	464b      	mov	r3, r9
 800311a:	4605      	mov	r5, r0
 800311c:	4641      	mov	r1, r8
 800311e:	2025      	movs	r0, #37	; 0x25
        format++;
 8003120:	3401      	adds	r4, #1
        out('%', buffer, idx++, maxlen);
 8003122:	47d8      	blx	fp
        break;
 8003124:	e626      	b.n	8002d74 <rt_vsnprintf+0x38>
  unsigned int i = 0U;
 8003126:	2700      	movs	r7, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003128:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800312c:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  while (is_digit_(**str)) {
 8003130:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003134:	3f30      	subs	r7, #48	; 0x30
  while (is_digit_(**str)) {
 8003136:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800313a:	2a09      	cmp	r2, #9
 800313c:	d9f4      	bls.n	8003128 <rt_vsnprintf+0x3ec>
 800313e:	461c      	mov	r4, r3
 8003140:	e63f      	b.n	8002dc2 <rt_vsnprintf+0x86>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003142:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8003146:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003148:	bf04      	itt	eq
 800314a:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800314e:	f441 6100 	orreq.w	r1, r1, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003152:	2845      	cmp	r0, #69	; 0x45
 8003154:	bf08      	it	eq
 8003156:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 800315a:	f10a 0a07 	add.w	sl, sl, #7
 800315e:	462a      	mov	r2, r5
 8003160:	2301      	movs	r3, #1
 8003162:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8003166:	9702      	str	r7, [sp, #8]
 8003168:	f02a 0a07 	bic.w	sl, sl, #7
        format++;
 800316c:	3401      	adds	r4, #1
 800316e:	e748      	b.n	8003002 <rt_vsnprintf+0x2c6>
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 8003170:	f85a 7b04 	ldr.w	r7, [sl], #4
    switch (*format) {
 8003174:	78a0      	ldrb	r0, [r4, #2]
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 8003176:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
        format++;
 800317a:	3402      	adds	r4, #2
 800317c:	e621      	b.n	8002dc2 <rt_vsnprintf+0x86>
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 800317e:	4b88      	ldr	r3, [pc, #544]	; (80033a0 <rt_vsnprintf+0x664>)
 8003180:	462a      	mov	r2, r5
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2306      	movs	r3, #6
 8003186:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	4641      	mov	r1, r8
 800318e:	464b      	mov	r3, r9
 8003190:	4658      	mov	r0, fp
 8003192:	f7fe fe59 	bl	8001e48 <out_rev_>
 8003196:	4605      	mov	r5, r0
        const char* p = va_arg(va, char*);
 8003198:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        format++;
 800319c:	3401      	adds	r4, #1
        break;
 800319e:	e5e9      	b.n	8002d74 <rt_vsnprintf+0x38>
          base = BASE_HEX;
 80031a0:	2210      	movs	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80031a2:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 80031a6:	0549      	lsls	r1, r1, #21
 80031a8:	d501      	bpl.n	80031ae <rt_vsnprintf+0x472>
          flags &= ~FLAGS_ZEROPAD;
 80031aa:	f023 0301 	bic.w	r3, r3, #1
        if ((*format == 'i') || (*format == 'd')) {
 80031ae:	2869      	cmp	r0, #105	; 0x69
 80031b0:	f43f aede 	beq.w	8002f70 <rt_vsnprintf+0x234>
 80031b4:	2864      	cmp	r0, #100	; 0x64
 80031b6:	f43f aedb 	beq.w	8002f70 <rt_vsnprintf+0x234>
          if (flags & FLAGS_LONG_LONG) {
 80031ba:	f413 7c00 	ands.w	ip, r3, #512	; 0x200
 80031be:	f040 80b9 	bne.w	8003334 <rt_vsnprintf+0x5f8>
          else if (flags & FLAGS_LONG) {
 80031c2:	05d9      	lsls	r1, r3, #23
 80031c4:	f100 80cf 	bmi.w	8003366 <rt_vsnprintf+0x62a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80031c8:	0658      	lsls	r0, r3, #25
 80031ca:	f85a 1b04 	ldr.w	r1, [sl], #4
 80031ce:	f100 8087 	bmi.w	80032e0 <rt_vsnprintf+0x5a4>
 80031d2:	0618      	lsls	r0, r3, #24
 80031d4:	bf48      	it	mi
 80031d6:	b289      	uxthmi	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 80031d8:	e9cd 2703 	strd	r2, r7, [sp, #12]
 80031dc:	462a      	mov	r2, r5
 80031de:	2500      	movs	r5, #0
 80031e0:	e9cd 6305 	strd	r6, r3, [sp, #20]
 80031e4:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80031e8:	9100      	str	r1, [sp, #0]
 80031ea:	464b      	mov	r3, r9
 80031ec:	4641      	mov	r1, r8
 80031ee:	4658      	mov	r0, fp
 80031f0:	f7fe fe6e 	bl	8001ed0 <print_integer>
 80031f4:	4605      	mov	r5, r0
        format++;
 80031f6:	e6da      	b.n	8002fae <rt_vsnprintf+0x272>
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 80031f8:	4b6a      	ldr	r3, [pc, #424]	; (80033a4 <rt_vsnprintf+0x668>)
 80031fa:	200a      	movs	r0, #10
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	2305      	movs	r3, #5
 8003200:	462a      	mov	r2, r5
 8003202:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8003206:	9103      	str	r1, [sp, #12]
 8003208:	464b      	mov	r3, r9
 800320a:	4641      	mov	r1, r8
 800320c:	4658      	mov	r0, fp
 800320e:	f7fe fe1b 	bl	8001e48 <out_rev_>
 8003212:	4605      	mov	r5, r0
 8003214:	e6cb      	b.n	8002fae <rt_vsnprintf+0x272>
          if (flags & FLAGS_LEFT) {
 8003216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003218:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0bc      	beq.n	8003198 <rt_vsnprintf+0x45c>
            while (l++ < width) {
 800321e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003220:	462f      	mov	r7, r5
 8003222:	429e      	cmp	r6, r3
 8003224:	d9b8      	bls.n	8003198 <rt_vsnprintf+0x45c>
 8003226:	1970      	adds	r0, r6, r5
 8003228:	1ac5      	subs	r5, r0, r3
              out(' ', buffer, idx++, maxlen);
 800322a:	463a      	mov	r2, r7
 800322c:	464b      	mov	r3, r9
 800322e:	4641      	mov	r1, r8
 8003230:	2020      	movs	r0, #32
 8003232:	3701      	adds	r7, #1
 8003234:	47d8      	blx	fp
            while (l++ < width) {
 8003236:	42af      	cmp	r7, r5
 8003238:	d1f7      	bne.n	800322a <rt_vsnprintf+0x4ee>
 800323a:	e7ad      	b.n	8003198 <rt_vsnprintf+0x45c>
    switch (*format) {
 800323c:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_CHAR;
 800323e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
          format++;
 8003242:	3402      	adds	r4, #2
 8003244:	e5da      	b.n	8002dfc <rt_vsnprintf+0xc0>
    switch (*format) {
 8003246:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_LONG_LONG;
 8003248:	f441 7140 	orr.w	r1, r1, #768	; 0x300
          format++;
 800324c:	3402      	adds	r4, #2
 800324e:	e5d5      	b.n	8002dfc <rt_vsnprintf+0xc0>
  while (*format)
 8003250:	4604      	mov	r4, r0
 8003252:	4605      	mov	r5, r0
 8003254:	e63f      	b.n	8002ed6 <rt_vsnprintf+0x19a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003256:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 800325a:	0549      	lsls	r1, r1, #21
          base = BASE_HEX;
 800325c:	f04f 0210 	mov.w	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003260:	f043 0320 	orr.w	r3, r3, #32
        if (flags & FLAGS_PRECISION) {
 8003264:	d4a1      	bmi.n	80031aa <rt_vsnprintf+0x46e>
 8003266:	e7a8      	b.n	80031ba <rt_vsnprintf+0x47e>
  for (s = str; *s && maxsize--; ++s);
 8003268:	2800      	cmp	r0, #0
 800326a:	f000 8097 	beq.w	800339c <rt_vsnprintf+0x660>
 800326e:	1e7b      	subs	r3, r7, #1
 8003270:	e719      	b.n	80030a6 <rt_vsnprintf+0x36a>
          while (l++ < width) {
 8003272:	2e01      	cmp	r6, #1
 8003274:	f240 8089 	bls.w	800338a <rt_vsnprintf+0x64e>
 8003278:	1e6b      	subs	r3, r5, #1
 800327a:	441e      	add	r6, r3
            out(' ', buffer, idx++, maxlen);
 800327c:	462a      	mov	r2, r5
 800327e:	464b      	mov	r3, r9
 8003280:	4641      	mov	r1, r8
 8003282:	2020      	movs	r0, #32
 8003284:	3501      	adds	r5, #1
 8003286:	47d8      	blx	fp
          while (l++ < width) {
 8003288:	42b5      	cmp	r5, r6
 800328a:	d1f7      	bne.n	800327c <rt_vsnprintf+0x540>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800328c:	f85a 0b04 	ldr.w	r0, [sl], #4
 8003290:	464b      	mov	r3, r9
 8003292:	4632      	mov	r2, r6
 8003294:	4641      	mov	r1, r8
 8003296:	b2c0      	uxtb	r0, r0
 8003298:	1c75      	adds	r5, r6, #1
 800329a:	47d8      	blx	fp
        if (flags & FLAGS_LEFT) {
 800329c:	e687      	b.n	8002fae <rt_vsnprintf+0x272>
          base =  BASE_OCTAL;
 800329e:	2208      	movs	r2, #8
          format++;
 80032a0:	460b      	mov	r3, r1
        if ((*format != 'i') && (*format != 'd')) {
 80032a2:	2864      	cmp	r0, #100	; 0x64
 80032a4:	bf18      	it	ne
 80032a6:	4619      	movne	r1, r3
 80032a8:	f47f af7b 	bne.w	80031a2 <rt_vsnprintf+0x466>
        if (flags & FLAGS_PRECISION) {
 80032ac:	0559      	lsls	r1, r3, #21
 80032ae:	f53f af7c 	bmi.w	80031aa <rt_vsnprintf+0x46e>
 80032b2:	e65d      	b.n	8002f70 <rt_vsnprintf+0x234>
            const long long value = va_arg(va, long long);
 80032b4:	f10a 0a07 	add.w	sl, sl, #7
 80032b8:	f02a 0a07 	bic.w	sl, sl, #7
 80032bc:	f8da 1004 	ldr.w	r1, [sl, #4]
 80032c0:	f85a 0b08 	ldr.w	r0, [sl], #8
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80032c4:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 80032c8:	2900      	cmp	r1, #0
 80032ca:	e9cd 6305 	strd	r6, r3, [sp, #20]
 80032ce:	e9cd 2703 	strd	r2, r7, [sp, #12]
 80032d2:	f8cd c008 	str.w	ip, [sp, #8]
 80032d6:	db09      	blt.n	80032ec <rt_vsnprintf+0x5b0>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80032d8:	462a      	mov	r2, r5
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80032da:	e9cd 0100 	strd	r0, r1, [sp]
 80032de:	e660      	b.n	8002fa2 <rt_vsnprintf+0x266>
 80032e0:	b2c9      	uxtb	r1, r1
 80032e2:	e779      	b.n	80031d8 <rt_vsnprintf+0x49c>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80032e4:	0618      	lsls	r0, r3, #24
 80032e6:	bf48      	it	mi
 80032e8:	b209      	sxthmi	r1, r1
 80032ea:	e64c      	b.n	8002f86 <rt_vsnprintf+0x24a>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80032ec:	4243      	negs	r3, r0
 80032ee:	4618      	mov	r0, r3
 80032f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80032f4:	e7f0      	b.n	80032d8 <rt_vsnprintf+0x59c>
            while (l++ < width) {
 80032f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80032f8:	4296      	cmp	r6, r2
 80032fa:	f102 0301 	add.w	r3, r2, #1
 80032fe:	d948      	bls.n	8003392 <rt_vsnprintf+0x656>
 8003300:	eb06 0a05 	add.w	sl, r6, r5
 8003304:	ebaa 0a02 	sub.w	sl, sl, r2
              out(' ', buffer, idx++, maxlen);
 8003308:	462a      	mov	r2, r5
 800330a:	464b      	mov	r3, r9
 800330c:	4641      	mov	r1, r8
 800330e:	2020      	movs	r0, #32
 8003310:	3501      	adds	r5, #1
 8003312:	47d8      	blx	fp
            while (l++ < width) {
 8003314:	4555      	cmp	r5, sl
 8003316:	d1f7      	bne.n	8003308 <rt_vsnprintf+0x5cc>
 8003318:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800331a:	7818      	ldrb	r0, [r3, #0]
 800331c:	1c73      	adds	r3, r6, #1
 800331e:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003320:	2800      	cmp	r0, #0
 8003322:	f47f aee1 	bne.w	80030e8 <rt_vsnprintf+0x3ac>
 8003326:	e737      	b.n	8003198 <rt_vsnprintf+0x45c>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003328:	17c8      	asrs	r0, r1, #31
 800332a:	f1d1 0c00 	rsbs	ip, r1, #0
 800332e:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8003332:	e62d      	b.n	8002f90 <rt_vsnprintf+0x254>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003334:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8003338:	2300      	movs	r3, #0
 800333a:	e9cd 2703 	strd	r2, r7, [sp, #12]
 800333e:	f10a 0a07 	add.w	sl, sl, #7
 8003342:	9302      	str	r3, [sp, #8]
 8003344:	f02a 0a07 	bic.w	sl, sl, #7
 8003348:	462a      	mov	r2, r5
 800334a:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 800334e:	464b      	mov	r3, r9
 8003350:	4641      	mov	r1, r8
 8003352:	4658      	mov	r0, fp
 8003354:	e9cd 6700 	strd	r6, r7, [sp]
 8003358:	f7fe fdba 	bl	8001ed0 <print_integer>
 800335c:	4605      	mov	r5, r0
 800335e:	e626      	b.n	8002fae <rt_vsnprintf+0x272>
          base =  BASE_BINARY;
 8003360:	2202      	movs	r2, #2
          format++;
 8003362:	460b      	mov	r3, r1
 8003364:	e79d      	b.n	80032a2 <rt_vsnprintf+0x566>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
 8003366:	e9cd 6305 	strd	r6, r3, [sp, #20]
 800336a:	e9cd 2703 	strd	r2, r7, [sp, #12]
 800336e:	f8cd c008 	str.w	ip, [sp, #8]
 8003372:	462a      	mov	r2, r5
 8003374:	f85a 5b04 	ldr.w	r5, [sl], #4
 8003378:	464b      	mov	r3, r9
 800337a:	e9cd 5c00 	strd	r5, ip, [sp]
 800337e:	4641      	mov	r1, r8
 8003380:	4658      	mov	r0, fp
 8003382:	f7fe fda5 	bl	8001ed0 <print_integer>
 8003386:	4605      	mov	r5, r0
 8003388:	e611      	b.n	8002fae <rt_vsnprintf+0x272>
          while (l++ < width) {
 800338a:	462e      	mov	r6, r5
 800338c:	e77e      	b.n	800328c <rt_vsnprintf+0x550>
  for (s = str; *s && maxsize--; ++s);
 800338e:	970b      	str	r7, [sp, #44]	; 0x2c
 8003390:	e699      	b.n	80030c6 <rt_vsnprintf+0x38a>
            while (l++ < width) {
 8003392:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003394:	2800      	cmp	r0, #0
 8003396:	f47f aea7 	bne.w	80030e8 <rt_vsnprintf+0x3ac>
 800339a:	e6fd      	b.n	8003198 <rt_vsnprintf+0x45c>
  for (s = str; *s && maxsize--; ++s);
 800339c:	900b      	str	r0, [sp, #44]	; 0x2c
 800339e:	e692      	b.n	80030c6 <rt_vsnprintf+0x38a>
 80033a0:	08019d7c 	.word	0x08019d7c
 80033a4:	08019d84 	.word	0x08019d84

080033a8 <LCD_WritePara.isra.0>:
    LCD_SetCmdLine();
    return SPI_WriteDatas(&cmd, 1);
}

/* 给SPI LCD发送1个参数,通常是先调用LCD_WriteCmd,再调用LCD_WritePara */
static int LCD_WritePara(uint8_t data)
 80033a8:	4603      	mov	r3, r0
 80033aa:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 80033ac:	4c0f      	ldr	r4, [pc, #60]	; (80033ec <LCD_WritePara.isra.0+0x44>)
static int LCD_WritePara(uint8_t data)
 80033ae:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 80033b0:	4620      	mov	r0, r4
 80033b2:	2201      	movs	r2, #1
 80033b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WritePara(uint8_t data)
 80033b8:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 80033bc:	f001 f822 	bl	8004404 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 80033c0:	4620      	mov	r0, r4
 80033c2:	2200      	movs	r2, #0
 80033c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033c8:	f001 f81c 	bl	8004404 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 80033cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033d0:	f10d 0107 	add.w	r1, sp, #7
 80033d4:	2201      	movs	r2, #1
 80033d6:	4806      	ldr	r0, [pc, #24]	; (80033f0 <LCD_WritePara.isra.0+0x48>)
 80033d8:	f005 fd68 	bl	8008eac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 80033dc:	2201      	movs	r2, #1
 80033de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033e2:	4620      	mov	r0, r4
 80033e4:	f001 f80e 	bl	8004404 <HAL_GPIO_WritePin>
{
    LCD_SetDataLine();
    return SPI_WriteDatas(&data, 1);
}
 80033e8:	b002      	add	sp, #8
 80033ea:	bd10      	pop	{r4, pc}
 80033ec:	42020c00 	.word	0x42020c00
 80033f0:	20000868 	.word	0x20000868

080033f4 <LCD_WriteCmd.isra.0>:
static int LCD_WriteCmd(uint8_t cmd)
 80033f4:	4603      	mov	r3, r0
 80033f6:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 80033f8:	4c0f      	ldr	r4, [pc, #60]	; (8003438 <LCD_WriteCmd.isra.0+0x44>)
static int LCD_WriteCmd(uint8_t cmd)
 80033fa:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 80033fc:	4620      	mov	r0, r4
 80033fe:	2200      	movs	r2, #0
 8003400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WriteCmd(uint8_t cmd)
 8003404:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8003408:	f000 fffc 	bl	8004404 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 800340c:	4620      	mov	r0, r4
 800340e:	2200      	movs	r2, #0
 8003410:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003414:	f000 fff6 	bl	8004404 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8003418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800341c:	f10d 0107 	add.w	r1, sp, #7
 8003420:	2201      	movs	r2, #1
 8003422:	4806      	ldr	r0, [pc, #24]	; (800343c <LCD_WriteCmd.isra.0+0x48>)
 8003424:	f005 fd42 	bl	8008eac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8003428:	2201      	movs	r2, #1
 800342a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800342e:	4620      	mov	r0, r4
 8003430:	f000 ffe8 	bl	8004404 <HAL_GPIO_WritePin>
}
 8003434:	b002      	add	sp, #8
 8003436:	bd10      	pop	{r4, pc}
 8003438:	42020c00 	.word	0x42020c00
 800343c:	20000868 	.word	0x20000868

08003440 <LCD_SetDataLine>:
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8003440:	2201      	movs	r2, #1
 8003442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003446:	4801      	ldr	r0, [pc, #4]	; (800344c <LCD_SetDataLine+0xc>)
 8003448:	f000 bfdc 	b.w	8004404 <HAL_GPIO_WritePin>
 800344c:	42020c00 	.word	0x42020c00

08003450 <LCD_WriteDatas>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int LCD_WriteDatas(uint8_t *datas, uint32_t count)
{
 8003450:	b570      	push	{r4, r5, r6, lr}
 8003452:	4605      	mov	r5, r0
 8003454:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8003456:	4e0b      	ldr	r6, [pc, #44]	; (8003484 <LCD_WriteDatas+0x34>)
 8003458:	2200      	movs	r2, #0
 800345a:	4630      	mov	r0, r6
 800345c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003460:	f000 ffd0 	bl	8004404 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8003464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003468:	4629      	mov	r1, r5
 800346a:	b2a2      	uxth	r2, r4
 800346c:	4806      	ldr	r0, [pc, #24]	; (8003488 <LCD_WriteDatas+0x38>)
 800346e:	f005 fd1d 	bl	8008eac <HAL_SPI_Transmit>
 8003472:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8003474:	2201      	movs	r2, #1
 8003476:	4630      	mov	r0, r6
 8003478:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800347c:	f000 ffc2 	bl	8004404 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);  /* 由调用者设置RS引脚 */
    return SPI_WriteDatas(datas, count);
}
 8003480:	4260      	negs	r0, r4
 8003482:	bd70      	pop	{r4, r5, r6, pc}
 8003484:	42020c00 	.word	0x42020c00
 8003488:	20000868 	.word	0x20000868

0800348c <LCD_Init>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_Init(lcd_display_rotation_t rotation)
{       
 800348c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 800348e:	2200      	movs	r2, #0
 8003490:	2110      	movs	r1, #16
{       
 8003492:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 8003494:	4893      	ldr	r0, [pc, #588]	; (80036e4 <LCD_Init+0x258>)
 8003496:	f000 ffb5 	bl	8004404 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800349a:	2064      	movs	r0, #100	; 0x64
 800349c:	f000 fa12 	bl	80038c4 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_SET);
 80034a0:	2201      	movs	r2, #1
 80034a2:	2110      	movs	r1, #16
 80034a4:	488f      	ldr	r0, [pc, #572]	; (80036e4 <LCD_Init+0x258>)
 80034a6:	f000 ffad 	bl	8004404 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80034aa:	2064      	movs	r0, #100	; 0x64
 80034ac:	f000 fa0a 	bl	80038c4 <HAL_Delay>
        HAL_GPIO_WritePin(PWM_GPIO_Port,PWM_Pin,GPIO_PIN_SET);
 80034b0:	2201      	movs	r2, #1
 80034b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034b6:	488b      	ldr	r0, [pc, #556]	; (80036e4 <LCD_Init+0x258>)
 80034b8:	f000 ffa4 	bl	8004404 <HAL_GPIO_WritePin>
    LCD_Reset();    
    LCD_BackLightControl(1);
    
#if 1   
    // Positive Gamma Control
    LCD_WriteCmd( 0xe0);
 80034bc:	20e0      	movs	r0, #224	; 0xe0
 80034be:	f7ff ff99 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xf0);
 80034c2:	20f0      	movs	r0, #240	; 0xf0
 80034c4:	f7ff ff70 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3e);
 80034c8:	203e      	movs	r0, #62	; 0x3e
 80034ca:	f7ff ff6d 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x30);
 80034ce:	2030      	movs	r0, #48	; 0x30
 80034d0:	f7ff ff6a 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 80034d4:	2006      	movs	r0, #6
 80034d6:	f7ff ff67 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0a);
 80034da:	200a      	movs	r0, #10
 80034dc:	f7ff ff64 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x03);
 80034e0:	2003      	movs	r0, #3
 80034e2:	f7ff ff61 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 80034e6:	204d      	movs	r0, #77	; 0x4d
 80034e8:	f7ff ff5e 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x56);
 80034ec:	2056      	movs	r0, #86	; 0x56
 80034ee:	f7ff ff5b 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3a);
 80034f2:	203a      	movs	r0, #58	; 0x3a
 80034f4:	f7ff ff58 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 80034f8:	2006      	movs	r0, #6
 80034fa:	f7ff ff55 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0f);
 80034fe:	200f      	movs	r0, #15
 8003500:	f7ff ff52 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x04);
 8003504:	2004      	movs	r0, #4
 8003506:	f7ff ff4f 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 800350a:	2018      	movs	r0, #24
 800350c:	f7ff ff4c 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8003510:	2013      	movs	r0, #19
 8003512:	f7ff ff49 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8003516:	2000      	movs	r0, #0
 8003518:	f7ff ff46 	bl	80033a8 <LCD_WritePara.isra.0>

    // Negative Gamma Control
    LCD_WriteCmd(0xe1);
 800351c:	20e1      	movs	r0, #225	; 0xe1
 800351e:	f7ff ff69 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x0f);
 8003522:	200f      	movs	r0, #15
 8003524:	f7ff ff40 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x37);
 8003528:	2037      	movs	r0, #55	; 0x37
 800352a:	f7ff ff3d 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x31);
 800352e:	2031      	movs	r0, #49	; 0x31
 8003530:	f7ff ff3a 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0b);
 8003534:	200b      	movs	r0, #11
 8003536:	f7ff ff37 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0d);
 800353a:	200d      	movs	r0, #13
 800353c:	f7ff ff34 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8003540:	2006      	movs	r0, #6
 8003542:	f7ff ff31 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 8003546:	204d      	movs	r0, #77	; 0x4d
 8003548:	f7ff ff2e 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x34);
 800354c:	2034      	movs	r0, #52	; 0x34
 800354e:	f7ff ff2b 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x38);
 8003552:	2038      	movs	r0, #56	; 0x38
 8003554:	f7ff ff28 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8003558:	2006      	movs	r0, #6
 800355a:	f7ff ff25 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x11);
 800355e:	2011      	movs	r0, #17
 8003560:	f7ff ff22 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 8003564:	2001      	movs	r0, #1
 8003566:	f7ff ff1f 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 800356a:	2018      	movs	r0, #24
 800356c:	f7ff ff1c 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8003570:	2013      	movs	r0, #19
 8003572:	f7ff ff19 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8003576:	2000      	movs	r0, #0
 8003578:	f7ff ff16 	bl	80033a8 <LCD_WritePara.isra.0>
    
    // Power Control 1
    LCD_WriteCmd(0xc0);
 800357c:	20c0      	movs	r0, #192	; 0xc0
 800357e:	f7ff ff39 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x18);
 8003582:	2018      	movs	r0, #24
 8003584:	f7ff ff10 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x17);
 8003588:	2017      	movs	r0, #23
 800358a:	f7ff ff0d 	bl	80033a8 <LCD_WritePara.isra.0>

    // Power Control 2
    LCD_WriteCmd(0xc1);
 800358e:	20c1      	movs	r0, #193	; 0xc1
 8003590:	f7ff ff30 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x41);
 8003594:	2041      	movs	r0, #65	; 0x41
 8003596:	f7ff ff07 	bl	80033a8 <LCD_WritePara.isra.0>

    // Power Control 3
    LCD_WriteCmd(0xc5);
 800359a:	20c5      	movs	r0, #197	; 0xc5
 800359c:	f7ff ff2a 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 80035a0:	2000      	movs	r0, #0
 80035a2:	f7ff ff01 	bl	80033a8 <LCD_WritePara.isra.0>

    // VCOM Control
    LCD_WriteCmd(0x1a);
 80035a6:	201a      	movs	r0, #26
 80035a8:	f7ff ff24 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x80);
 80035ac:	2080      	movs	r0, #128	; 0x80
 80035ae:	f7ff fefb 	bl	80033a8 <LCD_WritePara.isra.0>

    // Memory Access Control
    LCD_WriteCmd(0x36);
 80035b2:	2036      	movs	r0, #54	; 0x36
 80035b4:	f7ff ff1e 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x48);
 80035b8:	2048      	movs	r0, #72	; 0x48
 80035ba:	f7ff fef5 	bl	80033a8 <LCD_WritePara.isra.0>

    // Pixel Interface Format
    LCD_WriteCmd(0x3a);
 80035be:	203a      	movs	r0, #58	; 0x3a
 80035c0:	f7ff ff18 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x55);
 80035c4:	2055      	movs	r0, #85	; 0x55
 80035c6:	f7ff feef 	bl	80033a8 <LCD_WritePara.isra.0>

    // Interface Mode Control
    LCD_WriteCmd(0xb0);
 80035ca:	20b0      	movs	r0, #176	; 0xb0
 80035cc:	f7ff ff12 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 80035d0:	2000      	movs	r0, #0
 80035d2:	f7ff fee9 	bl	80033a8 <LCD_WritePara.isra.0>

    // Frame Rate Control
    LCD_WriteCmd(0xb1);
 80035d6:	20b1      	movs	r0, #177	; 0xb1
 80035d8:	f7ff ff0c 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa0);
 80035dc:	20a0      	movs	r0, #160	; 0xa0
 80035de:	f7ff fee3 	bl	80033a8 <LCD_WritePara.isra.0>

    // Display Inversion Control
    LCD_WriteCmd(0xb4);
 80035e2:	20b4      	movs	r0, #180	; 0xb4
 80035e4:	f7ff ff06 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 80035e8:	2002      	movs	r0, #2
 80035ea:	f7ff fedd 	bl	80033a8 <LCD_WritePara.isra.0>

    // Display Function Control
    LCD_WriteCmd(0xb6);
 80035ee:	20b6      	movs	r0, #182	; 0xb6
 80035f0:	f7ff ff00 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 80035f4:	2002      	movs	r0, #2
 80035f6:	f7ff fed7 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x02);
 80035fa:	2002      	movs	r0, #2
 80035fc:	f7ff fed4 	bl	80033a8 <LCD_WritePara.isra.0>

    // Set image function
    LCD_WriteCmd(0xe9);
 8003600:	20e9      	movs	r0, #233	; 0xe9
 8003602:	f7ff fef7 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8003606:	2000      	movs	r0, #0
 8003608:	f7ff fece 	bl	80033a8 <LCD_WritePara.isra.0>

    //Adjust Control 3
    LCD_WriteCmd(0xf7);
 800360c:	20f7      	movs	r0, #247	; 0xf7
 800360e:	f7ff fef1 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa9);
 8003612:	20a9      	movs	r0, #169	; 0xa9
 8003614:	f7ff fec8 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x51);
 8003618:	2051      	movs	r0, #81	; 0x51
 800361a:	f7ff fec5 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x2c);
 800361e:	202c      	movs	r0, #44	; 0x2c
 8003620:	f7ff fec2 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x82);
 8003624:	2082      	movs	r0, #130	; 0x82
 8003626:	f7ff febf 	bl	80033a8 <LCD_WritePara.isra.0>

    // Write_memory_start
    LCD_WriteCmd(0x21);
 800362a:	2021      	movs	r0, #33	; 0x21
 800362c:	f7ff fee2 	bl	80033f4 <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 8003630:	2078      	movs	r0, #120	; 0x78
 8003632:	f000 f947 	bl	80038c4 <HAL_Delay>
    //Exit Sleep
    LCD_WriteCmd(0x11);
 8003636:	2011      	movs	r0, #17
 8003638:	f7ff fedc 	bl	80033f4 <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 800363c:	2078      	movs	r0, #120	; 0x78
 800363e:	f000 f941 	bl	80038c4 <HAL_Delay>

    switch (rotation)
 8003642:	2c02      	cmp	r4, #2
    {
        case LCD_DISPLAY_ROTATION_0:
            LCD_WriteCmd(0x36);
 8003644:	f04f 0036 	mov.w	r0, #54	; 0x36
    switch (rotation)
 8003648:	d036      	beq.n	80036b8 <LCD_Init+0x22c>
 800364a:	2c03      	cmp	r4, #3
 800364c:	d046      	beq.n	80036dc <LCD_Init+0x250>
 800364e:	2c01      	cmp	r4, #1
 8003650:	d036      	beq.n	80036c0 <LCD_Init+0x234>
            LCD_WriteCmd(0x36);
 8003652:	f7ff fecf 	bl	80033f4 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x48);
 8003656:	2048      	movs	r0, #72	; 0x48
            g_lcd_height = 320;
            g_lcd_width  = 480;
            break;
        case LCD_DISPLAY_ROTATION_180:
            LCD_WriteCmd(0x36);
            LCD_WritePara(0x88);
 8003658:	f7ff fea6 	bl	80033a8 <LCD_WritePara.isra.0>
            g_lcd_height = 480;
 800365c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
            g_lcd_width  = 320;
 8003660:	f44f 72a0 	mov.w	r2, #320	; 0x140
            g_lcd_height = 480;
 8003664:	4920      	ldr	r1, [pc, #128]	; (80036e8 <LCD_Init+0x25c>)
            g_lcd_width  = 320;
 8003666:	4b21      	ldr	r3, [pc, #132]	; (80036ec <LCD_Init+0x260>)
            g_lcd_height = 480;
 8003668:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 320;
 800366a:	601a      	str	r2, [r3, #0]
            g_lcd_width  = 320;
            break;
    }

    // set_screen_size
    LCD_WriteCmd(0x2a);
 800366c:	202a      	movs	r0, #42	; 0x2a
 800366e:	f7ff fec1 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8003672:	2000      	movs	r0, #0
 8003674:	f7ff fe98 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8003678:	2000      	movs	r0, #0
 800367a:	f7ff fe95 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 800367e:	2001      	movs	r0, #1
 8003680:	f7ff fe92 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3f);
 8003684:	203f      	movs	r0, #63	; 0x3f
 8003686:	f7ff fe8f 	bl	80033a8 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2b);
 800368a:	202b      	movs	r0, #43	; 0x2b
 800368c:	f7ff feb2 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8003690:	2000      	movs	r0, #0
 8003692:	f7ff fe89 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8003696:	2000      	movs	r0, #0
 8003698:	f7ff fe86 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 800369c:	2001      	movs	r0, #1
 800369e:	f7ff fe83 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(0xdf);
 80036a2:	20df      	movs	r0, #223	; 0xdf
 80036a4:	f7ff fe80 	bl	80033a8 <LCD_WritePara.isra.0>

    //Display on
    LCD_WriteCmd(0x29);
 80036a8:	2029      	movs	r0, #41	; 0x29
 80036aa:	f7ff fea3 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WriteCmd(0x21);     

    LCD_WriteCmd(0x29);     
#endif  

}
 80036ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(120);
 80036b2:	2078      	movs	r0, #120	; 0x78
 80036b4:	f000 b906 	b.w	80038c4 <HAL_Delay>
            LCD_WriteCmd(0x36);
 80036b8:	f7ff fe9c 	bl	80033f4 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x88);
 80036bc:	2088      	movs	r0, #136	; 0x88
 80036be:	e7cb      	b.n	8003658 <LCD_Init+0x1cc>
            LCD_WriteCmd(0x36);
 80036c0:	f7ff fe98 	bl	80033f4 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0xe8);
 80036c4:	20e8      	movs	r0, #232	; 0xe8
            LCD_WritePara(0x28);
 80036c6:	f7ff fe6f 	bl	80033a8 <LCD_WritePara.isra.0>
            g_lcd_height = 320;
 80036ca:	f44f 70a0 	mov.w	r0, #320	; 0x140
            g_lcd_width  = 480;
 80036ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
            g_lcd_height = 320;
 80036d2:	4905      	ldr	r1, [pc, #20]	; (80036e8 <LCD_Init+0x25c>)
            g_lcd_width  = 480;
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <LCD_Init+0x260>)
            g_lcd_height = 320;
 80036d6:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 480;
 80036d8:	601a      	str	r2, [r3, #0]
            break;
 80036da:	e7c7      	b.n	800366c <LCD_Init+0x1e0>
            LCD_WriteCmd(0x36);
 80036dc:	f7ff fe8a 	bl	80033f4 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x28);
 80036e0:	2028      	movs	r0, #40	; 0x28
 80036e2:	e7f0      	b.n	80036c6 <LCD_Init+0x23a>
 80036e4:	42020400 	.word	0x42020400
 80036e8:	20000c8c 	.word	0x20000c8c
 80036ec:	20000c90 	.word	0x20000c90

080036f0 <LCD_GetInfo>:
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_GetInfo(uint32_t *pWidth, uint32_t *pHeight)
{
    *pHeight = g_lcd_height;
 80036f0:	4a03      	ldr	r2, [pc, #12]	; (8003700 <LCD_GetInfo+0x10>)
    *pWidth  = g_lcd_width;
 80036f2:	4b04      	ldr	r3, [pc, #16]	; (8003704 <LCD_GetInfo+0x14>)
    *pHeight = g_lcd_height;
 80036f4:	6812      	ldr	r2, [r2, #0]
    *pWidth  = g_lcd_width;
 80036f6:	681b      	ldr	r3, [r3, #0]
    *pHeight = g_lcd_height;
 80036f8:	600a      	str	r2, [r1, #0]
    *pWidth  = g_lcd_width;
 80036fa:	6003      	str	r3, [r0, #0]
}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	20000c8c 	.word	0x20000c8c
 8003704:	20000c90 	.word	0x20000c90

08003708 <LCD_SetWindows>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_SetWindows(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2)
{
 8003708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370a:	4607      	mov	r7, r0
 800370c:	4616      	mov	r6, r2
 800370e:	460d      	mov	r5, r1
 8003710:	461c      	mov	r4, r3
    LCD_WriteCmd(0x2a);
 8003712:	202a      	movs	r0, #42	; 0x2a
 8003714:	f7ff fe6e 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara((x1 >> 8) & 0xFF);
 8003718:	f3c7 2007 	ubfx	r0, r7, #8, #8
 800371c:	f7ff fe44 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(x1 & 0xFF);
 8003720:	b2f8      	uxtb	r0, r7
 8003722:	f7ff fe41 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara((x2 >> 8) & 0xFF);
 8003726:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800372a:	f7ff fe3d 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(x2 & 0xFF);
 800372e:	b2f0      	uxtb	r0, r6
 8003730:	f7ff fe3a 	bl	80033a8 <LCD_WritePara.isra.0>
    

    LCD_WriteCmd(0x2b);
 8003734:	202b      	movs	r0, #43	; 0x2b
 8003736:	f7ff fe5d 	bl	80033f4 <LCD_WriteCmd.isra.0>
    LCD_WritePara((y1 >> 8) & 0xFF);
 800373a:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800373e:	f7ff fe33 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(y1 & 0xFF);
 8003742:	b2e8      	uxtb	r0, r5
 8003744:	f7ff fe30 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara((y2 >> 8) & 0xFF);
 8003748:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800374c:	f7ff fe2c 	bl	80033a8 <LCD_WritePara.isra.0>
    LCD_WritePara(y2 & 0xFF);
 8003750:	b2e0      	uxtb	r0, r4
 8003752:	f7ff fe29 	bl	80033a8 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2C);
}
 8003756:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_WriteCmd(0x2C);
 800375a:	202c      	movs	r0, #44	; 0x2c
 800375c:	f7ff be4a 	b.w	80033f4 <LCD_WriteCmd.isra.0>

08003760 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003760:	480d      	ldr	r0, [pc, #52]	; (8003798 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003762:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003764:	f006 fab0 	bl	8009cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003768:	480c      	ldr	r0, [pc, #48]	; (800379c <LoopForever+0x6>)
  ldr r1, =_edata
 800376a:	490d      	ldr	r1, [pc, #52]	; (80037a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800376c:	4a0d      	ldr	r2, [pc, #52]	; (80037a4 <LoopForever+0xe>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003770:	e002      	b.n	8003778 <LoopCopyDataInit>

08003772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003776:	3304      	adds	r3, #4

08003778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800377c:	d3f9      	bcc.n	8003772 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377e:	4a0a      	ldr	r2, [pc, #40]	; (80037a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003780:	4c0a      	ldr	r4, [pc, #40]	; (80037ac <LoopForever+0x16>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003784:	e001      	b.n	800378a <LoopFillZerobss>

08003786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003788:	3204      	adds	r2, #4

0800378a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800378c:	d3fb      	bcc.n	8003786 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800378e:	f006 fae9 	bl	8009d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003792:	f7fe faad 	bl	8001cf0 <main>

08003796 <LoopForever>:

LoopForever:
    b LoopForever
 8003796:	e7fe      	b.n	8003796 <LoopForever>
  ldr   r0, =_estack
 8003798:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800379c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a0:	2000084c 	.word	0x2000084c
  ldr r2, =_sidata
 80037a4:	08019e78 	.word	0x08019e78
  ldr r2, =_sbss
 80037a8:	2000084c 	.word	0x2000084c
  ldr r4, =_ebss
 80037ac:	20000cdc 	.word	0x20000cdc

080037b0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <ADC1_IRQHandler>
	...

080037b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037b4:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80037b6:	4e24      	ldr	r6, [pc, #144]	; (8003848 <HAL_InitTick+0x94>)
 80037b8:	7832      	ldrb	r2, [r6, #0]
 80037ba:	b1ea      	cbz	r2, 80037f8 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 80037bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80037c0:	691c      	ldr	r4, [r3, #16]
 80037c2:	4605      	mov	r5, r0
 80037c4:	f014 0404 	ands.w	r4, r4, #4
 80037c8:	d018      	beq.n	80037fc <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 80037ca:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80037ce:	fbb4 f2f2 	udiv	r2, r4, r2
 80037d2:	4b1e      	ldr	r3, [pc, #120]	; (800384c <HAL_InitTick+0x98>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80037da:	4620      	mov	r0, r4
 80037dc:	f000 f8e2 	bl	80039a4 <HAL_SYSTICK_Config>
 80037e0:	4604      	mov	r4, r0
 80037e2:	b948      	cbnz	r0, 80037f8 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037e4:	4602      	mov	r2, r0
 80037e6:	4629      	mov	r1, r5
 80037e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80037ec:	f000 f88e 	bl	800390c <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 80037f0:	4b17      	ldr	r3, [pc, #92]	; (8003850 <HAL_InitTick+0x9c>)

  /* Return function status */
  return HAL_OK;
 80037f2:	4620      	mov	r0, r4
  uwTickPrio = TickPriority;
 80037f4:	601d      	str	r5, [r3, #0]
}
 80037f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80037f8:	2001      	movs	r0, #1
}
 80037fa:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 80037fc:	f000 f920 	bl	8003a40 <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 8003800:	2801      	cmp	r0, #1
 8003802:	d017      	beq.n	8003834 <HAL_InitTick+0x80>
 8003804:	2802      	cmp	r0, #2
 8003806:	d00b      	beq.n	8003820 <HAL_InitTick+0x6c>
 8003808:	2800      	cmp	r0, #0
 800380a:	d1e6      	bne.n	80037da <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800380c:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8003810:	7832      	ldrb	r2, [r6, #0]
 8003812:	4b0e      	ldr	r3, [pc, #56]	; (800384c <HAL_InitTick+0x98>)
 8003814:	fbb4 f4f2 	udiv	r4, r4, r2
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	fbb3 f4f4 	udiv	r4, r3, r4
        break;
 800381e:	e7dc      	b.n	80037da <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003820:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003824:	7832      	ldrb	r2, [r6, #0]
 8003826:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382a:	fbb4 f4f2 	udiv	r4, r4, r2
 800382e:	fbb3 f4f4 	udiv	r4, r3, r4
        break;
 8003832:	e7d2      	b.n	80037da <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8003834:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8003838:	7832      	ldrb	r2, [r6, #0]
 800383a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800383e:	fbb4 f4f2 	udiv	r4, r4, r2
 8003842:	fbb3 f4f4 	udiv	r4, r3, r4
        break;
 8003846:	e7c8      	b.n	80037da <HAL_InitTick+0x26>
 8003848:	20000000 	.word	0x20000000
 800384c:	20000008 	.word	0x20000008
 8003850:	20000004 	.word	0x20000004

08003854 <HAL_Init>:
{
 8003854:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003856:	2003      	movs	r0, #3
 8003858:	f000 f846 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800385c:	f000 fe7e 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8003860:	4603      	mov	r3, r0
 8003862:	4a0c      	ldr	r2, [pc, #48]	; (8003894 <HAL_Init+0x40>)
 8003864:	480c      	ldr	r0, [pc, #48]	; (8003898 <HAL_Init+0x44>)
 8003866:	6a12      	ldr	r2, [r2, #32]
 8003868:	490c      	ldr	r1, [pc, #48]	; (800389c <HAL_Init+0x48>)
 800386a:	f002 020f 	and.w	r2, r2, #15
 800386e:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003870:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003872:	40d3      	lsrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003876:	f000 f8a5 	bl	80039c4 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800387a:	200f      	movs	r0, #15
 800387c:	f7ff ff9a 	bl	80037b4 <HAL_InitTick>
 8003880:	b110      	cbz	r0, 8003888 <HAL_Init+0x34>
    return HAL_ERROR;
 8003882:	2401      	movs	r4, #1
}
 8003884:	4620      	mov	r0, r4
 8003886:	bd10      	pop	{r4, pc}
 8003888:	4604      	mov	r4, r0
  HAL_MspInit();
 800388a:	f000 fdd5 	bl	8004438 <HAL_MspInit>
}
 800388e:	4620      	mov	r0, r4
 8003890:	bd10      	pop	{r4, pc}
 8003892:	bf00      	nop
 8003894:	44020c00 	.word	0x44020c00
 8003898:	08019e48 	.word	0x08019e48
 800389c:	20000008 	.word	0x20000008

080038a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80038a0:	4a03      	ldr	r2, [pc, #12]	; (80038b0 <HAL_IncTick+0x10>)
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <HAL_IncTick+0x14>)
 80038a4:	6811      	ldr	r1, [r2, #0]
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	440b      	add	r3, r1
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000c94 	.word	0x20000c94
 80038b4:	20000000 	.word	0x20000000

080038b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80038b8:	4b01      	ldr	r3, [pc, #4]	; (80038c0 <HAL_GetTick+0x8>)
 80038ba:	6818      	ldr	r0, [r3, #0]
}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000c94 	.word	0x20000c94

080038c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80038c8:	f7ff fff6 	bl	80038b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038cc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80038ce:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80038d0:	d002      	beq.n	80038d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <HAL_Delay+0x20>)
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038d8:	f7ff ffee 	bl	80038b8 <HAL_GetTick>
 80038dc:	1b43      	subs	r3, r0, r5
 80038de:	42a3      	cmp	r3, r4
 80038e0:	d3fa      	bcc.n	80038d8 <HAL_Delay+0x14>
  {
  }
}
 80038e2:	bd38      	pop	{r3, r4, r5, pc}
 80038e4:	20000000 	.word	0x20000000

080038e8 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e8:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038ec:	4906      	ldr	r1, [pc, #24]	; (8003908 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ee:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038f0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038f6:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003904:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003906:	4770      	bx	lr
 8003908:	e000ed00 	.word	0xe000ed00

0800390c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800390c:	4b1c      	ldr	r3, [pc, #112]	; (8003980 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800390e:	b500      	push	{lr}
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003916:	f1c3 0e07 	rsb	lr, r3, #7
 800391a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800391e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003922:	bf28      	it	cs
 8003924:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003928:	f1bc 0f06 	cmp.w	ip, #6
 800392c:	d91b      	bls.n	8003966 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800392e:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003932:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003934:	fa0c fc03 	lsl.w	ip, ip, r3
 8003938:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8003940:	fa0c fc0e 	lsl.w	ip, ip, lr
 8003944:	ea21 010c 	bic.w	r1, r1, ip
 8003948:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800394a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8003950:	db0c      	blt.n	800396c <HAL_NVIC_SetPriority+0x60>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003952:	0109      	lsls	r1, r1, #4
 8003954:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003958:	b2c9      	uxtb	r1, r1
 800395a:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800395e:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003962:	f85d fb04 	ldr.w	pc, [sp], #4
 8003966:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003968:	4613      	mov	r3, r2
 800396a:	e7e7      	b.n	800393c <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <HAL_NVIC_SetPriority+0x78>)
 800396e:	f000 000f 	and.w	r0, r0, #15
 8003972:	0109      	lsls	r1, r1, #4
 8003974:	b2c9      	uxtb	r1, r1
 8003976:	4403      	add	r3, r0
 8003978:	7619      	strb	r1, [r3, #24]
 800397a:	f85d fb04 	ldr.w	pc, [sp], #4
 800397e:	bf00      	nop
 8003980:	e000ed00 	.word	0xe000ed00
 8003984:	e000ecfc 	.word	0xe000ecfc

08003988 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003988:	2800      	cmp	r0, #0
 800398a:	db07      	blt.n	800399c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800398c:	2301      	movs	r3, #1
 800398e:	f000 011f 	and.w	r1, r0, #31
 8003992:	4a03      	ldr	r2, [pc, #12]	; (80039a0 <HAL_NVIC_EnableIRQ+0x18>)
 8003994:	0940      	lsrs	r0, r0, #5
 8003996:	408b      	lsls	r3, r1
 8003998:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	e000e100 	.word	0xe000e100

080039a4 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039a4:	1e43      	subs	r3, r0, #1
 80039a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039aa:	d209      	bcs.n	80039c0 <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80039ac:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80039b0:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80039b2:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 80039b4:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80039b6:	6913      	ldr	r3, [r2, #16]
 80039b8:	f043 0303 	orr.w	r3, r3, #3
 80039bc:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 80039be:	4770      	bx	lr
    return (1UL);
 80039c0:	2001      	movs	r0, #1
}
 80039c2:	4770      	bx	lr

080039c4 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80039c4:	2804      	cmp	r0, #4
 80039c6:	d813      	bhi.n	80039f0 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 80039c8:	e8df f000 	tbb	[pc, r0]
 80039cc:	12031a2a 	.word	0x12031a2a
 80039d0:	13          	.byte	0x13
 80039d1:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80039d2:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 80039d6:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80039d8:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80039da:	f023 0304 	bic.w	r3, r3, #4
 80039de:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80039e0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 80039e4:	f023 030c 	bic.w	r3, r3, #12
 80039e8:	f043 0308 	orr.w	r3, r3, #8
 80039ec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 80039f0:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80039f2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80039f6:	6913      	ldr	r3, [r2, #16]
 80039f8:	f043 0304 	orr.w	r3, r3, #4
 80039fc:	6113      	str	r3, [r2, #16]
      break;
 80039fe:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003a00:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8003a04:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003a06:	4a0d      	ldr	r2, [pc, #52]	; (8003a3c <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003a08:	f023 0304 	bic.w	r3, r3, #4
 8003a0c:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8003a0e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8003a12:	f023 030c 	bic.w	r3, r3, #12
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8003a1e:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003a20:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8003a24:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003a26:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8003a28:	f023 0304 	bic.w	r3, r3, #4
 8003a2c:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8003a2e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8003a32:	f023 030c 	bic.w	r3, r3, #12
 8003a36:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8003a3a:	4770      	bx	lr
 8003a3c:	44020c00 	.word	0x44020c00

08003a40 <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8003a40:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003a44:	6918      	ldr	r0, [r3, #16]
 8003a46:	f010 0004 	ands.w	r0, r0, #4
 8003a4a:	d10c      	bne.n	8003a66 <HAL_SYSTICK_GetCLKSourceConfig+0x26>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8003a4c:	4b07      	ldr	r3, [pc, #28]	; (8003a6c <HAL_SYSTICK_GetCLKSourceConfig+0x2c>)
 8003a4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003a52:	f003 030c 	and.w	r3, r3, #12

    switch (systick_rcc_source)
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d003      	beq.n	8003a62 <HAL_SYSTICK_GetCLKSourceConfig+0x22>
      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
        break;

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	bf08      	it	eq
 8003a5e:	2002      	moveq	r0, #2
 8003a60:	4770      	bx	lr
    switch (systick_rcc_source)
 8003a62:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8003a64:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8003a66:	2004      	movs	r0, #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	44020c00 	.word	0x44020c00

08003a70 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8003a70:	b570      	push	{r4, r5, r6, lr}
 8003a72:	4604      	mov	r4, r0
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003a74:	f7ff ff20 	bl	80038b8 <HAL_GetTick>

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003a78:	2c00      	cmp	r4, #0
 8003a7a:	f000 8148 	beq.w	8003d0e <HAL_DMA_Init+0x29e>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003a7e:	4605      	mov	r5, r0
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a80:	2000      	movs	r0, #0

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8003a82:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003a86:	6823      	ldr	r3, [r4, #0]
  if (hdma->State == HAL_DMA_STATE_RESET)
 8003a88:	f001 02ff 	and.w	r2, r1, #255	; 0xff
  __HAL_UNLOCK(hdma);
 8003a8c:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  if (hdma->State == HAL_DMA_STATE_RESET)
 8003a90:	2900      	cmp	r1, #0
 8003a92:	f000 80d5 	beq.w	8003c40 <HAL_DMA_Init+0x1d0>
    hdma->XferAbortCallback    = NULL;
    hdma->XferSuspendCallback  = NULL;
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a96:	2202      	movs	r2, #2
 8003a98:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	f042 0206 	orr.w	r2, r2, #6
 8003aa2:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003aa4:	e006      	b.n	8003ab4 <HAL_DMA_Init+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003aa6:	f7ff ff07 	bl	80038b8 <HAL_GetTick>
 8003aaa:	1b43      	subs	r3, r0, r5
 8003aac:	2b05      	cmp	r3, #5
 8003aae:	f200 8124 	bhi.w	8003cfa <HAL_DMA_Init+0x28a>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003ab2:	6823      	ldr	r3, [r4, #0]
 8003ab4:	695a      	ldr	r2, [r3, #20]
 8003ab6:	07d2      	lsls	r2, r2, #31
 8003ab8:	d4f5      	bmi.n	8003aa6 <HAL_DMA_Init+0x36>

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003aba:	6959      	ldr	r1, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003abc:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003abe:	f421 0143 	bic.w	r1, r1, #12779520	; 0xc30000
 8003ac2:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
 8003ac6:	4301      	orrs	r1, r0
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003ac8:	6920      	ldr	r0, [r4, #16]
 8003aca:	432a      	orrs	r2, r5
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8003acc:	6159      	str	r1, [r3, #20]
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003ace:	69a1      	ldr	r1, [r4, #24]
 8003ad0:	4302      	orrs	r2, r0
 8003ad2:	4311      	orrs	r1, r2

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003ad4:	4a8f      	ldr	r2, [pc, #572]	; (8003d14 <HAL_DMA_Init+0x2a4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	f000 80b8 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003adc:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	f000 80b3 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003ae6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003aea:	3280      	adds	r2, #128	; 0x80
 8003aec:	4293      	cmp	r3, r2
 8003aee:	f000 80ad 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003af2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003af6:	4293      	cmp	r3, r2
 8003af8:	f000 80a8 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003afc:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003b00:	3280      	adds	r2, #128	; 0x80
 8003b02:	4293      	cmp	r3, r2
 8003b04:	f000 80a2 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003b08:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	f000 809d 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003b12:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003b16:	3280      	adds	r2, #128	; 0x80
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	f000 8097 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003b1e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003b22:	4293      	cmp	r3, r2
 8003b24:	f000 8092 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003b28:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003b2c:	3280      	adds	r2, #128	; 0x80
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	f000 808c 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003b34:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	f000 8087 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003b3e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003b42:	3280      	adds	r2, #128	; 0x80
 8003b44:	4293      	cmp	r3, r2
 8003b46:	f000 8081 	beq.w	8003c4c <HAL_DMA_Init+0x1dc>
 8003b4a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d07c      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b52:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003b56:	3280      	adds	r2, #128	; 0x80
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d077      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b5c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d073      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b64:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003b68:	3280      	adds	r2, #128	; 0x80
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d06e      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b6e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d06a      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b76:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003b7a:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d064      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b82:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d060      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b8a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003b8e:	3280      	adds	r2, #128	; 0x80
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d05b      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b94:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d057      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003b9c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003ba0:	3280      	adds	r2, #128	; 0x80
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d052      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003ba6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d04e      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003bae:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003bb2:	3280      	adds	r2, #128	; 0x80
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d049      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003bb8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d045      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003bc0:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003bc4:	3280      	adds	r2, #128	; 0x80
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d040      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003bca:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d03c      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003bd2:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003bd6:	3280      	adds	r2, #128	; 0x80
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d037      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003bdc:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d033      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003be4:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003be8:	3280      	adds	r2, #128	; 0x80
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d02e      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003bee:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d02a      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003bf6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003bfa:	3280      	adds	r2, #128	; 0x80
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d025      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
 8003c00:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d021      	beq.n	8003c4c <HAL_DMA_Init+0x1dc>
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003c08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003c0a:	68a0      	ldr	r0, [r4, #8]
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003c0c:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 8003c10:	430a      	orrs	r2, r1
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003c14:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c16:	7921      	ldrb	r1, [r4, #4]
 8003c18:	4302      	orrs	r2, r0
 8003c1a:	4311      	orrs	r1, r2

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c1c:	68e2      	ldr	r2, [r4, #12]
 8003c1e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003c22:	f000 8111 	beq.w	8003e48 <HAL_DMA_Init+0x3d8>
    {
      tmpreg |= DMA_CTR2_DREQ;
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003c26:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003c2a:	d06d      	beq.n	8003d08 <HAL_DMA_Init+0x298>
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003c2c:	2000      	movs	r0, #0
  tmpreg |= hdma->Init.Mode;
 8003c2e:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	4e39      	ldr	r6, [pc, #228]	; (8003d18 <HAL_DMA_Init+0x2a8>)
 8003c34:	4329      	orrs	r1, r5
 8003c36:	4032      	ands	r2, r6
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003c3c:	6498      	str	r0, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003c3e:	e054      	b.n	8003cea <HAL_DMA_Init+0x27a>
    hdma->XferHalfCpltCallback = NULL;
 8003c40:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
    hdma->XferAbortCallback    = NULL;
 8003c44:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
    hdma->XferSuspendCallback  = NULL;
 8003c48:	6722      	str	r2, [r4, #112]	; 0x70
 8003c4a:	e724      	b.n	8003a96 <HAL_DMA_Init+0x26>
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003c4c:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003c50:	3a01      	subs	r2, #1
 8003c52:	0512      	lsls	r2, r2, #20
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003c54:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003c56:	3801      	subs	r0, #1
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003c58:	f002 727c 	and.w	r2, r2, #66060288	; 0x3f00000
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003c5c:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8003c5e:	430a      	orrs	r2, r1
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003c60:	0101      	lsls	r1, r0, #4
 8003c62:	f401 717c 	and.w	r1, r1, #1008	; 0x3f0
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003c66:	432a      	orrs	r2, r5
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	f006 2080 	and.w	r0, r6, #2147516416	; 0x80008000
 8003c6e:	4302      	orrs	r2, r0
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003c70:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8003c74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c76:	7920      	ldrb	r0, [r4, #4]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	ea42 0100 	orr.w	r1, r2, r0
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c7e:	68e2      	ldr	r2, [r4, #12]
 8003c80:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003c84:	d04c      	beq.n	8003d20 <HAL_DMA_Init+0x2b0>
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8003c86:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003c8a:	d03d      	beq.n	8003d08 <HAL_DMA_Init+0x298>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8e:	4822      	ldr	r0, [pc, #136]	; (8003d18 <HAL_DMA_Init+0x2a8>)
  tmpreg |= hdma->Init.Mode;
 8003c90:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003c92:	4002      	ands	r2, r0
 8003c94:	432a      	orrs	r2, r5
 8003c96:	430a      	orrs	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003c98:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003c9a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003c9c:	4a1f      	ldr	r2, [pc, #124]	; (8003d1c <HAL_DMA_Init+0x2ac>)
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003c9e:	6499      	str	r1, [r3, #72]	; 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d01f      	beq.n	8003ce4 <HAL_DMA_Init+0x274>
 8003ca4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d01b      	beq.n	8003ce4 <HAL_DMA_Init+0x274>
 8003cac:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003cb0:	3280      	adds	r2, #128	; 0x80
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d016      	beq.n	8003ce4 <HAL_DMA_Init+0x274>
 8003cb6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d012      	beq.n	8003ce4 <HAL_DMA_Init+0x274>
 8003cbe:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003cc2:	f502 6278 	add.w	r2, r2, #3968	; 0xf80
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00c      	beq.n	8003ce4 <HAL_DMA_Init+0x274>
 8003cca:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d008      	beq.n	8003ce4 <HAL_DMA_Init+0x274>
 8003cd2:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003cd6:	3280      	adds	r2, #128	; 0x80
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d003      	beq.n	8003ce4 <HAL_DMA_Init+0x274>
 8003cdc:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d102      	bne.n	8003cea <HAL_DMA_Init+0x27a>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8003ce8:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003cea:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8003cec:	2201      	movs	r2, #1
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003cee:	67d8      	str	r0, [r3, #124]	; 0x7c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cf0:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->State = HAL_DMA_STATE_READY;
 8003cf2:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
  hdma->Mode = hdma->Init.Mode;
 8003cf6:	6525      	str	r5, [r4, #80]	; 0x50
}
 8003cf8:	bd70      	pop	{r4, r5, r6, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cfa:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8003cfc:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003cfe:	65a2      	str	r2, [r4, #88]	; 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 8003d00:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 8003d04:	2001      	movs	r0, #1
}
 8003d06:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg |= DMA_CTR2_SWREQ;
 8003d08:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8003d0c:	e7be      	b.n	8003c8c <HAL_DMA_Init+0x21c>
    return HAL_ERROR;
 8003d0e:	2001      	movs	r0, #1
}
 8003d10:	bd70      	pop	{r4, r5, r6, pc}
 8003d12:	bf00      	nop
 8003d14:	40020050 	.word	0x40020050
 8003d18:	3cc02100 	.word	0x3cc02100
 8003d1c:	40020350 	.word	0x40020350
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003d20:	4a50      	ldr	r2, [pc, #320]	; (8003e64 <HAL_DMA_Init+0x3f4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	f000 809a 	beq.w	8003e5c <HAL_DMA_Init+0x3ec>
 8003d28:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	f000 8095 	beq.w	8003e5c <HAL_DMA_Init+0x3ec>
 8003d32:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003d36:	3280      	adds	r2, #128	; 0x80
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	f000 808f 	beq.w	8003e5c <HAL_DMA_Init+0x3ec>
 8003d3e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003d42:	4293      	cmp	r3, r2
 8003d44:	f000 808a 	beq.w	8003e5c <HAL_DMA_Init+0x3ec>
 8003d48:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003d4c:	3280      	adds	r2, #128	; 0x80
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	f000 8084 	beq.w	8003e5c <HAL_DMA_Init+0x3ec>
 8003d54:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d07f      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003d5c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003d60:	3280      	adds	r2, #128	; 0x80
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d07a      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003d66:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d076      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003d6e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003d72:	3280      	adds	r2, #128	; 0x80
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d071      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003d78:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d06d      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003d80:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003d84:	3280      	adds	r2, #128	; 0x80
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d068      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003d8a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d064      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003d92:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003d96:	3280      	adds	r2, #128	; 0x80
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d05f      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003d9c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d05b      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003da4:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003da8:	3280      	adds	r2, #128	; 0x80
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d056      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003dae:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d052      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003db6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003dba:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d04c      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003dc2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d048      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003dca:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003dce:	3280      	adds	r2, #128	; 0x80
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d043      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003dd4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d03f      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003ddc:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003de0:	3280      	adds	r2, #128	; 0x80
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d03a      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003de6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d036      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003dee:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003df2:	3280      	adds	r2, #128	; 0x80
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d031      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003df8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d02d      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003e00:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003e04:	3280      	adds	r2, #128	; 0x80
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d028      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003e0a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d024      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003e12:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003e16:	3280      	adds	r2, #128	; 0x80
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d01f      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003e1c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d01b      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003e24:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003e28:	3280      	adds	r2, #128	; 0x80
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d016      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003e2e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d012      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003e36:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8003e3a:	3280      	adds	r2, #128	; 0x80
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d00d      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
 8003e40:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d009      	beq.n	8003e5c <HAL_DMA_Init+0x3ec>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003e48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e4a:	4807      	ldr	r0, [pc, #28]	; (8003e68 <HAL_DMA_Init+0x3f8>)
  tmpreg |= hdma->Init.Mode;
 8003e4c:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003e4e:	4002      	ands	r2, r0
 8003e50:	432a      	orrs	r2, r5
 8003e52:	430a      	orrs	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003e54:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003e58:	6499      	str	r1, [r3, #72]	; 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8003e5a:	e746      	b.n	8003cea <HAL_DMA_Init+0x27a>
      tmpreg |= DMA_CTR2_DREQ;
 8003e5c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8003e60:	e714      	b.n	8003c8c <HAL_DMA_Init+0x21c>
 8003e62:	bf00      	nop
 8003e64:	40020050 	.word	0x40020050
 8003e68:	3cc02100 	.word	0x3cc02100

08003e6c <HAL_DMA_Start_IT>:
  if (hdma == NULL)
 8003e6c:	2800      	cmp	r0, #0
 8003e6e:	d043      	beq.n	8003ef8 <HAL_DMA_Start_IT+0x8c>
{
 8003e70:	b530      	push	{r4, r5, lr}
  if (hdma->Mode != DMA_NORMAL)
 8003e72:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8003e74:	4684      	mov	ip, r0
 8003e76:	2c00      	cmp	r4, #0
 8003e78:	d134      	bne.n	8003ee4 <HAL_DMA_Start_IT+0x78>
  __HAL_LOCK(hdma);
 8003e7a:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8003e7e:	2801      	cmp	r0, #1
 8003e80:	d038      	beq.n	8003ef4 <HAL_DMA_Start_IT+0x88>
 8003e82:	2001      	movs	r0, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8003e84:	f89c e054 	ldrb.w	lr, [ip, #84]	; 0x54
  __HAL_LOCK(hdma);
 8003e88:	f88c 004c 	strb.w	r0, [ip, #76]	; 0x4c
  if (hdma->State == HAL_DMA_STATE_READY)
 8003e8c:	4586      	cmp	lr, r0
 8003e8e:	d12b      	bne.n	8003ee8 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e90:	2002      	movs	r0, #2
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003e92:	f44f 45fe 	mov.w	r5, #32512	; 0x7f00
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e96:	f88c 0054 	strb.w	r0, [ip, #84]	; 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e9a:	f8cc 4058 	str.w	r4, [ip, #88]	; 0x58
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003e9e:	f8dc 4000 	ldr.w	r4, [ip]
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003ea6:	0c00      	lsrs	r0, r0, #16
 8003ea8:	0400      	lsls	r0, r0, #16
 8003eaa:	4303      	orrs	r3, r0
 8003eac:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hdma->XferHalfCpltCallback != NULL)
 8003eae:	f8dc 0064 	ldr.w	r0, [ip, #100]	; 0x64
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003eb2:	60e5      	str	r5, [r4, #12]
  hdma->Instance->CSAR = SrcAddress;
 8003eb4:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdma->Instance->CDAR = DstAddress;
 8003eb6:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003eb8:	6963      	ldr	r3, [r4, #20]
 8003eba:	f443 43ba 	orr.w	r3, r3, #23808	; 0x5d00
 8003ebe:	6163      	str	r3, [r4, #20]
    if (hdma->XferHalfCpltCallback != NULL)
 8003ec0:	b118      	cbz	r0, 8003eca <HAL_DMA_Start_IT+0x5e>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003ec2:	6963      	ldr	r3, [r4, #20]
 8003ec4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ec8:	6163      	str	r3, [r4, #20]
    if (hdma->XferSuspendCallback != NULL)
 8003eca:	f8dc 3070 	ldr.w	r3, [ip, #112]	; 0x70
 8003ece:	b11b      	cbz	r3, 8003ed8 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003ed0:	6963      	ldr	r3, [r4, #20]
 8003ed2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ed6:	6163      	str	r3, [r4, #20]
    __HAL_DMA_ENABLE(hdma);
 8003ed8:	6963      	ldr	r3, [r4, #20]
  return HAL_OK;
 8003eda:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6163      	str	r3, [r4, #20]
}
 8003ee2:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003ee4:	2001      	movs	r0, #1
}
 8003ee6:	bd30      	pop	{r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003ee8:	2340      	movs	r3, #64	; 0x40
    __HAL_UNLOCK(hdma);
 8003eea:	f88c 404c 	strb.w	r4, [ip, #76]	; 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003eee:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
}
 8003ef2:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdma);
 8003ef4:	2002      	movs	r0, #2
}
 8003ef6:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8003ef8:	2001      	movs	r0, #1
}
 8003efa:	4770      	bx	lr

08003efc <HAL_DMA_Abort>:
{
 8003efc:	b538      	push	{r3, r4, r5, lr}
 8003efe:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8003f00:	f7ff fcda 	bl	80038b8 <HAL_GetTick>
  if (hdma == NULL)
 8003f04:	2c00      	cmp	r4, #0
 8003f06:	d048      	beq.n	8003f9a <HAL_DMA_Abort+0x9e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003f08:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d12b      	bne.n	8003f68 <HAL_DMA_Abort+0x6c>
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003f10:	2105      	movs	r1, #5
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003f12:	6823      	ldr	r3, [r4, #0]
 8003f14:	4605      	mov	r5, r0
 8003f16:	695a      	ldr	r2, [r3, #20]
 8003f18:	f042 0204 	orr.w	r2, r2, #4
 8003f1c:	615a      	str	r2, [r3, #20]
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003f1e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003f22:	e005      	b.n	8003f30 <HAL_DMA_Abort+0x34>
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003f24:	f7ff fcc8 	bl	80038b8 <HAL_GetTick>
 8003f28:	1b43      	subs	r3, r0, r5
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d823      	bhi.n	8003f76 <HAL_DMA_Abort+0x7a>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	0491      	lsls	r1, r2, #18
 8003f34:	d5f6      	bpl.n	8003f24 <HAL_DMA_Abort+0x28>
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f36:	2504      	movs	r5, #4
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003f38:	f44f 40fe 	mov.w	r0, #32512	; 0x7f00
    hdma->State = HAL_DMA_STATE_READY;
 8003f3c:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	f042 0202 	orr.w	r2, r2, #2
 8003f44:	615a      	str	r2, [r3, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f46:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f48:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f4c:	0612      	lsls	r2, r2, #24
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003f4e:	60d8      	str	r0, [r3, #12]
    hdma->State = HAL_DMA_STATE_READY;
 8003f50:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f54:	d503      	bpl.n	8003f5e <HAL_DMA_Abort+0x62>
      hdma->Instance->CBR1 = 0U;
 8003f56:	2200      	movs	r2, #0
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003f58:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8003f5a:	7301      	strb	r1, [r0, #12]
      hdma->Instance->CBR1 = 0U;
 8003f5c:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_UNLOCK(hdma);
 8003f5e:	2300      	movs	r3, #0
 8003f60:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8003f64:	4618      	mov	r0, r3
}
 8003f66:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hdma);
 8003f68:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6a:	2220      	movs	r2, #32
    __HAL_UNLOCK(hdma);
 8003f6c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return HAL_ERROR;
 8003f70:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f72:	65a2      	str	r2, [r4, #88]	; 0x58
}
 8003f74:	bd38      	pop	{r3, r4, r5, pc}
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f76:	2103      	movs	r1, #3
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003f78:	6da3      	ldr	r3, [r4, #88]	; 0x58
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f7a:	6d22      	ldr	r2, [r4, #80]	; 0x50
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003f7c:	f043 0310 	orr.w	r3, r3, #16
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f80:	0610      	lsls	r0, r2, #24
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003f82:	65a3      	str	r3, [r4, #88]	; 0x58
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f84:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003f88:	d502      	bpl.n	8003f90 <HAL_DMA_Abort+0x94>
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8003f8e:	731a      	strb	r2, [r3, #12]
        __HAL_UNLOCK(hdma);
 8003f90:	2300      	movs	r3, #0
 8003f92:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
        return HAL_ERROR;
 8003f96:	2001      	movs	r0, #1
}
 8003f98:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003f9a:	2001      	movs	r0, #1
}
 8003f9c:	bd38      	pop	{r3, r4, r5, pc}
 8003f9e:	bf00      	nop

08003fa0 <HAL_DMA_Abort_IT>:
  if (hdma == NULL)
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	b190      	cbz	r0, 8003fca <HAL_DMA_Abort_IT+0x2a>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003fa4:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8003fa8:	2a02      	cmp	r2, #2
 8003faa:	d003      	beq.n	8003fb4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fac:	2220      	movs	r2, #32
    return HAL_ERROR;
 8003fae:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fb0:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8003fb2:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fb4:	2104      	movs	r1, #4
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003fb6:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8003fb8:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003fbc:	6953      	ldr	r3, [r2, #20]
  return HAL_OK;
 8003fbe:	2000      	movs	r0, #0
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8003fc0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003fc4:	430b      	orrs	r3, r1
 8003fc6:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8003fc8:	4770      	bx	lr
    return HAL_ERROR;
 8003fca:	2001      	movs	r0, #1
}
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop

08003fd0 <HAL_DMA_IRQHandler>:
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003fd0:	2101      	movs	r1, #1
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003fd2:	6803      	ldr	r3, [r0, #0]
{
 8003fd4:	b510      	push	{r4, lr}
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003fd6:	f3c3 020b 	ubfx	r2, r3, #0, #12
{
 8003fda:	4604      	mov	r4, r0
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003fdc:	f423 607f 	bic.w	r0, r3, #4080	; 0xff0
 8003fe0:	f020 000f 	bic.w	r0, r0, #15
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003fe4:	3a50      	subs	r2, #80	; 0x50
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003fe6:	68c0      	ldr	r0, [r0, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003fe8:	f3c2 12c4 	ubfx	r2, r2, #7, #5
 8003fec:	fa01 f202 	lsl.w	r2, r1, r2
  if (global_active_flag_ns == 0U)
 8003ff0:	4202      	tst	r2, r0
 8003ff2:	f000 80a4 	beq.w	800413e <HAL_DMA_IRQHandler+0x16e>
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8003ff6:	691a      	ldr	r2, [r3, #16]
 8003ff8:	0552      	lsls	r2, r2, #21
 8003ffa:	d508      	bpl.n	800400e <HAL_DMA_IRQHandler+0x3e>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	0550      	lsls	r0, r2, #21
 8004000:	d505      	bpl.n	800400e <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004006:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004008:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800400a:	430a      	orrs	r2, r1
 800400c:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	0511      	lsls	r1, r2, #20
 8004012:	d509      	bpl.n	8004028 <HAL_DMA_IRQHandler+0x58>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	0512      	lsls	r2, r2, #20
 8004018:	d506      	bpl.n	8004028 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 800401a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800401e:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004020:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004022:	f042 0202 	orr.w	r2, r2, #2
 8004026:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	04d0      	lsls	r0, r2, #19
 800402c:	d509      	bpl.n	8004042 <HAL_DMA_IRQHandler+0x72>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 800402e:	695a      	ldr	r2, [r3, #20]
 8004030:	04d1      	lsls	r1, r2, #19
 8004032:	d506      	bpl.n	8004042 <HAL_DMA_IRQHandler+0x72>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004034:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004038:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 800403a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800403c:	f042 0204 	orr.w	r2, r2, #4
 8004040:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8004042:	691a      	ldr	r2, [r3, #16]
 8004044:	0452      	lsls	r2, r2, #17
 8004046:	d509      	bpl.n	800405c <HAL_DMA_IRQHandler+0x8c>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004048:	695a      	ldr	r2, [r3, #20]
 800404a:	0450      	lsls	r0, r2, #17
 800404c:	d506      	bpl.n	800405c <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 800404e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004052:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004054:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004056:	f042 0208 	orr.w	r2, r2, #8
 800405a:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	0591      	lsls	r1, r2, #22
 8004060:	d50a      	bpl.n	8004078 <HAL_DMA_IRQHandler+0xa8>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	0592      	lsls	r2, r2, #22
 8004066:	d507      	bpl.n	8004078 <HAL_DMA_IRQHandler+0xa8>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004068:	f44f 7100 	mov.w	r1, #512	; 0x200
      if (hdma->XferHalfCpltCallback != NULL)
 800406c:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800406e:	60d9      	str	r1, [r3, #12]
      if (hdma->XferHalfCpltCallback != NULL)
 8004070:	b112      	cbz	r2, 8004078 <HAL_DMA_IRQHandler+0xa8>
        hdma->XferHalfCpltCallback(hdma);
 8004072:	4620      	mov	r0, r4
 8004074:	4790      	blx	r2
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8004076:	6823      	ldr	r3, [r4, #0]
 8004078:	691a      	ldr	r2, [r3, #16]
 800407a:	0490      	lsls	r0, r2, #18
 800407c:	d511      	bpl.n	80040a2 <HAL_DMA_IRQHandler+0xd2>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 800407e:	695a      	ldr	r2, [r3, #20]
 8004080:	0491      	lsls	r1, r2, #18
 8004082:	d50e      	bpl.n	80040a2 <HAL_DMA_IRQHandler+0xd2>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004084:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004088:	60da      	str	r2, [r3, #12]
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800408a:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 800408e:	2a04      	cmp	r2, #4
 8004090:	d03d      	beq.n	800410e <HAL_DMA_IRQHandler+0x13e>
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004092:	2105      	movs	r1, #5
        if (hdma->XferSuspendCallback != NULL)
 8004094:	6f22      	ldr	r2, [r4, #112]	; 0x70
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004096:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if (hdma->XferSuspendCallback != NULL)
 800409a:	b112      	cbz	r2, 80040a2 <HAL_DMA_IRQHandler+0xd2>
          hdma->XferSuspendCallback(hdma);
 800409c:	4620      	mov	r0, r4
 800409e:	4790      	blx	r2
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	691a      	ldr	r2, [r3, #16]
 80040a4:	05d0      	lsls	r0, r2, #23
 80040a6:	d518      	bpl.n	80040da <HAL_DMA_IRQHandler+0x10a>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040a8:	695a      	ldr	r2, [r3, #20]
 80040aa:	05d1      	lsls	r1, r2, #23
 80040ac:	d515      	bpl.n	80040da <HAL_DMA_IRQHandler+0x10a>
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80040ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80040b0:	0612      	lsls	r2, r2, #24
 80040b2:	d545      	bpl.n	8004140 <HAL_DMA_IRQHandler+0x170>
        if (hdma->Instance->CLLR == 0U)
 80040b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80040b6:	b932      	cbnz	r2, 80040c6 <HAL_DMA_IRQHandler+0xf6>
          if (hdma->Instance->CBR1 == 0U)
 80040b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040ba:	b922      	cbnz	r2, 80040c6 <HAL_DMA_IRQHandler+0xf6>
            hdma->State = HAL_DMA_STATE_READY;
 80040bc:	2201      	movs	r2, #1
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80040be:	6f61      	ldr	r1, [r4, #116]	; 0x74
            hdma->State = HAL_DMA_STATE_READY;
 80040c0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80040c4:	730a      	strb	r2, [r1, #12]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80040c6:	f44f 7040 	mov.w	r0, #768	; 0x300
      __HAL_UNLOCK(hdma);
 80040ca:	2100      	movs	r1, #0
      if (hdma->XferCpltCallback != NULL)
 80040cc:	6e22      	ldr	r2, [r4, #96]	; 0x60
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 80040ce:	60d8      	str	r0, [r3, #12]
      __HAL_UNLOCK(hdma);
 80040d0:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
      if (hdma->XferCpltCallback != NULL)
 80040d4:	b10a      	cbz	r2, 80040da <HAL_DMA_IRQHandler+0x10a>
        hdma->XferCpltCallback(hdma);
 80040d6:	4620      	mov	r0, r4
 80040d8:	4790      	blx	r2
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80040da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d02e      	beq.n	800413e <HAL_DMA_IRQHandler+0x16e>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80040e0:	6822      	ldr	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;
 80040e2:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80040e4:	6953      	ldr	r3, [r2, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80040e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hdma);
 80040ee:	2200      	movs	r2, #0
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80040f0:	0603      	lsls	r3, r0, #24
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80040f2:	bf48      	it	mi
 80040f4:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
    hdma->State = HAL_DMA_STATE_READY;
 80040f6:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80040fa:	bf48      	it	mi
 80040fc:	7319      	strbmi	r1, [r3, #12]
    if (hdma->XferErrorCallback != NULL)
 80040fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    __HAL_UNLOCK(hdma);
 8004100:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if (hdma->XferErrorCallback != NULL)
 8004104:	b1db      	cbz	r3, 800413e <HAL_DMA_IRQHandler+0x16e>
      hdma->XferErrorCallback(hdma);
 8004106:	4620      	mov	r0, r4
}
 8004108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hdma->XferErrorCallback(hdma);
 800410c:	4718      	bx	r3
        hdma->State = HAL_DMA_STATE_READY;
 800410e:	2101      	movs	r1, #1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004110:	695a      	ldr	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004112:	6d20      	ldr	r0, [r4, #80]	; 0x50
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004114:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004118:	615a      	str	r2, [r3, #20]
        hdma->Instance->CCR |= DMA_CCR_RESET;
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	f042 0202 	orr.w	r2, r2, #2
 8004120:	615a      	str	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004122:	0602      	lsls	r2, r0, #24
        hdma->State = HAL_DMA_STATE_READY;
 8004124:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004128:	d503      	bpl.n	8004132 <HAL_DMA_IRQHandler+0x162>
          hdma->Instance->CBR1 = 0U;
 800412a:	2200      	movs	r2, #0
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800412c:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800412e:	7301      	strb	r1, [r0, #12]
          hdma->Instance->CBR1 = 0U;
 8004130:	649a      	str	r2, [r3, #72]	; 0x48
        __HAL_UNLOCK(hdma);
 8004132:	2200      	movs	r2, #0
        if (hdma->XferAbortCallback != NULL)
 8004134:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        __HAL_UNLOCK(hdma);
 8004136:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
        if (hdma->XferAbortCallback != NULL)
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e3      	bne.n	8004106 <HAL_DMA_IRQHandler+0x136>
}
 800413e:	bd10      	pop	{r4, pc}
        if (hdma->Instance->CBR1 == 0U)
 8004140:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004142:	2a00      	cmp	r2, #0
 8004144:	d1bf      	bne.n	80040c6 <HAL_DMA_IRQHandler+0xf6>
          hdma->State = HAL_DMA_STATE_READY;
 8004146:	2201      	movs	r2, #1
 8004148:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 800414c:	e7bb      	b.n	80040c6 <HAL_DMA_IRQHandler+0xf6>
 800414e:	bf00      	nop

08004150 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004150:	b1e8      	cbz	r0, 800418e <HAL_DMA_ConfigChannelAttributes+0x3e>
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004152:	f011 0310 	ands.w	r3, r1, #16
 8004156:	d018      	beq.n	800418a <HAL_DMA_ConfigChannelAttributes+0x3a>
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004158:	f04f 0c01 	mov.w	ip, #1
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800415c:	6803      	ldr	r3, [r0, #0]
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 800415e:	f001 0111 	and.w	r1, r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004162:	f3c3 020b 	ubfx	r2, r3, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004166:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800416a:	f023 030f 	bic.w	r3, r3, #15
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800416e:	3a50      	subs	r2, #80	; 0x50
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004170:	2911      	cmp	r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004172:	f3c2 12c4 	ubfx	r2, r2, #7, #5
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004176:	6859      	ldr	r1, [r3, #4]
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004178:	fa0c f202 	lsl.w	r2, ip, r2
      p_dma_instance->PRIVCFGR |= channel_idx;
 800417c:	bf0c      	ite	eq
 800417e:	430a      	orreq	r2, r1
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004180:	ea21 0202 	bicne.w	r2, r1, r2
  return HAL_OK;
 8004184:	2000      	movs	r0, #0
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004186:	605a      	str	r2, [r3, #4]
 8004188:	4770      	bx	lr
  return HAL_OK;
 800418a:	4618      	mov	r0, r3
}
 800418c:	4770      	bx	lr
    return HAL_ERROR;
 800418e:	2001      	movs	r0, #1
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop

08004194 <HAL_DMAEx_List_Start_IT>:
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004194:	b1f8      	cbz	r0, 80041d6 <HAL_DMAEx_List_Start_IT+0x42>
 8004196:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8004198:	4603      	mov	r3, r0
 800419a:	b1e2      	cbz	r2, 80041d6 <HAL_DMAEx_List_Start_IT+0x42>
  {
    return HAL_ERROR;
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 800419c:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800419e:	b1d1      	cbz	r1, 80041d6 <HAL_DMAEx_List_Start_IT+0x42>
{
 80041a0:	b410      	push	{r4}
  {
    return HAL_ERROR;
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80041a2:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80041a6:	6819      	ldr	r1, [r3, #0]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80041a8:	2801      	cmp	r0, #1
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80041aa:	694c      	ldr	r4, [r1, #20]
  dma_state = hdma->State;
 80041ac:	fa5f fc80 	uxtb.w	ip, r0
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80041b0:	d004      	beq.n	80041bc <HAL_DMAEx_List_Start_IT+0x28>
 80041b2:	f1bc 0f02 	cmp.w	ip, #2
 80041b6:	d110      	bne.n	80041da <HAL_DMAEx_List_Start_IT+0x46>
 80041b8:	03e0      	lsls	r0, r4, #15
 80041ba:	d50e      	bpl.n	80041da <HAL_DMAEx_List_Start_IT+0x46>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80041bc:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80041c0:	2801      	cmp	r0, #1
 80041c2:	b2c4      	uxtb	r4, r0
 80041c4:	d012      	beq.n	80041ec <HAL_DMAEx_List_Start_IT+0x58>
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80041c6:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80041c8:	694b      	ldr	r3, [r1, #20]
 80041ca:	f043 0301 	orr.w	r3, r3, #1
 80041ce:	614b      	str	r3, [r1, #20]
}
 80041d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041d4:	4770      	bx	lr
    return HAL_ERROR;
 80041d6:	2001      	movs	r0, #1
}
 80041d8:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 80041da:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041dc:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(hdma);
 80041de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80041e2:	2001      	movs	r0, #1
}
 80041e4:	f85d 4b04 	ldr.w	r4, [sp], #4
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041e8:	6599      	str	r1, [r3, #88]	; 0x58
}
 80041ea:	4770      	bx	lr
      __HAL_LOCK(hdma);
 80041ec:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 80041f0:	2801      	cmp	r0, #1
 80041f2:	d02b      	beq.n	800424c <HAL_DMAEx_List_Start_IT+0xb8>
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80041f4:	2000      	movs	r0, #0
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80041f6:	f04f 0c02 	mov.w	ip, #2
      __HAL_LOCK(hdma);
 80041fa:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80041fe:	f883 c054 	strb.w	ip, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004202:	f882 c00c 	strb.w	ip, [r2, #12]
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004206:	6598      	str	r0, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004208:	6110      	str	r0, [r2, #16]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800420a:	6948      	ldr	r0, [r1, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 800420c:	6e5c      	ldr	r4, [r3, #100]	; 0x64
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 800420e:	f440 40ba 	orr.w	r0, r0, #23808	; 0x5d00
 8004212:	6148      	str	r0, [r1, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8004214:	b11c      	cbz	r4, 800421e <HAL_DMAEx_List_Start_IT+0x8a>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004216:	6948      	ldr	r0, [r1, #20]
 8004218:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 800421c:	6148      	str	r0, [r1, #20]
      if (hdma->XferSuspendCallback != NULL)
 800421e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004220:	b11b      	cbz	r3, 800422a <HAL_DMAEx_List_Start_IT+0x96>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004222:	694b      	ldr	r3, [r1, #20]
 8004224:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004228:	614b      	str	r3, [r1, #20]
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800422a:	6813      	ldr	r3, [r2, #0]
  else
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800422c:	4808      	ldr	r0, [pc, #32]	; (8004250 <HAL_DMAEx_List_Start_IT+0xbc>)
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 800422e:	6a1c      	ldr	r4, [r3, #32]
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004230:	4a08      	ldr	r2, [pc, #32]	; (8004254 <HAL_DMAEx_List_Start_IT+0xc0>)
 8004232:	f014 0f02 	tst.w	r4, #2
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004236:	f64f 74fc 	movw	r4, #65532	; 0xfffc
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 800423a:	bf08      	it	eq
 800423c:	4602      	moveq	r2, r0
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800423e:	0c18      	lsrs	r0, r3, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004240:	4023      	ands	r3, r4
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004242:	0400      	lsls	r0, r0, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004244:	4313      	orrs	r3, r2
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004246:	6008      	str	r0, [r1, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004248:	67cb      	str	r3, [r1, #124]	; 0x7c
 800424a:	e7bc      	b.n	80041c6 <HAL_DMAEx_List_Start_IT+0x32>
      __HAL_LOCK(hdma);
 800424c:	2002      	movs	r0, #2
 800424e:	e7bf      	b.n	80041d0 <HAL_DMAEx_List_Start_IT+0x3c>
 8004250:	f8010000 	.word	0xf8010000
 8004254:	fe010000 	.word	0xfe010000

08004258 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800425c:	680c      	ldr	r4, [r1, #0]
{
 800425e:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004260:	2c00      	cmp	r4, #0
 8004262:	f000 80c8 	beq.w	80043f6 <HAL_GPIO_Init+0x19e>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004266:	4a65      	ldr	r2, [pc, #404]	; (80043fc <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0U;
 8004268:	2300      	movs	r3, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800426a:	ea02 2290 	and.w	r2, r2, r0, lsr #10
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800426e:	4e64      	ldr	r6, [pc, #400]	; (8004400 <HAL_GPIO_Init+0x1a8>)
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004270:	9201      	str	r2, [sp, #4]
 8004272:	e068      	b.n	8004346 <HAL_GPIO_Init+0xee>
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004274:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 8004276:	f8d0 b000 	ldr.w	fp, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800427a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800427e:	fa07 f70c 	lsl.w	r7, r7, ip
 8004282:	ea2b 0b07 	bic.w	fp, fp, r7
 8004286:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004288:	f002 0903 	and.w	r9, r2, #3
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800428c:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004290:	fa09 fa0c 	lsl.w	sl, r9, ip
 8004294:	ea4a 0a0b 	orr.w	sl, sl, fp
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004298:	f1be 0f01 	cmp.w	lr, #1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800429c:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 800429e:	f8c0 a000 	str.w	sl, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80042a2:	f240 8088 	bls.w	80043b6 <HAL_GPIO_Init+0x15e>
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80042a6:	f1b9 0f03 	cmp.w	r9, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80042aa:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80042ac:	f000 809f 	beq.w	80043ee <HAL_GPIO_Init+0x196>
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80042b0:	fa05 f50c 	lsl.w	r5, r5, ip
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80042b4:	9f00      	ldr	r7, [sp, #0]
        tmp = GPIOx->PUPDR;
 80042b6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80042ba:	ea0c 0707 	and.w	r7, ip, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80042be:	433d      	orrs	r5, r7
        GPIOx->PUPDR = tmp;
 80042c0:	60c5      	str	r5, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042c2:	00d5      	lsls	r5, r2, #3
 80042c4:	d53b      	bpl.n	800433e <HAL_GPIO_Init+0xe6>
        tmp = EXTI->EXTICR[position >> 2U];
 80042c6:	f023 0703 	bic.w	r7, r3, #3
 80042ca:	f107 4988 	add.w	r9, r7, #1140850688	; 0x44000000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80042ce:	270f      	movs	r7, #15
 80042d0:	f003 0503 	and.w	r5, r3, #3
 80042d4:	00ed      	lsls	r5, r5, #3
 80042d6:	fa07 fe05 	lsl.w	lr, r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80042da:	9f01      	ldr	r7, [sp, #4]
 80042dc:	f509 3908 	add.w	r9, r9, #139264	; 0x22000
 80042e0:	fa07 f505 	lsl.w	r5, r7, r5
        tmp &= ~((uint32_t)iocurrent);
 80042e4:	ea6f 0708 	mvn.w	r7, r8
        tmp = EXTI->EXTICR[position >> 2U];
 80042e8:	f8d9 c060 	ldr.w	ip, [r9, #96]	; 0x60
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042ec:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80042f0:	ea2c 0c0e 	bic.w	ip, ip, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80042f4:	ea45 050c 	orr.w	r5, r5, ip
        EXTI->EXTICR[position >> 2U] = tmp;
 80042f8:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
        tmp = EXTI->RTSR1;
 80042fc:	6835      	ldr	r5, [r6, #0]
        tmp &= ~((uint32_t)iocurrent);
 80042fe:	bf0c      	ite	eq
 8004300:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8004302:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->RTSR1 = tmp;
 8004306:	6035      	str	r5, [r6, #0]

        tmp = EXTI->FTSR1;
 8004308:	6875      	ldr	r5, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800430a:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        tmp &= ~((uint32_t)iocurrent);
 800430e:	bf0c      	ite	eq
 8004310:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8004312:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->FTSR1 = tmp;
 8004316:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004318:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800431c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8004320:	bf0c      	ite	eq
 8004322:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8004324:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->EMR1 = tmp;
 8004328:	f8c6 5084 	str.w	r5, [r6, #132]	; 0x84

        tmp = EXTI->IMR1;
 800432c:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004330:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8004332:	bf54      	ite	pl
 8004334:	403d      	andpl	r5, r7
        {
          tmp |= iocurrent;
 8004336:	ea48 0505 	orrmi.w	r5, r8, r5
        }
        EXTI->IMR1 = tmp;
 800433a:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
      }
    }

    position++;
 800433e:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004340:	fa34 f203 	lsrs.w	r2, r4, r3
 8004344:	d057      	beq.n	80043f6 <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004346:	2201      	movs	r2, #1
 8004348:	fa02 f503 	lsl.w	r5, r2, r3
    if (iocurrent != 0U)
 800434c:	ea15 0804 	ands.w	r8, r5, r4
 8004350:	d0f5      	beq.n	800433e <HAL_GPIO_Init+0xe6>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004352:	684a      	ldr	r2, [r1, #4]
 8004354:	f022 0e10 	bic.w	lr, r2, #16
 8004358:	f1be 0f02 	cmp.w	lr, #2
 800435c:	d18a      	bne.n	8004274 <HAL_GPIO_Init+0x1c>
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800435e:	f04f 090f 	mov.w	r9, #15
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004362:	690f      	ldr	r7, [r1, #16]
        tmp = GPIOx->AFR[position >> 3U];
 8004364:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004368:	f003 0c07 	and.w	ip, r3, #7
 800436c:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004370:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004374:	f007 070f 	and.w	r7, r7, #15
 8004378:	fa07 f70c 	lsl.w	r7, r7, ip
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800437c:	fa09 fc0c 	lsl.w	ip, r9, ip
        tmp = GPIOx->AFR[position >> 3U];
 8004380:	f8de 9020 	ldr.w	r9, [lr, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004384:	ea29 0c0c 	bic.w	ip, r9, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004388:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = tmp;
 800438c:	f8ce 7020 	str.w	r7, [lr, #32]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004390:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 8004392:	f8d0 a000 	ldr.w	sl, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004396:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800439a:	fa07 f70c 	lsl.w	r7, r7, ip
 800439e:	ea2a 0a07 	bic.w	sl, sl, r7
 80043a2:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80043a4:	f002 0903 	and.w	r9, r2, #3
 80043a8:	fa09 fe0c 	lsl.w	lr, r9, ip
 80043ac:	ea4e 0e0a 	orr.w	lr, lr, sl
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80043b0:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 80043b2:	f8c0 e000 	str.w	lr, [r0]
        tmp = GPIOx->OSPEEDR;
 80043b6:	f8d0 e008 	ldr.w	lr, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80043ba:	9f00      	ldr	r7, [sp, #0]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80043bc:	f1b9 0f03 	cmp.w	r9, #3
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80043c0:	ea0e 0e07 	and.w	lr, lr, r7
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80043c4:	68cf      	ldr	r7, [r1, #12]
 80043c6:	fa07 fa0c 	lsl.w	sl, r7, ip
 80043ca:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = tmp;
 80043ce:	f8c0 e008 	str.w	lr, [r0, #8]
        tmp = GPIOx->OTYPER;
 80043d2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80043d6:	ea2e 0e05 	bic.w	lr, lr, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80043da:	f3c2 1500 	ubfx	r5, r2, #4, #1
 80043de:	fa05 f503 	lsl.w	r5, r5, r3
 80043e2:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = tmp;
 80043e6:	6045      	str	r5, [r0, #4]
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80043e8:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80043ea:	f47f af61 	bne.w	80042b0 <HAL_GPIO_Init+0x58>
 80043ee:	2d01      	cmp	r5, #1
 80043f0:	f47f af5e 	bne.w	80042b0 <HAL_GPIO_Init+0x58>
 80043f4:	e765      	b.n	80042c2 <HAL_GPIO_Init+0x6a>
  }
}
 80043f6:	b003      	add	sp, #12
 80043f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fc:	002f7f7f 	.word	0x002f7f7f
 8004400:	44022000 	.word	0x44022000

08004404 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004404:	b10a      	cbz	r2, 800440a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004406:	6181      	str	r1, [r0, #24]
 8004408:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800440a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800440c:	4770      	bx	lr
 800440e:	bf00      	nop

08004410 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004410:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004412:	ea01 0203 	and.w	r2, r1, r3
 8004416:	ea21 0103 	bic.w	r1, r1, r3
 800441a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800441e:	6181      	str	r1, [r0, #24]
}
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop

08004424 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004424:	4a03      	ldr	r2, [pc, #12]	; (8004434 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8004426:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	6013      	str	r3, [r2, #0]
}
 8004430:	4770      	bx	lr
 8004432:	bf00      	nop
 8004434:	40030400 	.word	0x40030400

08004438 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop

0800443c <HAL_RCC_GetSysClockFreq.part.0>:
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800443c:	4b42      	ldr	r3, [pc, #264]	; (8004548 <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	f002 0218 	and.w	r2, r2, #24
 8004444:	2a18      	cmp	r2, #24
 8004446:	d001      	beq.n	800444c <HAL_RCC_GetSysClockFreq.part.0+0x10>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004448:	4840      	ldr	r0, [pc, #256]	; (800454c <HAL_RCC_GetSysClockFreq.part.0+0x110>)
  }

  return sysclockfreq;
}
 800444a:	4770      	bx	lr
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800444c:	6a99      	ldr	r1, [r3, #40]	; 0x28
uint32_t HAL_RCC_GetSysClockFreq(void)
 800444e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004450:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if (pllm != 0U)
 8004454:	f414 5f7c 	tst.w	r4, #16128	; 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004458:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800445a:	f3c4 2005 	ubfx	r0, r4, #8, #6
    if (pllm != 0U)
 800445e:	d039      	beq.n	80044d4 <HAL_RCC_GetSysClockFreq.part.0+0x98>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004460:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004464:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004468:	fb05 f202 	mul.w	r2, r5, r2
 800446c:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004470:	f001 0103 	and.w	r1, r1, #3
      switch (pllsource)
 8004474:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      switch (pllsource)
 800447a:	d03f      	beq.n	80044fc <HAL_RCC_GetSysClockFreq.part.0+0xc0>
 800447c:	2903      	cmp	r1, #3
 800447e:	d12b      	bne.n	80044d8 <HAL_RCC_GetSysClockFreq.part.0+0x9c>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004482:	ee05 0a90 	vmov	s11, r0
 8004486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800448a:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800448e:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004550 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 8004492:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800449a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800449e:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8004554 <HAL_RCC_GetSysClockFreq.part.0+0x118>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044aa:	eec5 6a25 	vdiv.f32	s13, s10, s11
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044ae:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80044b6:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 80044b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ba:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80044be:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80044c0:	ee07 3a10 	vmov	s14, r3
 80044c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80044cc:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80044d0:	ee17 0a90 	vmov	r0, s15
}
 80044d4:	bc30      	pop	{r4, r5}
 80044d6:	4770      	bx	lr
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044da:	ee05 0a90 	vmov	s11, r0
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80044e6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004550 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 80044ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80044f2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80044f6:	ed9f 5a18 	vldr	s10, [pc, #96]	; 8004558 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 80044fa:	e7d2      	b.n	80044a2 <HAL_RCC_GetSysClockFreq.part.0+0x66>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	0692      	lsls	r2, r2, #26
 8004500:	d5be      	bpl.n	8004480 <HAL_RCC_GetSysClockFreq.part.0+0x44>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004502:	6819      	ldr	r1, [r3, #0]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004506:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004550 <HAL_RCC_GetSysClockFreq.part.0+0x114>
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800450a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450e:	ee06 3a90 	vmov	s13, r3
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004512:	4a0e      	ldr	r2, [pc, #56]	; (800454c <HAL_RCC_GetSysClockFreq.part.0+0x110>)
 8004514:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8004518:	40da      	lsrs	r2, r3
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800451a:	ee05 0a90 	vmov	s11, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800451e:	ee67 7a87 	vmul.f32	s15, s15, s14
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004522:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004526:	ee06 2a10 	vmov	s12, r2
 800452a:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 800452e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004532:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800453a:	ee86 7a05 	vdiv.f32	s14, s12, s10
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800453e:	ee77 7aa5 	vadd.f32	s15, s15, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	e7b6      	b.n	80044b6 <HAL_RCC_GetSysClockFreq.part.0+0x7a>
 8004548:	44020c00 	.word	0x44020c00
 800454c:	017d7840 	.word	0x017d7840
 8004550:	39000000 	.word	0x39000000
 8004554:	4bbebc20 	.word	0x4bbebc20
 8004558:	4a742400 	.word	0x4a742400

0800455c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800455c:	4a0e      	ldr	r2, [pc, #56]	; (8004598 <HAL_RCC_GetSysClockFreq+0x3c>)
 800455e:	69d3      	ldr	r3, [r2, #28]
 8004560:	f003 0318 	and.w	r3, r3, #24
 8004564:	2b08      	cmp	r3, #8
 8004566:	d015      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0x38>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004568:	69d3      	ldr	r3, [r2, #28]
 800456a:	f013 0f18 	tst.w	r3, #24
 800456e:	d108      	bne.n	8004582 <HAL_RCC_GetSysClockFreq+0x26>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004570:	6813      	ldr	r3, [r2, #0]
 8004572:	069b      	lsls	r3, r3, #26
 8004574:	d50c      	bpl.n	8004590 <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	4808      	ldr	r0, [pc, #32]	; (800459c <HAL_RCC_GetSysClockFreq+0x40>)
 800457a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800457e:	40d8      	lsrs	r0, r3
 8004580:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004582:	69d3      	ldr	r3, [r2, #28]
 8004584:	f003 0318 	and.w	r3, r3, #24
 8004588:	2b10      	cmp	r3, #16
 800458a:	d001      	beq.n	8004590 <HAL_RCC_GetSysClockFreq+0x34>
 800458c:	f7ff bf56 	b.w	800443c <HAL_RCC_GetSysClockFreq.part.0>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8004592:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 8004594:	4802      	ldr	r0, [pc, #8]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x44>)
 8004596:	4770      	bx	lr
 8004598:	44020c00 	.word	0x44020c00
 800459c:	017d7840 	.word	0x017d7840
 80045a0:	003d0900 	.word	0x003d0900

080045a4 <HAL_RCC_ClockConfig>:
  if (pClkInitStruct == NULL)
 80045a4:	2800      	cmp	r0, #0
 80045a6:	f000 8115 	beq.w	80047d4 <HAL_RCC_ClockConfig+0x230>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045aa:	4a8e      	ldr	r2, [pc, #568]	; (80047e4 <HAL_RCC_ClockConfig+0x240>)
{
 80045ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045b0:	6813      	ldr	r3, [r2, #0]
 80045b2:	4604      	mov	r4, r0
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	428b      	cmp	r3, r1
 80045ba:	460d      	mov	r5, r1
 80045bc:	d20c      	bcs.n	80045d8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	f023 030f 	bic.w	r3, r3, #15
 80045c4:	430b      	orrs	r3, r1
 80045c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c8:	6813      	ldr	r3, [r2, #0]
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	428b      	cmp	r3, r1
 80045d0:	d002      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80045d2:	2001      	movs	r0, #1
}
 80045d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	06de      	lsls	r6, r3, #27
 80045dc:	d50d      	bpl.n	80045fa <HAL_RCC_ClockConfig+0x56>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80045de:	4982      	ldr	r1, [pc, #520]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 80045e0:	6960      	ldr	r0, [r4, #20]
 80045e2:	6a0a      	ldr	r2, [r1, #32]
 80045e4:	0a12      	lsrs	r2, r2, #8
 80045e6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80045ea:	4290      	cmp	r0, r2
 80045ec:	d905      	bls.n	80045fa <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80045ee:	6a0a      	ldr	r2, [r1, #32]
 80045f0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80045f4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80045f8:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045fa:	0718      	lsls	r0, r3, #28
 80045fc:	d50d      	bpl.n	800461a <HAL_RCC_ClockConfig+0x76>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80045fe:	497a      	ldr	r1, [pc, #488]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 8004600:	6920      	ldr	r0, [r4, #16]
 8004602:	6a0a      	ldr	r2, [r1, #32]
 8004604:	0912      	lsrs	r2, r2, #4
 8004606:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800460a:	4290      	cmp	r0, r2
 800460c:	d905      	bls.n	800461a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800460e:	6a0a      	ldr	r2, [r1, #32]
 8004610:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004614:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8004618:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461a:	0759      	lsls	r1, r3, #29
 800461c:	d50b      	bpl.n	8004636 <HAL_RCC_ClockConfig+0x92>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800461e:	4972      	ldr	r1, [pc, #456]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 8004620:	68e0      	ldr	r0, [r4, #12]
 8004622:	6a0a      	ldr	r2, [r1, #32]
 8004624:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004628:	4290      	cmp	r0, r2
 800462a:	d904      	bls.n	8004636 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800462c:	6a0a      	ldr	r2, [r1, #32]
 800462e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004632:	4302      	orrs	r2, r0
 8004634:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004636:	079a      	lsls	r2, r3, #30
 8004638:	f140 8095 	bpl.w	8004766 <HAL_RCC_ClockConfig+0x1c2>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800463c:	486a      	ldr	r0, [pc, #424]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 800463e:	68a1      	ldr	r1, [r4, #8]
 8004640:	6a02      	ldr	r2, [r0, #32]
 8004642:	f002 020f 	and.w	r2, r2, #15
 8004646:	4291      	cmp	r1, r2
 8004648:	d904      	bls.n	8004654 <HAL_RCC_ClockConfig+0xb0>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800464a:	6a02      	ldr	r2, [r0, #32]
 800464c:	f022 020f 	bic.w	r2, r2, #15
 8004650:	430a      	orrs	r2, r1
 8004652:	6202      	str	r2, [r0, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004654:	07d8      	lsls	r0, r3, #31
 8004656:	d52f      	bpl.n	80046b8 <HAL_RCC_ClockConfig+0x114>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004658:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800465a:	4b63      	ldr	r3, [pc, #396]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800465c:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800465e:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004660:	f000 8089 	beq.w	8004776 <HAL_RCC_ClockConfig+0x1d2>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004664:	2a02      	cmp	r2, #2
 8004666:	f000 80b1 	beq.w	80047cc <HAL_RCC_ClockConfig+0x228>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800466a:	2a01      	cmp	r2, #1
 800466c:	f000 80b6 	beq.w	80047dc <HAL_RCC_ClockConfig+0x238>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004670:	0799      	lsls	r1, r3, #30
 8004672:	d5ae      	bpl.n	80045d2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8004674:	4e5c      	ldr	r6, [pc, #368]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004676:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800467a:	69f3      	ldr	r3, [r6, #28]
 800467c:	f023 0303 	bic.w	r3, r3, #3
 8004680:	4313      	orrs	r3, r2
 8004682:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8004684:	f7ff f918 	bl	80038b8 <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004688:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800468a:	4607      	mov	r7, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800468c:	2b03      	cmp	r3, #3
 800468e:	d07b      	beq.n	8004788 <HAL_RCC_ClockConfig+0x1e4>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004690:	2b02      	cmp	r3, #2
 8004692:	f000 8084 	beq.w	800479e <HAL_RCC_ClockConfig+0x1fa>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004696:	2b01      	cmp	r3, #1
 8004698:	d106      	bne.n	80046a8 <HAL_RCC_ClockConfig+0x104>
 800469a:	e08b      	b.n	80047b4 <HAL_RCC_ClockConfig+0x210>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800469c:	f7ff f90c 	bl	80038b8 <HAL_GetTick>
 80046a0:	1bc0      	subs	r0, r0, r7
 80046a2:	4540      	cmp	r0, r8
 80046a4:	f200 8098 	bhi.w	80047d8 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80046a8:	69f3      	ldr	r3, [r6, #28]
 80046aa:	f013 0f18 	tst.w	r3, #24
 80046ae:	d1f5      	bne.n	800469c <HAL_RCC_ClockConfig+0xf8>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b0:	6823      	ldr	r3, [r4, #0]
 80046b2:	079a      	lsls	r2, r3, #30
 80046b4:	d506      	bpl.n	80046c4 <HAL_RCC_ClockConfig+0x120>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80046b6:	68a1      	ldr	r1, [r4, #8]
 80046b8:	484b      	ldr	r0, [pc, #300]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 80046ba:	6a02      	ldr	r2, [r0, #32]
 80046bc:	f002 020f 	and.w	r2, r2, #15
 80046c0:	428a      	cmp	r2, r1
 80046c2:	d87d      	bhi.n	80047c0 <HAL_RCC_ClockConfig+0x21c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046c4:	4947      	ldr	r1, [pc, #284]	; (80047e4 <HAL_RCC_ClockConfig+0x240>)
 80046c6:	680a      	ldr	r2, [r1, #0]
 80046c8:	f002 020f 	and.w	r2, r2, #15
 80046cc:	42aa      	cmp	r2, r5
 80046ce:	d90a      	bls.n	80046e6 <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d0:	680a      	ldr	r2, [r1, #0]
 80046d2:	f022 020f 	bic.w	r2, r2, #15
 80046d6:	432a      	orrs	r2, r5
 80046d8:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	680a      	ldr	r2, [r1, #0]
 80046dc:	f002 020f 	and.w	r2, r2, #15
 80046e0:	42aa      	cmp	r2, r5
 80046e2:	f47f af76 	bne.w	80045d2 <HAL_RCC_ClockConfig+0x2e>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046e6:	075f      	lsls	r7, r3, #29
 80046e8:	d50b      	bpl.n	8004702 <HAL_RCC_ClockConfig+0x15e>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80046ea:	493f      	ldr	r1, [pc, #252]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 80046ec:	68e0      	ldr	r0, [r4, #12]
 80046ee:	6a0a      	ldr	r2, [r1, #32]
 80046f0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80046f4:	4290      	cmp	r0, r2
 80046f6:	d204      	bcs.n	8004702 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80046f8:	6a0a      	ldr	r2, [r1, #32]
 80046fa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80046fe:	4302      	orrs	r2, r0
 8004700:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004702:	071e      	lsls	r6, r3, #28
 8004704:	d50d      	bpl.n	8004722 <HAL_RCC_ClockConfig+0x17e>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004706:	4938      	ldr	r1, [pc, #224]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 8004708:	6920      	ldr	r0, [r4, #16]
 800470a:	6a0a      	ldr	r2, [r1, #32]
 800470c:	0912      	lsrs	r2, r2, #4
 800470e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004712:	4290      	cmp	r0, r2
 8004714:	d205      	bcs.n	8004722 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004716:	6a0a      	ldr	r2, [r1, #32]
 8004718:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800471c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8004720:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004722:	06dd      	lsls	r5, r3, #27
 8004724:	d50d      	bpl.n	8004742 <HAL_RCC_ClockConfig+0x19e>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004726:	4a30      	ldr	r2, [pc, #192]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 8004728:	6961      	ldr	r1, [r4, #20]
 800472a:	6a13      	ldr	r3, [r2, #32]
 800472c:	0a1b      	lsrs	r3, r3, #8
 800472e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004732:	4299      	cmp	r1, r3
 8004734:	d205      	bcs.n	8004742 <HAL_RCC_ClockConfig+0x19e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004736:	6a13      	ldr	r3, [r2, #32]
 8004738:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004740:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004742:	f7ff ff0b 	bl	800455c <HAL_RCC_GetSysClockFreq>
}
 8004746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800474a:	4603      	mov	r3, r0
 800474c:	4a26      	ldr	r2, [pc, #152]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
 800474e:	4927      	ldr	r1, [pc, #156]	; (80047ec <HAL_RCC_ClockConfig+0x248>)
 8004750:	6a12      	ldr	r2, [r2, #32]
  halstatus = HAL_InitTick(uwTickPrio);
 8004752:	4827      	ldr	r0, [pc, #156]	; (80047f0 <HAL_RCC_ClockConfig+0x24c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004754:	f002 020f 	and.w	r2, r2, #15
 8004758:	5c89      	ldrb	r1, [r1, r2]
 800475a:	4a26      	ldr	r2, [pc, #152]	; (80047f4 <HAL_RCC_ClockConfig+0x250>)
 800475c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800475e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004760:	6013      	str	r3, [r2, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8004762:	f7ff b827 	b.w	80037b4 <HAL_InitTick>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	07da      	lsls	r2, r3, #31
 8004768:	d5ac      	bpl.n	80046c4 <HAL_RCC_ClockConfig+0x120>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476a:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800476c:	4b1e      	ldr	r3, [pc, #120]	; (80047e8 <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800476e:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004770:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004772:	f47f af77 	bne.w	8004664 <HAL_RCC_ClockConfig+0xc0>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004776:	019f      	lsls	r7, r3, #6
 8004778:	f53f af7c 	bmi.w	8004674 <HAL_RCC_ClockConfig+0xd0>
 800477c:	e729      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800477e:	f7ff f89b 	bl	80038b8 <HAL_GetTick>
 8004782:	1bc3      	subs	r3, r0, r7
 8004784:	4543      	cmp	r3, r8
 8004786:	d827      	bhi.n	80047d8 <HAL_RCC_ClockConfig+0x234>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004788:	69f3      	ldr	r3, [r6, #28]
 800478a:	f003 0318 	and.w	r3, r3, #24
 800478e:	2b18      	cmp	r3, #24
 8004790:	d1f5      	bne.n	800477e <HAL_RCC_ClockConfig+0x1da>
 8004792:	e78d      	b.n	80046b0 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8004794:	f7ff f890 	bl	80038b8 <HAL_GetTick>
 8004798:	1bc0      	subs	r0, r0, r7
 800479a:	4540      	cmp	r0, r8
 800479c:	d81c      	bhi.n	80047d8 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800479e:	69f3      	ldr	r3, [r6, #28]
 80047a0:	f003 0318 	and.w	r3, r3, #24
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d1f5      	bne.n	8004794 <HAL_RCC_ClockConfig+0x1f0>
 80047a8:	e782      	b.n	80046b0 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80047aa:	f7ff f885 	bl	80038b8 <HAL_GetTick>
 80047ae:	1bc0      	subs	r0, r0, r7
 80047b0:	4540      	cmp	r0, r8
 80047b2:	d811      	bhi.n	80047d8 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80047b4:	69f3      	ldr	r3, [r6, #28]
 80047b6:	f003 0318 	and.w	r3, r3, #24
 80047ba:	2b08      	cmp	r3, #8
 80047bc:	d1f5      	bne.n	80047aa <HAL_RCC_ClockConfig+0x206>
 80047be:	e777      	b.n	80046b0 <HAL_RCC_ClockConfig+0x10c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80047c0:	6a02      	ldr	r2, [r0, #32]
 80047c2:	f022 020f 	bic.w	r2, r2, #15
 80047c6:	4311      	orrs	r1, r2
 80047c8:	6201      	str	r1, [r0, #32]
 80047ca:	e77b      	b.n	80046c4 <HAL_RCC_ClockConfig+0x120>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047cc:	039e      	lsls	r6, r3, #14
 80047ce:	f53f af51 	bmi.w	8004674 <HAL_RCC_ClockConfig+0xd0>
 80047d2:	e6fe      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80047d4:	2001      	movs	r0, #1
}
 80047d6:	4770      	bx	lr
          return HAL_TIMEOUT;
 80047d8:	2003      	movs	r0, #3
 80047da:	e6fb      	b.n	80045d4 <HAL_RCC_ClockConfig+0x30>
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80047dc:	0598      	lsls	r0, r3, #22
 80047de:	f53f af49 	bmi.w	8004674 <HAL_RCC_ClockConfig+0xd0>
 80047e2:	e6f6      	b.n	80045d2 <HAL_RCC_ClockConfig+0x2e>
 80047e4:	40022000 	.word	0x40022000
 80047e8:	44020c00 	.word	0x44020c00
 80047ec:	08019e48 	.word	0x08019e48
 80047f0:	20000004 	.word	0x20000004
 80047f4:	20000008 	.word	0x20000008

080047f8 <HAL_RCC_GetHCLKFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80047f8:	4a15      	ldr	r2, [pc, #84]	; (8004850 <HAL_RCC_GetHCLKFreq+0x58>)
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047fa:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80047fc:	69d3      	ldr	r3, [r2, #28]
 80047fe:	f003 0318 	and.w	r3, r3, #24
 8004802:	2b08      	cmp	r3, #8
 8004804:	d021      	beq.n	800484a <HAL_RCC_GetHCLKFreq+0x52>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004806:	69d3      	ldr	r3, [r2, #28]
 8004808:	f013 0f18 	tst.w	r3, #24
 800480c:	d012      	beq.n	8004834 <HAL_RCC_GetHCLKFreq+0x3c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800480e:	69d3      	ldr	r3, [r2, #28]
 8004810:	f003 0318 	and.w	r3, r3, #24
 8004814:	2b10      	cmp	r3, #16
 8004816:	d016      	beq.n	8004846 <HAL_RCC_GetHCLKFreq+0x4e>
 8004818:	f7ff fe10 	bl	800443c <HAL_RCC_GetSysClockFreq.part.0>

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800481c:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <HAL_RCC_GetHCLKFreq+0x58>)
 800481e:	490d      	ldr	r1, [pc, #52]	; (8004854 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004820:	6a1b      	ldr	r3, [r3, #32]
 8004822:	4a0d      	ldr	r2, [pc, #52]	; (8004858 <HAL_RCC_GetHCLKFreq+0x60>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	5ccb      	ldrb	r3, [r1, r3]
 800482a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800482e:	40d8      	lsrs	r0, r3
 8004830:	6010      	str	r0, [r2, #0]

  return SystemCoreClock;
}
 8004832:	bd08      	pop	{r3, pc}
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004834:	6813      	ldr	r3, [r2, #0]
 8004836:	069b      	lsls	r3, r3, #26
 8004838:	d505      	bpl.n	8004846 <HAL_RCC_GetHCLKFreq+0x4e>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800483a:	6813      	ldr	r3, [r2, #0]
 800483c:	4807      	ldr	r0, [pc, #28]	; (800485c <HAL_RCC_GetHCLKFreq+0x64>)
 800483e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004842:	40d8      	lsrs	r0, r3
 8004844:	e7ea      	b.n	800481c <HAL_RCC_GetHCLKFreq+0x24>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004846:	4805      	ldr	r0, [pc, #20]	; (800485c <HAL_RCC_GetHCLKFreq+0x64>)
 8004848:	e7e8      	b.n	800481c <HAL_RCC_GetHCLKFreq+0x24>
    sysclockfreq = CSI_VALUE;
 800484a:	4805      	ldr	r0, [pc, #20]	; (8004860 <HAL_RCC_GetHCLKFreq+0x68>)
 800484c:	e7e6      	b.n	800481c <HAL_RCC_GetHCLKFreq+0x24>
 800484e:	bf00      	nop
 8004850:	44020c00 	.word	0x44020c00
 8004854:	08019e48 	.word	0x08019e48
 8004858:	20000008 	.word	0x20000008
 800485c:	017d7840 	.word	0x017d7840
 8004860:	003d0900 	.word	0x003d0900

08004864 <HAL_RCC_OscConfig>:
  if (pOscInitStruct == NULL)
 8004864:	2800      	cmp	r0, #0
 8004866:	f000 8258 	beq.w	8004d1a <HAL_RCC_OscConfig+0x4b6>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486a:	4aaa      	ldr	r2, [pc, #680]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800486c:	6803      	ldr	r3, [r0, #0]
{
 800486e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004872:	69d5      	ldr	r5, [r2, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8004874:	6a96      	ldr	r6, [r2, #40]	; 0x28
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004876:	06df      	lsls	r7, r3, #27
 8004878:	4604      	mov	r4, r0
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487a:	f005 0518 	and.w	r5, r5, #24
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800487e:	f006 0603 	and.w	r6, r6, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004882:	d524      	bpl.n	80048ce <HAL_RCC_OscConfig+0x6a>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8004884:	2d08      	cmp	r5, #8
 8004886:	f000 8157 	beq.w	8004b38 <HAL_RCC_OscConfig+0x2d4>
 800488a:	2d18      	cmp	r5, #24
 800488c:	f000 8151 	beq.w	8004b32 <HAL_RCC_OscConfig+0x2ce>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004890:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8004892:	4fa0      	ldr	r7, [pc, #640]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8134 	beq.w	8004b02 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a0:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80048a2:	f7ff f809 	bl	80038b8 <HAL_GetTick>
 80048a6:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80048a8:	e006      	b.n	80048b8 <HAL_RCC_OscConfig+0x54>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80048aa:	f7ff f805 	bl	80038b8 <HAL_GetTick>
 80048ae:	eba0 0008 	sub.w	r0, r0, r8
 80048b2:	2802      	cmp	r0, #2
 80048b4:	f200 818b 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	0598      	lsls	r0, r3, #22
 80048bc:	d5f5      	bpl.n	80048aa <HAL_RCC_OscConfig+0x46>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	6a22      	ldr	r2, [r4, #32]
 80048c2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80048c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048ca:	61bb      	str	r3, [r7, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048cc:	6823      	ldr	r3, [r4, #0]
 80048ce:	07da      	lsls	r2, r3, #31
 80048d0:	d538      	bpl.n	8004944 <HAL_RCC_OscConfig+0xe0>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80048d2:	2d10      	cmp	r5, #16
 80048d4:	f000 8141 	beq.w	8004b5a <HAL_RCC_OscConfig+0x2f6>
 80048d8:	2d18      	cmp	r5, #24
 80048da:	f000 813b 	beq.w	8004b54 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80048de:	6863      	ldr	r3, [r4, #4]
 80048e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e4:	d018      	beq.n	8004918 <HAL_RCC_OscConfig+0xb4>
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 8174 	beq.w	8004bd4 <HAL_RCC_OscConfig+0x370>
 80048ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f0:	f000 8284 	beq.w	8004dfc <HAL_RCC_OscConfig+0x598>
 80048f4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80048f8:	4b86      	ldr	r3, [pc, #536]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	f000 829c 	beq.w	8004e38 <HAL_RCC_OscConfig+0x5d4>
 8004900:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	e004      	b.n	8004922 <HAL_RCC_OscConfig+0xbe>
 8004918:	4a7e      	ldr	r2, [pc, #504]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 800491a:	6813      	ldr	r3, [r2, #0]
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004922:	f7fe ffc9 	bl	80038b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004926:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8004b14 <HAL_RCC_OscConfig+0x2b0>
        tickstart = HAL_GetTick();
 800492a:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800492c:	e005      	b.n	800493a <HAL_RCC_OscConfig+0xd6>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800492e:	f7fe ffc3 	bl	80038b8 <HAL_GetTick>
 8004932:	1bc0      	subs	r0, r0, r7
 8004934:	2864      	cmp	r0, #100	; 0x64
 8004936:	f200 814a 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800493a:	f8d8 3000 	ldr.w	r3, [r8]
 800493e:	039b      	lsls	r3, r3, #14
 8004940:	d5f5      	bpl.n	800492e <HAL_RCC_OscConfig+0xca>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004942:	6823      	ldr	r3, [r4, #0]
 8004944:	0799      	lsls	r1, r3, #30
 8004946:	d529      	bpl.n	800499c <HAL_RCC_OscConfig+0x138>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004948:	2d00      	cmp	r5, #0
 800494a:	f000 80b9 	beq.w	8004ac0 <HAL_RCC_OscConfig+0x25c>
 800494e:	2d18      	cmp	r5, #24
 8004950:	f000 8262 	beq.w	8004e18 <HAL_RCC_OscConfig+0x5b4>
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004954:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004956:	4e6f      	ldr	r6, [pc, #444]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 81cb 	beq.w	8004cf4 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800495e:	6833      	ldr	r3, [r6, #0]
 8004960:	6922      	ldr	r2, [r4, #16]
 8004962:	f023 0318 	bic.w	r3, r3, #24
 8004966:	4313      	orrs	r3, r2
 8004968:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 800496a:	6833      	ldr	r3, [r6, #0]
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004972:	f7fe ffa1 	bl	80038b8 <HAL_GetTick>
 8004976:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004978:	e005      	b.n	8004986 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800497a:	f7fe ff9d 	bl	80038b8 <HAL_GetTick>
 800497e:	1bc0      	subs	r0, r0, r7
 8004980:	2802      	cmp	r0, #2
 8004982:	f200 8124 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004986:	6833      	ldr	r3, [r6, #0]
 8004988:	079b      	lsls	r3, r3, #30
 800498a:	d5f6      	bpl.n	800497a <HAL_RCC_OscConfig+0x116>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 800498c:	6933      	ldr	r3, [r6, #16]
 800498e:	6962      	ldr	r2, [r4, #20]
 8004990:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004998:	6133      	str	r3, [r6, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0719      	lsls	r1, r3, #28
 800499e:	d519      	bpl.n	80049d4 <HAL_RCC_OscConfig+0x170>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80049a0:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_LSI_ENABLE();
 80049a2:	4e5c      	ldr	r6, [pc, #368]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f000 8130 	beq.w	8004c0a <HAL_RCC_OscConfig+0x3a6>
      __HAL_RCC_LSI_ENABLE();
 80049aa:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80049ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049b2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 80049b6:	f7fe ff7f 	bl	80038b8 <HAL_GetTick>
 80049ba:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80049bc:	e005      	b.n	80049ca <HAL_RCC_OscConfig+0x166>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80049be:	f7fe ff7b 	bl	80038b8 <HAL_GetTick>
 80049c2:	1bc0      	subs	r0, r0, r7
 80049c4:	2802      	cmp	r0, #2
 80049c6:	f200 8102 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80049ca:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80049ce:	011a      	lsls	r2, r3, #4
 80049d0:	d5f5      	bpl.n	80049be <HAL_RCC_OscConfig+0x15a>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	075e      	lsls	r6, r3, #29
 80049d6:	d536      	bpl.n	8004a46 <HAL_RCC_OscConfig+0x1e2>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80049d8:	4e4f      	ldr	r6, [pc, #316]	; (8004b18 <HAL_RCC_OscConfig+0x2b4>)
 80049da:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80049dc:	07d8      	lsls	r0, r3, #31
 80049de:	f140 80e6 	bpl.w	8004bae <HAL_RCC_OscConfig+0x34a>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80049e2:	68a3      	ldr	r3, [r4, #8]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	f000 821f 	beq.w	8004e28 <HAL_RCC_OscConfig+0x5c4>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80bc 	beq.w	8004b68 <HAL_RCC_OscConfig+0x304>
 80049f0:	2b05      	cmp	r3, #5
 80049f2:	f000 822d 	beq.w	8004e50 <HAL_RCC_OscConfig+0x5ec>
 80049f6:	2b85      	cmp	r3, #133	; 0x85
 80049f8:	4b46      	ldr	r3, [pc, #280]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 80049fa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80049fe:	f000 823b 	beq.w	8004e78 <HAL_RCC_OscConfig+0x614>
 8004a02:	f022 0201 	bic.w	r2, r2, #1
 8004a06:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004a0a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004a0e:	f022 0204 	bic.w	r2, r2, #4
 8004a12:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004a16:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004a1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a1e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8004a22:	f7fe ff49 	bl	80038b8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a26:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004a2a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a2c:	4f39      	ldr	r7, [pc, #228]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 8004a2e:	e005      	b.n	8004a3c <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a30:	f7fe ff42 	bl	80038b8 <HAL_GetTick>
 8004a34:	1b80      	subs	r0, r0, r6
 8004a36:	4540      	cmp	r0, r8
 8004a38:	f200 80c9 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004a40:	079a      	lsls	r2, r3, #30
 8004a42:	d5f5      	bpl.n	8004a30 <HAL_RCC_OscConfig+0x1cc>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a44:	6823      	ldr	r3, [r4, #0]
 8004a46:	069e      	lsls	r6, r3, #26
 8004a48:	d515      	bpl.n	8004a76 <HAL_RCC_OscConfig+0x212>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8004a4c:	4e31      	ldr	r6, [pc, #196]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 8165 	beq.w	8004d1e <HAL_RCC_OscConfig+0x4ba>
      __HAL_RCC_HSI48_ENABLE();
 8004a54:	6833      	ldr	r3, [r6, #0]
 8004a56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a5a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004a5c:	f7fe ff2c 	bl	80038b8 <HAL_GetTick>
 8004a60:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a62:	e005      	b.n	8004a70 <HAL_RCC_OscConfig+0x20c>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004a64:	f7fe ff28 	bl	80038b8 <HAL_GetTick>
 8004a68:	1bc0      	subs	r0, r0, r7
 8004a6a:	2802      	cmp	r0, #2
 8004a6c:	f200 80af 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a70:	6833      	ldr	r3, [r6, #0]
 8004a72:	0498      	lsls	r0, r3, #18
 8004a74:	d5f6      	bpl.n	8004a64 <HAL_RCC_OscConfig+0x200>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	f000 8139 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x48c>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a7e:	2d18      	cmp	r5, #24
 8004a80:	f000 816e 	beq.w	8004d60 <HAL_RCC_OscConfig+0x4fc>
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	f000 80d4 	beq.w	8004c32 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_PLL1_DISABLE();
 8004a8a:	4c22      	ldr	r4, [pc, #136]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a92:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004a94:	f7fe ff10 	bl	80038b8 <HAL_GetTick>
 8004a98:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a9a:	e005      	b.n	8004aa8 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004a9c:	f7fe ff0c 	bl	80038b8 <HAL_GetTick>
 8004aa0:	1b40      	subs	r0, r0, r5
 8004aa2:	2802      	cmp	r0, #2
 8004aa4:	f200 8093 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004aa8:	6823      	ldr	r3, [r4, #0]
 8004aaa:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8004aae:	d1f5      	bne.n	8004a9c <HAL_RCC_OscConfig+0x238>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004ab0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  return HAL_OK;
 8004ab2:	4618      	mov	r0, r3
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004ab4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8004ab8:	f022 0203 	bic.w	r2, r2, #3
 8004abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8004abe:	e051      	b.n	8004b64 <HAL_RCC_OscConfig+0x300>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004ac0:	68e3      	ldr	r3, [r4, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d04d      	beq.n	8004b62 <HAL_RCC_OscConfig+0x2fe>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8004ac6:	4a13      	ldr	r2, [pc, #76]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
 8004ac8:	6921      	ldr	r1, [r4, #16]
 8004aca:	6813      	ldr	r3, [r2, #0]
 8004acc:	f003 0318 	and.w	r3, r3, #24
 8004ad0:	428b      	cmp	r3, r1
 8004ad2:	f040 8136 	bne.w	8004d42 <HAL_RCC_OscConfig+0x4de>
        tickstart = HAL_GetTick();
 8004ad6:	f7fe feef 	bl	80038b8 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ada:	4f0e      	ldr	r7, [pc, #56]	; (8004b14 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004adc:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ade:	e004      	b.n	8004aea <HAL_RCC_OscConfig+0x286>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004ae0:	f7fe feea 	bl	80038b8 <HAL_GetTick>
 8004ae4:	1b80      	subs	r0, r0, r6
 8004ae6:	2802      	cmp	r0, #2
 8004ae8:	d871      	bhi.n	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	079a      	lsls	r2, r3, #30
 8004aee:	d5f7      	bpl.n	8004ae0 <HAL_RCC_OscConfig+0x27c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	6962      	ldr	r2, [r4, #20]
 8004af4:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004af8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004afc:	613b      	str	r3, [r7, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004afe:	6823      	ldr	r3, [r4, #0]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004b00:	e74c      	b.n	800499c <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_CSI_DISABLE();
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b08:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004b0a:	f7fe fed5 	bl	80038b8 <HAL_GetTick>
 8004b0e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004b10:	e00a      	b.n	8004b28 <HAL_RCC_OscConfig+0x2c4>
 8004b12:	bf00      	nop
 8004b14:	44020c00 	.word	0x44020c00
 8004b18:	44020800 	.word	0x44020800
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8004b1c:	f7fe fecc 	bl	80038b8 <HAL_GetTick>
 8004b20:	eba0 0008 	sub.w	r0, r0, r8
 8004b24:	2802      	cmp	r0, #2
 8004b26:	d852      	bhi.n	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	0599      	lsls	r1, r3, #22
 8004b2c:	d4f6      	bmi.n	8004b1c <HAL_RCC_OscConfig+0x2b8>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b2e:	6823      	ldr	r3, [r4, #0]
 8004b30:	e6cd      	b.n	80048ce <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8004b32:	2e02      	cmp	r6, #2
 8004b34:	f47f aeac 	bne.w	8004890 <HAL_RCC_OscConfig+0x2c>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8004b38:	69e2      	ldr	r2, [r4, #28]
 8004b3a:	b192      	cbz	r2, 8004b62 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8004b3c:	49ad      	ldr	r1, [pc, #692]	; (8004df4 <HAL_RCC_OscConfig+0x590>)
 8004b3e:	6a20      	ldr	r0, [r4, #32]
 8004b40:	698a      	ldr	r2, [r1, #24]
 8004b42:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8004b46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8004b4a:	618a      	str	r2, [r1, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b4c:	07da      	lsls	r2, r3, #31
 8004b4e:	f57f aef9 	bpl.w	8004944 <HAL_RCC_OscConfig+0xe0>
 8004b52:	e6be      	b.n	80048d2 <HAL_RCC_OscConfig+0x6e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8004b54:	2e03      	cmp	r6, #3
 8004b56:	f47f aec2 	bne.w	80048de <HAL_RCC_OscConfig+0x7a>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8004b5a:	6862      	ldr	r2, [r4, #4]
 8004b5c:	2a00      	cmp	r2, #0
 8004b5e:	f47f aef1 	bne.w	8004944 <HAL_RCC_OscConfig+0xe0>
        return HAL_ERROR;
 8004b62:	2001      	movs	r0, #1
}
 8004b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004b68:	4ea2      	ldr	r6, [pc, #648]	; (8004df4 <HAL_RCC_OscConfig+0x590>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004b6e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8004b7a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8004b7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b82:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8004b86:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8004b8a:	f023 0304 	bic.w	r3, r3, #4
 8004b8e:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8004b92:	f7fe fe91 	bl	80038b8 <HAL_GetTick>
 8004b96:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b98:	e004      	b.n	8004ba4 <HAL_RCC_OscConfig+0x340>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9a:	f7fe fe8d 	bl	80038b8 <HAL_GetTick>
 8004b9e:	1bc0      	subs	r0, r0, r7
 8004ba0:	4540      	cmp	r0, r8
 8004ba2:	d814      	bhi.n	8004bce <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba4:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8004ba8:	079b      	lsls	r3, r3, #30
 8004baa:	d4f6      	bmi.n	8004b9a <HAL_RCC_OscConfig+0x336>
 8004bac:	e74a      	b.n	8004a44 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8004bae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6273      	str	r3, [r6, #36]	; 0x24
      tickstart = HAL_GetTick();
 8004bb6:	f7fe fe7f 	bl	80038b8 <HAL_GetTick>
 8004bba:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8004bbc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004bbe:	07d9      	lsls	r1, r3, #31
 8004bc0:	f53f af0f 	bmi.w	80049e2 <HAL_RCC_OscConfig+0x17e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc4:	f7fe fe78 	bl	80038b8 <HAL_GetTick>
 8004bc8:	1bc0      	subs	r0, r0, r7
 8004bca:	2802      	cmp	r0, #2
 8004bcc:	d9f6      	bls.n	8004bbc <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8004bce:	2003      	movs	r0, #3
}
 8004bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004bd4:	4f87      	ldr	r7, [pc, #540]	; (8004df4 <HAL_RCC_OscConfig+0x590>)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bdc:	603b      	str	r3, [r7, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004be4:	603b      	str	r3, [r7, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bec:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8004bee:	f7fe fe63 	bl	80038b8 <HAL_GetTick>
 8004bf2:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bf4:	e005      	b.n	8004c02 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8004bf6:	f7fe fe5f 	bl	80038b8 <HAL_GetTick>
 8004bfa:	eba0 0008 	sub.w	r0, r0, r8
 8004bfe:	2864      	cmp	r0, #100	; 0x64
 8004c00:	d8e5      	bhi.n	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	0398      	lsls	r0, r3, #14
 8004c06:	d4f6      	bmi.n	8004bf6 <HAL_RCC_OscConfig+0x392>
 8004c08:	e69b      	b.n	8004942 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_LSI_DISABLE();
 8004c0a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8004c0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c12:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8004c16:	f7fe fe4f 	bl	80038b8 <HAL_GetTick>
 8004c1a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004c1c:	e004      	b.n	8004c28 <HAL_RCC_OscConfig+0x3c4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8004c1e:	f7fe fe4b 	bl	80038b8 <HAL_GetTick>
 8004c22:	1bc0      	subs	r0, r0, r7
 8004c24:	2802      	cmp	r0, #2
 8004c26:	d8d2      	bhi.n	8004bce <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004c28:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	d4f6      	bmi.n	8004c1e <HAL_RCC_OscConfig+0x3ba>
 8004c30:	e6cf      	b.n	80049d2 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL1_DISABLE();
 8004c32:	4d70      	ldr	r5, [pc, #448]	; (8004df4 <HAL_RCC_OscConfig+0x590>)
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c3a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004c3c:	f7fe fe3c 	bl	80038b8 <HAL_GetTick>
 8004c40:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c42:	e004      	b.n	8004c4e <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004c44:	f7fe fe38 	bl	80038b8 <HAL_GetTick>
 8004c48:	1b80      	subs	r0, r0, r6
 8004c4a:	2802      	cmp	r0, #2
 8004c4c:	d8bf      	bhi.n	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c4e:	682b      	ldr	r3, [r5, #0]
 8004c50:	019a      	lsls	r2, r3, #6
 8004c52:	d4f7      	bmi.n	8004c44 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004c54:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004c56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004c58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	430b      	orrs	r3, r1
 8004c64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004c68:	62ab      	str	r3, [r5, #40]	; 0x28
 8004c6a:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
 8004c6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c70:	3b01      	subs	r3, #1
 8004c72:	3a01      	subs	r2, #1
 8004c74:	025b      	lsls	r3, r3, #9
 8004c76:	0412      	lsls	r2, r2, #16
 8004c78:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004c7c:	3901      	subs	r1, #1
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8004c86:	4313      	orrs	r3, r2
 8004c88:	6c22      	ldr	r2, [r4, #64]	; 0x40
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004c8a:	4e5a      	ldr	r6, [pc, #360]	; (8004df4 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8004c8c:	3a01      	subs	r2, #1
 8004c8e:	0612      	lsls	r2, r2, #24
 8004c90:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004c94:	4313      	orrs	r3, r2
 8004c96:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004c98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004c9a:	f023 0310 	bic.w	r3, r3, #16
 8004c9e:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004ca0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	63ab      	str	r3, [r5, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004ca6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004ca8:	f043 0310 	orr.w	r3, r3, #16
 8004cac:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8004cae:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004cb0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004cb2:	f023 030c 	bic.w	r3, r3, #12
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8004cba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004cbc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8004cbe:	f023 0320 	bic.w	r3, r3, #32
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cc6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ccc:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_ENABLE();
 8004cce:	682b      	ldr	r3, [r5, #0]
 8004cd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004cd6:	f7fe fdef 	bl	80038b8 <HAL_GetTick>
 8004cda:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004cdc:	e005      	b.n	8004cea <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8004cde:	f7fe fdeb 	bl	80038b8 <HAL_GetTick>
 8004ce2:	1b00      	subs	r0, r0, r4
 8004ce4:	2802      	cmp	r0, #2
 8004ce6:	f63f af72 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004cea:	6833      	ldr	r3, [r6, #0]
 8004cec:	019b      	lsls	r3, r3, #6
 8004cee:	d5f6      	bpl.n	8004cde <HAL_RCC_OscConfig+0x47a>
  return HAL_OK;
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	e737      	b.n	8004b64 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_DISABLE();
 8004cf4:	6833      	ldr	r3, [r6, #0]
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8004cfc:	f7fe fddc 	bl	80038b8 <HAL_GetTick>
 8004d00:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d02:	e005      	b.n	8004d10 <HAL_RCC_OscConfig+0x4ac>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8004d04:	f7fe fdd8 	bl	80038b8 <HAL_GetTick>
 8004d08:	1bc0      	subs	r0, r0, r7
 8004d0a:	2802      	cmp	r0, #2
 8004d0c:	f63f af5f 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d10:	6833      	ldr	r3, [r6, #0]
 8004d12:	0798      	lsls	r0, r3, #30
 8004d14:	d4f6      	bmi.n	8004d04 <HAL_RCC_OscConfig+0x4a0>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	e640      	b.n	800499c <HAL_RCC_OscConfig+0x138>
    return HAL_ERROR;
 8004d1a:	2001      	movs	r0, #1
}
 8004d1c:	4770      	bx	lr
      __HAL_RCC_HSI48_DISABLE();
 8004d1e:	6833      	ldr	r3, [r6, #0]
 8004d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d24:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004d26:	f7fe fdc7 	bl	80038b8 <HAL_GetTick>
 8004d2a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d2c:	e005      	b.n	8004d3a <HAL_RCC_OscConfig+0x4d6>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8004d2e:	f7fe fdc3 	bl	80038b8 <HAL_GetTick>
 8004d32:	1bc0      	subs	r0, r0, r7
 8004d34:	2802      	cmp	r0, #2
 8004d36:	f63f af4a 	bhi.w	8004bce <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d3a:	6833      	ldr	r3, [r6, #0]
 8004d3c:	0499      	lsls	r1, r3, #18
 8004d3e:	d4f6      	bmi.n	8004d2e <HAL_RCC_OscConfig+0x4ca>
 8004d40:	e699      	b.n	8004a76 <HAL_RCC_OscConfig+0x212>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8004d42:	6813      	ldr	r3, [r2, #0]
 8004d44:	f023 0318 	bic.w	r3, r3, #24
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	6013      	str	r3, [r2, #0]
            (void) HAL_RCC_GetHCLKFreq();
 8004d4c:	f7ff fd54 	bl	80047f8 <HAL_RCC_GetHCLKFreq>
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004d50:	4b29      	ldr	r3, [pc, #164]	; (8004df8 <HAL_RCC_OscConfig+0x594>)
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	f7fe fd2e 	bl	80037b4 <HAL_InitTick>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	f43f aebc 	beq.w	8004ad6 <HAL_RCC_OscConfig+0x272>
 8004d5e:	e700      	b.n	8004b62 <HAL_RCC_OscConfig+0x2fe>
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004d60:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <HAL_RCC_OscConfig+0x590>)
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d62:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004d64:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d66:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d68:	f43f aefb 	beq.w	8004b62 <HAL_RCC_OscConfig+0x2fe>
 8004d6c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d6e:	f001 0303 	and.w	r3, r1, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d72:	4283      	cmp	r3, r0
 8004d74:	f47f aef5 	bne.w	8004b62 <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d78:	6b23      	ldr	r3, [r4, #48]	; 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004d7a:	f3c1 2105 	ubfx	r1, r1, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8004d7e:	4299      	cmp	r1, r3
 8004d80:	f47f aeef 	bne.w	8004b62 <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004d84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d86:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8004d8a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8004d8c:	4299      	cmp	r1, r3
 8004d8e:	f47f aee8 	bne.w	8004b62 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004d92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004d94:	f3c5 2146 	ubfx	r1, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004d98:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8004d9a:	4299      	cmp	r1, r3
 8004d9c:	f47f aee1 	bne.w	8004b62 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004da0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004da2:	f3c5 4106 	ubfx	r1, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004da6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8004da8:	4299      	cmp	r1, r3
 8004daa:	f47f aeda 	bne.w	8004b62 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004dae:	6c23      	ldr	r3, [r4, #64]	; 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004db0:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8004db4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8004db6:	429d      	cmp	r5, r3
 8004db8:	f47f aed3 	bne.w	8004b62 <HAL_RCC_OscConfig+0x2fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004dbc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004dbe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004dc0:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d093      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8004dc8:	4a0a      	ldr	r2, [pc, #40]	; (8004df4 <HAL_RCC_OscConfig+0x590>)
 8004dca:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004dcc:	f023 0310 	bic.w	r3, r3, #16
 8004dd0:	6293      	str	r3, [r2, #40]	; 0x28
        tickstart = HAL_GetTick();
 8004dd2:	f7fe fd71 	bl	80038b8 <HAL_GetTick>
 8004dd6:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8004dd8:	f7fe fd6e 	bl	80038b8 <HAL_GetTick>
 8004ddc:	42a8      	cmp	r0, r5
 8004dde:	d0fb      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x574>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8004de0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8004de2:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <HAL_RCC_OscConfig+0x590>)
 8004de4:	00d2      	lsls	r2, r2, #3
 8004de6:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return HAL_OK;
 8004dea:	2000      	movs	r0, #0
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8004dec:	f042 0210 	orr.w	r2, r2, #16
 8004df0:	629a      	str	r2, [r3, #40]	; 0x28
 8004df2:	e6b7      	b.n	8004b64 <HAL_RCC_OscConfig+0x300>
 8004df4:	44020c00 	.word	0x44020c00
 8004df8:	20000004 	.word	0x20000004
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <HAL_RCC_OscConfig+0x638>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e584      	b.n	8004922 <HAL_RCC_OscConfig+0xbe>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8004e18:	2e01      	cmp	r6, #1
 8004e1a:	f47f ad9b 	bne.w	8004954 <HAL_RCC_OscConfig+0xf0>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f47f ae58 	bne.w	8004ad6 <HAL_RCC_OscConfig+0x272>
 8004e26:	e69c      	b.n	8004b62 <HAL_RCC_OscConfig+0x2fe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004e28:	4a1c      	ldr	r2, [pc, #112]	; (8004e9c <HAL_RCC_OscConfig+0x638>)
 8004e2a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8004e36:	e5f4      	b.n	8004a22 <HAL_RCC_OscConfig+0x1be>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8004e38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e568      	b.n	8004922 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8004e50:	4b12      	ldr	r3, [pc, #72]	; (8004e9c <HAL_RCC_OscConfig+0x638>)
 8004e52:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004e56:	f042 0204 	orr.w	r2, r2, #4
 8004e5a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004e5e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004e62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e66:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004e6a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004e6e:	f042 0201 	orr.w	r2, r2, #1
 8004e72:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004e76:	e5d4      	b.n	8004a22 <HAL_RCC_OscConfig+0x1be>
 8004e78:	f042 0204 	orr.w	r2, r2, #4
 8004e7c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004e80:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e88:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004e8c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8004e90:	f042 0201 	orr.w	r2, r2, #1
 8004e94:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8004e98:	e5c3      	b.n	8004a22 <HAL_RCC_OscConfig+0x1be>
 8004e9a:	bf00      	nop
 8004e9c:	44020c00 	.word	0x44020c00

08004ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004ea2:	f7ff fb5b 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8004ea6:	4a0a      	ldr	r2, [pc, #40]	; (8004ed0 <HAL_RCC_GetPCLK1Freq+0x30>)
 8004ea8:	490a      	ldr	r1, [pc, #40]	; (8004ed4 <HAL_RCC_GetPCLK1Freq+0x34>)
 8004eaa:	6a13      	ldr	r3, [r2, #32]
 8004eac:	4c0a      	ldr	r4, [pc, #40]	; (8004ed8 <HAL_RCC_GetPCLK1Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004eb4:	4909      	ldr	r1, [pc, #36]	; (8004edc <HAL_RCC_GetPCLK1Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004eb6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004eba:	40d8      	lsrs	r0, r3
 8004ebc:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8004ebe:	6a13      	ldr	r3, [r2, #32]
 8004ec0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8004ec4:	5ccb      	ldrb	r3, [r1, r3]
 8004ec6:	f003 031f 	and.w	r3, r3, #31
}
 8004eca:	40d8      	lsrs	r0, r3
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	bf00      	nop
 8004ed0:	44020c00 	.word	0x44020c00
 8004ed4:	08019e48 	.word	0x08019e48
 8004ed8:	20000008 	.word	0x20000008
 8004edc:	08019e58 	.word	0x08019e58

08004ee0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ee0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004ee2:	f7ff fb3b 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <HAL_RCC_GetPCLK2Freq+0x30>)
 8004ee8:	490a      	ldr	r1, [pc, #40]	; (8004f14 <HAL_RCC_GetPCLK2Freq+0x34>)
 8004eea:	6a13      	ldr	r3, [r2, #32]
 8004eec:	4c0a      	ldr	r4, [pc, #40]	; (8004f18 <HAL_RCC_GetPCLK2Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004ef4:	4909      	ldr	r1, [pc, #36]	; (8004f1c <HAL_RCC_GetPCLK2Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004ef6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004efa:	40d8      	lsrs	r0, r3
 8004efc:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8004efe:	6a13      	ldr	r3, [r2, #32]
 8004f00:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004f04:	5ccb      	ldrb	r3, [r1, r3]
 8004f06:	f003 031f 	and.w	r3, r3, #31
}
 8004f0a:	40d8      	lsrs	r0, r3
 8004f0c:	bd10      	pop	{r4, pc}
 8004f0e:	bf00      	nop
 8004f10:	44020c00 	.word	0x44020c00
 8004f14:	08019e48 	.word	0x08019e48
 8004f18:	20000008 	.word	0x20000008
 8004f1c:	08019e58 	.word	0x08019e58

08004f20 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8004f20:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f22:	f7ff fb1b 	bl	800455c <HAL_RCC_GetSysClockFreq>
 8004f26:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <HAL_RCC_GetPCLK3Freq+0x30>)
 8004f28:	490a      	ldr	r1, [pc, #40]	; (8004f54 <HAL_RCC_GetPCLK3Freq+0x34>)
 8004f2a:	6a13      	ldr	r3, [r2, #32]
 8004f2c:	4c0a      	ldr	r4, [pc, #40]	; (8004f58 <HAL_RCC_GetPCLK3Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004f34:	4909      	ldr	r1, [pc, #36]	; (8004f5c <HAL_RCC_GetPCLK3Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8004f36:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8004f3a:	40d8      	lsrs	r0, r3
 8004f3c:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8004f3e:	6a13      	ldr	r3, [r2, #32]
 8004f40:	f3c3 3302 	ubfx	r3, r3, #12, #3
 8004f44:	5ccb      	ldrb	r3, [r1, r3]
 8004f46:	f003 031f 	and.w	r3, r3, #31
}
 8004f4a:	40d8      	lsrs	r0, r3
 8004f4c:	bd10      	pop	{r4, pc}
 8004f4e:	bf00      	nop
 8004f50:	44020c00 	.word	0x44020c00
 8004f54:	08019e48 	.word	0x08019e48
 8004f58:	20000008 	.word	0x20000008
 8004f5c:	08019e58 	.word	0x08019e58

08004f60 <RCCEx_PLL2_Config.part.0>:
  * @param  pll2  pointer to an RCC_PLL2InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
 8004f60:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8004f62:	e9d0 1200 	ldrd	r1, r2, [r0]
 8004f66:	4c2a      	ldr	r4, [pc, #168]	; (8005010 <RCCEx_PLL2_Config.part.0+0xb0>)
 8004f68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	430b      	orrs	r3, r1
 8004f74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f7a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	3a01      	subs	r2, #1
 8004f82:	025b      	lsls	r3, r3, #9
 8004f84:	0412      	lsls	r2, r2, #16
 8004f86:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	6881      	ldr	r1, [r0, #8]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	6942      	ldr	r2, [r0, #20]
 8004f92:	3901      	subs	r1, #1
 8004f94:	3a01      	subs	r2, #1
 8004f96:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004f9a:	0612      	lsls	r2, r2, #24
 8004f9c:	430b      	orrs	r3, r1
 8004f9e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	63e3      	str	r3, [r4, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8004fa6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fa8:	6982      	ldr	r2, [r0, #24]
 8004faa:	f023 030c 	bic.w	r3, r3, #12
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8004fb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fb4:	69c2      	ldr	r2, [r0, #28]
 8004fb6:	f023 0320 	bic.w	r3, r3, #32
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8004fbe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fc0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8004fc6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fc8:	f023 0310 	bic.w	r3, r3, #16
 8004fcc:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8004fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004fd0:	6a02      	ldr	r2, [r0, #32]
 8004fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fd6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004fda:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004fde:	6423      	str	r3, [r4, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8004fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004fe2:	f043 0310 	orr.w	r3, r3, #16
 8004fe6:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fee:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ff0:	f7fe fc62 	bl	80038b8 <HAL_GetTick>
 8004ff4:	4605      	mov	r5, r0

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ff6:	e004      	b.n	8005002 <RCCEx_PLL2_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ff8:	f7fe fc5e 	bl	80038b8 <HAL_GetTick>
 8004ffc:	1b40      	subs	r0, r0, r5
 8004ffe:	2802      	cmp	r0, #2
 8005000:	d804      	bhi.n	800500c <RCCEx_PLL2_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	d5f7      	bpl.n	8004ff8 <RCCEx_PLL2_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005008:	2000      	movs	r0, #0

}
 800500a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800500c:	2003      	movs	r0, #3
}
 800500e:	bd38      	pop	{r3, r4, r5, pc}
 8005010:	44020c00 	.word	0x44020c00

08005014 <RCCEx_PLL3_Config.part.0>:
  * @param  pll3  pointer to an RCC_PLL3InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
 8005014:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005016:	e9d0 1200 	ldrd	r1, r2, [r0]
 800501a:	4c2a      	ldr	r4, [pc, #168]	; (80050c4 <RCCEx_PLL3_Config.part.0+0xb0>)
 800501c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800501e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005022:	f023 0303 	bic.w	r3, r3, #3
 8005026:	430b      	orrs	r3, r1
 8005028:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800502c:	6323      	str	r3, [r4, #48]	; 0x30
 800502e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8005032:	3b01      	subs	r3, #1
 8005034:	3a01      	subs	r2, #1
 8005036:	025b      	lsls	r3, r3, #9
 8005038:	0412      	lsls	r2, r2, #16
 800503a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800503e:	b29b      	uxth	r3, r3
 8005040:	6881      	ldr	r1, [r0, #8]
 8005042:	4313      	orrs	r3, r2
 8005044:	6942      	ldr	r2, [r0, #20]
 8005046:	3901      	subs	r1, #1
 8005048:	3a01      	subs	r2, #1
 800504a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800504e:	0612      	lsls	r2, r2, #24
 8005050:	430b      	orrs	r3, r1
 8005052:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005056:	4313      	orrs	r3, r2
 8005058:	6463      	str	r3, [r4, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800505a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800505c:	6982      	ldr	r2, [r0, #24]
 800505e:	f023 030c 	bic.w	r3, r3, #12
 8005062:	4313      	orrs	r3, r2
 8005064:	6323      	str	r3, [r4, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005066:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005068:	69c2      	ldr	r2, [r0, #28]
 800506a:	f023 0320 	bic.w	r3, r3, #32
 800506e:	4313      	orrs	r3, r2
 8005070:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005072:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005074:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005076:	4313      	orrs	r3, r2
 8005078:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 800507a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800507c:	f023 0310 	bic.w	r3, r3, #16
 8005080:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005082:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005084:	6a02      	ldr	r2, [r0, #32]
 8005086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800508a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800508e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005092:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005094:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005096:	f043 0310 	orr.w	r3, r3, #16
 800509a:	6323      	str	r3, [r4, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80050a4:	f7fe fc08 	bl	80038b8 <HAL_GetTick>
 80050a8:	4605      	mov	r5, r0

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050aa:	e004      	b.n	80050b6 <RCCEx_PLL3_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80050ac:	f7fe fc04 	bl	80038b8 <HAL_GetTick>
 80050b0:	1b40      	subs	r0, r0, r5
 80050b2:	2802      	cmp	r0, #2
 80050b4:	d804      	bhi.n	80050c0 <RCCEx_PLL3_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	d5f7      	bpl.n	80050ac <RCCEx_PLL3_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80050bc:	2000      	movs	r0, #0
}
 80050be:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 80050c0:	2003      	movs	r0, #3
}
 80050c2:	bd38      	pop	{r3, r4, r5, pc}
 80050c4:	44020c00 	.word	0x44020c00

080050c8 <HAL_RCCEx_PeriphCLKConfig>:
{
 80050c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050cc:	e9d0 3200 	ldrd	r3, r2, [r0]
 80050d0:	01d9      	lsls	r1, r3, #7
{
 80050d2:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80050d4:	d508      	bpl.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 80050d6:	488f      	ldr	r0, [pc, #572]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80050d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80050da:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 80050de:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 80050e2:	4329      	orrs	r1, r5
 80050e4:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e8:	f013 0601 	ands.w	r6, r3, #1
 80050ec:	d031      	beq.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Usart1ClockSelection)
 80050ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80050f0:	2905      	cmp	r1, #5
 80050f2:	f201 86dd 	bhi.w	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 80050f6:	e8df f011 	tbh	[pc, r1, lsl #1]
 80050fa:	0023      	.short	0x0023
 80050fc:	00060d13 	.word	0x00060d13
 8005100:	00230023 	.word	0x00230023
 8005104:	0023      	.short	0x0023
  __HAL_RCC_PLL3_DISABLE();
 8005106:	4d83      	ldr	r5, [pc, #524]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005108:	682b      	ldr	r3, [r5, #0]
 800510a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800510e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005110:	f7fe fbd2 	bl	80038b8 <HAL_GetTick>
 8005114:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005116:	e005      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005118:	f7fe fbce 	bl	80038b8 <HAL_GetTick>
 800511c:	1b80      	subs	r0, r0, r6
 800511e:	2802      	cmp	r0, #2
 8005120:	f201 85c6 	bhi.w	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005124:	682b      	ldr	r3, [r5, #0]
 8005126:	0098      	lsls	r0, r3, #2
 8005128:	d4f6      	bmi.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800512a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800512e:	f7ff ff71 	bl	8005014 <RCCEx_PLL3_Config.part.0>
 8005132:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005134:	2e00      	cmp	r6, #0
 8005136:	f041 86b4 	bne.w	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x1dda>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800513a:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800513e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005140:	2600      	movs	r6, #0
 8005142:	4d74      	ldr	r5, [pc, #464]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005144:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
 8005148:	f020 0007 	bic.w	r0, r0, #7
 800514c:	4301      	orrs	r1, r0
 800514e:	f8c5 10d8 	str.w	r1, [r5, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005152:	0799      	lsls	r1, r3, #30
 8005154:	d52e      	bpl.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8005156:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005158:	2928      	cmp	r1, #40	; 0x28
 800515a:	d82a      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 800515c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005160:	00290cb4 	.word	0x00290cb4
 8005164:	00290029 	.word	0x00290029
 8005168:	00290029 	.word	0x00290029
 800516c:	00290029 	.word	0x00290029
 8005170:	00290d6f 	.word	0x00290d6f
 8005174:	00290029 	.word	0x00290029
 8005178:	00290029 	.word	0x00290029
 800517c:	00290029 	.word	0x00290029
 8005180:	00290d89 	.word	0x00290d89
 8005184:	00290029 	.word	0x00290029
 8005188:	00290029 	.word	0x00290029
 800518c:	00290029 	.word	0x00290029
 8005190:	00290cb4 	.word	0x00290cb4
 8005194:	00290029 	.word	0x00290029
 8005198:	00290029 	.word	0x00290029
 800519c:	00290029 	.word	0x00290029
 80051a0:	00290cb4 	.word	0x00290cb4
 80051a4:	00290029 	.word	0x00290029
 80051a8:	00290029 	.word	0x00290029
 80051ac:	00290029 	.word	0x00290029
 80051b0:	0cb4      	.short	0x0cb4
 80051b2:	2601      	movs	r6, #1
 80051b4:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80051b6:	0759      	lsls	r1, r3, #29
 80051b8:	d52e      	bpl.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Usart3ClockSelection)
 80051ba:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80051bc:	2980      	cmp	r1, #128	; 0x80
 80051be:	f001 8285 	beq.w	80066cc <HAL_RCCEx_PeriphCLKConfig+0x1604>
 80051c2:	f200 81a2 	bhi.w	800550a <HAL_RCCEx_PeriphCLKConfig+0x442>
 80051c6:	b1d9      	cbz	r1, 8005200 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80051c8:	2940      	cmp	r1, #64	; 0x40
 80051ca:	f040 81a7 	bne.w	800551c <HAL_RCCEx_PeriphCLKConfig+0x454>
  __HAL_RCC_PLL2_DISABLE();
 80051ce:	4d51      	ldr	r5, [pc, #324]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051d6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80051d8:	f7fe fb6e 	bl	80038b8 <HAL_GetTick>
 80051dc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051de:	e005      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051e0:	f7fe fb6a 	bl	80038b8 <HAL_GetTick>
 80051e4:	1bc0      	subs	r0, r0, r7
 80051e6:	2802      	cmp	r0, #2
 80051e8:	f201 85a8 	bhi.w	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80051ec:	682b      	ldr	r3, [r5, #0]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	d4f6      	bmi.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80051f2:	f104 0008 	add.w	r0, r4, #8
 80051f6:	f7ff feb3 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051fa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80051fe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005200:	2d00      	cmp	r5, #0
 8005202:	f041 84b8 	bne.w	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1aae>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005206:	4f43      	ldr	r7, [pc, #268]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005208:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800520a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800520e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8005212:	4301      	orrs	r1, r0
 8005214:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005218:	0719      	lsls	r1, r3, #28
 800521a:	d530      	bpl.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart4ClockSelection)
 800521c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800521e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005222:	f001 8378 	beq.w	8006916 <HAL_RCCEx_PeriphCLKConfig+0x184e>
 8005226:	f200 817c 	bhi.w	8005522 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 800522a:	b1e1      	cbz	r1, 8005266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800522c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005230:	f040 8181 	bne.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  __HAL_RCC_PLL2_DISABLE();
 8005234:	4d37      	ldr	r5, [pc, #220]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005236:	682b      	ldr	r3, [r5, #0]
 8005238:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800523c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800523e:	f7fe fb3b 	bl	80038b8 <HAL_GetTick>
 8005242:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005244:	e005      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005246:	f7fe fb37 	bl	80038b8 <HAL_GetTick>
 800524a:	1bc0      	subs	r0, r0, r7
 800524c:	2802      	cmp	r0, #2
 800524e:	f201 8534 	bhi.w	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005252:	682b      	ldr	r3, [r5, #0]
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	d4f6      	bmi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8005258:	f104 0008 	add.w	r0, r4, #8
 800525c:	f7ff fe80 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005260:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005264:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005266:	2d00      	cmp	r5, #0
 8005268:	f041 8473 	bne.w	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 800526c:	4f29      	ldr	r7, [pc, #164]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800526e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005270:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005274:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8005278:	4301      	orrs	r1, r0
 800527a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800527e:	06d9      	lsls	r1, r3, #27
 8005280:	d530      	bpl.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8005282:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005284:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005288:	f001 8156 	beq.w	8006538 <HAL_RCCEx_PeriphCLKConfig+0x1470>
 800528c:	f200 8156 	bhi.w	800553c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8005290:	b1e1      	cbz	r1, 80052cc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005292:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005296:	f040 815b 	bne.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x488>
  __HAL_RCC_PLL2_DISABLE();
 800529a:	4d1e      	ldr	r5, [pc, #120]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052a2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80052a4:	f7fe fb08 	bl	80038b8 <HAL_GetTick>
 80052a8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052aa:	e005      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80052ac:	f7fe fb04 	bl	80038b8 <HAL_GetTick>
 80052b0:	1bc0      	subs	r0, r0, r7
 80052b2:	2802      	cmp	r0, #2
 80052b4:	f201 8548 	bhi.w	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052b8:	682b      	ldr	r3, [r5, #0]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	d4f6      	bmi.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80052be:	f104 0008 	add.w	r0, r4, #8
 80052c2:	f7ff fe4d 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052c6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80052ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80052cc:	2d00      	cmp	r5, #0
 80052ce:	f041 8479 	bne.w	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1afc>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80052d2:	4f10      	ldr	r7, [pc, #64]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80052d4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80052d6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80052da:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80052de:	4301      	orrs	r1, r0
 80052e0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052e4:	0699      	lsls	r1, r3, #26
 80052e6:	d533      	bpl.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Usart6ClockSelection)
 80052e8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80052ea:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80052ee:	f001 8179 	beq.w	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x151c>
 80052f2:	f200 8130 	bhi.w	8005556 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 80052f6:	b1f9      	cbz	r1, 8005338 <HAL_RCCEx_PeriphCLKConfig+0x270>
 80052f8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80052fc:	f040 8135 	bne.w	800556a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  __HAL_RCC_PLL2_DISABLE();
 8005300:	4d04      	ldr	r5, [pc, #16]	; (8005314 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005302:	682b      	ldr	r3, [r5, #0]
 8005304:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005308:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800530a:	f7fe fad5 	bl	80038b8 <HAL_GetTick>
 800530e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005310:	e008      	b.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8005312:	bf00      	nop
 8005314:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005318:	f7fe face 	bl	80038b8 <HAL_GetTick>
 800531c:	1bc0      	subs	r0, r0, r7
 800531e:	2802      	cmp	r0, #2
 8005320:	f201 84dd 	bhi.w	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005324:	682b      	ldr	r3, [r5, #0]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	d4f6      	bmi.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x250>
 800532a:	f104 0008 	add.w	r0, r4, #8
 800532e:	f7ff fe17 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005332:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005336:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005338:	2d00      	cmp	r5, #0
 800533a:	f041 843d 	bne.w	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1af0>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800533e:	4fb1      	ldr	r7, [pc, #708]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005340:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005342:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005346:	f421 3160 	bic.w	r1, r1, #229376	; 0x38000
 800534a:	4301      	orrs	r1, r0
 800534c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005350:	0659      	lsls	r1, r3, #25
 8005352:	d530      	bpl.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8005354:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005356:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800535a:	f001 8286 	beq.w	800686a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
 800535e:	f200 8107 	bhi.w	8005570 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005362:	b1e1      	cbz	r1, 800539e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005364:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8005368:	f040 810c 	bne.w	8005584 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
  __HAL_RCC_PLL2_DISABLE();
 800536c:	4da5      	ldr	r5, [pc, #660]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800536e:	682b      	ldr	r3, [r5, #0]
 8005370:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005374:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005376:	f7fe fa9f 	bl	80038b8 <HAL_GetTick>
 800537a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800537c:	e005      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800537e:	f7fe fa9b 	bl	80038b8 <HAL_GetTick>
 8005382:	1bc0      	subs	r0, r0, r7
 8005384:	2802      	cmp	r0, #2
 8005386:	f201 84cd 	bhi.w	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800538a:	682b      	ldr	r3, [r5, #0]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	d4f6      	bmi.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005390:	f104 0008 	add.w	r0, r4, #8
 8005394:	f7ff fde4 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005398:	e9d4 3200 	ldrd	r3, r2, [r4]
 800539c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800539e:	2d00      	cmp	r5, #0
 80053a0:	f041 83f5 	bne.w	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 80053a4:	4f97      	ldr	r7, [pc, #604]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80053a6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80053a8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80053ac:	f421 11e0 	bic.w	r1, r1, #1835008	; 0x1c0000
 80053b0:	4301      	orrs	r1, r0
 80053b2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80053b6:	0619      	lsls	r1, r3, #24
 80053b8:	d530      	bpl.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart8ClockSelection)
 80053ba:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80053bc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80053c0:	f001 8167 	beq.w	8006692 <HAL_RCCEx_PeriphCLKConfig+0x15ca>
 80053c4:	f200 80e1 	bhi.w	800558a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80053c8:	b1e1      	cbz	r1, 8005404 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80053ca:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80053ce:	f040 80e6 	bne.w	800559e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  __HAL_RCC_PLL2_DISABLE();
 80053d2:	4d8c      	ldr	r5, [pc, #560]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053da:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80053dc:	f7fe fa6c 	bl	80038b8 <HAL_GetTick>
 80053e0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053e2:	e005      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80053e4:	f7fe fa68 	bl	80038b8 <HAL_GetTick>
 80053e8:	1bc0      	subs	r0, r0, r7
 80053ea:	2802      	cmp	r0, #2
 80053ec:	f201 8483 	bhi.w	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	d4f6      	bmi.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80053f6:	f104 0008 	add.w	r0, r4, #8
 80053fa:	f7ff fdb1 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80053fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005402:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005404:	2d00      	cmp	r5, #0
 8005406:	f041 83da 	bne.w	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1af6>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800540a:	4f7e      	ldr	r7, [pc, #504]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800540c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800540e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005412:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8005416:	4301      	orrs	r1, r0
 8005418:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800541c:	05d9      	lsls	r1, r3, #23
 800541e:	d530      	bpl.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8005420:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005422:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8005426:	f001 818d 	beq.w	8006744 <HAL_RCCEx_PeriphCLKConfig+0x167c>
 800542a:	f200 80bb 	bhi.w	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800542e:	b1e1      	cbz	r1, 800546a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8005430:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005434:	f040 80c0 	bne.w	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  __HAL_RCC_PLL2_DISABLE();
 8005438:	4d72      	ldr	r5, [pc, #456]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800543a:	682b      	ldr	r3, [r5, #0]
 800543c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005440:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005442:	f7fe fa39 	bl	80038b8 <HAL_GetTick>
 8005446:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005448:	e005      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800544a:	f7fe fa35 	bl	80038b8 <HAL_GetTick>
 800544e:	1bc0      	subs	r0, r0, r7
 8005450:	2802      	cmp	r0, #2
 8005452:	f201 846d 	bhi.w	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005456:	682b      	ldr	r3, [r5, #0]
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	d4f6      	bmi.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800545c:	f104 0008 	add.w	r0, r4, #8
 8005460:	f7ff fd7e 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005464:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005468:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800546a:	2d00      	cmp	r5, #0
 800546c:	f041 838c 	bne.w	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005470:	4f64      	ldr	r7, [pc, #400]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005472:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005474:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005478:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800547c:	4301      	orrs	r1, r0
 800547e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005482:	0599      	lsls	r1, r3, #22
 8005484:	d532      	bpl.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8005486:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800548a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800548e:	f001 80c6 	beq.w	800661e <HAL_RCCEx_PeriphCLKConfig+0x1556>
 8005492:	f200 8094 	bhi.w	80055be <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005496:	b1e1      	cbz	r1, 80054d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005498:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 800549c:	f040 8097 	bne.w	80055ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  __HAL_RCC_PLL2_DISABLE();
 80054a0:	4d58      	ldr	r5, [pc, #352]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80054a2:	682b      	ldr	r3, [r5, #0]
 80054a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054a8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80054aa:	f7fe fa05 	bl	80038b8 <HAL_GetTick>
 80054ae:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054b0:	e005      	b.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80054b2:	f7fe fa01 	bl	80038b8 <HAL_GetTick>
 80054b6:	1bc0      	subs	r0, r0, r7
 80054b8:	2802      	cmp	r0, #2
 80054ba:	f201 842d 	bhi.w	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	d4f6      	bmi.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80054c4:	f104 0008 	add.w	r0, r4, #8
 80054c8:	f7ff fd4a 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80054cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80054d0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80054d2:	2d00      	cmp	r5, #0
 80054d4:	f041 8352 	bne.w	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 80054d8:	4f4a      	ldr	r7, [pc, #296]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80054da:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80054de:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80054e2:	f021 5160 	bic.w	r1, r1, #939524096	; 0x38000000
 80054e6:	4301      	orrs	r1, r0
 80054e8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80054ec:	0559      	lsls	r1, r3, #21
 80054ee:	d572      	bpl.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 80054f0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80054f4:	2905      	cmp	r1, #5
 80054f6:	f201 84e2 	bhi.w	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 80054fa:	e8df f011 	tbh	[pc, r1, lsl #1]
 80054fe:	05f0      	.short	0x05f0
 8005500:	05d70af4 	.word	0x05d70af4
 8005504:	05f005f0 	.word	0x05f005f0
 8005508:	05f0      	.short	0x05f0
    switch (pPeriphClkInit->Usart3ClockSelection)
 800550a:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800550e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005512:	f43f ae75 	beq.w	8005200 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005516:	29c0      	cmp	r1, #192	; 0xc0
 8005518:	f43f ae72 	beq.w	8005200 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800551c:	2601      	movs	r6, #1
 800551e:	4635      	mov	r5, r6
 8005520:	e67a      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8005522:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 8005526:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 800552a:	f43f ae9c 	beq.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800552e:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8005532:	f43f ae98 	beq.w	8005266 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005536:	2601      	movs	r6, #1
 8005538:	4635      	mov	r5, r6
 800553a:	e6a0      	b.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart5ClockSelection)
 800553c:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 8005540:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005544:	f43f aec2 	beq.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005548:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800554c:	f43f aebe 	beq.w	80052cc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005550:	2601      	movs	r6, #1
 8005552:	4635      	mov	r5, r6
 8005554:	e6c6      	b.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8005556:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 800555a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 800555e:	f43f aeeb 	beq.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8005562:	f5b1 3fc0 	cmp.w	r1, #98304	; 0x18000
 8005566:	f43f aee7 	beq.w	8005338 <HAL_RCCEx_PeriphCLKConfig+0x270>
 800556a:	2601      	movs	r6, #1
 800556c:	4635      	mov	r5, r6
 800556e:	e6ef      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8005570:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 8005574:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8005578:	f43f af11 	beq.w	800539e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800557c:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8005580:	f43f af0d 	beq.w	800539e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005584:	2601      	movs	r6, #1
 8005586:	4635      	mov	r5, r6
 8005588:	e715      	b.n	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart8ClockSelection)
 800558a:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 800558e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005592:	f43f af37 	beq.w	8005404 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005596:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800559a:	f43f af33 	beq.w	8005404 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800559e:	2601      	movs	r6, #1
 80055a0:	4635      	mov	r5, r6
 80055a2:	e73b      	b.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart9ClockSelection)
 80055a4:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 80055a8:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 80055ac:	f43f af5d 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80055b0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80055b4:	f43f af59 	beq.w	800546a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80055b8:	2601      	movs	r6, #1
 80055ba:	4635      	mov	r5, r6
 80055bc:	e761      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Usart10ClockSelection)
 80055be:	f021 6000 	bic.w	r0, r1, #134217728	; 0x8000000
 80055c2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 80055c6:	d084      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80055c8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 80055cc:	d081      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80055ce:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80055d0:	0559      	lsls	r1, r3, #21
    switch (pPeriphClkInit->Usart10ClockSelection)
 80055d2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80055d4:	d48c      	bmi.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x428>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80055d6:	0519      	lsls	r1, r3, #20
 80055d8:	d533      	bpl.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Uart12ClockSelection)
 80055da:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80055de:	2920      	cmp	r1, #32
 80055e0:	f001 8126 	beq.w	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1768>
 80055e4:	f200 831e 	bhi.w	8005c24 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 80055e8:	b1f1      	cbz	r1, 8005628 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80055ea:	2910      	cmp	r1, #16
 80055ec:	f040 8322 	bne.w	8005c34 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  __HAL_RCC_PLL2_DISABLE();
 80055f0:	4d04      	ldr	r5, [pc, #16]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80055f2:	682b      	ldr	r3, [r5, #0]
 80055f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055f8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80055fa:	f7fe f95d 	bl	80038b8 <HAL_GetTick>
 80055fe:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8005602:	bf00      	nop
 8005604:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005608:	f7fe f956 	bl	80038b8 <HAL_GetTick>
 800560c:	1bc0      	subs	r0, r0, r7
 800560e:	2802      	cmp	r0, #2
 8005610:	f201 83a0 	bhi.w	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005614:	682b      	ldr	r3, [r5, #0]
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	d4f6      	bmi.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x540>
 800561a:	f104 0008 	add.w	r0, r4, #8
 800561e:	f7ff fc9f 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005622:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005626:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005628:	2d00      	cmp	r5, #0
 800562a:	f041 82b6 	bne.w	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800562e:	4fac      	ldr	r7, [pc, #688]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005630:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8005634:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005638:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800563c:	4301      	orrs	r1, r0
 800563e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005642:	04d9      	lsls	r1, r3, #19
 8005644:	d532      	bpl.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005646:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800564a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800564e:	f001 8129 	beq.w	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
 8005652:	f200 82f2 	bhi.w	8005c3a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8005656:	b1e1      	cbz	r1, 8005692 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005658:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800565c:	f040 82f7 	bne.w	8005c4e <HAL_RCCEx_PeriphCLKConfig+0xb86>
  __HAL_RCC_PLL2_DISABLE();
 8005660:	4d9f      	ldr	r5, [pc, #636]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005668:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800566a:	f7fe f925 	bl	80038b8 <HAL_GetTick>
 800566e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005670:	e005      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005672:	f7fe f921 	bl	80038b8 <HAL_GetTick>
 8005676:	1bc0      	subs	r0, r0, r7
 8005678:	2802      	cmp	r0, #2
 800567a:	f201 8324 	bhi.w	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800567e:	682b      	ldr	r3, [r5, #0]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	d4f6      	bmi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005684:	f104 0008 	add.w	r0, r4, #8
 8005688:	f7ff fc6a 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800568c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005690:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005692:	2d00      	cmp	r5, #0
 8005694:	f041 826c 	bne.w	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005698:	4f91      	ldr	r7, [pc, #580]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800569a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800569e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80056a2:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80056a6:	4301      	orrs	r1, r0
 80056a8:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ac:	0499      	lsls	r1, r3, #18
 80056ae:	d50f      	bpl.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c1ClockSelection)
 80056b0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80056b4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80056b8:	f000 86a0 	beq.w	80063fc <HAL_RCCEx_PeriphCLKConfig+0x1334>
 80056bc:	f240 82ec 	bls.w	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80056c0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80056c4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80056c8:	f000 82e9 	beq.w	8005c9e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80056cc:	2601      	movs	r6, #1
 80056ce:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056d0:	045f      	lsls	r7, r3, #17
 80056d2:	d50f      	bpl.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->I2c2ClockSelection)
 80056d4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80056d8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80056dc:	f000 86b0 	beq.w	8006440 <HAL_RCCEx_PeriphCLKConfig+0x1378>
 80056e0:	f240 82eb 	bls.w	8005cba <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 80056e4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80056e8:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80056ec:	f000 82e8 	beq.w	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
 80056f0:	2601      	movs	r6, #1
 80056f2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056f4:	0419      	lsls	r1, r3, #16
 80056f6:	d50f      	bpl.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c3ClockSelection)
 80056f8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80056fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005700:	f000 8642 	beq.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
 8005704:	f240 82b7 	bls.w	8005c76 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005708:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 800570c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005710:	f000 82b4 	beq.w	8005c7c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8005714:	2601      	movs	r6, #1
 8005716:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005718:	0557      	lsls	r7, r2, #21
 800571a:	d50f      	bpl.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c4ClockSelection)
 800571c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8005720:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8005724:	f000 864d 	beq.w	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x12fa>
 8005728:	f240 8294 	bls.w	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800572c:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8005730:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8005734:	f000 8291 	beq.w	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8005738:	2601      	movs	r6, #1
 800573a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800573c:	03d9      	lsls	r1, r3, #15
 800573e:	d50b      	bpl.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x690>
    switch (pPeriphClkInit->I3c1ClockSelection)
 8005740:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8005744:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005748:	f000 851d 	beq.w	8006186 <HAL_RCCEx_PeriphCLKConfig+0x10be>
 800574c:	f031 7100 	bics.w	r1, r1, #33554432	; 0x2000000
 8005750:	f000 8532 	beq.w	80061b8 <HAL_RCCEx_PeriphCLKConfig+0x10f0>
 8005754:	2601      	movs	r6, #1
 8005756:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005758:	0510      	lsls	r0, r2, #20
 800575a:	d509      	bpl.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800575c:	4960      	ldr	r1, [pc, #384]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800575e:	69c8      	ldr	r0, [r1, #28]
 8005760:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005764:	61c8      	str	r0, [r1, #28]
 8005766:	69c8      	ldr	r0, [r1, #28]
 8005768:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
 800576c:	4338      	orrs	r0, r7
 800576e:	61c8      	str	r0, [r1, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005770:	0399      	lsls	r1, r3, #14
 8005772:	d532      	bpl.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005774:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8005778:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800577c:	f000 87ff 	beq.w	800677e <HAL_RCCEx_PeriphCLKConfig+0x16b6>
 8005780:	f200 82ac 	bhi.w	8005cdc <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8005784:	b1e1      	cbz	r1, 80057c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005786:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800578a:	f040 82b1 	bne.w	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  __HAL_RCC_PLL2_DISABLE();
 800578e:	4d54      	ldr	r5, [pc, #336]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005796:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005798:	f7fe f88e 	bl	80038b8 <HAL_GetTick>
 800579c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800579e:	e005      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80057a0:	f7fe f88a 	bl	80038b8 <HAL_GetTick>
 80057a4:	1bc0      	subs	r0, r0, r7
 80057a6:	2802      	cmp	r0, #2
 80057a8:	f201 82da 	bhi.w	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057ac:	682b      	ldr	r3, [r5, #0]
 80057ae:	011b      	lsls	r3, r3, #4
 80057b0:	d4f6      	bmi.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80057b2:	f104 0008 	add.w	r0, r4, #8
 80057b6:	f7ff fbd3 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80057be:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	f041 81cf 	bne.w	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80057c6:	4f46      	ldr	r7, [pc, #280]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80057c8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80057cc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80057d0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80057d4:	4301      	orrs	r1, r0
 80057d6:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057da:	0359      	lsls	r1, r3, #13
 80057dc:	d532      	bpl.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 80057de:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80057e2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80057e6:	f000 866d 	beq.w	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
 80057ea:	f200 8284 	bhi.w	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 80057ee:	b1e1      	cbz	r1, 800582a <HAL_RCCEx_PeriphCLKConfig+0x762>
 80057f0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80057f4:	f040 8289 	bne.w	8005d0a <HAL_RCCEx_PeriphCLKConfig+0xc42>
  __HAL_RCC_PLL2_DISABLE();
 80057f8:	4d39      	ldr	r5, [pc, #228]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80057fa:	682b      	ldr	r3, [r5, #0]
 80057fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005800:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005802:	f7fe f859 	bl	80038b8 <HAL_GetTick>
 8005806:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005808:	e005      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800580a:	f7fe f855 	bl	80038b8 <HAL_GetTick>
 800580e:	1bc0      	subs	r0, r0, r7
 8005810:	2802      	cmp	r0, #2
 8005812:	f201 826a 	bhi.w	8006cea <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005816:	682b      	ldr	r3, [r5, #0]
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	d4f6      	bmi.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x742>
 800581c:	f104 0008 	add.w	r0, r4, #8
 8005820:	f7ff fb9e 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005824:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005828:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800582a:	2d00      	cmp	r5, #0
 800582c:	f041 81be 	bne.w	8006bac <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005830:	4f2b      	ldr	r7, [pc, #172]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005832:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8005836:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800583a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800583e:	4301      	orrs	r1, r0
 8005840:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8005844:	0691      	lsls	r1, r2, #26
 8005846:	d532      	bpl.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005848:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800584c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8005850:	f000 8655 	beq.w	80064fe <HAL_RCCEx_PeriphCLKConfig+0x1436>
 8005854:	f200 825c 	bhi.w	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005858:	b1e1      	cbz	r1, 8005894 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800585a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800585e:	f040 8261 	bne.w	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  __HAL_RCC_PLL2_DISABLE();
 8005862:	4d1f      	ldr	r5, [pc, #124]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800586a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800586c:	f7fe f824 	bl	80038b8 <HAL_GetTick>
 8005870:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005872:	e005      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005874:	f7fe f820 	bl	80038b8 <HAL_GetTick>
 8005878:	1bc0      	subs	r0, r0, r7
 800587a:	2802      	cmp	r0, #2
 800587c:	f201 827e 	bhi.w	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	d4f6      	bmi.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8005886:	f104 0008 	add.w	r0, r4, #8
 800588a:	f7ff fb69 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800588e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005892:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005894:	2d00      	cmp	r5, #0
 8005896:	f041 8186 	bne.w	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x1ade>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800589a:	4f11      	ldr	r7, [pc, #68]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800589c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80058a0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80058a4:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80058a8:	4301      	orrs	r1, r0
 80058aa:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80058ae:	0651      	lsls	r1, r2, #25
 80058b0:	d535      	bpl.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 80058b2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80058b6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80058ba:	f000 86cd 	beq.w	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1590>
 80058be:	f200 8234 	bhi.w	8005d2a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80058c2:	b1f9      	cbz	r1, 8005904 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80058c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80058c8:	f040 8239 	bne.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0xc76>
  __HAL_RCC_PLL2_DISABLE();
 80058cc:	4d04      	ldr	r5, [pc, #16]	; (80058e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80058ce:	682b      	ldr	r3, [r5, #0]
 80058d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058d4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80058d6:	f7fd ffef 	bl	80038b8 <HAL_GetTick>
 80058da:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058dc:	e008      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x828>
 80058de:	bf00      	nop
 80058e0:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80058e4:	f7fd ffe8 	bl	80038b8 <HAL_GetTick>
 80058e8:	1bc0      	subs	r0, r0, r7
 80058ea:	2802      	cmp	r0, #2
 80058ec:	f201 8209 	bhi.w	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80058f0:	682b      	ldr	r3, [r5, #0]
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	d4f6      	bmi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 80058f6:	f104 0008 	add.w	r0, r4, #8
 80058fa:	f7ff fb31 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80058fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005902:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005904:	2d00      	cmp	r5, #0
 8005906:	f041 813c 	bne.w	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800590a:	4faf      	ldr	r7, [pc, #700]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 800590c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8005910:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8005914:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8005918:	4301      	orrs	r1, r0
 800591a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800591e:	0611      	lsls	r1, r2, #24
 8005920:	d532      	bpl.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005922:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8005926:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800592a:	f000 86ec 	beq.w	8006706 <HAL_RCCEx_PeriphCLKConfig+0x163e>
 800592e:	f200 8209 	bhi.w	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8005932:	b1e1      	cbz	r1, 800596e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005934:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005938:	f040 820e 	bne.w	8005d58 <HAL_RCCEx_PeriphCLKConfig+0xc90>
  __HAL_RCC_PLL2_DISABLE();
 800593c:	4da2      	ldr	r5, [pc, #648]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 800593e:	682b      	ldr	r3, [r5, #0]
 8005940:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005944:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005946:	f7fd ffb7 	bl	80038b8 <HAL_GetTick>
 800594a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800594c:	e005      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x892>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800594e:	f7fd ffb3 	bl	80038b8 <HAL_GetTick>
 8005952:	1bc0      	subs	r0, r0, r7
 8005954:	2802      	cmp	r0, #2
 8005956:	f201 81bc 	bhi.w	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800595a:	682b      	ldr	r3, [r5, #0]
 800595c:	011b      	lsls	r3, r3, #4
 800595e:	d4f6      	bmi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8005960:	f104 0008 	add.w	r0, r4, #8
 8005964:	f7ff fafc 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005968:	e9d4 3200 	ldrd	r3, r2, [r4]
 800596c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800596e:	2d00      	cmp	r5, #0
 8005970:	f041 80f2 	bne.w	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a90>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8005974:	4f94      	ldr	r7, [pc, #592]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005976:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800597a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800597e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8005982:	4301      	orrs	r1, r0
 8005984:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8005988:	05d1      	lsls	r1, r2, #23
 800598a:	d532      	bpl.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 800598c:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8005990:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8005994:	f000 872c 	beq.w	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1728>
 8005998:	f200 81e1 	bhi.w	8005d5e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800599c:	b1e1      	cbz	r1, 80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800599e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80059a2:	f040 81e6 	bne.w	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  __HAL_RCC_PLL2_DISABLE();
 80059a6:	4d88      	ldr	r5, [pc, #544]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80059ae:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80059b0:	f7fd ff82 	bl	80038b8 <HAL_GetTick>
 80059b4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059b6:	e005      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059b8:	f7fd ff7e 	bl	80038b8 <HAL_GetTick>
 80059bc:	1bc0      	subs	r0, r0, r7
 80059be:	2802      	cmp	r0, #2
 80059c0:	f201 81e8 	bhi.w	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80059c4:	682b      	ldr	r3, [r5, #0]
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	d4f6      	bmi.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80059ca:	f104 0008 	add.w	r0, r4, #8
 80059ce:	f7ff fac7 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059d2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80059d6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80059d8:	2d00      	cmp	r5, #0
 80059da:	f041 80c6 	bne.w	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80059de:	4f7a      	ldr	r7, [pc, #488]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80059e0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80059e4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80059e8:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 80059ec:	4301      	orrs	r1, r0
 80059ee:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059f2:	0319      	lsls	r1, r3, #12
 80059f4:	d536      	bpl.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80059f6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 80059fa:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80059fe:	f000 87f9 	beq.w	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x192c>
 8005a02:	f200 81b9 	bhi.w	8005d78 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8005a06:	2900      	cmp	r1, #0
 8005a08:	f000 8476 	beq.w	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x1230>
 8005a0c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005a10:	f040 81ba 	bne.w	8005d88 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
  __HAL_RCC_PLL2_DISABLE();
 8005a14:	4d6c      	ldr	r5, [pc, #432]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005a16:	682b      	ldr	r3, [r5, #0]
 8005a18:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a1c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005a1e:	f7fd ff4b 	bl	80038b8 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a22:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005a24:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	d508      	bpl.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x974>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a2a:	f7fd ff45 	bl	80038b8 <HAL_GetTick>
 8005a2e:	1bc0      	subs	r0, r0, r7
 8005a30:	2802      	cmp	r0, #2
 8005a32:	f201 81cd 	bhi.w	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a36:	682b      	ldr	r3, [r5, #0]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	d4f6      	bmi.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x962>
 8005a3c:	f104 0008 	add.w	r0, r4, #8
 8005a40:	f7ff fa8e 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005a44:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005a48:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005a4a:	2d00      	cmp	r5, #0
 8005a4c:	f040 845c 	bne.w	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1240>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005a50:	4f5d      	ldr	r7, [pc, #372]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005a52:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8005a56:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8005a5a:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8005a5e:	4301      	orrs	r1, r0
 8005a60:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8005a64:	02d9      	lsls	r1, r3, #11
 8005a66:	d536      	bpl.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8005a68:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8005a6c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005a70:	f000 87a5 	beq.w	80069be <HAL_RCCEx_PeriphCLKConfig+0x18f6>
 8005a74:	f200 818b 	bhi.w	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8005a78:	2900      	cmp	r1, #0
 8005a7a:	f000 8448 	beq.w	800630e <HAL_RCCEx_PeriphCLKConfig+0x1246>
 8005a7e:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8005a82:	f040 818c 	bne.w	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
  __HAL_RCC_PLL2_DISABLE();
 8005a86:	4d50      	ldr	r5, [pc, #320]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a8e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005a90:	f7fd ff12 	bl	80038b8 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a94:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005a96:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	d508      	bpl.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005a9c:	f7fd ff0c 	bl	80038b8 <HAL_GetTick>
 8005aa0:	1bc0      	subs	r0, r0, r7
 8005aa2:	2802      	cmp	r0, #2
 8005aa4:	f201 8188 	bhi.w	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	011b      	lsls	r3, r3, #4
 8005aac:	d4f6      	bmi.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005aae:	f104 0008 	add.w	r0, r4, #8
 8005ab2:	f7ff fa55 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005ab6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005aba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	f040 842e 	bne.w	800631e <HAL_RCCEx_PeriphCLKConfig+0x1256>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005ac2:	4f41      	ldr	r7, [pc, #260]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005ac4:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8005ac8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8005acc:	f421 1160 	bic.w	r1, r1, #3670016	; 0x380000
 8005ad0:	4301      	orrs	r1, r0
 8005ad2:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005ad6:	0299      	lsls	r1, r3, #10
 8005ad8:	d516      	bpl.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8005ada:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 8005ade:	2902      	cmp	r1, #2
 8005ae0:	f000 8435 	beq.w	800634e <HAL_RCCEx_PeriphCLKConfig+0x1286>
 8005ae4:	d903      	bls.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8005ae6:	3903      	subs	r1, #3
 8005ae8:	2902      	cmp	r1, #2
 8005aea:	f200 831a 	bhi.w	8006122 <HAL_RCCEx_PeriphCLKConfig+0x105a>
    if (ret == HAL_OK)
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	f040 87d8 	bne.w	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005af4:	4f34      	ldr	r7, [pc, #208]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005af6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8005afa:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8005afe:	f021 0107 	bic.w	r1, r1, #7
 8005b02:	4301      	orrs	r1, r0
 8005b04:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8005b08:	0590      	lsls	r0, r2, #22
 8005b0a:	d507      	bpl.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8005b0c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8005b10:	f031 0008 	bics.w	r0, r1, #8
 8005b14:	f000 835f 	beq.w	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005b18:	2601      	movs	r6, #1
 8005b1a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b1c:	0199      	lsls	r1, r3, #6
 8005b1e:	f100 8368 	bmi.w	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x112a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005b22:	0158      	lsls	r0, r3, #5
 8005b24:	d50d      	bpl.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    switch (pPeriphClkInit->RngClockSelection)
 8005b26:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8005b2a:	2910      	cmp	r1, #16
 8005b2c:	f000 8406 	beq.w	800633c <HAL_RCCEx_PeriphCLKConfig+0x1274>
 8005b30:	f240 8138 	bls.w	8005da4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005b34:	f021 0010 	bic.w	r0, r1, #16
 8005b38:	2820      	cmp	r0, #32
 8005b3a:	f000 8136 	beq.w	8005daa <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8005b3e:	2601      	movs	r6, #1
 8005b40:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005b42:	0259      	lsls	r1, r3, #9
 8005b44:	d52d      	bpl.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xada>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8005b46:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 8005b4a:	2900      	cmp	r1, #0
 8005b4c:	f000 83f0 	beq.w	8006330 <HAL_RCCEx_PeriphCLKConfig+0x1268>
 8005b50:	2940      	cmp	r1, #64	; 0x40
 8005b52:	f040 82ef 	bne.w	8006134 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  __HAL_RCC_PLL2_DISABLE();
 8005b56:	4d1c      	ldr	r5, [pc, #112]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005b58:	682b      	ldr	r3, [r5, #0]
 8005b5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b5e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005b60:	f7fd feaa 	bl	80038b8 <HAL_GetTick>
 8005b64:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b66:	e005      	b.n	8005b74 <HAL_RCCEx_PeriphCLKConfig+0xaac>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b68:	f7fd fea6 	bl	80038b8 <HAL_GetTick>
 8005b6c:	1bc0      	subs	r0, r0, r7
 8005b6e:	2802      	cmp	r0, #2
 8005b70:	f201 8146 	bhi.w	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x1d38>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	d4f6      	bmi.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8005b7a:	f104 0008 	add.w	r0, r4, #8
 8005b7e:	f7ff f9ef 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005b82:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005b86:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	f041 8136 	bne.w	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x1d32>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8005b8e:	4f0e      	ldr	r7, [pc, #56]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005b90:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8005b94:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005b98:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8005b9c:	4301      	orrs	r1, r0
 8005b9e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005ba2:	021f      	lsls	r7, r3, #8
 8005ba4:	d52f      	bpl.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8005ba6:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8005baa:	2900      	cmp	r1, #0
 8005bac:	f000 83ba 	beq.w	8006324 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8005bb0:	2980      	cmp	r1, #128	; 0x80
 8005bb2:	f040 82b9 	bne.w	8006128 <HAL_RCCEx_PeriphCLKConfig+0x1060>
  __HAL_RCC_PLL2_DISABLE();
 8005bb6:	4d04      	ldr	r5, [pc, #16]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bbe:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005bc0:	f7fd fe7a 	bl	80038b8 <HAL_GetTick>
 8005bc4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bc6:	e007      	b.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8005bc8:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bcc:	f7fd fe74 	bl	80038b8 <HAL_GetTick>
 8005bd0:	1bc0      	subs	r0, r0, r7
 8005bd2:	2802      	cmp	r0, #2
 8005bd4:	f201 8120 	bhi.w	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1d50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	0118      	lsls	r0, r3, #4
 8005bdc:	d4f6      	bmi.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8005bde:	f104 0008 	add.w	r0, r4, #8
 8005be2:	f7ff f9bd 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005be6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005bea:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005bec:	2d00      	cmp	r5, #0
 8005bee:	f041 8101 	bne.w	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x1d2c>
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8005bf2:	4f91      	ldr	r7, [pc, #580]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8005bf4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 8005bf8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005bfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c00:	4301      	orrs	r1, r0
 8005c02:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005c06:	0119      	lsls	r1, r3, #4
 8005c08:	f140 80ed 	bpl.w	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8005c0c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8005c10:	2904      	cmp	r1, #4
 8005c12:	f201 8150 	bhi.w	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x1dee>
 8005c16:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005c1a:	00d4      	.short	0x00d4
 8005c1c:	070b072a 	.word	0x070b072a
 8005c20:	00d900d9 	.word	0x00d900d9
    switch (pPeriphClkInit->Uart12ClockSelection)
 8005c24:	f021 0010 	bic.w	r0, r1, #16
 8005c28:	2840      	cmp	r0, #64	; 0x40
 8005c2a:	f43f acfd 	beq.w	8005628 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8005c2e:	2930      	cmp	r1, #48	; 0x30
 8005c30:	f43f acfa 	beq.w	8005628 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8005c34:	2601      	movs	r6, #1
 8005c36:	4635      	mov	r5, r6
 8005c38:	e503      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8005c3a:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8005c3e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005c42:	f43f ad26 	beq.w	8005692 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005c46:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005c4a:	f43f ad22 	beq.w	8005692 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8005c4e:	2601      	movs	r6, #1
 8005c50:	4635      	mov	r5, r6
 8005c52:	e52b      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8005c54:	2900      	cmp	r1, #0
 8005c56:	f47f ad6f 	bne.w	8005738 <HAL_RCCEx_PeriphCLKConfig+0x670>
    if (ret == HAL_OK)
 8005c5a:	2d00      	cmp	r5, #0
 8005c5c:	f040 8725 	bne.w	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x19e2>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005c60:	4f75      	ldr	r7, [pc, #468]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8005c62:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8005c66:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005c6a:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8005c6e:	4301      	orrs	r1, r0
 8005c70:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8005c74:	e562      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8005c76:	2900      	cmp	r1, #0
 8005c78:	f47f ad4c 	bne.w	8005714 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    if (ret == HAL_OK)
 8005c7c:	2d00      	cmp	r5, #0
 8005c7e:	f040 8720 	bne.w	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005c82:	4f6d      	ldr	r7, [pc, #436]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8005c84:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8005c88:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005c8c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8005c90:	4301      	orrs	r1, r0
 8005c92:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8005c96:	e53f      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8005c98:	2900      	cmp	r1, #0
 8005c9a:	f47f ad17 	bne.w	80056cc <HAL_RCCEx_PeriphCLKConfig+0x604>
    if (ret == HAL_OK)
 8005c9e:	2d00      	cmp	r5, #0
 8005ca0:	f040 8709 	bne.w	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x19ee>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005ca4:	4f64      	ldr	r7, [pc, #400]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8005ca6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8005caa:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005cae:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8005cb2:	4301      	orrs	r1, r0
 8005cb4:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8005cb8:	e50a      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8005cba:	2900      	cmp	r1, #0
 8005cbc:	f47f ad18 	bne.w	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x628>
    if (ret == HAL_OK)
 8005cc0:	2d00      	cmp	r5, #0
 8005cc2:	f040 86fb 	bne.w	8006abc <HAL_RCCEx_PeriphCLKConfig+0x19f4>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005cc6:	4f5c      	ldr	r7, [pc, #368]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8005cc8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8005ccc:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8005cd0:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8005cd4:	4301      	orrs	r1, r0
 8005cd6:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8005cda:	e50b      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8005cdc:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8005ce0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005ce4:	f43f ad6c 	beq.w	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005ce8:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8005cec:	f43f ad68 	beq.w	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005cf0:	2601      	movs	r6, #1
 8005cf2:	4635      	mov	r5, r6
 8005cf4:	e571      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8005cf6:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 8005cfa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005cfe:	f43f ad94 	beq.w	800582a <HAL_RCCEx_PeriphCLKConfig+0x762>
 8005d02:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8005d06:	f43f ad90 	beq.w	800582a <HAL_RCCEx_PeriphCLKConfig+0x762>
 8005d0a:	2601      	movs	r6, #1
 8005d0c:	4635      	mov	r5, r6
 8005d0e:	e599      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8005d10:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8005d14:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8005d18:	f43f adbc 	beq.w	8005894 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005d1c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8005d20:	f43f adb8 	beq.w	8005894 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8005d24:	2601      	movs	r6, #1
 8005d26:	4635      	mov	r5, r6
 8005d28:	e5c1      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8005d2a:	f421 1080 	bic.w	r0, r1, #1048576	; 0x100000
 8005d2e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8005d32:	f43f ade7 	beq.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005d36:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8005d3a:	f43f ade3 	beq.w	8005904 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8005d3e:	2601      	movs	r6, #1
 8005d40:	4635      	mov	r5, r6
 8005d42:	e5ec      	b.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8005d44:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8005d48:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005d4c:	f43f ae0f 	beq.w	800596e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005d50:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005d54:	f43f ae0b 	beq.w	800596e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8005d58:	2601      	movs	r6, #1
 8005d5a:	4635      	mov	r5, r6
 8005d5c:	e614      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8005d5e:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8005d62:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005d66:	f43f ae37 	beq.w	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005d6a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8005d6e:	f43f ae33 	beq.w	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8005d72:	2601      	movs	r6, #1
 8005d74:	4635      	mov	r5, r6
 8005d76:	e63c      	b.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8005d78:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8005d7c:	f43f ae65 	beq.w	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8005d80:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8005d84:	f43f ae61 	beq.w	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8005d88:	2601      	movs	r6, #1
 8005d8a:	4635      	mov	r5, r6
 8005d8c:	e66a      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8005d8e:	f5b1 1fc0 	cmp.w	r1, #1572864	; 0x180000
 8005d92:	f43f ae93 	beq.w	8005abc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8005d96:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005d9a:	f43f ae8f 	beq.w	8005abc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8005d9e:	2601      	movs	r6, #1
 8005da0:	4635      	mov	r5, r6
 8005da2:	e698      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->RngClockSelection)
 8005da4:	2900      	cmp	r1, #0
 8005da6:	f47f aeca 	bne.w	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xa76>
    if (ret == HAL_OK)
 8005daa:	2d00      	cmp	r5, #0
 8005dac:	f040 8365 	bne.w	800647a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005db0:	4f21      	ldr	r7, [pc, #132]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8005db2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8005db6:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8005dba:	4301      	orrs	r1, r0
 8005dbc:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8005dc0:	e6bf      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dc2:	481d      	ldr	r0, [pc, #116]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8005dc4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8005dc6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8005dca:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8005dcc:	2d00      	cmp	r5, #0
 8005dce:	f040 864b 	bne.w	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x19a0>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005dd2:	4f19      	ldr	r7, [pc, #100]	; (8005e38 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8005dd4:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8005dd8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8005ddc:	f021 0107 	bic.w	r1, r1, #7
 8005de0:	4301      	orrs	r1, r0
 8005de2:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005de6:	00d9      	lsls	r1, r3, #3
 8005de8:	d52a      	bpl.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    switch (pPeriphClkInit->Spi2ClockSelection)
 8005dea:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 8005dee:	2920      	cmp	r1, #32
 8005df0:	d824      	bhi.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8005df2:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005df6:	0264      	.short	0x0264
 8005df8:	00230023 	.word	0x00230023
 8005dfc:	00230023 	.word	0x00230023
 8005e00:	00230023 	.word	0x00230023
 8005e04:	07090023 	.word	0x07090023
 8005e08:	00230023 	.word	0x00230023
 8005e0c:	00230023 	.word	0x00230023
 8005e10:	00230023 	.word	0x00230023
 8005e14:	06ea0023 	.word	0x06ea0023
 8005e18:	00230023 	.word	0x00230023
 8005e1c:	00230023 	.word	0x00230023
 8005e20:	00230023 	.word	0x00230023
 8005e24:	02690023 	.word	0x02690023
 8005e28:	00230023 	.word	0x00230023
 8005e2c:	00230023 	.word	0x00230023
 8005e30:	00230023 	.word	0x00230023
 8005e34:	02690023 	.word	0x02690023
 8005e38:	44020c00 	.word	0x44020c00
 8005e3c:	2601      	movs	r6, #1
 8005e3e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005e40:	0099      	lsls	r1, r3, #2
 8005e42:	d534      	bpl.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8005e44:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8005e48:	2980      	cmp	r1, #128	; 0x80
 8005e4a:	f000 859d 	beq.w	8006988 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
 8005e4e:	f200 80d5 	bhi.w	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8005e52:	2900      	cmp	r1, #0
 8005e54:	f000 8246 	beq.w	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
 8005e58:	2940      	cmp	r1, #64	; 0x40
 8005e5a:	f040 80d6 	bne.w	800600a <HAL_RCCEx_PeriphCLKConfig+0xf42>
  __HAL_RCC_PLL2_DISABLE();
 8005e5e:	4db4      	ldr	r5, [pc, #720]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8005e60:	682b      	ldr	r3, [r5, #0]
 8005e62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e66:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005e68:	f7fd fd26 	bl	80038b8 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e6c:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005e6e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e70:	011a      	lsls	r2, r3, #4
 8005e72:	d508      	bpl.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e74:	f7fd fd20 	bl	80038b8 <HAL_GetTick>
 8005e78:	1bc0      	subs	r0, r0, r7
 8005e7a:	2802      	cmp	r0, #2
 8005e7c:	f200 87a2 	bhi.w	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	011a      	lsls	r2, r3, #4
 8005e84:	d4f6      	bmi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005e86:	f104 0008 	add.w	r0, r4, #8
 8005e8a:	f7ff f869 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005e8e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005e92:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005e94:	2d00      	cmp	r5, #0
 8005e96:	f040 822d 	bne.w	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x122c>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005e9a:	4fa5      	ldr	r7, [pc, #660]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8005e9c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8005ea0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8005ea4:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8005ea8:	4301      	orrs	r1, r0
 8005eaa:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8005eae:	0058      	lsls	r0, r3, #1
 8005eb0:	d532      	bpl.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8005eb2:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8005eb6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005eba:	f000 8376 	beq.w	80065aa <HAL_RCCEx_PeriphCLKConfig+0x14e2>
 8005ebe:	f200 80a7 	bhi.w	8006010 <HAL_RCCEx_PeriphCLKConfig+0xf48>
 8005ec2:	b1e1      	cbz	r1, 8005efe <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8005ec4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005ec8:	f040 80ac 	bne.w	8006024 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
  __HAL_RCC_PLL2_DISABLE();
 8005ecc:	4d98      	ldr	r5, [pc, #608]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8005ece:	682b      	ldr	r3, [r5, #0]
 8005ed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ed4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005ed6:	f7fd fcef 	bl	80038b8 <HAL_GetTick>
 8005eda:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005edc:	e005      	b.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0xe22>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ede:	f7fd fceb 	bl	80038b8 <HAL_GetTick>
 8005ee2:	1bc0      	subs	r0, r0, r7
 8005ee4:	2802      	cmp	r0, #2
 8005ee6:	f200 8761 	bhi.w	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005eea:	682b      	ldr	r3, [r5, #0]
 8005eec:	0119      	lsls	r1, r3, #4
 8005eee:	d4f6      	bmi.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xe16>
 8005ef0:	f104 0008 	add.w	r0, r4, #8
 8005ef4:	f7ff f834 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005ef8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005efc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005efe:	2d00      	cmp	r5, #0
 8005f00:	f040 864e 	bne.w	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8005f04:	4f8a      	ldr	r7, [pc, #552]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8005f06:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8005f0a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8005f0e:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8005f12:	4301      	orrs	r1, r0
 8005f14:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	da30      	bge.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8005f1c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8005f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f24:	f000 8325 	beq.w	8006572 <HAL_RCCEx_PeriphCLKConfig+0x14aa>
 8005f28:	d87f      	bhi.n	800602a <HAL_RCCEx_PeriphCLKConfig+0xf62>
 8005f2a:	b1db      	cbz	r3, 8005f64 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8005f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f30:	f040 8083 	bne.w	800603a <HAL_RCCEx_PeriphCLKConfig+0xf72>
  __HAL_RCC_PLL2_DISABLE();
 8005f34:	4d7e      	ldr	r5, [pc, #504]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8005f36:	682b      	ldr	r3, [r5, #0]
 8005f38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005f3e:	f7fd fcbb 	bl	80038b8 <HAL_GetTick>
 8005f42:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f44:	e005      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005f46:	f7fd fcb7 	bl	80038b8 <HAL_GetTick>
 8005f4a:	1bc0      	subs	r0, r0, r7
 8005f4c:	2802      	cmp	r0, #2
 8005f4e:	f200 870d 	bhi.w	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f52:	682b      	ldr	r3, [r5, #0]
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	d4f6      	bmi.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
 8005f58:	f104 0008 	add.w	r0, r4, #8
 8005f5c:	f7ff f800 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
 8005f60:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f62:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	f040 8615 	bne.w	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8005f6a:	4971      	ldr	r1, [pc, #452]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8005f6c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8005f70:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 8005f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f78:	4303      	orrs	r3, r0
 8005f7a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005f7e:	07d1      	lsls	r1, r2, #31
 8005f80:	d52f      	bpl.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8005f82:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8005f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8a:	f000 84a8 	beq.w	80068de <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8005f8e:	d857      	bhi.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0xf78>
 8005f90:	b1d3      	cbz	r3, 8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8005f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f96:	d15b      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xf88>
  __HAL_RCC_PLL2_DISABLE();
 8005f98:	4d65      	ldr	r5, [pc, #404]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8005f9a:	682b      	ldr	r3, [r5, #0]
 8005f9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fa0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005fa2:	f7fd fc89 	bl	80038b8 <HAL_GetTick>
 8005fa6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fa8:	e005      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0xeee>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005faa:	f7fd fc85 	bl	80038b8 <HAL_GetTick>
 8005fae:	1bc0      	subs	r0, r0, r7
 8005fb0:	2802      	cmp	r0, #2
 8005fb2:	f200 86ac 	bhi.w	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005fb6:	682b      	ldr	r3, [r5, #0]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	d4f6      	bmi.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0xee2>
 8005fbc:	f104 0008 	add.w	r0, r4, #8
 8005fc0:	f7fe ffce 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
 8005fc4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fc6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8005fc8:	2d00      	cmp	r5, #0
 8005fca:	f040 85c8 	bne.w	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1a96>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8005fce:	4958      	ldr	r1, [pc, #352]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8005fd0:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8005fd4:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 8005fd8:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8005fdc:	4303      	orrs	r3, r0
 8005fde:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005fe2:	0791      	lsls	r1, r2, #30
 8005fe4:	d538      	bpl.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->OspiClockSelection)
 8005fe6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8005fea:	2b03      	cmp	r3, #3
 8005fec:	f200 876b 	bhi.w	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0x1dfe>
 8005ff0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005ff4:	00840089 	.word	0x00840089
 8005ff8:	008904ae 	.word	0x008904ae
    switch (pPeriphClkInit->Spi3ClockSelection)
 8005ffc:	29c0      	cmp	r1, #192	; 0xc0
 8005ffe:	f43f af49 	beq.w	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 8006002:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006006:	f43f af45 	beq.w	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 800600a:	2601      	movs	r6, #1
 800600c:	4635      	mov	r5, r6
 800600e:	e74e      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8006010:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 8006014:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006018:	f43f af71 	beq.w	8005efe <HAL_RCCEx_PeriphCLKConfig+0xe36>
 800601c:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8006020:	f43f af6d 	beq.w	8005efe <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8006024:	2601      	movs	r6, #1
 8006026:	4635      	mov	r5, r6
 8006028:	e776      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi5ClockSelection)
 800602a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800602e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006032:	d097      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8006034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006038:	d094      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 800603a:	2601      	movs	r6, #1
 800603c:	4635      	mov	r5, r6
 800603e:	e79e      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8006040:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006044:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006048:	d0be      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800604a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800604e:	d0bb      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8006050:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006052:	0791      	lsls	r1, r2, #30
    switch (pPeriphClkInit->Spi6ClockSelection)
 8006054:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006056:	d4c6      	bmi.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006058:	0757      	lsls	r7, r2, #29
 800605a:	d50c      	bpl.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xfae>
    switch (pPeriphClkInit->FdcanClockSelection)
 800605c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006064:	d069      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x1072>
 8006066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800606a:	f000 8209 	beq.w	8006480 <HAL_RCCEx_PeriphCLKConfig+0x13b8>
 800606e:	2b00      	cmp	r3, #0
 8006070:	d068      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006072:	2601      	movs	r6, #1
 8006074:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006076:	06d1      	lsls	r1, r2, #27
 8006078:	d509      	bpl.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
    switch (pPeriphClkInit->UsbClockSelection)
 800607a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800607e:	2b20      	cmp	r3, #32
 8006080:	f000 839a 	beq.w	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006084:	2b30      	cmp	r3, #48	; 0x30
 8006086:	d070      	beq.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x10a2>
 8006088:	2b10      	cmp	r3, #16
 800608a:	d069      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x1098>
 800608c:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800608e:	0713      	lsls	r3, r2, #28
 8006090:	d509      	bpl.n	80060a6 <HAL_RCCEx_PeriphCLKConfig+0xfde>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006092:	4a27      	ldr	r2, [pc, #156]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006094:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 8006098:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800609c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80060a0:	430b      	orrs	r3, r1
 80060a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 80060a6:	4630      	mov	r0, r6
 80060a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_RCC_PLL3_DISABLE();
 80060ac:	4d20      	ldr	r5, [pc, #128]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80060b6:	f7fd fbff 	bl	80038b8 <HAL_GetTick>
 80060ba:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060bc:	e005      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x1002>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80060be:	f7fd fbfb 	bl	80038b8 <HAL_GetTick>
 80060c2:	1bc0      	subs	r0, r0, r7
 80060c4:	2802      	cmp	r0, #2
 80060c6:	f200 866b 	bhi.w	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060ca:	682b      	ldr	r3, [r5, #0]
 80060cc:	0098      	lsls	r0, r3, #2
 80060ce:	d4f6      	bmi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xff6>
 80060d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80060d4:	f7fe ff9e 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80060d8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80060dc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80060de:	2d00      	cmp	r5, #0
 80060e0:	f040 8567 	bne.w	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 80060e4:	4f12      	ldr	r7, [pc, #72]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80060e6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 80060ea:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80060ee:	f021 0107 	bic.w	r1, r1, #7
 80060f2:	4301      	orrs	r1, r0
 80060f4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80060f8:	f7ff ba6d 	b.w	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060fc:	490c      	ldr	r1, [pc, #48]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80060fe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006104:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8006106:	2d00      	cmp	r5, #0
 8006108:	f040 81d6 	bne.w	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800610c:	4908      	ldr	r1, [pc, #32]	; (8006130 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800610e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8006112:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 8006116:	f023 0303 	bic.w	r3, r3, #3
 800611a:	4303      	orrs	r3, r0
 800611c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006120:	e79a      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8006122:	2601      	movs	r6, #1
 8006124:	4635      	mov	r5, r6
 8006126:	e4ef      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006128:	2601      	movs	r6, #1
 800612a:	4635      	mov	r5, r6
 800612c:	e56b      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 800612e:	bf00      	nop
 8006130:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006134:	2601      	movs	r6, #1
 8006136:	4635      	mov	r5, r6
 8006138:	e533      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xada>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800613a:	49b5      	ldr	r1, [pc, #724]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800613c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800613e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006142:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8006144:	2d00      	cmp	r5, #0
 8006146:	f040 81b9 	bne.w	80064bc <HAL_RCCEx_PeriphCLKConfig+0x13f4>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 800614a:	49b1      	ldr	r1, [pc, #708]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800614c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8006150:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
 8006154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006158:	4303      	orrs	r3, r0
 800615a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 800615e:	e78a      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xfae>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006160:	49ab      	ldr	r1, [pc, #684]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006162:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006168:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 800616a:	2d00      	cmp	r5, #0
 800616c:	f040 81a8 	bne.w	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006170:	49a7      	ldr	r1, [pc, #668]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006172:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8006176:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 800617a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800617e:	4303      	orrs	r3, r0
 8006180:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006184:	e783      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 8006186:	4da2      	ldr	r5, [pc, #648]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800618e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006190:	f7fd fb92 	bl	80038b8 <HAL_GetTick>
 8006194:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006196:	e005      	b.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006198:	f7fd fb8e 	bl	80038b8 <HAL_GetTick>
 800619c:	1bc0      	subs	r0, r0, r7
 800619e:	2802      	cmp	r0, #2
 80061a0:	f200 8646 	bhi.w	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	d4f6      	bmi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x10d0>
 80061aa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80061ae:	f7fe ff31 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061b2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80061b6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	f040 8479 	bne.w	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x19e8>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 80061be:	4f94      	ldr	r7, [pc, #592]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80061c0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 80061c4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80061c8:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 80061cc:	4301      	orrs	r1, r0
 80061ce:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80061d2:	f7ff bac1 	b.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x690>
    if (ret == HAL_OK)
 80061d6:	2d00      	cmp	r5, #0
 80061d8:	f040 8327 	bne.w	800682a <HAL_RCCEx_PeriphCLKConfig+0x1762>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 80061dc:	4f8c      	ldr	r7, [pc, #560]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80061de:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80061e2:	f020 0008 	bic.w	r0, r0, #8
 80061e6:	4301      	orrs	r1, r0
 80061e8:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061ec:	0199      	lsls	r1, r3, #6
 80061ee:	f57f ac98 	bpl.w	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 80061f2:	4f88      	ldr	r7, [pc, #544]	; (8006414 <HAL_RCCEx_PeriphCLKConfig+0x134c>)
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	627b      	str	r3, [r7, #36]	; 0x24
    tickstart = HAL_GetTick();
 80061fc:	f7fd fb5c 	bl	80038b8 <HAL_GetTick>
 8006200:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006202:	e006      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x114a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006204:	f7fd fb58 	bl	80038b8 <HAL_GetTick>
 8006208:	eba0 0008 	sub.w	r0, r0, r8
 800620c:	2802      	cmp	r0, #2
 800620e:	f200 8549 	bhi.w	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	07db      	lsls	r3, r3, #31
 8006216:	d5f5      	bpl.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x113c>
    if (ret == HAL_OK)
 8006218:	2d00      	cmp	r5, #0
 800621a:	f040 863d 	bne.w	8006e98 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800621e:	4f7c      	ldr	r7, [pc, #496]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 8006220:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006224:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK)
 8006228:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800622c:	d02b      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x11be>
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 800622e:	f402 7140 	and.w	r1, r2, #768	; 0x300
 8006232:	4299      	cmp	r1, r3
 8006234:	d029      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006236:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 800623a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800623e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006242:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006246:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800624a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800624e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006252:	f420 7340 	bic.w	r3, r0, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006256:	07c0      	lsls	r0, r0, #31
        RCC->BDCR = tmpregister;
 8006258:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800625c:	f140 8625 	bpl.w	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x1de2>
        tickstart = HAL_GetTick();
 8006260:	f7fd fb2a 	bl	80038b8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006264:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006268:	4680      	mov	r8, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800626a:	e006      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x11b2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800626c:	f7fd fb24 	bl	80038b8 <HAL_GetTick>
 8006270:	eba0 0008 	sub.w	r0, r0, r8
 8006274:	4548      	cmp	r0, r9
 8006276:	f200 8515 	bhi.w	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800627a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800627e:	079b      	lsls	r3, r3, #30
 8006280:	d5f4      	bpl.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x11a4>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006282:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8006286:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800628a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800628e:	f000 85f8 	beq.w	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x1dba>
 8006292:	495f      	ldr	r1, [pc, #380]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006294:	69cb      	ldr	r3, [r1, #28]
 8006296:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800629a:	61cb      	str	r3, [r1, #28]
 800629c:	4b5c      	ldr	r3, [pc, #368]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800629e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80062a2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80062a6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80062aa:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 80062ae:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 80062b2:	430a      	orrs	r2, r1
 80062b4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80062bc:	e431      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062be:	4854      	ldr	r0, [pc, #336]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80062c0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80062c2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80062c6:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	f040 849a 	bne.w	8006c02 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80062ce:	4f50      	ldr	r7, [pc, #320]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80062d0:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 80062d4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80062d8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 80062dc:	4301      	orrs	r1, r0
 80062de:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 80062e2:	e5ad      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd78>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062e4:	484a      	ldr	r0, [pc, #296]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80062e6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80062e8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80062ec:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	f43f add3 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062f4:	462e      	mov	r6, r5
 80062f6:	e5da      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0xde6>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062f8:	4845      	ldr	r0, [pc, #276]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80062fa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80062fc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006300:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8006302:	2d00      	cmp	r5, #0
 8006304:	f43f aba4 	beq.w	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006308:	462e      	mov	r6, r5
 800630a:	f7ff bbab 	b.w	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x99c>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630e:	4840      	ldr	r0, [pc, #256]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006310:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006312:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006316:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8006318:	2d00      	cmp	r5, #0
 800631a:	f43f abd2 	beq.w	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800631e:	462e      	mov	r6, r5
 8006320:	f7ff bbd9 	b.w	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	483a      	ldr	r0, [pc, #232]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006326:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006328:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800632c:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 800632e:	e45d      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0xb24>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006330:	4837      	ldr	r0, [pc, #220]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006332:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006334:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006338:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 800633a:	e425      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0xac0>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800633c:	4f34      	ldr	r7, [pc, #208]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800633e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006340:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8006344:	62b8      	str	r0, [r7, #40]	; 0x28
    if (ret == HAL_OK)
 8006346:	2d00      	cmp	r5, #0
 8006348:	f040 8097 	bne.w	800647a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 800634c:	e530      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  __HAL_RCC_PLL2_DISABLE();
 800634e:	4d30      	ldr	r5, [pc, #192]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006356:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006358:	f7fd faae 	bl	80038b8 <HAL_GetTick>
 800635c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800635e:	e005      	b.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x12a4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006360:	f7fd faaa 	bl	80038b8 <HAL_GetTick>
 8006364:	1bc0      	subs	r0, r0, r7
 8006366:	2802      	cmp	r0, #2
 8006368:	f200 8574 	bhi.w	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	d4f6      	bmi.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1298>
 8006372:	f104 0008 	add.w	r0, r4, #8
 8006376:	f7fe fdf3 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 800637a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800637e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006380:	2d00      	cmp	r5, #0
 8006382:	f43f abb7 	beq.w	8005af4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006386:	e38d      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
  __HAL_RCC_PLL3_DISABLE();
 8006388:	4d21      	ldr	r5, [pc, #132]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800638a:	682b      	ldr	r3, [r5, #0]
 800638c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006390:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006392:	f7fd fa91 	bl	80038b8 <HAL_GetTick>
 8006396:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006398:	e005      	b.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x12de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800639a:	f7fd fa8d 	bl	80038b8 <HAL_GetTick>
 800639e:	1bc0      	subs	r0, r0, r7
 80063a0:	2802      	cmp	r0, #2
 80063a2:	f200 853f 	bhi.w	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063a6:	682b      	ldr	r3, [r5, #0]
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	d4f6      	bmi.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 80063ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80063b0:	f7fe fe30 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063b4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80063b8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80063ba:	2d00      	cmp	r5, #0
 80063bc:	f43f ac61 	beq.w	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xbba>
 80063c0:	e37f      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
  __HAL_RCC_PLL3_DISABLE();
 80063c2:	4d13      	ldr	r5, [pc, #76]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063ca:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80063cc:	f7fd fa74 	bl	80038b8 <HAL_GetTick>
 80063d0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063d2:	e005      	b.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x1318>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063d4:	f7fd fa70 	bl	80038b8 <HAL_GetTick>
 80063d8:	1bc0      	subs	r0, r0, r7
 80063da:	2802      	cmp	r0, #2
 80063dc:	f200 8534 	bhi.w	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1d80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	0098      	lsls	r0, r3, #2
 80063e4:	d4f6      	bmi.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 80063e6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80063ea:	f7fe fe13 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80063ee:	e9d4 3200 	ldrd	r3, r2, [r4]
 80063f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80063f4:	2d00      	cmp	r5, #0
 80063f6:	f43f ac33 	beq.w	8005c60 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80063fa:	e356      	b.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x19e2>
  __HAL_RCC_PLL3_DISABLE();
 80063fc:	4d04      	ldr	r5, [pc, #16]	; (8006410 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80063fe:	682b      	ldr	r3, [r5, #0]
 8006400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006404:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006406:	f7fd fa57 	bl	80038b8 <HAL_GetTick>
 800640a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800640c:	e00a      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x135c>
 800640e:	bf00      	nop
 8006410:	44020c00 	.word	0x44020c00
 8006414:	44020800 	.word	0x44020800
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006418:	f7fd fa4e 	bl	80038b8 <HAL_GetTick>
 800641c:	1bc0      	subs	r0, r0, r7
 800641e:	2802      	cmp	r0, #2
 8006420:	f200 850c 	bhi.w	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1d74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	d4f6      	bmi.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x1350>
 800642a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800642e:	f7fe fdf1 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006432:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006436:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006438:	2d00      	cmp	r5, #0
 800643a:	f43f ac33 	beq.w	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
 800643e:	e33a      	b.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x19ee>
  __HAL_RCC_PLL3_DISABLE();
 8006440:	4db5      	ldr	r5, [pc, #724]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006442:	682b      	ldr	r3, [r5, #0]
 8006444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006448:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800644a:	f7fd fa35 	bl	80038b8 <HAL_GetTick>
 800644e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006450:	e005      	b.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x1396>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006452:	f7fd fa31 	bl	80038b8 <HAL_GetTick>
 8006456:	1bc0      	subs	r0, r0, r7
 8006458:	2802      	cmp	r0, #2
 800645a:	f200 84d7 	bhi.w	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x1d44>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800645e:	682b      	ldr	r3, [r5, #0]
 8006460:	0098      	lsls	r0, r3, #2
 8006462:	d4f6      	bmi.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x138a>
 8006464:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006468:	f7fe fdd4 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800646c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006470:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006472:	2d00      	cmp	r5, #0
 8006474:	f43f ac27 	beq.w	8005cc6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006478:	e320      	b.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x19f4>
 800647a:	462e      	mov	r6, r5
 800647c:	f7ff bb61 	b.w	8005b42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
  __HAL_RCC_PLL2_DISABLE();
 8006480:	4da5      	ldr	r5, [pc, #660]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006488:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800648a:	f7fd fa15 	bl	80038b8 <HAL_GetTick>
 800648e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006490:	e005      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006492:	f7fd fa11 	bl	80038b8 <HAL_GetTick>
 8006496:	1bc0      	subs	r0, r0, r7
 8006498:	2802      	cmp	r0, #2
 800649a:	f200 84e9 	bhi.w	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	0118      	lsls	r0, r3, #4
 80064a2:	d4f6      	bmi.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
 80064a4:	f104 0008 	add.w	r0, r4, #8
 80064a8:	f7fe fd5a 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
 80064ac:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80064ae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80064b0:	2d00      	cmp	r5, #0
 80064b2:	f43f ae4a 	beq.w	800614a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80064b6:	e001      	b.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x13f4>
 80064b8:	462e      	mov	r6, r5
 80064ba:	e5cd      	b.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 80064bc:	462e      	mov	r6, r5
 80064be:	e5da      	b.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xfae>
 80064c0:	462e      	mov	r6, r5
 80064c2:	e5e4      	b.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 80064c4:	4d94      	ldr	r5, [pc, #592]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80064c6:	682b      	ldr	r3, [r5, #0]
 80064c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064cc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80064ce:	f7fd f9f3 	bl	80038b8 <HAL_GetTick>
 80064d2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064d4:	e005      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80064d6:	f7fd f9ef 	bl	80038b8 <HAL_GetTick>
 80064da:	1bc0      	subs	r0, r0, r7
 80064dc:	2802      	cmp	r0, #2
 80064de:	f200 8404 	bhi.w	8006cea <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80064e2:	682b      	ldr	r3, [r5, #0]
 80064e4:	0098      	lsls	r0, r3, #2
 80064e6:	d4f6      	bmi.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x140e>
 80064e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80064ec:	f7fe fd92 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80064f0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80064f4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	f43f a99a 	beq.w	8005830 <HAL_RCCEx_PeriphCLKConfig+0x768>
 80064fc:	e356      	b.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
  __HAL_RCC_PLL3_DISABLE();
 80064fe:	4d86      	ldr	r5, [pc, #536]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006500:	682b      	ldr	r3, [r5, #0]
 8006502:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006506:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006508:	f7fd f9d6 	bl	80038b8 <HAL_GetTick>
 800650c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800650e:	e005      	b.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x1454>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006510:	f7fd f9d2 	bl	80038b8 <HAL_GetTick>
 8006514:	1bc0      	subs	r0, r0, r7
 8006516:	2802      	cmp	r0, #2
 8006518:	f200 8430 	bhi.w	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	0098      	lsls	r0, r3, #2
 8006520:	d4f6      	bmi.n	8006510 <HAL_RCCEx_PeriphCLKConfig+0x1448>
 8006522:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006526:	f7fe fd75 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800652a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800652e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006530:	2d00      	cmp	r5, #0
 8006532:	f43f a9b2 	beq.w	800589a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006536:	e336      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x1ade>
  __HAL_RCC_PLL3_DISABLE();
 8006538:	4d77      	ldr	r5, [pc, #476]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006540:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006542:	f7fd f9b9 	bl	80038b8 <HAL_GetTick>
 8006546:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006548:	e005      	b.n	8006556 <HAL_RCCEx_PeriphCLKConfig+0x148e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800654a:	f7fd f9b5 	bl	80038b8 <HAL_GetTick>
 800654e:	1bc0      	subs	r0, r0, r7
 8006550:	2802      	cmp	r0, #2
 8006552:	f200 83f9 	bhi.w	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006556:	682b      	ldr	r3, [r5, #0]
 8006558:	0098      	lsls	r0, r3, #2
 800655a:	d4f6      	bmi.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x1482>
 800655c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006560:	f7fe fd58 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006564:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006568:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800656a:	2d00      	cmp	r5, #0
 800656c:	f43e aeb1 	beq.w	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006570:	e328      	b.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x1afc>
  __HAL_RCC_PLL3_DISABLE();
 8006572:	4d69      	ldr	r5, [pc, #420]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800657a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800657c:	f7fd f99c 	bl	80038b8 <HAL_GetTick>
 8006580:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006582:	e005      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x14c8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006584:	f7fd f998 	bl	80038b8 <HAL_GetTick>
 8006588:	1bc0      	subs	r0, r0, r7
 800658a:	2802      	cmp	r0, #2
 800658c:	f200 83ee 	bhi.w	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	0098      	lsls	r0, r3, #2
 8006594:	d4f6      	bmi.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0x14bc>
 8006596:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800659a:	f7fe fd3b 	bl	8005014 <RCCEx_PLL3_Config.part.0>
 800659e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80065a0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	f43f ace1 	beq.w	8005f6a <HAL_RCCEx_PeriphCLKConfig+0xea2>
 80065a8:	e2f4      	b.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
  __HAL_RCC_PLL3_DISABLE();
 80065aa:	4d5b      	ldr	r5, [pc, #364]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065b2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80065b4:	f7fd f980 	bl	80038b8 <HAL_GetTick>
 80065b8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065ba:	e005      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x1500>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065bc:	f7fd f97c 	bl	80038b8 <HAL_GetTick>
 80065c0:	1bc0      	subs	r0, r0, r7
 80065c2:	2802      	cmp	r0, #2
 80065c4:	f200 83f2 	bhi.w	8006dac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065c8:	682b      	ldr	r3, [r5, #0]
 80065ca:	009a      	lsls	r2, r3, #2
 80065cc:	d4f6      	bmi.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x14f4>
 80065ce:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80065d2:	f7fe fd1f 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80065d6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80065da:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80065dc:	2d00      	cmp	r5, #0
 80065de:	f43f ac91 	beq.w	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 80065e2:	e2dd      	b.n	8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
  __HAL_RCC_PLL3_DISABLE();
 80065e4:	4d4c      	ldr	r5, [pc, #304]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80065e6:	682b      	ldr	r3, [r5, #0]
 80065e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ec:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80065ee:	f7fd f963 	bl	80038b8 <HAL_GetTick>
 80065f2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065f4:	e005      	b.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x153a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065f6:	f7fd f95f 	bl	80038b8 <HAL_GetTick>
 80065fa:	1bc0      	subs	r0, r0, r7
 80065fc:	2802      	cmp	r0, #2
 80065fe:	f200 836e 	bhi.w	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006602:	682b      	ldr	r3, [r5, #0]
 8006604:	0098      	lsls	r0, r3, #2
 8006606:	d4f6      	bmi.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x152e>
 8006608:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800660c:	f7fe fd02 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006610:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006614:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006616:	2d00      	cmp	r5, #0
 8006618:	f43e ae91 	beq.w	800533e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800661c:	e2cc      	b.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x1af0>
  __HAL_RCC_PLL3_DISABLE();
 800661e:	4d3e      	ldr	r5, [pc, #248]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006626:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006628:	f7fd f946 	bl	80038b8 <HAL_GetTick>
 800662c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800662e:	e005      	b.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x1574>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006630:	f7fd f942 	bl	80038b8 <HAL_GetTick>
 8006634:	1bc0      	subs	r0, r0, r7
 8006636:	2802      	cmp	r0, #2
 8006638:	f200 836e 	bhi.w	8006d18 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	0098      	lsls	r0, r3, #2
 8006640:	d4f6      	bmi.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x1568>
 8006642:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006646:	f7fe fce5 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800664a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800664e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006650:	2d00      	cmp	r5, #0
 8006652:	f43e af41 	beq.w	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8006656:	e291      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
  __HAL_RCC_PLL3_DISABLE();
 8006658:	4d2f      	ldr	r5, [pc, #188]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800665a:	682b      	ldr	r3, [r5, #0]
 800665c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006660:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006662:	f7fd f929 	bl	80038b8 <HAL_GetTick>
 8006666:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006668:	e005      	b.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x15ae>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800666a:	f7fd f925 	bl	80038b8 <HAL_GetTick>
 800666e:	1bc0      	subs	r0, r0, r7
 8006670:	2802      	cmp	r0, #2
 8006672:	f200 8346 	bhi.w	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006676:	682b      	ldr	r3, [r5, #0]
 8006678:	0098      	lsls	r0, r3, #2
 800667a:	d4f6      	bmi.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x15a2>
 800667c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006680:	f7fe fcc8 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006684:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006688:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800668a:	2d00      	cmp	r5, #0
 800668c:	f43f a93d 	beq.w	800590a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006690:	e277      	b.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
  __HAL_RCC_PLL3_DISABLE();
 8006692:	4d21      	ldr	r5, [pc, #132]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006694:	682b      	ldr	r3, [r5, #0]
 8006696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800669a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800669c:	f7fd f90c 	bl	80038b8 <HAL_GetTick>
 80066a0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066a2:	e005      	b.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x15e8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066a4:	f7fd f908 	bl	80038b8 <HAL_GetTick>
 80066a8:	1bc0      	subs	r0, r0, r7
 80066aa:	2802      	cmp	r0, #2
 80066ac:	f200 8323 	bhi.w	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066b0:	682b      	ldr	r3, [r5, #0]
 80066b2:	0098      	lsls	r0, r3, #2
 80066b4:	d4f6      	bmi.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
 80066b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80066ba:	f7fe fcab 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80066be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80066c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	f43e aea0 	beq.w	800540a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80066ca:	e278      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1af6>
  __HAL_RCC_PLL3_DISABLE();
 80066cc:	4d12      	ldr	r5, [pc, #72]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80066ce:	682b      	ldr	r3, [r5, #0]
 80066d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066d4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80066d6:	f7fd f8ef 	bl	80038b8 <HAL_GetTick>
 80066da:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066dc:	e005      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x1622>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066de:	f7fd f8eb 	bl	80038b8 <HAL_GetTick>
 80066e2:	1bc0      	subs	r0, r0, r7
 80066e4:	2802      	cmp	r0, #2
 80066e6:	f200 8329 	bhi.w	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	0098      	lsls	r0, r3, #2
 80066ee:	d4f6      	bmi.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1616>
 80066f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80066f4:	f7fe fc8e 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80066fc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80066fe:	2d00      	cmp	r5, #0
 8006700:	f43e ad81 	beq.w	8005206 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8006704:	e237      	b.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1aae>
  __HAL_RCC_PLL3_DISABLE();
 8006706:	4d04      	ldr	r5, [pc, #16]	; (8006718 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800670e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006710:	f7fd f8d2 	bl	80038b8 <HAL_GetTick>
 8006714:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006716:	e007      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1660>
 8006718:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800671c:	f7fd f8cc 	bl	80038b8 <HAL_GetTick>
 8006720:	1bc0      	subs	r0, r0, r7
 8006722:	2802      	cmp	r0, #2
 8006724:	f200 82d5 	bhi.w	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006728:	682b      	ldr	r3, [r5, #0]
 800672a:	0098      	lsls	r0, r3, #2
 800672c:	d4f6      	bmi.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x1654>
 800672e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006732:	f7fe fc6f 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006736:	e9d4 3200 	ldrd	r3, r2, [r4]
 800673a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800673c:	2d00      	cmp	r5, #0
 800673e:	f43f a919 	beq.w	8005974 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8006742:	e209      	b.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1a90>
  __HAL_RCC_PLL3_DISABLE();
 8006744:	4db0      	ldr	r5, [pc, #704]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8006746:	682b      	ldr	r3, [r5, #0]
 8006748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800674c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800674e:	f7fd f8b3 	bl	80038b8 <HAL_GetTick>
 8006752:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006754:	e005      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006756:	f7fd f8af 	bl	80038b8 <HAL_GetTick>
 800675a:	1bc0      	subs	r0, r0, r7
 800675c:	2802      	cmp	r0, #2
 800675e:	f200 82e7 	bhi.w	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006762:	682b      	ldr	r3, [r5, #0]
 8006764:	0098      	lsls	r0, r3, #2
 8006766:	d4f6      	bmi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x168e>
 8006768:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800676c:	f7fe fc52 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006770:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006774:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006776:	2d00      	cmp	r5, #0
 8006778:	f43e ae7a 	beq.w	8005470 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800677c:	e204      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
  __HAL_RCC_PLL3_DISABLE();
 800677e:	4da2      	ldr	r5, [pc, #648]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8006780:	682b      	ldr	r3, [r5, #0]
 8006782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006786:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006788:	f7fd f896 	bl	80038b8 <HAL_GetTick>
 800678c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800678e:	e005      	b.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x16d4>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006790:	f7fd f892 	bl	80038b8 <HAL_GetTick>
 8006794:	1bc0      	subs	r0, r0, r7
 8006796:	2802      	cmp	r0, #2
 8006798:	f200 82e2 	bhi.w	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800679c:	682b      	ldr	r3, [r5, #0]
 800679e:	0098      	lsls	r0, r3, #2
 80067a0:	d4f6      	bmi.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x16c8>
 80067a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80067a6:	f7fe fc35 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80067aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80067ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	f43f a808 	beq.w	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 80067b6:	e1d5      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
  __HAL_RCC_PLL3_DISABLE();
 80067b8:	4d93      	ldr	r5, [pc, #588]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80067ba:	682b      	ldr	r3, [r5, #0]
 80067bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067c0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80067c2:	f7fd f879 	bl	80038b8 <HAL_GetTick>
 80067c6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067c8:	e005      	b.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0x170e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067ca:	f7fd f875 	bl	80038b8 <HAL_GetTick>
 80067ce:	1bc0      	subs	r0, r0, r7
 80067d0:	2802      	cmp	r0, #2
 80067d2:	f200 8352 	bhi.w	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80067d6:	682b      	ldr	r3, [r5, #0]
 80067d8:	009a      	lsls	r2, r3, #2
 80067da:	d4f6      	bmi.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1702>
 80067dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80067e0:	f7fe fc18 	bl	8005014 <RCCEx_PLL3_Config.part.0>
 80067e4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067e6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80067e8:	2d00      	cmp	r5, #0
 80067ea:	f43f acc1 	beq.w	8006170 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80067ee:	e667      	b.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
  __HAL_RCC_PLL3_DISABLE();
 80067f0:	4d85      	ldr	r5, [pc, #532]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80067f2:	682b      	ldr	r3, [r5, #0]
 80067f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80067fa:	f7fd f85d 	bl	80038b8 <HAL_GetTick>
 80067fe:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006800:	e005      	b.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x1746>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006802:	f7fd f859 	bl	80038b8 <HAL_GetTick>
 8006806:	1bc0      	subs	r0, r0, r7
 8006808:	2802      	cmp	r0, #2
 800680a:	f200 82c3 	bhi.w	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800680e:	682b      	ldr	r3, [r5, #0]
 8006810:	0098      	lsls	r0, r3, #2
 8006812:	d4f6      	bmi.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x173a>
 8006814:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006818:	f7fe fbfc 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800681c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006820:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006822:	2d00      	cmp	r5, #0
 8006824:	f43f a8db 	beq.w	80059de <HAL_RCCEx_PeriphCLKConfig+0x916>
 8006828:	e19f      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
 800682a:	462e      	mov	r6, r5
 800682c:	f7ff b976 	b.w	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  __HAL_RCC_PLL3_DISABLE();
 8006830:	4d75      	ldr	r5, [pc, #468]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8006832:	682b      	ldr	r3, [r5, #0]
 8006834:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006838:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800683a:	f7fd f83d 	bl	80038b8 <HAL_GetTick>
 800683e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006840:	e005      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x1786>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006842:	f7fd f839 	bl	80038b8 <HAL_GetTick>
 8006846:	1bc0      	subs	r0, r0, r7
 8006848:	2802      	cmp	r0, #2
 800684a:	f200 8283 	bhi.w	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800684e:	682b      	ldr	r3, [r5, #0]
 8006850:	0098      	lsls	r0, r3, #2
 8006852:	d4f6      	bmi.n	8006842 <HAL_RCCEx_PeriphCLKConfig+0x177a>
 8006854:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006858:	f7fe fbdc 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800685c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006860:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006862:	2d00      	cmp	r5, #0
 8006864:	f43e aee3 	beq.w	800562e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8006868:	e197      	b.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
  __HAL_RCC_PLL3_DISABLE();
 800686a:	4d67      	ldr	r5, [pc, #412]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800686c:	682b      	ldr	r3, [r5, #0]
 800686e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006872:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006874:	f7fd f820 	bl	80038b8 <HAL_GetTick>
 8006878:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800687a:	e005      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x17c0>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800687c:	f7fd f81c 	bl	80038b8 <HAL_GetTick>
 8006880:	1bc0      	subs	r0, r0, r7
 8006882:	2802      	cmp	r0, #2
 8006884:	f200 824e 	bhi.w	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	0098      	lsls	r0, r3, #2
 800688c:	d4f6      	bmi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x17b4>
 800688e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006892:	f7fe fbbf 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006896:	e9d4 3200 	ldrd	r3, r2, [r4]
 800689a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800689c:	2d00      	cmp	r5, #0
 800689e:	f43e ad81 	beq.w	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80068a2:	e174      	b.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
  __HAL_RCC_PLL3_DISABLE();
 80068a4:	4d58      	ldr	r5, [pc, #352]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80068a6:	682b      	ldr	r3, [r5, #0]
 80068a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ac:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80068ae:	f7fd f803 	bl	80038b8 <HAL_GetTick>
 80068b2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068b4:	e005      	b.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068b6:	f7fc ffff 	bl	80038b8 <HAL_GetTick>
 80068ba:	1bc0      	subs	r0, r0, r7
 80068bc:	2802      	cmp	r0, #2
 80068be:	f200 8202 	bhi.w	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	0098      	lsls	r0, r3, #2
 80068c6:	d4f6      	bmi.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x17ee>
 80068c8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80068cc:	f7fe fba2 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80068d0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80068d4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	f43e aede 	beq.w	8005698 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80068dc:	e148      	b.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
  __HAL_RCC_PLL3_DISABLE();
 80068de:	4d4a      	ldr	r5, [pc, #296]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80068e0:	682b      	ldr	r3, [r5, #0]
 80068e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068e6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80068e8:	f7fc ffe6 	bl	80038b8 <HAL_GetTick>
 80068ec:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068ee:	e005      	b.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1834>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80068f0:	f7fc ffe2 	bl	80038b8 <HAL_GetTick>
 80068f4:	1bc0      	subs	r0, r0, r7
 80068f6:	2802      	cmp	r0, #2
 80068f8:	f200 8209 	bhi.w	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	0098      	lsls	r0, r3, #2
 8006900:	d4f6      	bmi.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1828>
 8006902:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006906:	f7fe fb85 	bl	8005014 <RCCEx_PLL3_Config.part.0>
 800690a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800690c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800690e:	2d00      	cmp	r5, #0
 8006910:	f43f ab5d 	beq.w	8005fce <HAL_RCCEx_PeriphCLKConfig+0xf06>
 8006914:	e123      	b.n	8006b5e <HAL_RCCEx_PeriphCLKConfig+0x1a96>
  __HAL_RCC_PLL3_DISABLE();
 8006916:	4d3c      	ldr	r5, [pc, #240]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800691e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006920:	f7fc ffca 	bl	80038b8 <HAL_GetTick>
 8006924:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006926:	e005      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x186c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006928:	f7fc ffc6 	bl	80038b8 <HAL_GetTick>
 800692c:	1bc0      	subs	r0, r0, r7
 800692e:	2802      	cmp	r0, #2
 8006930:	f200 81c3 	bhi.w	8006cba <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006934:	682b      	ldr	r3, [r5, #0]
 8006936:	0098      	lsls	r0, r3, #2
 8006938:	d4f6      	bmi.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1860>
 800693a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800693e:	f7fe fb69 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006942:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006946:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006948:	2d00      	cmp	r5, #0
 800694a:	f43e ac8f 	beq.w	800526c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800694e:	e100      	b.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
  __HAL_RCC_PLL2_DISABLE();
 8006950:	4d2d      	ldr	r5, [pc, #180]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006958:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800695a:	f7fc ffad 	bl	80038b8 <HAL_GetTick>
 800695e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006960:	e005      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x18a6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006962:	f7fc ffa9 	bl	80038b8 <HAL_GetTick>
 8006966:	1bc0      	subs	r0, r0, r7
 8006968:	2802      	cmp	r0, #2
 800696a:	f200 827c 	bhi.w	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x1d9e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800696e:	682b      	ldr	r3, [r5, #0]
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	d4f6      	bmi.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x189a>
 8006974:	f104 0008 	add.w	r0, r4, #8
 8006978:	f7fe faf2 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
 800697c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800697e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006980:	2d00      	cmp	r5, #0
 8006982:	f43f abc3 	beq.w	800610c <HAL_RCCEx_PeriphCLKConfig+0x1044>
 8006986:	e597      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
  __HAL_RCC_PLL3_DISABLE();
 8006988:	4d1f      	ldr	r5, [pc, #124]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006990:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006992:	f7fc ff91 	bl	80038b8 <HAL_GetTick>
 8006996:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006998:	e005      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x18de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800699a:	f7fc ff8d 	bl	80038b8 <HAL_GetTick>
 800699e:	1bc0      	subs	r0, r0, r7
 80069a0:	2802      	cmp	r0, #2
 80069a2:	f200 820f 	bhi.w	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069a6:	682b      	ldr	r3, [r5, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	d4f6      	bmi.n	800699a <HAL_RCCEx_PeriphCLKConfig+0x18d2>
 80069ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80069b0:	f7fe fb30 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80069b4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80069b8:	4605      	mov	r5, r0
 80069ba:	f7ff ba6b 	b.w	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
  __HAL_RCC_PLL3_DISABLE();
 80069be:	4d12      	ldr	r5, [pc, #72]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80069c0:	682b      	ldr	r3, [r5, #0]
 80069c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80069c8:	f7fc ff76 	bl	80038b8 <HAL_GetTick>
 80069cc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069ce:	e005      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x1914>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80069d0:	f7fc ff72 	bl	80038b8 <HAL_GetTick>
 80069d4:	1bc0      	subs	r0, r0, r7
 80069d6:	2802      	cmp	r0, #2
 80069d8:	f200 81ee 	bhi.w	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	0098      	lsls	r0, r3, #2
 80069e0:	d4f6      	bmi.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x1908>
 80069e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80069e6:	f7fe fb15 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80069ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 80069ee:	4605      	mov	r5, r0
 80069f0:	f7ff b864 	b.w	8005abc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  __HAL_RCC_PLL3_DISABLE();
 80069f4:	4d04      	ldr	r5, [pc, #16]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80069fe:	f7fc ff5b 	bl	80038b8 <HAL_GetTick>
 8006a02:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a04:	e008      	b.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x1950>
 8006a06:	bf00      	nop
 8006a08:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a0c:	f7fc ff54 	bl	80038b8 <HAL_GetTick>
 8006a10:	1bc0      	subs	r0, r0, r7
 8006a12:	2802      	cmp	r0, #2
 8006a14:	f200 81dc 	bhi.w	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	0098      	lsls	r0, r3, #2
 8006a1c:	d4f6      	bmi.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x1944>
 8006a1e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006a22:	f7fe faf7 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006a26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006a2a:	4605      	mov	r5, r0
 8006a2c:	f7ff b80d 	b.w	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x982>
  __HAL_RCC_PLL3_DISABLE();
 8006a30:	4dd1      	ldr	r5, [pc, #836]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a38:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006a3a:	f7fc ff3d 	bl	80038b8 <HAL_GetTick>
 8006a3e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a40:	e005      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x1986>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006a42:	f7fc ff39 	bl	80038b8 <HAL_GetTick>
 8006a46:	1bc0      	subs	r0, r0, r7
 8006a48:	2802      	cmp	r0, #2
 8006a4a:	f200 81c7 	bhi.w	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006a4e:	682b      	ldr	r3, [r5, #0]
 8006a50:	0098      	lsls	r0, r3, #2
 8006a52:	d4f6      	bmi.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x197a>
 8006a54:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006a58:	f7fe fadc 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006a5c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006a60:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	f43f a9b5 	beq.w	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8006a68:	462e      	mov	r6, r5
 8006a6a:	f7ff b9bc 	b.w	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  __HAL_RCC_PLL2_DISABLE();
 8006a6e:	4dc2      	ldr	r5, [pc, #776]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a76:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006a78:	f7fc ff1e 	bl	80038b8 <HAL_GetTick>
 8006a7c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a7e:	e005      	b.n	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x19c4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a80:	f7fc ff1a 	bl	80038b8 <HAL_GetTick>
 8006a84:	1bc0      	subs	r0, r0, r7
 8006a86:	2802      	cmp	r0, #2
 8006a88:	f200 81a8 	bhi.w	8006ddc <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	d4f6      	bmi.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
 8006a92:	f104 0008 	add.w	r0, r4, #8
 8006a96:	f7fe fa63 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006a9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	f7ff b994 	b.w	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8006aa4:	462e      	mov	r6, r5
 8006aa6:	f7ff b82f 	b.w	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006aaa:	462e      	mov	r6, r5
 8006aac:	f7fe be46 	b.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x674>
 8006ab0:	462e      	mov	r6, r5
 8006ab2:	f7fe be51 	b.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8006ab6:	462e      	mov	r6, r5
 8006ab8:	f7fe be0a 	b.w	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006abc:	462e      	mov	r6, r5
 8006abe:	f7fe be19 	b.w	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8006ac2:	462e      	mov	r6, r5
 8006ac4:	f7fe be28 	b.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8006ac8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8006aca:	2d00      	cmp	r5, #0
 8006acc:	f040 81c8 	bne.w	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x1d98>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006ad0:	4fa9      	ldr	r7, [pc, #676]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006ad2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8006ad4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006ad8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8006adc:	4301      	orrs	r1, r0
 8006ade:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006ae2:	f7fe bb68 	b.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xee>
  __HAL_RCC_PLL2_DISABLE();
 8006ae6:	4da4      	ldr	r5, [pc, #656]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006aee:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006af0:	f7fc fee2 	bl	80038b8 <HAL_GetTick>
 8006af4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006af6:	e005      	b.n	8006b04 <HAL_RCCEx_PeriphCLKConfig+0x1a3c>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006af8:	f7fc fede 	bl	80038b8 <HAL_GetTick>
 8006afc:	1bc0      	subs	r0, r0, r7
 8006afe:	2802      	cmp	r0, #2
 8006b00:	f200 814e 	bhi.w	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	d4f6      	bmi.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x1a30>
 8006b0a:	f104 0008 	add.w	r0, r4, #8
 8006b0e:	f7fe fa27 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8006b12:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006b16:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006b18:	2d00      	cmp	r5, #0
 8006b1a:	f43f aae3 	beq.w	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x101c>
 8006b1e:	e048      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
  __HAL_RCC_PLL2_DISABLE();
 8006b20:	4d95      	ldr	r5, [pc, #596]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006b22:	682b      	ldr	r3, [r5, #0]
 8006b24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b28:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006b2a:	f7fc fec5 	bl	80038b8 <HAL_GetTick>
 8006b2e:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b30:	e005      	b.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1a76>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b32:	f7fc fec1 	bl	80038b8 <HAL_GetTick>
 8006b36:	1b80      	subs	r0, r0, r6
 8006b38:	2802      	cmp	r0, #2
 8006b3a:	f200 80b9 	bhi.w	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b3e:	682b      	ldr	r3, [r5, #0]
 8006b40:	011f      	lsls	r7, r3, #4
 8006b42:	d4f6      	bmi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x1a6a>
 8006b44:	f104 0008 	add.w	r0, r4, #8
 8006b48:	f7fe fa0a 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	f7fe baf1 	b.w	8005134 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8006b52:	462e      	mov	r6, r5
 8006b54:	f7fe bb93 	b.w	800527e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006b58:	462e      	mov	r6, r5
 8006b5a:	f7fe bf15 	b.w	8005988 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006b5e:	462e      	mov	r6, r5
 8006b60:	f7ff ba3f 	b.w	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
 8006b64:	462e      	mov	r6, r5
 8006b66:	f7fe be38 	b.w	80057da <HAL_RCCEx_PeriphCLKConfig+0x712>
 8006b6a:	462e      	mov	r6, r5
 8006b6c:	f7fe bf41 	b.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8006b70:	462e      	mov	r6, r5
 8006b72:	f7fe bd9b 	b.w	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8006b76:	462e      	mov	r6, r5
 8006b78:	f7fe bb4e 	b.w	8005218 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8006b7c:	462e      	mov	r6, r5
 8006b7e:	f7fe bcb5 	b.w	80054ec <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006b82:	462e      	mov	r6, r5
 8006b84:	f7fe becb 	b.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x856>
 8006b88:	462e      	mov	r6, r5
 8006b8a:	f7fe bc7a 	b.w	8005482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006b8e:	462e      	mov	r6, r5
 8006b90:	f7fe bc11 	b.w	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8006b94:	462e      	mov	r6, r5
 8006b96:	f7ff b9f2 	b.w	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8006b9a:	462e      	mov	r6, r5
 8006b9c:	f7fe bd51 	b.w	8005642 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006ba0:	462e      	mov	r6, r5
 8006ba2:	f7ff b9b9 	b.w	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8006ba6:	462e      	mov	r6, r5
 8006ba8:	f7fe be81 	b.w	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8006bac:	462e      	mov	r6, r5
 8006bae:	f7fe be49 	b.w	8005844 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8006bb2:	462e      	mov	r6, r5
 8006bb4:	f7fe bd0f 	b.w	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8006bb8:	462e      	mov	r6, r5
 8006bba:	f7fe bbc9 	b.w	8005350 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8006bbe:	462e      	mov	r6, r5
 8006bc0:	f7fe bc2c 	b.w	800541c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8006bc4:	462e      	mov	r6, r5
 8006bc6:	f7fe bb8d 	b.w	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  __HAL_RCC_PLL3_DISABLE();
 8006bca:	4d6b      	ldr	r5, [pc, #428]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006bcc:	682b      	ldr	r3, [r5, #0]
 8006bce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bd2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006bd4:	f7fc fe70 	bl	80038b8 <HAL_GetTick>
 8006bd8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006bda:	e005      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1b20>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006bdc:	f7fc fe6c 	bl	80038b8 <HAL_GetTick>
 8006be0:	1bc0      	subs	r0, r0, r7
 8006be2:	2802      	cmp	r0, #2
 8006be4:	f200 8100 	bhi.w	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	0098      	lsls	r0, r3, #2
 8006bec:	d4f6      	bmi.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1b14>
 8006bee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006bf2:	f7fe fa0f 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006bf6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006bfa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006bfc:	2d00      	cmp	r5, #0
 8006bfe:	f43f ab66 	beq.w	80062ce <HAL_RCCEx_PeriphCLKConfig+0x1206>
 8006c02:	462e      	mov	r6, r5
 8006c04:	f7ff b91c 	b.w	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  __HAL_RCC_PLL2_DISABLE();
 8006c08:	4d5b      	ldr	r5, [pc, #364]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006c0a:	682b      	ldr	r3, [r5, #0]
 8006c0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c10:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006c12:	f7fc fe51 	bl	80038b8 <HAL_GetTick>
 8006c16:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c18:	e005      	b.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x1b5e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c1a:	f7fc fe4d 	bl	80038b8 <HAL_GetTick>
 8006c1e:	1bc0      	subs	r0, r0, r7
 8006c20:	2802      	cmp	r0, #2
 8006c22:	f200 80e1 	bhi.w	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c26:	682b      	ldr	r3, [r5, #0]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	d4f6      	bmi.n	8006c1a <HAL_RCCEx_PeriphCLKConfig+0x1b52>
 8006c2c:	f104 0008 	add.w	r0, r4, #8
 8006c30:	f7fe f996 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006c34:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006c38:	4605      	mov	r5, r0
 8006c3a:	f7ff bb45 	b.w	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x1200>
  __HAL_RCC_PLL2_DISABLE();
 8006c3e:	4d4e      	ldr	r5, [pc, #312]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006c40:	682b      	ldr	r3, [r5, #0]
 8006c42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c46:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006c48:	f7fc fe36 	bl	80038b8 <HAL_GetTick>
 8006c4c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c4e:	e005      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x1b94>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c50:	f7fc fe32 	bl	80038b8 <HAL_GetTick>
 8006c54:	1bc0      	subs	r0, r0, r7
 8006c56:	2802      	cmp	r0, #2
 8006c58:	f200 8096 	bhi.w	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	d4f6      	bmi.n	8006c50 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8006c62:	f104 0008 	add.w	r0, r4, #8
 8006c66:	f7fe f97b 	bl	8004f60 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c6a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006c6e:	4605      	mov	r5, r0
 8006c70:	e72b      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1a02>
  __HAL_RCC_PLL3_DISABLE();
 8006c72:	4d41      	ldr	r5, [pc, #260]	; (8006d78 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006c7c:	f7fc fe1c 	bl	80038b8 <HAL_GetTick>
 8006c80:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c82:	e004      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x1bc6>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c84:	f7fc fe18 	bl	80038b8 <HAL_GetTick>
 8006c88:	1bc0      	subs	r0, r0, r7
 8006c8a:	2802      	cmp	r0, #2
 8006c8c:	d87c      	bhi.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006c8e:	682b      	ldr	r3, [r5, #0]
 8006c90:	0098      	lsls	r0, r3, #2
 8006c92:	d4f7      	bmi.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x1bbc>
 8006c94:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006c98:	f7fe f9bc 	bl	8005014 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c9c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	e712      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1a02>
            ret = HAL_TIMEOUT;
 8006ca4:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006ca6:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 8006caa:	4635      	mov	r5, r6
 8006cac:	f7fe bf39 	b.w	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006cb0:	2603      	movs	r6, #3
 8006cb2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006cb6:	f7fe ba4c 	b.w	8005152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cba:	2603      	movs	r6, #3
 8006cbc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006cc0:	4635      	mov	r5, r6
 8006cc2:	f7fe badc 	b.w	800527e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006cc6:	2603      	movs	r6, #3
 8006cc8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ccc:	4635      	mov	r5, r6
 8006cce:	f7fe bced 	b.w	80056ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006cd2:	2603      	movs	r6, #3
 8006cd4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006cd8:	4635      	mov	r5, r6
 8006cda:	f7fe be55 	b.w	8005988 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006cde:	2603      	movs	r6, #3
 8006ce0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ce4:	4635      	mov	r5, r6
 8006ce6:	f7fe bb33 	b.w	8005350 <HAL_RCCEx_PeriphCLKConfig+0x288>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006cea:	2603      	movs	r6, #3
 8006cec:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006cf0:	4635      	mov	r5, r6
 8006cf2:	f7fe bda7 	b.w	8005844 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8006cf6:	2603      	movs	r6, #3
 8006cf8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006cfc:	4635      	mov	r5, r6
 8006cfe:	f7fe bb8d 	b.w	800541c <HAL_RCCEx_PeriphCLKConfig+0x354>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006d02:	2603      	movs	r6, #3
 8006d04:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d08:	4635      	mov	r5, r6
 8006d0a:	f7fe be08 	b.w	800591e <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d0e:	2603      	movs	r6, #3
 8006d10:	6862      	ldr	r2, [r4, #4]
 8006d12:	4635      	mov	r5, r6
 8006d14:	f7ff b965 	b.w	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006d18:	2603      	movs	r6, #3
 8006d1a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d1e:	4635      	mov	r5, r6
 8006d20:	f7fe bbe4 	b.w	80054ec <HAL_RCCEx_PeriphCLKConfig+0x424>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006d24:	2603      	movs	r6, #3
 8006d26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d2a:	4635      	mov	r5, r6
 8006d2c:	f7fe bb43 	b.w	80053b6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8006d30:	2603      	movs	r6, #3
 8006d32:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d36:	4635      	mov	r5, r6
 8006d38:	f7fe bba3 	b.w	8005482 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d3c:	2603      	movs	r6, #3
 8006d3e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d42:	4635      	mov	r5, r6
 8006d44:	f7fe ba68 	b.w	8005218 <HAL_RCCEx_PeriphCLKConfig+0x150>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d48:	2603      	movs	r6, #3
 8006d4a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d4e:	4635      	mov	r5, r6
 8006d50:	f7fe bac8 	b.w	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006d54:	2603      	movs	r6, #3
 8006d56:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d5a:	4635      	mov	r5, r6
 8006d5c:	f7fe bc71 	b.w	8005642 <HAL_RCCEx_PeriphCLKConfig+0x57a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006d60:	2603      	movs	r6, #3
 8006d62:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d66:	4635      	mov	r5, r6
 8006d68:	f7fe bd37 	b.w	80057da <HAL_RCCEx_PeriphCLKConfig+0x712>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006d6c:	2603      	movs	r6, #3
 8006d6e:	6862      	ldr	r2, [r4, #4]
 8006d70:	4635      	mov	r5, r6
 8006d72:	f7ff b904 	b.w	8005f7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8006d76:	bf00      	nop
 8006d78:	44020c00 	.word	0x44020c00
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006d7c:	2603      	movs	r6, #3
 8006d7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d82:	4635      	mov	r5, r6
 8006d84:	f7fe bd93 	b.w	80058ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d88:	2603      	movs	r6, #3
 8006d8a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d8e:	4635      	mov	r5, r6
 8006d90:	f7fe ba11 	b.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d94:	2603      	movs	r6, #3
 8006d96:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d9a:	4635      	mov	r5, r6
 8006d9c:	f7fe be29 	b.w	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8006da0:	2603      	movs	r6, #3
 8006da2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006da6:	4635      	mov	r5, r6
 8006da8:	f7fe bc15 	b.w	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006dac:	2603      	movs	r6, #3
 8006dae:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006db2:	4635      	mov	r5, r6
 8006db4:	f7ff b8b0 	b.w	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xe50>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006db8:	2603      	movs	r6, #3
 8006dba:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006dbe:	4635      	mov	r5, r6
 8006dc0:	f7fe be89 	b.w	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8006dc4:	2603      	movs	r6, #3
 8006dc6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006dca:	4635      	mov	r5, r6
 8006dcc:	f7ff b86f 	b.w	8005eae <HAL_RCCEx_PeriphCLKConfig+0xde6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006dd0:	2603      	movs	r6, #3
 8006dd2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006dd6:	4635      	mov	r5, r6
 8006dd8:	f7fe be44 	b.w	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x99c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006ddc:	2603      	movs	r6, #3
 8006dde:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006de2:	4635      	mov	r5, r6
 8006de4:	f7fe bfff 	b.w	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006de8:	2603      	movs	r6, #3
 8006dea:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006dee:	4635      	mov	r5, r6
 8006df0:	f7ff b826 	b.w	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8006df4:	462e      	mov	r6, r5
 8006df6:	f7fe bf06 	b.w	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 8006dfa:	462e      	mov	r6, r5
 8006dfc:	f7fe bed1 	b.w	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8006e00:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006e02:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8006e06:	4635      	mov	r5, r6
 8006e08:	f7fe becb 	b.w	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8006e0c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e0e:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8006e12:	4635      	mov	r5, r6
 8006e14:	f7fe bc6e 	b.w	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      return HAL_TIMEOUT;
 8006e18:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006e1a:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8006e1e:	4635      	mov	r5, r6
 8006e20:	f7fe bef1 	b.w	8005c06 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      return HAL_TIMEOUT;
 8006e24:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e26:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8006e2a:	4635      	mov	r5, r6
 8006e2c:	f7fe bc74 	b.w	8005718 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006e30:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006e32:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8006e36:	4635      	mov	r5, r6
 8006e38:	f7fe bc8e 	b.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8006e3c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e3e:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8006e42:	4635      	mov	r5, r6
 8006e44:	f7fe bc44 	b.w	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006e48:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006e4a:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8006e4e:	4635      	mov	r5, r6
 8006e50:	f7fe bc74 	b.w	800573c <HAL_RCCEx_PeriphCLKConfig+0x674>
      return HAL_TIMEOUT;
 8006e54:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006e56:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8006e5a:	4635      	mov	r5, r6
 8006e5c:	f7fe be54 	b.w	8005b08 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8006e60:	462e      	mov	r6, r5
 8006e62:	f7fe b9a8 	b.w	80051b6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8006e66:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e68:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 8006e6a:	4635      	mov	r5, r6
 8006e6c:	f7ff b8f4 	b.w	8006058 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8006e70:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006e72:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 8006e74:	4635      	mov	r5, r6
 8006e76:	f7ff b8fe 	b.w	8006076 <HAL_RCCEx_PeriphCLKConfig+0xfae>
      return HAL_TIMEOUT;
 8006e7a:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006e7c:	6862      	ldr	r2, [r4, #4]
 8006e7e:	f7ff b906 	b.w	800608e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006e82:	4813      	ldr	r0, [pc, #76]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
 8006e84:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
 8006e86:	69c1      	ldr	r1, [r0, #28]
 8006e88:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8006e8c:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8006e90:	430b      	orrs	r3, r1
 8006e92:	61c3      	str	r3, [r0, #28]
 8006e94:	f7ff ba02 	b.w	800629c <HAL_RCCEx_PeriphCLKConfig+0x11d4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006e98:	462e      	mov	r6, r5
 8006e9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006e9e:	f7fe be40 	b.w	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ea2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ea6:	f7fe b954 	b.w	8005152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8006eaa:	460b      	mov	r3, r1
 8006eac:	f7ff b9ed 	b.w	800628a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8006eb0:	2601      	movs	r6, #1
 8006eb2:	f7fe b94e 	b.w	8005152 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8006eb6:	2601      	movs	r6, #1
 8006eb8:	4635      	mov	r5, r6
 8006eba:	f7fe bf94 	b.w	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8006ebe:	2601      	movs	r6, #1
 8006ec0:	4635      	mov	r5, r6
 8006ec2:	f7fe bb88 	b.w	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->OspiClockSelection)
 8006ec6:	2601      	movs	r6, #1
 8006ec8:	4635      	mov	r5, r6
 8006eca:	f7ff b8c5 	b.w	8006058 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8006ece:	bf00      	nop
 8006ed0:	44020c00 	.word	0x44020c00
 8006ed4:	00ffffcf 	.word	0x00ffffcf

08006ed8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006ed8:	4b59      	ldr	r3, [pc, #356]	; (8007040 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
{
 8006eda:	b4f0      	push	{r4, r5, r6, r7}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006ede:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006ee0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ee2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
  if (pll1m != 0U)
 8006ee4:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006eea:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll1m != 0U)
 8006eee:	d05a      	beq.n	8006fa6 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ef0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006ef4:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ef8:	fb07 f202 	mul.w	r2, r7, r2
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006efc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006f00:	ee07 2a90 	vmov	s15, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f04:	ee07 1a10 	vmov	s14, r1
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006f08:	f005 0203 	and.w	r2, r5, #3
    switch (pll1source)
 8006f0c:	2a02      	cmp	r2, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f12:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8007044 <HAL_RCCEx_GetPLL1ClockFreq+0x16c>
 8006f16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll1source)
 8006f1a:	f000 8087 	beq.w	800702c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8006f1e:	2a03      	cmp	r2, #3
 8006f20:	d05f      	beq.n	8006fe2 <HAL_RCCEx_GetPLL1ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	4b48      	ldr	r3, [pc, #288]	; (8007048 <HAL_RCCEx_GetPLL1ClockFreq+0x170>)
 8006f26:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8006f2a:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006f2c:	ee05 4a90 	vmov	s11, r4
 8006f30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006f34:	ee06 3a10 	vmov	s12, r3
 8006f38:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8006f3c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8006f40:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f48:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8006f4c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006f50:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f54:	4b3a      	ldr	r3, [pc, #232]	; (8007040 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	0197      	lsls	r7, r2, #6
 8006f5a:	d429      	bmi.n	8006fb0 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f60:	4b37      	ldr	r3, [pc, #220]	; (8007040 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	0195      	lsls	r5, r2, #6
 8006f66:	d502      	bpl.n	8006f6e <HAL_RCCEx_GetPLL1ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f6a:	0394      	lsls	r4, r2, #14
 8006f6c:	d44c      	bmi.n	8007008 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f72:	4b33      	ldr	r3, [pc, #204]	; (8007040 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	0191      	lsls	r1, r2, #6
 8006f78:	d52f      	bpl.n	8006fda <HAL_RCCEx_GetPLL1ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006f7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f7c:	0352      	lsls	r2, r2, #13
 8006f7e:	d52c      	bpl.n	8006fda <HAL_RCCEx_GetPLL1ClockFreq+0x102>
}
 8006f80:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006f84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f88:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8006f8c:	ee07 3a10 	vmov	s14, r3
 8006f90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8006f94:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 8006f98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f9c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006fa0:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8006fa4:	4770      	bx	lr
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006fa6:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006faa:	6084      	str	r4, [r0, #8]
}
 8006fac:	bcf0      	pop	{r4, r5, r6, r7}
 8006fae:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fb2:	03d6      	lsls	r6, r2, #15
 8006fb4:	d5d2      	bpl.n	8006f5c <HAL_RCCEx_GetPLL1ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fbc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8006fc0:	ee07 3a10 	vmov	s14, r3
 8006fc4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8006fc8:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 8006fcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006fd0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8006fd4:	edc0 6a00 	vstr	s13, [r0]
 8006fd8:	e7c2      	b.n	8006f60 <HAL_RCCEx_GetPLL1ClockFreq+0x88>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fde:	6083      	str	r3, [r0, #8]
}
 8006fe0:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8006fe2:	ee05 4a90 	vmov	s11, r4
 8006fe6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006fea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8006fee:	ed9f 5a17 	vldr	s10, [pc, #92]	; 800704c <HAL_RCCEx_GetPLL1ClockFreq+0x174>
 8006ff2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ffa:	eec5 6a25 	vdiv.f32	s13, s10, s11
 8006ffe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007002:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8007006:	e7a5      	b.n	8006f54 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800700a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800700e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007012:	ee07 3a10 	vmov	s14, r3
 8007016:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 800701a:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 800701e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007022:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007026:	edc0 6a01 	vstr	s13, [r0, #4]
 800702a:	e7a2      	b.n	8006f72 <HAL_RCCEx_GetPLL1ClockFreq+0x9a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800702c:	ee05 4a90 	vmov	s11, r4
 8007030:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007034:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007038:	ed9f 5a05 	vldr	s10, [pc, #20]	; 8007050 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 800703c:	e7d9      	b.n	8006ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 800703e:	bf00      	nop
 8007040:	44020c00 	.word	0x44020c00
 8007044:	39000000 	.word	0x39000000
 8007048:	017d7840 	.word	0x017d7840
 800704c:	4bbebc20 	.word	0x4bbebc20
 8007050:	4a742400 	.word	0x4a742400

08007054 <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007054:	4b59      	ldr	r3, [pc, #356]	; (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
{
 8007056:	b4f0      	push	{r4, r5, r6, r7}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007058:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800705a:	6add      	ldr	r5, [r3, #44]	; 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 800705c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 800705e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8007060:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007066:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll2m != 0U)
 800706a:	d05a      	beq.n	8007122 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800706c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007070:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007074:	fb07 f202 	mul.w	r2, r7, r2
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007078:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800707c:	ee07 2a90 	vmov	s15, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007080:	ee07 1a10 	vmov	s14, r1
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007084:	f005 0203 	and.w	r2, r5, #3
    switch (pll2source)
 8007088:	2a02      	cmp	r2, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800708a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800708e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80071c0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8007092:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll2source)
 8007096:	f000 8087 	beq.w	80071a8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800709a:	2a03      	cmp	r2, #3
 800709c:	d05f      	beq.n	800715e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	4b48      	ldr	r3, [pc, #288]	; (80071c4 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
 80070a2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80070a6:	40d3      	lsrs	r3, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80070a8:	ee05 4a90 	vmov	s11, r4
 80070ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80070b0:	ee06 3a10 	vmov	s12, r3
 80070b4:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 80070b8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80070bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80070c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070c4:	eec6 6a05 	vdiv.f32	s13, s12, s10
 80070c8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80070cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070d0:	4b3a      	ldr	r3, [pc, #232]	; (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 80070d2:	681a      	ldr	r2, [r3, #0]
 80070d4:	0117      	lsls	r7, r2, #4
 80070d6:	d429      	bmi.n	800712c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070dc:	4b37      	ldr	r3, [pc, #220]	; (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	0115      	lsls	r5, r2, #4
 80070e2:	d502      	bpl.n	80070ea <HAL_RCCEx_GetPLL2ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80070e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070e6:	0394      	lsls	r4, r2, #14
 80070e8:	d44c      	bmi.n	8007184 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80070ee:	4b33      	ldr	r3, [pc, #204]	; (80071bc <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	0111      	lsls	r1, r2, #4
 80070f4:	d52f      	bpl.n	8007156 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80070f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f8:	0352      	lsls	r2, r2, #13
 80070fa:	d52c      	bpl.n	8007156 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
}
 80070fc:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80070fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007104:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007108:	ee07 3a10 	vmov	s14, r3
 800710c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007110:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 8007114:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007118:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800711c:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007120:	4770      	bx	lr
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007122:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007126:	6084      	str	r4, [r0, #8]
}
 8007128:	bcf0      	pop	{r4, r5, r6, r7}
 800712a:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800712c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712e:	03d6      	lsls	r6, r2, #15
 8007130:	d5d2      	bpl.n	80070d8 <HAL_RCCEx_GetPLL2ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007134:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007138:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800713c:	ee07 3a10 	vmov	s14, r3
 8007140:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007144:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 8007148:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800714c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007150:	edc0 6a00 	vstr	s13, [r0]
 8007154:	e7c2      	b.n	80070dc <HAL_RCCEx_GetPLL2ClockFreq+0x88>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007156:	2300      	movs	r3, #0
}
 8007158:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 800715a:	6083      	str	r3, [r0, #8]
}
 800715c:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 800715e:	ee05 4a90 	vmov	s11, r4
 8007162:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007166:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800716a:	ed9f 5a17 	vldr	s10, [pc, #92]	; 80071c8 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 800716e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007176:	eec5 6a25 	vdiv.f32	s13, s10, s11
 800717a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800717e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8007182:	e7a5      	b.n	80070d0 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007186:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800718a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800718e:	ee07 3a10 	vmov	s14, r3
 8007192:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007196:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 800719a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800719e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80071a2:	edc0 6a01 	vstr	s13, [r0, #4]
 80071a6:	e7a2      	b.n	80070ee <HAL_RCCEx_GetPLL2ClockFreq+0x9a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80071a8:	ee05 4a90 	vmov	s11, r4
 80071ac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80071b0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80071b4:	ed9f 5a05 	vldr	s10, [pc, #20]	; 80071cc <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 80071b8:	e7d9      	b.n	800716e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
 80071ba:	bf00      	nop
 80071bc:	44020c00 	.word	0x44020c00
 80071c0:	39000000 	.word	0x39000000
 80071c4:	017d7840 	.word	0x017d7840
 80071c8:	4bbebc20 	.word	0x4bbebc20
 80071cc:	4a742400 	.word	0x4a742400

080071d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80071d0:	4b59      	ldr	r3, [pc, #356]	; (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
{
 80071d2:	b4f0      	push	{r4, r5, r6, r7}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80071d4:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80071d6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80071d8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80071da:	6b1f      	ldr	r7, [r3, #48]	; 0x30
  if (pll3m != 0U)
 80071dc:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80071e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 80071e2:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll3m != 0U)
 80071e6:	d05a      	beq.n	800729e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80071e8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80071ec:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80071f0:	fb07 f202 	mul.w	r2, r7, r2
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80071f4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80071f8:	ee07 2a90 	vmov	s15, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80071fc:	ee07 1a10 	vmov	s14, r1
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007200:	f005 0203 	and.w	r2, r5, #3
    switch (pll3source)
 8007204:	2a02      	cmp	r2, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007206:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 800720a:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800733c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800720e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll3source)
 8007212:	f000 8087 	beq.w	8007324 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8007216:	2a03      	cmp	r2, #3
 8007218:	d05f      	beq.n	80072da <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	4b48      	ldr	r3, [pc, #288]	; (8007340 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
 800721e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007222:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007224:	ee05 4a90 	vmov	s11, r4
 8007228:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800722c:	ee06 3a10 	vmov	s12, r3
 8007230:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8007234:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007238:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800723c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007240:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8007244:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007248:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800724c:	4b3a      	ldr	r3, [pc, #232]	; (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	0097      	lsls	r7, r2, #2
 8007252:	d429      	bmi.n	80072a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007254:	2300      	movs	r3, #0
 8007256:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007258:	4b37      	ldr	r3, [pc, #220]	; (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	0095      	lsls	r5, r2, #2
 800725e:	d502      	bpl.n	8007266 <HAL_RCCEx_GetPLL3ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007262:	0394      	lsls	r4, r2, #14
 8007264:	d44c      	bmi.n	8007300 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007266:	2300      	movs	r3, #0
 8007268:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800726a:	4b33      	ldr	r3, [pc, #204]	; (8007338 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	0091      	lsls	r1, r2, #2
 8007270:	d52f      	bpl.n	80072d2 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007272:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007274:	0352      	lsls	r2, r2, #13
 8007276:	d52c      	bpl.n	80072d2 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
}
 8007278:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800727c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007280:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007284:	ee07 3a10 	vmov	s14, r3
 8007288:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 800728c:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 8007290:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007294:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007298:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800729c:	4770      	bx	lr
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 800729e:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072a2:	6084      	str	r4, [r0, #8]
}
 80072a4:	bcf0      	pop	{r4, r5, r6, r7}
 80072a6:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80072a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072aa:	03d6      	lsls	r6, r2, #15
 80072ac:	d5d2      	bpl.n	8007254 <HAL_RCCEx_GetPLL3ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80072b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80072b4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80072b8:	ee07 3a10 	vmov	s14, r3
 80072bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 80072c0:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 80072c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80072c8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80072cc:	edc0 6a00 	vstr	s13, [r0]
 80072d0:	e7c2      	b.n	8007258 <HAL_RCCEx_GetPLL3ClockFreq+0x88>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80072d6:	6083      	str	r3, [r0, #8]
}
 80072d8:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80072da:	ee05 4a90 	vmov	s11, r4
 80072de:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80072e2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80072e6:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8007344 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 80072ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072f2:	eec5 6a25 	vdiv.f32	s13, s10, s11
 80072f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80072fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80072fe:	e7a5      	b.n	800724c <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007302:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007306:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800730a:	ee07 3a10 	vmov	s14, r3
 800730e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007312:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 8007316:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800731a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800731e:	edc0 6a01 	vstr	s13, [r0, #4]
 8007322:	e7a2      	b.n	800726a <HAL_RCCEx_GetPLL3ClockFreq+0x9a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007324:	ee05 4a90 	vmov	s11, r4
 8007328:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800732c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007330:	ed9f 5a05 	vldr	s10, [pc, #20]	; 8007348 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 8007334:	e7d9      	b.n	80072ea <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
 8007336:	bf00      	nop
 8007338:	44020c00 	.word	0x44020c00
 800733c:	39000000 	.word	0x39000000
 8007340:	017d7840 	.word	0x017d7840
 8007344:	4bbebc20 	.word	0x4bbebc20
 8007348:	4a742400 	.word	0x4a742400

0800734c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800734c:	f100 437e 	add.w	r3, r0, #4261412864	; 0xfe000000
 8007350:	430b      	orrs	r3, r1
 8007352:	f000 8318 	beq.w	8007986 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
{
 8007356:	b500      	push	{lr}
    switch (PeriphClk)
 8007358:	f5a0 1380 	sub.w	r3, r0, #1048576	; 0x100000
 800735c:	430b      	orrs	r3, r1
{
 800735e:	b085      	sub	sp, #20
    switch (PeriphClk)
 8007360:	f000 872b 	beq.w	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0xe6e>
 8007364:	4bac      	ldr	r3, [pc, #688]	; (8007618 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007366:	4298      	cmp	r0, r3
 8007368:	f171 0300 	sbcs.w	r3, r1, #0
 800736c:	d23f      	bcs.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 800736e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8007372:	430b      	orrs	r3, r1
 8007374:	f000 8750 	beq.w	8008218 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>
 8007378:	f240 4301 	movw	r3, #1025	; 0x401
 800737c:	4298      	cmp	r0, r3
 800737e:	f171 0300 	sbcs.w	r3, r1, #0
 8007382:	d377      	bcc.n	8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007384:	f5a0 4300 	sub.w	r3, r0, #32768	; 0x8000
 8007388:	430b      	orrs	r3, r1
 800738a:	f001 8077 	beq.w	800847c <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 800738e:	f248 0301 	movw	r3, #32769	; 0x8001
 8007392:	4298      	cmp	r0, r3
 8007394:	f171 0300 	sbcs.w	r3, r1, #0
 8007398:	f0c0 8207 	bcc.w	80077aa <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 800739c:	f5a0 2380 	sub.w	r3, r0, #262144	; 0x40000
 80073a0:	430b      	orrs	r3, r1
 80073a2:	f000 8720 	beq.w	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9a>
 80073a6:	4b9d      	ldr	r3, [pc, #628]	; (800761c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 80073a8:	4298      	cmp	r0, r3
 80073aa:	f171 0300 	sbcs.w	r3, r1, #0
 80073ae:	f0c0 81d8 	bcc.w	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 80073b2:	f5a0 2000 	sub.w	r0, r0, #524288	; 0x80000
 80073b6:	ea50 0301 	orrs.w	r3, r0, r1
 80073ba:	bf18      	it	ne
 80073bc:	2000      	movne	r0, #0
 80073be:	d113      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80073c0:	4a97      	ldr	r2, [pc, #604]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80073c2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80073c6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
        switch (srcclk)
 80073ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073ce:	f000 85a6 	beq.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 80073d2:	f200 866b 	bhi.w	80080ac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 859b 	beq.w	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 80073dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073e0:	bf18      	it	ne
 80073e2:	2000      	movne	r0, #0
 80073e4:	f000 83c6 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
}
 80073e8:	b005      	add	sp, #20
 80073ea:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 80073ee:	2300      	movs	r3, #0
 80073f0:	2202      	movs	r2, #2
 80073f2:	4291      	cmp	r1, r2
 80073f4:	bf08      	it	eq
 80073f6:	4298      	cmpeq	r0, r3
 80073f8:	f001 8016 	beq.w	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 80073fc:	4283      	cmp	r3, r0
 80073fe:	418a      	sbcs	r2, r1
 8007400:	d24c      	bcs.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8007402:	2240      	movs	r2, #64	; 0x40
 8007404:	4291      	cmp	r1, r2
 8007406:	bf08      	it	eq
 8007408:	4298      	cmpeq	r0, r3
 800740a:	f000 879d 	beq.w	8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xffc>
 800740e:	4283      	cmp	r3, r0
 8007410:	418a      	sbcs	r2, r1
 8007412:	f080 821f 	bcs.w	8007854 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
 8007416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800741a:	4291      	cmp	r1, r2
 800741c:	bf08      	it	eq
 800741e:	4298      	cmpeq	r0, r3
 8007420:	f001 8015 	beq.w	800844e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007424:	4283      	cmp	r3, r0
 8007426:	418a      	sbcs	r2, r1
 8007428:	f080 81f0 	bcs.w	800780c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 800742c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007430:	bf08      	it	eq
 8007432:	4298      	cmpeq	r0, r3
 8007434:	bf18      	it	ne
 8007436:	2000      	movne	r0, #0
 8007438:	d1d6      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 800743a:	4a79      	ldr	r2, [pc, #484]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800743c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007440:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 8007444:	f000 822c 	beq.w	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800744c:	f001 8089 	beq.w	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007450:	6811      	ldr	r1, [r2, #0]
 8007452:	0788      	lsls	r0, r1, #30
 8007454:	d503      	bpl.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8007456:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800745a:	f001 8255 	beq.w	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 800745e:	4a70      	ldr	r2, [pc, #448]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007460:	6810      	ldr	r0, [r2, #0]
 8007462:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8007466:	d0bf      	beq.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8007468:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800746c:	486d      	ldr	r0, [pc, #436]	; (8007624 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800746e:	bf18      	it	ne
 8007470:	2000      	movne	r0, #0
 8007472:	e7b9      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8007474:	2821      	cmp	r0, #33	; 0x21
 8007476:	f171 0300 	sbcs.w	r3, r1, #0
 800747a:	d25e      	bcs.n	800753a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 800747c:	ea50 0301 	orrs.w	r3, r0, r1
 8007480:	f000 827d 	beq.w	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 8007484:	3801      	subs	r0, #1
 8007486:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 800748a:	2820      	cmp	r0, #32
 800748c:	f171 0300 	sbcs.w	r3, r1, #0
 8007490:	f0c0 82a0 	bcc.w	80079d4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8007494:	2000      	movs	r0, #0
}
 8007496:	b005      	add	sp, #20
 8007498:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 800749c:	f100 4270 	add.w	r2, r0, #4026531840	; 0xf0000000
 80074a0:	430a      	orrs	r2, r1
 80074a2:	f000 8625 	beq.w	80080f0 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 80074a6:	4a60      	ldr	r2, [pc, #384]	; (8007628 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 80074a8:	4290      	cmp	r0, r2
 80074aa:	f171 0200 	sbcs.w	r2, r1, #0
 80074ae:	f0c0 808d 	bcc.w	80075cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 80074b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074b6:	4299      	cmp	r1, r3
 80074b8:	bf08      	it	eq
 80074ba:	4290      	cmpeq	r0, r2
 80074bc:	f000 8764 	beq.w	8008388 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 80074c0:	4282      	cmp	r2, r0
 80074c2:	eb73 0201 	sbcs.w	r2, r3, r1
 80074c6:	f080 80cd 	bcs.w	8007664 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80074ca:	2901      	cmp	r1, #1
 80074cc:	bf08      	it	eq
 80074ce:	4298      	cmpeq	r0, r3
 80074d0:	bf18      	it	ne
 80074d2:	2000      	movne	r0, #0
 80074d4:	d188      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80074d6:	4a52      	ldr	r2, [pc, #328]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80074d8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 80074dc:	f413 3360 	ands.w	r3, r3, #229376	; 0x38000
 80074e0:	f000 8512 	beq.w	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 80074e4:	6812      	ldr	r2, [r2, #0]
 80074e6:	0112      	lsls	r2, r2, #4
 80074e8:	d503      	bpl.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 80074ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074ee:	f000 855b 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 80074f2:	4a4b      	ldr	r2, [pc, #300]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80074f4:	6812      	ldr	r2, [r2, #0]
 80074f6:	0090      	lsls	r0, r2, #2
 80074f8:	d503      	bpl.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 80074fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074fe:	f000 8559 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007502:	4a47      	ldr	r2, [pc, #284]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007504:	6811      	ldr	r1, [r2, #0]
 8007506:	0789      	lsls	r1, r1, #30
 8007508:	d503      	bpl.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 800750a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800750e:	f001 8209 	beq.w	8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x15d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007512:	4a43      	ldr	r2, [pc, #268]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007514:	6812      	ldr	r2, [r2, #0]
 8007516:	0590      	lsls	r0, r2, #22
 8007518:	d503      	bpl.n	8007522 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800751a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800751e:	f001 8291 	beq.w	8008a44 <HAL_RCCEx_GetPeriphCLKFreq+0x16f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007522:	4a3f      	ldr	r2, [pc, #252]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007524:	6810      	ldr	r0, [r2, #0]
 8007526:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800752a:	f43f af5d 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800752e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007532:	483e      	ldr	r0, [pc, #248]	; (800762c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007534:	bf18      	it	ne
 8007536:	2000      	movne	r0, #0
 8007538:	e756      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 800753a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800753e:	430b      	orrs	r3, r1
 8007540:	f000 86cd 	beq.w	80082de <HAL_RCCEx_GetPeriphCLKFreq+0xf92>
 8007544:	f240 1301 	movw	r3, #257	; 0x101
 8007548:	4298      	cmp	r0, r3
 800754a:	f171 0300 	sbcs.w	r3, r1, #0
 800754e:	f0c0 80c8 	bcc.w	80076e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007552:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 8007556:	ea50 0301 	orrs.w	r3, r0, r1
 800755a:	bf18      	it	ne
 800755c:	2000      	movne	r0, #0
 800755e:	f47f af43 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007562:	4b2f      	ldr	r3, [pc, #188]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007568:	f013 5360 	ands.w	r3, r3, #939524096	; 0x38000000
 800756c:	f000 822d 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007570:	4a2b      	ldr	r2, [pc, #172]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007572:	6812      	ldr	r2, [r2, #0]
 8007574:	0112      	lsls	r2, r2, #4
 8007576:	d503      	bpl.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8007578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800757c:	f000 8514 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007580:	4a27      	ldr	r2, [pc, #156]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007582:	6812      	ldr	r2, [r2, #0]
 8007584:	0090      	lsls	r0, r2, #2
 8007586:	d503      	bpl.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800758c:	f000 8512 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007590:	4a23      	ldr	r2, [pc, #140]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007592:	6811      	ldr	r1, [r2, #0]
 8007594:	0789      	lsls	r1, r1, #30
 8007596:	d503      	bpl.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007598:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800759c:	f001 81d7 	beq.w	800894e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80075a0:	4a1f      	ldr	r2, [pc, #124]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80075a2:	6812      	ldr	r2, [r2, #0]
 80075a4:	0590      	lsls	r0, r2, #22
 80075a6:	d503      	bpl.n	80075b0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80075a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075ac:	f001 8238 	beq.w	8008a20 <HAL_RCCEx_GetPeriphCLKFreq+0x16d4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 80075b0:	4a1b      	ldr	r2, [pc, #108]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80075b2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80075b6:	f010 0002 	ands.w	r0, r0, #2
 80075ba:	f43f af15 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80075be:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 80075c2:	bf14      	ite	ne
 80075c4:	2000      	movne	r0, #0
 80075c6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80075ca:	e70d      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80075cc:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 80075d0:	430b      	orrs	r3, r1
 80075d2:	f000 835a 	beq.w	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 80075d6:	4b16      	ldr	r3, [pc, #88]	; (8007630 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80075d8:	4298      	cmp	r0, r3
 80075da:	f171 0300 	sbcs.w	r3, r1, #0
 80075de:	d329      	bcc.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80075e0:	f100 437c 	add.w	r3, r0, #4227858432	; 0xfc000000
 80075e4:	430b      	orrs	r3, r1
 80075e6:	f000 8322 	beq.w	8007c2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 80075ea:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 80075ee:	ea50 0301 	orrs.w	r3, r0, r1
 80075f2:	bf18      	it	ne
 80075f4:	2000      	movne	r0, #0
 80075f6:	f47f aef7 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80075fa:	4b09      	ldr	r3, [pc, #36]	; (8007620 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80075fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007600:	f003 0307 	and.w	r3, r3, #7
 8007604:	2b04      	cmp	r3, #4
 8007606:	f201 8253 	bhi.w	8008ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x1764>
 800760a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800760e:	0482      	.short	0x0482
 8007610:	048802b3 	.word	0x048802b3
 8007614:	0491048e 	.word	0x0491048e
 8007618:	00100001 	.word	0x00100001
 800761c:	00040001 	.word	0x00040001
 8007620:	44020c00 	.word	0x44020c00
 8007624:	003d0900 	.word	0x003d0900
 8007628:	10000001 	.word	0x10000001
 800762c:	017d7840 	.word	0x017d7840
 8007630:	00800001 	.word	0x00800001
    switch (PeriphClk)
 8007634:	f5a0 1300 	sub.w	r3, r0, #2097152	; 0x200000
 8007638:	430b      	orrs	r3, r1
 800763a:	f000 82a0 	beq.w	8007b7e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800763e:	f5a0 0080 	sub.w	r0, r0, #4194304	; 0x400000
 8007642:	ea50 0301 	orrs.w	r3, r0, r1
 8007646:	bf18      	it	ne
 8007648:	2000      	movne	r0, #0
 800764a:	f47f aecd 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800764e:	4bb3      	ldr	r3, [pc, #716]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007650:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8007654:	0658      	lsls	r0, r3, #25
 8007656:	f100 831e 	bmi.w	8007c96 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800765a:	a801      	add	r0, sp, #4
 800765c:	f7ff fc3c 	bl	8006ed8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007660:	9802      	ldr	r0, [sp, #8]
 8007662:	e6c1      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8007664:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8007668:	430b      	orrs	r3, r1
 800766a:	f000 8271 	beq.w	8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 800766e:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 8007672:	ea50 0301 	orrs.w	r3, r0, r1
 8007676:	bf18      	it	ne
 8007678:	2000      	movne	r0, #0
 800767a:	f47f aeb5 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800767e:	4aa7      	ldr	r2, [pc, #668]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007680:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8007684:	f413 6360 	ands.w	r3, r3, #3584	; 0xe00
 8007688:	f000 843e 	beq.w	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	0112      	lsls	r2, r2, #4
 8007690:	d503      	bpl.n	800769a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8007692:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007696:	f000 8487 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800769a:	4aa0      	ldr	r2, [pc, #640]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800769c:	6812      	ldr	r2, [r2, #0]
 800769e:	0090      	lsls	r0, r2, #2
 80076a0:	d503      	bpl.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 80076a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a6:	f000 8485 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80076aa:	4a9c      	ldr	r2, [pc, #624]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80076ac:	6811      	ldr	r1, [r2, #0]
 80076ae:	0789      	lsls	r1, r1, #30
 80076b0:	d503      	bpl.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 80076b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80076b6:	f001 812e 	beq.w	8008916 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80076ba:	4a98      	ldr	r2, [pc, #608]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80076bc:	6812      	ldr	r2, [r2, #0]
 80076be:	0590      	lsls	r0, r2, #22
 80076c0:	d503      	bpl.n	80076ca <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80076c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c6:	f001 81a5 	beq.w	8008a14 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80076ca:	4a94      	ldr	r2, [pc, #592]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80076cc:	6810      	ldr	r0, [r2, #0]
 80076ce:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80076d2:	f43f ae89 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80076d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80076da:	4891      	ldr	r0, [pc, #580]	; (8007920 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80076dc:	bf18      	it	ne
 80076de:	2000      	movne	r0, #0
 80076e0:	e682      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80076e2:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
 80076e6:	430b      	orrs	r3, r1
 80076e8:	f000 81fd 	beq.w	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80076ec:	3880      	subs	r0, #128	; 0x80
 80076ee:	ea50 0301 	orrs.w	r3, r0, r1
 80076f2:	bf18      	it	ne
 80076f4:	2000      	movne	r0, #0
 80076f6:	f47f ae77 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80076fa:	4a88      	ldr	r2, [pc, #544]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80076fc:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8007700:	f413 0360 	ands.w	r3, r3, #14680064	; 0xe00000
 8007704:	f000 8161 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	d503      	bpl.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
 800770e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007712:	f000 8449 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8007716:	4a81      	ldr	r2, [pc, #516]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007718:	6812      	ldr	r2, [r2, #0]
 800771a:	0090      	lsls	r0, r2, #2
 800771c:	d503      	bpl.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800771e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007722:	f000 8447 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8007726:	4a7d      	ldr	r2, [pc, #500]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007728:	6811      	ldr	r1, [r2, #0]
 800772a:	0789      	lsls	r1, r1, #30
 800772c:	d503      	bpl.n	8007736 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800772e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007732:	f001 80fe 	beq.w	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8007736:	4a79      	ldr	r2, [pc, #484]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007738:	6812      	ldr	r2, [r2, #0]
 800773a:	0590      	lsls	r0, r2, #22
 800773c:	d503      	bpl.n	8007746 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800773e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007742:	f001 815b 	beq.w	80089fc <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8007746:	4a75      	ldr	r2, [pc, #468]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007748:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800774c:	f010 0002 	ands.w	r0, r0, #2
 8007750:	f43f ae4a 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007754:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007758:	bf14      	ite	ne
 800775a:	2000      	movne	r0, #0
 800775c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007760:	e642      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8007762:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8007766:	430b      	orrs	r3, r1
 8007768:	f000 824a 	beq.w	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 800776c:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
 8007770:	ea50 0301 	orrs.w	r3, r0, r1
 8007774:	bf18      	it	ne
 8007776:	2000      	movne	r0, #0
 8007778:	f47f ae36 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800777c:	4a67      	ldr	r2, [pc, #412]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800777e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8007782:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
        switch (srcclk)
 8007786:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800778a:	f000 83e4 	beq.w	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800778e:	f200 8439 	bhi.w	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 8007792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007796:	f000 81ed 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800779a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800779e:	f000 8225 	beq.w	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d07c      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80077a6:	2000      	movs	r0, #0
 80077a8:	e61e      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80077aa:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 80077ae:	430b      	orrs	r3, r1
 80077b0:	f000 869b 	beq.w	80084ea <HAL_RCCEx_GetPeriphCLKFreq+0x119e>
 80077b4:	f242 0301 	movw	r3, #8193	; 0x2001
 80077b8:	4298      	cmp	r0, r3
 80077ba:	f171 0300 	sbcs.w	r3, r1, #0
 80077be:	d374      	bcc.n	80078aa <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 80077c0:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 80077c4:	ea50 0301 	orrs.w	r3, r0, r1
 80077c8:	bf18      	it	ne
 80077ca:	2000      	movne	r0, #0
 80077cc:	f47f ae0c 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80077d0:	4a52      	ldr	r2, [pc, #328]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80077d2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80077d6:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 80077da:	f000 80f6 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80077de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077e2:	f000 86be 	beq.w	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80077e6:	6811      	ldr	r1, [r2, #0]
 80077e8:	0789      	lsls	r1, r1, #30
 80077ea:	d503      	bpl.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80077ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80077f0:	f001 8075 	beq.w	80088de <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80077f4:	4a49      	ldr	r2, [pc, #292]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80077f6:	6810      	ldr	r0, [r2, #0]
 80077f8:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80077fc:	f43f adf4 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8007800:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007804:	4847      	ldr	r0, [pc, #284]	; (8007924 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8007806:	bf18      	it	ne
 8007808:	2000      	movne	r0, #0
 800780a:	e5ed      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 800780c:	2980      	cmp	r1, #128	; 0x80
 800780e:	bf08      	it	eq
 8007810:	4298      	cmpeq	r0, r3
 8007812:	f000 81d9 	beq.w	8007bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8007816:	2300      	movs	r3, #0
 8007818:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800781c:	bf08      	it	eq
 800781e:	4298      	cmpeq	r0, r3
 8007820:	bf18      	it	ne
 8007822:	4618      	movne	r0, r3
 8007824:	f47f ade0 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8007828:	493c      	ldr	r1, [pc, #240]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800782a:	f8d1 20dc 	ldr.w	r2, [r1, #220]	; 0xdc
 800782e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
        switch (srcclk)
 8007832:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8007836:	f000 8397 	beq.w	8007f68 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
 800783a:	f200 83ff 	bhi.w	800803c <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 800783e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8007842:	f000 8197 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007846:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800784a:	f000 81cf 	beq.w	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 800784e:	b33a      	cbz	r2, 80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8007850:	4618      	mov	r0, r3
 8007852:	e5c9      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8007854:	2210      	movs	r2, #16
 8007856:	4291      	cmp	r1, r2
 8007858:	bf08      	it	eq
 800785a:	4298      	cmpeq	r0, r3
 800785c:	f000 850c 	beq.w	8008278 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
 8007860:	4283      	cmp	r3, r0
 8007862:	418a      	sbcs	r2, r1
 8007864:	d260      	bcs.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8007866:	2920      	cmp	r1, #32
 8007868:	bf08      	it	eq
 800786a:	4298      	cmpeq	r0, r3
 800786c:	bf18      	it	ne
 800786e:	2000      	movne	r0, #0
 8007870:	f47f adba 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007874:	4a29      	ldr	r2, [pc, #164]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007876:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 800787a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
        switch (srcclk)
 800787e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007882:	f000 837a 	beq.w	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007886:	f200 83f5 	bhi.w	8008074 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
 800788a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800788e:	f000 8171 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007892:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007896:	f000 81a9 	beq.w	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 800789a:	2b00      	cmp	r3, #0
 800789c:	f040 867a 	bne.w	8008594 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
}
 80078a0:	b005      	add	sp, #20
 80078a2:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK3Freq();
 80078a6:	f7fd bb3b 	b.w	8004f20 <HAL_RCC_GetPCLK3Freq>
    switch (PeriphClk)
 80078aa:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 80078ae:	430b      	orrs	r3, r1
 80078b0:	f000 80eb 	beq.w	8007a8a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80078b4:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 80078b8:	ea50 0301 	orrs.w	r3, r0, r1
 80078bc:	bf18      	it	ne
 80078be:	2000      	movne	r0, #0
 80078c0:	f47f ad92 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80078c4:	4a15      	ldr	r2, [pc, #84]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80078c6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80078ca:	f013 63e0 	ands.w	r3, r3, #117440512	; 0x7000000
 80078ce:	d0e7      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80078d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078d4:	f000 8368 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80078d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078dc:	f000 836a 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80078e0:	6811      	ldr	r1, [r2, #0]
 80078e2:	0789      	lsls	r1, r1, #30
 80078e4:	d503      	bpl.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
 80078e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80078ea:	f001 8076 	beq.w	80089da <HAL_RCCEx_GetPeriphCLKFreq+0x168e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80078ee:	4a0b      	ldr	r2, [pc, #44]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80078f0:	6812      	ldr	r2, [r2, #0]
 80078f2:	0592      	lsls	r2, r2, #22
 80078f4:	d503      	bpl.n	80078fe <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80078f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80078fa:	f001 80ac 	beq.w	8008a56 <HAL_RCCEx_GetPeriphCLKFreq+0x170a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80078fe:	4a07      	ldr	r2, [pc, #28]	; (800791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8007900:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007904:	f010 0002 	ands.w	r0, r0, #2
 8007908:	f43f ad6e 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800790c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007910:	bf14      	ite	ne
 8007912:	2000      	movne	r0, #0
 8007914:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007918:	e566      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800791a:	bf00      	nop
 800791c:	44020c00 	.word	0x44020c00
 8007920:	017d7840 	.word	0x017d7840
 8007924:	003d0900 	.word	0x003d0900
    switch (PeriphClk)
 8007928:	2904      	cmp	r1, #4
 800792a:	bf08      	it	eq
 800792c:	4298      	cmpeq	r0, r3
 800792e:	f000 8097 	beq.w	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8007932:	2300      	movs	r3, #0
 8007934:	2908      	cmp	r1, #8
 8007936:	bf08      	it	eq
 8007938:	4298      	cmpeq	r0, r3
 800793a:	bf18      	it	ne
 800793c:	4618      	movne	r0, r3
 800793e:	f47f ad53 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8007942:	4aad      	ldr	r2, [pc, #692]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007944:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007948:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800794c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007950:	0790      	lsls	r0, r2, #30
 8007952:	f100 81a6 	bmi.w	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8007956:	4aa8      	ldr	r2, [pc, #672]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007958:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800795c:	0111      	lsls	r1, r2, #4
 800795e:	d502      	bpl.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	f001 800a 	beq.w	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x162e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8007966:	4aa4      	ldr	r2, [pc, #656]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007968:	6810      	ldr	r0, [r2, #0]
 800796a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800796e:	f43f ad3b 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = CSI_VALUE / 122U;
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	f248 0012 	movw	r0, #32786	; 0x8012
 8007978:	bf18      	it	ne
 800797a:	2000      	movne	r0, #0
 800797c:	e534      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 800797e:	2000      	movs	r0, #0
}
 8007980:	b005      	add	sp, #20
 8007982:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007986:	4a9c      	ldr	r2, [pc, #624]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007988:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800798c:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007990:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007994:	0792      	lsls	r2, r2, #30
 8007996:	d503      	bpl.n	80079a0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8007998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800799c:	f000 816f 	beq.w	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80079a0:	4a95      	ldr	r2, [pc, #596]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80079a2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 80079a6:	0110      	lsls	r0, r2, #4
 80079a8:	d503      	bpl.n	80079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80079aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ae:	f000 8169 	beq.w	8007c84 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80079b2:	4a91      	ldr	r2, [pc, #580]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80079b4:	6810      	ldr	r0, [r2, #0]
 80079b6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80079ba:	d005      	beq.n	80079c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80079bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079c0:	f000 82e4 	beq.w	8007f8c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 80079c4:	2000      	movs	r0, #0
 80079c6:	4770      	bx	lr
}
 80079c8:	4770      	bx	lr
 80079ca:	b005      	add	sp, #20
 80079cc:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK1Freq();
 80079d0:	f7fd ba66 	b.w	8004ea0 <HAL_RCC_GetPCLK1Freq>
    switch (PeriphClk)
 80079d4:	281f      	cmp	r0, #31
 80079d6:	f63f ad5d 	bhi.w	8007494 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80079da:	a301      	add	r3, pc, #4	; (adr r3, 80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x694>)
 80079dc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80079e0:	08007eaf 	.word	0x08007eaf
 80079e4:	08007de9 	.word	0x08007de9
 80079e8:	08007495 	.word	0x08007495
 80079ec:	08007d85 	.word	0x08007d85
 80079f0:	08007495 	.word	0x08007495
 80079f4:	08007495 	.word	0x08007495
 80079f8:	08007495 	.word	0x08007495
 80079fc:	08007e45 	.word	0x08007e45
 8007a00:	08007495 	.word	0x08007495
 8007a04:	08007495 	.word	0x08007495
 8007a08:	08007495 	.word	0x08007495
 8007a0c:	08007495 	.word	0x08007495
 8007a10:	08007495 	.word	0x08007495
 8007a14:	08007495 	.word	0x08007495
 8007a18:	08007495 	.word	0x08007495
 8007a1c:	08007d1b 	.word	0x08007d1b
 8007a20:	08007495 	.word	0x08007495
 8007a24:	08007495 	.word	0x08007495
 8007a28:	08007495 	.word	0x08007495
 8007a2c:	08007495 	.word	0x08007495
 8007a30:	08007495 	.word	0x08007495
 8007a34:	08007495 	.word	0x08007495
 8007a38:	08007495 	.word	0x08007495
 8007a3c:	08007495 	.word	0x08007495
 8007a40:	08007495 	.word	0x08007495
 8007a44:	08007495 	.word	0x08007495
 8007a48:	08007495 	.word	0x08007495
 8007a4c:	08007495 	.word	0x08007495
 8007a50:	08007495 	.word	0x08007495
 8007a54:	08007495 	.word	0x08007495
 8007a58:	08007495 	.word	0x08007495
 8007a5c:	08007cb1 	.word	0x08007cb1
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007a60:	4a65      	ldr	r2, [pc, #404]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007a62:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007a66:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8007a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8007a6c:	0390      	lsls	r0, r2, #14
 8007a6e:	d502      	bpl.n	8007a76 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 85bf 	beq.w	80085f4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8007a76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a7a:	f43f adee 	beq.w	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8007a7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a82:	f000 8291 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = 0U;
 8007a86:	2000      	movs	r0, #0
 8007a88:	e4ae      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8007a8a:	4a5b      	ldr	r2, [pc, #364]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007a8c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8007a90:	f013 0370 	ands.w	r3, r3, #112	; 0x70
 8007a94:	d099      	beq.n	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8007a96:	6812      	ldr	r2, [r2, #0]
 8007a98:	0112      	lsls	r2, r2, #4
 8007a9a:	d502      	bpl.n	8007aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8007a9c:	2b10      	cmp	r3, #16
 8007a9e:	f000 8283 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8007aa2:	4a55      	ldr	r2, [pc, #340]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007aa4:	6812      	ldr	r2, [r2, #0]
 8007aa6:	0090      	lsls	r0, r2, #2
 8007aa8:	d502      	bpl.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8007aaa:	2b20      	cmp	r3, #32
 8007aac:	f000 8282 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8007ab0:	4a51      	ldr	r2, [pc, #324]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ab2:	6811      	ldr	r1, [r2, #0]
 8007ab4:	0789      	lsls	r1, r1, #30
 8007ab6:	d502      	bpl.n	8007abe <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8007ab8:	2b30      	cmp	r3, #48	; 0x30
 8007aba:	f000 8709 	beq.w	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8007abe:	4a4e      	ldr	r2, [pc, #312]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ac0:	6812      	ldr	r2, [r2, #0]
 8007ac2:	0590      	lsls	r0, r2, #22
 8007ac4:	d502      	bpl.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 8007ac6:	2b40      	cmp	r3, #64	; 0x40
 8007ac8:	f000 87a7 	beq.w	8008a1a <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8007acc:	4a4a      	ldr	r2, [pc, #296]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ace:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007ad2:	f010 0002 	ands.w	r0, r0, #2
 8007ad6:	f43f ac87 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007ada:	2b50      	cmp	r3, #80	; 0x50
 8007adc:	bf14      	ite	ne
 8007ade:	2000      	movne	r0, #0
 8007ae0:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007ae4:	e480      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8007ae6:	4b44      	ldr	r3, [pc, #272]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ae8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8007aec:	f413 13e0 	ands.w	r3, r3, #1835008	; 0x1c0000
 8007af0:	f43f af6b 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8007af4:	4a40      	ldr	r2, [pc, #256]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007af6:	6812      	ldr	r2, [r2, #0]
 8007af8:	0111      	lsls	r1, r2, #4
 8007afa:	d503      	bpl.n	8007b04 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8007afc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b00:	f000 8252 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8007b04:	4a3c      	ldr	r2, [pc, #240]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007b06:	6812      	ldr	r2, [r2, #0]
 8007b08:	0092      	lsls	r2, r2, #2
 8007b0a:	d503      	bpl.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8007b0c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b10:	f000 8250 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8007b14:	4a38      	ldr	r2, [pc, #224]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007b16:	6811      	ldr	r1, [r2, #0]
 8007b18:	0788      	lsls	r0, r1, #30
 8007b1a:	d503      	bpl.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8007b1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007b20:	f000 86eb 	beq.w	80088fa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8007b24:	4a34      	ldr	r2, [pc, #208]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	0591      	lsls	r1, r2, #22
 8007b2a:	d503      	bpl.n	8007b34 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8007b2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b30:	f000 8761 	beq.w	80089f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8007b34:	4a30      	ldr	r2, [pc, #192]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007b36:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007b3a:	f010 0002 	ands.w	r0, r0, #2
 8007b3e:	f43f ac53 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007b42:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007b46:	bf14      	ite	ne
 8007b48:	2000      	movne	r0, #0
 8007b4a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007b4e:	e44b      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007b50:	4a29      	ldr	r2, [pc, #164]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007b52:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8007b56:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        switch (srcclk)
 8007b5a:	2b80      	cmp	r3, #128	; 0x80
 8007b5c:	f000 81df 	beq.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 8007b60:	f200 83a4 	bhi.w	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 81d4 	beq.w	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 8007b6a:	2b40      	cmp	r3, #64	; 0x40
 8007b6c:	bf18      	it	ne
 8007b6e:	2000      	movne	r0, #0
 8007b70:	f47f ac3a 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b74:	a801      	add	r0, sp, #4
 8007b76:	f7ff fa6d 	bl	8007054 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8007b7a:	9801      	ldr	r0, [sp, #4]
            break;
 8007b7c:	e434      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007b7e:	4a1e      	ldr	r2, [pc, #120]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007b80:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007b84:	f013 0307 	ands.w	r3, r3, #7
 8007b88:	f000 845c 	beq.w	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x10f8>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	f000 8598 	beq.w	80086c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1376>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8007b92:	2b02      	cmp	r3, #2
 8007b94:	f000 8642 	beq.w	800881c <HAL_RCCEx_GetPeriphCLKFreq+0x14d0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007b98:	6812      	ldr	r2, [r2, #0]
 8007b9a:	0390      	lsls	r0, r2, #14
 8007b9c:	d502      	bpl.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	f000 8753 	beq.w	8008a4a <HAL_RCCEx_GetPeriphCLKFreq+0x16fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007ba4:	4a14      	ldr	r2, [pc, #80]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007ba6:	6811      	ldr	r1, [r2, #0]
 8007ba8:	0789      	lsls	r1, r1, #30
 8007baa:	d502      	bpl.n	8007bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	f000 871b 	beq.w	80089e8 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8007bb2:	4a11      	ldr	r2, [pc, #68]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007bb4:	6810      	ldr	r0, [r2, #0]
 8007bb6:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8007bba:	f43f ac15 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8007bbe:	2b05      	cmp	r3, #5
 8007bc0:	480e      	ldr	r0, [pc, #56]	; (8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8007bc2:	bf18      	it	ne
 8007bc4:	2000      	movne	r0, #0
 8007bc6:	e40f      	b.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8007bc8:	4a0b      	ldr	r2, [pc, #44]	; (8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8007bca:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8007bce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
        switch (srcclk)
 8007bd2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007bd6:	f000 8517 	beq.w	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8007bda:	f200 81f7 	bhi.w	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8007bde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007be2:	d0c7      	beq.n	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8007be4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007be8:	f040 81ea 	bne.w	8007fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bec:	a801      	add	r0, sp, #4
 8007bee:	f7ff faef 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8007bf2:	9803      	ldr	r0, [sp, #12]
            break;
 8007bf4:	f7ff bbf8 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8007bf8:	44020c00 	.word	0x44020c00
 8007bfc:	003d0900 	.word	0x003d0900
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8007c00:	4a8f      	ldr	r2, [pc, #572]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c02:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8007c06:	f013 7340 	ands.w	r3, r3, #50331648	; 0x3000000
 8007c0a:	f43f aede 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8007c0e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c12:	f000 84a6 	beq.w	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8007c16:	6810      	ldr	r0, [r2, #0]
 8007c18:	f010 0002 	ands.w	r0, r0, #2
 8007c1c:	f43f abe4 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8007c20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007c24:	f000 8646 	beq.w	80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
          frequency = 0U;
 8007c28:	2000      	movs	r0, #0
 8007c2a:	f7ff bbdd 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007c2e:	4a84      	ldr	r2, [pc, #528]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c30:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007c34:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007c36:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007c3a:	0492      	lsls	r2, r2, #18
 8007c3c:	d502      	bpl.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f000 84df 	beq.w	8008602 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8007c44:	4a7e      	ldr	r2, [pc, #504]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c46:	6812      	ldr	r2, [r2, #0]
 8007c48:	0190      	lsls	r0, r2, #6
 8007c4a:	d502      	bpl.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8007c4c:	2b10      	cmp	r3, #16
 8007c4e:	f43f ad04 	beq.w	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8007c52:	4a7b      	ldr	r2, [pc, #492]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c54:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8007c58:	0791      	lsls	r1, r2, #30
 8007c5a:	d502      	bpl.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	f000 86b8 	beq.w	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1686>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8007c62:	4a77      	ldr	r2, [pc, #476]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c64:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007c68:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8007c6c:	f43f abbc 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSI_VALUE;
 8007c70:	2b30      	cmp	r3, #48	; 0x30
 8007c72:	bf14      	ite	ne
 8007c74:	2000      	movne	r0, #0
 8007c76:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8007c7a:	f7ff bbb5 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007c7e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007c82:	4770      	bx	lr
      frequency = LSI_VALUE;
 8007c84:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8007c88:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8007c8a:	4b6d      	ldr	r3, [pc, #436]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007c8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8007c90:	0619      	lsls	r1, r3, #24
 8007c92:	f57f ace2 	bpl.w	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c96:	a801      	add	r0, sp, #4
 8007c98:	f7ff f9dc 	bl	8007054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007c9c:	9803      	ldr	r0, [sp, #12]
 8007c9e:	f7ff bba3 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	f47f ae57 	bne.w	8007956 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = LSE_VALUE;
 8007ca8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007cac:	f7ff bb9c 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8007cb0:	4a63      	ldr	r2, [pc, #396]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007cb2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8007cb6:	f413 3360 	ands.w	r3, r3, #229376	; 0x38000
 8007cba:	f43f ae86 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8007cbe:	6812      	ldr	r2, [r2, #0]
 8007cc0:	0112      	lsls	r2, r2, #4
 8007cc2:	d503      	bpl.n	8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cc8:	f000 816e 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8007ccc:	4a5c      	ldr	r2, [pc, #368]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007cce:	6812      	ldr	r2, [r2, #0]
 8007cd0:	0090      	lsls	r0, r2, #2
 8007cd2:	d503      	bpl.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8007cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd8:	f000 816c 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8007cdc:	4a58      	ldr	r2, [pc, #352]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007cde:	6811      	ldr	r1, [r2, #0]
 8007ce0:	0789      	lsls	r1, r1, #30
 8007ce2:	d503      	bpl.n	8007cec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 8007ce4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007ce8:	f000 85dd 	beq.w	80088a6 <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8007cec:	4a54      	ldr	r2, [pc, #336]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007cee:	6812      	ldr	r2, [r2, #0]
 8007cf0:	0590      	lsls	r0, r2, #22
 8007cf2:	d503      	bpl.n	8007cfc <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8007cf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007cf8:	f000 86a1 	beq.w	8008a3e <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8007cfc:	4a50      	ldr	r2, [pc, #320]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007cfe:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007d02:	f010 0002 	ands.w	r0, r0, #2
 8007d06:	f43f ab6f 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007d0a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007d0e:	bf14      	ite	ne
 8007d10:	2000      	movne	r0, #0
 8007d12:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007d16:	f7ff bb67 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007d1a:	4a49      	ldr	r2, [pc, #292]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d1c:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007d20:	f413 43e0 	ands.w	r3, r3, #28672	; 0x7000
 8007d24:	f43f ae51 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8007d28:	6812      	ldr	r2, [r2, #0]
 8007d2a:	0111      	lsls	r1, r2, #4
 8007d2c:	d503      	bpl.n	8007d36 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8007d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d32:	f000 8139 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8007d36:	4a42      	ldr	r2, [pc, #264]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d38:	6812      	ldr	r2, [r2, #0]
 8007d3a:	0092      	lsls	r2, r2, #2
 8007d3c:	d503      	bpl.n	8007d46 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8007d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d42:	f000 8137 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007d46:	4a3e      	ldr	r2, [pc, #248]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d48:	6811      	ldr	r1, [r2, #0]
 8007d4a:	0788      	lsls	r0, r1, #30
 8007d4c:	d503      	bpl.n	8007d56 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
 8007d4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d52:	f000 8622 	beq.w	800899a <HAL_RCCEx_GetPeriphCLKFreq+0x164e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8007d56:	4a3a      	ldr	r2, [pc, #232]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d58:	6812      	ldr	r2, [r2, #0]
 8007d5a:	0591      	lsls	r1, r2, #22
 8007d5c:	d503      	bpl.n	8007d66 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8007d5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d62:	f000 8666 	beq.w	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x16e6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007d66:	4a36      	ldr	r2, [pc, #216]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d68:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007d6c:	f010 0002 	ands.w	r0, r0, #2
 8007d70:	f43f ab3a 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007d74:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007d78:	bf14      	ite	ne
 8007d7a:	2000      	movne	r0, #0
 8007d7c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007d80:	f7ff bb32 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007d84:	4a2e      	ldr	r2, [pc, #184]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007d86:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007d8a:	f413 73e0 	ands.w	r3, r3, #448	; 0x1c0
 8007d8e:	f43f ae1c 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	0111      	lsls	r1, r2, #4
 8007d96:	d502      	bpl.n	8007d9e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8007d98:	2b40      	cmp	r3, #64	; 0x40
 8007d9a:	f000 8105 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8007d9e:	4a28      	ldr	r2, [pc, #160]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	0092      	lsls	r2, r2, #2
 8007da4:	d502      	bpl.n	8007dac <HAL_RCCEx_GetPeriphCLKFreq+0xa60>
 8007da6:	2b80      	cmp	r3, #128	; 0x80
 8007da8:	f000 8104 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007dac:	4a24      	ldr	r2, [pc, #144]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007dae:	6811      	ldr	r1, [r2, #0]
 8007db0:	0788      	lsls	r0, r1, #30
 8007db2:	d502      	bpl.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8007db4:	2bc0      	cmp	r3, #192	; 0xc0
 8007db6:	f000 85f7 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8007dba:	4a21      	ldr	r2, [pc, #132]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007dbc:	6812      	ldr	r2, [r2, #0]
 8007dbe:	0591      	lsls	r1, r2, #22
 8007dc0:	d503      	bpl.n	8007dca <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 8007dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dc6:	f000 861f 	beq.w	8008a08 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007dca:	4a1d      	ldr	r2, [pc, #116]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007dcc:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007dd0:	f010 0002 	ands.w	r0, r0, #2
 8007dd4:	f43f ab08 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007dd8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007ddc:	bf14      	ite	ne
 8007dde:	2000      	movne	r0, #0
 8007de0:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007de4:	f7ff bb00 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007de8:	4a15      	ldr	r2, [pc, #84]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007dea:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007dee:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8007df2:	f43f adea 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8007df6:	6812      	ldr	r2, [r2, #0]
 8007df8:	0110      	lsls	r0, r2, #4
 8007dfa:	d502      	bpl.n	8007e02 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	f000 80d3 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8007e02:	2b10      	cmp	r3, #16
 8007e04:	f000 80d6 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007e08:	4a0d      	ldr	r2, [pc, #52]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007e0a:	6811      	ldr	r1, [r2, #0]
 8007e0c:	0789      	lsls	r1, r1, #30
 8007e0e:	d502      	bpl.n	8007e16 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8007e10:	2b18      	cmp	r3, #24
 8007e12:	f000 85d7 	beq.w	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1678>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8007e16:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007e18:	6812      	ldr	r2, [r2, #0]
 8007e1a:	0590      	lsls	r0, r2, #22
 8007e1c:	d502      	bpl.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 8007e1e:	2b20      	cmp	r3, #32
 8007e20:	f000 8616 	beq.w	8008a50 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007e24:	4a06      	ldr	r2, [pc, #24]	; (8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8007e26:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007e2a:	f010 0002 	ands.w	r0, r0, #2
 8007e2e:	f43f aadb 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007e32:	2b28      	cmp	r3, #40	; 0x28
 8007e34:	bf14      	ite	ne
 8007e36:	2000      	movne	r0, #0
 8007e38:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007e3c:	f7ff bad4 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8007e40:	44020c00 	.word	0x44020c00
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007e44:	4aa7      	ldr	r2, [pc, #668]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007e46:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007e4a:	f413 6360 	ands.w	r3, r3, #3584	; 0xe00
 8007e4e:	f43f adbc 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8007e52:	6812      	ldr	r2, [r2, #0]
 8007e54:	0112      	lsls	r2, r2, #4
 8007e56:	d503      	bpl.n	8007e60 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8007e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e5c:	f000 80a4 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8007e60:	4aa0      	ldr	r2, [pc, #640]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007e62:	6812      	ldr	r2, [r2, #0]
 8007e64:	0090      	lsls	r0, r2, #2
 8007e66:	d503      	bpl.n	8007e70 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8007e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e6c:	f000 80a2 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007e70:	4a9c      	ldr	r2, [pc, #624]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007e72:	6811      	ldr	r1, [r2, #0]
 8007e74:	0789      	lsls	r1, r1, #30
 8007e76:	d503      	bpl.n	8007e80 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8007e78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007e7c:	f000 859b 	beq.w	80089b6 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8007e80:	4a98      	ldr	r2, [pc, #608]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	0590      	lsls	r0, r2, #22
 8007e86:	d503      	bpl.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
 8007e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e8c:	f000 85bf 	beq.w	8008a0e <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007e90:	4a94      	ldr	r2, [pc, #592]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007e92:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007e96:	f010 0002 	ands.w	r0, r0, #2
 8007e9a:	f43f aaa5 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007e9e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8007ea2:	bf14      	ite	ne
 8007ea4:	2000      	movne	r0, #0
 8007ea6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007eaa:	f7ff ba9d 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007eae:	4a8d      	ldr	r2, [pc, #564]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007eb0:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007eb4:	f013 0307 	ands.w	r3, r3, #7
 8007eb8:	d026      	beq.n	8007f08 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8007eba:	6812      	ldr	r2, [r2, #0]
 8007ebc:	0112      	lsls	r2, r2, #4
 8007ebe:	d501      	bpl.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d071      	beq.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8007ec4:	4a87      	ldr	r2, [pc, #540]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007ec6:	6812      	ldr	r2, [r2, #0]
 8007ec8:	0090      	lsls	r0, r2, #2
 8007eca:	d501      	bpl.n	8007ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007ecc:	2b02      	cmp	r3, #2
 8007ece:	d071      	beq.n	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007ed0:	4a84      	ldr	r2, [pc, #528]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007ed2:	6811      	ldr	r1, [r2, #0]
 8007ed4:	0789      	lsls	r1, r1, #30
 8007ed6:	d502      	bpl.n	8007ede <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	f000 8507 	beq.w	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8007ede:	4a81      	ldr	r2, [pc, #516]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	0592      	lsls	r2, r2, #22
 8007ee4:	d502      	bpl.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	f000 859d 	beq.w	8008a26 <HAL_RCCEx_GetPeriphCLKFreq+0x16da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007eec:	4a7d      	ldr	r2, [pc, #500]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007eee:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007ef2:	f010 0002 	ands.w	r0, r0, #2
 8007ef6:	f43f aa77 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007efa:	2b05      	cmp	r3, #5
 8007efc:	bf14      	ite	ne
 8007efe:	2000      	movne	r0, #0
 8007f00:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007f04:	f7ff ba70 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
}
 8007f08:	b005      	add	sp, #20
 8007f0a:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetPCLK2Freq();
 8007f0e:	f7fc bfe7 	b.w	8004ee0 <HAL_RCC_GetPCLK2Freq>
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f12:	a801      	add	r0, sp, #4
 8007f14:	f7fe ffe0 	bl	8006ed8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8007f18:	9802      	ldr	r0, [sp, #8]
            break;
 8007f1a:	f7ff ba65 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f1e:	a801      	add	r0, sp, #4
 8007f20:	f7ff f956 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8007f24:	9801      	ldr	r0, [sp, #4]
            break;
 8007f26:	f7ff ba5f 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 8007f2a:	486f      	ldr	r0, [pc, #444]	; (80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007f2c:	f7ff ba5c 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f30:	4a6c      	ldr	r2, [pc, #432]	; (80080e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007f32:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f36:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007f38:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007f3c:	0789      	lsls	r1, r1, #30
 8007f3e:	f140 83da 	bpl.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	f040 83d7 	bne.w	80086f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007f48:	6813      	ldr	r3, [r2, #0]
 8007f4a:	4868      	ldr	r0, [pc, #416]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8007f4c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007f50:	40d8      	lsrs	r0, r3
 8007f52:	f7ff ba49 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f56:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8007f5a:	f010 0002 	ands.w	r0, r0, #2
 8007f5e:	bf18      	it	ne
 8007f60:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8007f64:	f7ff ba40 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f68:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
      frequency = LSE_VALUE;
 8007f6c:	f010 0002 	ands.w	r0, r0, #2
 8007f70:	bf18      	it	ne
 8007f72:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8007f76:	f7ff ba37 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007f7a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8007f7e:	f010 0002 	ands.w	r0, r0, #2
 8007f82:	bf18      	it	ne
 8007f84:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8007f88:	f7ff ba2e 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8007f8c:	69d3      	ldr	r3, [r2, #28]
 8007f8e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8007f92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f96:	f4ff ad15 	bcc.w	80079c4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8007f9a:	69d0      	ldr	r0, [r2, #28]
 8007f9c:	4b53      	ldr	r3, [pc, #332]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8007f9e:	f3c0 2005 	ubfx	r0, r0, #8, #6
 8007fa2:	fbb3 f0f0 	udiv	r0, r3, r0
 8007fa6:	4770      	bx	lr
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fa8:	a801      	add	r0, sp, #4
 8007faa:	f7ff f853 	bl	8007054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007fae:	9802      	ldr	r0, [sp, #8]
 8007fb0:	f7ff ba1a 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fb4:	a801      	add	r0, sp, #4
 8007fb6:	f7ff f90b 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fba:	9802      	ldr	r0, [sp, #8]
 8007fbc:	f7ff ba14 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f43f ac6d 	beq.w	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f7ff ba0e 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8007fcc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fd0:	f000 832c 	beq.w	800862c <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 8007fd4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007fd8:	bf18      	it	ne
 8007fda:	2000      	movne	r0, #0
 8007fdc:	f47f aa04 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fe0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fe4:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8007fe6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007fea:	0789      	lsls	r1, r1, #30
 8007fec:	f140 83ec 	bpl.w	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	f040 83e9 	bne.w	80087c8 <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007ff6:	6813      	ldr	r3, [r2, #0]
 8007ff8:	483c      	ldr	r0, [pc, #240]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8007ffa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007ffe:	40d8      	lsrs	r0, r3
 8008000:	f7ff b9f2 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008008:	f000 8307 	beq.w	800861a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800800c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008010:	bf18      	it	ne
 8008012:	2000      	movne	r0, #0
 8008014:	f47f a9e8 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008018:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800801c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800801e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008022:	0789      	lsls	r1, r1, #30
 8008024:	f140 83bb 	bpl.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 8008028:	2b00      	cmp	r3, #0
 800802a:	f040 83b8 	bne.w	800879e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800802e:	6813      	ldr	r3, [r2, #0]
 8008030:	482e      	ldr	r0, [pc, #184]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8008032:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008036:	40d8      	lsrs	r0, r3
 8008038:	f7ff b9d6 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800803c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008040:	f000 82fd 	beq.w	800863e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8008044:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8008048:	bf18      	it	ne
 800804a:	4618      	movne	r0, r3
 800804c:	f47f a9cc 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008050:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008054:	680a      	ldr	r2, [r1, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008056:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800805a:	0790      	lsls	r0, r2, #30
 800805c:	f140 83f9 	bpl.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 8008060:	2b00      	cmp	r3, #0
 8008062:	f040 83f6 	bne.w	8008852 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008066:	680b      	ldr	r3, [r1, #0]
 8008068:	4820      	ldr	r0, [pc, #128]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800806a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800806e:	40d8      	lsrs	r0, r3
 8008070:	f7ff b9ba 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008074:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008078:	f000 82ea 	beq.w	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>
 800807c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008080:	bf18      	it	ne
 8008082:	2000      	movne	r0, #0
 8008084:	f47f a9b0 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008088:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800808c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800808e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008092:	0789      	lsls	r1, r1, #30
 8008094:	f140 83f2 	bpl.w	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x1530>
 8008098:	2b00      	cmp	r3, #0
 800809a:	f040 83ef 	bne.w	800887c <HAL_RCCEx_GetPeriphCLKFreq+0x1530>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800809e:	6813      	ldr	r3, [r2, #0]
 80080a0:	4812      	ldr	r0, [pc, #72]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 80080a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80080a6:	40d8      	lsrs	r0, r3
 80080a8:	f7ff b99e 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80080ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80080b0:	f000 826d 	beq.w	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x1242>
 80080b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080b8:	bf18      	it	ne
 80080ba:	2000      	movne	r0, #0
 80080bc:	f47f a994 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080c0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080c4:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80080c6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80080ca:	0789      	lsls	r1, r1, #30
 80080cc:	f140 82fe 	bpl.w	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f040 82fb 	bne.w	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80080d6:	6813      	ldr	r3, [r2, #0]
 80080d8:	4804      	ldr	r0, [pc, #16]	; (80080ec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 80080da:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80080de:	40d8      	lsrs	r0, r3
 80080e0:	f7ff b982 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80080e4:	44020c00 	.word	0x44020c00
 80080e8:	00bb8000 	.word	0x00bb8000
 80080ec:	017d7840 	.word	0x017d7840
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80080f0:	4ba1      	ldr	r3, [pc, #644]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80080f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080fa:	2b20      	cmp	r3, #32
 80080fc:	d844      	bhi.n	8008188 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 80080fe:	a201      	add	r2, pc, #4	; (adr r2, 8008104 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	08007f13 	.word	0x08007f13
 8008108:	08008189 	.word	0x08008189
 800810c:	08008189 	.word	0x08008189
 8008110:	08008189 	.word	0x08008189
 8008114:	08008189 	.word	0x08008189
 8008118:	08008189 	.word	0x08008189
 800811c:	08008189 	.word	0x08008189
 8008120:	08008189 	.word	0x08008189
 8008124:	08007b75 	.word	0x08007b75
 8008128:	08008189 	.word	0x08008189
 800812c:	08008189 	.word	0x08008189
 8008130:	08008189 	.word	0x08008189
 8008134:	08008189 	.word	0x08008189
 8008138:	08008189 	.word	0x08008189
 800813c:	08008189 	.word	0x08008189
 8008140:	08008189 	.word	0x08008189
 8008144:	08007f1f 	.word	0x08007f1f
 8008148:	08008189 	.word	0x08008189
 800814c:	08008189 	.word	0x08008189
 8008150:	08008189 	.word	0x08008189
 8008154:	08008189 	.word	0x08008189
 8008158:	08008189 	.word	0x08008189
 800815c:	08008189 	.word	0x08008189
 8008160:	08008189 	.word	0x08008189
 8008164:	080081b5 	.word	0x080081b5
 8008168:	08008189 	.word	0x08008189
 800816c:	08008189 	.word	0x08008189
 8008170:	08008189 	.word	0x08008189
 8008174:	08008189 	.word	0x08008189
 8008178:	08008189 	.word	0x08008189
 800817c:	08008189 	.word	0x08008189
 8008180:	08008189 	.word	0x08008189
 8008184:	0800818f 	.word	0x0800818f
 8008188:	2000      	movs	r0, #0
 800818a:	f7ff b92d 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800818e:	4a7a      	ldr	r2, [pc, #488]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008190:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008194:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008196:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800819a:	0789      	lsls	r1, r1, #30
 800819c:	f140 82ea 	bpl.w	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x1428>
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f040 82e7 	bne.w	8008774 <HAL_RCCEx_GetPeriphCLKFreq+0x1428>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081a6:	6813      	ldr	r3, [r2, #0]
 80081a8:	4874      	ldr	r0, [pc, #464]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 80081aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80081ae:	40d8      	lsrs	r0, r3
 80081b0:	f7ff b91a 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 80081b4:	4872      	ldr	r0, [pc, #456]	; (8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>)
 80081b6:	f7ff b917 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80081ba:	4a6f      	ldr	r2, [pc, #444]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80081bc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80081c0:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
        switch (srcclk)
 80081c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081c8:	f43f aea9 	beq.w	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 80081cc:	f200 8174 	bhi.w	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f43f ae9e 	beq.w	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 80081d6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081da:	bf18      	it	ne
 80081dc:	2000      	movne	r0, #0
 80081de:	f43f acc9 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80081e2:	f7ff b901 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80081e6:	4a64      	ldr	r2, [pc, #400]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80081e8:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 80081ec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
        switch (srcclk)
 80081f0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80081f4:	f000 825c 	beq.w	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>
 80081f8:	f200 8196 	bhi.w	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
 80081fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008200:	f43f acb8 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008208:	f43f acf0 	beq.w	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 800820c:	2b00      	cmp	r3, #0
 800820e:	f43f abdc 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8008212:	2000      	movs	r0, #0
 8008214:	f7ff b8e8 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008218:	4a57      	ldr	r2, [pc, #348]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800821a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800821e:	f013 0307 	ands.w	r3, r3, #7
 8008222:	f43f abd2 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008226:	6812      	ldr	r2, [r2, #0]
 8008228:	0111      	lsls	r1, r2, #4
 800822a:	d502      	bpl.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 800822c:	2b01      	cmp	r3, #1
 800822e:	f43f aebb 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008232:	4a51      	ldr	r2, [pc, #324]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	0092      	lsls	r2, r2, #2
 8008238:	d502      	bpl.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800823a:	2b02      	cmp	r3, #2
 800823c:	f43f aeba 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008240:	4a4d      	ldr	r2, [pc, #308]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008242:	6811      	ldr	r1, [r2, #0]
 8008244:	0788      	lsls	r0, r1, #30
 8008246:	d502      	bpl.n	800824e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8008248:	2b03      	cmp	r3, #3
 800824a:	f000 833a 	beq.w	80088c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1576>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800824e:	4a4a      	ldr	r2, [pc, #296]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008250:	6812      	ldr	r2, [r2, #0]
 8008252:	0591      	lsls	r1, r2, #22
 8008254:	d502      	bpl.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8008256:	2b04      	cmp	r3, #4
 8008258:	f000 83ee 	beq.w	8008a38 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800825c:	4a46      	ldr	r2, [pc, #280]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800825e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008262:	f010 0002 	ands.w	r0, r0, #2
 8008266:	f43f a8bf 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800826a:	2b05      	cmp	r3, #5
 800826c:	bf14      	ite	ne
 800826e:	2000      	movne	r0, #0
 8008270:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008274:	f7ff b8b8 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008278:	4a3f      	ldr	r2, [pc, #252]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800827a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800827e:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008282:	2b10      	cmp	r3, #16
 8008284:	f43f a9e9 	beq.w	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008288:	6812      	ldr	r2, [r2, #0]
 800828a:	0092      	lsls	r2, r2, #2
 800828c:	d502      	bpl.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800828e:	2b20      	cmp	r3, #32
 8008290:	f43f ae90 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008294:	4a38      	ldr	r2, [pc, #224]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008296:	6810      	ldr	r0, [r2, #0]
 8008298:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 800829c:	f43f a8a4 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSI48_VALUE;
 80082a0:	2b30      	cmp	r3, #48	; 0x30
 80082a2:	4838      	ldr	r0, [pc, #224]	; (8008384 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>)
 80082a4:	bf18      	it	ne
 80082a6:	2000      	movne	r0, #0
 80082a8:	f7ff b89e 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80082ac:	2bc0      	cmp	r3, #192	; 0xc0
 80082ae:	f000 816b 	beq.w	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0x123c>
 80082b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082b6:	f040 83f8 	bne.w	8008aaa <HAL_RCCEx_GetPeriphCLKFreq+0x175e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082ba:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082be:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80082c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80082c4:	0788      	lsls	r0, r1, #30
 80082c6:	f140 822b 	bpl.w	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	f040 8228 	bne.w	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80082d0:	6813      	ldr	r3, [r2, #0]
 80082d2:	482a      	ldr	r0, [pc, #168]	; (800837c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 80082d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80082d8:	40d8      	lsrs	r0, r3
 80082da:	f7ff b885 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 80082de:	4a26      	ldr	r2, [pc, #152]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80082e0:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 80082e4:	f013 63e0 	ands.w	r3, r3, #117440512	; 0x7000000
 80082e8:	f43f ab6f 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 80082ec:	6812      	ldr	r2, [r2, #0]
 80082ee:	0111      	lsls	r1, r2, #4
 80082f0:	d503      	bpl.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 80082f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082f6:	f43f ae57 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 80082fa:	4a1f      	ldr	r2, [pc, #124]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80082fc:	6812      	ldr	r2, [r2, #0]
 80082fe:	0092      	lsls	r2, r2, #2
 8008300:	d503      	bpl.n	800830a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008306:	f43f ae55 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800830a:	4a1b      	ldr	r2, [pc, #108]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800830c:	6811      	ldr	r1, [r2, #0]
 800830e:	0788      	lsls	r0, r1, #30
 8008310:	d503      	bpl.n	800831a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8008312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008316:	f000 8339 	beq.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800831a:	4a17      	ldr	r2, [pc, #92]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800831c:	6812      	ldr	r2, [r2, #0]
 800831e:	0591      	lsls	r1, r2, #22
 8008320:	d503      	bpl.n	800832a <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
 8008322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008326:	f000 8381 	beq.w	8008a2c <HAL_RCCEx_GetPeriphCLKFreq+0x16e0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800832a:	4a13      	ldr	r2, [pc, #76]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800832c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008330:	f010 0002 	ands.w	r0, r0, #2
 8008334:	f43f a858 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008338:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800833c:	bf14      	ite	ne
 800833e:	2000      	movne	r0, #0
 8008340:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008344:	f7ff b850 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008348:	4a0b      	ldr	r2, [pc, #44]	; (8008378 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800834a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 800834e:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
        switch (srcclk)
 8008352:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008356:	f000 8199 	beq.w	800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
 800835a:	d848      	bhi.n	80083ee <HAL_RCCEx_GetPeriphCLKFreq+0x10a2>
 800835c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008360:	f43f ac08 	beq.w	8007b74 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008364:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008368:	f43f ac40 	beq.w	8007bec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 800836c:	2b00      	cmp	r3, #0
 800836e:	f43f aa97 	beq.w	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008372:	2000      	movs	r0, #0
 8008374:	f7ff b838 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008378:	44020c00 	.word	0x44020c00
 800837c:	017d7840 	.word	0x017d7840
 8008380:	00bb8000 	.word	0x00bb8000
 8008384:	02dc6c00 	.word	0x02dc6c00
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008388:	4abb      	ldr	r2, [pc, #748]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800838a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800838e:	f413 43e0 	ands.w	r3, r3, #28672	; 0x7000
 8008392:	f43f aa85 	beq.w	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008396:	6812      	ldr	r2, [r2, #0]
 8008398:	0111      	lsls	r1, r2, #4
 800839a:	d503      	bpl.n	80083a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800839c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a0:	f43f ae02 	beq.w	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 80083a4:	4ab4      	ldr	r2, [pc, #720]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80083a6:	6812      	ldr	r2, [r2, #0]
 80083a8:	0092      	lsls	r2, r2, #2
 80083aa:	d503      	bpl.n	80083b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 80083ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083b0:	f43f ae00 	beq.w	8007fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 80083b4:	4ab0      	ldr	r2, [pc, #704]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80083b6:	6811      	ldr	r1, [r2, #0]
 80083b8:	0788      	lsls	r0, r1, #30
 80083ba:	d503      	bpl.n	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>
 80083bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80083c0:	f000 82be 	beq.w	8008940 <HAL_RCCEx_GetPeriphCLKFreq+0x15f4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 80083c4:	4aac      	ldr	r2, [pc, #688]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80083c6:	6812      	ldr	r2, [r2, #0]
 80083c8:	0591      	lsls	r1, r2, #22
 80083ca:	d503      	bpl.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 80083cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083d0:	f000 8317 	beq.w	8008a02 <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 80083d4:	4aa8      	ldr	r2, [pc, #672]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80083d6:	6810      	ldr	r0, [r2, #0]
 80083d8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80083dc:	f43f a804 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80083e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80083e4:	48a5      	ldr	r0, [pc, #660]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 80083e6:	bf18      	it	ne
 80083e8:	2000      	movne	r0, #0
 80083ea:	f7fe bffd 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80083ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083f2:	f000 8154 	beq.w	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x1352>
 80083f6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80083fa:	bf18      	it	ne
 80083fc:	2000      	movne	r0, #0
 80083fe:	f47e aff3 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008402:	4a9d      	ldr	r2, [pc, #628]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008404:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008408:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800840a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800840e:	0789      	lsls	r1, r1, #30
 8008410:	f140 81ef 	bpl.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
 8008414:	2b00      	cmp	r3, #0
 8008416:	f040 81ec 	bne.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	4897      	ldr	r0, [pc, #604]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800841e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008422:	40d8      	lsrs	r0, r3
 8008424:	f7fe bfe0 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008428:	4a93      	ldr	r2, [pc, #588]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800842a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800842e:	f003 0303 	and.w	r3, r3, #3
        switch (srcclk)
 8008432:	2b02      	cmp	r3, #2
 8008434:	f000 80c0 	beq.w	80085b8 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>
 8008438:	2b03      	cmp	r3, #3
 800843a:	f000 80ae 	beq.w	800859a <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
 800843e:	2b01      	cmp	r3, #1
 8008440:	f43f ad67 	beq.w	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
}
 8008444:	b005      	add	sp, #20
 8008446:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetHCLKFreq();
 800844a:	f7fc b9d5 	b.w	80047f8 <HAL_RCC_GetHCLKFreq>
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800844e:	4b8a      	ldr	r3, [pc, #552]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008450:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008454:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008458:	f000 0008 	and.w	r0, r0, #8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800845c:	0792      	lsls	r2, r2, #30
 800845e:	f140 8086 	bpl.w	800856e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008462:	2800      	cmp	r0, #0
 8008464:	f000 80c9 	beq.w	80085fa <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008468:	4b83      	ldr	r3, [pc, #524]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800846a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
          frequency = LSI_VALUE;
 800846e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008472:	bf18      	it	ne
 8008474:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8008478:	f7fe bfb6 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800847c:	4a7e      	ldr	r2, [pc, #504]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800847e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008482:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 8008486:	f43f aa0b 	beq.w	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800848a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800848e:	d068      	beq.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008490:	6812      	ldr	r2, [r2, #0]
 8008492:	0792      	lsls	r2, r2, #30
 8008494:	d503      	bpl.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
 8008496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800849a:	f000 825f 	beq.w	800895c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800849e:	4a76      	ldr	r2, [pc, #472]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80084a0:	6810      	ldr	r0, [r2, #0]
 80084a2:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80084a6:	f43e af9f 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 80084aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084ae:	4874      	ldr	r0, [pc, #464]	; (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>)
 80084b0:	bf18      	it	ne
 80084b2:	2000      	movne	r0, #0
 80084b4:	f7fe bf98 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80084b8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80084bc:	d061      	beq.n	8008582 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
 80084be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084c2:	f040 82ef 	bne.w	8008aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x1758>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084c6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084ca:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80084cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80084d0:	0789      	lsls	r1, r1, #30
 80084d2:	f140 813a 	bpl.w	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	f040 8137 	bne.w	800874a <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084dc:	6813      	ldr	r3, [r2, #0]
 80084de:	4867      	ldr	r0, [pc, #412]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 80084e0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80084e4:	40d8      	lsrs	r0, r3
 80084e6:	f7fe bf7f 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80084ea:	4b63      	ldr	r3, [pc, #396]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80084ec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80084f0:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 80084f4:	f43f aa69 	beq.w	80079ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 80084f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084fc:	d031      	beq.n	8008562 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80084fe:	4a5e      	ldr	r2, [pc, #376]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008500:	6811      	ldr	r1, [r2, #0]
 8008502:	0788      	lsls	r0, r1, #30
 8008504:	d503      	bpl.n	800850e <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 8008506:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800850a:	f000 822f 	beq.w	800896c <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800850e:	4a5a      	ldr	r2, [pc, #360]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008510:	6810      	ldr	r0, [r2, #0]
 8008512:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8008516:	f43e af67 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 800851a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800851e:	4858      	ldr	r0, [pc, #352]	; (8008680 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>)
 8008520:	bf18      	it	ne
 8008522:	2000      	movne	r0, #0
 8008524:	f7fe bf60 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800852c:	f000 8099 	beq.w	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
 8008530:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008534:	bf18      	it	ne
 8008536:	2000      	movne	r0, #0
 8008538:	f47e af56 	bne.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800853c:	4a4e      	ldr	r2, [pc, #312]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800853e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008542:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008544:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008548:	0789      	lsls	r1, r1, #30
 800854a:	f140 816d 	bpl.w	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
 800854e:	2b00      	cmp	r3, #0
 8008550:	f040 816a 	bne.w	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008554:	6813      	ldr	r3, [r2, #0]
 8008556:	4849      	ldr	r0, [pc, #292]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8008558:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800855c:	40d8      	lsrs	r0, r3
 800855e:	f7fe bf43 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008562:	a801      	add	r0, sp, #4
 8008564:	f7fe fe34 	bl	80071d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008568:	9803      	ldr	r0, [sp, #12]
 800856a:	f7fe bf3d 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800856e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008572:	011b      	lsls	r3, r3, #4
 8008574:	d526      	bpl.n	80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
          frequency = LSI_VALUE;
 8008576:	2800      	cmp	r0, #0
 8008578:	bf18      	it	ne
 800857a:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800857e:	f7fe bf33 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 8008582:	4840      	ldr	r0, [pc, #256]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 8008584:	f7fe bf30 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008588:	483e      	ldr	r0, [pc, #248]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 800858a:	f7fe bf2d 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800858e:	483d      	ldr	r0, [pc, #244]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 8008590:	f7fe bf2a 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008594:	2000      	movs	r0, #0
 8008596:	f7fe bf27 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800859a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800859e:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80085a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80085a4:	0789      	lsls	r1, r1, #30
 80085a6:	d510      	bpl.n	80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 80085a8:	b97b      	cbnz	r3, 80085ca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	4833      	ldr	r0, [pc, #204]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 80085ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80085b2:	40d8      	lsrs	r0, r3
 80085b4:	f7fe bf18 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085b8:	a801      	add	r0, sp, #4
 80085ba:	f7fe fd4b 	bl	8007054 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 80085be:	9803      	ldr	r0, [sp, #12]
            break;
 80085c0:	f7fe bf12 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = 0U;
 80085c4:	2000      	movs	r0, #0
 80085c6:	f7fe bf0f 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80085ca:	4a2b      	ldr	r2, [pc, #172]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80085cc:	6812      	ldr	r2, [r2, #0]
 80085ce:	0592      	lsls	r2, r2, #22
 80085d0:	d503      	bpl.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0x128e>
 80085d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d6:	f000 8241 	beq.w	8008a5c <HAL_RCCEx_GetPeriphCLKFreq+0x1710>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80085da:	4a27      	ldr	r2, [pc, #156]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80085dc:	6810      	ldr	r0, [r2, #0]
 80085de:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80085e2:	f43e af01 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80085e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80085ea:	4824      	ldr	r0, [pc, #144]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 80085ec:	bf18      	it	ne
 80085ee:	2000      	movne	r0, #0
 80085f0:	f7fe befa 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80085f4:	4821      	ldr	r0, [pc, #132]	; (800867c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 80085f6:	f7fe bef7 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80085fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80085fe:	f7fe bef3 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSI48_VALUE;
 8008602:	4821      	ldr	r0, [pc, #132]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 8008604:	f7fe bef0 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008608:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 800860c:	f010 0002 	ands.w	r0, r0, #2
 8008610:	bf18      	it	ne
 8008612:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008616:	f7fe bee7 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800861a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 800861e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008622:	bf18      	it	ne
 8008624:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8008628:	f7fe bede 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800862c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 8008630:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008634:	bf18      	it	ne
 8008636:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800863a:	f7fe bed5 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800863e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
          frequency = LSI_VALUE;
 8008642:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008646:	bf18      	it	ne
 8008648:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800864c:	f7fe becc 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008650:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 8008654:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008658:	bf18      	it	ne
 800865a:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800865e:	f7fe bec3 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8008662:	4b05      	ldr	r3, [pc, #20]	; (8008678 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008664:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
          frequency = LSI_VALUE;
 8008668:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800866c:	bf18      	it	ne
 800866e:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8008672:	f7fe beb9 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008676:	bf00      	nop
 8008678:	44020c00 	.word	0x44020c00
 800867c:	017d7840 	.word	0x017d7840
 8008680:	003d0900 	.word	0x003d0900
 8008684:	00bb8000 	.word	0x00bb8000
 8008688:	02dc6c00 	.word	0x02dc6c00
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800868c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8008690:	f010 0002 	ands.w	r0, r0, #2
 8008694:	bf18      	it	ne
 8008696:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800869a:	f7fe bea5 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800869e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 80086a2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80086a6:	bf18      	it	ne
 80086a8:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80086ac:	f7fe be9c 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80086b0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 80086b4:	f010 0002 	ands.w	r0, r0, #2
 80086b8:	bf18      	it	ne
 80086ba:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80086be:	f7fe be93 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
}
 80086c2:	b005      	add	sp, #20
 80086c4:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 80086c8:	f7fb bf48 	b.w	800455c <HAL_RCC_GetSysClockFreq>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086cc:	4aad      	ldr	r2, [pc, #692]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	0590      	lsls	r0, r2, #22
 80086d2:	d503      	bpl.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d8:	f000 81d2 	beq.w	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0x1734>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80086dc:	4aa9      	ldr	r2, [pc, #676]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80086de:	6810      	ldr	r0, [r2, #0]
 80086e0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80086e4:	f43e ae80 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80086e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086ec:	48a6      	ldr	r0, [pc, #664]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80086ee:	bf18      	it	ne
 80086f0:	2000      	movne	r0, #0
 80086f2:	f7fe be79 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80086f6:	4aa3      	ldr	r2, [pc, #652]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80086f8:	6812      	ldr	r2, [r2, #0]
 80086fa:	0590      	lsls	r0, r2, #22
 80086fc:	d503      	bpl.n	8008706 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
 80086fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008702:	f000 81c9 	beq.w	8008a98 <HAL_RCCEx_GetPeriphCLKFreq+0x174c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008706:	4a9f      	ldr	r2, [pc, #636]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8008708:	6810      	ldr	r0, [r2, #0]
 800870a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800870e:	f43e ae6b 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8008712:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008716:	489c      	ldr	r0, [pc, #624]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008718:	bf18      	it	ne
 800871a:	2000      	movne	r0, #0
 800871c:	f7fe be64 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008720:	4a98      	ldr	r2, [pc, #608]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	0591      	lsls	r1, r2, #22
 8008726:	d503      	bpl.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 8008728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800872c:	f000 81b1 	beq.w	8008a92 <HAL_RCCEx_GetPeriphCLKFreq+0x1746>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008730:	4a94      	ldr	r2, [pc, #592]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8008732:	6810      	ldr	r0, [r2, #0]
 8008734:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008738:	f43e ae56 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800873c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008740:	4891      	ldr	r0, [pc, #580]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008742:	bf18      	it	ne
 8008744:	2000      	movne	r0, #0
 8008746:	f7fe be4f 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800874a:	4a8e      	ldr	r2, [pc, #568]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	0592      	lsls	r2, r2, #22
 8008750:	d503      	bpl.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x140e>
 8008752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008756:	f000 8187 	beq.w	8008a68 <HAL_RCCEx_GetPeriphCLKFreq+0x171c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800875a:	4a8a      	ldr	r2, [pc, #552]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800875c:	6810      	ldr	r0, [r2, #0]
 800875e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008762:	f43e ae41 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8008766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800876a:	4887      	ldr	r0, [pc, #540]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800876c:	bf18      	it	ne
 800876e:	2000      	movne	r0, #0
 8008770:	f7fe be3a 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008774:	4a83      	ldr	r2, [pc, #524]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8008776:	6812      	ldr	r2, [r2, #0]
 8008778:	0592      	lsls	r2, r2, #22
 800877a:	d503      	bpl.n	8008784 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800877c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008780:	f000 8184 	beq.w	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0x1740>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008784:	4a7f      	ldr	r2, [pc, #508]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8008786:	6810      	ldr	r0, [r2, #0]
 8008788:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800878c:	f43e ae2c 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8008790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008794:	487c      	ldr	r0, [pc, #496]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008796:	bf18      	it	ne
 8008798:	2000      	movne	r0, #0
 800879a:	f7fe be25 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800879e:	4a79      	ldr	r2, [pc, #484]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80087a0:	6812      	ldr	r2, [r2, #0]
 80087a2:	0590      	lsls	r0, r2, #22
 80087a4:	d503      	bpl.n	80087ae <HAL_RCCEx_GetPeriphCLKFreq+0x1462>
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087aa:	f000 816c 	beq.w	8008a86 <HAL_RCCEx_GetPeriphCLKFreq+0x173a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087ae:	4a75      	ldr	r2, [pc, #468]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80087b0:	6810      	ldr	r0, [r2, #0]
 80087b2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80087b6:	f43e ae17 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80087ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087be:	4872      	ldr	r0, [pc, #456]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80087c0:	bf18      	it	ne
 80087c2:	2000      	movne	r0, #0
 80087c4:	f7fe be10 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087c8:	4a6e      	ldr	r2, [pc, #440]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80087ca:	6812      	ldr	r2, [r2, #0]
 80087cc:	0592      	lsls	r2, r2, #22
 80087ce:	d503      	bpl.n	80087d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 80087d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087d4:	f000 8151 	beq.w	8008a7a <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80087d8:	4a6a      	ldr	r2, [pc, #424]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80087da:	6810      	ldr	r0, [r2, #0]
 80087dc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80087e0:	f43e ae02 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80087e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087e8:	4867      	ldr	r0, [pc, #412]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80087ea:	bf18      	it	ne
 80087ec:	2000      	movne	r0, #0
 80087ee:	f7fe bdfb 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80087f2:	4a64      	ldr	r2, [pc, #400]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80087f4:	6812      	ldr	r2, [r2, #0]
 80087f6:	0590      	lsls	r0, r2, #22
 80087f8:	d503      	bpl.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 80087fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087fe:	f000 8130 	beq.w	8008a62 <HAL_RCCEx_GetPeriphCLKFreq+0x1716>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008802:	4a60      	ldr	r2, [pc, #384]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8008804:	6810      	ldr	r0, [r2, #0]
 8008806:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800880a:	f43e aded 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800880e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008812:	485d      	ldr	r0, [pc, #372]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008814:	bf18      	it	ne
 8008816:	2000      	movne	r0, #0
 8008818:	f7fe bde6 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800881c:	a801      	add	r0, sp, #4
 800881e:	f7fe fc19 	bl	8007054 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008822:	9803      	ldr	r0, [sp, #12]
 8008824:	f7fe bde0 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008828:	4a56      	ldr	r2, [pc, #344]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800882a:	6812      	ldr	r2, [r2, #0]
 800882c:	0590      	lsls	r0, r2, #22
 800882e:	d503      	bpl.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>
 8008830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008834:	f000 8133 	beq.w	8008a9e <HAL_RCCEx_GetPeriphCLKFreq+0x1752>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008838:	4a52      	ldr	r2, [pc, #328]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800883a:	6810      	ldr	r0, [r2, #0]
 800883c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008840:	f43e add2 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8008844:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008848:	484f      	ldr	r0, [pc, #316]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800884a:	bf18      	it	ne
 800884c:	2000      	movne	r0, #0
 800884e:	f7fe bdcb 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008852:	4a4c      	ldr	r2, [pc, #304]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	0592      	lsls	r2, r2, #22
 8008858:	d503      	bpl.n	8008862 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800885a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885e:	f000 8106 	beq.w	8008a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1722>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008862:	4a48      	ldr	r2, [pc, #288]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8008864:	6810      	ldr	r0, [r2, #0]
 8008866:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800886a:	f43e adbd 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800886e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008872:	4845      	ldr	r0, [pc, #276]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008874:	bf18      	it	ne
 8008876:	2000      	movne	r0, #0
 8008878:	f7fe bdb6 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800887c:	4a41      	ldr	r2, [pc, #260]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800887e:	6812      	ldr	r2, [r2, #0]
 8008880:	0590      	lsls	r0, r2, #22
 8008882:	d503      	bpl.n	800888c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 8008884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008888:	f000 80f4 	beq.w	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800888c:	4a3d      	ldr	r2, [pc, #244]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800888e:	6810      	ldr	r0, [r2, #0]
 8008890:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008894:	f43e ada8 	beq.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8008898:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800889c:	483a      	ldr	r0, [pc, #232]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800889e:	bf18      	it	ne
 80088a0:	2000      	movne	r0, #0
 80088a2:	f7fe bda1 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088a6:	6813      	ldr	r3, [r2, #0]
 80088a8:	4837      	ldr	r0, [pc, #220]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80088aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088ae:	40d8      	lsrs	r0, r3
 80088b0:	f7fe bd9a 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088b4:	6813      	ldr	r3, [r2, #0]
 80088b6:	4834      	ldr	r0, [pc, #208]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80088b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088bc:	40d8      	lsrs	r0, r3
 80088be:	f7fe bd93 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088c2:	6813      	ldr	r3, [r2, #0]
 80088c4:	4830      	ldr	r0, [pc, #192]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80088c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088ca:	40d8      	lsrs	r0, r3
 80088cc:	f7fe bd8c 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088d0:	6813      	ldr	r3, [r2, #0]
 80088d2:	482d      	ldr	r0, [pc, #180]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80088d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088d8:	40d8      	lsrs	r0, r3
 80088da:	f7fe bd85 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088de:	6813      	ldr	r3, [r2, #0]
 80088e0:	4829      	ldr	r0, [pc, #164]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80088e2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088e6:	40d8      	lsrs	r0, r3
 80088e8:	f7fe bd7e 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088ec:	6813      	ldr	r3, [r2, #0]
 80088ee:	4826      	ldr	r0, [pc, #152]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80088f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80088f4:	40d8      	lsrs	r0, r3
 80088f6:	f7fe bd77 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80088fa:	6813      	ldr	r3, [r2, #0]
 80088fc:	4822      	ldr	r0, [pc, #136]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80088fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008902:	40d8      	lsrs	r0, r3
 8008904:	f7fe bd70 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008908:	6813      	ldr	r3, [r2, #0]
 800890a:	481f      	ldr	r0, [pc, #124]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800890c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008910:	40d8      	lsrs	r0, r3
 8008912:	f7fe bd69 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008916:	6813      	ldr	r3, [r2, #0]
 8008918:	481b      	ldr	r0, [pc, #108]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800891a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800891e:	40d8      	lsrs	r0, r3
 8008920:	f7fe bd62 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008924:	6813      	ldr	r3, [r2, #0]
 8008926:	4818      	ldr	r0, [pc, #96]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008928:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800892c:	40d8      	lsrs	r0, r3
 800892e:	f7fe bd5b 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008932:	6813      	ldr	r3, [r2, #0]
 8008934:	4814      	ldr	r0, [pc, #80]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008936:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800893a:	40d8      	lsrs	r0, r3
 800893c:	f7fe bd54 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008940:	6813      	ldr	r3, [r2, #0]
 8008942:	4811      	ldr	r0, [pc, #68]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008944:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008948:	40d8      	lsrs	r0, r3
 800894a:	f7fe bd4d 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800894e:	6813      	ldr	r3, [r2, #0]
 8008950:	480d      	ldr	r0, [pc, #52]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008952:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008956:	40d8      	lsrs	r0, r3
 8008958:	f7fe bd46 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800895c:	4b09      	ldr	r3, [pc, #36]	; (8008984 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800895e:	480a      	ldr	r0, [pc, #40]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008966:	40d8      	lsrs	r0, r3
 8008968:	f7fe bd3e 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800896c:	6813      	ldr	r3, [r2, #0]
 800896e:	4806      	ldr	r0, [pc, #24]	; (8008988 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8008970:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008974:	40d8      	lsrs	r0, r3
 8008976:	f7fe bd37 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSI_VALUE;
 800897a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800897e:	f7fe bd33 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008982:	bf00      	nop
 8008984:	44020c00 	.word	0x44020c00
 8008988:	017d7840 	.word	0x017d7840
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800898c:	6813      	ldr	r3, [r2, #0]
 800898e:	484a      	ldr	r0, [pc, #296]	; (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8008990:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008994:	40d8      	lsrs	r0, r3
 8008996:	f7fe bd27 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800899a:	6813      	ldr	r3, [r2, #0]
 800899c:	4846      	ldr	r0, [pc, #280]	; (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800899e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089a2:	40d8      	lsrs	r0, r3
 80089a4:	f7fe bd20 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089a8:	6813      	ldr	r3, [r2, #0]
 80089aa:	4843      	ldr	r0, [pc, #268]	; (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80089ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089b0:	40d8      	lsrs	r0, r3
 80089b2:	f7fe bd19 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089b6:	6813      	ldr	r3, [r2, #0]
 80089b8:	483f      	ldr	r0, [pc, #252]	; (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80089ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089be:	40d8      	lsrs	r0, r3
 80089c0:	f7fe bd12 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089c4:	6813      	ldr	r3, [r2, #0]
 80089c6:	483c      	ldr	r0, [pc, #240]	; (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80089c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089cc:	40d8      	lsrs	r0, r3
 80089ce:	f7fe bd0b 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSE_VALUE;
 80089d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80089d6:	f7fe bd07 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089da:	6813      	ldr	r3, [r2, #0]
 80089dc:	4836      	ldr	r0, [pc, #216]	; (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80089de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089e2:	40d8      	lsrs	r0, r3
 80089e4:	f7fe bd00 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089e8:	6813      	ldr	r3, [r2, #0]
 80089ea:	4833      	ldr	r0, [pc, #204]	; (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80089ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089f0:	40d8      	lsrs	r0, r3
 80089f2:	f7fe bcf9 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 80089f6:	4831      	ldr	r0, [pc, #196]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 80089f8:	f7fe bcf6 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80089fc:	482f      	ldr	r0, [pc, #188]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 80089fe:	f7fe bcf3 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a02:	482e      	ldr	r0, [pc, #184]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a04:	f7fe bcf0 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a08:	482c      	ldr	r0, [pc, #176]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a0a:	f7fe bced 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a0e:	482b      	ldr	r0, [pc, #172]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a10:	f7fe bcea 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a14:	4829      	ldr	r0, [pc, #164]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a16:	f7fe bce7 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a1a:	4828      	ldr	r0, [pc, #160]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a1c:	f7fe bce4 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a20:	4826      	ldr	r0, [pc, #152]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a22:	f7fe bce1 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a26:	4825      	ldr	r0, [pc, #148]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a28:	f7fe bcde 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a2c:	4823      	ldr	r0, [pc, #140]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a2e:	f7fe bcdb 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a32:	4822      	ldr	r0, [pc, #136]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a34:	f7fe bcd8 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a38:	4820      	ldr	r0, [pc, #128]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a3a:	f7fe bcd5 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a3e:	481f      	ldr	r0, [pc, #124]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a40:	f7fe bcd2 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a44:	481d      	ldr	r0, [pc, #116]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a46:	f7fe bccf 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSE_VALUE;
 8008a4a:	481b      	ldr	r0, [pc, #108]	; (8008ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8008a4c:	f7fe bccc 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8008a50:	481a      	ldr	r0, [pc, #104]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a52:	f7fe bcc9 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a56:	4819      	ldr	r0, [pc, #100]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a58:	f7fe bcc6 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a5c:	4817      	ldr	r0, [pc, #92]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a5e:	f7fe bcc3 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a62:	4816      	ldr	r0, [pc, #88]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a64:	f7fe bcc0 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a68:	4814      	ldr	r0, [pc, #80]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a6a:	f7fe bcbd 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a6e:	4813      	ldr	r0, [pc, #76]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a70:	f7fe bcba 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a74:	4811      	ldr	r0, [pc, #68]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a76:	f7fe bcb7 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a7a:	4810      	ldr	r0, [pc, #64]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a7c:	f7fe bcb4 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a80:	480e      	ldr	r0, [pc, #56]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a82:	f7fe bcb1 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a86:	480d      	ldr	r0, [pc, #52]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a88:	f7fe bcae 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a8c:	480b      	ldr	r0, [pc, #44]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a8e:	f7fe bcab 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a92:	480a      	ldr	r0, [pc, #40]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a94:	f7fe bca8 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a98:	4808      	ldr	r0, [pc, #32]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008a9a:	f7fe bca5 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a9e:	4807      	ldr	r0, [pc, #28]	; (8008abc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8008aa0:	f7fe bca2 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008aa4:	2000      	movs	r0, #0
 8008aa6:	f7fe bc9f 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	f7fe bc9c 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	f7fe bc99 	b.w	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008ab6:	bf00      	nop
 8008ab8:	017d7840 	.word	0x017d7840
 8008abc:	003d0900 	.word	0x003d0900

08008ac0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8008ac0:	6803      	ldr	r3, [r0, #0]
 8008ac2:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008ac4:	699a      	ldr	r2, [r3, #24]
 8008ac6:	f042 0208 	orr.w	r2, r2, #8
 8008aca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008acc:	699a      	ldr	r2, [r3, #24]
 8008ace:	f042 0210 	orr.w	r2, r2, #16
 8008ad2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	f022 0201 	bic.w	r2, r2, #1
 8008ada:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008adc:	691a      	ldr	r2, [r3, #16]
 8008ade:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 8008ae2:	f022 0203 	bic.w	r2, r2, #3
 8008ae6:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ae8:	689a      	ldr	r2, [r3, #8]
 8008aea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008aee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008af0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 8008af4:	2a04      	cmp	r2, #4
 8008af6:	d001      	beq.n	8008afc <SPI_CloseTransfer+0x3c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008af8:	068a      	lsls	r2, r1, #26
 8008afa:	d431      	bmi.n	8008b60 <SPI_CloseTransfer+0xa0>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008afc:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 8008b00:	2a03      	cmp	r2, #3
 8008b02:	d00f      	beq.n	8008b24 <SPI_CloseTransfer+0x64>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008b04:	064a      	lsls	r2, r1, #25
 8008b06:	d509      	bpl.n	8008b1c <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b08:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8008b0c:	f042 0204 	orr.w	r2, r2, #4
 8008b10:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b14:	699a      	ldr	r2, [r3, #24]
 8008b16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b1a:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008b1c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008b1e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8008b22:	d028      	beq.n	8008b76 <SPI_CloseTransfer+0xb6>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008b24:	058a      	lsls	r2, r1, #22
 8008b26:	d509      	bpl.n	8008b3c <SPI_CloseTransfer+0x7c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b28:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8008b2c:	f042 0201 	orr.w	r2, r2, #1
 8008b30:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b34:	699a      	ldr	r2, [r3, #24]
 8008b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b3a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008b3c:	05ca      	lsls	r2, r1, #23
 8008b3e:	d509      	bpl.n	8008b54 <SPI_CloseTransfer+0x94>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b40:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8008b44:	f042 0208 	orr.w	r2, r2, #8
 8008b48:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b4c:	699a      	ldr	r2, [r3, #24]
 8008b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b52:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008b54:	2300      	movs	r3, #0
 8008b56:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008b5a:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
}
 8008b5e:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008b60:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8008b64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b68:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	f042 0220 	orr.w	r2, r2, #32
 8008b72:	619a      	str	r2, [r3, #24]
 8008b74:	e7c2      	b.n	8008afc <SPI_CloseTransfer+0x3c>
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 8008b76:	060a      	lsls	r2, r1, #24
 8008b78:	d5d4      	bpl.n	8008b24 <SPI_CloseTransfer+0x64>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8008b7a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8008b7e:	f042 0202 	orr.w	r2, r2, #2
 8008b82:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8008b86:	699a      	ldr	r2, [r3, #24]
 8008b88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008b8c:	619a      	str	r2, [r3, #24]
 8008b8e:	e7c9      	b.n	8008b24 <SPI_CloseTransfer+0x64>

08008b90 <HAL_SPI_Init>:
  if (hspi == NULL)
 8008b90:	2800      	cmp	r0, #0
 8008b92:	f000 811e 	beq.w	8008dd2 <HAL_SPI_Init+0x242>
{
 8008b96:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008b9a:	4a9b      	ldr	r2, [pc, #620]	; (8008e08 <HAL_SPI_Init+0x278>)
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008b9c:	6803      	ldr	r3, [r0, #0]
 8008b9e:	4604      	mov	r4, r0
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	f000 80a5 	beq.w	8008cf0 <HAL_SPI_Init+0x160>
 8008ba6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008baa:	4293      	cmp	r3, r2
 8008bac:	f000 80a0 	beq.w	8008cf0 <HAL_SPI_Init+0x160>
 8008bb0:	4a96      	ldr	r2, [pc, #600]	; (8008e0c <HAL_SPI_Init+0x27c>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	f000 809c 	beq.w	8008cf0 <HAL_SPI_Init+0x160>
 8008bb8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	f000 8097 	beq.w	8008cf0 <HAL_SPI_Init+0x160>
 8008bc2:	4a93      	ldr	r2, [pc, #588]	; (8008e10 <HAL_SPI_Init+0x280>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	f000 8093 	beq.w	8008cf0 <HAL_SPI_Init+0x160>
 8008bca:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	f000 808e 	beq.w	8008cf0 <HAL_SPI_Init+0x160>
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008bd4:	68c2      	ldr	r2, [r0, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008bd6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008bd8:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008bdc:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8008bde:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 8008be0:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008be4:	4d8b      	ldr	r5, [pc, #556]	; (8008e14 <HAL_SPI_Init+0x284>)
 8008be6:	42ab      	cmp	r3, r5
 8008be8:	d010      	beq.n	8008c0c <HAL_SPI_Init+0x7c>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bea:	4d8b      	ldr	r5, [pc, #556]	; (8008e18 <HAL_SPI_Init+0x288>)
 8008bec:	42ab      	cmp	r3, r5
 8008bee:	d00d      	beq.n	8008c0c <HAL_SPI_Init+0x7c>
 8008bf0:	4d8a      	ldr	r5, [pc, #552]	; (8008e1c <HAL_SPI_Init+0x28c>)
 8008bf2:	42ab      	cmp	r3, r5
 8008bf4:	d00a      	beq.n	8008c0c <HAL_SPI_Init+0x7c>
 8008bf6:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 8008bfa:	42ab      	cmp	r3, r5
 8008bfc:	d006      	beq.n	8008c0c <HAL_SPI_Init+0x7c>
 8008bfe:	4d88      	ldr	r5, [pc, #544]	; (8008e20 <HAL_SPI_Init+0x290>)
 8008c00:	42ab      	cmp	r3, r5
 8008c02:	d003      	beq.n	8008c0c <HAL_SPI_Init+0x7c>
 8008c04:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 8008c08:	42ab      	cmp	r3, r5
 8008c0a:	d101      	bne.n	8008c10 <HAL_SPI_Init+0x80>
 8008c0c:	2910      	cmp	r1, #16
 8008c0e:	d87c      	bhi.n	8008d0a <HAL_SPI_Init+0x17a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c10:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c12:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 8008c16:	f000 810d 	beq.w	8008e34 <HAL_SPI_Init+0x2a4>
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 8008c1a:	0417      	lsls	r7, r2, #16
  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c1c:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
 8008c20:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8008c24:	2900      	cmp	r1, #0
 8008c26:	f000 80e5 	beq.w	8008df4 <HAL_SPI_Init+0x264>
  hspi->State = HAL_SPI_STATE_BUSY;
 8008c2a:	2102      	movs	r1, #2
 8008c2c:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
  __HAL_SPI_DISABLE(hspi);
 8008c30:	6819      	ldr	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c32:	f8d4 8018 	ldr.w	r8, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8008c36:	f021 0101 	bic.w	r1, r1, #1
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c3a:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
 8008c3e:	6865      	ldr	r5, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c40:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8008c44:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c46:	f000 80c6 	beq.w	8008dd6 <HAL_SPI_Init+0x246>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008c4a:	f415 0e80 	ands.w	lr, r5, #4194304	; 0x400000
 8008c4e:	f000 80cc 	beq.w	8008dea <HAL_SPI_Init+0x25a>
 8008c52:	2a06      	cmp	r2, #6
 8008c54:	f240 80c9 	bls.w	8008dea <HAL_SPI_Init+0x25a>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	f421 7980 	bic.w	r9, r1, #256	; 0x100
 8008c5e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008c60:	ea49 0101 	orr.w	r1, r9, r1
 8008c64:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c66:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008c68:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c6c:	ea48 0801 	orr.w	r8, r8, r1
 8008c70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008c72:	ea48 0801 	orr.w	r8, r8, r1
 8008c76:	6921      	ldr	r1, [r4, #16]
 8008c78:	ea48 0801 	orr.w	r8, r8, r1
 8008c7c:	6961      	ldr	r1, [r4, #20]
 8008c7e:	ea48 0801 	orr.w	r8, r8, r1
 8008c82:	6a21      	ldr	r1, [r4, #32]
 8008c84:	ea48 0801 	orr.w	r8, r8, r1
 8008c88:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008c8a:	ea48 0801 	orr.w	r8, r8, r1
 8008c8e:	68a1      	ldr	r1, [r4, #8]
 8008c90:	ea48 0801 	orr.w	r8, r8, r1
 8008c94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008c96:	ea48 0801 	orr.w	r8, r8, r1
 8008c9a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008c9c:	ea48 0801 	orr.w	r8, r8, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ca0:	69e1      	ldr	r1, [r4, #28]
 8008ca2:	ea41 0100 	orr.w	r1, r1, r0
 8008ca6:	ea41 0107 	orr.w	r1, r1, r7
 8008caa:	ea42 0201 	orr.w	r2, r2, r1
 8008cae:	ea42 0206 	orr.w	r2, r2, r6
 8008cb2:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008cb4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008cb6:	ea48 0102 	orr.w	r1, r8, r2
 8008cba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8008cbc:	ea42 0201 	orr.w	r2, r2, r1
 8008cc0:	ea42 0c0c 	orr.w	ip, r2, ip
 8008cc4:	ea4c 0205 	orr.w	r2, ip, r5
 8008cc8:	60da      	str	r2, [r3, #12]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008cca:	d021      	beq.n	8008d10 <HAL_SPI_Init+0x180>
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008ccc:	2d00      	cmp	r5, #0
 8008cce:	d168      	bne.n	8008da2 <HAL_SPI_Init+0x212>
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG);
 8008cd0:	689a      	ldr	r2, [r3, #8]
 8008cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cd6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cda:	f022 0201 	bic.w	r2, r2, #1
 8008cde:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ce0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8008ce2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ce4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008ce8:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
}
 8008cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008cf0:	68e2      	ldr	r2, [r4, #12]
 8008cf2:	2a0f      	cmp	r2, #15
 8008cf4:	d809      	bhi.n	8008d0a <HAL_SPI_Init+0x17a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008cf6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8008cf8:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008cfc:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8008cfe:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8008d00:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d04:	2908      	cmp	r1, #8
 8008d06:	f240 808d 	bls.w	8008e24 <HAL_SPI_Init+0x294>
    return HAL_ERROR;
 8008d0a:	2001      	movs	r0, #1
}
 8008d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8008d10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008d12:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	bf0c      	ite	eq
 8008d18:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8008d1c:	f422 4200 	bicne.w	r2, r2, #32768	; 0x8000
 8008d20:	601a      	str	r2, [r3, #0]
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8008d22:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008d24:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	bf0c      	ite	eq
 8008d2a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8008d2e:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8008d32:	601a      	str	r2, [r3, #0]
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 8008d34:	4a34      	ldr	r2, [pc, #208]	; (8008e08 <HAL_SPI_Init+0x278>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d041      	beq.n	8008dbe <HAL_SPI_Init+0x22e>
 8008d3a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d03d      	beq.n	8008dbe <HAL_SPI_Init+0x22e>
 8008d42:	4a32      	ldr	r2, [pc, #200]	; (8008e0c <HAL_SPI_Init+0x27c>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d03a      	beq.n	8008dbe <HAL_SPI_Init+0x22e>
 8008d48:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d036      	beq.n	8008dbe <HAL_SPI_Init+0x22e>
 8008d50:	4a2f      	ldr	r2, [pc, #188]	; (8008e10 <HAL_SPI_Init+0x280>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d033      	beq.n	8008dbe <HAL_SPI_Init+0x22e>
 8008d56:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d02f      	beq.n	8008dbe <HAL_SPI_Init+0x22e>
 8008d5e:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <HAL_SPI_Init+0x284>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00e      	beq.n	8008d82 <HAL_SPI_Init+0x1f2>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8008d64:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d00a      	beq.n	8008d82 <HAL_SPI_Init+0x1f2>
 8008d6c:	4a2b      	ldr	r2, [pc, #172]	; (8008e1c <HAL_SPI_Init+0x28c>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d007      	beq.n	8008d82 <HAL_SPI_Init+0x1f2>
 8008d72:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d003      	beq.n	8008d82 <HAL_SPI_Init+0x1f2>
 8008d7a:	4a29      	ldr	r2, [pc, #164]	; (8008e20 <HAL_SPI_Init+0x290>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	f040 8086 	bne.w	8008e8e <HAL_SPI_Init+0x2fe>
 8008d82:	f5b7 1ff8 	cmp.w	r7, #2031616	; 0x1f0000
 8008d86:	d01d      	beq.n	8008dc4 <HAL_SPI_Init+0x234>
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8008d88:	2201      	movs	r2, #1
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8008d8a:	6819      	ldr	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8008d8c:	0c3f      	lsrs	r7, r7, #16
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8008d8e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8008d92:	6019      	str	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8008d94:	3701      	adds	r7, #1
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 8008d96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8008d98:	40ba      	lsls	r2, r7
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	641a      	str	r2, [r3, #64]	; 0x40
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	d096      	beq.n	8008cd0 <HAL_SPI_Init+0x140>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008da4:	f022 0201 	bic.w	r2, r2, #1
 8008da8:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008daa:	f1be 0f00 	cmp.w	lr, #0
 8008dae:	d097      	beq.n	8008ce0 <HAL_SPI_Init+0x150>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8008db4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008db8:	430a      	orrs	r2, r1
 8008dba:	60da      	str	r2, [r3, #12]
 8008dbc:	e790      	b.n	8008ce0 <HAL_SPI_Init+0x150>
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 8008dbe:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 8008dc2:	d1e1      	bne.n	8008d88 <HAL_SPI_Init+0x1f8>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008dca:	601a      	str	r2, [r3, #0]
      WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 8008dcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008dce:	641a      	str	r2, [r3, #64]	; 0x40
 8008dd0:	e77c      	b.n	8008ccc <HAL_SPI_Init+0x13c>
    return HAL_ERROR;
 8008dd2:	2001      	movs	r0, #1
}
 8008dd4:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008dd6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8008dda:	d04e      	beq.n	8008e7a <HAL_SPI_Init+0x2ea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ddc:	2d00      	cmp	r5, #0
 8008dde:	f47f af34 	bne.w	8008c4a <HAL_SPI_Init+0xba>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008de2:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8008de6:	d04d      	beq.n	8008e84 <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008de8:	46ae      	mov	lr, r5
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008dea:	6819      	ldr	r1, [r3, #0]
 8008dec:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008df0:	6019      	str	r1, [r3, #0]
 8008df2:	e738      	b.n	8008c66 <HAL_SPI_Init+0xd6>
    HAL_SPI_MspInit(hspi);
 8008df4:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8008df6:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    HAL_SPI_MspInit(hspi);
 8008dfa:	f7f8 f92d 	bl	8001058 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8008dfe:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008e00:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008e02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e04:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8008e06:	e710      	b.n	8008c2a <HAL_SPI_Init+0x9a>
 8008e08:	40014c00 	.word	0x40014c00
 8008e0c:	44002000 	.word	0x44002000
 8008e10:	40015000 	.word	0x40015000
 8008e14:	40013000 	.word	0x40013000
 8008e18:	50013000 	.word	0x50013000
 8008e1c:	40003800 	.word	0x40003800
 8008e20:	40003c00 	.word	0x40003c00
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e24:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008e26:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 8008e2a:	f47f aef6 	bne.w	8008c1a <HAL_SPI_Init+0x8a>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 8008e2e:	491b      	ldr	r1, [pc, #108]	; (8008e9c <HAL_SPI_Init+0x30c>)
 8008e30:	428b      	cmp	r3, r1
 8008e32:	d01a      	beq.n	8008e6a <HAL_SPI_Init+0x2da>
 8008e34:	491a      	ldr	r1, [pc, #104]	; (8008ea0 <HAL_SPI_Init+0x310>)
 8008e36:	428b      	cmp	r3, r1
 8008e38:	d017      	beq.n	8008e6a <HAL_SPI_Init+0x2da>
 8008e3a:	491a      	ldr	r1, [pc, #104]	; (8008ea4 <HAL_SPI_Init+0x314>)
 8008e3c:	428b      	cmp	r3, r1
 8008e3e:	d014      	beq.n	8008e6a <HAL_SPI_Init+0x2da>
 8008e40:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 8008e44:	428b      	cmp	r3, r1
 8008e46:	d010      	beq.n	8008e6a <HAL_SPI_Init+0x2da>
 8008e48:	4917      	ldr	r1, [pc, #92]	; (8008ea8 <HAL_SPI_Init+0x318>)
 8008e4a:	428b      	cmp	r3, r1
 8008e4c:	d00d      	beq.n	8008e6a <HAL_SPI_Init+0x2da>
 8008e4e:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 8008e52:	428b      	cmp	r3, r1
 8008e54:	d009      	beq.n	8008e6a <HAL_SPI_Init+0x2da>
 8008e56:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008e58:	b907      	cbnz	r7, 8008e5c <HAL_SPI_Init+0x2cc>
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 8008e5a:	0417      	lsls	r7, r2, #16
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 8008e5c:	ebb2 4f17 	cmp.w	r2, r7, lsr #16
 8008e60:	f63f af53 	bhi.w	8008d0a <HAL_SPI_Init+0x17a>
 8008e64:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8008e68:	e6d8      	b.n	8008c1c <HAL_SPI_Init+0x8c>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 8008e6a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8008e6c:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 8008e70:	f63f af4b 	bhi.w	8008d0a <HAL_SPI_Init+0x17a>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008e74:	2f00      	cmp	r7, #0
 8008e76:	d1f1      	bne.n	8008e5c <HAL_SPI_Init+0x2cc>
 8008e78:	e7ef      	b.n	8008e5a <HAL_SPI_Init+0x2ca>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008e7a:	f1bc 0f00 	cmp.w	ip, #0
 8008e7e:	d001      	beq.n	8008e84 <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8008e80:	46ae      	mov	lr, r5
 8008e82:	e6e6      	b.n	8008c52 <HAL_SPI_Init+0xc2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008e84:	6819      	ldr	r1, [r3, #0]
 8008e86:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8008e8a:	6019      	str	r1, [r3, #0]
 8008e8c:	e6dd      	b.n	8008c4a <HAL_SPI_Init+0xba>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8008e8e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8008e92:	4293      	cmp	r3, r2
 8008e94:	f43f af75 	beq.w	8008d82 <HAL_SPI_Init+0x1f2>
 8008e98:	e776      	b.n	8008d88 <HAL_SPI_Init+0x1f8>
 8008e9a:	bf00      	nop
 8008e9c:	40014c00 	.word	0x40014c00
 8008ea0:	50014c00 	.word	0x50014c00
 8008ea4:	44002000 	.word	0x44002000
 8008ea8:	40015000 	.word	0x40015000

08008eac <HAL_SPI_Transmit>:
{
 8008eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008eb0:	4604      	mov	r4, r0
 8008eb2:	4690      	mov	r8, r2
 8008eb4:	4689      	mov	r9, r1
 8008eb6:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008eb8:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 8008eba:	f7fa fcfd 	bl	80038b8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8008ebe:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 8008ec2:	2a01      	cmp	r2, #1
 8008ec4:	d172      	bne.n	8008fac <HAL_SPI_Transmit+0x100>
  if ((pData == NULL) || (Size == 0UL))
 8008ec6:	b2d3      	uxtb	r3, r2
 8008ec8:	f1b9 0f00 	cmp.w	r9, #0
 8008ecc:	d06f      	beq.n	8008fae <HAL_SPI_Transmit+0x102>
 8008ece:	f1b8 0f00 	cmp.w	r8, #0
 8008ed2:	d06c      	beq.n	8008fae <HAL_SPI_Transmit+0x102>
  __HAL_LOCK(hspi);
 8008ed4:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 8008ed8:	2a01      	cmp	r2, #1
 8008eda:	d067      	beq.n	8008fac <HAL_SPI_Transmit+0x100>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008edc:	2203      	movs	r2, #3
  __HAL_LOCK(hspi);
 8008ede:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ee2:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008ee4:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
  hspi->pRxBuffPtr  = NULL;
 8008ee8:	66e3      	str	r3, [r4, #108]	; 0x6c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008eea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008eee:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  hspi->TxXferCount = Size;
 8008ef2:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008ef6:	67e3      	str	r3, [r4, #124]	; 0x7c
  hspi->RxXferCount = (uint16_t) 0UL;
 8008ef8:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
  hspi->RxISR       = NULL;
 8008efc:	67a3      	str	r3, [r4, #120]	; 0x78
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	4606      	mov	r6, r0
 8008f02:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    SPI_1LINE_TX(hspi);
 8008f06:	6821      	ldr	r1, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8008f08:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->TxXferSize  = Size;
 8008f0c:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008f10:	f000 8121 	beq.w	8009156 <HAL_SPI_Transmit+0x2aa>
    SPI_2LINES_TX(hspi);
 8008f14:	68cb      	ldr	r3, [r1, #12]
 8008f16:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8008f1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f1e:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008f20:	684b      	ldr	r3, [r1, #4]
 8008f22:	0c1b      	lsrs	r3, r3, #16
 8008f24:	041b      	lsls	r3, r3, #16
 8008f26:	ea43 0308 	orr.w	r3, r3, r8
 8008f2a:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 8008f2c:	680b      	ldr	r3, [r1, #0]
 8008f2e:	f043 0301 	orr.w	r3, r3, #1
 8008f32:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008f34:	6863      	ldr	r3, [r4, #4]
 8008f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f3a:	d103      	bne.n	8008f44 <HAL_SPI_Transmit+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008f3c:	680b      	ldr	r3, [r1, #0]
 8008f3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f42:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8008f44:	68e3      	ldr	r3, [r4, #12]
 8008f46:	2b0f      	cmp	r3, #15
 8008f48:	f200 808f 	bhi.w	800906a <HAL_SPI_Transmit+0x1be>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f4c:	2b07      	cmp	r3, #7
 8008f4e:	d860      	bhi.n	8009012 <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 8008f50:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	b383      	cbz	r3, 8008fba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008f58:	694b      	ldr	r3, [r1, #20]
 8008f5a:	0798      	lsls	r0, r3, #30
 8008f5c:	d51b      	bpl.n	8008f96 <HAL_SPI_Transmit+0xea>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008f5e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	2b03      	cmp	r3, #3
 8008f66:	f240 80ba 	bls.w	80090de <HAL_SPI_Transmit+0x232>
 8008f6a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008f6c:	2b40      	cmp	r3, #64	; 0x40
 8008f6e:	f240 80b6 	bls.w	80090de <HAL_SPI_Transmit+0x232>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8008f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f78:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f7a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8008f7c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008f80:	3b04      	subs	r3, #4
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8008f88:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	b1a3      	cbz	r3, 8008fba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008f90:	694b      	ldr	r3, [r1, #20]
 8008f92:	0798      	lsls	r0, r3, #30
 8008f94:	d4e3      	bmi.n	8008f5e <HAL_SPI_Transmit+0xb2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f96:	f7fa fc8f 	bl	80038b8 <HAL_GetTick>
 8008f9a:	1b80      	subs	r0, r0, r6
 8008f9c:	42a8      	cmp	r0, r5
 8008f9e:	f0c0 80d6 	bcc.w	800914e <HAL_SPI_Transmit+0x2a2>
 8008fa2:	1c69      	adds	r1, r5, #1
 8008fa4:	f040 80bf 	bne.w	8009126 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fa8:	6821      	ldr	r1, [r4, #0]
 8008faa:	e7d1      	b.n	8008f50 <HAL_SPI_Transmit+0xa4>
    return HAL_BUSY;
 8008fac:	2302      	movs	r3, #2
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fb4:	1c6a      	adds	r2, r5, #1
 8008fb6:	d10a      	bne.n	8008fce <HAL_SPI_Transmit+0x122>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008fb8:	6821      	ldr	r1, [r4, #0]
 8008fba:	694b      	ldr	r3, [r1, #20]
 8008fbc:	071b      	lsls	r3, r3, #28
 8008fbe:	d40c      	bmi.n	8008fda <HAL_SPI_Transmit+0x12e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008fc0:	f7fa fc7a 	bl	80038b8 <HAL_GetTick>
 8008fc4:	1b80      	subs	r0, r0, r6
 8008fc6:	4285      	cmp	r5, r0
 8008fc8:	d9f4      	bls.n	8008fb4 <HAL_SPI_Transmit+0x108>
 8008fca:	2d00      	cmp	r5, #0
 8008fcc:	d1f4      	bne.n	8008fb8 <HAL_SPI_Transmit+0x10c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008fce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008fd2:	f043 0320 	orr.w	r3, r3, #32
 8008fd6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  SPI_CloseTransfer(hspi);
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f7ff fd70 	bl	8008ac0 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 8008fe0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 8008fe2:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8008fe4:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fe8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  __HAL_UNLOCK(hspi);
 8008fec:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
    return HAL_BUSY;
 8008ff0:	1a9b      	subs	r3, r3, r2
 8008ff2:	bf18      	it	ne
 8008ff4:	2301      	movne	r3, #1
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8008ffc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ffe:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009002:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009004:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 8009006:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800900a:	3b01      	subs	r3, #1
 800900c:	b29b      	uxth	r3, r3
 800900e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8009012:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009016:	b29b      	uxth	r3, r3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d0ce      	beq.n	8008fba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800901c:	694b      	ldr	r3, [r1, #20]
 800901e:	079a      	lsls	r2, r3, #30
 8009020:	d51a      	bpl.n	8009058 <HAL_SPI_Transmit+0x1ac>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009022:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009026:	b29b      	uxth	r3, r3
 8009028:	2b01      	cmp	r3, #1
 800902a:	d9e7      	bls.n	8008ffc <HAL_SPI_Transmit+0x150>
 800902c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0e4      	beq.n	8008ffc <HAL_SPI_Transmit+0x150>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009032:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009034:	f853 2b04 	ldr.w	r2, [r3], #4
 8009038:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800903a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800903c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009040:	3b02      	subs	r3, #2
 8009042:	b29b      	uxth	r3, r3
 8009044:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8009048:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0b3      	beq.n	8008fba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009052:	694b      	ldr	r3, [r1, #20]
 8009054:	079a      	lsls	r2, r3, #30
 8009056:	d4e4      	bmi.n	8009022 <HAL_SPI_Transmit+0x176>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009058:	f7fa fc2e 	bl	80038b8 <HAL_GetTick>
 800905c:	1b80      	subs	r0, r0, r6
 800905e:	42a8      	cmp	r0, r5
 8009060:	d372      	bcc.n	8009148 <HAL_SPI_Transmit+0x29c>
 8009062:	1c6b      	adds	r3, r5, #1
 8009064:	d15f      	bne.n	8009126 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009066:	6821      	ldr	r1, [r4, #0]
 8009068:	e7d3      	b.n	8009012 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800906a:	4b3d      	ldr	r3, [pc, #244]	; (8009160 <HAL_SPI_Transmit+0x2b4>)
 800906c:	4299      	cmp	r1, r3
 800906e:	d011      	beq.n	8009094 <HAL_SPI_Transmit+0x1e8>
 8009070:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8009074:	4299      	cmp	r1, r3
 8009076:	d00d      	beq.n	8009094 <HAL_SPI_Transmit+0x1e8>
 8009078:	4b3a      	ldr	r3, [pc, #232]	; (8009164 <HAL_SPI_Transmit+0x2b8>)
 800907a:	4299      	cmp	r1, r3
 800907c:	d00a      	beq.n	8009094 <HAL_SPI_Transmit+0x1e8>
 800907e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8009082:	4299      	cmp	r1, r3
 8009084:	d006      	beq.n	8009094 <HAL_SPI_Transmit+0x1e8>
 8009086:	4b38      	ldr	r3, [pc, #224]	; (8009168 <HAL_SPI_Transmit+0x2bc>)
 8009088:	4299      	cmp	r1, r3
 800908a:	d003      	beq.n	8009094 <HAL_SPI_Transmit+0x1e8>
 800908c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8009090:	4299      	cmp	r1, r3
 8009092:	d1be      	bne.n	8009012 <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 8009094:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009098:	b29b      	uxth	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d08d      	beq.n	8008fba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800909e:	694b      	ldr	r3, [r1, #20]
 80090a0:	0798      	lsls	r0, r3, #30
 80090a2:	d513      	bpl.n	80090cc <HAL_SPI_Transmit+0x220>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80090a4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090a6:	f852 3b04 	ldr.w	r3, [r2], #4
 80090aa:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 80090ac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80090b0:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->TxXferCount--;
 80090b2:	3b01      	subs	r3, #1
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 80090ba:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80090be:	b29b      	uxth	r3, r3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f43f af7a 	beq.w	8008fba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80090c6:	694b      	ldr	r3, [r1, #20]
 80090c8:	0798      	lsls	r0, r3, #30
 80090ca:	d4eb      	bmi.n	80090a4 <HAL_SPI_Transmit+0x1f8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090cc:	f7fa fbf4 	bl	80038b8 <HAL_GetTick>
 80090d0:	1b80      	subs	r0, r0, r6
 80090d2:	42a8      	cmp	r0, r5
 80090d4:	d325      	bcc.n	8009122 <HAL_SPI_Transmit+0x276>
 80090d6:	1c69      	adds	r1, r5, #1
 80090d8:	d125      	bne.n	8009126 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090da:	6821      	ldr	r1, [r4, #0]
 80090dc:	e7da      	b.n	8009094 <HAL_SPI_Transmit+0x1e8>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80090de:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d90d      	bls.n	8009104 <HAL_SPI_Transmit+0x258>
 80090e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80090ea:	b15b      	cbz	r3, 8009104 <HAL_SPI_Transmit+0x258>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80090ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ee:	f833 2b02 	ldrh.w	r2, [r3], #2
 80090f2:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090f4:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80090f6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80090fa:	3b02      	subs	r3, #2
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8009102:	e725      	b.n	8008f50 <HAL_SPI_Transmit+0xa4>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009106:	781b      	ldrb	r3, [r3, #0]
 8009108:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800910c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800910e:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009110:	3301      	adds	r3, #1
 8009112:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 8009114:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009118:	3b01      	subs	r3, #1
 800911a:	b29b      	uxth	r3, r3
 800911c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8009120:	e716      	b.n	8008f50 <HAL_SPI_Transmit+0xa4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009122:	2d00      	cmp	r5, #0
 8009124:	d1d9      	bne.n	80090da <HAL_SPI_Transmit+0x22e>
          SPI_CloseTransfer(hspi);
 8009126:	4620      	mov	r0, r4
 8009128:	f7ff fcca 	bl	8008ac0 <SPI_CloseTransfer>
          hspi->State = HAL_SPI_STATE_READY;
 800912c:	2401      	movs	r4, #1
          __HAL_UNLOCK(hspi);
 800912e:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009130:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009136:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800913a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
          __HAL_UNLOCK(hspi);
 800913e:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
          hspi->State = HAL_SPI_STATE_READY;
 8009142:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
          return HAL_TIMEOUT;
 8009146:	e732      	b.n	8008fae <HAL_SPI_Transmit+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009148:	2d00      	cmp	r5, #0
 800914a:	d18c      	bne.n	8009066 <HAL_SPI_Transmit+0x1ba>
 800914c:	e7eb      	b.n	8009126 <HAL_SPI_Transmit+0x27a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800914e:	2d00      	cmp	r5, #0
 8009150:	f47f af2a 	bne.w	8008fa8 <HAL_SPI_Transmit+0xfc>
 8009154:	e7e7      	b.n	8009126 <HAL_SPI_Transmit+0x27a>
    SPI_1LINE_TX(hspi);
 8009156:	680b      	ldr	r3, [r1, #0]
 8009158:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800915c:	600b      	str	r3, [r1, #0]
 800915e:	e6df      	b.n	8008f20 <HAL_SPI_Transmit+0x74>
 8009160:	40013000 	.word	0x40013000
 8009164:	40003800 	.word	0x40003800
 8009168:	40003c00 	.word	0x40003c00

0800916c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800916c:	b410      	push	{r4}
 800916e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009170:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009174:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009178:	e842 3100 	strex	r1, r3, [r2]
 800917c:	2900      	cmp	r1, #0
 800917e:	d1f7      	bne.n	8009170 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009180:	4c14      	ldr	r4, [pc, #80]	; (80091d4 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009182:	f102 0308 	add.w	r3, r2, #8
 8009186:	e853 3f00 	ldrex	r3, [r3]
 800918a:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800918c:	f102 0c08 	add.w	ip, r2, #8
 8009190:	e84c 3100 	strex	r1, r3, [ip]
 8009194:	2900      	cmp	r1, #0
 8009196:	d1f4      	bne.n	8009182 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009198:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800919a:	2b01      	cmp	r3, #1
 800919c:	d008      	beq.n	80091b0 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80091a0:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 80091a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 80091a6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxISR = NULL;
 80091aa:	6743      	str	r3, [r0, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091ac:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 80091ae:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091b4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b8:	e842 3100 	strex	r1, r3, [r2]
 80091bc:	2900      	cmp	r1, #0
 80091be:	d0ee      	beq.n	800919e <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c0:	e852 3f00 	ldrex	r3, [r2]
 80091c4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	e842 3100 	strex	r1, r3, [r2]
 80091cc:	2900      	cmp	r1, #0
 80091ce:	d1ef      	bne.n	80091b0 <UART_EndRxTransfer+0x44>
 80091d0:	e7e5      	b.n	800919e <UART_EndRxTransfer+0x32>
 80091d2:	bf00      	nop
 80091d4:	effffffe 	.word	0xeffffffe

080091d8 <HAL_UART_Transmit_DMA>:
{
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80091da:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80091de:	2b20      	cmp	r3, #32
 80091e0:	d13d      	bne.n	800925e <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 80091e2:	2900      	cmp	r1, #0
 80091e4:	d039      	beq.n	800925a <HAL_UART_Transmit_DMA+0x82>
 80091e6:	2a00      	cmp	r2, #0
 80091e8:	d037      	beq.n	800925a <HAL_UART_Transmit_DMA+0x82>
    huart->pTxBuffPtr  = pData;
 80091ea:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ec:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091ee:	2721      	movs	r7, #33	; 0x21
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80091f0:	2640      	movs	r6, #64	; 0x40
 80091f2:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 80091f4:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 80091f8:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 80091fa:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (huart->hdmatx != NULL)
 80091fe:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009200:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009204:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009208:	622e      	str	r6, [r5, #32]
    if (huart->hdmatx != NULL)
 800920a:	b1c8      	cbz	r0, 8009240 <HAL_UART_Transmit_DMA+0x68>
      huart->hdmatx->XferAbortCallback = NULL;
 800920c:	66c3      	str	r3, [r0, #108]	; 0x6c
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800920e:	4b1f      	ldr	r3, [pc, #124]	; (800928c <HAL_UART_Transmit_DMA+0xb4>)
 8009210:	6603      	str	r3, [r0, #96]	; 0x60
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8009212:	4b1f      	ldr	r3, [pc, #124]	; (8009290 <HAL_UART_Transmit_DMA+0xb8>)
 8009214:	6643      	str	r3, [r0, #100]	; 0x64
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009216:	4b1f      	ldr	r3, [pc, #124]	; (8009294 <HAL_UART_Transmit_DMA+0xbc>)
 8009218:	6683      	str	r3, [r0, #104]	; 0x68
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800921a:	68a3      	ldr	r3, [r4, #8]
 800921c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009220:	d01f      	beq.n	8009262 <HAL_UART_Transmit_DMA+0x8a>
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8009222:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8009224:	061b      	lsls	r3, r3, #24
 8009226:	d522      	bpl.n	800926e <HAL_UART_Transmit_DMA+0x96>
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 8009228:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800922a:	b33b      	cbz	r3, 800927c <HAL_UART_Transmit_DMA+0xa4>
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	b32b      	cbz	r3, 800927c <HAL_UART_Transmit_DMA+0xa4>
            (uint32_t)&huart->Instance->TDR;
 8009230:	3528      	adds	r5, #40	; 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 8009232:	e9c3 1503 	strd	r1, r5, [r3, #12]
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 8009236:	609a      	str	r2, [r3, #8]
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 8009238:	f7fa ffac 	bl	8004194 <HAL_DMAEx_List_Start_IT>
      if (status != HAL_OK)
 800923c:	b9f0      	cbnz	r0, 800927c <HAL_UART_Transmit_DMA+0xa4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800923e:	6825      	ldr	r5, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	f105 0308 	add.w	r3, r5, #8
 8009244:	e853 3f00 	ldrex	r3, [r3]
 8009248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800924c:	f105 0208 	add.w	r2, r5, #8
 8009250:	e842 3000 	strex	r0, r3, [r2]
 8009254:	2800      	cmp	r0, #0
 8009256:	d1f3      	bne.n	8009240 <HAL_UART_Transmit_DMA+0x68>
}
 8009258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800925a:	2001      	movs	r0, #1
}
 800925c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800925e:	2002      	movs	r0, #2
}
 8009260:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009262:	6923      	ldr	r3, [r4, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1dc      	bne.n	8009222 <HAL_UART_Transmit_DMA+0x4a>
        nbByte = Size * 2U;
 8009268:	0052      	lsls	r2, r2, #1
 800926a:	b292      	uxth	r2, r2
 800926c:	e7d9      	b.n	8009222 <HAL_UART_Transmit_DMA+0x4a>
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800926e:	4613      	mov	r3, r2
 8009270:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8009274:	f7fa fdfa 	bl	8003e6c <HAL_DMA_Start_IT>
      if (status != HAL_OK)
 8009278:	2800      	cmp	r0, #0
 800927a:	d0e0      	beq.n	800923e <HAL_UART_Transmit_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800927c:	2210      	movs	r2, #16
        huart->gState = HAL_UART_STATE_READY;
 800927e:	2320      	movs	r3, #32
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009280:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        return HAL_ERROR;
 8009284:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 8009286:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800928a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800928c:	08009299 	.word	0x08009299
 8009290:	080092c9 	.word	0x080092c9
 8009294:	080092d5 	.word	0x080092d5

08009298 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009298:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800929a:	6d03      	ldr	r3, [r0, #80]	; 0x50
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800929c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800929e:	2b81      	cmp	r3, #129	; 0x81
 80092a0:	d00c      	beq.n	80092bc <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	6802      	ldr	r2, [r0, #0]
 80092a6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092aa:	e852 3f00 	ldrex	r3, [r2]
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092b2:	e842 3100 	strex	r1, r3, [r2]
 80092b6:	2900      	cmp	r1, #0
 80092b8:	d1f7      	bne.n	80092aa <UART_DMATransmitCplt+0x12>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092ba:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80092bc:	f7f8 f9e2 	bl	8001684 <HAL_UART_TxCpltCallback>
}
 80092c0:	bd08      	pop	{r3, pc}
 80092c2:	bf00      	nop

080092c4 <HAL_UART_TxHalfCpltCallback>:
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop

080092c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092c8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80092ca:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80092cc:	f7ff fffa 	bl	80092c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80092d0:	bd08      	pop	{r3, pc}
 80092d2:	bf00      	nop

080092d4 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092d4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
{
 80092d6:	b510      	push	{r4, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092d8:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80092da:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80092de:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	0612      	lsls	r2, r2, #24
 80092e6:	d501      	bpl.n	80092ec <UART_DMAError+0x18>
 80092e8:	2921      	cmp	r1, #33	; 0x21
 80092ea:	d013      	beq.n	8009314 <UART_DMAError+0x40>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	065b      	lsls	r3, r3, #25
 80092f0:	d501      	bpl.n	80092f6 <UART_DMAError+0x22>
 80092f2:	2c22      	cmp	r4, #34	; 0x22
 80092f4:	d008      	beq.n	8009308 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80092f6:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 80092fa:	f043 0310 	orr.w	r3, r3, #16
 80092fe:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009302:	f7f8 f9c3 	bl	800168c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009306:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 8009308:	2300      	movs	r3, #0
 800930a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800930e:	f7ff ff2d 	bl	800916c <UART_EndRxTransfer>
 8009312:	e7f0      	b.n	80092f6 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 8009314:	2200      	movs	r2, #0
 8009316:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800931a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800931e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	e843 2100 	strex	r1, r2, [r3]
 8009326:	2900      	cmp	r1, #0
 8009328:	d1f7      	bne.n	800931a <UART_DMAError+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800932a:	f103 0208 	add.w	r2, r3, #8
 800932e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009332:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	f103 0c08 	add.w	ip, r3, #8
 800933a:	e84c 2100 	strex	r1, r2, [ip]
 800933e:	2900      	cmp	r1, #0
 8009340:	d1f3      	bne.n	800932a <UART_DMAError+0x56>
  huart->gState = HAL_UART_STATE_READY;
 8009342:	2220      	movs	r2, #32
 8009344:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 8009348:	e7d0      	b.n	80092ec <UART_DMAError+0x18>
 800934a:	bf00      	nop

0800934c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800934c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800934e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009350:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  huart->RxXferCount = 0U;
 8009352:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009356:	f7f8 f999 	bl	800168c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800935a:	bd08      	pop	{r3, pc}

0800935c <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800935c:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009360:	6803      	ldr	r3, [r0, #0]
{
 8009362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009366:	69da      	ldr	r2, [r3, #28]
{
 8009368:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800936a:	ea12 0f0c 	tst.w	r2, ip
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800936e:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009370:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 8009372:	f000 80d8 	beq.w	8009526 <HAL_UART_IRQHandler+0x1ca>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009376:	4eae      	ldr	r6, [pc, #696]	; (8009630 <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009378:	48ae      	ldr	r0, [pc, #696]	; (8009634 <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800937a:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800937e:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009380:	ea5c 0600 	orrs.w	r6, ip, r0
 8009384:	d16b      	bne.n	800945e <HAL_UART_IRQHandler+0x102>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009386:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009388:	2801      	cmp	r0, #1
 800938a:	d01e      	beq.n	80093ca <HAL_UART_IRQHandler+0x6e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800938c:	02d7      	lsls	r7, r2, #11
 800938e:	d502      	bpl.n	8009396 <HAL_UART_IRQHandler+0x3a>
 8009390:	024e      	lsls	r6, r1, #9
 8009392:	f100 80fe 	bmi.w	8009592 <HAL_UART_IRQHandler+0x236>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009396:	0610      	lsls	r0, r2, #24
 8009398:	d506      	bpl.n	80093a8 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800939a:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800939e:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093a2:	4301      	orrs	r1, r0
 80093a4:	f040 80ed 	bne.w	8009582 <HAL_UART_IRQHandler+0x226>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093a8:	0657      	lsls	r7, r2, #25
 80093aa:	d502      	bpl.n	80093b2 <HAL_UART_IRQHandler+0x56>
 80093ac:	066e      	lsls	r6, r5, #25
 80093ae:	f100 80cb 	bmi.w	8009548 <HAL_UART_IRQHandler+0x1ec>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093b2:	0210      	lsls	r0, r2, #8
 80093b4:	d502      	bpl.n	80093bc <HAL_UART_IRQHandler+0x60>
 80093b6:	0069      	lsls	r1, r5, #1
 80093b8:	f100 80f7 	bmi.w	80095aa <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80093bc:	01d3      	lsls	r3, r2, #7
 80093be:	d502      	bpl.n	80093c6 <HAL_UART_IRQHandler+0x6a>
 80093c0:	2d00      	cmp	r5, #0
 80093c2:	f2c0 813d 	blt.w	8009640 <HAL_UART_IRQHandler+0x2e4>
}
 80093c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093ca:	06d6      	lsls	r6, r2, #27
 80093cc:	d5de      	bpl.n	800938c <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093ce:	06e8      	lsls	r0, r5, #27
 80093d0:	d5dc      	bpl.n	800938c <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093d2:	2210      	movs	r2, #16
 80093d4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093d6:	689a      	ldr	r2, [r3, #8]
 80093d8:	0652      	lsls	r2, r2, #25
 80093da:	f140 80f2 	bpl.w	80095c2 <HAL_UART_IRQHandler+0x266>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093de:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80093e2:	6802      	ldr	r2, [r0, #0]
 80093e4:	6c91      	ldr	r1, [r2, #72]	; 0x48
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093e6:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093ea:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 80093ec:	2900      	cmp	r1, #0
 80093ee:	f000 8131 	beq.w	8009654 <HAL_UART_IRQHandler+0x2f8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093f2:	428a      	cmp	r2, r1
 80093f4:	f240 812e 	bls.w	8009654 <HAL_UART_IRQHandler+0x2f8>
        huart->RxXferCount = nb_remaining_rx_data;
 80093f8:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 80093fc:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80093fe:	2981      	cmp	r1, #129	; 0x81
 8009400:	d023      	beq.n	800944a <HAL_UART_IRQHandler+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009402:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009406:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940a:	e843 2100 	strex	r1, r2, [r3]
 800940e:	2900      	cmp	r1, #0
 8009410:	d1f7      	bne.n	8009402 <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009412:	f103 0208 	add.w	r2, r3, #8
 8009416:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	f103 0508 	add.w	r5, r3, #8
 8009422:	e845 2100 	strex	r1, r2, [r5]
 8009426:	2900      	cmp	r1, #0
 8009428:	d1f3      	bne.n	8009412 <HAL_UART_IRQHandler+0xb6>
          huart->RxState = HAL_UART_STATE_READY;
 800942a:	2220      	movs	r2, #32
 800942c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009430:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009436:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943a:	e843 2100 	strex	r1, r2, [r3]
 800943e:	2900      	cmp	r1, #0
 8009440:	d1f7      	bne.n	8009432 <HAL_UART_IRQHandler+0xd6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009442:	f7fa fd5b 	bl	8003efc <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009446:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800944a:	2302      	movs	r3, #2
 800944c:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800944e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8009452:	4620      	mov	r0, r4
 8009454:	1ad2      	subs	r2, r2, r3
 8009456:	b291      	uxth	r1, r2
 8009458:	f7f8 f916 	bl	8001688 <HAL_UARTEx_RxEventCallback>
 800945c:	e7b3      	b.n	80093c6 <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800945e:	07d6      	lsls	r6, r2, #31
 8009460:	461f      	mov	r7, r3
 8009462:	d509      	bpl.n	8009478 <HAL_UART_IRQHandler+0x11c>
 8009464:	05ee      	lsls	r6, r5, #23
 8009466:	d507      	bpl.n	8009478 <HAL_UART_IRQHandler+0x11c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009468:	2601      	movs	r6, #1
 800946a:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800946c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8009470:	f046 0601 	orr.w	r6, r6, #1
 8009474:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009478:	0796      	lsls	r6, r2, #30
 800947a:	d575      	bpl.n	8009568 <HAL_UART_IRQHandler+0x20c>
 800947c:	07ce      	lsls	r6, r1, #31
 800947e:	d509      	bpl.n	8009494 <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009480:	2602      	movs	r6, #2
 8009482:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009484:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8009488:	f046 0604 	orr.w	r6, r6, #4
 800948c:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009490:	0756      	lsls	r6, r2, #29
 8009492:	d46d      	bmi.n	8009570 <HAL_UART_IRQHandler+0x214>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009494:	0716      	lsls	r6, r2, #28
 8009496:	d50b      	bpl.n	80094b0 <HAL_UART_IRQHandler+0x154>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009498:	f005 0620 	and.w	r6, r5, #32
 800949c:	4330      	orrs	r0, r6
 800949e:	d007      	beq.n	80094b0 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094a0:	2008      	movs	r0, #8
 80094a2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80094a4:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80094a8:	f040 0008 	orr.w	r0, r0, #8
 80094ac:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80094b0:	0516      	lsls	r6, r2, #20
 80094b2:	d50a      	bpl.n	80094ca <HAL_UART_IRQHandler+0x16e>
 80094b4:	0168      	lsls	r0, r5, #5
 80094b6:	d508      	bpl.n	80094ca <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80094b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80094bc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80094be:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80094c2:	f043 0320 	orr.w	r3, r3, #32
 80094c6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094ca:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	f43f af79 	beq.w	80093c6 <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094d4:	0693      	lsls	r3, r2, #26
 80094d6:	d506      	bpl.n	80094e6 <HAL_UART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094d8:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094dc:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 80094e0:	ea55 0301 	orrs.w	r3, r5, r1
 80094e4:	d166      	bne.n	80095b4 <HAL_UART_IRQHandler+0x258>
      errorcode = huart->ErrorCode;
 80094e6:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094ea:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094ec:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f4:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80094f6:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094f8:	f000 80a7 	beq.w	800964a <HAL_UART_IRQHandler+0x2ee>
        UART_EndRxTransfer(huart);
 80094fc:	f7ff fe36 	bl	800916c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	065f      	lsls	r7, r3, #25
 8009506:	d54c      	bpl.n	80095a2 <HAL_UART_IRQHandler+0x246>
          if (huart->hdmarx != NULL)
 8009508:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800950c:	2800      	cmp	r0, #0
 800950e:	d048      	beq.n	80095a2 <HAL_UART_IRQHandler+0x246>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009510:	4b49      	ldr	r3, [pc, #292]	; (8009638 <HAL_UART_IRQHandler+0x2dc>)
 8009512:	66c3      	str	r3, [r0, #108]	; 0x6c
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009514:	f7fa fd44 	bl	8003fa0 <HAL_DMA_Abort_IT>
 8009518:	2800      	cmp	r0, #0
 800951a:	f43f af54 	beq.w	80093c6 <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800951e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8009522:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8009524:	e00d      	b.n	8009542 <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009526:	0697      	lsls	r7, r2, #26
 8009528:	f57f af2d 	bpl.w	8009386 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800952c:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009530:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 8009534:	433e      	orrs	r6, r7
 8009536:	f43f af26 	beq.w	8009386 <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800953a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800953c:	2b00      	cmp	r3, #0
 800953e:	f43f af42 	beq.w	80093c6 <HAL_UART_IRQHandler+0x6a>
}
 8009542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009546:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800954c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009550:	e843 2100 	strex	r1, r2, [r3]
 8009554:	2900      	cmp	r1, #0
 8009556:	d1f7      	bne.n	8009548 <HAL_UART_IRQHandler+0x1ec>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009558:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800955a:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800955c:	67a1      	str	r1, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800955e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_TxCpltCallback(huart);
 8009562:	f7f8 f88f 	bl	8001684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009566:	e72e      	b.n	80093c6 <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009568:	0756      	lsls	r6, r2, #29
 800956a:	d593      	bpl.n	8009494 <HAL_UART_IRQHandler+0x138>
 800956c:	07ce      	lsls	r6, r1, #31
 800956e:	d591      	bpl.n	8009494 <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009570:	2604      	movs	r6, #4
 8009572:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009574:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 8009578:	f046 0602 	orr.w	r6, r6, #2
 800957c:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 8009580:	e788      	b.n	8009494 <HAL_UART_IRQHandler+0x138>
    if (huart->TxISR != NULL)
 8009582:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009584:	2b00      	cmp	r3, #0
 8009586:	f43f af1e 	beq.w	80093c6 <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 800958a:	4620      	mov	r0, r4
}
 800958c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8009590:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009592:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8009596:	4620      	mov	r0, r4
}
 8009598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800959c:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800959e:	f000 badf 	b.w	8009b60 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 80095a2:	4620      	mov	r0, r4
 80095a4:	f7f8 f872 	bl	800168c <HAL_UART_ErrorCallback>
 80095a8:	e70d      	b.n	80093c6 <HAL_UART_IRQHandler+0x6a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095aa:	4620      	mov	r0, r4
}
 80095ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80095b0:	f000 bada 	b.w	8009b68 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 80095b4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d095      	beq.n	80094e6 <HAL_UART_IRQHandler+0x18a>
          huart->RxISR(huart);
 80095ba:	4620      	mov	r0, r4
 80095bc:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80095be:	6827      	ldr	r7, [r4, #0]
 80095c0:	e791      	b.n	80094e6 <HAL_UART_IRQHandler+0x18a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095c2:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 80095c6:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095ca:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80095cc:	b292      	uxth	r2, r2
 80095ce:	2a00      	cmp	r2, #0
 80095d0:	f43f aef9 	beq.w	80093c6 <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095d4:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 80095d8:	1a51      	subs	r1, r2, r1
 80095da:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80095dc:	2900      	cmp	r1, #0
 80095de:	f43f aef2 	beq.w	80093c6 <HAL_UART_IRQHandler+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095e2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ea:	e843 2000 	strex	r0, r2, [r3]
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d1f7      	bne.n	80095e2 <HAL_UART_IRQHandler+0x286>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095f2:	4d12      	ldr	r5, [pc, #72]	; (800963c <HAL_UART_IRQHandler+0x2e0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f4:	f103 0208 	add.w	r2, r3, #8
 80095f8:	e852 2f00 	ldrex	r2, [r2]
 80095fc:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	f103 0608 	add.w	r6, r3, #8
 8009602:	e846 2000 	strex	r0, r2, [r6]
 8009606:	2800      	cmp	r0, #0
 8009608:	d1f4      	bne.n	80095f4 <HAL_UART_IRQHandler+0x298>
        huart->RxState = HAL_UART_STATE_READY;
 800960a:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800960c:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800960e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009612:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009618:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800961c:	e843 2000 	strex	r0, r2, [r3]
 8009620:	2800      	cmp	r0, #0
 8009622:	d1f7      	bne.n	8009614 <HAL_UART_IRQHandler+0x2b8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009624:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009626:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009628:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800962a:	f7f8 f82d 	bl	8001688 <HAL_UARTEx_RxEventCallback>
 800962e:	e6ca      	b.n	80093c6 <HAL_UART_IRQHandler+0x6a>
 8009630:	04000120 	.word	0x04000120
 8009634:	10000001 	.word	0x10000001
 8009638:	0800934d 	.word	0x0800934d
 800963c:	effffffe 	.word	0xeffffffe
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009640:	4620      	mov	r0, r4
}
 8009642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009646:	f000 ba8d 	b.w	8009b64 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800964a:	f7f8 f81f 	bl	800168c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800964e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 8009652:	e6b8      	b.n	80093c6 <HAL_UART_IRQHandler+0x6a>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009654:	4291      	cmp	r1, r2
 8009656:	f47f aeb6 	bne.w	80093c6 <HAL_UART_IRQHandler+0x6a>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800965a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800965c:	2b81      	cmp	r3, #129	; 0x81
 800965e:	f47f aeb2 	bne.w	80093c6 <HAL_UART_IRQHandler+0x6a>
 8009662:	e7df      	b.n	8009624 <HAL_UART_IRQHandler+0x2c8>

08009664 <UART_SetConfig>:
{
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8009668:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800966a:	69c5      	ldr	r5, [r0, #28]
 800966c:	6882      	ldr	r2, [r0, #8]
 800966e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009670:	4987      	ldr	r1, [pc, #540]	; (8009890 <UART_SetConfig+0x22c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009672:	4302      	orrs	r2, r0
 8009674:	6960      	ldr	r0, [r4, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009676:	4e87      	ldr	r6, [pc, #540]	; (8009894 <UART_SetConfig+0x230>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009678:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800967a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800967c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800967e:	4001      	ands	r1, r0
 8009680:	430a      	orrs	r2, r1
 8009682:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	68e1      	ldr	r1, [r4, #12]
 8009688:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800968c:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800968e:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009690:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009692:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009694:	f000 80bb 	beq.w	800980e <UART_SetConfig+0x1aa>
 8009698:	497f      	ldr	r1, [pc, #508]	; (8009898 <UART_SetConfig+0x234>)
 800969a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800969c:	6899      	ldr	r1, [r3, #8]
 800969e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80096a2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096a6:	d02a      	beq.n	80096fe <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 80096a8:	6a20      	ldr	r0, [r4, #32]
 80096aa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096ac:	430a      	orrs	r2, r1
 80096ae:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096b4:	f022 020f 	bic.w	r2, r2, #15
 80096b8:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096ba:	4978      	ldr	r1, [pc, #480]	; (800989c <UART_SetConfig+0x238>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096bc:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096be:	428b      	cmp	r3, r1
 80096c0:	d17a      	bne.n	80097b8 <UART_SetConfig+0x154>
 80096c2:	2001      	movs	r0, #1
 80096c4:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096c6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 80096ca:	d05d      	beq.n	8009788 <UART_SetConfig+0x124>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80096cc:	f7fd fe3e 	bl	800734c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 80096d0:	2800      	cmp	r0, #0
 80096d2:	d051      	beq.n	8009778 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096d6:	4b72      	ldr	r3, [pc, #456]	; (80098a0 <UART_SetConfig+0x23c>)
 80096d8:	6862      	ldr	r2, [r4, #4]
 80096da:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096de:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80096e6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80096ea:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096ee:	f1a3 0210 	sub.w	r2, r3, #16
 80096f2:	428a      	cmp	r2, r1
 80096f4:	d85e      	bhi.n	80097b4 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096f6:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 80096f8:	2000      	movs	r0, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 80096fa:	60d3      	str	r3, [r2, #12]
 80096fc:	e03d      	b.n	800977a <UART_SetConfig+0x116>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096fe:	430a      	orrs	r2, r1
 8009700:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009704:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009706:	f022 020f 	bic.w	r2, r2, #15
 800970a:	430a      	orrs	r2, r1
 800970c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (UART_INSTANCE_LOWPOWER(huart))
 800970e:	4a62      	ldr	r2, [pc, #392]	; (8009898 <UART_SetConfig+0x234>)
 8009710:	2000      	movs	r0, #0
 8009712:	4293      	cmp	r3, r2
 8009714:	f04f 0100 	mov.w	r1, #0
 8009718:	d1d5      	bne.n	80096c6 <UART_SetConfig+0x62>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800971a:	f7fd fe17 	bl	800734c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800971e:	b358      	cbz	r0, 8009778 <UART_SetConfig+0x114>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009720:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009722:	4a5f      	ldr	r2, [pc, #380]	; (80098a0 <UART_SetConfig+0x23c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009724:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009726:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800972a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800972e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009732:	4299      	cmp	r1, r3
 8009734:	d83e      	bhi.n	80097b4 <UART_SetConfig+0x150>
 8009736:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800973a:	d83b      	bhi.n	80097b4 <UART_SetConfig+0x150>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800973c:	2300      	movs	r3, #0
 800973e:	4619      	mov	r1, r3
 8009740:	f7f7 fa74 	bl	8000c2c <__aeabi_uldivmod>
 8009744:	4606      	mov	r6, r0
 8009746:	462a      	mov	r2, r5
 8009748:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800974c:	0209      	lsls	r1, r1, #8
 800974e:	0235      	lsls	r5, r6, #8
 8009750:	eb15 000c 	adds.w	r0, r5, ip
 8009754:	ea41 6116 	orr.w	r1, r1, r6, lsr #24
 8009758:	f04f 0300 	mov.w	r3, #0
 800975c:	f141 0100 	adc.w	r1, r1, #0
 8009760:	f7f7 fa64 	bl	8000c2c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009764:	4a4f      	ldr	r2, [pc, #316]	; (80098a4 <UART_SetConfig+0x240>)
 8009766:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800976a:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800976c:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800976e:	d821      	bhi.n	80097b4 <UART_SetConfig+0x150>
          huart->Instance->BRR = usartdiv;
 8009770:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009772:	2000      	movs	r0, #0
          huart->Instance->BRR = usartdiv;
 8009774:	60d3      	str	r3, [r2, #12]
 8009776:	e000      	b.n	800977a <UART_SetConfig+0x116>
  HAL_StatusTypeDef ret               = HAL_OK;
 8009778:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800977a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800977c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8009780:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 8009782:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8009784:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8009786:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009788:	f7fd fde0 	bl	800734c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800978c:	2800      	cmp	r0, #0
 800978e:	d0f3      	beq.n	8009778 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009790:	4b43      	ldr	r3, [pc, #268]	; (80098a0 <UART_SetConfig+0x23c>)
 8009792:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009794:	6862      	ldr	r2, [r4, #4]
 8009796:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800979a:	0853      	lsrs	r3, r2, #1
 800979c:	fbb0 f0f1 	udiv	r0, r0, r1
 80097a0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80097a4:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097a8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80097ac:	f1a0 0310 	sub.w	r3, r0, #16
 80097b0:	428b      	cmp	r3, r1
 80097b2:	d94c      	bls.n	800984e <UART_SetConfig+0x1ea>
        ret = HAL_ERROR;
 80097b4:	2001      	movs	r0, #1
 80097b6:	e7e0      	b.n	800977a <UART_SetConfig+0x116>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80097b8:	4a3b      	ldr	r2, [pc, #236]	; (80098a8 <UART_SetConfig+0x244>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d038      	beq.n	8009830 <UART_SetConfig+0x1cc>
 80097be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d03a      	beq.n	800983c <UART_SetConfig+0x1d8>
 80097c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d039      	beq.n	8009842 <UART_SetConfig+0x1de>
 80097ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d02f      	beq.n	8009836 <UART_SetConfig+0x1d2>
 80097d6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80097da:	4293      	cmp	r3, r2
 80097dc:	d034      	beq.n	8009848 <UART_SetConfig+0x1e4>
 80097de:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d040      	beq.n	8009868 <UART_SetConfig+0x204>
 80097e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d039      	beq.n	8009862 <UART_SetConfig+0x1fe>
 80097ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d03b      	beq.n	800986e <UART_SetConfig+0x20a>
 80097f6:	f5a2 52c0 	sub.w	r2, r2, #6144	; 0x1800
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d03b      	beq.n	8009876 <UART_SetConfig+0x212>
 80097fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009802:	4293      	cmp	r3, r2
 8009804:	d13b      	bne.n	800987e <UART_SetConfig+0x21a>
 8009806:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800980a:	2100      	movs	r1, #0
 800980c:	e75b      	b.n	80096c6 <UART_SetConfig+0x62>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800980e:	6899      	ldr	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009810:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009814:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8009818:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800981c:	430a      	orrs	r2, r1
 800981e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009822:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009824:	f022 020f 	bic.w	r2, r2, #15
 8009828:	430a      	orrs	r2, r1
 800982a:	62da      	str	r2, [r3, #44]	; 0x2c
 800982c:	2100      	movs	r1, #0
 800982e:	e774      	b.n	800971a <UART_SetConfig+0xb6>
 8009830:	2002      	movs	r0, #2
 8009832:	2100      	movs	r1, #0
 8009834:	e747      	b.n	80096c6 <UART_SetConfig+0x62>
 8009836:	2010      	movs	r0, #16
 8009838:	2100      	movs	r1, #0
 800983a:	e744      	b.n	80096c6 <UART_SetConfig+0x62>
 800983c:	2004      	movs	r0, #4
 800983e:	2100      	movs	r1, #0
 8009840:	e741      	b.n	80096c6 <UART_SetConfig+0x62>
 8009842:	2008      	movs	r0, #8
 8009844:	2100      	movs	r1, #0
 8009846:	e73e      	b.n	80096c6 <UART_SetConfig+0x62>
 8009848:	2020      	movs	r0, #32
 800984a:	2100      	movs	r1, #0
 800984c:	e73b      	b.n	80096c6 <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800984e:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8009852:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009854:	f3c0 0042 	ubfx	r0, r0, #1, #3
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009858:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800985a:	4303      	orrs	r3, r0
 800985c:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800985e:	2000      	movs	r0, #0
 8009860:	e78b      	b.n	800977a <UART_SetConfig+0x116>
 8009862:	2080      	movs	r0, #128	; 0x80
 8009864:	2100      	movs	r1, #0
 8009866:	e72e      	b.n	80096c6 <UART_SetConfig+0x62>
 8009868:	2040      	movs	r0, #64	; 0x40
 800986a:	2100      	movs	r1, #0
 800986c:	e72b      	b.n	80096c6 <UART_SetConfig+0x62>
 800986e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009872:	2100      	movs	r1, #0
 8009874:	e727      	b.n	80096c6 <UART_SetConfig+0x62>
 8009876:	f44f 7000 	mov.w	r0, #512	; 0x200
 800987a:	2100      	movs	r1, #0
 800987c:	e723      	b.n	80096c6 <UART_SetConfig+0x62>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800987e:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 8009882:	4293      	cmp	r3, r2
 8009884:	f47f af43 	bne.w	800970e <UART_SetConfig+0xaa>
 8009888:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800988c:	2100      	movs	r1, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 800988e:	e71a      	b.n	80096c6 <UART_SetConfig+0x62>
 8009890:	cfff69f3 	.word	0xcfff69f3
 8009894:	44002400 	.word	0x44002400
 8009898:	54002400 	.word	0x54002400
 800989c:	40013800 	.word	0x40013800
 80098a0:	08019e20 	.word	0x08019e20
 80098a4:	000ffcff 	.word	0x000ffcff
 80098a8:	40004400 	.word	0x40004400

080098ac <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 80098ae:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098b0:	071a      	lsls	r2, r3, #28
 80098b2:	d506      	bpl.n	80098c2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098b4:	6801      	ldr	r1, [r0, #0]
 80098b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80098b8:	684a      	ldr	r2, [r1, #4]
 80098ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80098be:	4322      	orrs	r2, r4
 80098c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098c2:	07dc      	lsls	r4, r3, #31
 80098c4:	d506      	bpl.n	80098d4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098c6:	6801      	ldr	r1, [r0, #0]
 80098c8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80098ca:	684a      	ldr	r2, [r1, #4]
 80098cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80098d0:	4322      	orrs	r2, r4
 80098d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098d4:	0799      	lsls	r1, r3, #30
 80098d6:	d506      	bpl.n	80098e6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098d8:	6801      	ldr	r1, [r0, #0]
 80098da:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80098dc:	684a      	ldr	r2, [r1, #4]
 80098de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80098e2:	4322      	orrs	r2, r4
 80098e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098e6:	075a      	lsls	r2, r3, #29
 80098e8:	d506      	bpl.n	80098f8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098ea:	6801      	ldr	r1, [r0, #0]
 80098ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80098ee:	684a      	ldr	r2, [r1, #4]
 80098f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80098f4:	4322      	orrs	r2, r4
 80098f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098f8:	06dc      	lsls	r4, r3, #27
 80098fa:	d506      	bpl.n	800990a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098fc:	6801      	ldr	r1, [r0, #0]
 80098fe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8009900:	688a      	ldr	r2, [r1, #8]
 8009902:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009906:	4322      	orrs	r2, r4
 8009908:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800990a:	0699      	lsls	r1, r3, #26
 800990c:	d506      	bpl.n	800991c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800990e:	6801      	ldr	r1, [r0, #0]
 8009910:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8009912:	688a      	ldr	r2, [r1, #8]
 8009914:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009918:	4322      	orrs	r2, r4
 800991a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800991c:	065a      	lsls	r2, r3, #25
 800991e:	d50a      	bpl.n	8009936 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009920:	6801      	ldr	r1, [r0, #0]
 8009922:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8009924:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009926:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800992a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800992e:	ea42 0204 	orr.w	r2, r2, r4
 8009932:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009934:	d00b      	beq.n	800994e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009936:	061b      	lsls	r3, r3, #24
 8009938:	d506      	bpl.n	8009948 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800993a:	6802      	ldr	r2, [r0, #0]
 800993c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800993e:	6853      	ldr	r3, [r2, #4]
 8009940:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8009944:	430b      	orrs	r3, r1
 8009946:	6053      	str	r3, [r2, #4]
}
 8009948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800994c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800994e:	684a      	ldr	r2, [r1, #4]
 8009950:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8009952:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8009956:	4322      	orrs	r2, r4
 8009958:	604a      	str	r2, [r1, #4]
 800995a:	e7ec      	b.n	8009936 <UART_AdvFeatureConfig+0x8a>

0800995c <UART_WaitOnFlagUntilTimeout>:
{
 800995c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009960:	9f08      	ldr	r7, [sp, #32]
 8009962:	460d      	mov	r5, r1
 8009964:	4680      	mov	r8, r0
 8009966:	4616      	mov	r6, r2
 8009968:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800996a:	6801      	ldr	r1, [r0, #0]
 800996c:	e001      	b.n	8009972 <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800996e:	1c78      	adds	r0, r7, #1
 8009970:	d10d      	bne.n	800998e <UART_WaitOnFlagUntilTimeout+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009972:	69cc      	ldr	r4, [r1, #28]
 8009974:	ea35 0304 	bics.w	r3, r5, r4
 8009978:	bf0c      	ite	eq
 800997a:	f04f 0c01 	moveq.w	ip, #1
 800997e:	f04f 0c00 	movne.w	ip, #0
 8009982:	45b4      	cmp	ip, r6
 8009984:	d0f3      	beq.n	800996e <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 8009986:	2300      	movs	r3, #0
}
 8009988:	4618      	mov	r0, r3
 800998a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800998e:	f7f9 ff93 	bl	80038b8 <HAL_GetTick>
 8009992:	eba0 0009 	sub.w	r0, r0, r9
 8009996:	42b8      	cmp	r0, r7
 8009998:	d81d      	bhi.n	80099d6 <UART_WaitOnFlagUntilTimeout+0x7a>
 800999a:	b1e7      	cbz	r7, 80099d6 <UART_WaitOnFlagUntilTimeout+0x7a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800999c:	f8d8 1000 	ldr.w	r1, [r8]
 80099a0:	680b      	ldr	r3, [r1, #0]
 80099a2:	075a      	lsls	r2, r3, #29
 80099a4:	d5e5      	bpl.n	8009972 <UART_WaitOnFlagUntilTimeout+0x16>
 80099a6:	2d80      	cmp	r5, #128	; 0x80
 80099a8:	d0e3      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0x16>
 80099aa:	2d40      	cmp	r5, #64	; 0x40
 80099ac:	d0e1      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099ae:	69cc      	ldr	r4, [r1, #28]
 80099b0:	f014 0408 	ands.w	r4, r4, #8
 80099b4:	d111      	bne.n	80099da <UART_WaitOnFlagUntilTimeout+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099b6:	69cb      	ldr	r3, [r1, #28]
 80099b8:	051b      	lsls	r3, r3, #20
 80099ba:	d5da      	bpl.n	8009972 <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
          UART_EndRxTransfer(huart);
 80099c0:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099c2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 80099c4:	f7ff fbd2 	bl	800916c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099c8:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
          __HAL_UNLOCK(huart);
 80099cc:	f888 4084 	strb.w	r4, [r8, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099d0:	f8c8 2090 	str.w	r2, [r8, #144]	; 0x90
          return HAL_TIMEOUT;
 80099d4:	e7d8      	b.n	8009988 <UART_WaitOnFlagUntilTimeout+0x2c>
        return HAL_TIMEOUT;
 80099d6:	2303      	movs	r3, #3
 80099d8:	e7d6      	b.n	8009988 <UART_WaitOnFlagUntilTimeout+0x2c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099da:	2408      	movs	r4, #8
          UART_EndRxTransfer(huart);
 80099dc:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80099de:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 80099e0:	f7ff fbc4 	bl	800916c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 80099e4:	2200      	movs	r2, #0
          return HAL_ERROR;
 80099e6:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099e8:	f8c8 4090 	str.w	r4, [r8, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80099ec:	f888 2084 	strb.w	r2, [r8, #132]	; 0x84
          return HAL_ERROR;
 80099f0:	e7ca      	b.n	8009988 <UART_WaitOnFlagUntilTimeout+0x2c>
 80099f2:	bf00      	nop

080099f4 <UART_CheckIdleState>:
{
 80099f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099f6:	2600      	movs	r6, #0
{
 80099f8:	4604      	mov	r4, r0
 80099fa:	b083      	sub	sp, #12
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099fc:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8009a00:	f7f9 ff5a 	bl	80038b8 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a04:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8009a06:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	0712      	lsls	r2, r2, #28
 8009a0c:	d40f      	bmi.n	8009a2e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	075b      	lsls	r3, r3, #29
 8009a12:	d428      	bmi.n	8009a66 <UART_CheckIdleState+0x72>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a14:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009a16:	2220      	movs	r2, #32
  return HAL_OK;
 8009a18:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8009a1a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8009a1e:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009a22:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a26:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a28:	6723      	str	r3, [r4, #112]	; 0x70
}
 8009a2a:	b003      	add	sp, #12
 8009a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a2e:	f06f 477e 	mvn.w	r7, #4261412864	; 0xfe000000
 8009a32:	4603      	mov	r3, r0
 8009a34:	4632      	mov	r2, r6
 8009a36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009a3a:	4620      	mov	r0, r4
 8009a3c:	9700      	str	r7, [sp, #0]
 8009a3e:	f7ff ff8d 	bl	800995c <UART_WaitOnFlagUntilTimeout>
 8009a42:	6823      	ldr	r3, [r4, #0]
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d0e2      	beq.n	8009a0e <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a48:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a50:	e843 2100 	strex	r1, r2, [r3]
 8009a54:	2900      	cmp	r1, #0
 8009a56:	d1f7      	bne.n	8009a48 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 8009a58:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8009a5a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8009a5c:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 8009a60:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8009a64:	e7e1      	b.n	8009a2a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a66:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 8009a6a:	462b      	mov	r3, r5
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009a72:	4620      	mov	r0, r4
 8009a74:	9600      	str	r6, [sp, #0]
 8009a76:	f7ff ff71 	bl	800995c <UART_WaitOnFlagUntilTimeout>
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d0ca      	beq.n	8009a14 <UART_CheckIdleState+0x20>
 8009a7e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a80:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a84:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a88:	e843 2100 	strex	r1, r2, [r3]
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	d1f7      	bne.n	8009a80 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	f103 0208 	add.w	r2, r3, #8
 8009a94:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a98:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	f103 0008 	add.w	r0, r3, #8
 8009aa0:	e840 2100 	strex	r1, r2, [r0]
 8009aa4:	2900      	cmp	r1, #0
 8009aa6:	d1f3      	bne.n	8009a90 <UART_CheckIdleState+0x9c>
      huart->RxState = HAL_UART_STATE_READY;
 8009aa8:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8009aaa:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 8009aac:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8009ab0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 8009ab4:	e7b9      	b.n	8009a2a <UART_CheckIdleState+0x36>
 8009ab6:	bf00      	nop

08009ab8 <HAL_UART_Init>:
  if (huart == NULL)
 8009ab8:	b380      	cbz	r0, 8009b1c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009aba:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8009abe:	b510      	push	{r4, lr}
 8009ac0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009ac2:	b333      	cbz	r3, 8009b12 <HAL_UART_Init+0x5a>
  huart->gState = HAL_UART_STATE_BUSY;
 8009ac4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8009ac6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009ac8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8009acc:	6813      	ldr	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ace:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  __HAL_UART_DISABLE(huart);
 8009ad0:	f023 0301 	bic.w	r3, r3, #1
 8009ad4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ad6:	b9c1      	cbnz	r1, 8009b0a <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ad8:	4620      	mov	r0, r4
 8009ada:	f7ff fdc3 	bl	8009664 <UART_SetConfig>
 8009ade:	2801      	cmp	r0, #1
 8009ae0:	d011      	beq.n	8009b06 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009ae2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8009ae4:	4620      	mov	r0, r4
}
 8009ae6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009af0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009af2:	689a      	ldr	r2, [r3, #8]
 8009af4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009af8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	f042 0201 	orr.w	r2, r2, #1
 8009b00:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8009b02:	f7ff bf77 	b.w	80099f4 <UART_CheckIdleState>
}
 8009b06:	2001      	movs	r0, #1
 8009b08:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8009b0a:	4620      	mov	r0, r4
 8009b0c:	f7ff fece 	bl	80098ac <UART_AdvFeatureConfig>
 8009b10:	e7e2      	b.n	8009ad8 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8009b12:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8009b16:	f7f7 fc67 	bl	80013e8 <HAL_UART_MspInit>
 8009b1a:	e7d3      	b.n	8009ac4 <HAL_UART_Init+0xc>
}
 8009b1c:	2001      	movs	r0, #1
 8009b1e:	4770      	bx	lr

08009b20 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b20:	6803      	ldr	r3, [r0, #0]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 8009b22:	b430      	push	{r4, r5}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b24:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b26:	689b      	ldr	r3, [r3, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b28:	4d0b      	ldr	r5, [pc, #44]	; (8009b58 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b2a:	4c0c      	ldr	r4, [pc, #48]	; (8009b5c <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b2c:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b30:	f3c1 6142 	ubfx	r1, r1, #25, #3
 8009b34:	5c6b      	ldrb	r3, [r5, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b36:	f815 200c 	ldrb.w	r2, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b3a:	5c61      	ldrb	r1, [r4, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b3c:	f814 500c 	ldrb.w	r5, [r4, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b40:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b42:	00db      	lsls	r3, r3, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b44:	fbb2 f2f5 	udiv	r2, r2, r5
  }
}
 8009b48:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b4a:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b4e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b52:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 8009b56:	4770      	bx	lr
 8009b58:	08019e40 	.word	0x08019e40
 8009b5c:	08019e38 	.word	0x08019e38

08009b60 <HAL_UARTEx_WakeupCallback>:
}
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop

08009b64 <HAL_UARTEx_RxFifoFullCallback>:
 8009b64:	4770      	bx	lr
 8009b66:	bf00      	nop

08009b68 <HAL_UARTEx_TxFifoEmptyCallback>:
 8009b68:	4770      	bx	lr
 8009b6a:	bf00      	nop

08009b6c <HAL_UARTEx_EnableFifoMode>:
{
 8009b6c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8009b6e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d01b      	beq.n	8009bae <HAL_UARTEx_EnableFifoMode+0x42>
 8009b76:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8009b78:	2224      	movs	r2, #36	; 0x24
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009b7a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b7e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 8009b80:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009b84:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b88:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009b8a:	6819      	ldr	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009b8c:	432a      	orrs	r2, r5
  __HAL_UART_DISABLE(huart);
 8009b8e:	f021 0101 	bic.w	r1, r1, #1
 8009b92:	6019      	str	r1, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009b94:	6645      	str	r5, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009b96:	601a      	str	r2, [r3, #0]
 8009b98:	f7ff ffc2 	bl	8009b20 <UARTEx_SetNbDataToProcess.part.0>
 8009b9c:	4604      	mov	r4, r0
  __HAL_UNLOCK(huart);
 8009b9e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009ba0:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 8009ba2:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 8009ba6:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8009ba8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8009bac:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8009bae:	2002      	movs	r0, #2
}
 8009bb0:	bd38      	pop	{r3, r4, r5, pc}
 8009bb2:	bf00      	nop

08009bb4 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 8009bb4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d023      	beq.n	8009c04 <HAL_UARTEx_SetTxFifoThreshold+0x50>
{
 8009bbc:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009bbe:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 8009bc0:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bc2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 8009bc4:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009bc8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bcc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009bce:	681a      	ldr	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009bd0:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8009bd2:	f022 0201 	bic.w	r2, r2, #1
 8009bd6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009bd8:	689a      	ldr	r2, [r3, #8]
 8009bda:	4604      	mov	r4, r0
 8009bdc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8009be0:	4311      	orrs	r1, r2
 8009be2:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009be4:	b156      	cbz	r6, 8009bfc <HAL_UARTEx_SetTxFifoThreshold+0x48>
 8009be6:	f7ff ff9b 	bl	8009b20 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bea:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 8009bec:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8009bee:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bf0:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 8009bf2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8009bf6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8009bfc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009c00:	6682      	str	r2, [r0, #104]	; 0x68
 8009c02:	e7f3      	b.n	8009bec <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8009c04:	2002      	movs	r0, #2
}
 8009c06:	4770      	bx	lr

08009c08 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009c08:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8009c0c:	2b01      	cmp	r3, #1
 8009c0e:	d023      	beq.n	8009c58 <HAL_UARTEx_SetRxFifoThreshold+0x50>
{
 8009c10:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009c12:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 8009c14:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c16:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 8009c18:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8009c1c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c20:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8009c22:	681a      	ldr	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c24:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8009c26:	f022 0201 	bic.w	r2, r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009c2c:	689a      	ldr	r2, [r3, #8]
 8009c2e:	4604      	mov	r4, r0
 8009c30:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8009c34:	4311      	orrs	r1, r2
 8009c36:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009c38:	b156      	cbz	r6, 8009c50 <HAL_UARTEx_SetRxFifoThreshold+0x48>
 8009c3a:	f7ff ff71 	bl	8009b20 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c3e:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 8009c40:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8009c42:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c44:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 8009c46:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 8009c4a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 8009c4e:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 8009c50:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8009c54:	6682      	str	r2, [r0, #104]	; 0x68
 8009c56:	e7f3      	b.n	8009c40 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 8009c58:	2002      	movs	r0, #2
}
 8009c5a:	4770      	bx	lr

08009c5c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop

08009c60 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8009c60:	e7fe      	b.n	8009c60 <HardFault_Handler>
 8009c62:	bf00      	nop

08009c64 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8009c64:	e7fe      	b.n	8009c64 <MemManage_Handler>
 8009c66:	bf00      	nop

08009c68 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009c68:	e7fe      	b.n	8009c68 <BusFault_Handler>
 8009c6a:	bf00      	nop

08009c6c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8009c6c:	e7fe      	b.n	8009c6c <UsageFault_Handler>
 8009c6e:	bf00      	nop

08009c70 <SVC_Handler>:
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop

08009c74 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
 8009c74:	e7fe      	b.n	8009c74 <DebugMon_Handler>
 8009c76:	bf00      	nop

08009c78 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
 8009c78:	e7fe      	b.n	8009c78 <PendSV_Handler>
 8009c7a:	bf00      	nop

08009c7c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8009c7c:	f7f9 be10 	b.w	80038a0 <HAL_IncTick>

08009c80 <GPDMA1_Channel0_IRQHandler>:
void GPDMA1_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 8009c80:	4801      	ldr	r0, [pc, #4]	; (8009c88 <GPDMA1_Channel0_IRQHandler+0x8>)
 8009c82:	f7fa b9a5 	b.w	8003fd0 <HAL_DMA_IRQHandler>
 8009c86:	bf00      	nop
 8009c88:	200008f8 	.word	0x200008f8

08009c8c <GPDMA1_Channel1_IRQHandler>:
void GPDMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8009c8c:	4801      	ldr	r0, [pc, #4]	; (8009c94 <GPDMA1_Channel1_IRQHandler+0x8>)
 8009c8e:	f7fa b99f 	b.w	8003fd0 <HAL_DMA_IRQHandler>
 8009c92:	bf00      	nop
 8009c94:	20000970 	.word	0x20000970

08009c98 <GPDMA1_Channel2_IRQHandler>:
void GPDMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 8009c98:	4801      	ldr	r0, [pc, #4]	; (8009ca0 <GPDMA1_Channel2_IRQHandler+0x8>)
 8009c9a:	f7fa b999 	b.w	8003fd0 <HAL_DMA_IRQHandler>
 8009c9e:	bf00      	nop
 8009ca0:	200009e8 	.word	0x200009e8

08009ca4 <GPDMA1_Channel3_IRQHandler>:
void GPDMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 8009ca4:	4801      	ldr	r0, [pc, #4]	; (8009cac <GPDMA1_Channel3_IRQHandler+0x8>)
 8009ca6:	f7fa b993 	b.w	8003fd0 <HAL_DMA_IRQHandler>
 8009caa:	bf00      	nop
 8009cac:	20000a60 	.word	0x20000a60

08009cb0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009cb0:	4801      	ldr	r0, [pc, #4]	; (8009cb8 <USART2_IRQHandler+0x8>)
 8009cb2:	f7ff bb53 	b.w	800935c <HAL_UART_IRQHandler>
 8009cb6:	bf00      	nop
 8009cb8:	20000ad8 	.word	0x20000ad8

08009cbc <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8009cbc:	4801      	ldr	r0, [pc, #4]	; (8009cc4 <UART4_IRQHandler+0x8>)
 8009cbe:	f7ff bb4d 	b.w	800935c <HAL_UART_IRQHandler>
 8009cc2:	bf00      	nop
 8009cc4:	20000b6c 	.word	0x20000b6c

08009cc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009cc8:	b4f0      	push	{r4, r5, r6, r7}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8009cca:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_HSION;
 8009ccc:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009cce:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009cd2:	491d      	ldr	r1, [pc, #116]	; (8009d48 <SystemInit+0x80>)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8009cd4:	4c1d      	ldr	r4, [pc, #116]	; (8009d4c <SystemInit+0x84>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009cd6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  RCC->PLL1DIVR = 0x01010280U;
 8009cda:	481d      	ldr	r0, [pc, #116]	; (8009d50 <SystemInit+0x88>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR = RCC_CR_HSION;
 8009ce4:	4b1b      	ldr	r3, [pc, #108]	; (8009d54 <SystemInit+0x8c>)
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8009ce6:	4d1c      	ldr	r5, [pc, #112]	; (8009d58 <SystemInit+0x90>)
  RCC->CR = RCC_CR_HSION;
 8009ce8:	601f      	str	r7, [r3, #0]
  RCC->CFGR1 = 0U;
 8009cea:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8009cec:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8009cee:	681f      	ldr	r7, [r3, #0]
 8009cf0:	403c      	ands	r4, r7
 8009cf2:	601c      	str	r4, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8009cf4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 8009cf6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 8009cf8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1DIVR = 0x01010280U;
 8009cfa:	6358      	str	r0, [r3, #52]	; 0x34
  RCC->PLL1FRACR = 0x00000000U;
 8009cfc:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2DIVR = 0x01010280U;
 8009cfe:	63d8      	str	r0, [r3, #60]	; 0x3c
  RCC->PLL2FRACR = 0x00000000U;
 8009d00:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3DIVR = 0x01010280U;
 8009d02:	6458      	str	r0, [r3, #68]	; 0x44
  RCC->PLL3FRACR = 0x00000000U;
 8009d04:	649a      	str	r2, [r3, #72]	; 0x48
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8009d06:	6818      	ldr	r0, [r3, #0]
 8009d08:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8009d0c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0U;
 8009d0e:	651a      	str	r2, [r3, #80]	; 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009d10:	608e      	str	r6, [r1, #8]
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8009d12:	69ab      	ldr	r3, [r5, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8009d14:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009d18:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009d1c:	d001      	beq.n	8009d22 <SystemInit+0x5a>
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
  }
}
 8009d1e:	bcf0      	pop	{r4, r5, r6, r7}
 8009d20:	4770      	bx	lr
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8009d22:	69eb      	ldr	r3, [r5, #28]
 8009d24:	07db      	lsls	r3, r3, #31
 8009d26:	d503      	bpl.n	8009d30 <SystemInit+0x68>
      FLASH->OPTKEYR = 0x08192A3BU;
 8009d28:	4a0c      	ldr	r2, [pc, #48]	; (8009d5c <SystemInit+0x94>)
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8009d2a:	4b0d      	ldr	r3, [pc, #52]	; (8009d60 <SystemInit+0x98>)
      FLASH->OPTKEYR = 0x08192A3BU;
 8009d2c:	60ea      	str	r2, [r5, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8009d2e:	60eb      	str	r3, [r5, #12]
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8009d30:	4b09      	ldr	r3, [pc, #36]	; (8009d58 <SystemInit+0x90>)
}
 8009d32:	bcf0      	pop	{r4, r5, r6, r7}
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8009d34:	69da      	ldr	r2, [r3, #28]
 8009d36:	f042 0202 	orr.w	r2, r2, #2
 8009d3a:	61da      	str	r2, [r3, #28]
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 8009d3c:	69da      	ldr	r2, [r3, #28]
 8009d3e:	f042 0201 	orr.w	r2, r2, #1
 8009d42:	61da      	str	r2, [r3, #28]
}
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	e000ed00 	.word	0xe000ed00
 8009d4c:	eae2eae3 	.word	0xeae2eae3
 8009d50:	01010280 	.word	0x01010280
 8009d54:	44020c00 	.word	0x44020c00
 8009d58:	40022000 	.word	0x40022000
 8009d5c:	08192a3b 	.word	0x08192a3b
 8009d60:	4c5d6e7f 	.word	0x4c5d6e7f

08009d64 <__libc_init_array>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4e0d      	ldr	r6, [pc, #52]	; (8009d9c <__libc_init_array+0x38>)
 8009d68:	4d0d      	ldr	r5, [pc, #52]	; (8009da0 <__libc_init_array+0x3c>)
 8009d6a:	1b76      	subs	r6, r6, r5
 8009d6c:	10b6      	asrs	r6, r6, #2
 8009d6e:	d006      	beq.n	8009d7e <__libc_init_array+0x1a>
 8009d70:	2400      	movs	r4, #0
 8009d72:	3401      	adds	r4, #1
 8009d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d78:	4798      	blx	r3
 8009d7a:	42a6      	cmp	r6, r4
 8009d7c:	d1f9      	bne.n	8009d72 <__libc_init_array+0xe>
 8009d7e:	4e09      	ldr	r6, [pc, #36]	; (8009da4 <__libc_init_array+0x40>)
 8009d80:	f000 fd4c 	bl	800a81c <_init>
 8009d84:	4d08      	ldr	r5, [pc, #32]	; (8009da8 <__libc_init_array+0x44>)
 8009d86:	1b76      	subs	r6, r6, r5
 8009d88:	10b6      	asrs	r6, r6, #2
 8009d8a:	d006      	beq.n	8009d9a <__libc_init_array+0x36>
 8009d8c:	2400      	movs	r4, #0
 8009d8e:	3401      	adds	r4, #1
 8009d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d94:	4798      	blx	r3
 8009d96:	42a6      	cmp	r6, r4
 8009d98:	d1f9      	bne.n	8009d8e <__libc_init_array+0x2a>
 8009d9a:	bd70      	pop	{r4, r5, r6, pc}
 8009d9c:	08019e6c 	.word	0x08019e6c
 8009da0:	08019e6c 	.word	0x08019e6c
 8009da4:	08019e74 	.word	0x08019e74
 8009da8:	08019e6c 	.word	0x08019e6c

08009dac <malloc>:
 8009dac:	4b02      	ldr	r3, [pc, #8]	; (8009db8 <malloc+0xc>)
 8009dae:	4601      	mov	r1, r0
 8009db0:	6818      	ldr	r0, [r3, #0]
 8009db2:	f000 b803 	b.w	8009dbc <_malloc_r>
 8009db6:	bf00      	nop
 8009db8:	2000000c 	.word	0x2000000c

08009dbc <_malloc_r>:
 8009dbc:	f101 030b 	add.w	r3, r1, #11
 8009dc0:	2b16      	cmp	r3, #22
 8009dc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc6:	4605      	mov	r5, r0
 8009dc8:	b083      	sub	sp, #12
 8009dca:	d824      	bhi.n	8009e16 <_malloc_r+0x5a>
 8009dcc:	2910      	cmp	r1, #16
 8009dce:	f200 80f5 	bhi.w	8009fbc <_malloc_r+0x200>
 8009dd2:	f000 faff 	bl	800a3d4 <__malloc_lock>
 8009dd6:	2410      	movs	r4, #16
 8009dd8:	2218      	movs	r2, #24
 8009dda:	2002      	movs	r0, #2
 8009ddc:	4ec0      	ldr	r6, [pc, #768]	; (800a0e0 <_malloc_r+0x324>)
 8009dde:	4432      	add	r2, r6
 8009de0:	6853      	ldr	r3, [r2, #4]
 8009de2:	f1a2 0108 	sub.w	r1, r2, #8
 8009de6:	428b      	cmp	r3, r1
 8009de8:	f000 80ef 	beq.w	8009fca <_malloc_r+0x20e>
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	4628      	mov	r0, r5
 8009df0:	f022 0203 	bic.w	r2, r2, #3
 8009df4:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 8009df8:	441a      	add	r2, r3
 8009dfa:	60e1      	str	r1, [r4, #12]
 8009dfc:	608c      	str	r4, [r1, #8]
 8009dfe:	f103 0408 	add.w	r4, r3, #8
 8009e02:	6853      	ldr	r3, [r2, #4]
 8009e04:	f043 0301 	orr.w	r3, r3, #1
 8009e08:	6053      	str	r3, [r2, #4]
 8009e0a:	f000 fae9 	bl	800a3e0 <__malloc_unlock>
 8009e0e:	4620      	mov	r0, r4
 8009e10:	b003      	add	sp, #12
 8009e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	f023 0407 	bic.w	r4, r3, #7
 8009e1c:	f2c0 80ce 	blt.w	8009fbc <_malloc_r+0x200>
 8009e20:	42a1      	cmp	r1, r4
 8009e22:	f200 80cb 	bhi.w	8009fbc <_malloc_r+0x200>
 8009e26:	f000 fad5 	bl	800a3d4 <__malloc_lock>
 8009e2a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009e2e:	f0c0 81c2 	bcc.w	800a1b6 <_malloc_r+0x3fa>
 8009e32:	0a63      	lsrs	r3, r4, #9
 8009e34:	f000 8133 	beq.w	800a09e <_malloc_r+0x2e2>
 8009e38:	2b04      	cmp	r3, #4
 8009e3a:	f200 8198 	bhi.w	800a16e <_malloc_r+0x3b2>
 8009e3e:	09a3      	lsrs	r3, r4, #6
 8009e40:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8009e44:	f103 0738 	add.w	r7, r3, #56	; 0x38
 8009e48:	00c3      	lsls	r3, r0, #3
 8009e4a:	4ea5      	ldr	r6, [pc, #660]	; (800a0e0 <_malloc_r+0x324>)
 8009e4c:	4433      	add	r3, r6
 8009e4e:	f1a3 0c08 	sub.w	ip, r3, #8
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	459c      	cmp	ip, r3
 8009e56:	d107      	bne.n	8009e68 <_malloc_r+0xac>
 8009e58:	e0bc      	b.n	8009fd4 <_malloc_r+0x218>
 8009e5a:	2900      	cmp	r1, #0
 8009e5c:	f280 8150 	bge.w	800a100 <_malloc_r+0x344>
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	459c      	cmp	ip, r3
 8009e64:	f000 80b6 	beq.w	8009fd4 <_malloc_r+0x218>
 8009e68:	685a      	ldr	r2, [r3, #4]
 8009e6a:	f022 0203 	bic.w	r2, r2, #3
 8009e6e:	1b11      	subs	r1, r2, r4
 8009e70:	290f      	cmp	r1, #15
 8009e72:	ddf2      	ble.n	8009e5a <_malloc_r+0x9e>
 8009e74:	6933      	ldr	r3, [r6, #16]
 8009e76:	4638      	mov	r0, r7
 8009e78:	f8df e27c 	ldr.w	lr, [pc, #636]	; 800a0f8 <_malloc_r+0x33c>
 8009e7c:	4573      	cmp	r3, lr
 8009e7e:	f040 80af 	bne.w	8009fe0 <_malloc_r+0x224>
 8009e82:	1083      	asrs	r3, r0, #2
 8009e84:	2101      	movs	r1, #1
 8009e86:	6872      	ldr	r2, [r6, #4]
 8009e88:	4099      	lsls	r1, r3
 8009e8a:	4291      	cmp	r1, r2
 8009e8c:	f240 80d1 	bls.w	800a032 <_malloc_r+0x276>
 8009e90:	68b7      	ldr	r7, [r6, #8]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f023 0903 	bic.w	r9, r3, #3
 8009e98:	eba9 0304 	sub.w	r3, r9, r4
 8009e9c:	2b0f      	cmp	r3, #15
 8009e9e:	dd02      	ble.n	8009ea6 <_malloc_r+0xea>
 8009ea0:	454c      	cmp	r4, r9
 8009ea2:	f240 810c 	bls.w	800a0be <_malloc_r+0x302>
 8009ea6:	4b8f      	ldr	r3, [pc, #572]	; (800a0e4 <_malloc_r+0x328>)
 8009ea8:	eb07 0b09 	add.w	fp, r7, r9
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	eb04 0803 	add.w	r8, r4, r3
 8009eb2:	4b8d      	ldr	r3, [pc, #564]	; (800a0e8 <_malloc_r+0x32c>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	3201      	adds	r2, #1
 8009eb8:	f000 81cb 	beq.w	800a252 <_malloc_r+0x496>
 8009ebc:	f241 020f 	movw	r2, #4111	; 0x100f
 8009ec0:	4442      	add	r2, r8
 8009ec2:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800a0fc <_malloc_r+0x340>
 8009ec6:	ea02 0808 	and.w	r8, r2, r8
 8009eca:	4641      	mov	r1, r8
 8009ecc:	4628      	mov	r0, r5
 8009ece:	f000 fa8d 	bl	800a3ec <_sbrk_r>
 8009ed2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009ed6:	4682      	mov	sl, r0
 8009ed8:	4b83      	ldr	r3, [pc, #524]	; (800a0e8 <_malloc_r+0x32c>)
 8009eda:	f000 81a9 	beq.w	800a230 <_malloc_r+0x474>
 8009ede:	42b7      	cmp	r7, r6
 8009ee0:	d002      	beq.n	8009ee8 <_malloc_r+0x12c>
 8009ee2:	4583      	cmp	fp, r0
 8009ee4:	f200 81a4 	bhi.w	800a230 <_malloc_r+0x474>
 8009ee8:	4a80      	ldr	r2, [pc, #512]	; (800a0ec <_malloc_r+0x330>)
 8009eea:	45d3      	cmp	fp, sl
 8009eec:	6811      	ldr	r1, [r2, #0]
 8009eee:	4441      	add	r1, r8
 8009ef0:	6011      	str	r1, [r2, #0]
 8009ef2:	f000 81a0 	beq.w	800a236 <_malloc_r+0x47a>
 8009ef6:	6818      	ldr	r0, [r3, #0]
 8009ef8:	3001      	adds	r0, #1
 8009efa:	f000 81a7 	beq.w	800a24c <_malloc_r+0x490>
 8009efe:	ebaa 0b0b 	sub.w	fp, sl, fp
 8009f02:	4459      	add	r1, fp
 8009f04:	6011      	str	r1, [r2, #0]
 8009f06:	f01a 0307 	ands.w	r3, sl, #7
 8009f0a:	f000 81ac 	beq.w	800a266 <_malloc_r+0x4aa>
 8009f0e:	f1c3 0108 	rsb	r1, r3, #8
 8009f12:	4628      	mov	r0, r5
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	448a      	add	sl, r1
 8009f18:	f241 0108 	movw	r1, #4104	; 0x1008
 8009f1c:	44d0      	add	r8, sl
 8009f1e:	1ac9      	subs	r1, r1, r3
 8009f20:	eba1 0108 	sub.w	r1, r1, r8
 8009f24:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
 8009f28:	4659      	mov	r1, fp
 8009f2a:	f000 fa5f 	bl	800a3ec <_sbrk_r>
 8009f2e:	1c42      	adds	r2, r0, #1
 8009f30:	9b01      	ldr	r3, [sp, #4]
 8009f32:	4a6e      	ldr	r2, [pc, #440]	; (800a0ec <_malloc_r+0x330>)
 8009f34:	f000 81de 	beq.w	800a2f4 <_malloc_r+0x538>
 8009f38:	eba0 000a 	sub.w	r0, r0, sl
 8009f3c:	eb00 080b 	add.w	r8, r0, fp
 8009f40:	6810      	ldr	r0, [r2, #0]
 8009f42:	f048 0301 	orr.w	r3, r8, #1
 8009f46:	42b7      	cmp	r7, r6
 8009f48:	f8c6 a008 	str.w	sl, [r6, #8]
 8009f4c:	eb0b 0100 	add.w	r1, fp, r0
 8009f50:	f8ca 3004 	str.w	r3, [sl, #4]
 8009f54:	6011      	str	r1, [r2, #0]
 8009f56:	f000 81a9 	beq.w	800a2ac <_malloc_r+0x4f0>
 8009f5a:	f1b9 0f0f 	cmp.w	r9, #15
 8009f5e:	f240 81a7 	bls.w	800a2b0 <_malloc_r+0x4f4>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f1a9 000c 	sub.w	r0, r9, #12
 8009f68:	f04f 0c05 	mov.w	ip, #5
 8009f6c:	f020 0007 	bic.w	r0, r0, #7
 8009f70:	f003 0301 	and.w	r3, r3, #1
 8009f74:	4303      	orrs	r3, r0
 8009f76:	280f      	cmp	r0, #15
 8009f78:	607b      	str	r3, [r7, #4]
 8009f7a:	eb07 0300 	add.w	r3, r7, r0
 8009f7e:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 8009f82:	f200 81ad 	bhi.w	800a2e0 <_malloc_r+0x524>
 8009f86:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f8a:	4657      	mov	r7, sl
 8009f8c:	4a58      	ldr	r2, [pc, #352]	; (800a0f0 <_malloc_r+0x334>)
 8009f8e:	6810      	ldr	r0, [r2, #0]
 8009f90:	4288      	cmp	r0, r1
 8009f92:	bf38      	it	cc
 8009f94:	6011      	strcc	r1, [r2, #0]
 8009f96:	4a57      	ldr	r2, [pc, #348]	; (800a0f4 <_malloc_r+0x338>)
 8009f98:	6810      	ldr	r0, [r2, #0]
 8009f9a:	4288      	cmp	r0, r1
 8009f9c:	bf38      	it	cc
 8009f9e:	6011      	strcc	r1, [r2, #0]
 8009fa0:	f023 0803 	bic.w	r8, r3, #3
 8009fa4:	4544      	cmp	r4, r8
 8009fa6:	eba8 0304 	sub.w	r3, r8, r4
 8009faa:	d802      	bhi.n	8009fb2 <_malloc_r+0x1f6>
 8009fac:	2b0f      	cmp	r3, #15
 8009fae:	f300 8086 	bgt.w	800a0be <_malloc_r+0x302>
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	2400      	movs	r4, #0
 8009fb6:	f000 fa13 	bl	800a3e0 <__malloc_unlock>
 8009fba:	e728      	b.n	8009e0e <_malloc_r+0x52>
 8009fbc:	2400      	movs	r4, #0
 8009fbe:	230c      	movs	r3, #12
 8009fc0:	4620      	mov	r0, r4
 8009fc2:	602b      	str	r3, [r5, #0]
 8009fc4:	b003      	add	sp, #12
 8009fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fca:	68d3      	ldr	r3, [r2, #12]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	f47f af0d 	bne.w	8009dec <_malloc_r+0x30>
 8009fd2:	3002      	adds	r0, #2
 8009fd4:	6933      	ldr	r3, [r6, #16]
 8009fd6:	f8df e120 	ldr.w	lr, [pc, #288]	; 800a0f8 <_malloc_r+0x33c>
 8009fda:	4573      	cmp	r3, lr
 8009fdc:	f43f af51 	beq.w	8009e82 <_malloc_r+0xc6>
 8009fe0:	6859      	ldr	r1, [r3, #4]
 8009fe2:	f021 0103 	bic.w	r1, r1, #3
 8009fe6:	1b0a      	subs	r2, r1, r4
 8009fe8:	2a0f      	cmp	r2, #15
 8009fea:	f300 80e8 	bgt.w	800a1be <_malloc_r+0x402>
 8009fee:	2a00      	cmp	r2, #0
 8009ff0:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 8009ff4:	da58      	bge.n	800a0a8 <_malloc_r+0x2ec>
 8009ff6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009ffa:	f080 8093 	bcs.w	800a124 <_malloc_r+0x368>
 8009ffe:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
 800a002:	2201      	movs	r2, #1
 800a004:	0949      	lsrs	r1, r1, #5
 800a006:	f10c 0c01 	add.w	ip, ip, #1
 800a00a:	408a      	lsls	r2, r1
 800a00c:	6871      	ldr	r1, [r6, #4]
 800a00e:	f856 703c 	ldr.w	r7, [r6, ip, lsl #3]
 800a012:	430a      	orrs	r2, r1
 800a014:	eb06 01cc 	add.w	r1, r6, ip, lsl #3
 800a018:	3908      	subs	r1, #8
 800a01a:	6072      	str	r2, [r6, #4]
 800a01c:	e9c3 7102 	strd	r7, r1, [r3, #8]
 800a020:	f846 303c 	str.w	r3, [r6, ip, lsl #3]
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	1083      	asrs	r3, r0, #2
 800a028:	2101      	movs	r1, #1
 800a02a:	4099      	lsls	r1, r3
 800a02c:	4291      	cmp	r1, r2
 800a02e:	f63f af2f 	bhi.w	8009e90 <_malloc_r+0xd4>
 800a032:	4211      	tst	r1, r2
 800a034:	d105      	bne.n	800a042 <_malloc_r+0x286>
 800a036:	f020 0003 	bic.w	r0, r0, #3
 800a03a:	0049      	lsls	r1, r1, #1
 800a03c:	3004      	adds	r0, #4
 800a03e:	4211      	tst	r1, r2
 800a040:	d0fb      	beq.n	800a03a <_malloc_r+0x27e>
 800a042:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 800a046:	4680      	mov	r8, r0
 800a048:	46cc      	mov	ip, r9
 800a04a:	f8dc 700c 	ldr.w	r7, [ip, #12]
 800a04e:	45bc      	cmp	ip, r7
 800a050:	d107      	bne.n	800a062 <_malloc_r+0x2a6>
 800a052:	e098      	b.n	800a186 <_malloc_r+0x3ca>
 800a054:	2b00      	cmp	r3, #0
 800a056:	f280 809f 	bge.w	800a198 <_malloc_r+0x3dc>
 800a05a:	68ff      	ldr	r7, [r7, #12]
 800a05c:	45bc      	cmp	ip, r7
 800a05e:	f000 8092 	beq.w	800a186 <_malloc_r+0x3ca>
 800a062:	687a      	ldr	r2, [r7, #4]
 800a064:	f022 0203 	bic.w	r2, r2, #3
 800a068:	1b13      	subs	r3, r2, r4
 800a06a:	2b0f      	cmp	r3, #15
 800a06c:	ddf2      	ble.n	800a054 <_malloc_r+0x298>
 800a06e:	1939      	adds	r1, r7, r4
 800a070:	f044 0401 	orr.w	r4, r4, #1
 800a074:	4628      	mov	r0, r5
 800a076:	607c      	str	r4, [r7, #4]
 800a078:	f043 0401 	orr.w	r4, r3, #1
 800a07c:	e9d7 c502 	ldrd	ip, r5, [r7, #8]
 800a080:	f8cc 500c 	str.w	r5, [ip, #12]
 800a084:	f8c5 c008 	str.w	ip, [r5, #8]
 800a088:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800a08c:	604c      	str	r4, [r1, #4]
 800a08e:	f107 0408 	add.w	r4, r7, #8
 800a092:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 800a096:	50bb      	str	r3, [r7, r2]
 800a098:	f000 f9a2 	bl	800a3e0 <__malloc_unlock>
 800a09c:	e6b7      	b.n	8009e0e <_malloc_r+0x52>
 800a09e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0a2:	2040      	movs	r0, #64	; 0x40
 800a0a4:	273f      	movs	r7, #63	; 0x3f
 800a0a6:	e6d0      	b.n	8009e4a <_malloc_r+0x8e>
 800a0a8:	4419      	add	r1, r3
 800a0aa:	f103 0408 	add.w	r4, r3, #8
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	684b      	ldr	r3, [r1, #4]
 800a0b2:	f043 0301 	orr.w	r3, r3, #1
 800a0b6:	604b      	str	r3, [r1, #4]
 800a0b8:	f000 f992 	bl	800a3e0 <__malloc_unlock>
 800a0bc:	e6a7      	b.n	8009e0e <_malloc_r+0x52>
 800a0be:	193a      	adds	r2, r7, r4
 800a0c0:	f044 0401 	orr.w	r4, r4, #1
 800a0c4:	f043 0301 	orr.w	r3, r3, #1
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	607c      	str	r4, [r7, #4]
 800a0cc:	f107 0408 	add.w	r4, r7, #8
 800a0d0:	60b2      	str	r2, [r6, #8]
 800a0d2:	6053      	str	r3, [r2, #4]
 800a0d4:	f000 f984 	bl	800a3e0 <__malloc_unlock>
 800a0d8:	4620      	mov	r0, r4
 800a0da:	b003      	add	sp, #12
 800a0dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e0:	20000438 	.word	0x20000438
 800a0e4:	20000cc8 	.word	0x20000cc8
 800a0e8:	20000840 	.word	0x20000840
 800a0ec:	20000c98 	.word	0x20000c98
 800a0f0:	20000cc0 	.word	0x20000cc0
 800a0f4:	20000cc4 	.word	0x20000cc4
 800a0f8:	20000440 	.word	0x20000440
 800a0fc:	fffff000 	.word	0xfffff000
 800a100:	441a      	add	r2, r3
 800a102:	f103 0408 	add.w	r4, r3, #8
 800a106:	4628      	mov	r0, r5
 800a108:	e9d3 6102 	ldrd	r6, r1, [r3, #8]
 800a10c:	6853      	ldr	r3, [r2, #4]
 800a10e:	60f1      	str	r1, [r6, #12]
 800a110:	f043 0301 	orr.w	r3, r3, #1
 800a114:	608e      	str	r6, [r1, #8]
 800a116:	6053      	str	r3, [r2, #4]
 800a118:	f000 f962 	bl	800a3e0 <__malloc_unlock>
 800a11c:	4620      	mov	r0, r4
 800a11e:	b003      	add	sp, #12
 800a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a124:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800a128:	ea4f 2251 	mov.w	r2, r1, lsr #9
 800a12c:	d359      	bcc.n	800a1e2 <_malloc_r+0x426>
 800a12e:	2a14      	cmp	r2, #20
 800a130:	f200 80aa 	bhi.w	800a288 <_malloc_r+0x4cc>
 800a134:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800a138:	325b      	adds	r2, #91	; 0x5b
 800a13a:	00ff      	lsls	r7, r7, #3
 800a13c:	eb06 0c07 	add.w	ip, r6, r7
 800a140:	59f7      	ldr	r7, [r6, r7]
 800a142:	f1ac 0c08 	sub.w	ip, ip, #8
 800a146:	45bc      	cmp	ip, r7
 800a148:	f000 8086 	beq.w	800a258 <_malloc_r+0x49c>
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	f022 0203 	bic.w	r2, r2, #3
 800a152:	428a      	cmp	r2, r1
 800a154:	d902      	bls.n	800a15c <_malloc_r+0x3a0>
 800a156:	68bf      	ldr	r7, [r7, #8]
 800a158:	45bc      	cmp	ip, r7
 800a15a:	d1f7      	bne.n	800a14c <_malloc_r+0x390>
 800a15c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a160:	6872      	ldr	r2, [r6, #4]
 800a162:	e9c3 7c02 	strd	r7, ip, [r3, #8]
 800a166:	f8cc 3008 	str.w	r3, [ip, #8]
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	e75b      	b.n	800a026 <_malloc_r+0x26a>
 800a16e:	2b14      	cmp	r3, #20
 800a170:	d93d      	bls.n	800a1ee <_malloc_r+0x432>
 800a172:	2b54      	cmp	r3, #84	; 0x54
 800a174:	f200 8090 	bhi.w	800a298 <_malloc_r+0x4dc>
 800a178:	0b23      	lsrs	r3, r4, #12
 800a17a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800a17e:	f103 076e 	add.w	r7, r3, #110	; 0x6e
 800a182:	00c3      	lsls	r3, r0, #3
 800a184:	e661      	b.n	8009e4a <_malloc_r+0x8e>
 800a186:	f108 0801 	add.w	r8, r8, #1
 800a18a:	f10c 0c08 	add.w	ip, ip, #8
 800a18e:	f018 0f03 	tst.w	r8, #3
 800a192:	f47f af5a 	bne.w	800a04a <_malloc_r+0x28e>
 800a196:	e035      	b.n	800a204 <_malloc_r+0x448>
 800a198:	443a      	add	r2, r7
 800a19a:	463c      	mov	r4, r7
 800a19c:	68f9      	ldr	r1, [r7, #12]
 800a19e:	4628      	mov	r0, r5
 800a1a0:	6853      	ldr	r3, [r2, #4]
 800a1a2:	f043 0301 	orr.w	r3, r3, #1
 800a1a6:	6053      	str	r3, [r2, #4]
 800a1a8:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a1ac:	60d9      	str	r1, [r3, #12]
 800a1ae:	608b      	str	r3, [r1, #8]
 800a1b0:	f000 f916 	bl	800a3e0 <__malloc_unlock>
 800a1b4:	e62b      	b.n	8009e0e <_malloc_r+0x52>
 800a1b6:	08e0      	lsrs	r0, r4, #3
 800a1b8:	f104 0208 	add.w	r2, r4, #8
 800a1bc:	e60e      	b.n	8009ddc <_malloc_r+0x20>
 800a1be:	4628      	mov	r0, r5
 800a1c0:	191d      	adds	r5, r3, r4
 800a1c2:	f044 0401 	orr.w	r4, r4, #1
 800a1c6:	605c      	str	r4, [r3, #4]
 800a1c8:	f042 0401 	orr.w	r4, r2, #1
 800a1cc:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800a1d0:	606c      	str	r4, [r5, #4]
 800a1d2:	f103 0408 	add.w	r4, r3, #8
 800a1d6:	e9c5 ee02 	strd	lr, lr, [r5, #8]
 800a1da:	505a      	str	r2, [r3, r1]
 800a1dc:	f000 f900 	bl	800a3e0 <__malloc_unlock>
 800a1e0:	e615      	b.n	8009e0e <_malloc_r+0x52>
 800a1e2:	098a      	lsrs	r2, r1, #6
 800a1e4:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800a1e8:	3238      	adds	r2, #56	; 0x38
 800a1ea:	00ff      	lsls	r7, r7, #3
 800a1ec:	e7a6      	b.n	800a13c <_malloc_r+0x380>
 800a1ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800a1f2:	f103 075b 	add.w	r7, r3, #91	; 0x5b
 800a1f6:	00c3      	lsls	r3, r0, #3
 800a1f8:	e627      	b.n	8009e4a <_malloc_r+0x8e>
 800a1fa:	f859 3908 	ldr.w	r3, [r9], #-8
 800a1fe:	454b      	cmp	r3, r9
 800a200:	f040 8092 	bne.w	800a328 <_malloc_r+0x56c>
 800a204:	f010 0f03 	tst.w	r0, #3
 800a208:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800a20c:	d1f5      	bne.n	800a1fa <_malloc_r+0x43e>
 800a20e:	6873      	ldr	r3, [r6, #4]
 800a210:	ea23 0301 	bic.w	r3, r3, r1
 800a214:	6073      	str	r3, [r6, #4]
 800a216:	0049      	lsls	r1, r1, #1
 800a218:	f43f ae3a 	beq.w	8009e90 <_malloc_r+0xd4>
 800a21c:	4299      	cmp	r1, r3
 800a21e:	d903      	bls.n	800a228 <_malloc_r+0x46c>
 800a220:	e636      	b.n	8009e90 <_malloc_r+0xd4>
 800a222:	0049      	lsls	r1, r1, #1
 800a224:	f108 0804 	add.w	r8, r8, #4
 800a228:	4219      	tst	r1, r3
 800a22a:	d0fa      	beq.n	800a222 <_malloc_r+0x466>
 800a22c:	4640      	mov	r0, r8
 800a22e:	e708      	b.n	800a042 <_malloc_r+0x286>
 800a230:	68b7      	ldr	r7, [r6, #8]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	e6b4      	b.n	8009fa0 <_malloc_r+0x1e4>
 800a236:	f3cb 000b 	ubfx	r0, fp, #0, #12
 800a23a:	2800      	cmp	r0, #0
 800a23c:	f47f ae5b 	bne.w	8009ef6 <_malloc_r+0x13a>
 800a240:	44c8      	add	r8, r9
 800a242:	68b7      	ldr	r7, [r6, #8]
 800a244:	f048 0301 	orr.w	r3, r8, #1
 800a248:	607b      	str	r3, [r7, #4]
 800a24a:	e69f      	b.n	8009f8c <_malloc_r+0x1d0>
 800a24c:	f8c3 a000 	str.w	sl, [r3]
 800a250:	e659      	b.n	8009f06 <_malloc_r+0x14a>
 800a252:	f108 0810 	add.w	r8, r8, #16
 800a256:	e638      	b.n	8009eca <_malloc_r+0x10e>
 800a258:	1092      	asrs	r2, r2, #2
 800a25a:	2101      	movs	r1, #1
 800a25c:	4091      	lsls	r1, r2
 800a25e:	6872      	ldr	r2, [r6, #4]
 800a260:	430a      	orrs	r2, r1
 800a262:	6072      	str	r2, [r6, #4]
 800a264:	e77d      	b.n	800a162 <_malloc_r+0x3a6>
 800a266:	eb0a 0108 	add.w	r1, sl, r8
 800a26a:	4628      	mov	r0, r5
 800a26c:	9301      	str	r3, [sp, #4]
 800a26e:	4249      	negs	r1, r1
 800a270:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
 800a274:	4659      	mov	r1, fp
 800a276:	f000 f8b9 	bl	800a3ec <_sbrk_r>
 800a27a:	1c43      	adds	r3, r0, #1
 800a27c:	4a2b      	ldr	r2, [pc, #172]	; (800a32c <_malloc_r+0x570>)
 800a27e:	9b01      	ldr	r3, [sp, #4]
 800a280:	f47f ae5a 	bne.w	8009f38 <_malloc_r+0x17c>
 800a284:	469b      	mov	fp, r3
 800a286:	e65b      	b.n	8009f40 <_malloc_r+0x184>
 800a288:	2a54      	cmp	r2, #84	; 0x54
 800a28a:	d815      	bhi.n	800a2b8 <_malloc_r+0x4fc>
 800a28c:	0b0a      	lsrs	r2, r1, #12
 800a28e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800a292:	326e      	adds	r2, #110	; 0x6e
 800a294:	00ff      	lsls	r7, r7, #3
 800a296:	e751      	b.n	800a13c <_malloc_r+0x380>
 800a298:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a29c:	d815      	bhi.n	800a2ca <_malloc_r+0x50e>
 800a29e:	0be3      	lsrs	r3, r4, #15
 800a2a0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800a2a4:	f103 0777 	add.w	r7, r3, #119	; 0x77
 800a2a8:	00c3      	lsls	r3, r0, #3
 800a2aa:	e5ce      	b.n	8009e4a <_malloc_r+0x8e>
 800a2ac:	4657      	mov	r7, sl
 800a2ae:	e66d      	b.n	8009f8c <_malloc_r+0x1d0>
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f8ca 3004 	str.w	r3, [sl, #4]
 800a2b6:	e67c      	b.n	8009fb2 <_malloc_r+0x1f6>
 800a2b8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a2bc:	d821      	bhi.n	800a302 <_malloc_r+0x546>
 800a2be:	0bca      	lsrs	r2, r1, #15
 800a2c0:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800a2c4:	3277      	adds	r2, #119	; 0x77
 800a2c6:	00ff      	lsls	r7, r7, #3
 800a2c8:	e738      	b.n	800a13c <_malloc_r+0x380>
 800a2ca:	f240 5254 	movw	r2, #1364	; 0x554
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d821      	bhi.n	800a316 <_malloc_r+0x55a>
 800a2d2:	0ca3      	lsrs	r3, r4, #18
 800a2d4:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800a2d8:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 800a2dc:	00c3      	lsls	r3, r0, #3
 800a2de:	e5b4      	b.n	8009e4a <_malloc_r+0x8e>
 800a2e0:	f107 0108 	add.w	r1, r7, #8
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 f937 	bl	800a558 <_free_r>
 800a2ea:	68b7      	ldr	r7, [r6, #8]
 800a2ec:	4a0f      	ldr	r2, [pc, #60]	; (800a32c <_malloc_r+0x570>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6811      	ldr	r1, [r2, #0]
 800a2f2:	e64b      	b.n	8009f8c <_malloc_r+0x1d0>
 800a2f4:	3b08      	subs	r3, #8
 800a2f6:	f04f 0b00 	mov.w	fp, #0
 800a2fa:	4498      	add	r8, r3
 800a2fc:	eba8 080a 	sub.w	r8, r8, sl
 800a300:	e61e      	b.n	8009f40 <_malloc_r+0x184>
 800a302:	f240 5754 	movw	r7, #1364	; 0x554
 800a306:	42ba      	cmp	r2, r7
 800a308:	d80a      	bhi.n	800a320 <_malloc_r+0x564>
 800a30a:	0c8a      	lsrs	r2, r1, #18
 800a30c:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800a310:	327c      	adds	r2, #124	; 0x7c
 800a312:	00ff      	lsls	r7, r7, #3
 800a314:	e712      	b.n	800a13c <_malloc_r+0x380>
 800a316:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800a31a:	207f      	movs	r0, #127	; 0x7f
 800a31c:	277e      	movs	r7, #126	; 0x7e
 800a31e:	e594      	b.n	8009e4a <_malloc_r+0x8e>
 800a320:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800a324:	227e      	movs	r2, #126	; 0x7e
 800a326:	e709      	b.n	800a13c <_malloc_r+0x380>
 800a328:	6873      	ldr	r3, [r6, #4]
 800a32a:	e774      	b.n	800a216 <_malloc_r+0x45a>
 800a32c:	20000c98 	.word	0x20000c98

0800a330 <memset>:
 800a330:	b570      	push	{r4, r5, r6, lr}
 800a332:	0786      	lsls	r6, r0, #30
 800a334:	d048      	beq.n	800a3c8 <memset+0x98>
 800a336:	1e54      	subs	r4, r2, #1
 800a338:	2a00      	cmp	r2, #0
 800a33a:	d03f      	beq.n	800a3bc <memset+0x8c>
 800a33c:	b2ca      	uxtb	r2, r1
 800a33e:	4603      	mov	r3, r0
 800a340:	e001      	b.n	800a346 <memset+0x16>
 800a342:	3c01      	subs	r4, #1
 800a344:	d33a      	bcc.n	800a3bc <memset+0x8c>
 800a346:	f803 2b01 	strb.w	r2, [r3], #1
 800a34a:	079d      	lsls	r5, r3, #30
 800a34c:	d1f9      	bne.n	800a342 <memset+0x12>
 800a34e:	2c03      	cmp	r4, #3
 800a350:	d92d      	bls.n	800a3ae <memset+0x7e>
 800a352:	b2cd      	uxtb	r5, r1
 800a354:	2c0f      	cmp	r4, #15
 800a356:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800a35a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800a35e:	d936      	bls.n	800a3ce <memset+0x9e>
 800a360:	f1a4 0c10 	sub.w	ip, r4, #16
 800a364:	f103 0e20 	add.w	lr, r3, #32
 800a368:	f103 0210 	add.w	r2, r3, #16
 800a36c:	f02c 060f 	bic.w	r6, ip, #15
 800a370:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800a374:	44b6      	add	lr, r6
 800a376:	e942 5504 	strd	r5, r5, [r2, #-16]
 800a37a:	e942 5502 	strd	r5, r5, [r2, #-8]
 800a37e:	3210      	adds	r2, #16
 800a380:	4572      	cmp	r2, lr
 800a382:	d1f8      	bne.n	800a376 <memset+0x46>
 800a384:	f10c 0201 	add.w	r2, ip, #1
 800a388:	f014 0f0c 	tst.w	r4, #12
 800a38c:	f004 0c0f 	and.w	ip, r4, #15
 800a390:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800a394:	d013      	beq.n	800a3be <memset+0x8e>
 800a396:	f1ac 0304 	sub.w	r3, ip, #4
 800a39a:	f023 0303 	bic.w	r3, r3, #3
 800a39e:	3304      	adds	r3, #4
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f842 5b04 	str.w	r5, [r2], #4
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d1fb      	bne.n	800a3a2 <memset+0x72>
 800a3aa:	f00c 0403 	and.w	r4, ip, #3
 800a3ae:	b12c      	cbz	r4, 800a3bc <memset+0x8c>
 800a3b0:	b2ca      	uxtb	r2, r1
 800a3b2:	441c      	add	r4, r3
 800a3b4:	f803 2b01 	strb.w	r2, [r3], #1
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d1fb      	bne.n	800a3b4 <memset+0x84>
 800a3bc:	bd70      	pop	{r4, r5, r6, pc}
 800a3be:	4664      	mov	r4, ip
 800a3c0:	4613      	mov	r3, r2
 800a3c2:	2c00      	cmp	r4, #0
 800a3c4:	d1f4      	bne.n	800a3b0 <memset+0x80>
 800a3c6:	e7f9      	b.n	800a3bc <memset+0x8c>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	4614      	mov	r4, r2
 800a3cc:	e7bf      	b.n	800a34e <memset+0x1e>
 800a3ce:	461a      	mov	r2, r3
 800a3d0:	46a4      	mov	ip, r4
 800a3d2:	e7e0      	b.n	800a396 <memset+0x66>

0800a3d4 <__malloc_lock>:
 800a3d4:	4801      	ldr	r0, [pc, #4]	; (800a3dc <__malloc_lock+0x8>)
 800a3d6:	f000 b9c5 	b.w	800a764 <__retarget_lock_acquire_recursive>
 800a3da:	bf00      	nop
 800a3dc:	20000cd0 	.word	0x20000cd0

0800a3e0 <__malloc_unlock>:
 800a3e0:	4801      	ldr	r0, [pc, #4]	; (800a3e8 <__malloc_unlock+0x8>)
 800a3e2:	f000 b9c1 	b.w	800a768 <__retarget_lock_release_recursive>
 800a3e6:	bf00      	nop
 800a3e8:	20000cd0 	.word	0x20000cd0

0800a3ec <_sbrk_r>:
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4d06      	ldr	r5, [pc, #24]	; (800a40c <_sbrk_r+0x20>)
 800a3f2:	4604      	mov	r4, r0
 800a3f4:	4608      	mov	r0, r1
 800a3f6:	602a      	str	r2, [r5, #0]
 800a3f8:	f000 fa00 	bl	800a7fc <_sbrk>
 800a3fc:	1c43      	adds	r3, r0, #1
 800a3fe:	d000      	beq.n	800a402 <_sbrk_r+0x16>
 800a400:	bd38      	pop	{r3, r4, r5, pc}
 800a402:	682b      	ldr	r3, [r5, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d0fb      	beq.n	800a400 <_sbrk_r+0x14>
 800a408:	6023      	str	r3, [r4, #0]
 800a40a:	bd38      	pop	{r3, r4, r5, pc}
 800a40c:	20000cd4 	.word	0x20000cd4

0800a410 <strlen>:
 800a410:	f020 0103 	bic.w	r1, r0, #3
 800a414:	f010 0003 	ands.w	r0, r0, #3
 800a418:	f1c0 0000 	rsb	r0, r0, #0
 800a41c:	f851 3b04 	ldr.w	r3, [r1], #4
 800a420:	f100 0c04 	add.w	ip, r0, #4
 800a424:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800a428:	f06f 0200 	mvn.w	r2, #0
 800a42c:	bf1c      	itt	ne
 800a42e:	fa22 f20c 	lsrne.w	r2, r2, ip
 800a432:	4313      	orrne	r3, r2
 800a434:	f04f 0c01 	mov.w	ip, #1
 800a438:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800a43c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800a440:	eba3 020c 	sub.w	r2, r3, ip
 800a444:	ea22 0203 	bic.w	r2, r2, r3
 800a448:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800a44c:	bf04      	itt	eq
 800a44e:	f851 3b04 	ldreq.w	r3, [r1], #4
 800a452:	3004      	addeq	r0, #4
 800a454:	d0f4      	beq.n	800a440 <strlen+0x30>
 800a456:	f1c2 0100 	rsb	r1, r2, #0
 800a45a:	ea02 0201 	and.w	r2, r2, r1
 800a45e:	fab2 f282 	clz	r2, r2
 800a462:	f1c2 021f 	rsb	r2, r2, #31
 800a466:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800a46a:	4770      	bx	lr

0800a46c <register_fini>:
 800a46c:	4b02      	ldr	r3, [pc, #8]	; (800a478 <register_fini+0xc>)
 800a46e:	b113      	cbz	r3, 800a476 <register_fini+0xa>
 800a470:	4802      	ldr	r0, [pc, #8]	; (800a47c <register_fini+0x10>)
 800a472:	f000 b805 	b.w	800a480 <atexit>
 800a476:	4770      	bx	lr
 800a478:	00000000 	.word	0x00000000
 800a47c:	0800a48d 	.word	0x0800a48d

0800a480 <atexit>:
 800a480:	2300      	movs	r3, #0
 800a482:	4601      	mov	r1, r0
 800a484:	461a      	mov	r2, r3
 800a486:	4618      	mov	r0, r3
 800a488:	f000 b970 	b.w	800a76c <__register_exitproc>

0800a48c <__libc_fini_array>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4b08      	ldr	r3, [pc, #32]	; (800a4b0 <__libc_fini_array+0x24>)
 800a490:	4d08      	ldr	r5, [pc, #32]	; (800a4b4 <__libc_fini_array+0x28>)
 800a492:	1b5b      	subs	r3, r3, r5
 800a494:	109c      	asrs	r4, r3, #2
 800a496:	d007      	beq.n	800a4a8 <__libc_fini_array+0x1c>
 800a498:	3b04      	subs	r3, #4
 800a49a:	441d      	add	r5, r3
 800a49c:	3c01      	subs	r4, #1
 800a49e:	f855 3904 	ldr.w	r3, [r5], #-4
 800a4a2:	4798      	blx	r3
 800a4a4:	2c00      	cmp	r4, #0
 800a4a6:	d1f9      	bne.n	800a49c <__libc_fini_array+0x10>
 800a4a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4ac:	f000 b9bc 	b.w	800a828 <_fini>
 800a4b0:	08019e78 	.word	0x08019e78
 800a4b4:	08019e74 	.word	0x08019e74

0800a4b8 <_malloc_trim_r>:
 800a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ba:	4f23      	ldr	r7, [pc, #140]	; (800a548 <_malloc_trim_r+0x90>)
 800a4bc:	460c      	mov	r4, r1
 800a4be:	4606      	mov	r6, r0
 800a4c0:	f7ff ff88 	bl	800a3d4 <__malloc_lock>
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	f640 73ef 	movw	r3, #4079	; 0xfef
 800a4ca:	6855      	ldr	r5, [r2, #4]
 800a4cc:	1b1b      	subs	r3, r3, r4
 800a4ce:	4c1f      	ldr	r4, [pc, #124]	; (800a54c <_malloc_trim_r+0x94>)
 800a4d0:	f025 0503 	bic.w	r5, r5, #3
 800a4d4:	442b      	add	r3, r5
 800a4d6:	401c      	ands	r4, r3
 800a4d8:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 800a4dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800a4e0:	db07      	blt.n	800a4f2 <_malloc_trim_r+0x3a>
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff ff81 	bl	800a3ec <_sbrk_r>
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	442b      	add	r3, r5
 800a4ee:	4298      	cmp	r0, r3
 800a4f0:	d004      	beq.n	800a4fc <_malloc_trim_r+0x44>
 800a4f2:	4630      	mov	r0, r6
 800a4f4:	f7ff ff74 	bl	800a3e0 <__malloc_unlock>
 800a4f8:	2000      	movs	r0, #0
 800a4fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4fc:	4261      	negs	r1, r4
 800a4fe:	4630      	mov	r0, r6
 800a500:	f7ff ff74 	bl	800a3ec <_sbrk_r>
 800a504:	3001      	adds	r0, #1
 800a506:	d00d      	beq.n	800a524 <_malloc_trim_r+0x6c>
 800a508:	1b2d      	subs	r5, r5, r4
 800a50a:	4b11      	ldr	r3, [pc, #68]	; (800a550 <_malloc_trim_r+0x98>)
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	4630      	mov	r0, r6
 800a510:	f045 0501 	orr.w	r5, r5, #1
 800a514:	6055      	str	r5, [r2, #4]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	1b12      	subs	r2, r2, r4
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	f7ff ff60 	bl	800a3e0 <__malloc_unlock>
 800a520:	2001      	movs	r0, #1
 800a522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a524:	2100      	movs	r1, #0
 800a526:	4630      	mov	r0, r6
 800a528:	f7ff ff60 	bl	800a3ec <_sbrk_r>
 800a52c:	68ba      	ldr	r2, [r7, #8]
 800a52e:	1a83      	subs	r3, r0, r2
 800a530:	2b0f      	cmp	r3, #15
 800a532:	ddde      	ble.n	800a4f2 <_malloc_trim_r+0x3a>
 800a534:	f043 0301 	orr.w	r3, r3, #1
 800a538:	4905      	ldr	r1, [pc, #20]	; (800a550 <_malloc_trim_r+0x98>)
 800a53a:	6053      	str	r3, [r2, #4]
 800a53c:	4b05      	ldr	r3, [pc, #20]	; (800a554 <_malloc_trim_r+0x9c>)
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	1ac0      	subs	r0, r0, r3
 800a542:	6008      	str	r0, [r1, #0]
 800a544:	e7d5      	b.n	800a4f2 <_malloc_trim_r+0x3a>
 800a546:	bf00      	nop
 800a548:	20000438 	.word	0x20000438
 800a54c:	fffff000 	.word	0xfffff000
 800a550:	20000c98 	.word	0x20000c98
 800a554:	20000840 	.word	0x20000840

0800a558 <_free_r>:
 800a558:	2900      	cmp	r1, #0
 800a55a:	d061      	beq.n	800a620 <_free_r+0xc8>
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	460c      	mov	r4, r1
 800a560:	4606      	mov	r6, r0
 800a562:	f7ff ff37 	bl	800a3d4 <__malloc_lock>
 800a566:	4f7c      	ldr	r7, [pc, #496]	; (800a758 <_free_r+0x200>)
 800a568:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800a56c:	f1a4 0508 	sub.w	r5, r4, #8
 800a570:	68b8      	ldr	r0, [r7, #8]
 800a572:	f022 0101 	bic.w	r1, r2, #1
 800a576:	eb05 0c01 	add.w	ip, r5, r1
 800a57a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a57e:	4560      	cmp	r0, ip
 800a580:	f023 0303 	bic.w	r3, r3, #3
 800a584:	f000 808b 	beq.w	800a69e <_free_r+0x146>
 800a588:	07d2      	lsls	r2, r2, #31
 800a58a:	f8cc 3004 	str.w	r3, [ip, #4]
 800a58e:	d432      	bmi.n	800a5f6 <_free_r+0x9e>
 800a590:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800a594:	f107 0008 	add.w	r0, r7, #8
 800a598:	1aad      	subs	r5, r5, r2
 800a59a:	4411      	add	r1, r2
 800a59c:	68aa      	ldr	r2, [r5, #8]
 800a59e:	4282      	cmp	r2, r0
 800a5a0:	d06a      	beq.n	800a678 <_free_r+0x120>
 800a5a2:	eb0c 0403 	add.w	r4, ip, r3
 800a5a6:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800a5aa:	68ec      	ldr	r4, [r5, #12]
 800a5ac:	f01e 0f01 	tst.w	lr, #1
 800a5b0:	60d4      	str	r4, [r2, #12]
 800a5b2:	60a2      	str	r2, [r4, #8]
 800a5b4:	f000 8097 	beq.w	800a6e6 <_free_r+0x18e>
 800a5b8:	f041 0301 	orr.w	r3, r1, #1
 800a5bc:	606b      	str	r3, [r5, #4]
 800a5be:	f8cc 1000 	str.w	r1, [ip]
 800a5c2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a5c6:	d235      	bcs.n	800a634 <_free_r+0xdc>
 800a5c8:	094a      	lsrs	r2, r1, #5
 800a5ca:	08cb      	lsrs	r3, r1, #3
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	4091      	lsls	r1, r2
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	4311      	orrs	r1, r2
 800a5d6:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 800a5da:	6079      	str	r1, [r7, #4]
 800a5dc:	3a08      	subs	r2, #8
 800a5de:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 800a5e2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800a5e6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 800a5ea:	60cd      	str	r5, [r1, #12]
 800a5ec:	4630      	mov	r0, r6
 800a5ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5f2:	f7ff bef5 	b.w	800a3e0 <__malloc_unlock>
 800a5f6:	eb0c 0203 	add.w	r2, ip, r3
 800a5fa:	6852      	ldr	r2, [r2, #4]
 800a5fc:	07d0      	lsls	r0, r2, #31
 800a5fe:	d410      	bmi.n	800a622 <_free_r+0xca>
 800a600:	4419      	add	r1, r3
 800a602:	f107 0008 	add.w	r0, r7, #8
 800a606:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800a60a:	4283      	cmp	r3, r0
 800a60c:	d073      	beq.n	800a6f6 <_free_r+0x19e>
 800a60e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800a612:	60da      	str	r2, [r3, #12]
 800a614:	6093      	str	r3, [r2, #8]
 800a616:	f041 0301 	orr.w	r3, r1, #1
 800a61a:	606b      	str	r3, [r5, #4]
 800a61c:	5069      	str	r1, [r5, r1]
 800a61e:	e7d0      	b.n	800a5c2 <_free_r+0x6a>
 800a620:	4770      	bx	lr
 800a622:	f041 0301 	orr.w	r3, r1, #1
 800a626:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a62a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a62e:	f8cc 1000 	str.w	r1, [ip]
 800a632:	d3c9      	bcc.n	800a5c8 <_free_r+0x70>
 800a634:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800a638:	ea4f 2351 	mov.w	r3, r1, lsr #9
 800a63c:	d248      	bcs.n	800a6d0 <_free_r+0x178>
 800a63e:	098b      	lsrs	r3, r1, #6
 800a640:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800a644:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a648:	00c3      	lsls	r3, r0, #3
 800a64a:	18f8      	adds	r0, r7, r3
 800a64c:	58fb      	ldr	r3, [r7, r3]
 800a64e:	3808      	subs	r0, #8
 800a650:	4298      	cmp	r0, r3
 800a652:	d059      	beq.n	800a708 <_free_r+0x1b0>
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	f022 0203 	bic.w	r2, r2, #3
 800a65a:	428a      	cmp	r2, r1
 800a65c:	d902      	bls.n	800a664 <_free_r+0x10c>
 800a65e:	689b      	ldr	r3, [r3, #8]
 800a660:	4298      	cmp	r0, r3
 800a662:	d1f7      	bne.n	800a654 <_free_r+0xfc>
 800a664:	68d8      	ldr	r0, [r3, #12]
 800a666:	e9c5 3002 	strd	r3, r0, [r5, #8]
 800a66a:	6085      	str	r5, [r0, #8]
 800a66c:	4630      	mov	r0, r6
 800a66e:	60dd      	str	r5, [r3, #12]
 800a670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a674:	f7ff beb4 	b.w	800a3e0 <__malloc_unlock>
 800a678:	eb0c 0203 	add.w	r2, ip, r3
 800a67c:	6852      	ldr	r2, [r2, #4]
 800a67e:	07d2      	lsls	r2, r2, #31
 800a680:	d463      	bmi.n	800a74a <_free_r+0x1f2>
 800a682:	440b      	add	r3, r1
 800a684:	4630      	mov	r0, r6
 800a686:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 800a68a:	60ca      	str	r2, [r1, #12]
 800a68c:	6091      	str	r1, [r2, #8]
 800a68e:	f043 0201 	orr.w	r2, r3, #1
 800a692:	606a      	str	r2, [r5, #4]
 800a694:	50eb      	str	r3, [r5, r3]
 800a696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a69a:	f7ff bea1 	b.w	800a3e0 <__malloc_unlock>
 800a69e:	440b      	add	r3, r1
 800a6a0:	07d1      	lsls	r1, r2, #31
 800a6a2:	d407      	bmi.n	800a6b4 <_free_r+0x15c>
 800a6a4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800a6a8:	1aad      	subs	r5, r5, r2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 800a6b0:	60ca      	str	r2, [r1, #12]
 800a6b2:	6091      	str	r1, [r2, #8]
 800a6b4:	f043 0201 	orr.w	r2, r3, #1
 800a6b8:	606a      	str	r2, [r5, #4]
 800a6ba:	4a28      	ldr	r2, [pc, #160]	; (800a75c <_free_r+0x204>)
 800a6bc:	60bd      	str	r5, [r7, #8]
 800a6be:	6812      	ldr	r2, [r2, #0]
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d893      	bhi.n	800a5ec <_free_r+0x94>
 800a6c4:	4b26      	ldr	r3, [pc, #152]	; (800a760 <_free_r+0x208>)
 800a6c6:	4630      	mov	r0, r6
 800a6c8:	6819      	ldr	r1, [r3, #0]
 800a6ca:	f7ff fef5 	bl	800a4b8 <_malloc_trim_r>
 800a6ce:	e78d      	b.n	800a5ec <_free_r+0x94>
 800a6d0:	2b14      	cmp	r3, #20
 800a6d2:	d90a      	bls.n	800a6ea <_free_r+0x192>
 800a6d4:	2b54      	cmp	r3, #84	; 0x54
 800a6d6:	d81f      	bhi.n	800a718 <_free_r+0x1c0>
 800a6d8:	0b0b      	lsrs	r3, r1, #12
 800a6da:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800a6de:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800a6e2:	00c3      	lsls	r3, r0, #3
 800a6e4:	e7b1      	b.n	800a64a <_free_r+0xf2>
 800a6e6:	4419      	add	r1, r3
 800a6e8:	e78d      	b.n	800a606 <_free_r+0xae>
 800a6ea:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800a6ee:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800a6f2:	00c3      	lsls	r3, r0, #3
 800a6f4:	e7a9      	b.n	800a64a <_free_r+0xf2>
 800a6f6:	f041 0301 	orr.w	r3, r1, #1
 800a6fa:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800a6fe:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800a702:	606b      	str	r3, [r5, #4]
 800a704:	5069      	str	r1, [r5, r1]
 800a706:	e771      	b.n	800a5ec <_free_r+0x94>
 800a708:	2101      	movs	r1, #1
 800a70a:	1092      	asrs	r2, r2, #2
 800a70c:	fa01 f202 	lsl.w	r2, r1, r2
 800a710:	6879      	ldr	r1, [r7, #4]
 800a712:	430a      	orrs	r2, r1
 800a714:	607a      	str	r2, [r7, #4]
 800a716:	e7a6      	b.n	800a666 <_free_r+0x10e>
 800a718:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a71c:	d806      	bhi.n	800a72c <_free_r+0x1d4>
 800a71e:	0bcb      	lsrs	r3, r1, #15
 800a720:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800a724:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800a728:	00c3      	lsls	r3, r0, #3
 800a72a:	e78e      	b.n	800a64a <_free_r+0xf2>
 800a72c:	f240 5254 	movw	r2, #1364	; 0x554
 800a730:	4293      	cmp	r3, r2
 800a732:	d806      	bhi.n	800a742 <_free_r+0x1ea>
 800a734:	0c8b      	lsrs	r3, r1, #18
 800a736:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800a73a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800a73e:	00c3      	lsls	r3, r0, #3
 800a740:	e783      	b.n	800a64a <_free_r+0xf2>
 800a742:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800a746:	227e      	movs	r2, #126	; 0x7e
 800a748:	e77f      	b.n	800a64a <_free_r+0xf2>
 800a74a:	f041 0301 	orr.w	r3, r1, #1
 800a74e:	606b      	str	r3, [r5, #4]
 800a750:	f8cc 1000 	str.w	r1, [ip]
 800a754:	e74a      	b.n	800a5ec <_free_r+0x94>
 800a756:	bf00      	nop
 800a758:	20000438 	.word	0x20000438
 800a75c:	20000844 	.word	0x20000844
 800a760:	20000cc8 	.word	0x20000cc8

0800a764 <__retarget_lock_acquire_recursive>:
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop

0800a768 <__retarget_lock_release_recursive>:
 800a768:	4770      	bx	lr
 800a76a:	bf00      	nop

0800a76c <__register_exitproc>:
 800a76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a770:	f8df a084 	ldr.w	sl, [pc, #132]	; 800a7f8 <__register_exitproc+0x8c>
 800a774:	4606      	mov	r6, r0
 800a776:	4698      	mov	r8, r3
 800a778:	460f      	mov	r7, r1
 800a77a:	f8da 0000 	ldr.w	r0, [sl]
 800a77e:	4691      	mov	r9, r2
 800a780:	f7ff fff0 	bl	800a764 <__retarget_lock_acquire_recursive>
 800a784:	4b1b      	ldr	r3, [pc, #108]	; (800a7f4 <__register_exitproc+0x88>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800a78c:	b334      	cbz	r4, 800a7dc <__register_exitproc+0x70>
 800a78e:	6865      	ldr	r5, [r4, #4]
 800a790:	2d1f      	cmp	r5, #31
 800a792:	dc28      	bgt.n	800a7e6 <__register_exitproc+0x7a>
 800a794:	b95e      	cbnz	r6, 800a7ae <__register_exitproc+0x42>
 800a796:	1c6b      	adds	r3, r5, #1
 800a798:	3502      	adds	r5, #2
 800a79a:	f8da 0000 	ldr.w	r0, [sl]
 800a79e:	6063      	str	r3, [r4, #4]
 800a7a0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800a7a4:	f7ff ffe0 	bl	800a768 <__retarget_lock_release_recursive>
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ae:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	2e02      	cmp	r6, #2
 800a7b6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800a7ba:	fa03 f305 	lsl.w	r3, r3, r5
 800a7be:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800a7c2:	ea42 0203 	orr.w	r2, r2, r3
 800a7c6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800a7ca:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800a7ce:	d1e2      	bne.n	800a796 <__register_exitproc+0x2a>
 800a7d0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 800a7d4:	4313      	orrs	r3, r2
 800a7d6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800a7da:	e7dc      	b.n	800a796 <__register_exitproc+0x2a>
 800a7dc:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800a7e0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800a7e4:	e7d3      	b.n	800a78e <__register_exitproc+0x22>
 800a7e6:	f8da 0000 	ldr.w	r0, [sl]
 800a7ea:	f7ff ffbd 	bl	800a768 <__retarget_lock_release_recursive>
 800a7ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7f2:	e7da      	b.n	800a7aa <__register_exitproc+0x3e>
 800a7f4:	08019e60 	.word	0x08019e60
 800a7f8:	20000848 	.word	0x20000848

0800a7fc <_sbrk>:
 800a7fc:	4a05      	ldr	r2, [pc, #20]	; (800a814 <_sbrk+0x18>)
 800a7fe:	4603      	mov	r3, r0
 800a800:	6810      	ldr	r0, [r2, #0]
 800a802:	b110      	cbz	r0, 800a80a <_sbrk+0xe>
 800a804:	4403      	add	r3, r0
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	4770      	bx	lr
 800a80a:	4803      	ldr	r0, [pc, #12]	; (800a818 <_sbrk+0x1c>)
 800a80c:	4403      	add	r3, r0
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20000cd8 	.word	0x20000cd8
 800a818:	20000ce0 	.word	0x20000ce0

0800a81c <_init>:
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	bf00      	nop
 800a820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a822:	bc08      	pop	{r3}
 800a824:	469e      	mov	lr, r3
 800a826:	4770      	bx	lr

0800a828 <_fini>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	bf00      	nop
 800a82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82e:	bc08      	pop	{r3}
 800a830:	469e      	mov	lr, r3
 800a832:	4770      	bx	lr
