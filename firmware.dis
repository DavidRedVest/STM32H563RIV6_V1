
firmware.elf:     file format elf32-littlearm


Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	e000      	b.n	8000262 <__do_global_dtors_aux+0x12>
 8000260:	bf00      	nop
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000644 	.word	0x20000644
 800026c:	00000000 	.word	0x00000000
 8000270:	08010970 	.word	0x08010970

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	e000      	b.n	8000282 <frame_dummy+0xe>
 8000280:	bf00      	nop
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000648 	.word	0x20000648
 800028c:	08010970 	.word	0x08010970

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_ldivmod>:
 8000b8c:	b97b      	cbnz	r3, 8000bae <__aeabi_ldivmod+0x22>
 8000b8e:	b972      	cbnz	r2, 8000bae <__aeabi_ldivmod+0x22>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bfbe      	ittt	lt
 8000b94:	2000      	movlt	r0, #0
 8000b96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b9a:	e006      	blt.n	8000baa <__aeabi_ldivmod+0x1e>
 8000b9c:	bf08      	it	eq
 8000b9e:	2800      	cmpeq	r0, #0
 8000ba0:	bf1c      	itt	ne
 8000ba2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000baa:	f000 ba03 	b.w	8000fb4 <__aeabi_idiv0>
 8000bae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	db09      	blt.n	8000bce <__aeabi_ldivmod+0x42>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db1a      	blt.n	8000bf4 <__aeabi_ldivmod+0x68>
 8000bbe:	f000 f883 	bl	8000cc8 <__udivmoddi4>
 8000bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bca:	b004      	add	sp, #16
 8000bcc:	4770      	bx	lr
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db1b      	blt.n	8000c10 <__aeabi_ldivmod+0x84>
 8000bd8:	f000 f876 	bl	8000cc8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	4252      	negs	r2, r2
 8000bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf2:	4770      	bx	lr
 8000bf4:	4252      	negs	r2, r2
 8000bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfa:	f000 f865 	bl	8000cc8 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4240      	negs	r0, r0
 8000c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f857 	bl	8000cc8 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4252      	negs	r2, r2
 8000c26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 b9b8 	b.w	8000fb4 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff41 	bl	8000aec <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcb7 	bl	8000608 <__aeabi_dmul>
 8000c9a:	f000 f98d 	bl	8000fb8 <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc38 	bl	8000514 <__aeabi_ui2d>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca8:	f7ff fcae 	bl	8000608 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf0 	bl	8000298 <__aeabi_dsub>
 8000cb8:	f000 f97e 	bl	8000fb8 <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d148      	bne.n	8000d68 <__udivmoddi4+0xa0>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d961      	bls.n	8000da0 <__udivmoddi4+0xd8>
 8000cdc:	fab2 f382 	clz	r3, r2
 8000ce0:	b143      	cbz	r3, 8000cf4 <__udivmoddi4+0x2c>
 8000ce2:	f1c3 0120 	rsb	r1, r3, #32
 8000ce6:	409f      	lsls	r7, r3
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	409c      	lsls	r4, r3
 8000cee:	fa20 f101 	lsr.w	r1, r0, r1
 8000cf2:	430f      	orrs	r7, r1
 8000cf4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d02:	fb01 7716 	mls	r7, r1, r6, r7
 8000d06:	fb06 f00e 	mul.w	r0, r6, lr
 8000d0a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x5c>
 8000d12:	eb1c 0202 	adds.w	r2, ip, r2
 8000d16:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x5a>
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f200 8137 	bhi.w	8000f90 <__udivmoddi4+0x2c8>
 8000d22:	463e      	mov	r6, r7
 8000d24:	1a12      	subs	r2, r2, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d2c:	fb01 2210 	mls	r2, r1, r0, r2
 8000d30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x86>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x84>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 811c 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	2600      	movs	r6, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0x9a>
 8000d5a:	40dc      	lsrs	r4, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e9c5 4300 	strd	r4, r3, [r5]
 8000d62:	4631      	mov	r1, r6
 8000d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0xb8>
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	f000 80fd 	beq.w	8000f6c <__udivmoddi4+0x2a4>
 8000d72:	2600      	movs	r6, #0
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	4630      	mov	r0, r6
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d80:	fab3 f683 	clz	r6, r3
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d14b      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	f0c0 80f2 	bcc.w	8000f72 <__udivmoddi4+0x2aa>
 8000d8e:	4282      	cmp	r2, r0
 8000d90:	f240 80ef 	bls.w	8000f72 <__udivmoddi4+0x2aa>
 8000d94:	4630      	mov	r0, r6
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e3      	beq.n	8000d62 <__udivmoddi4+0x9a>
 8000d9a:	e9c5 4700 	strd	r4, r7, [r5]
 8000d9e:	e7e0      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xdc>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f382 	clz	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 809d 	bne.w	8000ee8 <__udivmoddi4+0x220>
 8000dae:	1a89      	subs	r1, r1, r2
 8000db0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000db4:	b297      	uxth	r7, r2
 8000db6:	2601      	movs	r6, #1
 8000db8:	0c20      	lsrs	r0, r4, #16
 8000dba:	fbb1 f2fe 	udiv	r2, r1, lr
 8000dbe:	fb0e 1112 	mls	r1, lr, r2, r1
 8000dc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc6:	fb07 f002 	mul.w	r0, r7, r2
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d90f      	bls.n	8000dee <__udivmoddi4+0x126>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000dd6:	bf2c      	ite	cs
 8000dd8:	f04f 0901 	movcs.w	r9, #1
 8000ddc:	f04f 0900 	movcc.w	r9, #0
 8000de0:	4288      	cmp	r0, r1
 8000de2:	d903      	bls.n	8000dec <__udivmoddi4+0x124>
 8000de4:	f1b9 0f00 	cmp.w	r9, #0
 8000de8:	f000 80cf 	beq.w	8000f8a <__udivmoddi4+0x2c2>
 8000dec:	4642      	mov	r2, r8
 8000dee:	1a09      	subs	r1, r1, r0
 8000df0:	b2a4      	uxth	r4, r4
 8000df2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfa:	fb00 f707 	mul.w	r7, r0, r7
 8000dfe:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e02:	42a7      	cmp	r7, r4
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x150>
 8000e06:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14e>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f200 80b4 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e16:	4608      	mov	r0, r1
 8000e18:	1be4      	subs	r4, r4, r7
 8000e1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e1e:	e79b      	b.n	8000d58 <__udivmoddi4+0x90>
 8000e20:	f1c6 0720 	rsb	r7, r6, #32
 8000e24:	40b3      	lsls	r3, r6
 8000e26:	fa01 f406 	lsl.w	r4, r1, r6
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	40f9      	lsrs	r1, r7
 8000e30:	40b2      	lsls	r2, r6
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	fb09 1118 	mls	r1, r9, r8, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb08 f00e 	mul.w	r0, r8, lr
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d90f      	bls.n	8000e7e <__udivmoddi4+0x1b6>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0b01 	movcs.w	fp, #1
 8000e6c:	f04f 0b00 	movcc.w	fp, #0
 8000e70:	4288      	cmp	r0, r1
 8000e72:	d903      	bls.n	8000e7c <__udivmoddi4+0x1b4>
 8000e74:	f1bb 0f00 	cmp.w	fp, #0
 8000e78:	f000 808d 	beq.w	8000f96 <__udivmoddi4+0x2ce>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	1a09      	subs	r1, r1, r0
 8000e80:	b2a4      	uxth	r4, r4
 8000e82:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e86:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e8e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1de>
 8000e96:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e9e:	d201      	bcs.n	8000ea4 <__udivmoddi4+0x1dc>
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d87f      	bhi.n	8000fa4 <__udivmoddi4+0x2dc>
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eaa:	eba1 010e 	sub.w	r1, r1, lr
 8000eae:	fba0 9802 	umull	r9, r8, r0, r2
 8000eb2:	4541      	cmp	r1, r8
 8000eb4:	464c      	mov	r4, r9
 8000eb6:	46c6      	mov	lr, r8
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0x1f8>
 8000eba:	d106      	bne.n	8000eca <__udivmoddi4+0x202>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d204      	bcs.n	8000eca <__udivmoddi4+0x202>
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	ebb9 0402 	subs.w	r4, r9, r2
 8000ec6:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d070      	beq.n	8000fb0 <__udivmoddi4+0x2e8>
 8000ece:	1b1a      	subs	r2, r3, r4
 8000ed0:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed4:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed8:	fa01 f707 	lsl.w	r7, r1, r7
 8000edc:	40f1      	lsrs	r1, r6
 8000ede:	2600      	movs	r6, #0
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	e73c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	f1c3 0020 	rsb	r0, r3, #32
 8000ef0:	fa01 f203 	lsl.w	r2, r1, r3
 8000ef4:	fa21 f600 	lsr.w	r6, r1, r0
 8000ef8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000efc:	fa24 f100 	lsr.w	r1, r4, r0
 8000f00:	fa1f f78c 	uxth.w	r7, ip
 8000f04:	409c      	lsls	r4, r3
 8000f06:	4311      	orrs	r1, r2
 8000f08:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f0c:	0c0a      	lsrs	r2, r1, #16
 8000f0e:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f12:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f16:	fb00 f607 	mul.w	r6, r0, r7
 8000f1a:	4296      	cmp	r6, r2
 8000f1c:	d90e      	bls.n	8000f3c <__udivmoddi4+0x274>
 8000f1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f26:	bf2c      	ite	cs
 8000f28:	f04f 0901 	movcs.w	r9, #1
 8000f2c:	f04f 0900 	movcc.w	r9, #0
 8000f30:	4296      	cmp	r6, r2
 8000f32:	d902      	bls.n	8000f3a <__udivmoddi4+0x272>
 8000f34:	f1b9 0f00 	cmp.w	r9, #0
 8000f38:	d031      	beq.n	8000f9e <__udivmoddi4+0x2d6>
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	1b92      	subs	r2, r2, r6
 8000f3e:	b289      	uxth	r1, r1
 8000f40:	fbb2 f6fe 	udiv	r6, r2, lr
 8000f44:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f4c:	fb06 f207 	mul.w	r2, r6, r7
 8000f50:	428a      	cmp	r2, r1
 8000f52:	d907      	bls.n	8000f64 <__udivmoddi4+0x29c>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f5c:	d201      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000f5e:	428a      	cmp	r2, r1
 8000f60:	d823      	bhi.n	8000faa <__udivmoddi4+0x2e2>
 8000f62:	4646      	mov	r6, r8
 8000f64:	1a89      	subs	r1, r1, r2
 8000f66:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f6a:	e725      	b.n	8000db8 <__udivmoddi4+0xf0>
 8000f6c:	462e      	mov	r6, r5
 8000f6e:	4628      	mov	r0, r5
 8000f70:	e6f7      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000f72:	1a84      	subs	r4, r0, r2
 8000f74:	eb61 0303 	sbc.w	r3, r1, r3
 8000f78:	2001      	movs	r0, #1
 8000f7a:	461f      	mov	r7, r3
 8000f7c:	e70b      	b.n	8000d96 <__udivmoddi4+0xce>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e749      	b.n	8000e18 <__udivmoddi4+0x150>
 8000f84:	4464      	add	r4, ip
 8000f86:	3802      	subs	r0, #2
 8000f88:	e6e1      	b.n	8000d4e <__udivmoddi4+0x86>
 8000f8a:	3a02      	subs	r2, #2
 8000f8c:	4461      	add	r1, ip
 8000f8e:	e72e      	b.n	8000dee <__udivmoddi4+0x126>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e6c6      	b.n	8000d24 <__udivmoddi4+0x5c>
 8000f96:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e76f      	b.n	8000e7e <__udivmoddi4+0x1b6>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4462      	add	r2, ip
 8000fa2:	e7cb      	b.n	8000f3c <__udivmoddi4+0x274>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e77d      	b.n	8000ea6 <__udivmoddi4+0x1de>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	e7d9      	b.n	8000f64 <__udivmoddi4+0x29c>
 8000fb0:	462e      	mov	r6, r5
 8000fb2:	e6d6      	b.n	8000d62 <__udivmoddi4+0x9a>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <memcpy>:
 8000ff8:	4684      	mov	ip, r0
 8000ffa:	ea41 0300 	orr.w	r3, r1, r0
 8000ffe:	f013 0303 	ands.w	r3, r3, #3
 8001002:	d149      	bne.n	8001098 <memcpy+0xa0>
 8001004:	3a40      	subs	r2, #64	; 0x40
 8001006:	d323      	bcc.n	8001050 <memcpy+0x58>
 8001008:	680b      	ldr	r3, [r1, #0]
 800100a:	6003      	str	r3, [r0, #0]
 800100c:	684b      	ldr	r3, [r1, #4]
 800100e:	6043      	str	r3, [r0, #4]
 8001010:	688b      	ldr	r3, [r1, #8]
 8001012:	6083      	str	r3, [r0, #8]
 8001014:	68cb      	ldr	r3, [r1, #12]
 8001016:	60c3      	str	r3, [r0, #12]
 8001018:	690b      	ldr	r3, [r1, #16]
 800101a:	6103      	str	r3, [r0, #16]
 800101c:	694b      	ldr	r3, [r1, #20]
 800101e:	6143      	str	r3, [r0, #20]
 8001020:	698b      	ldr	r3, [r1, #24]
 8001022:	6183      	str	r3, [r0, #24]
 8001024:	69cb      	ldr	r3, [r1, #28]
 8001026:	61c3      	str	r3, [r0, #28]
 8001028:	6a0b      	ldr	r3, [r1, #32]
 800102a:	6203      	str	r3, [r0, #32]
 800102c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800102e:	6243      	str	r3, [r0, #36]	; 0x24
 8001030:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001032:	6283      	str	r3, [r0, #40]	; 0x28
 8001034:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001036:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001038:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800103a:	6303      	str	r3, [r0, #48]	; 0x30
 800103c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800103e:	6343      	str	r3, [r0, #52]	; 0x34
 8001040:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001042:	6383      	str	r3, [r0, #56]	; 0x38
 8001044:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001046:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001048:	3040      	adds	r0, #64	; 0x40
 800104a:	3140      	adds	r1, #64	; 0x40
 800104c:	3a40      	subs	r2, #64	; 0x40
 800104e:	d2db      	bcs.n	8001008 <memcpy+0x10>
 8001050:	3230      	adds	r2, #48	; 0x30
 8001052:	d30b      	bcc.n	800106c <memcpy+0x74>
 8001054:	680b      	ldr	r3, [r1, #0]
 8001056:	6003      	str	r3, [r0, #0]
 8001058:	684b      	ldr	r3, [r1, #4]
 800105a:	6043      	str	r3, [r0, #4]
 800105c:	688b      	ldr	r3, [r1, #8]
 800105e:	6083      	str	r3, [r0, #8]
 8001060:	68cb      	ldr	r3, [r1, #12]
 8001062:	60c3      	str	r3, [r0, #12]
 8001064:	3010      	adds	r0, #16
 8001066:	3110      	adds	r1, #16
 8001068:	3a10      	subs	r2, #16
 800106a:	d2f3      	bcs.n	8001054 <memcpy+0x5c>
 800106c:	320c      	adds	r2, #12
 800106e:	d305      	bcc.n	800107c <memcpy+0x84>
 8001070:	f851 3b04 	ldr.w	r3, [r1], #4
 8001074:	f840 3b04 	str.w	r3, [r0], #4
 8001078:	3a04      	subs	r2, #4
 800107a:	d2f9      	bcs.n	8001070 <memcpy+0x78>
 800107c:	3204      	adds	r2, #4
 800107e:	d008      	beq.n	8001092 <memcpy+0x9a>
 8001080:	07d2      	lsls	r2, r2, #31
 8001082:	bf1c      	itt	ne
 8001084:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001088:	f800 3b01 	strbne.w	r3, [r0], #1
 800108c:	d301      	bcc.n	8001092 <memcpy+0x9a>
 800108e:	880b      	ldrh	r3, [r1, #0]
 8001090:	8003      	strh	r3, [r0, #0]
 8001092:	4660      	mov	r0, ip
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2a08      	cmp	r2, #8
 800109a:	d313      	bcc.n	80010c4 <memcpy+0xcc>
 800109c:	078b      	lsls	r3, r1, #30
 800109e:	d0b1      	beq.n	8001004 <memcpy+0xc>
 80010a0:	f010 0303 	ands.w	r3, r0, #3
 80010a4:	d0ae      	beq.n	8001004 <memcpy+0xc>
 80010a6:	f1c3 0304 	rsb	r3, r3, #4
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	07db      	lsls	r3, r3, #31
 80010ae:	bf1c      	itt	ne
 80010b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80010b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80010b8:	d3a4      	bcc.n	8001004 <memcpy+0xc>
 80010ba:	f831 3b02 	ldrh.w	r3, [r1], #2
 80010be:	f820 3b02 	strh.w	r3, [r0], #2
 80010c2:	e79f      	b.n	8001004 <memcpy+0xc>
 80010c4:	3a04      	subs	r2, #4
 80010c6:	d3d9      	bcc.n	800107c <memcpy+0x84>
 80010c8:	3a01      	subs	r2, #1
 80010ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010ce:	f800 3b01 	strb.w	r3, [r0], #1
 80010d2:	d2f9      	bcs.n	80010c8 <memcpy+0xd0>
 80010d4:	780b      	ldrb	r3, [r1, #0]
 80010d6:	7003      	strb	r3, [r0, #0]
 80010d8:	784b      	ldrb	r3, [r1, #1]
 80010da:	7043      	strb	r3, [r0, #1]
 80010dc:	788b      	ldrb	r3, [r1, #2]
 80010de:	7083      	strb	r3, [r0, #2]
 80010e0:	4660      	mov	r0, ip
 80010e2:	4770      	bx	lr

080010e4 <USBX_Core_Task>:
}
#endif


void USBX_Core_Task(void *argument)
{
 80010e4:	b508      	push	{r3, lr}

	while(1)
	{
		ux_system_tasks_run();			  // ★ Standalone 必须周期驱动
 80010e6:	f00f f99f 	bl	8010428 <_ux_system_tasks_run>
	while(1)
 80010ea:	e7fc      	b.n	80010e6 <USBX_Core_Task+0x2>

080010ec <StartDefaultTask>:
			NULL);

}

void StartDefaultTask(void *argument)
{
 80010ec:	b508      	push	{r3, lr}
	while(1)
	{
		bsp_led_toggle();
 80010ee:	f000 f9b9 	bl	8001464 <bsp_led_toggle>
		vTaskDelay(500);
 80010f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f6:	f00c fb31 	bl	800d75c <vTaskDelay>
	while(1)
 80010fa:	e7f8      	b.n	80010ee <StartDefaultTask+0x2>

080010fc <vApplicationStackOverflowHook>:
    while(1);
 80010fc:	e7fe      	b.n	80010fc <vApplicationStackOverflowHook>
 80010fe:	bf00      	nop

08001100 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001100:	b530      	push	{r4, r5, lr}
	ret = xTaskCreate(
 8001102:	2400      	movs	r4, #0
 8001104:	2509      	movs	r5, #9
void MX_FREERTOS_Init(void) {
 8001106:	b083      	sub	sp, #12
	ret = xTaskCreate(
 8001108:	22c8      	movs	r2, #200	; 0xc8
 800110a:	4623      	mov	r3, r4
 800110c:	e9cd 5400 	strd	r5, r4, [sp]
 8001110:	490f      	ldr	r1, [pc, #60]	; (8001150 <MX_FREERTOS_Init+0x50>)
 8001112:	4810      	ldr	r0, [pc, #64]	; (8001154 <MX_FREERTOS_Init+0x54>)
 8001114:	f00c faec 	bl	800d6f0 <xTaskCreate>
	if (ret != pdPASS)
 8001118:	2801      	cmp	r0, #1
 800111a:	d00c      	beq.n	8001136 <MX_FREERTOS_Init+0x36>
		rt_kprintf("StartDefaultTask failed! \r\n");
 800111c:	480e      	ldr	r0, [pc, #56]	; (8001158 <MX_FREERTOS_Init+0x58>)
 800111e:	f000 ff55 	bl	8001fcc <rt_kprintf>
	    Draw_String(0, 0, "StartDefaultTask failed!", 0x0000ff00, 0);
 8001122:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001126:	4621      	mov	r1, r4
 8001128:	4a0c      	ldr	r2, [pc, #48]	; (800115c <MX_FREERTOS_Init+0x5c>)
 800112a:	4620      	mov	r0, r4
 800112c:	9400      	str	r4, [sp, #0]
 800112e:	f000 fda9 	bl	8001c84 <Draw_String>
		Error_Handler();
 8001132:	f001 f81d 	bl	8002170 <Error_Handler>
		ret = xTaskCreate(
 8001136:	2300      	movs	r3, #0
 8001138:	2408      	movs	r4, #8
 800113a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800113e:	e9cd 4300 	strd	r4, r3, [sp]
 8001142:	4907      	ldr	r1, [pc, #28]	; (8001160 <MX_FREERTOS_Init+0x60>)
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_FREERTOS_Init+0x64>)
 8001146:	f00c fad3 	bl	800d6f0 <xTaskCreate>
}
 800114a:	b003      	add	sp, #12
 800114c:	bd30      	pop	{r4, r5, pc}
 800114e:	bf00      	nop
 8001150:	08010988 	.word	0x08010988
 8001154:	080010ed 	.word	0x080010ed
 8001158:	0801099c 	.word	0x0801099c
 800115c:	080109b8 	.word	0x080109b8
 8001160:	080109d4 	.word	0x080109d4
 8001164:	080010e5 	.word	0x080010e5

08001168 <_ux_utility_interrupt_disable>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8001168:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800116c:	b672      	cpsid	i
    
    saved_flags = __get_PRIMASK();
    __disable_irq();
    
    return (ALIGN_TYPE)saved_flags;
}
 800116e:	4770      	bx	lr

08001170 <_ux_utility_interrupt_restore>:
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001170:	f380 8810 	msr	PRIMASK, r0


VOID _ux_utility_interrupt_restore(ALIGN_TYPE saved_flags)
{
    __set_PRIMASK(saved_flags);
}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <MX_USBX_Device_Init>:

  /* USER CODE END MX_USBX_Device_Init0 */

  pointer = memory_ptr;
  /* Initialize USBX Memory */
  if (ux_system_initialize(pointer, UX_DEVICE_APP_MEM_POOL_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8001178:	2300      	movs	r3, #0
{
 800117a:	b570      	push	{r4, r5, r6, lr}
  if (ux_system_initialize(pointer, UX_DEVICE_APP_MEM_POOL_SIZE, UX_NULL, 0) != UX_SUCCESS)
 800117c:	f44f 4188 	mov.w	r1, #17408	; 0x4400
{
 8001180:	b08c      	sub	sp, #48	; 0x30
  if (ux_system_initialize(pointer, UX_DEVICE_APP_MEM_POOL_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8001182:	461a      	mov	r2, r3
 8001184:	4822      	ldr	r0, [pc, #136]	; (8001210 <MX_USBX_Device_Init+0x98>)
 8001186:	f00f f8eb 	bl	8010360 <_ux_system_initialize>
 800118a:	2800      	cmp	r0, #0
 800118c:	d13c      	bne.n	8001208 <MX_USBX_Device_Init+0x90>
    return UX_ERROR;
    /* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
  }

  /* Get Device Framework High Speed and get the length */
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 800118e:	4604      	mov	r4, r0
 8001190:	a908      	add	r1, sp, #32
 8001192:	2001      	movs	r0, #1
 8001194:	f00d ff82 	bl	800f09c <USBD_Get_Device_Framework_Speed>
                                                                &device_framework_hs_length);

  /* Get Device Framework Full Speed and get the length */
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 8001198:	a909      	add	r1, sp, #36	; 0x24
  device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED,
 800119a:	4606      	mov	r6, r0
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 800119c:	4620      	mov	r0, r4
 800119e:	f00d ff7d 	bl	800f09c <USBD_Get_Device_Framework_Speed>
 80011a2:	4602      	mov	r2, r0
                                                                &device_framework_fs_length);

  /* Get String Framework and get the length */
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80011a4:	a80a      	add	r0, sp, #40	; 0x28
  device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED,
 80011a6:	9207      	str	r2, [sp, #28]
  string_framework = USBD_Get_String_Framework(&string_framework_length);
 80011a8:	f00d ff9a 	bl	800f0e0 <USBD_Get_String_Framework>
 80011ac:	4605      	mov	r5, r0

  /* Get Language Id Framework and get the length */
  language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 80011ae:	a80b      	add	r0, sp, #44	; 0x2c
 80011b0:	f00e f82a 	bl	800f208 <USBD_Get_Language_Id_Framework>
 80011b4:	4601      	mov	r1, r0

  /* Install the device portion of USBX */
  if (ux_device_stack_initialize(device_framework_high_speed,
 80011b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80011b8:	9404      	str	r4, [sp, #16]
 80011ba:	9303      	str	r3, [sp, #12]
 80011bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011be:	9102      	str	r1, [sp, #8]
 80011c0:	9301      	str	r3, [sp, #4]
 80011c2:	4630      	mov	r0, r6
 80011c4:	9a07      	ldr	r2, [sp, #28]
 80011c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011c8:	9908      	ldr	r1, [sp, #32]
 80011ca:	9500      	str	r5, [sp, #0]
 80011cc:	f00e fe02 	bl	800fdd4 <_ux_device_stack_initialize>
 80011d0:	4604      	mov	r4, r0
 80011d2:	b9c8      	cbnz	r0, 8001208 <MX_USBX_Device_Init+0x90>
  }


  /* Initialize the cdc acm class parameters for the device */
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 80011d4:	4a0f      	ldr	r2, [pc, #60]	; (8001214 <MX_USBX_Device_Init+0x9c>)
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate   = USBD_CDC_ACM_Activate;
 80011d6:	4d10      	ldr	r5, [pc, #64]	; (8001218 <MX_USBX_Device_Init+0xa0>)
 80011d8:	4910      	ldr	r1, [pc, #64]	; (800121c <MX_USBX_Device_Init+0xa4>)
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USBX_Device_Init+0xa8>)
  cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = USBD_CDC_ACM_Deactivate;
 80011dc:	e9c5 1200 	strd	r1, r2, [r5]
  /* USER CODE BEGIN CDC_ACM_PARAMETER */

  /* USER CODE END CDC_ACM_PARAMETER */

  /* Get cdc acm configuration number */
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 80011e0:	4601      	mov	r1, r0
 80011e2:	2002      	movs	r0, #2
  cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change    = USBD_CDC_ACM_ParameterChange;
 80011e4:	60ab      	str	r3, [r5, #8]
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 80011e6:	f00e f835 	bl	800f254 <USBD_Get_Configuration_Number>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4e0d      	ldr	r6, [pc, #52]	; (8001224 <MX_USBX_Device_Init+0xac>)

  /* Find cdc acm interface number */
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 80011ee:	4621      	mov	r1, r4
 80011f0:	2002      	movs	r0, #2
  cdc_acm_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_CDC_ACM, 0);
 80011f2:	6033      	str	r3, [r6, #0]
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 80011f4:	f00e f818 	bl	800f228 <USBD_Get_Interface_Number>

  /* Initialize the device cdc acm class */
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 80011f8:	6832      	ldr	r2, [r6, #0]
  cdc_acm_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_CDC_ACM, 0);
 80011fa:	4603      	mov	r3, r0
  if (ux_device_stack_class_register(_ux_system_slave_class_cdc_acm_name,
 80011fc:	490a      	ldr	r1, [pc, #40]	; (8001228 <MX_USBX_Device_Init+0xb0>)
 80011fe:	480b      	ldr	r0, [pc, #44]	; (800122c <MX_USBX_Device_Init+0xb4>)
 8001200:	9500      	str	r5, [sp, #0]
 8001202:	f00e f961 	bl	800f4c8 <_ux_device_stack_class_register>
 8001206:	b100      	cbz	r0, 800120a <MX_USBX_Device_Init+0x92>
                                     cdc_acm_configuration_number,
                                     cdc_acm_interface_number,
                                     &cdc_acm_parameter) != UX_SUCCESS)
  {
    /* USER CODE BEGIN USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
    return UX_ERROR;
 8001208:	20ff      	movs	r0, #255	; 0xff
    /* USER CODE END USBX_DEVICE_CDC_ACM_REGISTER_ERORR */
  }

  return ret;
}
 800120a:	b00c      	add	sp, #48	; 0x30
 800120c:	bd70      	pop	{r4, r5, r6, pc}
 800120e:	bf00      	nop
 8001210:	20000670 	.word	0x20000670
 8001214:	0800e7c9 	.word	0x0800e7c9
 8001218:	20000664 	.word	0x20000664
 800121c:	0800e771 	.word	0x0800e771
 8001220:	0800e7d5 	.word	0x0800e7d5
 8001224:	20000660 	.word	0x20000660
 8001228:	0800e961 	.word	0x0800e961
 800122c:	200001d0 	.word	0x200001d0

08001230 <MX_SPI2_Init>:
#include "draw.h"

SPI_HandleTypeDef hspi2;

void MX_SPI2_Init(void)
{
 8001230:	b538      	push	{r3, r4, r5, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001232:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 8001238:	4813      	ldr	r0, [pc, #76]	; (8001288 <MX_SPI2_Init+0x58>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800123a:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800123c:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001240:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001244:	e9c0 3105 	strd	r3, r1, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x7;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001248:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800124c:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001250:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001254:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001258:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800125c:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001260:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001264:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001268:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800126c:	6603      	str	r3, [r0, #96]	; 0x60
  hspi2.Instance = SPI2;
 800126e:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_SPI2_Init+0x5c>)
  hspi2.Init.CRCPolynomial = 0x7;
 8001270:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001272:	6341      	str	r1, [r0, #52]	; 0x34
  hspi2.Instance = SPI2;
 8001274:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001276:	f009 fcb9 	bl	800abec <HAL_SPI_Init>
 800127a:	b900      	cbnz	r0, 800127e <MX_SPI2_Init+0x4e>
  {
    Error_Handler();
  }
}
 800127c:	bd38      	pop	{r3, r4, r5, pc}
 800127e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001282:	f000 bf75 	b.w	8002170 <Error_Handler>
 8001286:	bf00      	nop
 8001288:	20004a70 	.word	0x20004a70
 800128c:	40003800 	.word	0x40003800

08001290 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	2100      	movs	r1, #0
{
 8001294:	4604      	mov	r4, r0
 8001296:	b0cb      	sub	sp, #300	; 0x12c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001298:	f44f 7284 	mov.w	r2, #264	; 0x108
 800129c:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800129e:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80012a2:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80012a6:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f00f fa70 	bl	801078c <memset>
  if(spiHandle->Instance==SPI2)
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_SPI_MspInit+0xc0>)
 80012ae:	6822      	ldr	r2, [r4, #0]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d001      	beq.n	80012b8 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80012b4:	b04b      	add	sp, #300	; 0x12c
 80012b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80012b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012bc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012be:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80012c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c4:	f005 ff2e 	bl	8007124 <HAL_RCCEx_PeriphCLKConfig>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d13d      	bne.n	8001348 <HAL_SPI_MspInit+0xb8>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012ce:	2106      	movs	r1, #6
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012d4:	2405      	movs	r4, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <HAL_SPI_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	481f      	ldr	r0, [pc, #124]	; (8001358 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80012de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80012e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80012ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80012f6:	f042 0204 	orr.w	r2, r2, #4
 80012fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80012fe:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001302:	f002 0204 	and.w	r2, r2, #4
 8001306:	9201      	str	r2, [sp, #4]
 8001308:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800130e:	433a      	orrs	r2, r7
 8001310:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001318:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	403b      	ands	r3, r7
 800131c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	e9cd 7604 	strd	r7, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001326:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001328:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132a:	f003 ff21 	bl	8005170 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800132e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <HAL_SPI_MspInit+0xcc>)
 8001334:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001336:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800133c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800133e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f003 ff16 	bl	8005170 <HAL_GPIO_Init>
}
 8001344:	b04b      	add	sp, #300	; 0x12c
 8001346:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001348:	f000 ff12 	bl	8002170 <Error_Handler>
 800134c:	e7be      	b.n	80012cc <HAL_SPI_MspInit+0x3c>
 800134e:	bf00      	nop
 8001350:	40003800 	.word	0x40003800
 8001354:	44020c00 	.word	0x44020c00
 8001358:	42020800 	.word	0x42020800
 800135c:	42020400 	.word	0x42020400

08001360 <bsp_lcd_init>:
  }
}


void bsp_lcd_init(void)
{
 8001360:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	2400      	movs	r4, #0
{
 8001364:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800136a:	e9cd 4405 	strd	r4, r4, [sp, #20]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <bsp_lcd_init+0x90>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001370:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_GPIOD_CLK_ENABLE();
	
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 8001376:	4f1f      	ldr	r7, [pc, #124]	; (80013f4 <bsp_lcd_init+0x94>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	f042 0202 	orr.w	r2, r2, #2
 800137c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001380:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001384:	4e1c      	ldr	r6, [pc, #112]	; (80013f8 <bsp_lcd_init+0x98>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	f002 0202 	and.w	r2, r2, #2
 800138a:	9201      	str	r2, [sp, #4]
 800138c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 8001392:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001394:	f042 0208 	orr.w	r2, r2, #8
 8001398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800139c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80013a0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	f003 0308 	and.w	r3, r3, #8
 80013a6:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80013a8:	f44f 6101 	mov.w	r1, #2064	; 0x810
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80013ae:	f004 f821 	bl	80053f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80013b2:	4622      	mov	r2, r4
 80013b4:	4630      	mov	r0, r6
 80013b6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80013ba:	f004 f81b 	bl	80053f4 <HAL_GPIO_WritePin>
	
	/*Configure GPIO pins : PB11 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 80013c0:	f44f 6301 	mov.w	r3, #2064	; 0x810
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	4638      	mov	r0, r7
 80013c6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 80013c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d0:	f003 fece 	bl	8005170 <HAL_GPIO_Init>
	
	/*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013d4:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 80013da:	4630      	mov	r0, r6
 80013dc:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80013e2:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e4:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 80013e6:	f003 fec3 	bl	8005170 <HAL_GPIO_Init>
  
  
}
 80013ea:	b009      	add	sp, #36	; 0x24
 80013ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013ee:	bf00      	nop
 80013f0:	44020c00 	.word	0x44020c00
 80013f4:	42020400 	.word	0x42020400
 80013f8:	42020c00 	.word	0x42020c00

080013fc <bsp_led_init>:
#include "bsp_led.h"

//PC12
void bsp_led_init()
{
 80013fc:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 80013fe:	2400      	movs	r4, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();	
	__HAL_RCC_GPIOC_CLK_ENABLE();

	
	/*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001400:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2601      	movs	r6, #1
{
 8001406:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8001408:	e9cd 4405 	strd	r4, r4, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 800140c:	4b13      	ldr	r3, [pc, #76]	; (800145c <bsp_led_init+0x60>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 800140e:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001410:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001414:	a903      	add	r1, sp, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001416:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800141a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800141e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	480f      	ldr	r0, [pc, #60]	; (8001460 <bsp_led_init+0x64>)
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001424:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001428:	9201      	str	r2, [sp, #4]
 800142a:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800142c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001430:	f042 0204 	orr.w	r2, r2, #4
 8001434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	9604      	str	r6, [sp, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001446:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f003 fe92 	bl	8005170 <HAL_GPIO_Init>
	
	/*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);	
 800144c:	4622      	mov	r2, r4
 800144e:	4629      	mov	r1, r5
 8001450:	4803      	ldr	r0, [pc, #12]	; (8001460 <bsp_led_init+0x64>)
 8001452:	f003 ffcf 	bl	80053f4 <HAL_GPIO_WritePin>
}
 8001456:	b008      	add	sp, #32
 8001458:	bd70      	pop	{r4, r5, r6, pc}
 800145a:	bf00      	nop
 800145c:	44020c00 	.word	0x44020c00
 8001460:	42020800 	.word	0x42020800

08001464 <bsp_led_toggle>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}

void bsp_led_toggle()
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8001464:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001468:	4801      	ldr	r0, [pc, #4]	; (8001470 <bsp_led_toggle+0xc>)
 800146a:	f003 bfc9 	b.w	8005400 <HAL_GPIO_TogglePin>
 800146e:	bf00      	nop
 8001470:	42020800 	.word	0x42020800

08001474 <MX_UART4_Init>:
  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001474:	2300      	movs	r3, #0
  huart4.Init.BaudRate = 115200;
 8001476:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 800147a:	220c      	movs	r2, #12
{
 800147c:	b510      	push	{r4, lr}
  huart4.Instance = UART4;
 800147e:	481d      	ldr	r0, [pc, #116]	; (80014f4 <MX_UART4_Init+0x80>)
 8001480:	4c1d      	ldr	r4, [pc, #116]	; (80014f8 <MX_UART4_Init+0x84>)
  huart4.Init.BaudRate = 115200;
 8001482:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001486:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148a:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148e:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001492:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart4.Instance = UART4;
 8001496:	6004      	str	r4, [r0, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001498:	f00a fdfa 	bl	800c090 <HAL_UART_Init>
 800149c:	b970      	cbnz	r0, 80014bc <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149e:	2100      	movs	r1, #0
 80014a0:	4814      	ldr	r0, [pc, #80]	; (80014f4 <MX_UART4_Init+0x80>)
 80014a2:	f00a fee3 	bl	800c26c <HAL_UARTEx_SetTxFifoThreshold>
 80014a6:	b988      	cbnz	r0, 80014cc <MX_UART4_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a8:	2100      	movs	r1, #0
 80014aa:	4812      	ldr	r0, [pc, #72]	; (80014f4 <MX_UART4_Init+0x80>)
 80014ac:	f00a ff08 	bl	800c2c0 <HAL_UARTEx_SetRxFifoThreshold>
 80014b0:	b9a0      	cbnz	r0, 80014dc <MX_UART4_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80014b2:	4810      	ldr	r0, [pc, #64]	; (80014f4 <MX_UART4_Init+0x80>)
 80014b4:	f00a feb6 	bl	800c224 <HAL_UARTEx_EnableFifoMode>
 80014b8:	b9b8      	cbnz	r0, 80014ea <MX_UART4_Init+0x76>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014ba:	bd10      	pop	{r4, pc}
    Error_Handler();
 80014bc:	f000 fe58 	bl	8002170 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c0:	2100      	movs	r1, #0
 80014c2:	480c      	ldr	r0, [pc, #48]	; (80014f4 <MX_UART4_Init+0x80>)
 80014c4:	f00a fed2 	bl	800c26c <HAL_UARTEx_SetTxFifoThreshold>
 80014c8:	2800      	cmp	r0, #0
 80014ca:	d0ed      	beq.n	80014a8 <MX_UART4_Init+0x34>
    Error_Handler();
 80014cc:	f000 fe50 	bl	8002170 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <MX_UART4_Init+0x80>)
 80014d4:	f00a fef4 	bl	800c2c0 <HAL_UARTEx_SetRxFifoThreshold>
 80014d8:	2800      	cmp	r0, #0
 80014da:	d0ea      	beq.n	80014b2 <MX_UART4_Init+0x3e>
    Error_Handler();
 80014dc:	f000 fe48 	bl	8002170 <Error_Handler>
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_UART4_Init+0x80>)
 80014e2:	f00a fe9f 	bl	800c224 <HAL_UARTEx_EnableFifoMode>
 80014e6:	2800      	cmp	r0, #0
 80014e8:	d0e7      	beq.n	80014ba <MX_UART4_Init+0x46>
}
 80014ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80014ee:	f000 be3f 	b.w	8002170 <Error_Handler>
 80014f2:	bf00      	nop
 80014f4:	20004d74 	.word	0x20004d74
 80014f8:	40004c00 	.word	0x40004c00

080014fc <MX_USART2_UART_Init>:
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fc:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 80014fe:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001502:	220c      	movs	r2, #12
{
 8001504:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001506:	481d      	ldr	r0, [pc, #116]	; (800157c <MX_USART2_UART_Init+0x80>)
 8001508:	4c1d      	ldr	r4, [pc, #116]	; (8001580 <MX_USART2_UART_Init+0x84>)
  huart2.Init.BaudRate = 115200;
 800150a:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 800150e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001516:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800151a:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart2.Instance = USART2;
 800151e:	6004      	str	r4, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001520:	f00a fdb6 	bl	800c090 <HAL_UART_Init>
 8001524:	b970      	cbnz	r0, 8001544 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001526:	2100      	movs	r1, #0
 8001528:	4814      	ldr	r0, [pc, #80]	; (800157c <MX_USART2_UART_Init+0x80>)
 800152a:	f00a fe9f 	bl	800c26c <HAL_UARTEx_SetTxFifoThreshold>
 800152e:	b988      	cbnz	r0, 8001554 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001530:	2100      	movs	r1, #0
 8001532:	4812      	ldr	r0, [pc, #72]	; (800157c <MX_USART2_UART_Init+0x80>)
 8001534:	f00a fec4 	bl	800c2c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001538:	b9a0      	cbnz	r0, 8001564 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800153a:	4810      	ldr	r0, [pc, #64]	; (800157c <MX_USART2_UART_Init+0x80>)
 800153c:	f00a fe72 	bl	800c224 <HAL_UARTEx_EnableFifoMode>
 8001540:	b9b8      	cbnz	r0, 8001572 <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001542:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001544:	f000 fe14 	bl	8002170 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001548:	2100      	movs	r1, #0
 800154a:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_USART2_UART_Init+0x80>)
 800154c:	f00a fe8e 	bl	800c26c <HAL_UARTEx_SetTxFifoThreshold>
 8001550:	2800      	cmp	r0, #0
 8001552:	d0ed      	beq.n	8001530 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001554:	f000 fe0c 	bl	8002170 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001558:	2100      	movs	r1, #0
 800155a:	4808      	ldr	r0, [pc, #32]	; (800157c <MX_USART2_UART_Init+0x80>)
 800155c:	f00a feb0 	bl	800c2c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001560:	2800      	cmp	r0, #0
 8001562:	d0ea      	beq.n	800153a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001564:	f000 fe04 	bl	8002170 <Error_Handler>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_USART2_UART_Init+0x80>)
 800156a:	f00a fe5b 	bl	800c224 <HAL_UARTEx_EnableFifoMode>
 800156e:	2800      	cmp	r0, #0
 8001570:	d0e7      	beq.n	8001542 <MX_USART2_UART_Init+0x46>
}
 8001572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001576:	f000 bdfb 	b.w	8002170 <Error_Handler>
 800157a:	bf00      	nop
 800157c:	20004ce0 	.word	0x20004ce0
 8001580:	40004400 	.word	0x40004400

08001584 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001584:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	2100      	movs	r1, #0
{
 8001588:	4604      	mov	r4, r0
 800158a:	b0cd      	sub	sp, #308	; 0x134
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800158c:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001590:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8001596:	e9cd 1107 	strd	r1, r1, [sp, #28]
 800159a:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159c:	f00f f8f6 	bl	801078c <memset>
  if(uartHandle->Instance==UART4)
 80015a0:	4a93      	ldr	r2, [pc, #588]	; (80017f0 <HAL_UART_MspInit+0x26c>)
 80015a2:	6823      	ldr	r3, [r4, #0]
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d005      	beq.n	80015b4 <HAL_UART_MspInit+0x30>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 80015a8:	4a92      	ldr	r2, [pc, #584]	; (80017f4 <HAL_UART_MspInit+0x270>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	f000 8084 	beq.w	80016b8 <HAL_UART_MspInit+0x134>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015b0:	b04d      	add	sp, #308	; 0x134
 80015b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015b4:	2208      	movs	r2, #8
 80015b6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015b8:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015be:	f005 fdb1 	bl	8007124 <HAL_RCCEx_PeriphCLKConfig>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	f040 8101 	bne.w	80017ca <HAL_UART_MspInit+0x246>
    __HAL_RCC_UART4_CLK_ENABLE();
 80015c8:	4b8b      	ldr	r3, [pc, #556]	; (80017f8 <HAL_UART_MspInit+0x274>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2600      	movs	r6, #0
    __HAL_RCC_UART4_CLK_ENABLE();
 80015cc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015d0:	2708      	movs	r7, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 80015d2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80015da:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	4887      	ldr	r0, [pc, #540]	; (80017fc <HAL_UART_MspInit+0x278>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80015e0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80015e4:	9201      	str	r2, [sp, #4]
 80015e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ec:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80015f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80015fa:	4d81      	ldr	r5, [pc, #516]	; (8001800 <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fc:	f003 0301 	and.w	r3, r3, #1
 8001600:	9302      	str	r3, [sp, #8]
 8001602:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001604:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001608:	e9cd 6607 	strd	r6, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800160c:	e9cd 3205 	strd	r3, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001610:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f003 fdad 	bl	8005170 <HAL_GPIO_Init>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001616:	4b7b      	ldr	r3, [pc, #492]	; (8001804 <HAL_UART_MspInit+0x280>)
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART4_TX;
 8001618:	221c      	movs	r2, #28
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800161a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800161e:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 8001620:	2301      	movs	r3, #1
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 8001622:	4628      	mov	r0, r5
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001624:	e9c5 6605 	strd	r6, r6, [r5, #20]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001628:	e9c5 6607 	strd	r6, r6, [r5, #28]
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800162c:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 8001630:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001634:	60ae      	str	r6, [r5, #8]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001636:	612f      	str	r7, [r5, #16]
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001638:	636e      	str	r6, [r5, #52]	; 0x34
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800163a:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART4_TX;
 800163c:	606a      	str	r2, [r5, #4]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 800163e:	f003 f92b 	bl	8004898 <HAL_DMA_Init>
 8001642:	2800      	cmp	r0, #0
 8001644:	f040 80be 	bne.w	80017c4 <HAL_UART_MspInit+0x240>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001648:	2110      	movs	r1, #16
 800164a:	486d      	ldr	r0, [pc, #436]	; (8001800 <HAL_UART_MspInit+0x27c>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel3);
 800164c:	67e5      	str	r5, [r4, #124]	; 0x7c
 800164e:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001650:	f003 fd0a 	bl	8005068 <HAL_DMA_ConfigChannelAttributes>
 8001654:	2800      	cmp	r0, #0
 8001656:	f040 80b2 	bne.w	80017be <HAL_UART_MspInit+0x23a>
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800165a:	2300      	movs	r3, #0
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 800165c:	2201      	movs	r2, #1
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_UART4_RX;
 800165e:	201b      	movs	r0, #27
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 8001660:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001664:	4d68      	ldr	r5, [pc, #416]	; (8001808 <HAL_UART_MspInit+0x284>)
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001666:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 800166a:	e9c5 3303 	strd	r3, r3, [r5, #12]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800166e:	e9c5 3306 	strd	r3, r3, [r5, #24]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001672:	e9c5 3208 	strd	r3, r2, [r5, #32]
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001676:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 800167a:	e9c5 330c 	strd	r3, r3, [r5, #48]	; 0x30
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800167e:	4b63      	ldr	r3, [pc, #396]	; (800180c <HAL_UART_MspInit+0x288>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001680:	4628      	mov	r0, r5
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 8001682:	6169      	str	r1, [r5, #20]
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001684:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001686:	f003 f907 	bl	8004898 <HAL_DMA_Init>
 800168a:	2800      	cmp	r0, #0
 800168c:	f040 8094 	bne.w	80017b8 <HAL_UART_MspInit+0x234>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001690:	2110      	movs	r1, #16
 8001692:	485d      	ldr	r0, [pc, #372]	; (8001808 <HAL_UART_MspInit+0x284>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel1);
 8001694:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8001698:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800169a:	f003 fce5 	bl	8005068 <HAL_DMA_ConfigChannelAttributes>
 800169e:	2800      	cmp	r0, #0
 80016a0:	f040 8087 	bne.w	80017b2 <HAL_UART_MspInit+0x22e>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2105      	movs	r1, #5
 80016a8:	203d      	movs	r0, #61	; 0x3d
 80016aa:	f003 f845 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80016ae:	203d      	movs	r0, #61	; 0x3d
 80016b0:	f003 f880 	bl	80047b4 <HAL_NVIC_EnableIRQ>
}
 80016b4:	b04d      	add	sp, #308	; 0x134
 80016b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b8:	2202      	movs	r2, #2
 80016ba:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016bc:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016c2:	f005 fd2f 	bl	8007124 <HAL_RCCEx_PeriphCLKConfig>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	f040 8082 	bne.w	80017d0 <HAL_UART_MspInit+0x24c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016cc:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <HAL_UART_MspInit+0x274>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ce:	2107      	movs	r1, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80016de:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	4846      	ldr	r0, [pc, #280]	; (80017fc <HAL_UART_MspInit+0x278>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80016e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80016e8:	9203      	str	r2, [sp, #12]
 80016ea:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80016f0:	4d47      	ldr	r5, [pc, #284]	; (8001810 <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	f042 0201 	orr.w	r2, r2, #1
 80016f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80016fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016fe:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	9304      	str	r3, [sp, #16]
 8001706:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800170a:	9109      	str	r1, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	e9cd 6607 	strd	r6, r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f003 fd2b 	bl	8005170 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 800171a:	2301      	movs	r3, #1
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_RX;
 800171c:	2117      	movs	r1, #23
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 800171e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001722:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_UART_MspInit+0x290>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001728:	4628      	mov	r0, r5
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800172a:	e9c5 6602 	strd	r6, r6, [r5, #8]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800172e:	e9c5 6606 	strd	r6, r6, [r5, #24]
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001732:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001736:	612e      	str	r6, [r5, #16]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001738:	622e      	str	r6, [r5, #32]
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 800173a:	636e      	str	r6, [r5, #52]	; 0x34
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_RX;
 800173c:	6069      	str	r1, [r5, #4]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 800173e:	616a      	str	r2, [r5, #20]
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001740:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001742:	f003 f8a9 	bl	8004898 <HAL_DMA_Init>
 8001746:	2800      	cmp	r0, #0
 8001748:	d14e      	bne.n	80017e8 <HAL_UART_MspInit+0x264>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 800174a:	2110      	movs	r1, #16
 800174c:	4830      	ldr	r0, [pc, #192]	; (8001810 <HAL_UART_MspInit+0x28c>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel2);
 800174e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8001752:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001754:	f003 fc88 	bl	8005068 <HAL_DMA_ConfigChannelAttributes>
 8001758:	2800      	cmp	r0, #0
 800175a:	d142      	bne.n	80017e2 <HAL_UART_MspInit+0x25e>
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800175c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001760:	4d2d      	ldr	r5, [pc, #180]	; (8001818 <HAL_UART_MspInit+0x294>)
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001762:	2300      	movs	r3, #0
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART2_TX;
 8001764:	2018      	movs	r0, #24
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001766:	2201      	movs	r2, #1
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001768:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 800176a:	2108      	movs	r1, #8
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800176c:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001770:	e9c5 3305 	strd	r3, r3, [r5, #20]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001774:	e9c5 3307 	strd	r3, r3, [r5, #28]
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001778:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 800177c:	636b      	str	r3, [r5, #52]	; 0x34
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_UART_MspInit+0x298>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001780:	4628      	mov	r0, r5
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001782:	e9c5 2209 	strd	r2, r2, [r5, #36]	; 0x24
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001786:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001788:	6129      	str	r1, [r5, #16]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800178a:	f003 f885 	bl	8004898 <HAL_DMA_Init>
 800178e:	bb28      	cbnz	r0, 80017dc <HAL_UART_MspInit+0x258>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001790:	2110      	movs	r1, #16
 8001792:	4821      	ldr	r0, [pc, #132]	; (8001818 <HAL_UART_MspInit+0x294>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel0);
 8001794:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001796:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001798:	f003 fc66 	bl	8005068 <HAL_DMA_ConfigChannelAttributes>
 800179c:	b9d8      	cbnz	r0, 80017d6 <HAL_UART_MspInit+0x252>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2105      	movs	r1, #5
 80017a2:	203b      	movs	r0, #59	; 0x3b
 80017a4:	f002 ffc8 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017a8:	203b      	movs	r0, #59	; 0x3b
 80017aa:	f003 f803 	bl	80047b4 <HAL_NVIC_EnableIRQ>
}
 80017ae:	b04d      	add	sp, #308	; 0x134
 80017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80017b2:	f000 fcdd 	bl	8002170 <Error_Handler>
 80017b6:	e775      	b.n	80016a4 <HAL_UART_MspInit+0x120>
      Error_Handler();
 80017b8:	f000 fcda 	bl	8002170 <Error_Handler>
 80017bc:	e768      	b.n	8001690 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 80017be:	f000 fcd7 	bl	8002170 <Error_Handler>
 80017c2:	e74a      	b.n	800165a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80017c4:	f000 fcd4 	bl	8002170 <Error_Handler>
 80017c8:	e73e      	b.n	8001648 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80017ca:	f000 fcd1 	bl	8002170 <Error_Handler>
 80017ce:	e6fb      	b.n	80015c8 <HAL_UART_MspInit+0x44>
      Error_Handler();
 80017d0:	f000 fcce 	bl	8002170 <Error_Handler>
 80017d4:	e77a      	b.n	80016cc <HAL_UART_MspInit+0x148>
      Error_Handler();
 80017d6:	f000 fccb 	bl	8002170 <Error_Handler>
 80017da:	e7e0      	b.n	800179e <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80017dc:	f000 fcc8 	bl	8002170 <Error_Handler>
 80017e0:	e7d6      	b.n	8001790 <HAL_UART_MspInit+0x20c>
      Error_Handler();
 80017e2:	f000 fcc5 	bl	8002170 <Error_Handler>
 80017e6:	e7b9      	b.n	800175c <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 80017e8:	f000 fcc2 	bl	8002170 <Error_Handler>
 80017ec:	e7ad      	b.n	800174a <HAL_UART_MspInit+0x1c6>
 80017ee:	bf00      	nop
 80017f0:	40004c00 	.word	0x40004c00
 80017f4:	40004400 	.word	0x40004400
 80017f8:	44020c00 	.word	0x44020c00
 80017fc:	42020000 	.word	0x42020000
 8001800:	20004c68 	.word	0x20004c68
 8001804:	400201d0 	.word	0x400201d0
 8001808:	20004b78 	.word	0x20004b78
 800180c:	400200d0 	.word	0x400200d0
 8001810:	20004bf0 	.word	0x20004bf0
 8001814:	40020150 	.word	0x40020150
 8001818:	20004b00 	.word	0x20004b00
 800181c:	40020050 	.word	0x40020050

08001820 <HAL_UART_MspDeInit>:


void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==UART4)
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <HAL_UART_MspDeInit+0x70>)
 8001822:	6803      	ldr	r3, [r0, #0]
{
 8001824:	b510      	push	{r4, lr}
  if(uartHandle->Instance==UART4)
 8001826:	4293      	cmp	r3, r2
{
 8001828:	4604      	mov	r4, r0
  if(uartHandle->Instance==UART4)
 800182a:	d003      	beq.n	8001834 <HAL_UART_MspDeInit+0x14>
    HAL_NVIC_DisableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 800182c:	4a19      	ldr	r2, [pc, #100]	; (8001894 <HAL_UART_MspDeInit+0x74>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d017      	beq.n	8001862 <HAL_UART_MspDeInit+0x42>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001832:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART4_CLK_DISABLE();
 8001834:	4a18      	ldr	r2, [pc, #96]	; (8001898 <HAL_UART_MspDeInit+0x78>)
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001836:	2103      	movs	r1, #3
    __HAL_RCC_UART4_CLK_DISABLE();
 8001838:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 800183c:	4817      	ldr	r0, [pc, #92]	; (800189c <HAL_UART_MspDeInit+0x7c>)
    __HAL_RCC_UART4_CLK_DISABLE();
 800183e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001842:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001846:	f003 fd69 	bl	800531c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800184a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800184c:	f003 fa22 	bl	8004c94 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001850:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001854:	f003 fa1e 	bl	8004c94 <HAL_DMA_DeInit>
}
 8001858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 800185c:	203d      	movs	r0, #61	; 0x3d
 800185e:	f002 bfb7 	b.w	80047d0 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001862:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_UART_MspDeInit+0x78>)
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001864:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 8001866:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800186a:	480c      	ldr	r0, [pc, #48]	; (800189c <HAL_UART_MspDeInit+0x7c>)
    __HAL_RCC_USART2_CLK_DISABLE();
 800186c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001870:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001874:	f003 fd52 	bl	800531c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001878:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800187c:	f003 fa0a 	bl	8004c94 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001880:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001882:	f003 fa07 	bl	8004c94 <HAL_DMA_DeInit>
}
 8001886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800188a:	203b      	movs	r0, #59	; 0x3b
 800188c:	f002 bfa0 	b.w	80047d0 <HAL_NVIC_DisableIRQ>
 8001890:	40004c00 	.word	0x40004c00
 8001894:	40004400 	.word	0x40004400
 8001898:	44020c00 	.word	0x44020c00
 800189c:	42020000 	.word	0x42020000

080018a0 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80018a0:	b410      	push	{r4}
	PUART_Data pdata;
	if( &huart2 == huart ) {
		pdata = &g_uart2_data;
	}
	if(&huart4 == huart) {
		pdata = &g_uart4_data;
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_UART_TxCpltCallback+0x1c>)
	if(&huart4 == huart) {
 80018a4:	4c06      	ldr	r4, [pc, #24]	; (80018c0 <HAL_UART_TxCpltCallback+0x20>)
		pdata = &g_uart4_data;
 80018a6:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_UART_TxCpltCallback+0x24>)
	}
	xSemaphoreGiveFromISR(pdata->txSemaphore, NULL);
 80018a8:	2100      	movs	r1, #0
		pdata = &g_uart4_data;
 80018aa:	4284      	cmp	r4, r0
 80018ac:	bf08      	it	eq
 80018ae:	4613      	moveq	r3, r2
}
 80018b0:	f85d 4b04 	ldr.w	r4, [sp], #4
	xSemaphoreGiveFromISR(pdata->txSemaphore, NULL);
 80018b4:	6898      	ldr	r0, [r3, #8]
 80018b6:	f001 b873 	b.w	80029a0 <xQueueGiveFromISR>
 80018ba:	bf00      	nop
 80018bc:	20000000 	.word	0x20000000
 80018c0:	20004d74 	.word	0x20004d74
 80018c4:	200000d4 	.word	0x200000d4

080018c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    
	if (huart == &huart2)
	{
        pdata = &g_uart2_data;
	}
	if (huart == &huart4)
 80018ca:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_UART_RxCpltCallback+0x38>)
	{
        pdata = &g_uart4_data;
 80018cc:	4d0d      	ldr	r5, [pc, #52]	; (8001904 <HAL_UART_RxCpltCallback+0x3c>)
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_UART_RxCpltCallback+0x40>)
 80018d0:	4282      	cmp	r2, r0
 80018d2:	bf08      	it	eq
 80018d4:	461d      	moveq	r5, r3
	}
	/* write queue : g_uart4_rx_buf 100 bytes ==> queue */
	for (int i = 0; i < UART_RX_BUF_LEN; i++)
 80018d6:	f105 070c 	add.w	r7, r5, #12
 80018da:	463c      	mov	r4, r7
 80018dc:	f105 06d4 	add.w	r6, r5, #212	; 0xd4
	{
		xQueueSendFromISR(pdata->rxQueue, (const void *)&pdata->rx_buf[i], NULL);
 80018e0:	2300      	movs	r3, #0
 80018e2:	4621      	mov	r1, r4
 80018e4:	461a      	mov	r2, r3
 80018e6:	6868      	ldr	r0, [r5, #4]
	for (int i = 0; i < UART_RX_BUF_LEN; i++)
 80018e8:	3401      	adds	r4, #1
		xQueueSendFromISR(pdata->rxQueue, (const void *)&pdata->rx_buf[i], NULL);
 80018ea:	f000 fff9 	bl	80028e0 <xQueueGenericSendFromISR>
	for (int i = 0; i < UART_RX_BUF_LEN; i++)
 80018ee:	42b4      	cmp	r4, r6
 80018f0:	d1f6      	bne.n	80018e0 <HAL_UART_RxCpltCallback+0x18>
	}	
	
	/* re-start DMA+IDLE rx */
	HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 80018f2:	4639      	mov	r1, r7
 80018f4:	6828      	ldr	r0, [r5, #0]
 80018f6:	22c8      	movs	r2, #200	; 0xc8
}
 80018f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 80018fc:	f00a bd0a 	b.w	800c314 <HAL_UARTEx_ReceiveToIdle_DMA>
 8001900:	20004d74 	.word	0x20004d74
 8001904:	20000000 	.word	0x20000000
 8001908:	200000d4 	.word	0x200000d4

0800190c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800190c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (huart == &huart4)
	{
		pdata = &g_uart4_data;
	}
	/* write queue : g_uart4_rx_buf Size bytes ==> queue */
	for (int i = old_pos; i < Size; i++)
 8001910:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800197c <HAL_UARTEx_RxEventCallback+0x70>
	if (huart == &huart4)
 8001914:	4a16      	ldr	r2, [pc, #88]	; (8001970 <HAL_UARTEx_RxEventCallback+0x64>)
		pdata = &g_uart4_data;
 8001916:	4d17      	ldr	r5, [pc, #92]	; (8001974 <HAL_UARTEx_RxEventCallback+0x68>)
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_UARTEx_RxEventCallback+0x6c>)
	for (int i = old_pos; i < Size; i++)
 800191a:	f8b8 4000 	ldrh.w	r4, [r8]
		pdata = &g_uart4_data;
 800191e:	4290      	cmp	r0, r2
 8001920:	bf08      	it	eq
 8001922:	461d      	moveq	r5, r3
	for (int i = old_pos; i < Size; i++)
 8001924:	428c      	cmp	r4, r1
{
 8001926:	4681      	mov	r9, r0
 8001928:	460f      	mov	r7, r1
	for (int i = old_pos; i < Size; i++)
 800192a:	d20d      	bcs.n	8001948 <HAL_UARTEx_RxEventCallback+0x3c>
 800192c:	340c      	adds	r4, #12
 800192e:	f101 060c 	add.w	r6, r1, #12
 8001932:	442c      	add	r4, r5
 8001934:	442e      	add	r6, r5
	{
		xQueueSendFromISR(pdata->rxQueue, (const void *)&pdata->rx_buf[i], NULL);
 8001936:	2300      	movs	r3, #0
 8001938:	4621      	mov	r1, r4
 800193a:	461a      	mov	r2, r3
 800193c:	6868      	ldr	r0, [r5, #4]
	for (int i = old_pos; i < Size; i++)
 800193e:	3401      	adds	r4, #1
		xQueueSendFromISR(pdata->rxQueue, (const void *)&pdata->rx_buf[i], NULL);
 8001940:	f000 ffce 	bl	80028e0 <xQueueGenericSendFromISR>
	for (int i = old_pos; i < Size; i++)
 8001944:	42b4      	cmp	r4, r6
 8001946:	d1f6      	bne.n	8001936 <HAL_UARTEx_RxEventCallback+0x2a>
	}

	old_pos = Size;

	if (HAL_UART_RXEVENT_HT != huart->RxEventType)
 8001948:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
	old_pos = Size;
 800194c:	f8a8 7000 	strh.w	r7, [r8]
	if (HAL_UART_RXEVENT_HT != huart->RxEventType)
 8001950:	2b01      	cmp	r3, #1
 8001952:	d101      	bne.n	8001958 <HAL_UARTEx_RxEventCallback+0x4c>
		
		/* re-start DMA+IDLE rx */
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
	}

}
 8001954:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001958:	4629      	mov	r1, r5
		old_pos = 0;
 800195a:	2300      	movs	r3, #0
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 800195c:	22c8      	movs	r2, #200	; 0xc8
		old_pos = 0;
 800195e:	f8a8 3000 	strh.w	r3, [r8]
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001962:	f851 0b0c 	ldr.w	r0, [r1], #12
}
 8001966:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 800196a:	f00a bcd3 	b.w	800c314 <HAL_UARTEx_ReceiveToIdle_DMA>
 800196e:	bf00      	nop
 8001970:	20004d74 	.word	0x20004d74
 8001974:	20000000 	.word	0x20000000
 8001978:	200000d4 	.word	0x200000d4
 800197c:	20004e08 	.word	0x20004e08

08001980 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001980:	b510      	push	{r4, lr}
	{
		pdata = &g_uart2_data;
	}
	if (huart == &huart4)
	{
		pdata = &g_uart4_data;
 8001982:	490a      	ldr	r1, [pc, #40]	; (80019ac <HAL_UART_ErrorCallback+0x2c>)
	if (huart == &huart4)
 8001984:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_UART_ErrorCallback+0x30>)
		pdata = &g_uart4_data;
 8001986:	4c0b      	ldr	r4, [pc, #44]	; (80019b4 <HAL_UART_ErrorCallback+0x34>)
 8001988:	4283      	cmp	r3, r0
 800198a:	bf08      	it	eq
 800198c:	460c      	moveq	r4, r1
	}

	HAL_UART_DeInit(pdata->huart);
 800198e:	6820      	ldr	r0, [r4, #0]
 8001990:	f009 fefc 	bl	800b78c <HAL_UART_DeInit>
	HAL_UART_Init(pdata->huart);
 8001994:	6820      	ldr	r0, [r4, #0]
 8001996:	f00a fb7b 	bl	800c090 <HAL_UART_Init>
	
	/* re-start DMA+IDLE rx */
	HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 800199a:	4621      	mov	r1, r4

}
 800199c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 80019a0:	22c8      	movs	r2, #200	; 0xc8
 80019a2:	f851 0b0c 	ldr.w	r0, [r1], #12
 80019a6:	f00a bcb5 	b.w	800c314 <HAL_UARTEx_ReceiveToIdle_DMA>
 80019aa:	bf00      	nop
 80019ac:	200000d4 	.word	0x200000d4
 80019b0:	20004d74 	.word	0x20004d74
 80019b4:	20000000 	.word	0x20000000

080019b8 <myputstr>:
	return ch;	
}

void myputstr(const char *str)
{
	while(*str) {
 80019b8:	7801      	ldrb	r1, [r0, #0]
 80019ba:	b141      	cbz	r1, 80019ce <myputstr+0x16>
	while((USART2->ISR&0X40)==0);//循环发送,直到发送完毕   
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <myputstr+0x18>)
 80019be:	69d3      	ldr	r3, [r2, #28]
 80019c0:	065b      	lsls	r3, r3, #25
 80019c2:	d5fc      	bpl.n	80019be <myputstr+0x6>
	USART2->TDR = (uint8_t) ch;      
 80019c4:	6291      	str	r1, [r2, #40]	; 0x28
	while(*str) {
 80019c6:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80019ca:	2900      	cmp	r1, #0
 80019cc:	d1f7      	bne.n	80019be <myputstr+0x6>
		//HAL_UART_Transmit(&huart1, (uint8_t *)str, 1, 0xFFFF);
		myputchar(*str);
		str++;
	}

}
 80019ce:	4770      	bx	lr
 80019d0:	40004400 	.word	0x40004400

080019d4 <MX_USB_PCD_Init>:

PCD_HandleTypeDef hpcd_USB_DRD_FS;


void MX_USB_PCD_Init(void)
{
 80019d4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN USB_Init 0 */
  UINT MX_USBX_Device_Init(void);
	MX_USBX_Device_Init();
 80019d6:	f7ff fbcf 	bl	8001178 <MX_USBX_Device_Init>
  /* USER CODE END USB_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80019da:	2300      	movs	r3, #0
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80019dc:	2202      	movs	r2, #2
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80019de:	2108      	movs	r1, #8
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80019e0:	481d      	ldr	r0, [pc, #116]	; (8001a58 <MX_USB_PCD_Init+0x84>)
 80019e2:	4c1e      	ldr	r4, [pc, #120]	; (8001a5c <MX_USB_PCD_Init+0x88>)
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 80019e4:	8143      	strh	r3, [r0, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 80019e6:	60c3      	str	r3, [r0, #12]
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 80019e8:	6004      	str	r4, [r0, #0]
  hpcd_USB_DRD_FS.Init.speed = USBD_FS_SPEED;
 80019ea:	71c2      	strb	r2, [r0, #7]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 80019ec:	7101      	strb	r1, [r0, #4]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019ee:	7242      	strb	r2, [r0, #9]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 80019f0:	7403      	strb	r3, [r0, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 80019f2:	f003 fd1f 	bl	8005434 <HAL_PCD_Init>
 80019f6:	bb58      	cbnz	r0, 8001a50 <MX_USB_PCD_Init+0x7c>
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USB_Init 2 */

	HAL_PWREx_EnableVddUSB();
 80019f8:	f004 fd22 	bl	8006440 <HAL_PWREx_EnableVddUSB>
	HAL_PWREx_EnableUSBVoltageDetector();
 80019fc:	f004 fd18 	bl	8006430 <HAL_PWREx_EnableUSBVoltageDetector>
	
  HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x14);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2314      	movs	r3, #20
 8001a04:	4611      	mov	r1, r2
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <MX_USB_PCD_Init+0x84>)
 8001a08:	f004 fce0 	bl	80063cc <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x54);
 8001a0c:	2354      	movs	r3, #84	; 0x54
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2180      	movs	r1, #128	; 0x80
 8001a12:	4811      	ldr	r0, [pc, #68]	; (8001a58 <MX_USB_PCD_Init+0x84>)
 8001a14:	f004 fcda 	bl	80063cc <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_CDCACM_EPINCMD_ADDR, PCD_SNG_BUF, 0x94);
 8001a18:	2394      	movs	r3, #148	; 0x94
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	2181      	movs	r1, #129	; 0x81
 8001a1e:	480e      	ldr	r0, [pc, #56]	; (8001a58 <MX_USB_PCD_Init+0x84>)
 8001a20:	f004 fcd4 	bl	80063cc <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_CDCACM_EPOUT_ADDR, PCD_SNG_BUF, 0xD4);
 8001a24:	23d4      	movs	r3, #212	; 0xd4
 8001a26:	2200      	movs	r2, #0
 8001a28:	2101      	movs	r1, #1
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <MX_USB_PCD_Init+0x84>)
 8001a2c:	f004 fcce 	bl	80063cc <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_CDCACM_EPIN_ADDR, PCD_SNG_BUF, 0x114);
 8001a30:	f44f 738a 	mov.w	r3, #276	; 0x114
 8001a34:	2200      	movs	r2, #0
 8001a36:	2182      	movs	r1, #130	; 0x82
 8001a38:	4807      	ldr	r0, [pc, #28]	; (8001a58 <MX_USB_PCD_Init+0x84>)
 8001a3a:	f004 fcc7 	bl	80063cc <HAL_PCDEx_PMAConfig>
	ux_dcd_stm32_initialize((ULONG)USB_DRD_FS, (ULONG)&hpcd_USB_DRD_FS);
 8001a3e:	4906      	ldr	r1, [pc, #24]	; (8001a58 <MX_USB_PCD_Init+0x84>)
 8001a40:	4806      	ldr	r0, [pc, #24]	; (8001a5c <MX_USB_PCD_Init+0x88>)
 8001a42:	f00c fda1 	bl	800e588 <_ux_dcd_stm32_initialize>


	
  /* USER CODE END USB_Init 2 */

}
 8001a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8001a4a:	4803      	ldr	r0, [pc, #12]	; (8001a58 <MX_USB_PCD_Init+0x84>)
 8001a4c:	f003 bd66 	b.w	800551c <HAL_PCD_Start>
    Error_Handler();
 8001a50:	f000 fb8e 	bl	8002170 <Error_Handler>
 8001a54:	e7d0      	b.n	80019f8 <MX_USB_PCD_Init+0x24>
 8001a56:	bf00      	nop
 8001a58:	20004e0c 	.word	0x20004e0c
 8001a5c:	40016000 	.word	0x40016000

08001a60 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001a60:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a62:	2100      	movs	r1, #0
{
 8001a64:	4604      	mov	r4, r0
 8001a66:	b0cb      	sub	sp, #300	; 0x12c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a68:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001a6c:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6e:	e9cd 1103 	strd	r1, r1, [sp, #12]
 8001a72:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8001a76:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a78:	f00e fe88 	bl	801078c <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8001a7c:	4b21      	ldr	r3, [pc, #132]	; (8001b04 <HAL_PCD_MspInit+0xa4>)
 8001a7e:	6822      	ldr	r2, [r4, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_PCD_MspInit+0x28>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8001a84:	b04b      	add	sp, #300	; 0x12c
 8001a86:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a88:	2400      	movs	r4, #0
 8001a8a:	2510      	movs	r5, #16
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001a8c:	2330      	movs	r3, #48	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a8e:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a90:	e9cd 4508 	strd	r4, r5, [sp, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001a94:	9348      	str	r3, [sp, #288]	; 0x120
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a96:	f005 fb45 	bl	8007124 <HAL_RCCEx_PeriphCLKConfig>
 8001a9a:	bb80      	cbnz	r0, 8001afe <HAL_PCD_MspInit+0x9e>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a9c:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2102      	movs	r1, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001aa4:	220a      	movs	r2, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	4c18      	ldr	r4, [pc, #96]	; (8001b08 <HAL_PCD_MspInit+0xa8>)
 8001aa8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
 8001ab4:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	e9cd 0103 	strd	r0, r1, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	a903      	add	r1, sp, #12
 8001ac4:	4811      	ldr	r0, [pc, #68]	; (8001b0c <HAL_PCD_MspInit+0xac>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001ac8:	9207      	str	r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aca:	e9cd 5505 	strd	r5, r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f003 fb4f 	bl	8005170 <HAL_GPIO_Init>
    __HAL_RCC_USB_CLK_ENABLE();
 8001ad2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 5, 0);
 8001ad6:	462a      	mov	r2, r5
    __HAL_RCC_USB_CLK_ENABLE();
 8001ad8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001adc:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
 8001ae0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 5, 0);
 8001ae4:	2105      	movs	r1, #5
    __HAL_RCC_USB_CLK_ENABLE();
 8001ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aea:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 5, 0);
 8001aec:	204a      	movs	r0, #74	; 0x4a
    __HAL_RCC_USB_CLK_ENABLE();
 8001aee:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(USB_DRD_FS_IRQn, 5, 0);
 8001af0:	f002 fe22 	bl	8004738 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_DRD_FS_IRQn);
 8001af4:	204a      	movs	r0, #74	; 0x4a
 8001af6:	f002 fe5d 	bl	80047b4 <HAL_NVIC_EnableIRQ>
}
 8001afa:	b04b      	add	sp, #300	; 0x12c
 8001afc:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8001afe:	f000 fb37 	bl	8002170 <Error_Handler>
 8001b02:	e7cb      	b.n	8001a9c <HAL_PCD_MspInit+0x3c>
 8001b04:	40016000 	.word	0x40016000
 8001b08:	44020c00 	.word	0x44020c00
 8001b0c:	42020000 	.word	0x42020000

08001b10 <Draw_Region>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
static void Draw_Region(uint32_t x, uint32_t y, P_BitMap ptBitMap)
{ 
 8001b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b14:	4614      	mov	r4, r2
 8001b16:	460e      	mov	r6, r1
 8001b18:	4605      	mov	r5, r0
#ifdef FERRRTOS_FLAG
	/* 获得mutex */
	xSemaphoreTake(g_spi_lcd_lock, portMAX_DELAY);
 8001b1a:	4f11      	ldr	r7, [pc, #68]	; (8001b60 <Draw_Region+0x50>)
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b20:	6838      	ldr	r0, [r7, #0]
 8001b22:	f001 f827 	bl	8002b74 <xQueueSemaphoreTake>
#endif
    /* 设置要显示的区域 */
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001b26:	6863      	ldr	r3, [r4, #4]
 8001b28:	1e72      	subs	r2, r6, #1
 8001b2a:	4413      	add	r3, r2
 8001b2c:	6822      	ldr	r2, [r4, #0]
 8001b2e:	1e68      	subs	r0, r5, #1
 8001b30:	4402      	add	r2, r0
 8001b32:	4631      	mov	r1, r6
 8001b34:	4628      	mov	r0, r5
 8001b36:	f002 fd5f 	bl	80045f8 <LCD_SetWindows>

    /* 设置D/C引脚表示后面要发送数据 */
    LCD_SetDataLine();
 8001b3a:	f002 fbf9 	bl	8004330 <LCD_SetDataLine>
    
    /* 发送数据 */
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001b3e:	e9d4 3100 	ldrd	r3, r1, [r4]
 8001b42:	fb03 f101 	mul.w	r1, r3, r1
 8001b46:	68a0      	ldr	r0, [r4, #8]
 8001b48:	0049      	lsls	r1, r1, #1
 8001b4a:	f002 fbf9 	bl	8004340 <LCD_WriteDatas>
#ifdef FERRRTOS_FLAG
	/* 释放mutex */
    xSemaphoreGive(g_spi_lcd_lock);    
 8001b4e:	2300      	movs	r3, #0
 8001b50:	6838      	ldr	r0, [r7, #0]
 8001b52:	461a      	mov	r2, r3
#endif
}
 8001b54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    xSemaphoreGive(g_spi_lcd_lock);    
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f000 be05 	b.w	8002768 <xQueueGenericSend>
 8001b5e:	bf00      	nop
 8001b60:	200050f8 	.word	0x200050f8

08001b64 <Draw_Init>:
{
 8001b64:	b508      	push	{r3, lr}
	g_spi_lcd_lock = xSemaphoreCreateMutex();
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 fe9c 	bl	80028a4 <xQueueCreateMutex>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <Draw_Init+0x1c>)
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 8001b70:	4904      	ldr	r1, [pc, #16]	; (8001b84 <Draw_Init+0x20>)
	g_spi_lcd_lock = xSemaphoreCreateMutex();
 8001b72:	601a      	str	r2, [r3, #0]
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 8001b74:	4804      	ldr	r0, [pc, #16]	; (8001b88 <Draw_Init+0x24>)
}
 8001b76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 8001b7a:	f002 bd31 	b.w	80045e0 <LCD_GetInfo>
 8001b7e:	bf00      	nop
 8001b80:	200050f8 	.word	0x200050f8
 8001b84:	200050f0 	.word	0x200050f0
 8001b88:	200050f4 	.word	0x200050f4

08001b8c <Draw_Clear>:
{
 8001b8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b8e:	4606      	mov	r6, r0
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001b90:	2100      	movs	r1, #0
 8001b92:	4f17      	ldr	r7, [pc, #92]	; (8001bf0 <Draw_Clear+0x64>)
    g = g >> 2;
 8001b94:	f3c6 2485 	ubfx	r4, r6, #10, #6
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001b98:	4d16      	ldr	r5, [pc, #88]	; (8001bf4 <Draw_Clear+0x68>)
    r = r >> 3;
 8001b9a:	f3c6 4cc4 	ubfx	ip, r6, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001b9e:	0164      	lsls	r4, r4, #5
 8001ba0:	ea44 24cc 	orr.w	r4, r4, ip, lsl #11
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	683a      	ldr	r2, [r7, #0]
    b = b >> 2;
 8001ba8:	f3c6 0685 	ubfx	r6, r6, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001bac:	4334      	orrs	r4, r6
{
 8001bae:	b083      	sub	sp, #12
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	4608      	mov	r0, r1
 8001bb4:	3a01      	subs	r2, #1
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 8001bb6:	ba64      	rev16	r4, r4
 8001bb8:	f8ad 4006 	strh.w	r4, [sp, #6]
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001bbc:	f002 fd1c 	bl	80045f8 <LCD_SetWindows>
    LCD_SetDataLine();
 8001bc0:	f002 fbb6 	bl	8004330 <LCD_SetDataLine>
    for(uint32_t x = 0; x < g_lcd_width; x++)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2600      	movs	r6, #0
 8001bc8:	b17b      	cbz	r3, 8001bea <Draw_Clear+0x5e>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 8001bca:	682b      	ldr	r3, [r5, #0]
 8001bcc:	2400      	movs	r4, #0
 8001bce:	b143      	cbz	r3, 8001be2 <Draw_Clear+0x56>
            LCD_WriteDatas((uint8_t *)&wColor, 2);
 8001bd0:	2102      	movs	r1, #2
 8001bd2:	f10d 0006 	add.w	r0, sp, #6
 8001bd6:	f002 fbb3 	bl	8004340 <LCD_WriteDatas>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 8001bda:	682b      	ldr	r3, [r5, #0]
 8001bdc:	3401      	adds	r4, #1
 8001bde:	42a3      	cmp	r3, r4
 8001be0:	d8f6      	bhi.n	8001bd0 <Draw_Clear+0x44>
    for(uint32_t x = 0; x < g_lcd_width; x++)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	3601      	adds	r6, #1
 8001be6:	42b3      	cmp	r3, r6
 8001be8:	d8ef      	bhi.n	8001bca <Draw_Clear+0x3e>
}
 8001bea:	b003      	add	sp, #12
 8001bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	200050f4 	.word	0x200050f4
 8001bf4:	200050f0 	.word	0x200050f0

08001bf8 <Draw_ASCII>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_ASCII(uint32_t x, uint32_t y, char c, uint32_t front_color, uint32_t back_color)
{
 8001bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bfc:	b0c5      	sub	sp, #276	; 0x114
 8001bfe:	f10d 0910 	add.w	r9, sp, #16
 8001c02:	464e      	mov	r6, r9
 8001c04:	9c4c      	ldr	r4, [sp, #304]	; 0x130
 8001c06:	f50d 7888 	add.w	r8, sp, #272	; 0x110
    g = g >> 2;
 8001c0a:	f3c4 2585 	ubfx	r5, r4, #10, #6
    r = r >> 3;
 8001c0e:	f3c4 47c4 	ubfx	r7, r4, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c12:	016d      	lsls	r5, r5, #5
 8001c14:	ea45 25c7 	orr.w	r5, r5, r7, lsl #11
    b = b >> 2;
 8001c18:	f3c4 0485 	ubfx	r4, r4, #2, #6
 8001c1c:	4f18      	ldr	r7, [pc, #96]	; (8001c80 <Draw_ASCII+0x88>)
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c1e:	4325      	orrs	r5, r4
    g = g >> 2;
 8001c20:	f3c3 2485 	ubfx	r4, r3, #10, #6
 8001c24:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c28:	0164      	lsls	r4, r4, #5
    r = r >> 3;
 8001c2a:	f3c3 42c4 	ubfx	r2, r3, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c2e:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
    b = b >> 2;
 8001c32:	f3c3 0385 	ubfx	r3, r3, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c36:	431c      	orrs	r4, r3
 8001c38:	ba6d      	rev16	r5, r5
 8001c3a:	ba64      	rev16	r4, r4
 8001c3c:	b2ad      	uxth	r5, r5
    wColor = (wColor >> 8) | (wColor << 8);
 8001c3e:	b2a4      	uxth	r4, r4
    for (i = 0; i < 16; i++)
    {
        data = fontdata_8x16[c*16+i];
        for (bit = 7; bit >= 0; bit--)
        {
            if (data & (1<<bit))
 8001c40:	46b4      	mov	ip, r6
        for (bit = 7; bit >= 0; bit--)
 8001c42:	2307      	movs	r3, #7
        data = fontdata_8x16[c*16+i];
 8001c44:	f817 2b01 	ldrb.w	r2, [r7], #1
            if (data & (1<<bit))
 8001c48:	fa42 fe03 	asr.w	lr, r2, r3
 8001c4c:	f01e 0f01 	tst.w	lr, #1
 8001c50:	bf14      	ite	ne
 8001c52:	46a6      	movne	lr, r4
 8001c54:	46ae      	moveq	lr, r5
        for (bit = 7; bit >= 0; bit--)
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
            else
            {
                color = back_color;
            }
            
            buf[i * 8 + (7-bit)] = color;
 8001c5c:	f82c eb02 	strh.w	lr, [ip], #2
        for (bit = 7; bit >= 0; bit--)
 8001c60:	d1f2      	bne.n	8001c48 <Draw_ASCII+0x50>
    for (i = 0; i < 16; i++)
 8001c62:	3610      	adds	r6, #16
 8001c64:	4546      	cmp	r6, r8
 8001c66:	d1eb      	bne.n	8001c40 <Draw_ASCII+0x48>
        }
    }

    bitmap.width = 8;
 8001c68:	2408      	movs	r4, #8
    bitmap.height = 16;    
 8001c6a:	2310      	movs	r3, #16
    bitmap.datas = (uint8_t *)buf;
    
    Draw_Region(x, y, &bitmap);
 8001c6c:	aa01      	add	r2, sp, #4
    bitmap.height = 16;    
 8001c6e:	e9cd 3902 	strd	r3, r9, [sp, #8]
    bitmap.width = 8;
 8001c72:	9401      	str	r4, [sp, #4]
    Draw_Region(x, y, &bitmap);
 8001c74:	f7ff ff4c 	bl	8001b10 <Draw_Region>

    return 8; /* 这个字符宽度为8 */
}
 8001c78:	4620      	mov	r0, r4
 8001c7a:	b045      	add	sp, #276	; 0x114
 8001c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001c80:	080109e4 	.word	0x080109e4

08001c84 <Draw_String>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_String(uint32_t x, uint32_t y, char *str, uint32_t front_color, uint32_t back_color)
{
 8001c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c88:	468b      	mov	fp, r1
 8001c8a:	469a      	mov	sl, r3
    size_t i;
    int line_width = 0;
 8001c8c:	2700      	movs	r7, #0
{
 8001c8e:	b085      	sub	sp, #20
 8001c90:	4605      	mov	r5, r0
    for (i = 0; i < strlen(str); i++)
 8001c92:	4610      	mov	r0, r2
{
 8001c94:	4616      	mov	r6, r2
    for (i = 0; i < strlen(str); i++)
 8001c96:	463c      	mov	r4, r7
 8001c98:	f00e fdca 	bl	8010830 <strlen>
            if (x >= 8)
                x -= 8;
        }
        else
        {
            if (x + 8 >= g_lcd_width)
 8001c9c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001d18 <Draw_String+0x94>
 8001ca0:	4653      	mov	r3, sl
            {
                x = 0;
                y += 16;
            }

            if (y + 16 >= g_lcd_height)
 8001ca2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001d1c <Draw_String+0x98>
 8001ca6:	46da      	mov	sl, fp
 8001ca8:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    for (i = 0; i < strlen(str); i++)
 8001cac:	e022      	b.n	8001cf4 <Draw_String+0x70>
        else if (str[i] == '\n')
 8001cae:	2a0a      	cmp	r2, #10
 8001cb0:	d027      	beq.n	8001d02 <Draw_String+0x7e>
        else if (str[i] == '\b')
 8001cb2:	2a08      	cmp	r2, #8
 8001cb4:	d028      	beq.n	8001d08 <Draw_String+0x84>
            if (x + 8 >= g_lcd_width)
 8001cb6:	f8d9 1000 	ldr.w	r1, [r9]
 8001cba:	f105 0008 	add.w	r0, r5, #8
 8001cbe:	4288      	cmp	r0, r1
                y += 16;
 8001cc0:	bf28      	it	cs
 8001cc2:	f10a 0a10 	addcs.w	sl, sl, #16
            if (y + 16 >= g_lcd_height)
 8001cc6:	f8d8 1000 	ldr.w	r1, [r8]
 8001cca:	f10a 0010 	add.w	r0, sl, #16
                x = 0;
 8001cce:	bf28      	it	cs
 8001cd0:	2500      	movcs	r5, #0
            if (y + 16 >= g_lcd_height)
 8001cd2:	4288      	cmp	r0, r1
 8001cd4:	d21c      	bcs.n	8001d10 <Draw_String+0x8c>
                return line_width;

            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 8001cd6:	4651      	mov	r1, sl
 8001cd8:	4628      	mov	r0, r5
 8001cda:	f8cd b000 	str.w	fp, [sp]
 8001cde:	9303      	str	r3, [sp, #12]
 8001ce0:	f7ff ff8a 	bl	8001bf8 <Draw_ASCII>
 8001ce4:	4602      	mov	r2, r0
    for (i = 0; i < strlen(str); i++)
 8001ce6:	4630      	mov	r0, r6
            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 8001ce8:	4417      	add	r7, r2
    for (i = 0; i < strlen(str); i++)
 8001cea:	f00e fda1 	bl	8010830 <strlen>
 8001cee:	9b03      	ldr	r3, [sp, #12]
            x += 8;
 8001cf0:	3508      	adds	r5, #8
    for (i = 0; i < strlen(str); i++)
 8001cf2:	3401      	adds	r4, #1
 8001cf4:	4284      	cmp	r4, r0
 8001cf6:	d20b      	bcs.n	8001d10 <Draw_String+0x8c>
        if (str[i] == '\r')
 8001cf8:	5d32      	ldrb	r2, [r6, r4]
 8001cfa:	2a0d      	cmp	r2, #13
 8001cfc:	d1d7      	bne.n	8001cae <Draw_String+0x2a>
            x = 0;
 8001cfe:	2500      	movs	r5, #0
 8001d00:	e7f7      	b.n	8001cf2 <Draw_String+0x6e>
            y += 16;
 8001d02:	f10a 0a10 	add.w	sl, sl, #16
 8001d06:	e7f4      	b.n	8001cf2 <Draw_String+0x6e>
            if (x >= 8)
 8001d08:	2d07      	cmp	r5, #7
 8001d0a:	d9f2      	bls.n	8001cf2 <Draw_String+0x6e>
                x -= 8;
 8001d0c:	3d08      	subs	r5, #8
 8001d0e:	e7f0      	b.n	8001cf2 <Draw_String+0x6e>
        }
    }

    return line_width;
}
 8001d10:	4638      	mov	r0, r7
 8001d12:	b005      	add	sp, #20
 8001d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d18:	200050f4 	.word	0x200050f4
 8001d1c:	200050f0 	.word	0x200050f0

08001d20 <MX_GPDMA1_Init>:
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <MX_GPDMA1_Init+0x64>)
{
 8001d22:	b500      	push	{lr}
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001d24:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
{
 8001d28:	b083      	sub	sp, #12
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001d2a:	f040 0001 	orr.w	r0, r0, #1
 8001d2e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

  /* GPDMA1 interrupt Init */
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001d36:	2200      	movs	r2, #0
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001d38:	f003 0301 	and.w	r3, r3, #1
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001d3c:	2105      	movs	r1, #5
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001d3e:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001d40:	201b      	movs	r0, #27
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001d42:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001d44:	f002 fcf8 	bl	8004738 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001d48:	201b      	movs	r0, #27
 8001d4a:	f002 fd33 	bl	80047b4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 5, 0);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2105      	movs	r1, #5
 8001d52:	201c      	movs	r0, #28
 8001d54:	f002 fcf0 	bl	8004738 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001d58:	201c      	movs	r0, #28
 8001d5a:	f002 fd2b 	bl	80047b4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 5, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2105      	movs	r1, #5
 8001d62:	201d      	movs	r0, #29
 8001d64:	f002 fce8 	bl	8004738 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001d68:	201d      	movs	r0, #29
 8001d6a:	f002 fd23 	bl	80047b4 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 5, 0);
 8001d6e:	201e      	movs	r0, #30
 8001d70:	2200      	movs	r2, #0
 8001d72:	2105      	movs	r1, #5
 8001d74:	f002 fce0 	bl	8004738 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001d78:	201e      	movs	r0, #30
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001d7a:	b003      	add	sp, #12
 8001d7c:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001d80:	f002 bd18 	b.w	80047b4 <HAL_NVIC_EnableIRQ>
 8001d84:	44020c00 	.word	0x44020c00

08001d88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8001d8a:	1e43      	subs	r3, r0, #1
 8001d8c:	330a      	adds	r3, #10
 8001d8e:	d85c      	bhi.n	8001e4a <pvPortMalloc+0xc2>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
        {
            xWantedSize += xHeapStructSize;
 8001d90:	f100 0408 	add.w	r4, r0, #8

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001d94:	f010 0007 	ands.w	r0, r0, #7
 8001d98:	d161      	bne.n	8001e5e <pvPortMalloc+0xd6>

    vTaskSuspendAll();
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001d9a:	4e4d      	ldr	r6, [pc, #308]	; (8001ed0 <pvPortMalloc+0x148>)
    vTaskSuspendAll();
 8001d9c:	f00b fd48 	bl	800d830 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001da0:	6833      	ldr	r3, [r6, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 808c 	beq.w	8001ec0 <pvPortMalloc+0x138>
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001da8:	4623      	mov	r3, r4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	dd52      	ble.n	8001e54 <pvPortMalloc+0xcc>
 8001dae:	f8df e138 	ldr.w	lr, [pc, #312]	; 8001ee8 <pvPortMalloc+0x160>
 8001db2:	f8de 7000 	ldr.w	r7, [lr]
 8001db6:	42a7      	cmp	r7, r4
 8001db8:	d34c      	bcc.n	8001e54 <pvPortMalloc+0xcc>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001dba:	4946      	ldr	r1, [pc, #280]	; (8001ed4 <pvPortMalloc+0x14c>)
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001dbc:	4846      	ldr	r0, [pc, #280]	; (8001ed8 <pvPortMalloc+0x150>)
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001dbe:	680b      	ldr	r3, [r1, #0]
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001dc0:	4283      	cmp	r3, r0
 8001dc2:	d353      	bcc.n	8001e6c <pvPortMalloc+0xe4>
 8001dc4:	4d45      	ldr	r5, [pc, #276]	; (8001edc <pvPortMalloc+0x154>)
 8001dc6:	42ab      	cmp	r3, r5
 8001dc8:	d850      	bhi.n	8001e6c <pvPortMalloc+0xe4>
 8001dca:	468c      	mov	ip, r1
 8001dcc:	e007      	b.n	8001dde <pvPortMalloc+0x56>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	b142      	cbz	r2, 8001de4 <pvPortMalloc+0x5c>
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001dd2:	4282      	cmp	r2, r0
 8001dd4:	d36e      	bcc.n	8001eb4 <pvPortMalloc+0x12c>
 8001dd6:	42aa      	cmp	r2, r5
 8001dd8:	469c      	mov	ip, r3
 8001dda:	d86b      	bhi.n	8001eb4 <pvPortMalloc+0x12c>
 8001ddc:	4613      	mov	r3, r2
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001dde:	6859      	ldr	r1, [r3, #4]
 8001de0:	42a1      	cmp	r1, r4
 8001de2:	d3f4      	bcc.n	8001dce <pvPortMalloc+0x46>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001de4:	6832      	ldr	r2, [r6, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d034      	beq.n	8001e54 <pvPortMalloc+0xcc>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8001dea:	f8dc 6000 	ldr.w	r6, [ip]
 8001dee:	3608      	adds	r6, #8
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8001df0:	4286      	cmp	r6, r0
 8001df2:	d362      	bcc.n	8001eba <pvPortMalloc+0x132>
 8001df4:	42ae      	cmp	r6, r5
 8001df6:	d860      	bhi.n	8001eba <pvPortMalloc+0x132>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001df8:	6818      	ldr	r0, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8001dfa:	42a1      	cmp	r1, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001dfc:	f8cc 0000 	str.w	r0, [ip]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8001e00:	d360      	bcc.n	8001ec4 <pvPortMalloc+0x13c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001e02:	1b0d      	subs	r5, r1, r4
 8001e04:	2d10      	cmp	r5, #16
 8001e06:	d907      	bls.n	8001e18 <pvPortMalloc+0x90>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001e08:	191a      	adds	r2, r3, r4
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e0a:	0751      	lsls	r1, r2, #29
 8001e0c:	d15d      	bne.n	8001eca <pvPortMalloc+0x142>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001e0e:	4621      	mov	r1, r4
 8001e10:	6055      	str	r5, [r2, #4]
                        pxBlock->xBlockSize = xWantedSize;

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8001e12:	5118      	str	r0, [r3, r4]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8001e14:	f8cc 2000 	str.w	r2, [ip]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e18:	4831      	ldr	r0, [pc, #196]	; (8001ee0 <pvPortMalloc+0x158>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e1a:	1a7f      	subs	r7, r7, r1
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e1c:	6804      	ldr	r4, [r0, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001e1e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001e22:	42a7      	cmp	r7, r4
                    pxBlock->pxNextFreeBlock = NULL;
 8001e24:	f04f 0400 	mov.w	r4, #0
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001e28:	bf38      	it	cc
 8001e2a:	6007      	strcc	r7, [r0, #0]
                    xNumberOfSuccessfulAllocations++;
 8001e2c:	482d      	ldr	r0, [pc, #180]	; (8001ee4 <pvPortMalloc+0x15c>)
                    heapALLOCATE_BLOCK( pxBlock );
 8001e2e:	6059      	str	r1, [r3, #4]
                    xNumberOfSuccessfulAllocations++;
 8001e30:	6802      	ldr	r2, [r0, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 8001e32:	601c      	str	r4, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001e34:	3201      	adds	r2, #1
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001e36:	f8ce 7000 	str.w	r7, [lr]
                    xNumberOfSuccessfulAllocations++;
 8001e3a:	6002      	str	r2, [r0, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001e3c:	f00b fd00 	bl	800d840 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001e40:	0773      	lsls	r3, r6, #29
 8001e42:	d00a      	beq.n	8001e5a <pvPortMalloc+0xd2>
 8001e44:	f000 fb28 	bl	8002498 <ulSetInterruptMask>
 8001e48:	e7fe      	b.n	8001e48 <pvPortMalloc+0xc0>
        if( pxEnd == NULL )
 8001e4a:	4e21      	ldr	r6, [pc, #132]	; (8001ed0 <pvPortMalloc+0x148>)
    vTaskSuspendAll();
 8001e4c:	f00b fcf0 	bl	800d830 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001e50:	6833      	ldr	r3, [r6, #0]
 8001e52:	b173      	cbz	r3, 8001e72 <pvPortMalloc+0xea>
    ( void ) xTaskResumeAll();
 8001e54:	f00b fcf4 	bl	800d840 <xTaskResumeAll>
 8001e58:	2600      	movs	r6, #0
    return pvReturn;
}
 8001e5a:	4630      	mov	r0, r6
 8001e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001e5e:	f1c0 0008 	rsb	r0, r0, #8
                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001e62:	43c3      	mvns	r3, r0
 8001e64:	42a3      	cmp	r3, r4
 8001e66:	d3f0      	bcc.n	8001e4a <pvPortMalloc+0xc2>
                    xWantedSize += xAdditionalRequiredSize;
 8001e68:	4404      	add	r4, r0
 8001e6a:	e796      	b.n	8001d9a <pvPortMalloc+0x12>
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001e6c:	f000 fb14 	bl	8002498 <ulSetInterruptMask>
 8001e70:	e7fe      	b.n	8001e70 <pvPortMalloc+0xe8>
        if( pxEnd == NULL )
 8001e72:	461c      	mov	r4, r3
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001e74:	4818      	ldr	r0, [pc, #96]	; (8001ed8 <pvPortMalloc+0x150>)

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001e76:	0745      	lsls	r5, r0, #29
 8001e78:	d115      	bne.n	8001ea6 <pvPortMalloc+0x11e>
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
    xStart.xBlockSize = ( size_t ) 0;

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4605      	mov	r5, r0
 8001e7e:	f500 42a0 	add.w	r2, r0, #20480	; 0x5000
    xStart.xBlockSize = ( size_t ) 0;
 8001e82:	2000      	movs	r0, #0
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8001e84:	3a08      	subs	r2, #8
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001e86:	f022 0207 	bic.w	r2, r2, #7
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8001e8a:	4f12      	ldr	r7, [pc, #72]	; (8001ed4 <pvPortMalloc+0x14c>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001e8c:	1a51      	subs	r1, r2, r1
    xStart.xBlockSize = ( size_t ) 0;
 8001e8e:	e9c7 5000 	strd	r5, r0, [r7]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8001e92:	6032      	str	r2, [r6, #0]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8001e94:	e9c2 0000 	strd	r0, r0, [r2]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001e98:	e9c5 2100 	strd	r2, r1, [r5]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001e9c:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <pvPortMalloc+0x158>)
 8001e9e:	6011      	str	r1, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <pvPortMalloc+0x160>)
 8001ea2:	6011      	str	r1, [r2, #0]
}
 8001ea4:	e781      	b.n	8001daa <pvPortMalloc+0x22>
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ea6:	1dc1      	adds	r1, r0, #7
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001ea8:	f021 0107 	bic.w	r1, r1, #7
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8001eac:	460d      	mov	r5, r1
 8001eae:	f500 42a0 	add.w	r2, r0, #20480	; 0x5000
 8001eb2:	e7e6      	b.n	8001e82 <pvPortMalloc+0xfa>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001eb4:	f000 faf0 	bl	8002498 <ulSetInterruptMask>
 8001eb8:	e7fe      	b.n	8001eb8 <pvPortMalloc+0x130>
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8001eba:	f000 faed 	bl	8002498 <ulSetInterruptMask>
 8001ebe:	e7fe      	b.n	8001ebe <pvPortMalloc+0x136>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	e7d7      	b.n	8001e74 <pvPortMalloc+0xec>
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8001ec4:	f000 fae8 	bl	8002498 <ulSetInterruptMask>
 8001ec8:	e7fe      	b.n	8001ec8 <pvPortMalloc+0x140>
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001eca:	f000 fae5 	bl	8002498 <ulSetInterruptMask>
 8001ece:	e7fe      	b.n	8001ece <pvPortMalloc+0x146>
 8001ed0:	200050fc 	.word	0x200050fc
 8001ed4:	2000a110 	.word	0x2000a110
 8001ed8:	20005100 	.word	0x20005100
 8001edc:	2000a0ff 	.word	0x2000a0ff
 8001ee0:	2000a104 	.word	0x2000a104
 8001ee4:	2000a108 	.word	0x2000a108
 8001ee8:	2000a100 	.word	0x2000a100

08001eec <vPortFree>:
    if( pv != NULL )
 8001eec:	b1b0      	cbz	r0, 8001f1c <vPortFree+0x30>
{
 8001eee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8001ef0:	4e2f      	ldr	r6, [pc, #188]	; (8001fb0 <vPortFree+0xc4>)
        puc -= xHeapStructSize;
 8001ef2:	f1a0 0508 	sub.w	r5, r0, #8
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8001ef6:	42b5      	cmp	r5, r6
 8001ef8:	4604      	mov	r4, r0
 8001efa:	d30c      	bcc.n	8001f16 <vPortFree+0x2a>
 8001efc:	4f2d      	ldr	r7, [pc, #180]	; (8001fb4 <vPortFree+0xc8>)
 8001efe:	42bd      	cmp	r5, r7
 8001f00:	d809      	bhi.n	8001f16 <vPortFree+0x2a>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001f02:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	da09      	bge.n	8001f1e <vPortFree+0x32>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001f0a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001f0e:	b149      	cbz	r1, 8001f24 <vPortFree+0x38>
 8001f10:	f000 fac2 	bl	8002498 <ulSetInterruptMask>
 8001f14:	e7fe      	b.n	8001f14 <vPortFree+0x28>
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8001f16:	f000 fabf 	bl	8002498 <ulSetInterruptMask>
 8001f1a:	e7fe      	b.n	8001f1a <vPortFree+0x2e>
 8001f1c:	4770      	bx	lr
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001f1e:	f000 fabb 	bl	8002498 <ulSetInterruptMask>
 8001f22:	e7fe      	b.n	8001f22 <vPortFree+0x36>
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8001f24:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
                heapFREE_BLOCK( pxLink );
 8001f28:	4613      	mov	r3, r2
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8001f2a:	f022 0207 	bic.w	r2, r2, #7
                heapFREE_BLOCK( pxLink );
 8001f2e:	f840 3c04 	str.w	r3, [r0, #-4]
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8001f32:	bb4a      	cbnz	r2, 8001f88 <vPortFree+0x9c>
                vTaskSuspendAll();
 8001f34:	f00b fc7c 	bl	800d830 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001f38:	4a1f      	ldr	r2, [pc, #124]	; (8001fb8 <vPortFree+0xcc>)
 8001f3a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001f3e:	6813      	ldr	r3, [r2, #0]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001f40:	481e      	ldr	r0, [pc, #120]	; (8001fbc <vPortFree+0xd0>)
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001f42:	440b      	add	r3, r1
 8001f44:	6013      	str	r3, [r2, #0]
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001f46:	4603      	mov	r3, r0
 8001f48:	461a      	mov	r2, r3
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	429d      	cmp	r5, r3
 8001f4e:	d8fb      	bhi.n	8001f48 <vPortFree+0x5c>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8001f50:	4282      	cmp	r2, r0
 8001f52:	d006      	beq.n	8001f62 <vPortFree+0x76>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8001f54:	42b2      	cmp	r2, r6
 8001f56:	d301      	bcc.n	8001f5c <vPortFree+0x70>
 8001f58:	42ba      	cmp	r2, r7
 8001f5a:	d902      	bls.n	8001f62 <vPortFree+0x76>
 8001f5c:	f000 fa9c 	bl	8002498 <ulSetInterruptMask>
 8001f60:	e7fe      	b.n	8001f60 <vPortFree+0x74>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f62:	6850      	ldr	r0, [r2, #4]
 8001f64:	1814      	adds	r4, r2, r0
 8001f66:	42a5      	cmp	r5, r4
 8001f68:	d01d      	beq.n	8001fa6 <vPortFree+0xba>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001f6a:	1868      	adds	r0, r5, r1
 8001f6c:	4283      	cmp	r3, r0
 8001f6e:	d010      	beq.n	8001f92 <vPortFree+0xa6>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f70:	602b      	str	r3, [r5, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8001f72:	42aa      	cmp	r2, r5
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8001f74:	bf18      	it	ne
 8001f76:	6015      	strne	r5, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 8001f78:	4a11      	ldr	r2, [pc, #68]	; (8001fc0 <vPortFree+0xd4>)
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	6013      	str	r3, [r2, #0]
}
 8001f80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                ( void ) xTaskResumeAll();
 8001f84:	f00b bc5c 	b.w	800d840 <xTaskResumeAll>
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 8001f88:	f1a3 0208 	sub.w	r2, r3, #8
 8001f8c:	f00e fbfe 	bl	801078c <memset>
 8001f90:	e7d0      	b.n	8001f34 <vPortFree+0x48>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8001f92:	480c      	ldr	r0, [pc, #48]	; (8001fc4 <vPortFree+0xd8>)
 8001f94:	6800      	ldr	r0, [r0, #0]
 8001f96:	4283      	cmp	r3, r0
 8001f98:	d0ea      	beq.n	8001f70 <vPortFree+0x84>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8001f9a:	e9d3 3000 	ldrd	r3, r0, [r3]
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8001f9e:	4401      	add	r1, r0
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8001fa0:	e9c5 3100 	strd	r3, r1, [r5]
 8001fa4:	e7e5      	b.n	8001f72 <vPortFree+0x86>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001fa6:	4401      	add	r1, r0
 8001fa8:	4615      	mov	r5, r2
 8001faa:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8001fac:	e7dd      	b.n	8001f6a <vPortFree+0x7e>
 8001fae:	bf00      	nop
 8001fb0:	20005100 	.word	0x20005100
 8001fb4:	2000a0ff 	.word	0x2000a0ff
 8001fb8:	2000a100 	.word	0x2000a100
 8001fbc:	2000a110 	.word	0x2000a110
 8001fc0:	2000a10c 	.word	0x2000a10c
 8001fc4:	200050fc 	.word	0x200050fc

08001fc8 <rt_hw_console_output>:

rt_weak void rt_hw_console_output(const char *str)
{
    /* empty console output */

    myputstr(str);
 8001fc8:	f7ff bcf6 	b.w	80019b8 <myputstr>

08001fcc <rt_kprintf>:
 * @param fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
rt_weak int rt_kprintf(const char *fmt, ...)
{
 8001fcc:	b40f      	push	{r0, r1, r2, r3}
 8001fce:	b530      	push	{r4, r5, lr}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	ab06      	add	r3, sp, #24
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8001fd4:	4d0a      	ldr	r5, [pc, #40]	; (8002000 <rt_kprintf+0x34>)
{
 8001fd6:	f853 2b04 	ldr.w	r2, [r3], #4
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8001fda:	217f      	movs	r1, #127	; 0x7f
 8001fdc:	4628      	mov	r0, r5
    va_start(args, fmt);
 8001fde:	9301      	str	r3, [sp, #4]
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8001fe0:	f001 fe24 	bl	8003c2c <rt_vsnprintf>
 8001fe4:	4604      	mov	r4, r0
    if (length > RT_CONSOLEBUF_SIZE - 1)
    {
        length = RT_CONSOLEBUF_SIZE - 1;
    }

    rt_hw_console_output(rt_log_buf);
 8001fe6:	4628      	mov	r0, r5
 8001fe8:	f7ff ffee 	bl	8001fc8 <rt_hw_console_output>

    va_end(args);

    return length;
}
 8001fec:	2c7f      	cmp	r4, #127	; 0x7f
 8001fee:	4620      	mov	r0, r4
 8001ff0:	bf28      	it	cs
 8001ff2:	207f      	movcs	r0, #127	; 0x7f
 8001ff4:	b003      	add	sp, #12
 8001ff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001ffa:	b004      	add	sp, #16
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	2000a118 	.word	0x2000a118

08002004 <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002004:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002008:	2200      	movs	r2, #0
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800200a:	f100 0308 	add.w	r3, r0, #8
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800200e:	e9c0 3101 	strd	r3, r1, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002012:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002016:	6002      	str	r2, [r0, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop

0800201c <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800201c:	2300      	movs	r3, #0
 800201e:	6103      	str	r3, [r0, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop

08002024 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002024:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002026:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002028:	1c6b      	adds	r3, r5, #1
 800202a:	d010      	beq.n	800204e <vListInsert+0x2a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800202c:	f100 0308 	add.w	r3, r0, #8
 8002030:	461c      	mov	r4, r3
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	42aa      	cmp	r2, r5
 8002038:	d9fa      	bls.n	8002030 <vListInsert+0xc>

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800203a:	6802      	ldr	r2, [r0, #0]
    pxNewListItem->pxNext = pxIterator->pxNext;
 800203c:	604b      	str	r3, [r1, #4]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800203e:	3201      	adds	r2, #1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002040:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002042:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8002044:	6061      	str	r1, [r4, #4]
    pxNewListItem->pxContainer = pxList;
 8002046:	6108      	str	r0, [r1, #16]

    traceRETURN_vListInsert();
}
 8002048:	bc30      	pop	{r4, r5}
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800204a:	6002      	str	r2, [r0, #0]
}
 800204c:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 800204e:	6904      	ldr	r4, [r0, #16]
    pxNewListItem->pxNext = pxIterator->pxNext;
 8002050:	6863      	ldr	r3, [r4, #4]
 8002052:	e7f2      	b.n	800203a <vListInsert+0x16>

08002054 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002054:	4603      	mov	r3, r0
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002056:	6902      	ldr	r2, [r0, #16]
{
 8002058:	b410      	push	{r4}

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800205a:	6854      	ldr	r4, [r2, #4]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800205c:	6840      	ldr	r0, [r0, #4]
 800205e:	6899      	ldr	r1, [r3, #8]
    if( pxList->pxIndex == pxItemToRemove )
 8002060:	429c      	cmp	r4, r3
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002062:	6081      	str	r1, [r0, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002064:	6048      	str	r0, [r1, #4]
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002066:	bf08      	it	eq
 8002068:	6051      	streq	r1, [r2, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800206a:	2100      	movs	r1, #0
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800206c:	6810      	ldr	r0, [r2, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
 800206e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002072:	3801      	subs	r0, #1
    pxItemToRemove->pxContainer = NULL;
 8002074:	6119      	str	r1, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002076:	6010      	str	r0, [r2, #0]
}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop

0800207c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 800207c:	b500      	push	{lr}
 800207e:	b09d      	sub	sp, #116	; 0x74

//	uint8_t c = 0;
	//float sum = 3.141592654;

  HAL_Init();
 8002080:	f002 fb10 	bl	80046a4 <HAL_Init>
  }
}

static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002084:	2300      	movs	r3, #0
 8002086:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800208a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800208e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002092:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002096:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800209a:	4a32      	ldr	r2, [pc, #200]	; (8002164 <main+0xe8>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800209e:	9302      	str	r3, [sp, #8]
 80020a0:	9307      	str	r3, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80020a2:	6913      	ldr	r3, [r2, #16]
 80020a4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80020a8:	6113      	str	r3, [r2, #16]
 80020aa:	6913      	ldr	r3, [r2, #16]
 80020ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020b4:	6953      	ldr	r3, [r2, #20]
 80020b6:	071b      	lsls	r3, r3, #28
 80020b8:	d5fc      	bpl.n	80020b4 <main+0x38>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ba:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80020bc:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020be:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80020c2:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80020ca:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 40;
 80020cc:	2128      	movs	r1, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80020ce:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80020d2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020d4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80020d6:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 80020d8:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80020da:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80020dc:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020de:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80020e0:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80020e2:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80020e6:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80020e8:	9115      	str	r1, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020ea:	f004 fbc5 	bl	8006878 <HAL_RCC_OscConfig>
 80020ee:	4603      	mov	r3, r0
 80020f0:	b100      	cbz	r0, 80020f4 <main+0x78>
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 80020f2:	e7fe      	b.n	80020f2 <main+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f4:	221f      	movs	r2, #31
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80020f6:	2105      	movs	r1, #5
 80020f8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fa:	e9cd 4303 	strd	r4, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020fe:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002102:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002104:	9202      	str	r2, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002106:	f004 fa57 	bl	80065b8 <HAL_RCC_ClockConfig>
 800210a:	bb40      	cbnz	r0, 800215e <main+0xe2>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 800210c:	4a16      	ldr	r2, [pc, #88]	; (8002168 <main+0xec>)
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002114:	f043 0320 	orr.w	r3, r3, #32
 8002118:	6013      	str	r3, [r2, #0]
  bsp_led_init();
 800211a:	f7ff f96f 	bl	80013fc <bsp_led_init>
  bsp_lcd_init();
 800211e:	f7ff f91f 	bl	8001360 <bsp_lcd_init>
  MX_SPI2_Init();
 8002122:	f7ff f885 	bl	8001230 <MX_SPI2_Init>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002126:	f003 f975 	bl	8005414 <HAL_ICACHE_Enable>
 800212a:	4604      	mov	r4, r0
 800212c:	b9c0      	cbnz	r0, 8002160 <main+0xe4>
  MX_GPDMA1_Init();
 800212e:	f7ff fdf7 	bl	8001d20 <MX_GPDMA1_Init>
  MX_USART2_UART_Init();
 8002132:	f7ff f9e3 	bl	80014fc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002136:	f7ff f99d 	bl	8001474 <MX_UART4_Init>
  MX_USB_PCD_Init();
 800213a:	f7ff fc4b 	bl	80019d4 <MX_USB_PCD_Init>
  LCD_Init(1);
 800213e:	2001      	movs	r0, #1
 8002140:	f002 f91c 	bl	800437c <LCD_Init>
  Draw_Init();
 8002144:	f7ff fd0e 	bl	8001b64 <Draw_Init>
  Draw_Clear(0);
 8002148:	4620      	mov	r0, r4
 800214a:	f7ff fd1f 	bl	8001b8c <Draw_Clear>
  rt_kprintf("Hello World! \r\n");
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <main+0xf0>)
 8002150:	f7ff ff3c 	bl	8001fcc <rt_kprintf>
  MX_FREERTOS_Init();
 8002154:	f7fe ffd4 	bl	8001100 <MX_FREERTOS_Init>
  vTaskStartScheduler();
 8002158:	f00b fb22 	bl	800d7a0 <vTaskStartScheduler>
  while (1)
 800215c:	e7fe      	b.n	800215c <main+0xe0>
  while(1)
 800215e:	e7fe      	b.n	800215e <main+0xe2>
 8002160:	e7fe      	b.n	8002160 <main+0xe4>
 8002162:	bf00      	nop
 8002164:	44020800 	.word	0x44020800
 8002168:	40022000 	.word	0x40022000
 800216c:	080119e4 	.word	0x080119e4

08002170 <Error_Handler>:
 8002170:	e7fe      	b.n	8002170 <Error_Handler>
 8002172:	bf00      	nop

08002174 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002176:	6802      	ldr	r2, [r0, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d000      	beq.n	800217e <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800217c:	4770      	bx	lr
    HAL_IncTick();
 800217e:	f002 bab7 	b.w	80046f0 <HAL_IncTick>
 8002182:	bf00      	nop
 8002184:	40001000 	.word	0x40001000

08002188 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 8002188:	2200      	movs	r2, #0
{
 800218a:	b500      	push	{lr}
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <prvTaskExitError+0x28>)
{
 800218e:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0UL;
 8002190:	9201      	str	r2, [sp, #4]
    configASSERT( ulCriticalNesting == ~0UL );
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	d002      	beq.n	800219e <prvTaskExitError+0x16>
 8002198:	f000 f97e 	bl	8002498 <ulSetInterruptMask>
 800219c:	e7fe      	b.n	800219c <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800219e:	f000 f97b 	bl	8002498 <ulSetInterruptMask>

    while( ulDummy == 0 )
 80021a2:	9b01      	ldr	r3, [sp, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0fc      	beq.n	80021a2 <prvTaskExitError+0x1a>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 80021a8:	b003      	add	sp, #12
 80021aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ae:	bf00      	nop
 80021b0:	200001a8 	.word	0x200001a8

080021b4 <vPortSetupTimerInterrupt>:
{
 80021b4:	b410      	push	{r4}
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 80021b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80021ba:	2404      	movs	r4, #4
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021bc:	2000      	movs	r0, #0
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80021be:	2207      	movs	r2, #7
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021c0:	4903      	ldr	r1, [pc, #12]	; (80021d0 <vPortSetupTimerInterrupt+0x1c>)
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 80021c2:	611c      	str	r4, [r3, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021c4:	6198      	str	r0, [r3, #24]
}
 80021c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021ca:	6159      	str	r1, [r3, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80021cc:	611a      	str	r2, [r3, #16]
}
 80021ce:	4770      	bx	lr
 80021d0:	0003d08f 	.word	0x0003d08f

080021d4 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80021d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80021d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80021e0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80021e4:	f3bf 8f6f 	isb	sy
}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80021ec:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
 80021ee:	f000 f953 	bl	8002498 <ulSetInterruptMask>
    ulCriticalNesting++;
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <vPortEnterCritical+0x18>)
 80021f4:	6813      	ldr	r3, [r2, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80021fa:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80021fe:	f3bf 8f6f 	isb	sy
}
 8002202:	bd08      	pop	{r3, pc}
 8002204:	200001a8 	.word	0x200001a8

08002208 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002208:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <vPortExitCritical+0x24>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	b14a      	cbz	r2, 8002224 <vPortExitCritical+0x1c>
    ulCriticalNesting--;
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	3a01      	subs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	b100      	cbz	r0, 800221c <vPortExitCritical+0x14>
    {
        portENABLE_INTERRUPTS();
    }
}
 800221a:	bd08      	pop	{r3, pc}
 800221c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
 8002220:	f000 b946 	b.w	80024b0 <vClearInterruptMask>
    configASSERT( ulCriticalNesting );
 8002224:	f000 f938 	bl	8002498 <ulSetInterruptMask>
 8002228:	e7fe      	b.n	8002228 <vPortExitCritical+0x20>
 800222a:	bf00      	nop
 800222c:	200001a8 	.word	0x200001a8

08002230 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8002230:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002232:	f000 f931 	bl	8002498 <ulSetInterruptMask>
 8002236:	4604      	mov	r4, r0
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002238:	f00b fb1e 	bl	800d878 <xTaskIncrementTick>
 800223c:	b128      	cbz	r0, 800224a <SysTick_Handler+0x1a>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800223e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002246:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        else
        {
            traceISR_EXIT();
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800224a:	4620      	mov	r0, r4
}
 800224c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002250:	f000 b92e 	b.w	80024b0 <vClearInterruptMask>

08002254 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8002254:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8002256:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
 8002258:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 800225c:	2b66      	cmp	r3, #102	; 0x66
 800225e:	d002      	beq.n	8002266 <vPortSVCHandler_C+0x12>
                    break;
            #endif /* configENABLE_MPU == 1 */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8002260:	f000 f91a 	bl	8002498 <ulSetInterruptMask>
 8002264:	e7fe      	b.n	8002264 <vPortSVCHandler_C+0x10>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8002266:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800226a:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	; 0xd88
 800226e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002272:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 8002276:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	; 0xf34
 800227a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800227e:	f8c3 2f34 	str.w	r2, [r3, #3892]	; 0xf34
    }
}
 8002282:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
 8002286:	f000 b8e1 	b.w	800244c <vRestoreContextOfFirstTask>
 800228a:	bf00      	nop

0800228c <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800228c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8002290:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8002294:	f04f 3710 	mov.w	r7, #269488144	; 0x10101010
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8002298:	f04f 3509 	mov.w	r5, #151587081	; 0x9090909
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800229c:	f840 4c04 	str.w	r4, [r0, #-4]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 80022a0:	f04f 3407 	mov.w	r4, #117901063	; 0x7070707
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 80022a4:	e940 570b 	strd	r5, r7, [r0, #-44]	; 0x2c
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 80022a8:	4d16      	ldr	r5, [pc, #88]	; (8002304 <pxPortInitialiseStack+0x78>)
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 80022aa:	f840 4c34 	str.w	r4, [r0, #-52]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 80022ae:	e940 5203 	strd	r5, r2, [r0, #-12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 80022b2:	f04f 3c11 	mov.w	ip, #286331153	; 0x11111111
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 80022b6:	f04f 3406 	mov.w	r4, #101058054	; 0x6060606
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 80022ba:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 80022be:	e940 c309 	strd	ip, r3, [r0, #-36]	; 0x24
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 80022c2:	e940 240f 	strd	r2, r4, [r0, #-60]	; 0x3c
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 80022c6:	4603      	mov	r3, r0
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 80022c8:	f04f 3a12 	mov.w	sl, #303174162	; 0x12121212
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 80022cc:	f04f 3903 	mov.w	r9, #50529027	; 0x3030303
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 80022d0:	f04f 3802 	mov.w	r8, #33686018	; 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 80022d4:	f04f 3e01 	mov.w	lr, #16843009	; 0x1010101
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 80022d8:	f04f 3608 	mov.w	r6, #134744072	; 0x8080808
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 80022dc:	f04f 3504 	mov.w	r5, #67372036	; 0x4040404
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 80022e0:	f06f 0202 	mvn.w	r2, #2
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 80022e4:	e940 9a05 	strd	r9, sl, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 80022e8:	e940 e807 	strd	lr, r8, [r0, #-28]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 80022ec:	f840 6c30 	str.w	r6, [r0, #-48]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 80022f0:	f840 5c40 	str.w	r5, [r0, #-64]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 80022f4:	f840 2c44 	str.w	r2, [r0, #-68]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 80022f8:	f843 1d48 	str.w	r1, [r3, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
 80022fc:	4618      	mov	r0, r3
 80022fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002302:	bf00      	nop
 8002304:	08002189 	.word	0x08002189

08002308 <xPortStartScheduler>:
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002308:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800230c:	b530      	push	{r4, r5, lr}
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800230e:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8002312:	4938      	ldr	r1, [pc, #224]	; (80023f4 <xPortStartScheduler+0xec>)
 8002314:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
{
 8002316:	b085      	sub	sp, #20
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8002318:	4288      	cmp	r0, r1
 800231a:	d002      	beq.n	8002322 <xPortStartScheduler+0x1a>
 800231c:	f000 f8bc 	bl	8002498 <ulSetInterruptMask>
 8002320:	e7fe      	b.n	8002320 <xPortStartScheduler+0x18>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == PendSV_Handler );
 8002322:	4935      	ldr	r1, [pc, #212]	; (80023f8 <xPortStartScheduler+0xf0>)
 8002324:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002326:	428a      	cmp	r2, r1
 8002328:	d002      	beq.n	8002330 <xPortStartScheduler+0x28>
 800232a:	f000 f8b5 	bl	8002498 <ulSetInterruptMask>
 800232e:	e7fe      	b.n	800232e <xPortStartScheduler+0x26>
    }
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )
    {
        volatile uint32_t ulImplementedPrioBits = 0;
 8002330:	2000      	movs	r0, #0
         * "FromISR". FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * First, determine the number of priority bits available. Write to all
         * possible bits in the priority setting for SVCall. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8002332:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        volatile uint32_t ulImplementedPrioBits = 0;
 8002336:	9002      	str	r0, [sp, #8]
        portNVIC_SHPR2_REG = 0xFF000000;
 8002338:	f8c3 1d1c 	str.w	r1, [r3, #3356]	; 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800233c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002340:	4a2e      	ldr	r2, [pc, #184]	; (80023fc <xPortStartScheduler+0xf4>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8002342:	0e1b      	lsrs	r3, r3, #24
 8002344:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002348:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800234c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002350:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002352:	2b00      	cmp	r3, #0
 8002354:	d03e      	beq.n	80023d4 <xPortStartScheduler+0xcc>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 8002356:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800235a:	43db      	mvns	r3, r3
 800235c:	f013 0f50 	tst.w	r3, #80	; 0x50
 8002360:	d009      	beq.n	8002376 <xPortStartScheduler+0x6e>
 8002362:	e03a      	b.n	80023da <xPortStartScheduler+0xd2>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002364:	9b02      	ldr	r3, [sp, #8]
 8002366:	3301      	adds	r3, #1
 8002368:	9302      	str	r3, [sp, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800236a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002376:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800237a:	061b      	lsls	r3, r3, #24
 800237c:	d4f2      	bmi.n	8002364 <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
 800237e:	9b02      	ldr	r3, [sp, #8]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d035      	beq.n	80023f0 <xPortStartScheduler+0xe8>
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002384:	9b02      	ldr	r3, [sp, #8]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800238a:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800238c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) ) */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002390:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
    portNVIC_SHPR2_REG = 0;
 8002394:	2400      	movs	r4, #0
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002396:	491a      	ldr	r1, [pc, #104]	; (8002400 <xPortStartScheduler+0xf8>)
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8002398:	4d1a      	ldr	r5, [pc, #104]	; (8002404 <xPortStartScheduler+0xfc>)
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800239a:	600b      	str	r3, [r1, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800239c:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
 80023a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a4:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80023a8:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
 80023ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023b0:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    portNVIC_SHPR2_REG = 0;
 80023b4:	f8c2 4d1c 	str.w	r4, [r2, #3356]	; 0xd1c
    vPortSetupTimerInterrupt();
 80023b8:	f7ff fefc 	bl	80021b4 <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
 80023bc:	602c      	str	r4, [r5, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif /* ( ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) ) */

    /* Start the first task. */
    vStartFirstTask();
 80023be:	f000 f85b 	bl	8002478 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 80023c2:	f00b fa69 	bl	800d898 <vTaskSwitchContext>
    volatile uint32_t ulDummy = 0UL;
 80023c6:	9403      	str	r4, [sp, #12]
    configASSERT( ulCriticalNesting == ~0UL );
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	d008      	beq.n	80023e0 <xPortStartScheduler+0xd8>
 80023ce:	f000 f863 	bl	8002498 <ulSetInterruptMask>
 80023d2:	e7fe      	b.n	80023d2 <xPortStartScheduler+0xca>
        configASSERT( ucMaxSysCallPriority );
 80023d4:	f000 f860 	bl	8002498 <ulSetInterruptMask>
 80023d8:	e7fe      	b.n	80023d8 <xPortStartScheduler+0xd0>
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 80023da:	f000 f85d 	bl	8002498 <ulSetInterruptMask>
 80023de:	e7fe      	b.n	80023de <xPortStartScheduler+0xd6>
    portDISABLE_INTERRUPTS();
 80023e0:	f000 f85a 	bl	8002498 <ulSetInterruptMask>
    while( ulDummy == 0 )
 80023e4:	9b03      	ldr	r3, [sp, #12]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0fc      	beq.n	80023e4 <xPortStartScheduler+0xdc>
    prvTaskExitError();

    /* Should not get here. */
    return 0;
}
 80023ea:	2000      	movs	r0, #0
 80023ec:	b005      	add	sp, #20
 80023ee:	bd30      	pop	{r4, r5, pc}
 80023f0:	2300      	movs	r3, #0
 80023f2:	e7cd      	b.n	8002390 <xPortStartScheduler+0x88>
 80023f4:	0800251d 	.word	0x0800251d
 80023f8:	080024c1 	.word	0x080024c1
 80023fc:	2000a198 	.word	0x2000a198
 8002400:	2000a19c 	.word	0x2000a19c
 8002404:	200001a8 	.word	0x200001a8

08002408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
 8002408:	b508      	push	{r3, lr}
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800240a:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800240e:	2b0f      	cmp	r3, #15
 8002410:	d905      	bls.n	800241e <vPortValidateInterruptPriority+0x16>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002412:	490b      	ldr	r1, [pc, #44]	; (8002440 <vPortValidateInterruptPriority+0x38>)
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002414:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <vPortValidateInterruptPriority+0x3c>)
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002416:	5c5b      	ldrb	r3, [r3, r1]
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002418:	7812      	ldrb	r2, [r2, #0]
 800241a:	429a      	cmp	r2, r3
 800241c:	d80d      	bhi.n	800243a <vPortValidateInterruptPriority+0x32>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800241e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <vPortValidateInterruptPriority+0x40>)
 8002424:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800242e:	4293      	cmp	r3, r2
 8002430:	d800      	bhi.n	8002434 <vPortValidateInterruptPriority+0x2c>
    }
 8002432:	bd08      	pop	{r3, pc}
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002434:	f000 f830 	bl	8002498 <ulSetInterruptMask>
 8002438:	e7fe      	b.n	8002438 <vPortValidateInterruptPriority+0x30>
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800243a:	f000 f82d 	bl	8002498 <ulSetInterruptMask>
 800243e:	e7fe      	b.n	800243e <vPortValidateInterruptPriority+0x36>
 8002440:	e000e3f0 	.word	0xe000e3f0
 8002444:	2000a198 	.word	0x2000a198
 8002448:	2000a19c 	.word	0x2000a19c

0800244c <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800244c:	4a09      	ldr	r2, [pc, #36]	; (8002474 <vRestoreContextOfFirstTask+0x28>)
 800244e:	6811      	ldr	r1, [r2, #0]
 8002450:	6808      	ldr	r0, [r1, #0]
 8002452:	c806      	ldmia	r0!, {r1, r2}
 8002454:	f381 880b 	msr	PSPLIM, r1
 8002458:	2102      	movs	r1, #2
 800245a:	f381 8814 	msr	CONTROL, r1
 800245e:	3020      	adds	r0, #32
 8002460:	f380 8809 	msr	PSP, r0
 8002464:	f3bf 8f6f 	isb	sy
 8002468:	f04f 0000 	mov.w	r0, #0
 800246c:	f380 8811 	msr	BASEPRI, r0
 8002470:	4710      	bx	r2
            "   isb                                             \n"
            "   mov  r0, #0                                     \n"
            "   msr  basepri, r0                                \n" /* Ensure that interrupts are enabled when the first task starts. */
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
        );
    }
 8002472:	0000      	.short	0x0000
 8002474:	2000a1f8 	.word	0x2000a1f8

08002478 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8002478:	4806      	ldr	r0, [pc, #24]	; (8002494 <vStartFirstTask+0x1c>)
 800247a:	6800      	ldr	r0, [r0, #0]
 800247c:	6800      	ldr	r0, [r0, #0]
 800247e:	f380 8808 	msr	MSP, r0
 8002482:	b662      	cpsie	i
 8002484:	b661      	cpsie	f
 8002486:	f3bf 8f4f 	dsb	sy
 800248a:	f3bf 8f6f 	isb	sy
 800248e:	df66      	svc	102	; 0x66
 8002490:	bf00      	nop
        "   isb                                             \n"
        "   svc %0                                          \n" /* System call to start the first task. */
        "   nop                                             \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8002492:	0000      	.short	0x0000
 8002494:	e000ed08 	.word	0xe000ed08

08002498 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8002498:	f3ef 8011 	mrs	r0, BASEPRI
 800249c:	f04f 0150 	mov.w	r1, #80	; 0x50
 80024a0:	f381 8811 	msr	BASEPRI, r1
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	f3bf 8f6f 	isb	sy
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop

080024b0 <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80024b0:	f380 8811 	msr	BASEPRI, r0
 80024b4:	f3bf 8f4f 	dsb	sy
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop

080024c0 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80024c0:	f3ef 8009 	mrs	r0, PSP
 80024c4:	f01e 0f10 	tst.w	lr, #16
 80024c8:	bf08      	it	eq
 80024ca:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80024ce:	f3ef 820b 	mrs	r2, PSPLIM
 80024d2:	4673      	mov	r3, lr
 80024d4:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80024d8:	4a0f      	ldr	r2, [pc, #60]	; (8002518 <PendSV_Handler+0x58>)
 80024da:	6811      	ldr	r1, [r2, #0]
 80024dc:	6008      	str	r0, [r1, #0]
 80024de:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024e2:	f380 8811 	msr	BASEPRI, r0
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f00b f9d3 	bl	800d898 <vTaskSwitchContext>
 80024f2:	f04f 0000 	mov.w	r0, #0
 80024f6:	f380 8811 	msr	BASEPRI, r0
 80024fa:	4a07      	ldr	r2, [pc, #28]	; (8002518 <PendSV_Handler+0x58>)
 80024fc:	6811      	ldr	r1, [r2, #0]
 80024fe:	6808      	ldr	r0, [r1, #0]
 8002500:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002504:	f013 0f10 	tst.w	r3, #16
 8002508:	bf08      	it	eq
 800250a:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800250e:	f382 880b 	msr	PSPLIM, r2
 8002512:	f380 8809 	msr	PSP, r0
 8002516:	4718      	bx	r3
            "   msr psplim, r2                                  \n" /* Restore the PSPLIM register value for the task. */
            "   msr psp, r0                                     \n" /* Remember the new top of stack for the task. */
            "   bx r3                                           \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 8002518:	2000a1f8 	.word	0x2000a1f8

0800251c <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800251c:	f01e 0f04 	tst.w	lr, #4
 8002520:	bf0c      	ite	eq
 8002522:	f3ef 8008 	mrseq	r0, MSP
 8002526:	f3ef 8009 	mrsne	r0, PSP
 800252a:	4901      	ldr	r1, [pc, #4]	; (8002530 <SVC_Handler+0x14>)
 800252c:	4708      	bx	r1
            "   mrseq r0, msp                                   \n"
            "   mrsne r0, psp                                   \n"
            "   ldr r1, =vPortSVCHandler_C                      \n"
            "   bx r1                                           \n"
        );
    }
 800252e:	0000      	.short	0x0000
 8002530:	08002255 	.word	0x08002255

08002534 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	4615      	mov	r5, r2

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002538:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800253a:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800253c:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800253e:	b92a      	cbnz	r2, 800254c <prvCopyDataToQueue+0x18>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002540:	6805      	ldr	r5, [r0, #0]
 8002542:	b34d      	cbz	r5, 8002598 <prvCopyDataToQueue+0x64>
    BaseType_t xReturn = pdFALSE;
 8002544:	2000      	movs	r0, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002546:	3601      	adds	r6, #1
 8002548:	63a6      	str	r6, [r4, #56]	; 0x38

    return xReturn;
}
 800254a:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 800254c:	b97d      	cbnz	r5, 800256e <prvCopyDataToQueue+0x3a>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800254e:	6840      	ldr	r0, [r0, #4]
 8002550:	f7fe fd52 	bl	8000ff8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002554:	6863      	ldr	r3, [r4, #4]
 8002556:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002558:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800255a:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800255c:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 800255e:	4293      	cmp	r3, r2
 8002560:	d3f0      	bcc.n	8002544 <prvCopyDataToQueue+0x10>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002562:	6823      	ldr	r3, [r4, #0]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002564:	3601      	adds	r6, #1
    BaseType_t xReturn = pdFALSE;
 8002566:	4628      	mov	r0, r5
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002568:	6063      	str	r3, [r4, #4]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800256a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800256c:	bd70      	pop	{r4, r5, r6, pc}
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800256e:	68c0      	ldr	r0, [r0, #12]
 8002570:	f7fe fd42 	bl	8000ff8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002574:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002576:	68e3      	ldr	r3, [r4, #12]
 8002578:	4251      	negs	r1, r2
 800257a:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800257c:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800257e:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002580:	4293      	cmp	r3, r2
 8002582:	d202      	bcs.n	800258a <prvCopyDataToQueue+0x56>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002584:	68a3      	ldr	r3, [r4, #8]
 8002586:	440b      	add	r3, r1
 8002588:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 800258a:	2d02      	cmp	r5, #2
 800258c:	d1da      	bne.n	8002544 <prvCopyDataToQueue+0x10>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800258e:	2e01      	cmp	r6, #1
 8002590:	bf38      	it	cc
 8002592:	2601      	movcc	r6, #1
    BaseType_t xReturn = pdFALSE;
 8002594:	2000      	movs	r0, #0
 8002596:	e7d7      	b.n	8002548 <prvCopyDataToQueue+0x14>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002598:	6880      	ldr	r0, [r0, #8]
 800259a:	f00b faf9 	bl	800db90 <xTaskPriorityDisinherit>
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800259e:	3601      	adds	r6, #1
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025a0:	60a5      	str	r5, [r4, #8]
 80025a2:	e7d1      	b.n	8002548 <prvCopyDataToQueue+0x14>

080025a4 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025a4:	b570      	push	{r4, r5, r6, lr}
 80025a6:	4605      	mov	r5, r0

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025a8:	f7ff fe20 	bl	80021ec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025ac:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80025b0:	b25c      	sxtb	r4, r3

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025b2:	2c00      	cmp	r4, #0
 80025b4:	dd14      	ble.n	80025e0 <prvUnlockQueue+0x3c>
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025b6:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80025ba:	e003      	b.n	80025c4 <prvUnlockQueue+0x20>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80025bc:	1e63      	subs	r3, r4, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025c2:	b16a      	cbz	r2, 80025e0 <prvUnlockQueue+0x3c>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80025c6:	b15b      	cbz	r3, 80025e0 <prvUnlockQueue+0x3c>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025c8:	4630      	mov	r0, r6
 80025ca:	f00b f9af 	bl	800d92c <xTaskRemoveFromEventList>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	d0f4      	beq.n	80025bc <prvUnlockQueue+0x18>
                        vTaskMissedYield();
 80025d2:	f00b fa65 	bl	800daa0 <vTaskMissedYield>
            --cTxLock;
 80025d6:	1e63      	subs	r3, r4, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d1f1      	bne.n	80025c4 <prvUnlockQueue+0x20>
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80025e0:	23ff      	movs	r3, #255	; 0xff
 80025e2:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80025e6:	f7ff fe0f 	bl	8002208 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80025ea:	f7ff fdff 	bl	80021ec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80025ee:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80025f2:	b25c      	sxtb	r4, r3

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80025f4:	2c00      	cmp	r4, #0
 80025f6:	dd14      	ble.n	8002622 <prvUnlockQueue+0x7e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025f8:	f105 0610 	add.w	r6, r5, #16
 80025fc:	e003      	b.n	8002606 <prvUnlockQueue+0x62>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80025fe:	1e63      	subs	r3, r4, #1
 8002600:	b2da      	uxtb	r2, r3
 8002602:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002604:	b16a      	cbz	r2, 8002622 <prvUnlockQueue+0x7e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002606:	692b      	ldr	r3, [r5, #16]
 8002608:	b15b      	cbz	r3, 8002622 <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800260a:	4630      	mov	r0, r6
 800260c:	f00b f98e 	bl	800d92c <xTaskRemoveFromEventList>
 8002610:	2800      	cmp	r0, #0
 8002612:	d0f4      	beq.n	80025fe <prvUnlockQueue+0x5a>
                    vTaskMissedYield();
 8002614:	f00b fa44 	bl	800daa0 <vTaskMissedYield>
                --cRxLock;
 8002618:	1e63      	subs	r3, r4, #1
 800261a:	b2da      	uxtb	r2, r3
 800261c:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800261e:	2a00      	cmp	r2, #0
 8002620:	d1f1      	bne.n	8002606 <prvUnlockQueue+0x62>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002622:	23ff      	movs	r3, #255	; 0xff
 8002624:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
}
 8002628:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 800262c:	f7ff bdec 	b.w	8002208 <vPortExitCritical>

08002630 <xQueueGenericReset>:
{
 8002630:	b570      	push	{r4, r5, r6, lr}
    configASSERT( pxQueue );
 8002632:	b368      	cbz	r0, 8002690 <xQueueGenericReset+0x60>
        ( pxQueue->uxLength >= 1U ) &&
 8002634:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002636:	4604      	mov	r4, r0
    if( ( pxQueue != NULL ) &&
 8002638:	b1f3      	cbz	r3, 8002678 <xQueueGenericReset+0x48>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800263a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800263c:	fba5 3503 	umull	r3, r5, r5, r3
 8002640:	b9d5      	cbnz	r5, 8002678 <xQueueGenericReset+0x48>
 8002642:	460e      	mov	r6, r1
        taskENTER_CRITICAL();
 8002644:	f7ff fdd2 	bl	80021ec <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002648:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
            pxQueue->cRxLock = queueUNLOCKED;
 800264c:	21ff      	movs	r1, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800264e:	fb00 f303 	mul.w	r3, r0, r3
 8002652:	6822      	ldr	r2, [r4, #0]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002654:	1a18      	subs	r0, r3, r0
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002656:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002658:	4413      	add	r3, r2
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800265a:	4402      	add	r2, r0
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800265c:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800265e:	e9c4 3202 	strd	r3, r2, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8002662:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002666:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 800266a:	b946      	cbnz	r6, 800267e <xQueueGenericReset+0x4e>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266c:	6923      	ldr	r3, [r4, #16]
 800266e:	b993      	cbnz	r3, 8002696 <xQueueGenericReset+0x66>
        taskEXIT_CRITICAL();
 8002670:	f7ff fdca 	bl	8002208 <vPortExitCritical>
}
 8002674:	2001      	movs	r0, #1
 8002676:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( xReturn != pdFAIL );
 8002678:	f7ff ff0e 	bl	8002498 <ulSetInterruptMask>
 800267c:	e7fe      	b.n	800267c <xQueueGenericReset+0x4c>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800267e:	f104 0010 	add.w	r0, r4, #16
 8002682:	f7ff fcbf 	bl	8002004 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002686:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800268a:	f7ff fcbb 	bl	8002004 <vListInitialise>
 800268e:	e7ef      	b.n	8002670 <xQueueGenericReset+0x40>
    configASSERT( pxQueue );
 8002690:	f7ff ff02 	bl	8002498 <ulSetInterruptMask>
 8002694:	e7fe      	b.n	8002694 <xQueueGenericReset+0x64>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002696:	f104 0010 	add.w	r0, r4, #16
 800269a:	f00b f947 	bl	800d92c <xTaskRemoveFromEventList>
 800269e:	2800      	cmp	r0, #0
 80026a0:	d0e6      	beq.n	8002670 <xQueueGenericReset+0x40>
                        queueYIELD_IF_USING_PREEMPTION();
 80026a2:	f7ff fd97 	bl	80021d4 <vPortYield>
 80026a6:	e7e3      	b.n	8002670 <xQueueGenericReset+0x40>

080026a8 <xQueueGenericCreateStatic>:
    {
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	f89d 5018 	ldrb.w	r5, [sp, #24]
        configASSERT( pxStaticQueue );
 80026b0:	b363      	cbz	r3, 800270c <xQueueGenericCreateStatic+0x64>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026b2:	b1c0      	cbz	r0, 80026e6 <xQueueGenericCreateStatic+0x3e>
 80026b4:	460c      	mov	r4, r1
 80026b6:	461e      	mov	r6, r3
            ( pxStaticQueue != NULL ) &&
 80026b8:	b1c2      	cbz	r2, 80026ec <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 80026ba:	b1a1      	cbz	r1, 80026e6 <xQueueGenericCreateStatic+0x3e>
                volatile size_t xSize = sizeof( StaticQueue_t );
 80026bc:	2150      	movs	r1, #80	; 0x50
 80026be:	9101      	str	r1, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80026c0:	9901      	ldr	r1, [sp, #4]
 80026c2:	2950      	cmp	r1, #80	; 0x50
 80026c4:	d11f      	bne.n	8002706 <xQueueGenericCreateStatic+0x5e>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80026c6:	9901      	ldr	r1, [sp, #4]
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026c8:	2101      	movs	r1, #1
 80026ca:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
    pxNewQueue->uxItemSize = uxItemSize;
 80026ce:	e9c6 040f 	strd	r0, r4, [r6, #60]	; 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026d2:	2101      	movs	r1, #1
 80026d4:	4630      	mov	r0, r6
 80026d6:	6032      	str	r2, [r6, #0]
 80026d8:	f7ff ffaa 	bl	8002630 <xQueueGenericReset>
    }
 80026dc:	4630      	mov	r0, r6
        pxNewQueue->ucQueueType = ucQueueType;
 80026de:	f886 504c 	strb.w	r5, [r6, #76]	; 0x4c
    }
 80026e2:	b002      	add	sp, #8
 80026e4:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxNewQueue );
 80026e6:	f7ff fed7 	bl	8002498 <ulSetInterruptMask>
 80026ea:	e7fe      	b.n	80026ea <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 80026ec:	2900      	cmp	r1, #0
 80026ee:	d1fa      	bne.n	80026e6 <xQueueGenericCreateStatic+0x3e>
                volatile size_t xSize = sizeof( StaticQueue_t );
 80026f0:	2250      	movs	r2, #80	; 0x50
 80026f2:	9201      	str	r2, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 80026f4:	9a01      	ldr	r2, [sp, #4]
 80026f6:	2a50      	cmp	r2, #80	; 0x50
 80026f8:	d105      	bne.n	8002706 <xQueueGenericCreateStatic+0x5e>
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026fa:	2101      	movs	r1, #1
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 80026fc:	9a01      	ldr	r2, [sp, #4]
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80026fe:	f886 1046 	strb.w	r1, [r6, #70]	; 0x46
 8002702:	4632      	mov	r2, r6
 8002704:	e7e3      	b.n	80026ce <xQueueGenericCreateStatic+0x26>
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002706:	f7ff fec7 	bl	8002498 <ulSetInterruptMask>
 800270a:	e7fe      	b.n	800270a <xQueueGenericCreateStatic+0x62>
        configASSERT( pxStaticQueue );
 800270c:	f7ff fec4 	bl	8002498 <ulSetInterruptMask>
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreateStatic+0x68>
 8002712:	bf00      	nop

08002714 <xQueueGenericCreate>:
    {
 8002714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002718:	b148      	cbz	r0, 800272e <xQueueGenericCreate+0x1a>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800271a:	fba0 3601 	umull	r3, r6, r0, r1
 800271e:	4604      	mov	r4, r0
 8002720:	460d      	mov	r5, r1
 8002722:	b926      	cbnz	r6, 800272e <xQueueGenericCreate+0x1a>
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002724:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002728:	f110 0f51 	cmn.w	r0, #81	; 0x51
 800272c:	d902      	bls.n	8002734 <xQueueGenericCreate+0x20>
            configASSERT( pxNewQueue );
 800272e:	f7ff feb3 	bl	8002498 <ulSetInterruptMask>
 8002732:	e7fe      	b.n	8002732 <xQueueGenericCreate+0x1e>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002734:	3050      	adds	r0, #80	; 0x50
 8002736:	4690      	mov	r8, r2
 8002738:	f7ff fb26 	bl	8001d88 <pvPortMalloc>
            if( pxNewQueue != NULL )
 800273c:	4607      	mov	r7, r0
 800273e:	b168      	cbz	r0, 800275c <xQueueGenericCreate+0x48>
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002740:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 8002744:	b16d      	cbz	r5, 8002762 <xQueueGenericCreate+0x4e>
                pucQueueStorage += sizeof( Queue_t );
 8002746:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800274a:	2101      	movs	r1, #1
 800274c:	4638      	mov	r0, r7
    pxNewQueue->uxItemSize = uxItemSize;
 800274e:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
 8002752:	603b      	str	r3, [r7, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002754:	f7ff ff6c 	bl	8002630 <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 8002758:	f887 804c 	strb.w	r8, [r7, #76]	; 0x4c
    }
 800275c:	4638      	mov	r0, r7
 800275e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002762:	4603      	mov	r3, r0
 8002764:	e7f1      	b.n	800274a <xQueueGenericCreate+0x36>
 8002766:	bf00      	nop

08002768 <xQueueGenericSend>:
{
 8002768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800276c:	b085      	sub	sp, #20
 800276e:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 8002770:	2800      	cmp	r0, #0
 8002772:	f000 8084 	beq.w	800287e <xQueueGenericSend+0x116>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002776:	4604      	mov	r4, r0
 8002778:	4688      	mov	r8, r1
 800277a:	461f      	mov	r7, r3
 800277c:	2900      	cmp	r1, #0
 800277e:	d05d      	beq.n	800283c <xQueueGenericSend+0xd4>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002780:	2f02      	cmp	r7, #2
 8002782:	d102      	bne.n	800278a <xQueueGenericSend+0x22>
 8002784:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d16c      	bne.n	8002864 <xQueueGenericSend+0xfc>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800278a:	f00b f98f 	bl	800daac <xTaskGetSchedulerState>
 800278e:	4605      	mov	r5, r0
 8002790:	2800      	cmp	r0, #0
 8002792:	d049      	beq.n	8002828 <xQueueGenericSend+0xc0>
 8002794:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 8002796:	f04f 0900 	mov.w	r9, #0
 800279a:	e007      	b.n	80027ac <xQueueGenericSend+0x44>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 800279c:	f7ff fd34 	bl	8002208 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff feff 	bl	80025a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027a6:	f00b f84b 	bl	800d840 <xTaskResumeAll>
 80027aa:	2501      	movs	r5, #1
        taskENTER_CRITICAL();
 80027ac:	f7ff fd1e 	bl	80021ec <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80027b2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80027b4:	4290      	cmp	r0, r2
 80027b6:	d347      	bcc.n	8002848 <xQueueGenericSend+0xe0>
 80027b8:	2f02      	cmp	r7, #2
 80027ba:	d045      	beq.n	8002848 <xQueueGenericSend+0xe0>
                if( xTicksToWait == ( TickType_t ) 0 )
 80027bc:	9e01      	ldr	r6, [sp, #4]
 80027be:	2e00      	cmp	r6, #0
 80027c0:	d060      	beq.n	8002884 <xQueueGenericSend+0x11c>
                else if( xEntryTimeSet == pdFALSE )
 80027c2:	2d00      	cmp	r5, #0
 80027c4:	d036      	beq.n	8002834 <xQueueGenericSend+0xcc>
        taskEXIT_CRITICAL();
 80027c6:	f7ff fd1f 	bl	8002208 <vPortExitCritical>
        vTaskSuspendAll();
 80027ca:	f00b f831 	bl	800d830 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027ce:	f7ff fd0d 	bl	80021ec <vPortEnterCritical>
 80027d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027d6:	2bff      	cmp	r3, #255	; 0xff
 80027d8:	bf08      	it	eq
 80027da:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80027de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80027e2:	2bff      	cmp	r3, #255	; 0xff
 80027e4:	bf08      	it	eq
 80027e6:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80027ea:	f7ff fd0d 	bl	8002208 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027ee:	a901      	add	r1, sp, #4
 80027f0:	a802      	add	r0, sp, #8
 80027f2:	f00b f91b 	bl	800da2c <xTaskCheckForTimeOut>
 80027f6:	2800      	cmp	r0, #0
 80027f8:	d14a      	bne.n	8002890 <xQueueGenericSend+0x128>
    taskENTER_CRITICAL();
 80027fa:	f7ff fcf7 	bl	80021ec <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002802:	429a      	cmp	r2, r3
 8002804:	d1ca      	bne.n	800279c <xQueueGenericSend+0x34>
    taskEXIT_CRITICAL();
 8002806:	f7ff fcff 	bl	8002208 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800280a:	9901      	ldr	r1, [sp, #4]
 800280c:	f104 0010 	add.w	r0, r4, #16
 8002810:	f00b f850 	bl	800d8b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002814:	4620      	mov	r0, r4
 8002816:	f7ff fec5 	bl	80025a4 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 800281a:	f00b f811 	bl	800d840 <xTaskResumeAll>
 800281e:	2800      	cmp	r0, #0
 8002820:	d1c3      	bne.n	80027aa <xQueueGenericSend+0x42>
                    taskYIELD_WITHIN_API();
 8002822:	f7ff fcd7 	bl	80021d4 <vPortYield>
 8002826:	e7c0      	b.n	80027aa <xQueueGenericSend+0x42>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002828:	9b01      	ldr	r3, [sp, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0b3      	beq.n	8002796 <xQueueGenericSend+0x2e>
 800282e:	f7ff fe33 	bl	8002498 <ulSetInterruptMask>
 8002832:	e7fe      	b.n	8002832 <xQueueGenericSend+0xca>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002834:	a802      	add	r0, sp, #8
 8002836:	f00b f8ed 	bl	800da14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800283a:	e7c4      	b.n	80027c6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800283c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d09e      	beq.n	8002780 <xQueueGenericSend+0x18>
 8002842:	f7ff fe29 	bl	8002498 <ulSetInterruptMask>
 8002846:	e7fe      	b.n	8002846 <xQueueGenericSend+0xde>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002848:	463a      	mov	r2, r7
 800284a:	4641      	mov	r1, r8
 800284c:	4620      	mov	r0, r4
 800284e:	f7ff fe71 	bl	8002534 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002854:	b963      	cbnz	r3, 8002870 <xQueueGenericSend+0x108>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002856:	b940      	cbnz	r0, 800286a <xQueueGenericSend+0x102>
                taskEXIT_CRITICAL();
 8002858:	f7ff fcd6 	bl	8002208 <vPortExitCritical>
                return pdPASS;
 800285c:	2001      	movs	r0, #1
}
 800285e:	b005      	add	sp, #20
 8002860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002864:	f7ff fe18 	bl	8002498 <ulSetInterruptMask>
 8002868:	e7fe      	b.n	8002868 <xQueueGenericSend+0x100>
                            queueYIELD_IF_USING_PREEMPTION();
 800286a:	f7ff fcb3 	bl	80021d4 <vPortYield>
 800286e:	e7f3      	b.n	8002858 <xQueueGenericSend+0xf0>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002870:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002874:	f00b f85a 	bl	800d92c <xTaskRemoveFromEventList>
 8002878:	2800      	cmp	r0, #0
 800287a:	d0ed      	beq.n	8002858 <xQueueGenericSend+0xf0>
 800287c:	e7f5      	b.n	800286a <xQueueGenericSend+0x102>
    configASSERT( pxQueue );
 800287e:	f7ff fe0b 	bl	8002498 <ulSetInterruptMask>
 8002882:	e7fe      	b.n	8002882 <xQueueGenericSend+0x11a>
                    taskEXIT_CRITICAL();
 8002884:	f7ff fcc0 	bl	8002208 <vPortExitCritical>
                    return errQUEUE_FULL;
 8002888:	4630      	mov	r0, r6
}
 800288a:	b005      	add	sp, #20
 800288c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            prvUnlockQueue( pxQueue );
 8002890:	4620      	mov	r0, r4
 8002892:	f7ff fe87 	bl	80025a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002896:	f00a ffd3 	bl	800d840 <xTaskResumeAll>
            return errQUEUE_FULL;
 800289a:	2000      	movs	r0, #0
}
 800289c:	b005      	add	sp, #20
 800289e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028a2:	bf00      	nop

080028a4 <xQueueCreateMutex>:
    {
 80028a4:	b570      	push	{r4, r5, r6, lr}
 80028a6:	4605      	mov	r5, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80028a8:	2050      	movs	r0, #80	; 0x50
 80028aa:	f7ff fa6d 	bl	8001d88 <pvPortMalloc>
            if( pxNewQueue != NULL )
 80028ae:	4604      	mov	r4, r0
 80028b0:	b198      	cbz	r0, 80028da <xQueueCreateMutex+0x36>
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028b2:	2600      	movs	r6, #0
    pxNewQueue->uxLength = uxQueueLength;
 80028b4:	2101      	movs	r1, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028b6:	6020      	str	r0, [r4, #0]
    pxNewQueue->uxItemSize = uxItemSize;
 80028b8:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80028bc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028c0:	f7ff feb6 	bl	8002630 <xQueueGenericReset>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80028c4:	4633      	mov	r3, r6
 80028c6:	4632      	mov	r2, r6
 80028c8:	4631      	mov	r1, r6
 80028ca:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
 80028cc:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80028d0:	60a6      	str	r6, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80028d2:	6026      	str	r6, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80028d4:	60e6      	str	r6, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80028d6:	f7ff ff47 	bl	8002768 <xQueueGenericSend>
    }
 80028da:	4620      	mov	r0, r4
 80028dc:	bd70      	pop	{r4, r5, r6, pc}
 80028de:	bf00      	nop

080028e0 <xQueueGenericSendFromISR>:
{
 80028e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    configASSERT( pxQueue );
 80028e4:	2800      	cmp	r0, #0
 80028e6:	d048      	beq.n	800297a <xQueueGenericSendFromISR+0x9a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028e8:	4604      	mov	r4, r0
 80028ea:	460d      	mov	r5, r1
 80028ec:	4617      	mov	r7, r2
 80028ee:	461e      	mov	r6, r3
 80028f0:	b371      	cbz	r1, 8002950 <xQueueGenericSendFromISR+0x70>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028f2:	2e02      	cmp	r6, #2
 80028f4:	d11c      	bne.n	8002930 <xQueueGenericSendFromISR+0x50>
 80028f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d12f      	bne.n	800295c <xQueueGenericSendFromISR+0x7c>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028fc:	f7ff fd84 	bl	8002408 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8002900:	f7ff fdca 	bl	8002498 <ulSetInterruptMask>
 8002904:	4680      	mov	r8, r0
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002906:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002908:	4629      	mov	r1, r5
            const int8_t cTxLock = pxQueue->cTxLock;
 800290a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800290e:	4632      	mov	r2, r6
 8002910:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 8002912:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002914:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002916:	f7ff fe0d 	bl	8002534 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 800291a:	1c6b      	adds	r3, r5, #1
 800291c:	d121      	bne.n	8002962 <xQueueGenericSendFromISR+0x82>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800291e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002920:	bb73      	cbnz	r3, 8002980 <xQueueGenericSendFromISR+0xa0>
            xReturn = pdPASS;
 8002922:	2501      	movs	r5, #1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8002924:	4640      	mov	r0, r8
 8002926:	f7ff fdc3 	bl	80024b0 <vClearInterruptMask>
}
 800292a:	4628      	mov	r0, r5
 800292c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002930:	f7ff fd6a 	bl	8002408 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8002934:	f7ff fdb0 	bl	8002498 <ulSetInterruptMask>
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002938:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800293a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800293c:	4680      	mov	r8, r0
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800293e:	429a      	cmp	r2, r3
 8002940:	d3e2      	bcc.n	8002908 <xQueueGenericSendFromISR+0x28>
            xReturn = errQUEUE_FULL;
 8002942:	2500      	movs	r5, #0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8002944:	4640      	mov	r0, r8
 8002946:	f7ff fdb3 	bl	80024b0 <vClearInterruptMask>
}
 800294a:	4628      	mov	r0, r5
 800294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002950:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d0cd      	beq.n	80028f2 <xQueueGenericSendFromISR+0x12>
 8002956:	f7ff fd9f 	bl	8002498 <ulSetInterruptMask>
 800295a:	e7fe      	b.n	800295a <xQueueGenericSendFromISR+0x7a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800295c:	f7ff fd9c 	bl	8002498 <ulSetInterruptMask>
 8002960:	e7fe      	b.n	8002960 <xQueueGenericSendFromISR+0x80>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002962:	f00a ff83 	bl	800d86c <uxTaskGetNumberOfTasks>
 8002966:	4285      	cmp	r5, r0
 8002968:	d2db      	bcs.n	8002922 <xQueueGenericSendFromISR+0x42>
 800296a:	2d7f      	cmp	r5, #127	; 0x7f
 800296c:	d014      	beq.n	8002998 <xQueueGenericSendFromISR+0xb8>
 800296e:	1c6b      	adds	r3, r5, #1
 8002970:	b25b      	sxtb	r3, r3
            xReturn = pdPASS;
 8002972:	2501      	movs	r5, #1
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002974:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002978:	e7e4      	b.n	8002944 <xQueueGenericSendFromISR+0x64>
    configASSERT( pxQueue );
 800297a:	f7ff fd8d 	bl	8002498 <ulSetInterruptMask>
 800297e:	e7fe      	b.n	800297e <xQueueGenericSendFromISR+0x9e>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002980:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002984:	f00a ffd2 	bl	800d92c <xTaskRemoveFromEventList>
 8002988:	2800      	cmp	r0, #0
 800298a:	d0ca      	beq.n	8002922 <xQueueGenericSendFromISR+0x42>
                            if( pxHigherPriorityTaskWoken != NULL )
 800298c:	2f00      	cmp	r7, #0
 800298e:	d0c8      	beq.n	8002922 <xQueueGenericSendFromISR+0x42>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002990:	2301      	movs	r3, #1
            xReturn = pdPASS;
 8002992:	461d      	mov	r5, r3
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002994:	603b      	str	r3, [r7, #0]
 8002996:	e7d5      	b.n	8002944 <xQueueGenericSendFromISR+0x64>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002998:	f7ff fd7e 	bl	8002498 <ulSetInterruptMask>
 800299c:	e7fe      	b.n	800299c <xQueueGenericSendFromISR+0xbc>
 800299e:	bf00      	nop

080029a0 <xQueueGiveFromISR>:
{
 80029a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pxQueue );
 80029a2:	b390      	cbz	r0, 8002a0a <xQueueGiveFromISR+0x6a>
    configASSERT( pxQueue->uxItemSize == 0 );
 80029a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80029a6:	4604      	mov	r4, r0
 80029a8:	bb03      	cbnz	r3, 80029ec <xQueueGiveFromISR+0x4c>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80029aa:	6803      	ldr	r3, [r0, #0]
 80029ac:	460d      	mov	r5, r1
 80029ae:	b1bb      	cbz	r3, 80029e0 <xQueueGiveFromISR+0x40>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029b0:	f7ff fd2a 	bl	8002408 <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80029b4:	f7ff fd70 	bl	8002498 <ulSetInterruptMask>
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 80029ba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80029bc:	4606      	mov	r6, r0
        if( uxMessagesWaiting < pxQueue->uxLength )
 80029be:	429a      	cmp	r2, r3
 80029c0:	d926      	bls.n	8002a10 <xQueueGiveFromISR+0x70>
            const int8_t cTxLock = pxQueue->cTxLock;
 80029c2:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80029c6:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
 80029c8:	2aff      	cmp	r2, #255	; 0xff
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80029ca:	63a3      	str	r3, [r4, #56]	; 0x38
            const int8_t cTxLock = pxQueue->cTxLock;
 80029cc:	b257      	sxtb	r7, r2
            if( cTxLock == queueUNLOCKED )
 80029ce:	d110      	bne.n	80029f2 <xQueueGiveFromISR+0x52>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029d2:	bb1b      	cbnz	r3, 8002a1c <xQueueGiveFromISR+0x7c>
            xReturn = pdPASS;
 80029d4:	2701      	movs	r7, #1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 80029d6:	4630      	mov	r0, r6
 80029d8:	f7ff fd6a 	bl	80024b0 <vClearInterruptMask>
}
 80029dc:	4638      	mov	r0, r7
 80029de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80029e0:	6883      	ldr	r3, [r0, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0e4      	beq.n	80029b0 <xQueueGiveFromISR+0x10>
 80029e6:	f7ff fd57 	bl	8002498 <ulSetInterruptMask>
 80029ea:	e7fe      	b.n	80029ea <xQueueGiveFromISR+0x4a>
    configASSERT( pxQueue->uxItemSize == 0 );
 80029ec:	f7ff fd54 	bl	8002498 <ulSetInterruptMask>
 80029f0:	e7fe      	b.n	80029f0 <xQueueGiveFromISR+0x50>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80029f2:	f00a ff3b 	bl	800d86c <uxTaskGetNumberOfTasks>
 80029f6:	4287      	cmp	r7, r0
 80029f8:	d2ec      	bcs.n	80029d4 <xQueueGiveFromISR+0x34>
 80029fa:	2f7f      	cmp	r7, #127	; 0x7f
 80029fc:	d01a      	beq.n	8002a34 <xQueueGiveFromISR+0x94>
 80029fe:	1c7b      	adds	r3, r7, #1
 8002a00:	b25b      	sxtb	r3, r3
            xReturn = pdPASS;
 8002a02:	2701      	movs	r7, #1
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002a04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002a08:	e7e5      	b.n	80029d6 <xQueueGiveFromISR+0x36>
    configASSERT( pxQueue );
 8002a0a:	f7ff fd45 	bl	8002498 <ulSetInterruptMask>
 8002a0e:	e7fe      	b.n	8002a0e <xQueueGiveFromISR+0x6e>
            xReturn = errQUEUE_FULL;
 8002a10:	2700      	movs	r7, #0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8002a12:	4630      	mov	r0, r6
 8002a14:	f7ff fd4c 	bl	80024b0 <vClearInterruptMask>
}
 8002a18:	4638      	mov	r0, r7
 8002a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a1c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a20:	f00a ff84 	bl	800d92c <xTaskRemoveFromEventList>
 8002a24:	2800      	cmp	r0, #0
 8002a26:	d0d5      	beq.n	80029d4 <xQueueGiveFromISR+0x34>
                            if( pxHigherPriorityTaskWoken != NULL )
 8002a28:	2d00      	cmp	r5, #0
 8002a2a:	d0d3      	beq.n	80029d4 <xQueueGiveFromISR+0x34>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002a2c:	2301      	movs	r3, #1
            xReturn = pdPASS;
 8002a2e:	461f      	mov	r7, r3
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002a30:	602b      	str	r3, [r5, #0]
 8002a32:	e7d0      	b.n	80029d6 <xQueueGiveFromISR+0x36>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002a34:	f7ff fd30 	bl	8002498 <ulSetInterruptMask>
 8002a38:	e7fe      	b.n	8002a38 <xQueueGiveFromISR+0x98>
 8002a3a:	bf00      	nop

08002a3c <xQueueReceive>:
{
 8002a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a40:	b084      	sub	sp, #16
 8002a42:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8002a44:	2800      	cmp	r0, #0
 8002a46:	f000 8088 	beq.w	8002b5a <xQueueReceive+0x11e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a4a:	4604      	mov	r4, r0
 8002a4c:	460e      	mov	r6, r1
 8002a4e:	2900      	cmp	r1, #0
 8002a50:	d077      	beq.n	8002b42 <xQueueReceive+0x106>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a52:	f00b f82b 	bl	800daac <xTaskGetSchedulerState>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d079      	beq.n	8002b4e <xQueueReceive+0x112>
        taskENTER_CRITICAL();
 8002a5a:	f7ff fbc7 	bl	80021ec <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	d158      	bne.n	8002b16 <xQueueReceive+0xda>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a64:	9b01      	ldr	r3, [sp, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d043      	beq.n	8002af2 <xQueueReceive+0xb6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a6a:	a802      	add	r0, sp, #8
 8002a6c:	f00a ffd2 	bl	800da14 <vTaskInternalSetTimeOutState>
        prvLockQueue( pxQueue );
 8002a70:	462f      	mov	r7, r5
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a72:	f104 0824 	add.w	r8, r4, #36	; 0x24
        taskEXIT_CRITICAL();
 8002a76:	f7ff fbc7 	bl	8002208 <vPortExitCritical>
        vTaskSuspendAll();
 8002a7a:	f00a fed9 	bl	800d830 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a7e:	f7ff fbb5 	bl	80021ec <vPortEnterCritical>
 8002a82:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a86:	2bff      	cmp	r3, #255	; 0xff
 8002a88:	bf08      	it	eq
 8002a8a:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002a8e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002a92:	2bff      	cmp	r3, #255	; 0xff
 8002a94:	bf08      	it	eq
 8002a96:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002a9a:	f7ff fbb5 	bl	8002208 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a9e:	a901      	add	r1, sp, #4
 8002aa0:	a802      	add	r0, sp, #8
 8002aa2:	f00a ffc3 	bl	800da2c <xTaskCheckForTimeOut>
 8002aa6:	b990      	cbnz	r0, 8002ace <xQueueReceive+0x92>
    taskENTER_CRITICAL();
 8002aa8:	f7ff fba0 	bl	80021ec <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002aac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aae:	bb33      	cbnz	r3, 8002afe <xQueueReceive+0xc2>
    taskEXIT_CRITICAL();
 8002ab0:	f7ff fbaa 	bl	8002208 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ab4:	4640      	mov	r0, r8
 8002ab6:	9901      	ldr	r1, [sp, #4]
 8002ab8:	f00a fefc 	bl	800d8b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002abc:	4620      	mov	r0, r4
 8002abe:	f7ff fd71 	bl	80025a4 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8002ac2:	f00a febd 	bl	800d840 <xTaskResumeAll>
 8002ac6:	b968      	cbnz	r0, 8002ae4 <xQueueReceive+0xa8>
                    taskYIELD_WITHIN_API();
 8002ac8:	f7ff fb84 	bl	80021d4 <vPortYield>
        taskENTER_CRITICAL();
 8002acc:	e00a      	b.n	8002ae4 <xQueueReceive+0xa8>
            prvUnlockQueue( pxQueue );
 8002ace:	4620      	mov	r0, r4
 8002ad0:	f7ff fd68 	bl	80025a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ad4:	f00a feb4 	bl	800d840 <xTaskResumeAll>
    taskENTER_CRITICAL();
 8002ad8:	f7ff fb88 	bl	80021ec <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002adc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ade:	b143      	cbz	r3, 8002af2 <xQueueReceive+0xb6>
    taskEXIT_CRITICAL();
 8002ae0:	f7ff fb92 	bl	8002208 <vPortExitCritical>
        taskENTER_CRITICAL();
 8002ae4:	f7ff fb82 	bl	80021ec <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002aea:	b9a5      	cbnz	r5, 8002b16 <xQueueReceive+0xda>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002aec:	9b01      	ldr	r3, [sp, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1c1      	bne.n	8002a76 <xQueueReceive+0x3a>
                    taskEXIT_CRITICAL();
 8002af2:	f7ff fb89 	bl	8002208 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8002af6:	2000      	movs	r0, #0
}
 8002af8:	b004      	add	sp, #16
 8002afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    taskEXIT_CRITICAL();
 8002afe:	f7ff fb83 	bl	8002208 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8002b02:	4620      	mov	r0, r4
 8002b04:	f7ff fd4e 	bl	80025a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002b08:	f00a fe9a 	bl	800d840 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8002b0c:	f7ff fb6e 	bl	80021ec <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b10:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b12:	2d00      	cmp	r5, #0
 8002b14:	d0ea      	beq.n	8002aec <xQueueReceive+0xb0>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b16:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b18:	b15a      	cbz	r2, 8002b32 <xQueueReceive+0xf6>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002b1a:	68e1      	ldr	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002b1c:	68a3      	ldr	r3, [r4, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002b1e:	4411      	add	r1, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002b20:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002b22:	60e1      	str	r1, [r4, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b24:	bf28      	it	cs
 8002b26:	6821      	ldrcs	r1, [r4, #0]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002b28:	4630      	mov	r0, r6
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b2a:	bf28      	it	cs
 8002b2c:	60e1      	strcs	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002b2e:	f7fe fa63 	bl	8000ff8 <memcpy>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b32:	6923      	ldr	r3, [r4, #16]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002b34:	3d01      	subs	r5, #1
 8002b36:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b38:	b993      	cbnz	r3, 8002b60 <xQueueReceive+0x124>
                taskEXIT_CRITICAL();
 8002b3a:	f7ff fb65 	bl	8002208 <vPortExitCritical>
                return pdPASS;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e7da      	b.n	8002af8 <xQueueReceive+0xbc>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b42:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d084      	beq.n	8002a52 <xQueueReceive+0x16>
 8002b48:	f7ff fca6 	bl	8002498 <ulSetInterruptMask>
 8002b4c:	e7fe      	b.n	8002b4c <xQueueReceive+0x110>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b4e:	9b01      	ldr	r3, [sp, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d082      	beq.n	8002a5a <xQueueReceive+0x1e>
 8002b54:	f7ff fca0 	bl	8002498 <ulSetInterruptMask>
 8002b58:	e7fe      	b.n	8002b58 <xQueueReceive+0x11c>
    configASSERT( ( pxQueue ) );
 8002b5a:	f7ff fc9d 	bl	8002498 <ulSetInterruptMask>
 8002b5e:	e7fe      	b.n	8002b5e <xQueueReceive+0x122>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b60:	f104 0010 	add.w	r0, r4, #16
 8002b64:	f00a fee2 	bl	800d92c <xTaskRemoveFromEventList>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d0e6      	beq.n	8002b3a <xQueueReceive+0xfe>
                        queueYIELD_IF_USING_PREEMPTION();
 8002b6c:	f7ff fb32 	bl	80021d4 <vPortYield>
 8002b70:	e7e3      	b.n	8002b3a <xQueueReceive+0xfe>
 8002b72:	bf00      	nop

08002b74 <xQueueSemaphoreTake>:
{
 8002b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	f000 8090 	beq.w	8002ca2 <xQueueSemaphoreTake+0x12e>
    configASSERT( pxQueue->uxItemSize == 0 );
 8002b82:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002b84:	4604      	mov	r4, r0
 8002b86:	b94e      	cbnz	r6, 8002b9c <xQueueSemaphoreTake+0x28>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b88:	f00a ff90 	bl	800daac <xTaskGetSchedulerState>
 8002b8c:	4605      	mov	r5, r0
 8002b8e:	b940      	cbnz	r0, 8002ba2 <xQueueSemaphoreTake+0x2e>
 8002b90:	9b01      	ldr	r3, [sp, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 8082 	bne.w	8002c9c <xQueueSemaphoreTake+0x128>
 8002b98:	4606      	mov	r6, r0
 8002b9a:	e003      	b.n	8002ba4 <xQueueSemaphoreTake+0x30>
    configASSERT( pxQueue->uxItemSize == 0 );
 8002b9c:	f7ff fc7c 	bl	8002498 <ulSetInterruptMask>
 8002ba0:	e7fe      	b.n	8002ba0 <xQueueSemaphoreTake+0x2c>
 8002ba2:	4635      	mov	r5, r6
        taskENTER_CRITICAL();
 8002ba4:	f7ff fb22 	bl	80021ec <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ba8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        prvLockQueue( pxQueue );
 8002baa:	f04f 0800 	mov.w	r8, #0
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002bae:	bb83      	cbnz	r3, 8002c12 <xQueueSemaphoreTake+0x9e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002bb0:	9f01      	ldr	r7, [sp, #4]
 8002bb2:	2f00      	cmp	r7, #0
 8002bb4:	f000 8081 	beq.w	8002cba <xQueueSemaphoreTake+0x146>
                else if( xEntryTimeSet == pdFALSE )
 8002bb8:	2d00      	cmp	r5, #0
 8002bba:	d045      	beq.n	8002c48 <xQueueSemaphoreTake+0xd4>
        taskEXIT_CRITICAL();
 8002bbc:	f7ff fb24 	bl	8002208 <vPortExitCritical>
        vTaskSuspendAll();
 8002bc0:	f00a fe36 	bl	800d830 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bc4:	f7ff fb12 	bl	80021ec <vPortEnterCritical>
 8002bc8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002bcc:	2bff      	cmp	r3, #255	; 0xff
 8002bce:	bf08      	it	eq
 8002bd0:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002bd4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002bd8:	2bff      	cmp	r3, #255	; 0xff
 8002bda:	bf08      	it	eq
 8002bdc:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002be0:	f7ff fb12 	bl	8002208 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002be4:	a901      	add	r1, sp, #4
 8002be6:	a802      	add	r0, sp, #8
 8002be8:	f00a ff20 	bl	800da2c <xTaskCheckForTimeOut>
 8002bec:	bb00      	cbnz	r0, 8002c30 <xQueueSemaphoreTake+0xbc>
    taskENTER_CRITICAL();
 8002bee:	f7ff fafd 	bl	80021ec <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d03e      	beq.n	8002c76 <xQueueSemaphoreTake+0x102>
    taskEXIT_CRITICAL();
 8002bf8:	f7ff fb06 	bl	8002208 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f7ff fcd1 	bl	80025a4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c02:	f00a fe1d 	bl	800d840 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8002c06:	f7ff faf1 	bl	80021ec <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c0c:	2501      	movs	r5, #1
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ce      	beq.n	8002bb0 <xQueueSemaphoreTake+0x3c>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c12:	6822      	ldr	r2, [r4, #0]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8002c14:	3b01      	subs	r3, #1
 8002c16:	63a3      	str	r3, [r4, #56]	; 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c18:	2a00      	cmp	r2, #0
 8002c1a:	d05b      	beq.n	8002cd4 <xQueueSemaphoreTake+0x160>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c1c:	6923      	ldr	r3, [r4, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d14f      	bne.n	8002cc2 <xQueueSemaphoreTake+0x14e>
                taskEXIT_CRITICAL();
 8002c22:	f7ff faf1 	bl	8002208 <vPortExitCritical>
                return pdPASS;
 8002c26:	2601      	movs	r6, #1
}
 8002c28:	4630      	mov	r0, r6
 8002c2a:	b004      	add	sp, #16
 8002c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            prvUnlockQueue( pxQueue );
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff fcb7 	bl	80025a4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c36:	f00a fe03 	bl	800d840 <xTaskResumeAll>
    taskENTER_CRITICAL();
 8002c3a:	f7ff fad7 	bl	80021ec <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002c40:	b133      	cbz	r3, 8002c50 <xQueueSemaphoreTake+0xdc>
    taskEXIT_CRITICAL();
 8002c42:	f7ff fae1 	bl	8002208 <vPortExitCritical>
    return xReturn;
 8002c46:	e7de      	b.n	8002c06 <xQueueSemaphoreTake+0x92>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c48:	a802      	add	r0, sp, #8
 8002c4a:	f00a fee3 	bl	800da14 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c4e:	e7b5      	b.n	8002bbc <xQueueSemaphoreTake+0x48>
    taskEXIT_CRITICAL();
 8002c50:	f7ff fada 	bl	8002208 <vPortExitCritical>
                    if( xInheritanceOccurred != pdFALSE )
 8002c54:	2e00      	cmp	r6, #0
 8002c56:	d0e7      	beq.n	8002c28 <xQueueSemaphoreTake+0xb4>
                        taskENTER_CRITICAL();
 8002c58:	f7ff fac8 	bl	80021ec <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002c5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c5e:	b119      	cbz	r1, 8002c68 <xQueueSemaphoreTake+0xf4>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8002c60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c62:	6819      	ldr	r1, [r3, #0]
 8002c64:	f1c1 010a 	rsb	r1, r1, #10
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002c68:	68a0      	ldr	r0, [r4, #8]
 8002c6a:	f00a ffe9 	bl	800dc40 <vTaskPriorityDisinheritAfterTimeout>
                return errQUEUE_EMPTY;
 8002c6e:	2600      	movs	r6, #0
                        taskEXIT_CRITICAL();
 8002c70:	f7ff faca 	bl	8002208 <vPortExitCritical>
 8002c74:	e7d8      	b.n	8002c28 <xQueueSemaphoreTake+0xb4>
    taskEXIT_CRITICAL();
 8002c76:	f7ff fac7 	bl	8002208 <vPortExitCritical>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	b1a3      	cbz	r3, 8002ca8 <xQueueSemaphoreTake+0x134>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c7e:	9901      	ldr	r1, [sp, #4]
 8002c80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c84:	f00a fe16 	bl	800d8b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff fc8b 	bl	80025a4 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8002c8e:	f00a fdd7 	bl	800d840 <xTaskResumeAll>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d1b7      	bne.n	8002c06 <xQueueSemaphoreTake+0x92>
                    taskYIELD_WITHIN_API();
 8002c96:	f7ff fa9d 	bl	80021d4 <vPortYield>
 8002c9a:	e7b4      	b.n	8002c06 <xQueueSemaphoreTake+0x92>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c9c:	f7ff fbfc 	bl	8002498 <ulSetInterruptMask>
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueSemaphoreTake+0x12c>
    configASSERT( ( pxQueue ) );
 8002ca2:	f7ff fbf9 	bl	8002498 <ulSetInterruptMask>
 8002ca6:	e7fe      	b.n	8002ca6 <xQueueSemaphoreTake+0x132>
                        taskENTER_CRITICAL();
 8002ca8:	f7ff faa0 	bl	80021ec <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002cac:	68a0      	ldr	r0, [r4, #8]
 8002cae:	f00a ff0d 	bl	800dacc <xTaskPriorityInherit>
 8002cb2:	4606      	mov	r6, r0
                        taskEXIT_CRITICAL();
 8002cb4:	f7ff faa8 	bl	8002208 <vPortExitCritical>
 8002cb8:	e7e1      	b.n	8002c7e <xQueueSemaphoreTake+0x10a>
                    taskEXIT_CRITICAL();
 8002cba:	f7ff faa5 	bl	8002208 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8002cbe:	463e      	mov	r6, r7
 8002cc0:	e7b2      	b.n	8002c28 <xQueueSemaphoreTake+0xb4>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cc2:	f104 0010 	add.w	r0, r4, #16
 8002cc6:	f00a fe31 	bl	800d92c <xTaskRemoveFromEventList>
 8002cca:	2800      	cmp	r0, #0
 8002ccc:	d0a9      	beq.n	8002c22 <xQueueSemaphoreTake+0xae>
                        queueYIELD_IF_USING_PREEMPTION();
 8002cce:	f7ff fa81 	bl	80021d4 <vPortYield>
 8002cd2:	e7a6      	b.n	8002c22 <xQueueSemaphoreTake+0xae>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002cd4:	f00b f80e 	bl	800dcf4 <pvTaskIncrementMutexHeldCount>
 8002cd8:	60a0      	str	r0, [r4, #8]
 8002cda:	e79f      	b.n	8002c1c <xQueueSemaphoreTake+0xa8>

08002cdc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	4604      	mov	r4, r0
 8002ce0:	460e      	mov	r6, r1
 8002ce2:	4615      	mov	r5, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002ce4:	f7ff fa82 	bl	80021ec <vPortEnterCritical>
 8002ce8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002cec:	2bff      	cmp	r3, #255	; 0xff
 8002cee:	bf04      	itt	eq
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002cf6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002cfa:	2bff      	cmp	r3, #255	; 0xff
 8002cfc:	bf04      	itt	eq
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002d04:	f7ff fa80 	bl	8002208 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d0a:	b123      	cbz	r3, 8002d16 <vQueueWaitForMessageRestricted+0x3a>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d0c:	4620      	mov	r0, r4

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8002d0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 8002d12:	f7ff bc47 	b.w	80025a4 <prvUnlockQueue>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002d1a:	462a      	mov	r2, r5
 8002d1c:	4631      	mov	r1, r6
 8002d1e:	f00a fddd 	bl	800d8dc <vTaskPlaceOnEventListRestricted>
        prvUnlockQueue( pxQueue );
 8002d22:	4620      	mov	r0, r4
    }
 8002d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 8002d28:	f7ff bc3c 	b.w	80025a4 <prvUnlockQueue>

08002d2c <out_buffer>:


// internal buffer output
static inline void out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8002d2c:	429a      	cmp	r2, r3
    ((char*)buffer)[idx] = character;
 8002d2e:	bf38      	it	cc
 8002d30:	5488      	strbcc	r0, [r1, r2]
  }
}
 8002d32:	4770      	bx	lr

08002d34 <out_discard>:

// internal null output
static inline void out_discard(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <out_rev_>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t out_rev_(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002d38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d3c:	469a      	mov	sl, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002d3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 8002d40:	4617      	mov	r7, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002d42:	079a      	lsls	r2, r3, #30
{
 8002d44:	4606      	mov	r6, r0
 8002d46:	468b      	mov	fp, r1
 8002d48:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002d4c:	d111      	bne.n	8002d72 <out_rev_+0x3a>
    for (size_t i = len; i < width; i++) {
 8002d4e:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d20d      	bcs.n	8002d72 <out_rev_+0x3a>
 8002d56:	4613      	mov	r3, r2
 8002d58:	463c      	mov	r4, r7
 8002d5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d5c:	1a9d      	subs	r5, r3, r2
 8002d5e:	443d      	add	r5, r7
      out(' ', buffer, idx++, maxlen);
 8002d60:	4622      	mov	r2, r4
 8002d62:	4653      	mov	r3, sl
 8002d64:	4659      	mov	r1, fp
 8002d66:	2020      	movs	r0, #32
 8002d68:	3401      	adds	r4, #1
 8002d6a:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8002d6c:	42ac      	cmp	r4, r5
 8002d6e:	d1f7      	bne.n	8002d60 <out_rev_+0x28>
 8002d70:	e000      	b.n	8002d74 <out_rev_+0x3c>
 8002d72:	463d      	mov	r5, r7
    }
  }

  // reverse string
  while (len) {
 8002d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d76:	b173      	cbz	r3, 8002d96 <out_rev_+0x5e>
 8002d78:	eb08 0403 	add.w	r4, r8, r3
 8002d7c:	eb04 0905 	add.w	r9, r4, r5
 8002d80:	eba9 0204 	sub.w	r2, r9, r4
    out(buf[--len], buffer, idx++, maxlen);
 8002d84:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8002d88:	4653      	mov	r3, sl
 8002d8a:	4659      	mov	r1, fp
 8002d8c:	47b0      	blx	r6
  while (len) {
 8002d8e:	4544      	cmp	r4, r8
 8002d90:	d1f6      	bne.n	8002d80 <out_rev_+0x48>
    out(buf[--len], buffer, idx++, maxlen);
 8002d92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d94:	441d      	add	r5, r3
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002d96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002d98:	079b      	lsls	r3, r3, #30
 8002d9a:	d50e      	bpl.n	8002dba <out_rev_+0x82>
    while (idx - start_idx < width) {
 8002d9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002d9e:	1bef      	subs	r7, r5, r7
 8002da0:	42bb      	cmp	r3, r7
 8002da2:	d90a      	bls.n	8002dba <out_rev_+0x82>
 8002da4:	461c      	mov	r4, r3
      out(' ', buffer, idx++, maxlen);
 8002da6:	462a      	mov	r2, r5
 8002da8:	4653      	mov	r3, sl
 8002daa:	4659      	mov	r1, fp
 8002dac:	2020      	movs	r0, #32
    while (idx - start_idx < width) {
 8002dae:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 8002db0:	47b0      	blx	r6
    while (idx - start_idx < width) {
 8002db2:	42a7      	cmp	r7, r4
      out(' ', buffer, idx++, maxlen);
 8002db4:	f105 0501 	add.w	r5, r5, #1
    while (idx - start_idx < width) {
 8002db8:	d3f5      	bcc.n	8002da6 <out_rev_+0x6e>
    }
  }

  return idx;
}
 8002dba:	4628      	mov	r0, r5
 8002dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002dc0 <print_integer>:
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
}

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 8002dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc4:	ed2d 8b04 	vpush	{d8-d9}
 8002dc8:	b08f      	sub	sp, #60	; 0x3c
 8002dca:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
 8002dce:	ee09 3a90 	vmov	s19, r3
 8002dd2:	e9dd 561c 	ldrd	r5, r6, [sp, #112]	; 0x70
 8002dd6:	e9dd 9a20 	ldrd	r9, sl, [sp, #128]	; 0x80
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;

  if (!value) {
 8002dda:	ea55 0306 	orrs.w	r3, r5, r6
{
 8002dde:	ee08 0a10 	vmov	s16, r0
 8002de2:	ee08 1a90 	vmov	s17, r1
 8002de6:	ee09 2a10 	vmov	s18, r2
 8002dea:	f89d 707c 	ldrb.w	r7, [sp, #124]	; 0x7c
 8002dee:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8002df2:	9405      	str	r4, [sp, #20]
  if (!value) {
 8002df4:	d15d      	bne.n	8002eb2 <print_integer+0xf2>
    if ( !(flags & FLAGS_PRECISION) ) {
 8002df6:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8002dfa:	f040 80b2 	bne.w	8002f62 <print_integer+0x1a2>
      buf[len++] = '0';
 8002dfe:	2330      	movs	r3, #48	; 0x30
      flags &= ~FLAGS_HASH;
 8002e00:	f02b 0b10 	bic.w	fp, fp, #16
      buf[len++] = '0';
 8002e04:	f88d 3018 	strb.w	r3, [sp, #24]
    if (!(flags & FLAGS_LEFT)) {
 8002e08:	f01b 0f02 	tst.w	fp, #2
 8002e0c:	ab06      	add	r3, sp, #24
      buf[len++] = '0';
 8002e0e:	f04f 0401 	mov.w	r4, #1
 8002e12:	9304      	str	r3, [sp, #16]
    if (!(flags & FLAGS_LEFT)) {
 8002e14:	d07a      	beq.n	8002f0c <print_integer+0x14c>
 8002e16:	4623      	mov	r3, r4
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002e18:	4599      	cmp	r9, r3
 8002e1a:	d90d      	bls.n	8002e38 <print_integer+0x78>
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d00b      	beq.n	8002e38 <print_integer+0x78>
 8002e20:	9804      	ldr	r0, [sp, #16]
 8002e22:	1e5a      	subs	r2, r3, #1
      buf[len++] = '0';
 8002e24:	2130      	movs	r1, #48	; 0x30
 8002e26:	4402      	add	r2, r0
 8002e28:	e001      	b.n	8002e2e <print_integer+0x6e>
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002e2a:	2b20      	cmp	r3, #32
 8002e2c:	d004      	beq.n	8002e38 <print_integer+0x78>
      buf[len++] = '0';
 8002e2e:	3301      	adds	r3, #1
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002e30:	4599      	cmp	r9, r3
      buf[len++] = '0';
 8002e32:	f802 1f01 	strb.w	r1, [r2, #1]!
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002e36:	d1f8      	bne.n	8002e2a <print_integer+0x6a>
    if (base == BASE_OCTAL && (len > unpadded_len)) {
 8002e38:	2f08      	cmp	r7, #8
 8002e3a:	d103      	bne.n	8002e44 <print_integer+0x84>
 8002e3c:	429c      	cmp	r4, r3
      flags &= ~FLAGS_HASH;
 8002e3e:	bf38      	it	cc
 8002e40:	f02b 0b10 	biccc.w	fp, fp, #16
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8002e44:	f241 0210 	movw	r2, #4112	; 0x1010
 8002e48:	ea1b 0f02 	tst.w	fp, r2
 8002e4c:	d011      	beq.n	8002e72 <print_integer+0xb2>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8002e4e:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8002e52:	d07c      	beq.n	8002f4e <print_integer+0x18e>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002e54:	2f10      	cmp	r7, #16
 8002e56:	f000 80bb 	beq.w	8002fd0 <print_integer+0x210>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002e5a:	2f02      	cmp	r7, #2
 8002e5c:	f000 80a1 	beq.w	8002fa2 <print_integer+0x1e2>
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d012      	beq.n	8002e8a <print_integer+0xca>
      buf[len++] = '0';
 8002e64:	2130      	movs	r1, #48	; 0x30
 8002e66:	185a      	adds	r2, r3, r1
 8002e68:	3208      	adds	r2, #8
 8002e6a:	446a      	add	r2, sp
 8002e6c:	f802 1c20 	strb.w	r1, [r2, #-32]
 8002e70:	3301      	adds	r3, #1
  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8002e72:	2b20      	cmp	r3, #32
 8002e74:	d009      	beq.n	8002e8a <print_integer+0xca>
    if (negative) {
 8002e76:	9a05      	ldr	r2, [sp, #20]
 8002e78:	2a00      	cmp	r2, #0
 8002e7a:	d078      	beq.n	8002f6e <print_integer+0x1ae>
      buf[len++] = '-';
 8002e7c:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
 8002e7e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002e82:	446a      	add	r2, sp
 8002e84:	f802 1c20 	strb.w	r1, [r2, #-32]
 8002e88:	3301      	adds	r3, #1
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8002e8a:	9c04      	ldr	r4, [sp, #16]
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	ee19 2a10 	vmov	r2, s18
 8002e92:	ee19 3a90 	vmov	r3, s19
 8002e96:	ee18 1a90 	vmov	r1, s17
 8002e9a:	ee18 0a10 	vmov	r0, s16
 8002e9e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002ea2:	9400      	str	r4, [sp, #0]
 8002ea4:	f7ff ff48 	bl	8002d38 <out_rev_>
      value /= base;
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
  }

  return print_integer_finalization(out, buffer, idx, maxlen, buf, len, negative, base, precision, width, flags);
}
 8002ea8:	b00f      	add	sp, #60	; 0x3c
 8002eaa:	ecbd 8b04 	vpop	{d8-d9}
 8002eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eb2:	f01b 0f20 	tst.w	fp, #32
 8002eb6:	bf14      	ite	ne
 8002eb8:	2341      	movne	r3, #65	; 0x41
 8002eba:	2361      	moveq	r3, #97	; 0x61
 8002ebc:	aa06      	add	r2, sp, #24
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8002ebe:	3b0a      	subs	r3, #10
 8002ec0:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 8002ec4:	4690      	mov	r8, r2
  size_t len = 0U;
 8002ec6:	2400      	movs	r4, #0
 8002ec8:	4699      	mov	r9, r3
 8002eca:	9204      	str	r2, [sp, #16]
 8002ecc:	e003      	b.n	8002ed6 <print_integer+0x116>
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8002ece:	2c20      	cmp	r4, #32
 8002ed0:	d017      	beq.n	8002f02 <print_integer+0x142>
      value /= base;
 8002ed2:	4605      	mov	r5, r0
 8002ed4:	460e      	mov	r6, r1
      const char digit = (char)(value % base);
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	4631      	mov	r1, r6
 8002eda:	463a      	mov	r2, r7
 8002edc:	2300      	movs	r3, #0
 8002ede:	f7fd fea5 	bl	8000c2c <__aeabi_uldivmod>
 8002ee2:	b2d2      	uxtb	r2, r2
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8002ee4:	2a09      	cmp	r2, #9
 8002ee6:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8002eea:	bf8a      	itet	hi
 8002eec:	444a      	addhi	r2, r9
 8002eee:	b2da      	uxtbls	r2, r3
 8002ef0:	b2d2      	uxtbhi	r2, r2
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8002ef2:	42bd      	cmp	r5, r7
 8002ef4:	f176 0300 	sbcs.w	r3, r6, #0
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8002ef8:	f808 2b01 	strb.w	r2, [r8], #1
 8002efc:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8002f00:	d2e5      	bcs.n	8002ece <print_integer+0x10e>
 8002f02:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
    if (!(flags & FLAGS_LEFT)) {
 8002f06:	f01b 0f02 	tst.w	fp, #2
 8002f0a:	d184      	bne.n	8002e16 <print_integer+0x56>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002f0c:	f1ba 0f00 	cmp.w	sl, #0
 8002f10:	d081      	beq.n	8002e16 <print_integer+0x56>
 8002f12:	f01b 0f01 	tst.w	fp, #1
 8002f16:	f43f af7e 	beq.w	8002e16 <print_integer+0x56>
 8002f1a:	9b05      	ldr	r3, [sp, #20]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d152      	bne.n	8002fc6 <print_integer+0x206>
 8002f20:	f01b 0f0c 	tst.w	fp, #12
 8002f24:	d14f      	bne.n	8002fc6 <print_integer+0x206>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002f26:	4554      	cmp	r4, sl
 8002f28:	f4bf af75 	bcs.w	8002e16 <print_integer+0x56>
 8002f2c:	2c1f      	cmp	r4, #31
 8002f2e:	d84d      	bhi.n	8002fcc <print_integer+0x20c>
 8002f30:	9804      	ldr	r0, [sp, #16]
 8002f32:	1e62      	subs	r2, r4, #1
 8002f34:	4623      	mov	r3, r4
        buf[len++] = '0';
 8002f36:	2130      	movs	r1, #48	; 0x30
 8002f38:	4402      	add	r2, r0
 8002f3a:	e001      	b.n	8002f40 <print_integer+0x180>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002f3c:	2b20      	cmp	r3, #32
 8002f3e:	d045      	beq.n	8002fcc <print_integer+0x20c>
        buf[len++] = '0';
 8002f40:	3301      	adds	r3, #1
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002f42:	4553      	cmp	r3, sl
        buf[len++] = '0';
 8002f44:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002f48:	d1f8      	bne.n	8002f3c <print_integer+0x17c>
 8002f4a:	4653      	mov	r3, sl
 8002f4c:	e764      	b.n	8002e18 <print_integer+0x58>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8002f4e:	b9c3      	cbnz	r3, 8002f82 <print_integer+0x1c2>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002f50:	2f10      	cmp	r7, #16
 8002f52:	d055      	beq.n	8003000 <print_integer+0x240>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002f54:	2f02      	cmp	r7, #2
 8002f56:	d060      	beq.n	800301a <print_integer+0x25a>
      buf[len++] = '0';
 8002f58:	2330      	movs	r3, #48	; 0x30
 8002f5a:	f88d 3018 	strb.w	r3, [sp, #24]
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e789      	b.n	8002e76 <print_integer+0xb6>
    else if (base == BASE_HEX) {
 8002f62:	2f10      	cmp	r7, #16
 8002f64:	d029      	beq.n	8002fba <print_integer+0x1fa>
 8002f66:	ab06      	add	r3, sp, #24
  size_t len = 0U;
 8002f68:	2400      	movs	r4, #0
 8002f6a:	9304      	str	r3, [sp, #16]
 8002f6c:	e7cb      	b.n	8002f06 <print_integer+0x146>
    else if (flags & FLAGS_PLUS) {
 8002f6e:	f01b 0f04 	tst.w	fp, #4
 8002f72:	d104      	bne.n	8002f7e <print_integer+0x1be>
    else if (flags & FLAGS_SPACE) {
 8002f74:	f01b 0f08 	tst.w	fp, #8
 8002f78:	d087      	beq.n	8002e8a <print_integer+0xca>
      buf[len++] = ' ';
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	e77f      	b.n	8002e7e <print_integer+0xbe>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002f7e:	212b      	movs	r1, #43	; 0x2b
 8002f80:	e77d      	b.n	8002e7e <print_integer+0xbe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8002f82:	4599      	cmp	r9, r3
 8002f84:	d002      	beq.n	8002f8c <print_integer+0x1cc>
 8002f86:	459a      	cmp	sl, r3
 8002f88:	f47f af64 	bne.w	8002e54 <print_integer+0x94>
      if (unpadded_len < len) {
 8002f8c:	429c      	cmp	r4, r3
 8002f8e:	f4bf af61 	bcs.w	8002e54 <print_integer+0x94>
      if (len && (base == BASE_HEX)) {
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	d0dc      	beq.n	8002f50 <print_integer+0x190>
 8002f96:	2f10      	cmp	r7, #16
 8002f98:	d044      	beq.n	8003024 <print_integer+0x264>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002f9a:	2f02      	cmp	r7, #2
 8002f9c:	d005      	beq.n	8002faa <print_integer+0x1ea>
        len--;
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	e760      	b.n	8002e64 <print_integer+0xa4>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	f43f af71 	beq.w	8002e8a <print_integer+0xca>
 8002fa8:	461a      	mov	r2, r3
      buf[len++] = 'b';
 8002faa:	2162      	movs	r1, #98	; 0x62
 8002fac:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8002fb0:	446b      	add	r3, sp
 8002fb2:	f803 1c20 	strb.w	r1, [r3, #-32]
 8002fb6:	1c53      	adds	r3, r2, #1
 8002fb8:	e752      	b.n	8002e60 <print_integer+0xa0>
      flags &= ~FLAGS_HASH;
 8002fba:	ab06      	add	r3, sp, #24
  size_t len = 0U;
 8002fbc:	2400      	movs	r4, #0
      flags &= ~FLAGS_HASH;
 8002fbe:	f02b 0b10 	bic.w	fp, fp, #16
 8002fc2:	9304      	str	r3, [sp, #16]
 8002fc4:	e79f      	b.n	8002f06 <print_integer+0x146>
        width--;
 8002fc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002fca:	e7ac      	b.n	8002f26 <print_integer+0x166>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e733      	b.n	8002e38 <print_integer+0x78>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002fd0:	f01b 0f20 	tst.w	fp, #32
 8002fd4:	d00b      	beq.n	8002fee <print_integer+0x22e>
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002fd6:	2b20      	cmp	r3, #32
 8002fd8:	f43f af57 	beq.w	8002e8a <print_integer+0xca>
        len--;
 8002fdc:	4619      	mov	r1, r3
      buf[len++] = 'X';
 8002fde:	2258      	movs	r2, #88	; 0x58
 8002fe0:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8002fe4:	446b      	add	r3, sp
 8002fe6:	f803 2c20 	strb.w	r2, [r3, #-32]
 8002fea:	1c4b      	adds	r3, r1, #1
 8002fec:	e738      	b.n	8002e60 <print_integer+0xa0>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	f43f af4b 	beq.w	8002e8a <print_integer+0xca>
      buf[len++] = 'x';
 8002ff4:	9a04      	ldr	r2, [sp, #16]
 8002ff6:	18d1      	adds	r1, r2, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	2278      	movs	r2, #120	; 0x78
 8002ffc:	700a      	strb	r2, [r1, #0]
 8002ffe:	e72f      	b.n	8002e60 <print_integer+0xa0>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003000:	f01b 0f20 	tst.w	fp, #32
 8003004:	d104      	bne.n	8003010 <print_integer+0x250>
      buf[len++] = 'x';
 8003006:	2378      	movs	r3, #120	; 0x78
 8003008:	f88d 3018 	strb.w	r3, [sp, #24]
 800300c:	2301      	movs	r3, #1
 800300e:	e729      	b.n	8002e64 <print_integer+0xa4>
      buf[len++] = 'X';
 8003010:	2358      	movs	r3, #88	; 0x58
 8003012:	f88d 3018 	strb.w	r3, [sp, #24]
 8003016:	2301      	movs	r3, #1
 8003018:	e724      	b.n	8002e64 <print_integer+0xa4>
      buf[len++] = 'b';
 800301a:	2362      	movs	r3, #98	; 0x62
 800301c:	f88d 3018 	strb.w	r3, [sp, #24]
 8003020:	2301      	movs	r3, #1
 8003022:	e71f      	b.n	8002e64 <print_integer+0xa4>
        if (unpadded_len < len) {
 8003024:	4294      	cmp	r4, r2
 8003026:	d208      	bcs.n	800303a <print_integer+0x27a>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003028:	f01b 0f20 	tst.w	fp, #32
          len--;
 800302c:	f1a3 0102 	sub.w	r1, r3, #2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003030:	d1d5      	bne.n	8002fde <print_integer+0x21e>
      buf[len++] = 'x';
 8003032:	4613      	mov	r3, r2
 8003034:	9a04      	ldr	r2, [sp, #16]
 8003036:	4411      	add	r1, r2
 8003038:	e7df      	b.n	8002ffa <print_integer+0x23a>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800303a:	f01b 0f20 	tst.w	fp, #32
        len--;
 800303e:	4613      	mov	r3, r2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003040:	d0d8      	beq.n	8002ff4 <print_integer+0x234>
 8003042:	e7cb      	b.n	8002fdc <print_integer+0x21c>

08003044 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
 8003044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003048:	ed2d 8b02 	vpush	{d8}
 800304c:	469b      	mov	fp, r3
 800304e:	b083      	sub	sp, #12
  struct double_components number_;
  number_.is_negative = get_sign(number);
  double abs_number = (number_.is_negative) ? -number : number;
 8003050:	0fdb      	lsrs	r3, r3, #31
{
 8003052:	4692      	mov	sl, r2
 8003054:	4605      	mov	r5, r0
  double abs_number = (number_.is_negative) ? -number : number;
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	d002      	beq.n	8003060 <get_components+0x1c>
 800305a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800305e:	469b      	mov	fp, r3
  number_.integral = (int_fast64_t)abs_number;
 8003060:	4650      	mov	r0, sl
 8003062:	4659      	mov	r1, fp
 8003064:	f7fd fdfa 	bl	8000c5c <__aeabi_d2lz>
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8003068:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800306a:	4b40      	ldr	r3, [pc, #256]	; (800316c <get_components+0x128>)
  number_.integral = (int_fast64_t)abs_number;
 800306c:	4606      	mov	r6, r0
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 800306e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003072:	ed93 8b00 	vldr	d8, [r3]
  number_.integral = (int_fast64_t)abs_number;
 8003076:	9100      	str	r1, [sp, #0]
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8003078:	f7fd fa98 	bl	80005ac <__aeabi_l2d>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4650      	mov	r0, sl
 8003082:	4659      	mov	r1, fp
 8003084:	f7fd f908 	bl	8000298 <__aeabi_dsub>
 8003088:	ec53 2b18 	vmov	r2, r3, d8
 800308c:	f7fd fabc 	bl	8000608 <__aeabi_dmul>
 8003090:	4680      	mov	r8, r0
 8003092:	4689      	mov	r9, r1
  number_.fractional = (int_fast64_t)remainder;
 8003094:	f7fd fde2 	bl	8000c5c <__aeabi_d2lz>
 8003098:	4604      	mov	r4, r0
 800309a:	460f      	mov	r7, r1

  remainder -= (double) number_.fractional;
 800309c:	f7fd fa86 	bl	80005ac <__aeabi_l2d>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4640      	mov	r0, r8
 80030a6:	4649      	mov	r1, r9
 80030a8:	f7fd f8f6 	bl	8000298 <__aeabi_dsub>

  if (remainder > 0.5) {
 80030ac:	2200      	movs	r2, #0
 80030ae:	4b30      	ldr	r3, [pc, #192]	; (8003170 <get_components+0x12c>)
  remainder -= (double) number_.fractional;
 80030b0:	4680      	mov	r8, r0
 80030b2:	4689      	mov	r9, r1
  if (remainder > 0.5) {
 80030b4:	f7fd fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	d03c      	beq.n	8003136 <get_components+0xf2>
    ++number_.fractional;
 80030bc:	3401      	adds	r4, #1
 80030be:	f147 0700 	adc.w	r7, r7, #0
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 80030c2:	4639      	mov	r1, r7
 80030c4:	4620      	mov	r0, r4
 80030c6:	f7fd fa71 	bl	80005ac <__aeabi_l2d>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	ec51 0b18 	vmov	r0, r1, d8
 80030d2:	f7fd fd15 	bl	8000b00 <__aeabi_dcmple>
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d13c      	bne.n	8003154 <get_components+0x110>
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
    }
  }

  if (precision == 0U) {
 80030da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80030dc:	b9f3      	cbnz	r3, 800311c <get_components+0xd8>
    remainder = abs_number - (double) number_.integral;
 80030de:	4630      	mov	r0, r6
 80030e0:	9900      	ldr	r1, [sp, #0]
 80030e2:	f7fd fa63 	bl	80005ac <__aeabi_l2d>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4650      	mov	r0, sl
 80030ec:	4659      	mov	r1, fp
 80030ee:	f7fd f8d3 	bl	8000298 <__aeabi_dsub>
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 80030f2:	2200      	movs	r2, #0
 80030f4:	4b1e      	ldr	r3, [pc, #120]	; (8003170 <get_components+0x12c>)
    remainder = abs_number - (double) number_.integral;
 80030f6:	4680      	mov	r8, r0
 80030f8:	4689      	mov	r9, r1
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 80030fa:	f7fd fcf7 	bl	8000aec <__aeabi_dcmplt>
 80030fe:	b130      	cbz	r0, 800310e <get_components+0xca>
 8003100:	4640      	mov	r0, r8
 8003102:	4649      	mov	r1, r9
 8003104:	2200      	movs	r2, #0
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <get_components+0x12c>)
 8003108:	f7fd fd0e 	bl	8000b28 <__aeabi_dcmpgt>
 800310c:	b130      	cbz	r0, 800311c <get_components+0xd8>
 800310e:	07f3      	lsls	r3, r6, #31
 8003110:	d504      	bpl.n	800311c <get_components+0xd8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8003112:	9b00      	ldr	r3, [sp, #0]
 8003114:	3601      	adds	r6, #1
 8003116:	f143 0300 	adc.w	r3, r3, #0
 800311a:	9300      	str	r3, [sp, #0]
    }
  }
  return number_;
}
 800311c:	4628      	mov	r0, r5
  return number_;
 800311e:	9b00      	ldr	r3, [sp, #0]
 8003120:	602e      	str	r6, [r5, #0]
 8003122:	e9c5 3401 	strd	r3, r4, [r5, #4]
 8003126:	9b01      	ldr	r3, [sp, #4]
 8003128:	60ef      	str	r7, [r5, #12]
 800312a:	742b      	strb	r3, [r5, #16]
}
 800312c:	b003      	add	sp, #12
 800312e:	ecbd 8b02 	vpop	{d8}
 8003132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (remainder == 0.5) {
 8003136:	4640      	mov	r0, r8
 8003138:	4649      	mov	r1, r9
 800313a:	2200      	movs	r2, #0
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <get_components+0x12c>)
 800313e:	f7fd fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003142:	2800      	cmp	r0, #0
 8003144:	d0c9      	beq.n	80030da <get_components+0x96>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 8003146:	ea54 0307 	orrs.w	r3, r4, r7
 800314a:	d10b      	bne.n	8003164 <get_components+0x120>
      ++number_.fractional;
 800314c:	3401      	adds	r4, #1
 800314e:	f147 0700 	adc.w	r7, r7, #0
 8003152:	e7c2      	b.n	80030da <get_components+0x96>
      number_.fractional = 0;
 8003154:	2400      	movs	r4, #0
      ++number_.integral;
 8003156:	9b00      	ldr	r3, [sp, #0]
 8003158:	3601      	adds	r6, #1
 800315a:	f143 0300 	adc.w	r3, r3, #0
      number_.fractional = 0;
 800315e:	4627      	mov	r7, r4
      ++number_.integral;
 8003160:	9300      	str	r3, [sp, #0]
 8003162:	e7ba      	b.n	80030da <get_components+0x96>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 8003164:	07e2      	lsls	r2, r4, #31
 8003166:	d5b8      	bpl.n	80030da <get_components+0x96>
 8003168:	e7f0      	b.n	800314c <get_components+0x108>
 800316a:	bf00      	nop
 800316c:	08011a20 	.word	0x08011a20
 8003170:	3fe00000 	.word	0x3fe00000

08003174 <print_broken_up_decimal.isra.0>:
  }
  return components;
}
#endif

static size_t print_broken_up_decimal(
 8003174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003178:	ed2d 8b04 	vpush	{d8-d9}
 800317c:	b087      	sub	sp, #28
 800317e:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8003182:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8003184:	9404      	str	r4, [sp, #16]
 8003186:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8003188:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 800318c:	ee08 4a10 	vmov	s16, r4
 8003190:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8003192:	9502      	str	r5, [sp, #8]
 8003194:	ee08 4a90 	vmov	s17, r4
 8003198:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 800319a:	460d      	mov	r5, r1
 800319c:	ee09 4a10 	vmov	s18, r4
 80031a0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80031a2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80031a4:	ee09 4a90 	vmov	s19, r4
 80031a8:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80031aa:	9403      	str	r4, [sp, #12]
 80031ac:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80031ae:	9401      	str	r4, [sp, #4]
 80031b0:	4604      	mov	r4, r0
  struct double_components number_, out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned int precision,
  unsigned int width, unsigned int flags, char *buf, size_t len)
{
  if (precision != 0U) {
 80031b2:	f1b9 0f00 	cmp.w	r9, #0
 80031b6:	d049      	beq.n	800324c <print_broken_up_decimal.isra.0+0xd8>
 80031b8:	4698      	mov	r8, r3
    // do fractional part, as an unsigned number

    unsigned int count = precision;

    if (flags & FLAGS_ADAPT_EXP && !(flags & FLAGS_HASH)) {
 80031ba:	9b01      	ldr	r3, [sp, #4]
 80031bc:	4617      	mov	r7, r2
 80031be:	f403 6301 	and.w	r3, r3, #2064	; 0x810
 80031c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c6:	f000 8099 	beq.w	80032fc <print_broken_up_decimal.isra.0+0x188>
 80031ca:	9a02      	ldr	r2, [sp, #8]
 80031cc:	1e73      	subs	r3, r6, #1
 80031ce:	eb02 0b03 	add.w	fp, r2, r3
 80031d2:	9405      	str	r4, [sp, #20]
 80031d4:	e017      	b.n	8003206 <print_broken_up_decimal.isra.0+0x92>
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
        --count;
        buf[len++] = (char)('0' + number_.fractional % 10U);
 80031d6:	4638      	mov	r0, r7
 80031d8:	4641      	mov	r1, r8
 80031da:	220a      	movs	r2, #10
 80031dc:	2300      	movs	r3, #0
 80031de:	f7fd fcd5 	bl	8000b8c <__aeabi_ldivmod>
 80031e2:	4694      	mov	ip, r2
        if (!(number_.fractional /= 10U)) {
 80031e4:	4638      	mov	r0, r7
        buf[len++] = (char)('0' + number_.fractional % 10U);
 80031e6:	f10c 0730 	add.w	r7, ip, #48	; 0x30
        if (!(number_.fractional /= 10U)) {
 80031ea:	4641      	mov	r1, r8
 80031ec:	2300      	movs	r3, #0
        buf[len++] = (char)('0' + number_.fractional % 10U);
 80031ee:	f80b 7f01 	strb.w	r7, [fp, #1]!
        if (!(number_.fractional /= 10U)) {
 80031f2:	220a      	movs	r2, #10
 80031f4:	f7fd fcca 	bl	8000b8c <__aeabi_ldivmod>
 80031f8:	ea51 0300 	orrs.w	r3, r1, r0
 80031fc:	4607      	mov	r7, r0
 80031fe:	4688      	mov	r8, r1
 8003200:	d066      	beq.n	80032d0 <print_broken_up_decimal.isra.0+0x15c>
        --count;
 8003202:	46a1      	mov	r9, r4
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8003204:	4656      	mov	r6, sl
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003206:	2e20      	cmp	r6, #32
        --count;
 8003208:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
        buf[len++] = (char)('0' + number_.fractional % 10U);
 800320c:	f106 0a01 	add.w	sl, r6, #1
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003210:	d1e1      	bne.n	80031d6 <print_broken_up_decimal.isra.0+0x62>
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003212:	9b01      	ldr	r3, [sp, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b01      	cmp	r3, #1
 800321a:	f000 809a 	beq.w	8003352 <print_broken_up_decimal.isra.0+0x1de>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800321e:	2720      	movs	r7, #32
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8003220:	9b01      	ldr	r3, [sp, #4]
 8003222:	ee19 2a10 	vmov	r2, s18
 8003226:	9317      	str	r3, [sp, #92]	; 0x5c
 8003228:	9b03      	ldr	r3, [sp, #12]
 800322a:	ee18 1a90 	vmov	r1, s17
 800322e:	e9cd 7315 	strd	r7, r3, [sp, #84]	; 0x54
 8003232:	ee18 0a10 	vmov	r0, s16
 8003236:	ee19 3a90 	vmov	r3, s19
 800323a:	9c02      	ldr	r4, [sp, #8]
 800323c:	9414      	str	r4, [sp, #80]	; 0x50
}
 800323e:	b007      	add	sp, #28
 8003240:	ecbd 8b04 	vpop	{d8-d9}
 8003244:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8003248:	f7ff bd76 	b.w	8002d38 <out_rev_>
    if (flags & FLAGS_HASH) {
 800324c:	9b01      	ldr	r3, [sp, #4]
 800324e:	06d9      	lsls	r1, r3, #27
 8003250:	d505      	bpl.n	800325e <print_broken_up_decimal.isra.0+0xea>
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003252:	2e20      	cmp	r6, #32
 8003254:	d0dd      	beq.n	8003212 <print_broken_up_decimal.isra.0+0x9e>
        buf[len++] = '.';
 8003256:	232e      	movs	r3, #46	; 0x2e
 8003258:	9a02      	ldr	r2, [sp, #8]
 800325a:	5593      	strb	r3, [r2, r6]
 800325c:	3601      	adds	r6, #1
 800325e:	9b02      	ldr	r3, [sp, #8]
 8003260:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8003264:	4498      	add	r8, r3
 8003266:	e000      	b.n	800326a <print_broken_up_decimal.isra.0+0xf6>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8003268:	463e      	mov	r6, r7
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800326a:	2e20      	cmp	r6, #32
    buf[len++] = (char)('0' + (number_.integral % 10));
 800326c:	f106 0701 	add.w	r7, r6, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003270:	d0cf      	beq.n	8003212 <print_broken_up_decimal.isra.0+0x9e>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8003272:	4620      	mov	r0, r4
 8003274:	4629      	mov	r1, r5
 8003276:	220a      	movs	r2, #10
 8003278:	2300      	movs	r3, #0
 800327a:	f7fd fc87 	bl	8000b8c <__aeabi_ldivmod>
 800327e:	4694      	mov	ip, r2
    if (!(number_.integral /= 10)) {
 8003280:	4620      	mov	r0, r4
    buf[len++] = (char)('0' + (number_.integral % 10));
 8003282:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    if (!(number_.integral /= 10)) {
 8003286:	2300      	movs	r3, #0
 8003288:	4629      	mov	r1, r5
    buf[len++] = (char)('0' + (number_.integral % 10));
 800328a:	f808 4f01 	strb.w	r4, [r8, #1]!
    if (!(number_.integral /= 10)) {
 800328e:	220a      	movs	r2, #10
 8003290:	f7fd fc7c 	bl	8000b8c <__aeabi_ldivmod>
 8003294:	ea51 0300 	orrs.w	r3, r1, r0
 8003298:	4604      	mov	r4, r0
 800329a:	460d      	mov	r5, r1
 800329c:	d1e4      	bne.n	8003268 <print_broken_up_decimal.isra.0+0xf4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800329e:	9b01      	ldr	r3, [sp, #4]
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d062      	beq.n	800336e <print_broken_up_decimal.isra.0+0x1fa>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80032a8:	2f20      	cmp	r7, #32
 80032aa:	d0b8      	beq.n	800321e <print_broken_up_decimal.isra.0+0xaa>
    if (number_.is_negative) {
 80032ac:	9b04      	ldr	r3, [sp, #16]
 80032ae:	b123      	cbz	r3, 80032ba <print_broken_up_decimal.isra.0+0x146>
      buf[len++] = '-';
 80032b0:	232d      	movs	r3, #45	; 0x2d
 80032b2:	9a02      	ldr	r2, [sp, #8]
 80032b4:	55d3      	strb	r3, [r2, r7]
 80032b6:	3701      	adds	r7, #1
 80032b8:	e7b2      	b.n	8003220 <print_broken_up_decimal.isra.0+0xac>
    else if (flags & FLAGS_PLUS) {
 80032ba:	9b01      	ldr	r3, [sp, #4]
 80032bc:	075a      	lsls	r2, r3, #29
 80032be:	d443      	bmi.n	8003348 <print_broken_up_decimal.isra.0+0x1d4>
    else if (flags & FLAGS_SPACE) {
 80032c0:	9b01      	ldr	r3, [sp, #4]
 80032c2:	071b      	lsls	r3, r3, #28
 80032c4:	d5ac      	bpl.n	8003220 <print_broken_up_decimal.isra.0+0xac>
      buf[len++] = ' ';
 80032c6:	2320      	movs	r3, #32
 80032c8:	9a02      	ldr	r2, [sp, #8]
 80032ca:	55d3      	strb	r3, [r2, r7]
 80032cc:	3701      	adds	r7, #1
 80032ce:	e7a7      	b.n	8003220 <print_broken_up_decimal.isra.0+0xac>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80032d0:	f1ba 0f20 	cmp.w	sl, #32
 80032d4:	4623      	mov	r3, r4
 80032d6:	9c05      	ldr	r4, [sp, #20]
 80032d8:	d09b      	beq.n	8003212 <print_broken_up_decimal.isra.0+0x9e>
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d068      	beq.n	80033b0 <print_broken_up_decimal.isra.0+0x23c>
 80032de:	9b02      	ldr	r3, [sp, #8]
        buf[len++] = '0';
 80032e0:	2130      	movs	r1, #48	; 0x30
 80032e2:	199a      	adds	r2, r3, r6
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80032e4:	4656      	mov	r6, sl
        buf[len++] = '0';
 80032e6:	3601      	adds	r6, #1
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80032e8:	2e20      	cmp	r6, #32
        buf[len++] = '0';
 80032ea:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80032ee:	d090      	beq.n	8003212 <print_broken_up_decimal.isra.0+0x9e>
 80032f0:	43f3      	mvns	r3, r6
 80032f2:	444b      	add	r3, r9
 80032f4:	eb1a 0f03 	cmn.w	sl, r3
 80032f8:	d1f5      	bne.n	80032e6 <print_broken_up_decimal.isra.0+0x172>
 80032fa:	e7ac      	b.n	8003256 <print_broken_up_decimal.isra.0+0xe2>
      if (number_.fractional > 0) {
 80032fc:	2a01      	cmp	r2, #1
 80032fe:	f178 0300 	sbcs.w	r3, r8, #0
 8003302:	dbac      	blt.n	800325e <print_broken_up_decimal.isra.0+0xea>
          if (digit != 0) {
 8003304:	4610      	mov	r0, r2
 8003306:	4641      	mov	r1, r8
 8003308:	220a      	movs	r2, #10
 800330a:	2300      	movs	r3, #0
 800330c:	f7fd fc3e 	bl	8000b8c <__aeabi_ldivmod>
 8003310:	4313      	orrs	r3, r2
 8003312:	f47f af5a 	bne.w	80031ca <print_broken_up_decimal.isra.0+0x56>
          number_.fractional /= 10U;
 8003316:	4638      	mov	r0, r7
 8003318:	4641      	mov	r1, r8
 800331a:	220a      	movs	r2, #10
 800331c:	2300      	movs	r3, #0
 800331e:	f7fd fc35 	bl	8000b8c <__aeabi_ldivmod>
 8003322:	220a      	movs	r2, #10
 8003324:	2300      	movs	r3, #0
 8003326:	46bb      	mov	fp, r7
 8003328:	46c2      	mov	sl, r8
 800332a:	4607      	mov	r7, r0
 800332c:	4688      	mov	r8, r1
 800332e:	f7fd fc2d 	bl	8000b8c <__aeabi_ldivmod>
          if (digit != 0) {
 8003332:	4313      	orrs	r3, r2
          --count;
 8003334:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
          if (digit != 0) {
 8003338:	d0ed      	beq.n	8003316 <print_broken_up_decimal.isra.0+0x1a2>
    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 800333a:	f1bb 0f0a 	cmp.w	fp, #10
 800333e:	f17a 0300 	sbcs.w	r3, sl, #0
 8003342:	f6bf af42 	bge.w	80031ca <print_broken_up_decimal.isra.0+0x56>
 8003346:	e78a      	b.n	800325e <print_broken_up_decimal.isra.0+0xea>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8003348:	232b      	movs	r3, #43	; 0x2b
 800334a:	9a02      	ldr	r2, [sp, #8]
 800334c:	55d3      	strb	r3, [r2, r7]
 800334e:	3701      	adds	r7, #1
 8003350:	e766      	b.n	8003220 <print_broken_up_decimal.isra.0+0xac>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003352:	9b03      	ldr	r3, [sp, #12]
 8003354:	2b00      	cmp	r3, #0
 8003356:	f43f af62 	beq.w	800321e <print_broken_up_decimal.isra.0+0xaa>
 800335a:	9a04      	ldr	r2, [sp, #16]
 800335c:	bb0a      	cbnz	r2, 80033a2 <print_broken_up_decimal.isra.0+0x22e>
 800335e:	9a01      	ldr	r2, [sp, #4]
 8003360:	f012 0f0c 	tst.w	r2, #12
 8003364:	f43f af5b 	beq.w	800321e <print_broken_up_decimal.isra.0+0xaa>
      width--;
 8003368:	3b01      	subs	r3, #1
 800336a:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800336c:	e757      	b.n	800321e <print_broken_up_decimal.isra.0+0xaa>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800336e:	9b03      	ldr	r3, [sp, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d099      	beq.n	80032a8 <print_broken_up_decimal.isra.0+0x134>
 8003374:	9b04      	ldr	r3, [sp, #16]
 8003376:	b1b3      	cbz	r3, 80033a6 <print_broken_up_decimal.isra.0+0x232>
      width--;
 8003378:	9b03      	ldr	r3, [sp, #12]
 800337a:	3b01      	subs	r3, #1
 800337c:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800337e:	9b03      	ldr	r3, [sp, #12]
 8003380:	429f      	cmp	r7, r3
 8003382:	d291      	bcs.n	80032a8 <print_broken_up_decimal.isra.0+0x134>
 8003384:	2f1f      	cmp	r7, #31
 8003386:	f63f af4a 	bhi.w	800321e <print_broken_up_decimal.isra.0+0xaa>
 800338a:	9b02      	ldr	r3, [sp, #8]
      buf[len++] = '0';
 800338c:	9a03      	ldr	r2, [sp, #12]
 800338e:	441e      	add	r6, r3
 8003390:	2330      	movs	r3, #48	; 0x30
 8003392:	3701      	adds	r7, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8003394:	4297      	cmp	r7, r2
      buf[len++] = '0';
 8003396:	f806 3f01 	strb.w	r3, [r6, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800339a:	d085      	beq.n	80032a8 <print_broken_up_decimal.isra.0+0x134>
 800339c:	2f20      	cmp	r7, #32
 800339e:	d1f8      	bne.n	8003392 <print_broken_up_decimal.isra.0+0x21e>
 80033a0:	e73d      	b.n	800321e <print_broken_up_decimal.isra.0+0xaa>
      width--;
 80033a2:	9b03      	ldr	r3, [sp, #12]
 80033a4:	e7e0      	b.n	8003368 <print_broken_up_decimal.isra.0+0x1f4>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80033a6:	9b01      	ldr	r3, [sp, #4]
 80033a8:	f013 0f0c 	tst.w	r3, #12
 80033ac:	d0e7      	beq.n	800337e <print_broken_up_decimal.isra.0+0x20a>
 80033ae:	e7e3      	b.n	8003378 <print_broken_up_decimal.isra.0+0x204>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80033b0:	4656      	mov	r6, sl
 80033b2:	e750      	b.n	8003256 <print_broken_up_decimal.isra.0+0xe2>
 80033b4:	0000      	movs	r0, r0
	...

080033b8 <print_exponential_number>:
}

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
 80033b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033bc:	ed2d 8b04 	vpush	{d8-d9}
 80033c0:	b097      	sub	sp, #92	; 0x5c
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 80033c2:	9c25      	ldr	r4, [sp, #148]	; 0x94
{
 80033c4:	2700      	movs	r7, #0
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 80033c6:	0fe4      	lsrs	r4, r4, #31
{
 80033c8:	4689      	mov	r9, r1
 80033ca:	4698      	mov	r8, r3
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 80033cc:	940d      	str	r4, [sp, #52]	; 0x34
  const bool negative = get_sign(number);
 80033ce:	940f      	str	r4, [sp, #60]	; 0x3c
{
 80033d0:	900b      	str	r0, [sp, #44]	; 0x2c
 80033d2:	920c      	str	r2, [sp, #48]	; 0x30
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
 80033d4:	b12c      	cbz	r4, 80033e2 <print_exponential_number+0x2a>
 80033d6:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 80033da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80033de:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
 80033e2:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80033e6:	2200      	movs	r2, #0
 80033e8:	2300      	movs	r3, #0
 80033ea:	f7fd fb75 	bl	8000ad8 <__aeabi_dcmpeq>
 80033ee:	900e      	str	r0, [sp, #56]	; 0x38
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d055      	beq.n	80034a0 <print_exponential_number+0xe8>
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
  if (flags & FLAGS_ADAPT_EXP) {
 80033f4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80033f6:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 80033fa:	f040 81c3 	bne.w	8003784 <print_exponential_number+0x3cc>
 80033fe:	461f      	mov	r7, r3
  bool fall_back_to_decimal_only_mode = false;
 8003400:	469b      	mov	fp, r3

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
 8003402:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003404:	b12b      	cbz	r3, 8003412 <print_exponential_number+0x5a>
 8003406:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 800340a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800340e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8003412:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8003416:	9926      	ldr	r1, [sp, #152]	; 0x98
 8003418:	a810      	add	r0, sp, #64	; 0x40
 800341a:	9100      	str	r1, [sp, #0]
 800341c:	f7ff fe12 	bl	8003044 <get_components>
 8003420:	e9dd 6a12 	ldrd	r6, sl, [sp, #72]	; 0x48
 8003424:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8003428:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800342c:	930d      	str	r3, [sp, #52]	; 0x34
    get_normalized_components(negative, precision, abs_number, normalization);

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
 800342e:	2f00      	cmp	r7, #0
 8003430:	f000 8189 	beq.w	8003746 <print_exponential_number+0x38e>
    if ( (flags & FLAGS_ADAPT_EXP) && exp10 >= -1 && decimal_part_components.integral == powers_of_10[exp10 + 1]) {
 8003434:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003436:	051f      	lsls	r7, r3, #20
 8003438:	d511      	bpl.n	800345e <print_exponential_number+0xa6>
 800343a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800343e:	db0e      	blt.n	800345e <print_exponential_number+0xa6>
 8003440:	4620      	mov	r0, r4
 8003442:	4629      	mov	r1, r5
 8003444:	f7fd f8b2 	bl	80005ac <__aeabi_l2d>
 8003448:	4b14      	ldr	r3, [pc, #80]	; (800349c <print_exponential_number+0xe4>)
 800344a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800344e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003452:	f7fd fb41 	bl	8000ad8 <__aeabi_dcmpeq>
 8003456:	b110      	cbz	r0, 800345e <print_exponential_number+0xa6>
      exp10++; // Not strictly necessary, since exp10 is no longer really used
      precision--;
 8003458:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800345a:	3b01      	subs	r3, #1
 800345c:	9326      	str	r3, [sp, #152]	; 0x98
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const size_t start_idx = idx;
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 800345e:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003460:	4620      	mov	r0, r4
 8003462:	9309      	str	r3, [sp, #36]	; 0x24
 8003464:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003466:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003468:	9308      	str	r3, [sp, #32]
 800346a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800346c:	9400      	str	r4, [sp, #0]
 800346e:	9307      	str	r3, [sp, #28]
 8003470:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003472:	4632      	mov	r2, r6
 8003474:	9306      	str	r3, [sp, #24]
 8003476:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003478:	4629      	mov	r1, r5
 800347a:	e9cd 8304 	strd	r8, r3, [sp, #16]
 800347e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003480:	e9cd 9302 	strd	r9, r3, [sp, #8]
 8003484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003486:	9301      	str	r3, [sp, #4]
 8003488:	4653      	mov	r3, sl
 800348a:	f7ff fe73 	bl	8003174 <print_broken_up_decimal.isra.0>
 800348e:	4604      	mov	r4, r0
      // We need to right-pad with spaces to meet the width requirement
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 8003490:	4620      	mov	r0, r4
 8003492:	b017      	add	sp, #92	; 0x5c
 8003494:	ecbd 8b04 	vpop	{d8-d9}
 8003498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800349c:	08011a20 	.word	0x08011a20
  return dwba;
 80034a0:	e9dd 6524 	ldrd	r6, r5, [sp, #144]	; 0x90
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 80034a4:	f3c5 500a 	ubfx	r0, r5, #20, #11
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80034a8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80034ac:	f7fd f842 	bl	8000534 <__aeabi_i2d>
 80034b0:	a3ce      	add	r3, pc, #824	; (adr r3, 80037ec <print_exponential_number+0x434>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd f8a7 	bl	8000608 <__aeabi_dmul>
 80034ba:	a3ce      	add	r3, pc, #824	; (adr r3, 80037f4 <print_exponential_number+0x43c>)
 80034bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c0:	f7fc feec 	bl	800029c <__adddf3>
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80034c4:	f3c5 0313 	ubfx	r3, r5, #0, #20
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80034c8:	460d      	mov	r5, r1
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80034ca:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80034ce:	4604      	mov	r4, r0
 80034d0:	2200      	movs	r2, #0
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80034d2:	4630      	mov	r0, r6
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80034d4:	4bbe      	ldr	r3, [pc, #760]	; (80037d0 <print_exponential_number+0x418>)
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 80034d6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80034da:	f7fc fedd 	bl	8000298 <__aeabi_dsub>
 80034de:	a3b4      	add	r3, pc, #720	; (adr r3, 80037b0 <print_exponential_number+0x3f8>)
 80034e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e4:	f7fd f890 	bl	8000608 <__aeabi_dmul>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4620      	mov	r0, r4
 80034ee:	4629      	mov	r1, r5
 80034f0:	f7fc fed4 	bl	800029c <__adddf3>
 80034f4:	f7fd fb22 	bl	8000b3c <__aeabi_d2iz>
 80034f8:	4683      	mov	fp, r0
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 80034fa:	f7fd f81b 	bl	8000534 <__aeabi_i2d>
 80034fe:	a3ae      	add	r3, pc, #696	; (adr r3, 80037b8 <print_exponential_number+0x400>)
 8003500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003504:	4604      	mov	r4, r0
 8003506:	460d      	mov	r5, r1
 8003508:	f7fd f87e 	bl	8000608 <__aeabi_dmul>
 800350c:	2200      	movs	r2, #0
 800350e:	4bb1      	ldr	r3, [pc, #708]	; (80037d4 <print_exponential_number+0x41c>)
 8003510:	f7fc fec4 	bl	800029c <__adddf3>
 8003514:	f7fd fb12 	bl	8000b3c <__aeabi_d2iz>
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003518:	a3a9      	add	r3, pc, #676	; (adr r3, 80037c0 <print_exponential_number+0x408>)
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 800351e:	4682      	mov	sl, r0
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003520:	4629      	mov	r1, r5
 8003522:	4620      	mov	r0, r4
 8003524:	f7fd f870 	bl	8000608 <__aeabi_dmul>
 8003528:	4604      	mov	r4, r0
 800352a:	4650      	mov	r0, sl
 800352c:	460d      	mov	r5, r1
 800352e:	f7fd f801 	bl	8000534 <__aeabi_i2d>
 8003532:	a3a5      	add	r3, pc, #660	; (adr r3, 80037c8 <print_exponential_number+0x410>)
 8003534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003538:	f7fd f866 	bl	8000608 <__aeabi_dmul>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4620      	mov	r0, r4
 8003542:	4629      	mov	r1, r5
 8003544:	f7fc fea8 	bl	8000298 <__aeabi_dsub>
      const double z2 = z * z;
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 800354c:	4604      	mov	r4, r0
 800354e:	460d      	mov	r5, r1
      const double z2 = z * z;
 8003550:	f7fd f85a 	bl	8000608 <__aeabi_dmul>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003554:	4622      	mov	r2, r4
      const double z2 = z * z;
 8003556:	4606      	mov	r6, r0
 8003558:	460f      	mov	r7, r1
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800355a:	462b      	mov	r3, r5
 800355c:	4620      	mov	r0, r4
 800355e:	4629      	mov	r1, r5
 8003560:	f7fc fe9c 	bl	800029c <__adddf3>
 8003564:	2200      	movs	r2, #0
 8003566:	ec41 0b18 	vmov	d8, r0, r1
 800356a:	4b9b      	ldr	r3, [pc, #620]	; (80037d8 <print_exponential_number+0x420>)
 800356c:	4630      	mov	r0, r6
 800356e:	4639      	mov	r1, r7
 8003570:	f7fd f974 	bl	800085c <__aeabi_ddiv>
 8003574:	2200      	movs	r2, #0
 8003576:	4b99      	ldr	r3, [pc, #612]	; (80037dc <print_exponential_number+0x424>)
 8003578:	f7fc fe90 	bl	800029c <__adddf3>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4630      	mov	r0, r6
 8003582:	4639      	mov	r1, r7
 8003584:	f7fd f96a 	bl	800085c <__aeabi_ddiv>
 8003588:	2200      	movs	r2, #0
 800358a:	4b95      	ldr	r3, [pc, #596]	; (80037e0 <print_exponential_number+0x428>)
 800358c:	f7fc fe86 	bl	800029c <__adddf3>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4630      	mov	r0, r6
 8003596:	4639      	mov	r1, r7
 8003598:	f7fd f960 	bl	800085c <__aeabi_ddiv>
 800359c:	4622      	mov	r2, r4
 800359e:	462b      	mov	r3, r5
 80035a0:	4604      	mov	r4, r0
 80035a2:	460d      	mov	r5, r1
 80035a4:	2000      	movs	r0, #0
 80035a6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80035aa:	f7fc fe75 	bl	8000298 <__aeabi_dsub>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4620      	mov	r0, r4
 80035b4:	4629      	mov	r1, r5
 80035b6:	f7fc fe71 	bl	800029c <__adddf3>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	ec51 0b18 	vmov	r0, r1, d8
 80035c2:	f7fd f94b 	bl	800085c <__aeabi_ddiv>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 80035c6:	f20a 3aff 	addw	sl, sl, #1023	; 0x3ff
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80035ca:	2200      	movs	r2, #0
 80035cc:	4b85      	ldr	r3, [pc, #532]	; (80037e4 <print_exponential_number+0x42c>)
 80035ce:	f7fc fe65 	bl	800029c <__adddf3>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 80035d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035d4:	ea4f 530a 	mov.w	r3, sl, lsl #20
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80035d8:	f7fd f816 	bl	8000608 <__aeabi_dmul>
      if (abs_number < conv.F) {
 80035dc:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80035e0:	4604      	mov	r4, r0
 80035e2:	460d      	mov	r5, r1
      if (abs_number < conv.F) {
 80035e4:	f7fd faa0 	bl	8000b28 <__aeabi_dcmpgt>
 80035e8:	2800      	cmp	r0, #0
 80035ea:	f040 80c2 	bne.w	8003772 <print_exponential_number+0x3ba>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80035ee:	4620      	mov	r0, r4
 80035f0:	4629      	mov	r1, r5
    abs_exp10_covered_by_powers_table = PRINTF_ABS(exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
 80035f2:	f10b 0311 	add.w	r3, fp, #17
 80035f6:	2b22      	cmp	r3, #34	; 0x22
 80035f8:	bf94      	ite	ls
 80035fa:	2701      	movls	r7, #1
 80035fc:	2700      	movhi	r7, #0
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 80035fe:	f200 8159 	bhi.w	80038b4 <print_exponential_number+0x4fc>
 8003602:	4a79      	ldr	r2, [pc, #484]	; (80037e8 <print_exponential_number+0x430>)
 8003604:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8003608:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 800360c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003610:	ed92 7b00 	vldr	d7, [r2]
 8003614:	eeb0 8a47 	vmov.f32	s16, s14
 8003618:	eef0 8a67 	vmov.f32	s17, s15
  if (flags & FLAGS_ADAPT_EXP) {
 800361c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800361e:	0512      	lsls	r2, r2, #20
 8003620:	f140 80ec 	bpl.w	80037fc <print_exponential_number+0x444>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8003624:	f11b 0f04 	cmn.w	fp, #4
 8003628:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800362a:	f280 81f8 	bge.w	8003a1e <print_exponential_number+0x666>
        (int) precision - 1 - exp10 :
 800362e:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8003630:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003634:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8003636:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003638:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800363c:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 800363e:	2f00      	cmp	r7, #0
 8003640:	f040 80e3 	bne.w	800380a <print_exponential_number+0x452>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003644:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8003648:	ec57 6b18 	vmov	r6, r7, d8
  components.is_negative = negative;
 800364c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800364e:	ee18 2a10 	vmov	r2, s16
  components.is_negative = negative;
 8003652:	930d      	str	r3, [sp, #52]	; 0x34
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003654:	463b      	mov	r3, r7
 8003656:	f7fd f901 	bl	800085c <__aeabi_ddiv>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 800365a:	f7fd faff 	bl	8000c5c <__aeabi_d2lz>
 800365e:	4604      	mov	r4, r0
 8003660:	460d      	mov	r5, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003662:	f7fc ffa3 	bl	80005ac <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 8003666:	463b      	mov	r3, r7
 8003668:	ee18 2a10 	vmov	r2, s16
 800366c:	f7fc ffcc 	bl	8000608 <__aeabi_dmul>
 8003670:	4602      	mov	r2, r0
 8003672:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003674:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8003678:	f7fc fe0e 	bl	8000298 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 800367c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800367e:	4b5a      	ldr	r3, [pc, #360]	; (80037e8 <print_exponential_number+0x430>)
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003680:	4606      	mov	r6, r0
  double prec_power_of_10 = powers_of_10[precision];
 8003682:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003686:	ed93 7b00 	vldr	d7, [r3]
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 800368a:	ee17 3a90 	vmov	r3, s15
 800368e:	f3c7 520a 	ubfx	r2, r7, #20, #11
 8003692:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003696:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800369a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 800369e:	2a00      	cmp	r2, #0
 80036a0:	bfb8      	it	lt
 80036a2:	4252      	neglt	r2, r2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bfb8      	it	lt
 80036a8:	425b      	neglt	r3, r3
 80036aa:	429a      	cmp	r2, r3
  double prec_power_of_10 = powers_of_10[precision];
 80036ac:	eeb0 9a47 	vmov.f32	s18, s14
 80036b0:	eef0 9a67 	vmov.f32	s19, s15
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 80036b4:	460f      	mov	r7, r1
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 80036b6:	f340 819c 	ble.w	80039f2 <print_exponential_number+0x63a>
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 80036ba:	ec53 2b17 	vmov	r2, r3, d7
 80036be:	ec51 0b18 	vmov	r0, r1, d8
 80036c2:	f7fd f8cb 	bl	800085c <__aeabi_ddiv>
 80036c6:	460b      	mov	r3, r1
 80036c8:	4602      	mov	r2, r0
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 80036ca:	4639      	mov	r1, r7
 80036cc:	4630      	mov	r0, r6
 80036ce:	f7fd f8c5 	bl	800085c <__aeabi_ddiv>
 80036d2:	4606      	mov	r6, r0
 80036d4:	460f      	mov	r7, r1
  if (precision == 0U) {
 80036d6:	9b26      	ldr	r3, [sp, #152]	; 0x98
    components.integral += (scaled_remainder >= rounding_threshold);
 80036d8:	4630      	mov	r0, r6
 80036da:	4639      	mov	r1, r7
  if (precision == 0U) {
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f000 80cf 	beq.w	8003880 <print_exponential_number+0x4c8>
    components.fractional = (int_fast64_t) scaled_remainder;
 80036e2:	f7fd fabb 	bl	8000c5c <__aeabi_d2lz>
 80036e6:	468a      	mov	sl, r1
 80036e8:	900e      	str	r0, [sp, #56]	; 0x38
    scaled_remainder -= components.fractional;
 80036ea:	f7fc ff5f 	bl	80005ac <__aeabi_l2d>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4630      	mov	r0, r6
 80036f4:	4639      	mov	r1, r7
 80036f6:	f7fc fdcf 	bl	8000298 <__aeabi_dsub>
    components.fractional += (scaled_remainder >= rounding_threshold);
 80036fa:	2200      	movs	r2, #0
 80036fc:	4b35      	ldr	r3, [pc, #212]	; (80037d4 <print_exponential_number+0x41c>)
    scaled_remainder -= components.fractional;
 80036fe:	4606      	mov	r6, r0
 8003700:	460f      	mov	r7, r1
    components.fractional += (scaled_remainder >= rounding_threshold);
 8003702:	f7fd fa07 	bl	8000b14 <__aeabi_dcmpge>
 8003706:	4603      	mov	r3, r0
    if (scaled_remainder == rounding_threshold) {
 8003708:	4630      	mov	r0, r6
    components.fractional += (scaled_remainder >= rounding_threshold);
 800370a:	1e1e      	subs	r6, r3, #0
 800370c:	bf18      	it	ne
 800370e:	2601      	movne	r6, #1
 8003710:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (scaled_remainder == rounding_threshold) {
 8003712:	4639      	mov	r1, r7
    components.fractional += (scaled_remainder >= rounding_threshold);
 8003714:	18f6      	adds	r6, r6, r3
    if (scaled_remainder == rounding_threshold) {
 8003716:	f04f 0200 	mov.w	r2, #0
 800371a:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <print_exponential_number+0x41c>)
    components.fractional += (scaled_remainder >= rounding_threshold);
 800371c:	f14a 0a00 	adc.w	sl, sl, #0
    if (scaled_remainder == rounding_threshold) {
 8003720:	f7fd f9da 	bl	8000ad8 <__aeabi_dcmpeq>
 8003724:	b108      	cbz	r0, 800372a <print_exponential_number+0x372>
      components.fractional &= ~((int_fast64_t) 0x1);
 8003726:	f026 0601 	bic.w	r6, r6, #1
    if ((double) components.fractional >= prec_power_of_10) {
 800372a:	4630      	mov	r0, r6
 800372c:	4651      	mov	r1, sl
 800372e:	f7fc ff3d 	bl	80005ac <__aeabi_l2d>
 8003732:	ec53 2b19 	vmov	r2, r3, d9
 8003736:	f7fd f9ed 	bl	8000b14 <__aeabi_dcmpge>
 800373a:	b120      	cbz	r0, 8003746 <print_exponential_number+0x38e>
      ++components.integral;
 800373c:	3401      	adds	r4, #1
 800373e:	f145 0500 	adc.w	r5, r5, #0
      components.fractional = 0;
 8003742:	2600      	movs	r6, #0
 8003744:	46b2      	mov	sl, r6
    if (decimal_part_components.integral >= 10) {
 8003746:	2c0a      	cmp	r4, #10
 8003748:	f175 0300 	sbcs.w	r3, r5, #0
 800374c:	db05      	blt.n	800375a <print_exponential_number+0x3a2>
      decimal_part_components.fractional = 0;
 800374e:	2600      	movs	r6, #0
      decimal_part_components.integral = 1;
 8003750:	2401      	movs	r4, #1
      decimal_part_components.fractional = 0;
 8003752:	46b2      	mov	sl, r6
      decimal_part_components.integral = 1;
 8003754:	4635      	mov	r5, r6
      exp10++;
 8003756:	f10b 0b01 	add.w	fp, fp, #1
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 800375a:	f10b 0363 	add.w	r3, fp, #99	; 0x63
 800375e:	2bc6      	cmp	r3, #198	; 0xc6
 8003760:	f200 80ab 	bhi.w	80038ba <print_exponential_number+0x502>
      0U :
 8003764:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003766:	f013 0702 	ands.w	r7, r3, #2
 800376a:	f040 8129 	bne.w	80039c0 <print_exponential_number+0x608>
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 800376e:	2704      	movs	r7, #4
 8003770:	e104      	b.n	800397c <print_exponential_number+0x5c4>
        conv.F /= 10;
 8003772:	4620      	mov	r0, r4
 8003774:	4629      	mov	r1, r5
 8003776:	2200      	movs	r2, #0
 8003778:	4b18      	ldr	r3, [pc, #96]	; (80037dc <print_exponential_number+0x424>)
        exp10--;
 800377a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        conv.F /= 10;
 800377e:	f7fd f86d 	bl	800085c <__aeabi_ddiv>
 8003782:	e736      	b.n	80035f2 <print_exponential_number+0x23a>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8003784:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003786:	2b01      	cmp	r3, #1
 8003788:	bf38      	it	cc
 800378a:	2301      	movcc	r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	f340 811a 	ble.w	80039c6 <print_exponential_number+0x60e>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 8003792:	f04f 0b00 	mov.w	fp, #0
        (int) precision - 1 - exp10 :
 8003796:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003798:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 800379a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800379e:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 80037a0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80037a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037a6:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 80037a8:	2701      	movs	r7, #1
 80037aa:	e62a      	b.n	8003402 <print_exponential_number+0x4a>
 80037ac:	f3af 8000 	nop.w
 80037b0:	636f4361 	.word	0x636f4361
 80037b4:	3fd287a7 	.word	0x3fd287a7
 80037b8:	0979a371 	.word	0x0979a371
 80037bc:	400a934f 	.word	0x400a934f
 80037c0:	bbb55516 	.word	0xbbb55516
 80037c4:	40026bb1 	.word	0x40026bb1
 80037c8:	fefa39ef 	.word	0xfefa39ef
 80037cc:	3fe62e42 	.word	0x3fe62e42
 80037d0:	3ff80000 	.word	0x3ff80000
 80037d4:	3fe00000 	.word	0x3fe00000
 80037d8:	402c0000 	.word	0x402c0000
 80037dc:	40240000 	.word	0x40240000
 80037e0:	40180000 	.word	0x40180000
 80037e4:	3ff00000 	.word	0x3ff00000
 80037e8:	08011a20 	.word	0x08011a20
 80037ec:	509f79fb 	.word	0x509f79fb
 80037f0:	3fd34413 	.word	0x3fd34413
 80037f4:	8b60c8b3 	.word	0x8b60c8b3
 80037f8:	3fc68a28 	.word	0x3fc68a28
 80037fc:	f1bb 0f00 	cmp.w	fp, #0
 8003800:	f280 80f1 	bge.w	80039e6 <print_exponential_number+0x62e>
 8003804:	2b22      	cmp	r3, #34	; 0x22
 8003806:	f63f af1d 	bhi.w	8003644 <print_exponential_number+0x28c>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800380a:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800380e:	ec57 6b18 	vmov	r6, r7, d8
  components.is_negative = negative;
 8003812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003814:	ee18 2a10 	vmov	r2, s16
  components.is_negative = negative;
 8003818:	930d      	str	r3, [sp, #52]	; 0x34
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800381a:	463b      	mov	r3, r7
 800381c:	f7fc fef4 	bl	8000608 <__aeabi_dmul>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 8003820:	f7fd fa1c 	bl	8000c5c <__aeabi_d2lz>
 8003824:	4604      	mov	r4, r0
 8003826:	460d      	mov	r5, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003828:	f7fc fec0 	bl	80005ac <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 800382c:	463b      	mov	r3, r7
 800382e:	ee18 2a10 	vmov	r2, s16
 8003832:	f7fd f813 	bl	800085c <__aeabi_ddiv>
 8003836:	4602      	mov	r2, r0
 8003838:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 800383a:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800383e:	f7fc fd2b 	bl	8000298 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 8003842:	4e7f      	ldr	r6, [pc, #508]	; (8003a40 <print_exponential_number+0x688>)
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003844:	463b      	mov	r3, r7
  double prec_power_of_10 = powers_of_10[precision];
 8003846:	9f26      	ldr	r7, [sp, #152]	; 0x98
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003848:	ee18 2a10 	vmov	r2, s16
  double prec_power_of_10 = powers_of_10[precision];
 800384c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8003850:	ed96 7b00 	vldr	d7, [r6]
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003854:	460f      	mov	r7, r1
 8003856:	4606      	mov	r6, r0
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003858:	ec51 0b17 	vmov	r0, r1, d7
  double prec_power_of_10 = powers_of_10[precision];
 800385c:	eeb0 9a47 	vmov.f32	s18, s14
 8003860:	eef0 9a67 	vmov.f32	s19, s15
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003864:	f7fc fed0 	bl	8000608 <__aeabi_dmul>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003868:	463b      	mov	r3, r7
 800386a:	4632      	mov	r2, r6
 800386c:	f7fc fecc 	bl	8000608 <__aeabi_dmul>
 8003870:	4606      	mov	r6, r0
 8003872:	460f      	mov	r7, r1
  if (precision == 0U) {
 8003874:	9b26      	ldr	r3, [sp, #152]	; 0x98
    components.integral += (scaled_remainder >= rounding_threshold);
 8003876:	4630      	mov	r0, r6
 8003878:	4639      	mov	r1, r7
  if (precision == 0U) {
 800387a:	2b00      	cmp	r3, #0
 800387c:	f47f af31 	bne.w	80036e2 <print_exponential_number+0x32a>
    components.integral += (scaled_remainder >= rounding_threshold);
 8003880:	2200      	movs	r2, #0
 8003882:	4b70      	ldr	r3, [pc, #448]	; (8003a44 <print_exponential_number+0x68c>)
 8003884:	f7fd f946 	bl	8000b14 <__aeabi_dcmpge>
 8003888:	4603      	mov	r3, r0
 800388a:	3b00      	subs	r3, #0
 800388c:	bf18      	it	ne
 800388e:	2301      	movne	r3, #1
    if (scaled_remainder == rounding_threshold) {
 8003890:	4630      	mov	r0, r6
    components.integral += (scaled_remainder >= rounding_threshold);
 8003892:	191c      	adds	r4, r3, r4
    if (scaled_remainder == rounding_threshold) {
 8003894:	4639      	mov	r1, r7
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <print_exponential_number+0x68c>)
    components.integral += (scaled_remainder >= rounding_threshold);
 800389c:	f145 0500 	adc.w	r5, r5, #0
    if (scaled_remainder == rounding_threshold) {
 80038a0:	f7fd f91a 	bl	8000ad8 <__aeabi_dcmpeq>
 80038a4:	2800      	cmp	r0, #0
 80038a6:	f43f af4c 	beq.w	8003742 <print_exponential_number+0x38a>
    components.fractional = 0;
 80038aa:	9e26      	ldr	r6, [sp, #152]	; 0x98
      components.integral &= ~((int_fast64_t) 0x1);
 80038ac:	f024 0401 	bic.w	r4, r4, #1
    components.fractional = 0;
 80038b0:	46b2      	mov	sl, r6
 80038b2:	e748      	b.n	8003746 <print_exponential_number+0x38e>
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 80038b4:	ec41 0b18 	vmov	d8, r0, r1
 80038b8:	e6b0      	b.n	800361c <print_exponential_number+0x264>
      0U :
 80038ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80038bc:	f013 0702 	ands.w	r7, r3, #2
 80038c0:	d05b      	beq.n	800397a <print_exponential_number+0x5c2>
 80038c2:	2304      	movs	r3, #4
 80038c4:	930e      	str	r3, [sp, #56]	; 0x38
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 80038c6:	4620      	mov	r0, r4
 80038c8:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 80038ca:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80038cc:	9407      	str	r4, [sp, #28]
 80038ce:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80038d0:	9309      	str	r3, [sp, #36]	; 0x24
 80038d2:	e9cd 9402 	strd	r9, r4, [sp, #8]
 80038d6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80038d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80038da:	9401      	str	r4, [sp, #4]
 80038dc:	2400      	movs	r4, #0
 80038de:	9308      	str	r3, [sp, #32]
 80038e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80038e2:	4632      	mov	r2, r6
 80038e4:	9305      	str	r3, [sp, #20]
 80038e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80038e8:	4629      	mov	r1, r5
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	f8cd 8010 	str.w	r8, [sp, #16]
 80038f0:	4653      	mov	r3, sl
 80038f2:	9406      	str	r4, [sp, #24]
 80038f4:	f7ff fc3e 	bl	8003174 <print_broken_up_decimal.isra.0>
 80038f8:	4602      	mov	r2, r0
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80038fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80038fc:	4649      	mov	r1, r9
 80038fe:	f013 0f20 	tst.w	r3, #32
 8003902:	bf14      	ite	ne
 8003904:	2045      	movne	r0, #69	; 0x45
 8003906:	2065      	moveq	r0, #101	; 0x65
 8003908:	4643      	mov	r3, r8
 800390a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800390c:	1c54      	adds	r4, r2, #1
 800390e:	47a8      	blx	r5
    idx = print_integer(out, buffer, idx, maxlen,
 8003910:	f1bb 0f00 	cmp.w	fp, #0
 8003914:	dd74      	ble.n	8003a00 <print_exponential_number+0x648>
 8003916:	465a      	mov	r2, fp
 8003918:	ea4f 73eb 	mov.w	r3, fp, asr #31
 800391c:	e9cd 2300 	strd	r2, r3, [sp]
 8003920:	2305      	movs	r3, #5
 8003922:	ea4f 70db 	mov.w	r0, fp, lsr #31
 8003926:	9002      	str	r0, [sp, #8]
 8003928:	9306      	str	r3, [sp, #24]
 800392a:	2000      	movs	r0, #0
 800392c:	230a      	movs	r3, #10
 800392e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003930:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003932:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8003936:	4622      	mov	r2, r4
 8003938:	9105      	str	r1, [sp, #20]
 800393a:	4643      	mov	r3, r8
 800393c:	4649      	mov	r1, r9
 800393e:	4630      	mov	r0, r6
 8003940:	f7ff fa3e 	bl	8002dc0 <print_integer>
 8003944:	4604      	mov	r4, r0
    if (flags & FLAGS_LEFT) {
 8003946:	2f00      	cmp	r7, #0
 8003948:	f43f ada2 	beq.w	8003490 <print_exponential_number+0xd8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800394c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800394e:	1ac5      	subs	r5, r0, r3
 8003950:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003952:	42ab      	cmp	r3, r5
 8003954:	f67f ad9c 	bls.w	8003490 <print_exponential_number+0xd8>
 8003958:	461f      	mov	r7, r3
 800395a:	4622      	mov	r2, r4
 800395c:	4643      	mov	r3, r8
 800395e:	4649      	mov	r1, r9
 8003960:	2020      	movs	r0, #32
 8003962:	3501      	adds	r5, #1
 8003964:	47b0      	blx	r6
 8003966:	42af      	cmp	r7, r5
 8003968:	f104 0401 	add.w	r4, r4, #1
 800396c:	d8f5      	bhi.n	800395a <print_exponential_number+0x5a2>
}
 800396e:	4620      	mov	r0, r4
 8003970:	b017      	add	sp, #92	; 0x5c
 8003972:	ecbd 8b04 	vpop	{d8-d9}
 8003976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 800397a:	2705      	movs	r7, #5
        width - exp10_part_width :
 800397c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 800397e:	4620      	mov	r0, r4
        width - exp10_part_width :
 8003980:	429f      	cmp	r7, r3
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003982:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003984:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003986:	9309      	str	r3, [sp, #36]	; 0x24
 8003988:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800398a:	9407      	str	r4, [sp, #28]
 800398c:	9308      	str	r3, [sp, #32]
 800398e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003990:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003992:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8003996:	9305      	str	r3, [sp, #20]
 8003998:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800399a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800399c:	4632      	mov	r2, r6
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	4629      	mov	r1, r5
 80039a2:	4653      	mov	r3, sl
 80039a4:	f8cd 8010 	str.w	r8, [sp, #16]
 80039a8:	9401      	str	r4, [sp, #4]
        width - exp10_part_width :
 80039aa:	d230      	bcs.n	8003a0e <print_exponential_number+0x656>
 80039ac:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 80039ae:	1be4      	subs	r4, r4, r7
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 80039b0:	9406      	str	r4, [sp, #24]
 80039b2:	f7ff fbdf 	bl	8003174 <print_broken_up_decimal.isra.0>
    idx = print_integer(out, buffer, idx, maxlen,
 80039b6:	1e7b      	subs	r3, r7, #1
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 80039b8:	4602      	mov	r2, r0
    idx = print_integer(out, buffer, idx, maxlen,
 80039ba:	2700      	movs	r7, #0
 80039bc:	930e      	str	r3, [sp, #56]	; 0x38
 80039be:	e79c      	b.n	80038fa <print_exponential_number+0x542>
      0U :
 80039c0:	2303      	movs	r3, #3
 80039c2:	930e      	str	r3, [sp, #56]	; 0x38
 80039c4:	e77f      	b.n	80038c6 <print_exponential_number+0x50e>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 80039c6:	f04f 0b00 	mov.w	fp, #0
        (int) precision - 1 - exp10 :
 80039ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 80039cc:	f1bb 0f00 	cmp.w	fp, #0
        (int) precision - 1 - exp10 :
 80039d0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 80039d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80039d8:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 80039da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80039dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039e0:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 80039e2:	f6ff ae2c 	blt.w	800363e <print_exponential_number+0x286>
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
 80039e6:	f1bb 0f00 	cmp.w	fp, #0
 80039ea:	f47f ae2b 	bne.w	8003644 <print_exponential_number+0x28c>
 80039ee:	465f      	mov	r7, fp
 80039f0:	e507      	b.n	8003402 <print_exponential_number+0x4a>
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 80039f2:	ec53 2b18 	vmov	r2, r3, d8
 80039f6:	ec51 0b17 	vmov	r0, r1, d7
 80039fa:	f7fc ff2f 	bl	800085c <__aeabi_ddiv>
 80039fe:	e733      	b.n	8003868 <print_exponential_number+0x4b0>
                ABS_FOR_PRINTING(exp10),
 8003a00:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8003a04:	f1db 0200 	rsbs	r2, fp, #0
 8003a08:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003a0c:	e786      	b.n	800391c <print_exponential_number+0x564>
    idx = print_integer(out, buffer, idx, maxlen,
 8003a0e:	1e7c      	subs	r4, r7, #1
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003a10:	2700      	movs	r7, #0
 8003a12:	9706      	str	r7, [sp, #24]
    idx = print_integer(out, buffer, idx, maxlen,
 8003a14:	940e      	str	r4, [sp, #56]	; 0x38
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003a16:	f7ff fbad 	bl	8003174 <print_broken_up_decimal.isra.0>
 8003a1a:	4602      	mov	r2, r0
  if (! fall_back_to_decimal_only_mode) {
 8003a1c:	e76d      	b.n	80038fa <print_exponential_number+0x542>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	bf38      	it	cc
 8003a22:	2301      	movcc	r3, #1
 8003a24:	459b      	cmp	fp, r3
 8003a26:	dad0      	bge.n	80039ca <print_exponential_number+0x612>
        (int) precision - 1 - exp10 :
 8003a28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	eba3 030b 	sub.w	r3, r3, fp
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8003a30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003a34:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8003a36:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003a38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a3c:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8003a3e:	e6b3      	b.n	80037a8 <print_exponential_number+0x3f0>
 8003a40:	08011a20 	.word	0x08011a20
 8003a44:	3fe00000 	.word	0x3fe00000

08003a48 <print_floating_point>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS


static size_t print_floating_point(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int precision, unsigned int width, unsigned int flags, bool prefer_exponential)
{
 8003a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4c:	b09d      	sub	sp, #116	; 0x74
 8003a4e:	e9dd 5428 	ldrd	r5, r4, [sp, #160]	; 0xa0
 8003a52:	940c      	str	r4, [sp, #48]	; 0x30
 8003a54:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8003a56:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 8003a5a:	940b      	str	r4, [sp, #44]	; 0x2c
 8003a5c:	f89d 40ac 	ldrb.w	r4, [sp, #172]	; 0xac
 8003a60:	4680      	mov	r8, r0
 8003a62:	4689      	mov	r9, r1
 8003a64:	4692      	mov	sl, r2
 8003a66:	469b      	mov	fp, r3
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;

  // test for special values
  if (value != value)
 8003a68:	4632      	mov	r2, r6
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	4630      	mov	r0, r6
 8003a6e:	4639      	mov	r1, r7
{
 8003a70:	940d      	str	r4, [sp, #52]	; 0x34
  if (value != value)
 8003a72:	f7fd f831 	bl	8000ad8 <__aeabi_dcmpeq>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d07c      	beq.n	8003b74 <print_floating_point+0x12c>
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	4639      	mov	r1, r7
 8003a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a82:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003a86:	f7fd f831 	bl	8000aec <__aeabi_dcmplt>
 8003a8a:	2800      	cmp	r0, #0
 8003a8c:	f040 80a3 	bne.w	8003bd6 <print_floating_point+0x18e>
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 8003a90:	4630      	mov	r0, r6
 8003a92:	4639      	mov	r1, r7
 8003a94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a98:	4b5f      	ldr	r3, [pc, #380]	; (8003c18 <print_floating_point+0x1d0>)
 8003a9a:	f7fd f845 	bl	8000b28 <__aeabi_dcmpgt>
 8003a9e:	bb38      	cbnz	r0, 8003af0 <print_floating_point+0xa8>
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  if (!prefer_exponential && ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8003aa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d13d      	bne.n	8003b22 <print_floating_point+0xda>
 8003aa6:	a358      	add	r3, pc, #352	; (adr r3, 8003c08 <print_floating_point+0x1c0>)
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	4630      	mov	r0, r6
 8003aae:	4639      	mov	r1, r7
 8003ab0:	f7fd f83a 	bl	8000b28 <__aeabi_dcmpgt>
 8003ab4:	b940      	cbnz	r0, 8003ac8 <print_floating_point+0x80>
 8003ab6:	a356      	add	r3, pc, #344	; (adr r3, 8003c10 <print_floating_point+0x1c8>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	4630      	mov	r0, r6
 8003abe:	4639      	mov	r1, r7
 8003ac0:	f7fd f814 	bl	8000aec <__aeabi_dcmplt>
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d02c      	beq.n	8003b22 <print_floating_point+0xda>
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    return print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
 8003ac8:	2400      	movs	r4, #0
 8003aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003acc:	9502      	str	r5, [sp, #8]
 8003ace:	9304      	str	r3, [sp, #16]
 8003ad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ad2:	ad14      	add	r5, sp, #80	; 0x50
 8003ad4:	9303      	str	r3, [sp, #12]
 8003ad6:	4652      	mov	r2, sl
 8003ad8:	465b      	mov	r3, fp
 8003ada:	4649      	mov	r1, r9
 8003adc:	4640      	mov	r0, r8
 8003ade:	e9cd 6700 	strd	r6, r7, [sp]
 8003ae2:	e9cd 5405 	strd	r5, r4, [sp, #20]
 8003ae6:	f7ff fc67 	bl	80033b8 <print_exponential_number>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
#endif
      print_decimal_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
}
 8003aea:	b01d      	add	sp, #116	; 0x74
 8003aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003af0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003af2:	4d4a      	ldr	r5, [pc, #296]	; (8003c1c <print_floating_point+0x1d4>)
 8003af4:	9429      	str	r4, [sp, #164]	; 0xa4
 8003af6:	f004 0404 	and.w	r4, r4, #4
 8003afa:	2c00      	cmp	r4, #0
 8003afc:	4c48      	ldr	r4, [pc, #288]	; (8003c20 <print_floating_point+0x1d8>)
 8003afe:	bf18      	it	ne
 8003b00:	462c      	movne	r4, r5
 8003b02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b04:	9426      	str	r4, [sp, #152]	; 0x98
 8003b06:	9328      	str	r3, [sp, #160]	; 0xa0
 8003b08:	bf0c      	ite	eq
 8003b0a:	2403      	moveq	r4, #3
 8003b0c:	2404      	movne	r4, #4
 8003b0e:	465b      	mov	r3, fp
 8003b10:	4652      	mov	r2, sl
 8003b12:	4649      	mov	r1, r9
 8003b14:	4640      	mov	r0, r8
 8003b16:	9427      	str	r4, [sp, #156]	; 0x9c
}
 8003b18:	b01d      	add	sp, #116	; 0x74
 8003b1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003b1e:	f7ff b90b 	b.w	8002d38 <out_rev_>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003b22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8003b24:	2030      	movs	r0, #48	; 0x30
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003b26:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003b2a:	bf08      	it	eq
 8003b2c:	2506      	moveq	r5, #6
 8003b2e:	ab14      	add	r3, sp, #80	; 0x50
 8003b30:	462c      	mov	r4, r5
 8003b32:	f1a5 0220 	sub.w	r2, r5, #32
 8003b36:	e004      	b.n	8003b42 <print_floating_point+0xfa>
    precision--;
 8003b38:	3c01      	subs	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8003b3a:	4294      	cmp	r4, r2
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8003b3c:	f803 0b01 	strb.w	r0, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8003b40:	d05a      	beq.n	8003bf8 <print_floating_point+0x1b0>
 8003b42:	2c11      	cmp	r4, #17
 8003b44:	eba5 0104 	sub.w	r1, r5, r4
 8003b48:	d8f6      	bhi.n	8003b38 <print_floating_point+0xf0>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 8003b4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b4c:	b31b      	cbz	r3, 8003b96 <print_floating_point+0x14e>
 8003b4e:	ab14      	add	r3, sp, #80	; 0x50
 8003b50:	9305      	str	r3, [sp, #20]
 8003b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b54:	9106      	str	r1, [sp, #24]
 8003b56:	9304      	str	r3, [sp, #16]
 8003b58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b5a:	4652      	mov	r2, sl
 8003b5c:	9303      	str	r3, [sp, #12]
 8003b5e:	4649      	mov	r1, r9
 8003b60:	465b      	mov	r3, fp
 8003b62:	4640      	mov	r0, r8
 8003b64:	e9cd 6700 	strd	r6, r7, [sp]
 8003b68:	9402      	str	r4, [sp, #8]
 8003b6a:	f7ff fc25 	bl	80033b8 <print_exponential_number>
}
 8003b6e:	b01d      	add	sp, #116	; 0x74
 8003b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003b78:	9329      	str	r3, [sp, #164]	; 0xa4
 8003b7a:	9428      	str	r4, [sp, #160]	; 0xa0
 8003b7c:	465b      	mov	r3, fp
 8003b7e:	2403      	movs	r4, #3
 8003b80:	4652      	mov	r2, sl
 8003b82:	4649      	mov	r1, r9
 8003b84:	4640      	mov	r0, r8
 8003b86:	4d27      	ldr	r5, [pc, #156]	; (8003c24 <print_floating_point+0x1dc>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003b88:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003b8a:	9526      	str	r5, [sp, #152]	; 0x98
}
 8003b8c:	b01d      	add	sp, #116	; 0x74
 8003b8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003b92:	f7ff b8d1 	b.w	8002d38 <out_rev_>
  struct double_components value_ = get_components(number, precision);
 8003b96:	4632      	mov	r2, r6
 8003b98:	463b      	mov	r3, r7
 8003b9a:	a80e      	add	r0, sp, #56	; 0x38
 8003b9c:	9400      	str	r4, [sp, #0]
 8003b9e:	910d      	str	r1, [sp, #52]	; 0x34
 8003ba0:	f7ff fa50 	bl	8003044 <get_components>
  return print_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
 8003ba4:	ab14      	add	r3, sp, #80	; 0x50
 8003ba6:	9308      	str	r3, [sp, #32]
 8003ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003baa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bac:	9307      	str	r3, [sp, #28]
 8003bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003bb0:	9109      	str	r1, [sp, #36]	; 0x24
 8003bb2:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8003bb6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003bba:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8003bbe:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8003bc8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003bcc:	f7ff fad2 	bl	8003174 <print_broken_up_decimal.isra.0>
}
 8003bd0:	b01d      	add	sp, #116	; 0x74
 8003bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bd8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003bda:	9329      	str	r3, [sp, #164]	; 0xa4
 8003bdc:	9428      	str	r4, [sp, #160]	; 0xa0
 8003bde:	465b      	mov	r3, fp
 8003be0:	2404      	movs	r4, #4
 8003be2:	4652      	mov	r2, sl
 8003be4:	4649      	mov	r1, r9
 8003be6:	4640      	mov	r0, r8
 8003be8:	4d0f      	ldr	r5, [pc, #60]	; (8003c28 <print_floating_point+0x1e0>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003bea:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003bec:	9526      	str	r5, [sp, #152]	; 0x98
}
 8003bee:	b01d      	add	sp, #116	; 0x74
 8003bf0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003bf4:	f7ff b8a0 	b.w	8002d38 <out_rev_>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 8003bf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bfa:	2120      	movs	r1, #32
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0ca      	beq.n	8003b96 <print_floating_point+0x14e>
 8003c00:	e7a5      	b.n	8003b4e <print_floating_point+0x106>
 8003c02:	bf00      	nop
 8003c04:	f3af 8000 	nop.w
 8003c08:	00000000 	.word	0x00000000
 8003c0c:	41cdcd65 	.word	0x41cdcd65
 8003c10:	00000000 	.word	0x00000000
 8003c14:	c1cdcd65 	.word	0xc1cdcd65
 8003c18:	7fefffff 	.word	0x7fefffff
 8003c1c:	080119f8 	.word	0x080119f8
 8003c20:	080119f4 	.word	0x080119f4
 8003c24:	08011a00 	.word	0x08011a00
 8003c28:	08011a04 	.word	0x08011a04

08003c2c <rt_vsnprintf>:
#if (RTTHREAD_VERSION >= 40100) || (RTTHREAD_VERSION < 40000 && RTTHREAD_VERSION >= 30106)
int rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#else
rt_int32_t rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#endif
{
 8003c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c30:	460d      	mov	r5, r1
 8003c32:	461f      	mov	r7, r3
    out = out_discard;
 8003c34:	1e01      	subs	r1, r0, #0
 8003c36:	4b9b      	ldr	r3, [pc, #620]	; (8003ea4 <rt_vsnprintf+0x278>)
 8003c38:	4e9b      	ldr	r6, [pc, #620]	; (8003ea8 <rt_vsnprintf+0x27c>)
  while (*format)
 8003c3a:	7810      	ldrb	r0, [r2, #0]
    out = out_discard;
 8003c3c:	bf0c      	ite	eq
 8003c3e:	469b      	moveq	fp, r3
 8003c40:	46b3      	movne	fp, r6
{
 8003c42:	462b      	mov	r3, r5
 8003c44:	b08f      	sub	sp, #60	; 0x3c
  while (*format)
 8003c46:	2800      	cmp	r0, #0
 8003c48:	f000 827a 	beq.w	8004140 <rt_vsnprintf+0x514>
 8003c4c:	4614      	mov	r4, r2
 8003c4e:	2500      	movs	r5, #0
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 8003c50:	46ba      	mov	sl, r7
 8003c52:	4688      	mov	r8, r1
 8003c54:	4699      	mov	r9, r3
 8003c56:	e009      	b.n	8003c6c <rt_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 8003c58:	462a      	mov	r2, r5
 8003c5a:	464b      	mov	r3, r9
 8003c5c:	4641      	mov	r1, r8
 8003c5e:	47d8      	blx	fp
 8003c60:	3501      	adds	r5, #1
      format++;
 8003c62:	3401      	adds	r4, #1
  while (*format)
 8003c64:	7820      	ldrb	r0, [r4, #0]
 8003c66:	2800      	cmp	r0, #0
 8003c68:	f000 80aa 	beq.w	8003dc0 <rt_vsnprintf+0x194>
    if (*format != '%') {
 8003c6c:	2825      	cmp	r0, #37	; 0x25
 8003c6e:	d1f3      	bne.n	8003c58 <rt_vsnprintf+0x2c>
    flags = 0U;
 8003c70:	2100      	movs	r1, #0
      format++;
 8003c72:	1c63      	adds	r3, r4, #1
 8003c74:	461c      	mov	r4, r3
      switch (*format) {
 8003c76:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003c7a:	f1a0 0220 	sub.w	r2, r0, #32
 8003c7e:	2a10      	cmp	r2, #16
 8003c80:	d80a      	bhi.n	8003c98 <rt_vsnprintf+0x6c>
 8003c82:	e8df f002 	tbb	[pc, r2]
 8003c86:	099a      	.short	0x099a
 8003c88:	09099709 	.word	0x09099709
 8003c8c:	09090909 	.word	0x09090909
 8003c90:	91099409 	.word	0x91099409
 8003c94:	0909      	.short	0x0909
 8003c96:	8e          	.byte	0x8e
 8003c97:	00          	.byte	0x00
    if (is_digit_(*format)) {
 8003c98:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003c9c:	2b09      	cmp	r3, #9
 8003c9e:	f240 80ab 	bls.w	8003df8 <rt_vsnprintf+0x1cc>
    else if (*format == '*') {
 8003ca2:	282a      	cmp	r0, #42	; 0x2a
 8003ca4:	f000 80b5 	beq.w	8003e12 <rt_vsnprintf+0x1e6>
    width = 0U;
 8003ca8:	2600      	movs	r6, #0
    if (*format == '.') {
 8003caa:	282e      	cmp	r0, #46	; 0x2e
 8003cac:	f000 8095 	beq.w	8003dda <rt_vsnprintf+0x1ae>
    precision = 0U;
 8003cb0:	2700      	movs	r7, #0
    switch (*format) {
 8003cb2:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8003cb6:	2b12      	cmp	r3, #18
 8003cb8:	d818      	bhi.n	8003cec <rt_vsnprintf+0xc0>
 8003cba:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003cbe:	00fc      	.short	0x00fc
 8003cc0:	00f70017 	.word	0x00f70017
 8003cc4:	01040017 	.word	0x01040017
 8003cc8:	00170017 	.word	0x00170017
 8003ccc:	00170017 	.word	0x00170017
 8003cd0:	00170017 	.word	0x00170017
 8003cd4:	00130017 	.word	0x00130017
 8003cd8:	00170017 	.word	0x00170017
 8003cdc:	00170017 	.word	0x00170017
 8003ce0:	00130017 	.word	0x00130017
    switch (*format) {
 8003ce4:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ce6:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 8003cea:	3401      	adds	r4, #1
    switch (*format) {
 8003cec:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8003cf0:	2b53      	cmp	r3, #83	; 0x53
 8003cf2:	f200 8098 	bhi.w	8003e26 <rt_vsnprintf+0x1fa>
 8003cf6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003cfa:	0185      	.short	0x0185
 8003cfc:	00960096 	.word	0x00960096
 8003d00:	00960096 	.word	0x00960096
 8003d04:	00960096 	.word	0x00960096
 8003d08:	00960096 	.word	0x00960096
 8003d0c:	00960096 	.word	0x00960096
 8003d10:	00960096 	.word	0x00960096
 8003d14:	00960096 	.word	0x00960096
 8003d18:	00960096 	.word	0x00960096
 8003d1c:	00960096 	.word	0x00960096
 8003d20:	00960096 	.word	0x00960096
 8003d24:	00960096 	.word	0x00960096
 8003d28:	00960096 	.word	0x00960096
 8003d2c:	00960096 	.word	0x00960096
 8003d30:	00960096 	.word	0x00960096
 8003d34:	00960096 	.word	0x00960096
 8003d38:	019c0096 	.word	0x019c0096
 8003d3c:	019c00ee 	.word	0x019c00ee
 8003d40:	00960096 	.word	0x00960096
 8003d44:	00960096 	.word	0x00960096
 8003d48:	00960096 	.word	0x00960096
 8003d4c:	00960096 	.word	0x00960096
 8003d50:	00960096 	.word	0x00960096
 8003d54:	00960096 	.word	0x00960096
 8003d58:	00960096 	.word	0x00960096
 8003d5c:	00960096 	.word	0x00960096
 8003d60:	0096009d 	.word	0x0096009d
 8003d64:	00960096 	.word	0x00960096
 8003d68:	00960096 	.word	0x00960096
 8003d6c:	00960096 	.word	0x00960096
 8003d70:	00960096 	.word	0x00960096
 8003d74:	0124009d 	.word	0x0124009d
 8003d78:	019c009d 	.word	0x019c009d
 8003d7c:	019c00ee 	.word	0x019c00ee
 8003d80:	009d0096 	.word	0x009d0096
 8003d84:	00960096 	.word	0x00960096
 8003d88:	00960096 	.word	0x00960096
 8003d8c:	009d0096 	.word	0x009d0096
 8003d90:	00960108 	.word	0x00960108
 8003d94:	013d0096 	.word	0x013d0096
 8003d98:	009d0096 	.word	0x009d0096
 8003d9c:	00960096 	.word	0x00960096
 8003da0:	009d      	.short	0x009d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003da2:	f041 0101 	orr.w	r1, r1, #1
    } while (n);
 8003da6:	e765      	b.n	8003c74 <rt_vsnprintf+0x48>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003da8:	f041 0102 	orr.w	r1, r1, #2
    } while (n);
 8003dac:	e762      	b.n	8003c74 <rt_vsnprintf+0x48>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003dae:	f041 0104 	orr.w	r1, r1, #4
    } while (n);
 8003db2:	e75f      	b.n	8003c74 <rt_vsnprintf+0x48>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8003db4:	f041 0110 	orr.w	r1, r1, #16
    } while (n);
 8003db8:	e75c      	b.n	8003c74 <rt_vsnprintf+0x48>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003dba:	f041 0108 	orr.w	r1, r1, #8
    } while (n);
 8003dbe:	e759      	b.n	8003c74 <rt_vsnprintf+0x48>
  return (int)idx;
 8003dc0:	4641      	mov	r1, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	462c      	mov	r4, r5
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8003dc6:	42ab      	cmp	r3, r5
 8003dc8:	d800      	bhi.n	8003dcc <rt_vsnprintf+0x1a0>
 8003dca:	1e5d      	subs	r5, r3, #1
 8003dcc:	462a      	mov	r2, r5
 8003dce:	2000      	movs	r0, #0
 8003dd0:	47d8      	blx	fp
  return __vsnprintf(out_buffer, buf, size, fmt, args);
}
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	b00f      	add	sp, #60	; 0x3c
 8003dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (is_digit_(*format)) {
 8003dda:	7860      	ldrb	r0, [r4, #1]
      flags |= FLAGS_PRECISION;
 8003ddc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      if (is_digit_(*format)) {
 8003de0:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8003de4:	2a09      	cmp	r2, #9
      format++;
 8003de6:	f104 0301 	add.w	r3, r4, #1
      if (is_digit_(*format)) {
 8003dea:	f240 8114 	bls.w	8004016 <rt_vsnprintf+0x3ea>
      else if (*format == '*') {
 8003dee:	282a      	cmp	r0, #42	; 0x2a
 8003df0:	f000 8136 	beq.w	8004060 <rt_vsnprintf+0x434>
      format++;
 8003df4:	461c      	mov	r4, r3
 8003df6:	e75b      	b.n	8003cb0 <rt_vsnprintf+0x84>
  unsigned int i = 0U;
 8003df8:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003dfa:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8003dfe:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  while (is_digit_(**str)) {
 8003e02:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003e06:	3e30      	subs	r6, #48	; 0x30
  while (is_digit_(**str)) {
 8003e08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003e0c:	2b09      	cmp	r3, #9
 8003e0e:	d9f4      	bls.n	8003dfa <rt_vsnprintf+0x1ce>
 8003e10:	e74b      	b.n	8003caa <rt_vsnprintf+0x7e>
      const int w = va_arg(va, int);
 8003e12:	f85a 6b04 	ldr.w	r6, [sl], #4
    if (*format == '.') {
 8003e16:	7860      	ldrb	r0, [r4, #1]
      if (w < 0) {
 8003e18:	2e00      	cmp	r6, #0
        flags |= FLAGS_LEFT;    // reverse padding
 8003e1a:	bfbc      	itt	lt
 8003e1c:	f041 0102 	orrlt.w	r1, r1, #2
        width = (unsigned int)-w;
 8003e20:	4276      	neglt	r6, r6
      format++;
 8003e22:	3401      	adds	r4, #1
 8003e24:	e741      	b.n	8003caa <rt_vsnprintf+0x7e>
        out(*format, buffer, idx++, maxlen);
 8003e26:	462a      	mov	r2, r5
 8003e28:	464b      	mov	r3, r9
 8003e2a:	4641      	mov	r1, r8
        format++;
 8003e2c:	3401      	adds	r4, #1
        out(*format, buffer, idx++, maxlen);
 8003e2e:	3501      	adds	r5, #1
 8003e30:	47d8      	blx	fp
        break;
 8003e32:	e717      	b.n	8003c64 <rt_vsnprintf+0x38>
        if (*format == 'x' || *format == 'X') {
 8003e34:	2878      	cmp	r0, #120	; 0x78
 8003e36:	f000 812b 	beq.w	8004090 <rt_vsnprintf+0x464>
 8003e3a:	2858      	cmp	r0, #88	; 0x58
 8003e3c:	f000 8183 	beq.w	8004146 <rt_vsnprintf+0x51a>
        else if (*format == 'o') {
 8003e40:	286f      	cmp	r0, #111	; 0x6f
 8003e42:	f000 81a4 	beq.w	800418e <rt_vsnprintf+0x562>
        else if (*format == 'b') {
 8003e46:	2862      	cmp	r0, #98	; 0x62
 8003e48:	f000 8202 	beq.w	8004250 <rt_vsnprintf+0x624>
        if ((*format != 'i') && (*format != 'd')) {
 8003e4c:	2869      	cmp	r0, #105	; 0x69
          base = BASE_DECIMAL;
 8003e4e:	f04f 020a 	mov.w	r2, #10
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003e52:	f021 0310 	bic.w	r3, r1, #16
        if ((*format != 'i') && (*format != 'd')) {
 8003e56:	f040 819c 	bne.w	8004192 <rt_vsnprintf+0x566>
        if (flags & FLAGS_PRECISION) {
 8003e5a:	0549      	lsls	r1, r1, #21
 8003e5c:	f100 811d 	bmi.w	800409a <rt_vsnprintf+0x46e>
          if (flags & FLAGS_LONG_LONG) {
 8003e60:	0599      	lsls	r1, r3, #22
 8003e62:	f100 819f 	bmi.w	80041a4 <rt_vsnprintf+0x578>
          else if (flags & FLAGS_LONG) {
 8003e66:	05d8      	lsls	r0, r3, #23
            const long value = va_arg(va, long);
 8003e68:	f85a 1b04 	ldr.w	r1, [sl], #4
          else if (flags & FLAGS_LONG) {
 8003e6c:	d403      	bmi.n	8003e76 <rt_vsnprintf+0x24a>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003e6e:	0658      	lsls	r0, r3, #25
 8003e70:	f140 81b0 	bpl.w	80041d4 <rt_vsnprintf+0x5a8>
 8003e74:	b249      	sxtb	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003e76:	2900      	cmp	r1, #0
 8003e78:	f340 81ce 	ble.w	8004218 <rt_vsnprintf+0x5ec>
 8003e7c:	468c      	mov	ip, r1
 8003e7e:	17c8      	asrs	r0, r1, #31
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003e80:	e9cd 2703 	strd	r2, r7, [sp, #12]
 8003e84:	462a      	mov	r2, r5
 8003e86:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8003e8a:	e9cd c000 	strd	ip, r0, [sp]
 8003e8e:	0fc9      	lsrs	r1, r1, #31
 8003e90:	9102      	str	r1, [sp, #8]
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8003e92:	464b      	mov	r3, r9
 8003e94:	4641      	mov	r1, r8
 8003e96:	4658      	mov	r0, fp
 8003e98:	f7fe ff92 	bl	8002dc0 <print_integer>
 8003e9c:	4605      	mov	r5, r0
        format++;
 8003e9e:	3401      	adds	r4, #1
        break;
 8003ea0:	e6e0      	b.n	8003c64 <rt_vsnprintf+0x38>
 8003ea2:	bf00      	nop
 8003ea4:	08002d35 	.word	0x08002d35
 8003ea8:	08002d2d 	.word	0x08002d2d
    switch (*format) {
 8003eac:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003eae:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        format++;
 8003eb2:	3401      	adds	r4, #1
        break;
 8003eb4:	e71a      	b.n	8003cec <rt_vsnprintf+0xc0>
        if (*format == 'h') {
 8003eb6:	7860      	ldrb	r0, [r4, #1]
 8003eb8:	2868      	cmp	r0, #104	; 0x68
 8003eba:	f000 8137 	beq.w	800412c <rt_vsnprintf+0x500>
        flags |= FLAGS_SHORT;
 8003ebe:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        format++;
 8003ec2:	3401      	adds	r4, #1
 8003ec4:	e712      	b.n	8003cec <rt_vsnprintf+0xc0>
        if (*format == 'l') {
 8003ec6:	7860      	ldrb	r0, [r4, #1]
 8003ec8:	286c      	cmp	r0, #108	; 0x6c
 8003eca:	f000 8134 	beq.w	8004136 <rt_vsnprintf+0x50a>
        flags |= FLAGS_LONG;
 8003ece:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 8003ed2:	3401      	adds	r4, #1
 8003ed4:	e70a      	b.n	8003cec <rt_vsnprintf+0xc0>
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8003ed6:	462a      	mov	r2, r5
 8003ed8:	2300      	movs	r3, #0
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003eda:	2846      	cmp	r0, #70	; 0x46
 8003edc:	bf08      	it	eq
 8003ede:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8003ee2:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8003ee6:	f10a 0a07 	add.w	sl, sl, #7
 8003eea:	9702      	str	r7, [sp, #8]
 8003eec:	f02a 0a07 	bic.w	sl, sl, #7
        format++;
 8003ef0:	3401      	adds	r4, #1
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8003ef2:	9305      	str	r3, [sp, #20]
 8003ef4:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 8003ef8:	464b      	mov	r3, r9
 8003efa:	4641      	mov	r1, r8
 8003efc:	4658      	mov	r0, fp
 8003efe:	e9cd 6700 	strd	r6, r7, [sp]
 8003f02:	f7ff fda1 	bl	8003a48 <print_floating_point>
 8003f06:	4605      	mov	r5, r0
        break;
 8003f08:	e6ac      	b.n	8003c64 <rt_vsnprintf+0x38>
        uintptr_t value = (uintptr_t)va_arg(va, void*);
 8003f0a:	f85a 3b04 	ldr.w	r3, [sl], #4
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8003f0e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003f12:	f041 0101 	orr.w	r1, r1, #1
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80e6 	beq.w	80040e8 <rt_vsnprintf+0x4bc>
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9106      	str	r1, [sp, #24]
 8003f22:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003f26:	210a      	movs	r1, #10
 8003f28:	2310      	movs	r3, #16
 8003f2a:	462a      	mov	r2, r5
 8003f2c:	9105      	str	r1, [sp, #20]
 8003f2e:	9303      	str	r3, [sp, #12]
 8003f30:	4641      	mov	r1, r8
 8003f32:	464b      	mov	r3, r9
 8003f34:	4658      	mov	r0, fp
 8003f36:	9704      	str	r7, [sp, #16]
 8003f38:	f7fe ff42 	bl	8002dc0 <print_integer>
        format++;
 8003f3c:	3401      	adds	r4, #1
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8003f3e:	4605      	mov	r5, r0
        break;
 8003f40:	e690      	b.n	8003c64 <rt_vsnprintf+0x38>
        if (!(flags & FLAGS_LEFT)) {
 8003f42:	078f      	lsls	r7, r1, #30
 8003f44:	f140 810d 	bpl.w	8004162 <rt_vsnprintf+0x536>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003f48:	f85a 0b04 	ldr.w	r0, [sl], #4
 8003f4c:	462a      	mov	r2, r5
 8003f4e:	464b      	mov	r3, r9
 8003f50:	4641      	mov	r1, r8
 8003f52:	b2c0      	uxtb	r0, r0
 8003f54:	47d8      	blx	fp
 8003f56:	1c6f      	adds	r7, r5, #1
          while (l++ < width) {
 8003f58:	2e01      	cmp	r6, #1
 8003f5a:	bf98      	it	ls
 8003f5c:	463d      	movls	r5, r7
 8003f5e:	d99e      	bls.n	8003e9e <rt_vsnprintf+0x272>
 8003f60:	4435      	add	r5, r6
            out(' ', buffer, idx++, maxlen);
 8003f62:	463a      	mov	r2, r7
 8003f64:	464b      	mov	r3, r9
 8003f66:	4641      	mov	r1, r8
 8003f68:	2020      	movs	r0, #32
 8003f6a:	3701      	adds	r7, #1
 8003f6c:	47d8      	blx	fp
          while (l++ < width) {
 8003f6e:	42af      	cmp	r7, r5
 8003f70:	d1f7      	bne.n	8003f62 <rt_vsnprintf+0x336>
 8003f72:	e794      	b.n	8003e9e <rt_vsnprintf+0x272>
        const char* p = va_arg(va, char*);
 8003f74:	4653      	mov	r3, sl
 8003f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f7a:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
        if (p == NULL) {
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d075      	beq.n	800406e <rt_vsnprintf+0x442>
  for (s = str; *s && maxsize--; ++s);
 8003f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f84:	7818      	ldrb	r0, [r3, #0]
          unsigned int l = strnlen_s_(p, precision ? precision : (size_t)-1);
 8003f86:	2f00      	cmp	r7, #0
 8003f88:	f040 80e6 	bne.w	8004158 <rt_vsnprintf+0x52c>
  for (s = str; *s && maxsize--; ++s);
 8003f8c:	f06f 0301 	mvn.w	r3, #1
 8003f90:	2800      	cmp	r0, #0
 8003f92:	f000 8174 	beq.w	800427e <rt_vsnprintf+0x652>
 8003f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f98:	3301      	adds	r3, #1
 8003f9a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003f9e:	441a      	add	r2, r3
 8003fa0:	e001      	b.n	8003fa6 <rt_vsnprintf+0x37a>
 8003fa2:	4592      	cmp	sl, r2
 8003fa4:	d003      	beq.n	8003fae <rt_vsnprintf+0x382>
 8003fa6:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1f9      	bne.n	8003fa2 <rt_vsnprintf+0x376>
  return (unsigned int)(s - str);
 8003fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb0:	ebaa 0303 	sub.w	r3, sl, r3
 8003fb4:	930b      	str	r3, [sp, #44]	; 0x2c
          if (flags & FLAGS_PRECISION) {
 8003fb6:	f411 6380 	ands.w	r3, r1, #1024	; 0x400
 8003fba:	930c      	str	r3, [sp, #48]	; 0x30
 8003fbc:	d004      	beq.n	8003fc8 <rt_vsnprintf+0x39c>
            l = (l < precision ? l : precision);
 8003fbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003fc0:	42bb      	cmp	r3, r7
 8003fc2:	bf28      	it	cs
 8003fc4:	463b      	movcs	r3, r7
 8003fc6:	930b      	str	r3, [sp, #44]	; 0x2c
          if (!(flags & FLAGS_LEFT)) {
 8003fc8:	f011 0302 	ands.w	r3, r1, #2
 8003fcc:	930d      	str	r3, [sp, #52]	; 0x34
 8003fce:	f000 810a 	beq.w	80041e6 <rt_vsnprintf+0x5ba>
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	f000 809b 	beq.w	800410e <rt_vsnprintf+0x4e2>
 8003fd8:	462a      	mov	r2, r5
 8003fda:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003fde:	9409      	str	r4, [sp, #36]	; 0x24
 8003fe0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003fe2:	b124      	cbz	r4, 8003fee <rt_vsnprintf+0x3c2>
 8003fe4:	1e7b      	subs	r3, r7, #1
 8003fe6:	2f00      	cmp	r7, #0
 8003fe8:	f000 808d 	beq.w	8004106 <rt_vsnprintf+0x4da>
 8003fec:	461f      	mov	r7, r3
            out(*(p++), buffer, idx++, maxlen);
 8003fee:	464b      	mov	r3, r9
 8003ff0:	4641      	mov	r1, r8
 8003ff2:	47d8      	blx	fp
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003ff4:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
            out(*(p++), buffer, idx++, maxlen);
 8003ff8:	3501      	adds	r5, #1
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	f000 8083 	beq.w	8004106 <rt_vsnprintf+0x4da>
            out(*(p++), buffer, idx++, maxlen);
 8004000:	462a      	mov	r2, r5
 8004002:	e7ee      	b.n	8003fe2 <rt_vsnprintf+0x3b6>
        out('%', buffer, idx++, maxlen);
 8004004:	1c68      	adds	r0, r5, #1
 8004006:	462a      	mov	r2, r5
 8004008:	464b      	mov	r3, r9
 800400a:	4605      	mov	r5, r0
 800400c:	4641      	mov	r1, r8
 800400e:	2025      	movs	r0, #37	; 0x25
        format++;
 8004010:	3401      	adds	r4, #1
        out('%', buffer, idx++, maxlen);
 8004012:	47d8      	blx	fp
        break;
 8004014:	e626      	b.n	8003c64 <rt_vsnprintf+0x38>
  unsigned int i = 0U;
 8004016:	2700      	movs	r7, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004018:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800401c:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  while (is_digit_(**str)) {
 8004020:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004024:	3f30      	subs	r7, #48	; 0x30
  while (is_digit_(**str)) {
 8004026:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800402a:	2a09      	cmp	r2, #9
 800402c:	d9f4      	bls.n	8004018 <rt_vsnprintf+0x3ec>
 800402e:	461c      	mov	r4, r3
 8004030:	e63f      	b.n	8003cb2 <rt_vsnprintf+0x86>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004032:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8004036:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004038:	bf04      	itt	eq
 800403a:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800403e:	f441 6100 	orreq.w	r1, r1, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004042:	2845      	cmp	r0, #69	; 0x45
 8004044:	bf08      	it	eq
 8004046:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 800404a:	f10a 0a07 	add.w	sl, sl, #7
 800404e:	462a      	mov	r2, r5
 8004050:	2301      	movs	r3, #1
 8004052:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8004056:	9702      	str	r7, [sp, #8]
 8004058:	f02a 0a07 	bic.w	sl, sl, #7
        format++;
 800405c:	3401      	adds	r4, #1
 800405e:	e748      	b.n	8003ef2 <rt_vsnprintf+0x2c6>
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 8004060:	f85a 7b04 	ldr.w	r7, [sl], #4
    switch (*format) {
 8004064:	78a0      	ldrb	r0, [r4, #2]
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 8004066:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
        format++;
 800406a:	3402      	adds	r4, #2
 800406c:	e621      	b.n	8003cb2 <rt_vsnprintf+0x86>
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 800406e:	4b88      	ldr	r3, [pc, #544]	; (8004290 <rt_vsnprintf+0x664>)
 8004070:	462a      	mov	r2, r5
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2306      	movs	r3, #6
 8004076:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800407a:	9301      	str	r3, [sp, #4]
 800407c:	4641      	mov	r1, r8
 800407e:	464b      	mov	r3, r9
 8004080:	4658      	mov	r0, fp
 8004082:	f7fe fe59 	bl	8002d38 <out_rev_>
 8004086:	4605      	mov	r5, r0
        const char* p = va_arg(va, char*);
 8004088:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        format++;
 800408c:	3401      	adds	r4, #1
        break;
 800408e:	e5e9      	b.n	8003c64 <rt_vsnprintf+0x38>
          base = BASE_HEX;
 8004090:	2210      	movs	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004092:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 8004096:	0549      	lsls	r1, r1, #21
 8004098:	d501      	bpl.n	800409e <rt_vsnprintf+0x472>
          flags &= ~FLAGS_ZEROPAD;
 800409a:	f023 0301 	bic.w	r3, r3, #1
        if ((*format == 'i') || (*format == 'd')) {
 800409e:	2869      	cmp	r0, #105	; 0x69
 80040a0:	f43f aede 	beq.w	8003e60 <rt_vsnprintf+0x234>
 80040a4:	2864      	cmp	r0, #100	; 0x64
 80040a6:	f43f aedb 	beq.w	8003e60 <rt_vsnprintf+0x234>
          if (flags & FLAGS_LONG_LONG) {
 80040aa:	f413 7c00 	ands.w	ip, r3, #512	; 0x200
 80040ae:	f040 80b9 	bne.w	8004224 <rt_vsnprintf+0x5f8>
          else if (flags & FLAGS_LONG) {
 80040b2:	05d9      	lsls	r1, r3, #23
 80040b4:	f100 80cf 	bmi.w	8004256 <rt_vsnprintf+0x62a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80040b8:	0658      	lsls	r0, r3, #25
 80040ba:	f85a 1b04 	ldr.w	r1, [sl], #4
 80040be:	f100 8087 	bmi.w	80041d0 <rt_vsnprintf+0x5a4>
 80040c2:	0618      	lsls	r0, r3, #24
 80040c4:	bf48      	it	mi
 80040c6:	b289      	uxthmi	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 80040c8:	e9cd 2703 	strd	r2, r7, [sp, #12]
 80040cc:	462a      	mov	r2, r5
 80040ce:	2500      	movs	r5, #0
 80040d0:	e9cd 6305 	strd	r6, r3, [sp, #20]
 80040d4:	e9cd 5501 	strd	r5, r5, [sp, #4]
 80040d8:	9100      	str	r1, [sp, #0]
 80040da:	464b      	mov	r3, r9
 80040dc:	4641      	mov	r1, r8
 80040de:	4658      	mov	r0, fp
 80040e0:	f7fe fe6e 	bl	8002dc0 <print_integer>
 80040e4:	4605      	mov	r5, r0
        format++;
 80040e6:	e6da      	b.n	8003e9e <rt_vsnprintf+0x272>
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 80040e8:	4b6a      	ldr	r3, [pc, #424]	; (8004294 <rt_vsnprintf+0x668>)
 80040ea:	200a      	movs	r0, #10
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	2305      	movs	r3, #5
 80040f0:	462a      	mov	r2, r5
 80040f2:	e9cd 3001 	strd	r3, r0, [sp, #4]
 80040f6:	9103      	str	r1, [sp, #12]
 80040f8:	464b      	mov	r3, r9
 80040fa:	4641      	mov	r1, r8
 80040fc:	4658      	mov	r0, fp
 80040fe:	f7fe fe1b 	bl	8002d38 <out_rev_>
 8004102:	4605      	mov	r5, r0
 8004104:	e6cb      	b.n	8003e9e <rt_vsnprintf+0x272>
          if (flags & FLAGS_LEFT) {
 8004106:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004108:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0bc      	beq.n	8004088 <rt_vsnprintf+0x45c>
            while (l++ < width) {
 800410e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004110:	462f      	mov	r7, r5
 8004112:	429e      	cmp	r6, r3
 8004114:	d9b8      	bls.n	8004088 <rt_vsnprintf+0x45c>
 8004116:	1970      	adds	r0, r6, r5
 8004118:	1ac5      	subs	r5, r0, r3
              out(' ', buffer, idx++, maxlen);
 800411a:	463a      	mov	r2, r7
 800411c:	464b      	mov	r3, r9
 800411e:	4641      	mov	r1, r8
 8004120:	2020      	movs	r0, #32
 8004122:	3701      	adds	r7, #1
 8004124:	47d8      	blx	fp
            while (l++ < width) {
 8004126:	42af      	cmp	r7, r5
 8004128:	d1f7      	bne.n	800411a <rt_vsnprintf+0x4ee>
 800412a:	e7ad      	b.n	8004088 <rt_vsnprintf+0x45c>
    switch (*format) {
 800412c:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_CHAR;
 800412e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
          format++;
 8004132:	3402      	adds	r4, #2
 8004134:	e5da      	b.n	8003cec <rt_vsnprintf+0xc0>
    switch (*format) {
 8004136:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_LONG_LONG;
 8004138:	f441 7140 	orr.w	r1, r1, #768	; 0x300
          format++;
 800413c:	3402      	adds	r4, #2
 800413e:	e5d5      	b.n	8003cec <rt_vsnprintf+0xc0>
  while (*format)
 8004140:	4604      	mov	r4, r0
 8004142:	4605      	mov	r5, r0
 8004144:	e63f      	b.n	8003dc6 <rt_vsnprintf+0x19a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004146:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 800414a:	0549      	lsls	r1, r1, #21
          base = BASE_HEX;
 800414c:	f04f 0210 	mov.w	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004150:	f043 0320 	orr.w	r3, r3, #32
        if (flags & FLAGS_PRECISION) {
 8004154:	d4a1      	bmi.n	800409a <rt_vsnprintf+0x46e>
 8004156:	e7a8      	b.n	80040aa <rt_vsnprintf+0x47e>
  for (s = str; *s && maxsize--; ++s);
 8004158:	2800      	cmp	r0, #0
 800415a:	f000 8097 	beq.w	800428c <rt_vsnprintf+0x660>
 800415e:	1e7b      	subs	r3, r7, #1
 8004160:	e719      	b.n	8003f96 <rt_vsnprintf+0x36a>
          while (l++ < width) {
 8004162:	2e01      	cmp	r6, #1
 8004164:	f240 8089 	bls.w	800427a <rt_vsnprintf+0x64e>
 8004168:	1e6b      	subs	r3, r5, #1
 800416a:	441e      	add	r6, r3
            out(' ', buffer, idx++, maxlen);
 800416c:	462a      	mov	r2, r5
 800416e:	464b      	mov	r3, r9
 8004170:	4641      	mov	r1, r8
 8004172:	2020      	movs	r0, #32
 8004174:	3501      	adds	r5, #1
 8004176:	47d8      	blx	fp
          while (l++ < width) {
 8004178:	42b5      	cmp	r5, r6
 800417a:	d1f7      	bne.n	800416c <rt_vsnprintf+0x540>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800417c:	f85a 0b04 	ldr.w	r0, [sl], #4
 8004180:	464b      	mov	r3, r9
 8004182:	4632      	mov	r2, r6
 8004184:	4641      	mov	r1, r8
 8004186:	b2c0      	uxtb	r0, r0
 8004188:	1c75      	adds	r5, r6, #1
 800418a:	47d8      	blx	fp
        if (flags & FLAGS_LEFT) {
 800418c:	e687      	b.n	8003e9e <rt_vsnprintf+0x272>
          base =  BASE_OCTAL;
 800418e:	2208      	movs	r2, #8
          format++;
 8004190:	460b      	mov	r3, r1
        if ((*format != 'i') && (*format != 'd')) {
 8004192:	2864      	cmp	r0, #100	; 0x64
 8004194:	bf18      	it	ne
 8004196:	4619      	movne	r1, r3
 8004198:	f47f af7b 	bne.w	8004092 <rt_vsnprintf+0x466>
        if (flags & FLAGS_PRECISION) {
 800419c:	0559      	lsls	r1, r3, #21
 800419e:	f53f af7c 	bmi.w	800409a <rt_vsnprintf+0x46e>
 80041a2:	e65d      	b.n	8003e60 <rt_vsnprintf+0x234>
            const long long value = va_arg(va, long long);
 80041a4:	f10a 0a07 	add.w	sl, sl, #7
 80041a8:	f02a 0a07 	bic.w	sl, sl, #7
 80041ac:	f8da 1004 	ldr.w	r1, [sl, #4]
 80041b0:	f85a 0b08 	ldr.w	r0, [sl], #8
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80041b4:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 80041b8:	2900      	cmp	r1, #0
 80041ba:	e9cd 6305 	strd	r6, r3, [sp, #20]
 80041be:	e9cd 2703 	strd	r2, r7, [sp, #12]
 80041c2:	f8cd c008 	str.w	ip, [sp, #8]
 80041c6:	db09      	blt.n	80041dc <rt_vsnprintf+0x5b0>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80041c8:	462a      	mov	r2, r5
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80041ca:	e9cd 0100 	strd	r0, r1, [sp]
 80041ce:	e660      	b.n	8003e92 <rt_vsnprintf+0x266>
 80041d0:	b2c9      	uxtb	r1, r1
 80041d2:	e779      	b.n	80040c8 <rt_vsnprintf+0x49c>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80041d4:	0618      	lsls	r0, r3, #24
 80041d6:	bf48      	it	mi
 80041d8:	b209      	sxthmi	r1, r1
 80041da:	e64c      	b.n	8003e76 <rt_vsnprintf+0x24a>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80041dc:	4243      	negs	r3, r0
 80041de:	4618      	mov	r0, r3
 80041e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80041e4:	e7f0      	b.n	80041c8 <rt_vsnprintf+0x59c>
            while (l++ < width) {
 80041e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80041e8:	4296      	cmp	r6, r2
 80041ea:	f102 0301 	add.w	r3, r2, #1
 80041ee:	d948      	bls.n	8004282 <rt_vsnprintf+0x656>
 80041f0:	eb06 0a05 	add.w	sl, r6, r5
 80041f4:	ebaa 0a02 	sub.w	sl, sl, r2
              out(' ', buffer, idx++, maxlen);
 80041f8:	462a      	mov	r2, r5
 80041fa:	464b      	mov	r3, r9
 80041fc:	4641      	mov	r1, r8
 80041fe:	2020      	movs	r0, #32
 8004200:	3501      	adds	r5, #1
 8004202:	47d8      	blx	fp
            while (l++ < width) {
 8004204:	4555      	cmp	r5, sl
 8004206:	d1f7      	bne.n	80041f8 <rt_vsnprintf+0x5cc>
 8004208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800420a:	7818      	ldrb	r0, [r3, #0]
 800420c:	1c73      	adds	r3, r6, #1
 800420e:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004210:	2800      	cmp	r0, #0
 8004212:	f47f aee1 	bne.w	8003fd8 <rt_vsnprintf+0x3ac>
 8004216:	e737      	b.n	8004088 <rt_vsnprintf+0x45c>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004218:	17c8      	asrs	r0, r1, #31
 800421a:	f1d1 0c00 	rsbs	ip, r1, #0
 800421e:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8004222:	e62d      	b.n	8003e80 <rt_vsnprintf+0x254>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004224:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8004228:	2300      	movs	r3, #0
 800422a:	e9cd 2703 	strd	r2, r7, [sp, #12]
 800422e:	f10a 0a07 	add.w	sl, sl, #7
 8004232:	9302      	str	r3, [sp, #8]
 8004234:	f02a 0a07 	bic.w	sl, sl, #7
 8004238:	462a      	mov	r2, r5
 800423a:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 800423e:	464b      	mov	r3, r9
 8004240:	4641      	mov	r1, r8
 8004242:	4658      	mov	r0, fp
 8004244:	e9cd 6700 	strd	r6, r7, [sp]
 8004248:	f7fe fdba 	bl	8002dc0 <print_integer>
 800424c:	4605      	mov	r5, r0
 800424e:	e626      	b.n	8003e9e <rt_vsnprintf+0x272>
          base =  BASE_BINARY;
 8004250:	2202      	movs	r2, #2
          format++;
 8004252:	460b      	mov	r3, r1
 8004254:	e79d      	b.n	8004192 <rt_vsnprintf+0x566>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
 8004256:	e9cd 6305 	strd	r6, r3, [sp, #20]
 800425a:	e9cd 2703 	strd	r2, r7, [sp, #12]
 800425e:	f8cd c008 	str.w	ip, [sp, #8]
 8004262:	462a      	mov	r2, r5
 8004264:	f85a 5b04 	ldr.w	r5, [sl], #4
 8004268:	464b      	mov	r3, r9
 800426a:	e9cd 5c00 	strd	r5, ip, [sp]
 800426e:	4641      	mov	r1, r8
 8004270:	4658      	mov	r0, fp
 8004272:	f7fe fda5 	bl	8002dc0 <print_integer>
 8004276:	4605      	mov	r5, r0
 8004278:	e611      	b.n	8003e9e <rt_vsnprintf+0x272>
          while (l++ < width) {
 800427a:	462e      	mov	r6, r5
 800427c:	e77e      	b.n	800417c <rt_vsnprintf+0x550>
  for (s = str; *s && maxsize--; ++s);
 800427e:	970b      	str	r7, [sp, #44]	; 0x2c
 8004280:	e699      	b.n	8003fb6 <rt_vsnprintf+0x38a>
            while (l++ < width) {
 8004282:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004284:	2800      	cmp	r0, #0
 8004286:	f47f aea7 	bne.w	8003fd8 <rt_vsnprintf+0x3ac>
 800428a:	e6fd      	b.n	8004088 <rt_vsnprintf+0x45c>
  for (s = str; *s && maxsize--; ++s);
 800428c:	900b      	str	r0, [sp, #44]	; 0x2c
 800428e:	e692      	b.n	8003fb6 <rt_vsnprintf+0x38a>
 8004290:	08011a0c 	.word	0x08011a0c
 8004294:	08011a14 	.word	0x08011a14

08004298 <LCD_WritePara.isra.0>:
    LCD_SetCmdLine();
    return SPI_WriteDatas(&cmd, 1);
}

/* 给SPI LCD发送1个参数,通常是先调用LCD_WriteCmd,再调用LCD_WritePara */
static int LCD_WritePara(uint8_t data)
 8004298:	4603      	mov	r3, r0
 800429a:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 800429c:	4c0f      	ldr	r4, [pc, #60]	; (80042dc <LCD_WritePara.isra.0+0x44>)
static int LCD_WritePara(uint8_t data)
 800429e:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 80042a0:	4620      	mov	r0, r4
 80042a2:	2201      	movs	r2, #1
 80042a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WritePara(uint8_t data)
 80042a8:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 80042ac:	f001 f8a2 	bl	80053f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 80042b0:	4620      	mov	r0, r4
 80042b2:	2200      	movs	r2, #0
 80042b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042b8:	f001 f89c 	bl	80053f4 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 80042bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042c0:	f10d 0107 	add.w	r1, sp, #7
 80042c4:	2201      	movs	r2, #1
 80042c6:	4806      	ldr	r0, [pc, #24]	; (80042e0 <LCD_WritePara.isra.0+0x48>)
 80042c8:	f006 fe1e 	bl	800af08 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 80042cc:	2201      	movs	r2, #1
 80042ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042d2:	4620      	mov	r0, r4
 80042d4:	f001 f88e 	bl	80053f4 <HAL_GPIO_WritePin>
{
    LCD_SetDataLine();
    return SPI_WriteDatas(&data, 1);
}
 80042d8:	b002      	add	sp, #8
 80042da:	bd10      	pop	{r4, pc}
 80042dc:	42020c00 	.word	0x42020c00
 80042e0:	20004a70 	.word	0x20004a70

080042e4 <LCD_WriteCmd.isra.0>:
static int LCD_WriteCmd(uint8_t cmd)
 80042e4:	4603      	mov	r3, r0
 80042e6:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 80042e8:	4c0f      	ldr	r4, [pc, #60]	; (8004328 <LCD_WriteCmd.isra.0+0x44>)
static int LCD_WriteCmd(uint8_t cmd)
 80042ea:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 80042ec:	4620      	mov	r0, r4
 80042ee:	2200      	movs	r2, #0
 80042f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WriteCmd(uint8_t cmd)
 80042f4:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 80042f8:	f001 f87c 	bl	80053f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 80042fc:	4620      	mov	r0, r4
 80042fe:	2200      	movs	r2, #0
 8004300:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004304:	f001 f876 	bl	80053f4 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8004308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800430c:	f10d 0107 	add.w	r1, sp, #7
 8004310:	2201      	movs	r2, #1
 8004312:	4806      	ldr	r0, [pc, #24]	; (800432c <LCD_WriteCmd.isra.0+0x48>)
 8004314:	f006 fdf8 	bl	800af08 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8004318:	2201      	movs	r2, #1
 800431a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800431e:	4620      	mov	r0, r4
 8004320:	f001 f868 	bl	80053f4 <HAL_GPIO_WritePin>
}
 8004324:	b002      	add	sp, #8
 8004326:	bd10      	pop	{r4, pc}
 8004328:	42020c00 	.word	0x42020c00
 800432c:	20004a70 	.word	0x20004a70

08004330 <LCD_SetDataLine>:
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8004330:	2201      	movs	r2, #1
 8004332:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004336:	4801      	ldr	r0, [pc, #4]	; (800433c <LCD_SetDataLine+0xc>)
 8004338:	f001 b85c 	b.w	80053f4 <HAL_GPIO_WritePin>
 800433c:	42020c00 	.word	0x42020c00

08004340 <LCD_WriteDatas>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int LCD_WriteDatas(uint8_t *datas, uint32_t count)
{
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	4605      	mov	r5, r0
 8004344:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8004346:	4e0b      	ldr	r6, [pc, #44]	; (8004374 <LCD_WriteDatas+0x34>)
 8004348:	2200      	movs	r2, #0
 800434a:	4630      	mov	r0, r6
 800434c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004350:	f001 f850 	bl	80053f4 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8004354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004358:	4629      	mov	r1, r5
 800435a:	b2a2      	uxth	r2, r4
 800435c:	4806      	ldr	r0, [pc, #24]	; (8004378 <LCD_WriteDatas+0x38>)
 800435e:	f006 fdd3 	bl	800af08 <HAL_SPI_Transmit>
 8004362:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8004364:	2201      	movs	r2, #1
 8004366:	4630      	mov	r0, r6
 8004368:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800436c:	f001 f842 	bl	80053f4 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);  /* 由调用者设置RS引脚 */
    return SPI_WriteDatas(datas, count);
}
 8004370:	4260      	negs	r0, r4
 8004372:	bd70      	pop	{r4, r5, r6, pc}
 8004374:	42020c00 	.word	0x42020c00
 8004378:	20004a70 	.word	0x20004a70

0800437c <LCD_Init>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_Init(lcd_display_rotation_t rotation)
{       
 800437c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 800437e:	2200      	movs	r2, #0
 8004380:	2110      	movs	r1, #16
{       
 8004382:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 8004384:	4893      	ldr	r0, [pc, #588]	; (80045d4 <LCD_Init+0x258>)
 8004386:	f001 f835 	bl	80053f4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800438a:	2064      	movs	r0, #100	; 0x64
 800438c:	f000 fa72 	bl	8004874 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_SET);
 8004390:	2201      	movs	r2, #1
 8004392:	2110      	movs	r1, #16
 8004394:	488f      	ldr	r0, [pc, #572]	; (80045d4 <LCD_Init+0x258>)
 8004396:	f001 f82d 	bl	80053f4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 800439a:	2064      	movs	r0, #100	; 0x64
 800439c:	f000 fa6a 	bl	8004874 <HAL_Delay>
        HAL_GPIO_WritePin(PWM_GPIO_Port,PWM_Pin,GPIO_PIN_SET);
 80043a0:	2201      	movs	r2, #1
 80043a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043a6:	488b      	ldr	r0, [pc, #556]	; (80045d4 <LCD_Init+0x258>)
 80043a8:	f001 f824 	bl	80053f4 <HAL_GPIO_WritePin>
    LCD_Reset();    
    LCD_BackLightControl(1);
    
#if 1   
    // Positive Gamma Control
    LCD_WriteCmd( 0xe0);
 80043ac:	20e0      	movs	r0, #224	; 0xe0
 80043ae:	f7ff ff99 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xf0);
 80043b2:	20f0      	movs	r0, #240	; 0xf0
 80043b4:	f7ff ff70 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3e);
 80043b8:	203e      	movs	r0, #62	; 0x3e
 80043ba:	f7ff ff6d 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x30);
 80043be:	2030      	movs	r0, #48	; 0x30
 80043c0:	f7ff ff6a 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 80043c4:	2006      	movs	r0, #6
 80043c6:	f7ff ff67 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0a);
 80043ca:	200a      	movs	r0, #10
 80043cc:	f7ff ff64 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x03);
 80043d0:	2003      	movs	r0, #3
 80043d2:	f7ff ff61 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 80043d6:	204d      	movs	r0, #77	; 0x4d
 80043d8:	f7ff ff5e 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x56);
 80043dc:	2056      	movs	r0, #86	; 0x56
 80043de:	f7ff ff5b 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3a);
 80043e2:	203a      	movs	r0, #58	; 0x3a
 80043e4:	f7ff ff58 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 80043e8:	2006      	movs	r0, #6
 80043ea:	f7ff ff55 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0f);
 80043ee:	200f      	movs	r0, #15
 80043f0:	f7ff ff52 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x04);
 80043f4:	2004      	movs	r0, #4
 80043f6:	f7ff ff4f 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 80043fa:	2018      	movs	r0, #24
 80043fc:	f7ff ff4c 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8004400:	2013      	movs	r0, #19
 8004402:	f7ff ff49 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8004406:	2000      	movs	r0, #0
 8004408:	f7ff ff46 	bl	8004298 <LCD_WritePara.isra.0>

    // Negative Gamma Control
    LCD_WriteCmd(0xe1);
 800440c:	20e1      	movs	r0, #225	; 0xe1
 800440e:	f7ff ff69 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x0f);
 8004412:	200f      	movs	r0, #15
 8004414:	f7ff ff40 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x37);
 8004418:	2037      	movs	r0, #55	; 0x37
 800441a:	f7ff ff3d 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x31);
 800441e:	2031      	movs	r0, #49	; 0x31
 8004420:	f7ff ff3a 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0b);
 8004424:	200b      	movs	r0, #11
 8004426:	f7ff ff37 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0d);
 800442a:	200d      	movs	r0, #13
 800442c:	f7ff ff34 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8004430:	2006      	movs	r0, #6
 8004432:	f7ff ff31 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 8004436:	204d      	movs	r0, #77	; 0x4d
 8004438:	f7ff ff2e 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x34);
 800443c:	2034      	movs	r0, #52	; 0x34
 800443e:	f7ff ff2b 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x38);
 8004442:	2038      	movs	r0, #56	; 0x38
 8004444:	f7ff ff28 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8004448:	2006      	movs	r0, #6
 800444a:	f7ff ff25 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x11);
 800444e:	2011      	movs	r0, #17
 8004450:	f7ff ff22 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 8004454:	2001      	movs	r0, #1
 8004456:	f7ff ff1f 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 800445a:	2018      	movs	r0, #24
 800445c:	f7ff ff1c 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8004460:	2013      	movs	r0, #19
 8004462:	f7ff ff19 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8004466:	2000      	movs	r0, #0
 8004468:	f7ff ff16 	bl	8004298 <LCD_WritePara.isra.0>
    
    // Power Control 1
    LCD_WriteCmd(0xc0);
 800446c:	20c0      	movs	r0, #192	; 0xc0
 800446e:	f7ff ff39 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x18);
 8004472:	2018      	movs	r0, #24
 8004474:	f7ff ff10 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x17);
 8004478:	2017      	movs	r0, #23
 800447a:	f7ff ff0d 	bl	8004298 <LCD_WritePara.isra.0>

    // Power Control 2
    LCD_WriteCmd(0xc1);
 800447e:	20c1      	movs	r0, #193	; 0xc1
 8004480:	f7ff ff30 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x41);
 8004484:	2041      	movs	r0, #65	; 0x41
 8004486:	f7ff ff07 	bl	8004298 <LCD_WritePara.isra.0>

    // Power Control 3
    LCD_WriteCmd(0xc5);
 800448a:	20c5      	movs	r0, #197	; 0xc5
 800448c:	f7ff ff2a 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8004490:	2000      	movs	r0, #0
 8004492:	f7ff ff01 	bl	8004298 <LCD_WritePara.isra.0>

    // VCOM Control
    LCD_WriteCmd(0x1a);
 8004496:	201a      	movs	r0, #26
 8004498:	f7ff ff24 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x80);
 800449c:	2080      	movs	r0, #128	; 0x80
 800449e:	f7ff fefb 	bl	8004298 <LCD_WritePara.isra.0>

    // Memory Access Control
    LCD_WriteCmd(0x36);
 80044a2:	2036      	movs	r0, #54	; 0x36
 80044a4:	f7ff ff1e 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x48);
 80044a8:	2048      	movs	r0, #72	; 0x48
 80044aa:	f7ff fef5 	bl	8004298 <LCD_WritePara.isra.0>

    // Pixel Interface Format
    LCD_WriteCmd(0x3a);
 80044ae:	203a      	movs	r0, #58	; 0x3a
 80044b0:	f7ff ff18 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x55);
 80044b4:	2055      	movs	r0, #85	; 0x55
 80044b6:	f7ff feef 	bl	8004298 <LCD_WritePara.isra.0>

    // Interface Mode Control
    LCD_WriteCmd(0xb0);
 80044ba:	20b0      	movs	r0, #176	; 0xb0
 80044bc:	f7ff ff12 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 80044c0:	2000      	movs	r0, #0
 80044c2:	f7ff fee9 	bl	8004298 <LCD_WritePara.isra.0>

    // Frame Rate Control
    LCD_WriteCmd(0xb1);
 80044c6:	20b1      	movs	r0, #177	; 0xb1
 80044c8:	f7ff ff0c 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa0);
 80044cc:	20a0      	movs	r0, #160	; 0xa0
 80044ce:	f7ff fee3 	bl	8004298 <LCD_WritePara.isra.0>

    // Display Inversion Control
    LCD_WriteCmd(0xb4);
 80044d2:	20b4      	movs	r0, #180	; 0xb4
 80044d4:	f7ff ff06 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 80044d8:	2002      	movs	r0, #2
 80044da:	f7ff fedd 	bl	8004298 <LCD_WritePara.isra.0>

    // Display Function Control
    LCD_WriteCmd(0xb6);
 80044de:	20b6      	movs	r0, #182	; 0xb6
 80044e0:	f7ff ff00 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 80044e4:	2002      	movs	r0, #2
 80044e6:	f7ff fed7 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x02);
 80044ea:	2002      	movs	r0, #2
 80044ec:	f7ff fed4 	bl	8004298 <LCD_WritePara.isra.0>

    // Set image function
    LCD_WriteCmd(0xe9);
 80044f0:	20e9      	movs	r0, #233	; 0xe9
 80044f2:	f7ff fef7 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 80044f6:	2000      	movs	r0, #0
 80044f8:	f7ff fece 	bl	8004298 <LCD_WritePara.isra.0>

    //Adjust Control 3
    LCD_WriteCmd(0xf7);
 80044fc:	20f7      	movs	r0, #247	; 0xf7
 80044fe:	f7ff fef1 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa9);
 8004502:	20a9      	movs	r0, #169	; 0xa9
 8004504:	f7ff fec8 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x51);
 8004508:	2051      	movs	r0, #81	; 0x51
 800450a:	f7ff fec5 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x2c);
 800450e:	202c      	movs	r0, #44	; 0x2c
 8004510:	f7ff fec2 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x82);
 8004514:	2082      	movs	r0, #130	; 0x82
 8004516:	f7ff febf 	bl	8004298 <LCD_WritePara.isra.0>

    // Write_memory_start
    LCD_WriteCmd(0x21);
 800451a:	2021      	movs	r0, #33	; 0x21
 800451c:	f7ff fee2 	bl	80042e4 <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 8004520:	2078      	movs	r0, #120	; 0x78
 8004522:	f000 f9a7 	bl	8004874 <HAL_Delay>
    //Exit Sleep
    LCD_WriteCmd(0x11);
 8004526:	2011      	movs	r0, #17
 8004528:	f7ff fedc 	bl	80042e4 <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 800452c:	2078      	movs	r0, #120	; 0x78
 800452e:	f000 f9a1 	bl	8004874 <HAL_Delay>

    switch (rotation)
 8004532:	2c02      	cmp	r4, #2
    {
        case LCD_DISPLAY_ROTATION_0:
            LCD_WriteCmd(0x36);
 8004534:	f04f 0036 	mov.w	r0, #54	; 0x36
    switch (rotation)
 8004538:	d036      	beq.n	80045a8 <LCD_Init+0x22c>
 800453a:	2c03      	cmp	r4, #3
 800453c:	d046      	beq.n	80045cc <LCD_Init+0x250>
 800453e:	2c01      	cmp	r4, #1
 8004540:	d036      	beq.n	80045b0 <LCD_Init+0x234>
            LCD_WriteCmd(0x36);
 8004542:	f7ff fecf 	bl	80042e4 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x48);
 8004546:	2048      	movs	r0, #72	; 0x48
            g_lcd_height = 320;
            g_lcd_width  = 480;
            break;
        case LCD_DISPLAY_ROTATION_180:
            LCD_WriteCmd(0x36);
            LCD_WritePara(0x88);
 8004548:	f7ff fea6 	bl	8004298 <LCD_WritePara.isra.0>
            g_lcd_height = 480;
 800454c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
            g_lcd_width  = 320;
 8004550:	f44f 72a0 	mov.w	r2, #320	; 0x140
            g_lcd_height = 480;
 8004554:	4920      	ldr	r1, [pc, #128]	; (80045d8 <LCD_Init+0x25c>)
            g_lcd_width  = 320;
 8004556:	4b21      	ldr	r3, [pc, #132]	; (80045dc <LCD_Init+0x260>)
            g_lcd_height = 480;
 8004558:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 320;
 800455a:	601a      	str	r2, [r3, #0]
            g_lcd_width  = 320;
            break;
    }

    // set_screen_size
    LCD_WriteCmd(0x2a);
 800455c:	202a      	movs	r0, #42	; 0x2a
 800455e:	f7ff fec1 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8004562:	2000      	movs	r0, #0
 8004564:	f7ff fe98 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8004568:	2000      	movs	r0, #0
 800456a:	f7ff fe95 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 800456e:	2001      	movs	r0, #1
 8004570:	f7ff fe92 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3f);
 8004574:	203f      	movs	r0, #63	; 0x3f
 8004576:	f7ff fe8f 	bl	8004298 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2b);
 800457a:	202b      	movs	r0, #43	; 0x2b
 800457c:	f7ff feb2 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8004580:	2000      	movs	r0, #0
 8004582:	f7ff fe89 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8004586:	2000      	movs	r0, #0
 8004588:	f7ff fe86 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 800458c:	2001      	movs	r0, #1
 800458e:	f7ff fe83 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(0xdf);
 8004592:	20df      	movs	r0, #223	; 0xdf
 8004594:	f7ff fe80 	bl	8004298 <LCD_WritePara.isra.0>

    //Display on
    LCD_WriteCmd(0x29);
 8004598:	2029      	movs	r0, #41	; 0x29
 800459a:	f7ff fea3 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WriteCmd(0x21);     

    LCD_WriteCmd(0x29);     
#endif  

}
 800459e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(120);
 80045a2:	2078      	movs	r0, #120	; 0x78
 80045a4:	f000 b966 	b.w	8004874 <HAL_Delay>
            LCD_WriteCmd(0x36);
 80045a8:	f7ff fe9c 	bl	80042e4 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x88);
 80045ac:	2088      	movs	r0, #136	; 0x88
 80045ae:	e7cb      	b.n	8004548 <LCD_Init+0x1cc>
            LCD_WriteCmd(0x36);
 80045b0:	f7ff fe98 	bl	80042e4 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0xe8);
 80045b4:	20e8      	movs	r0, #232	; 0xe8
            LCD_WritePara(0x28);
 80045b6:	f7ff fe6f 	bl	8004298 <LCD_WritePara.isra.0>
            g_lcd_height = 320;
 80045ba:	f44f 70a0 	mov.w	r0, #320	; 0x140
            g_lcd_width  = 480;
 80045be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
            g_lcd_height = 320;
 80045c2:	4905      	ldr	r1, [pc, #20]	; (80045d8 <LCD_Init+0x25c>)
            g_lcd_width  = 480;
 80045c4:	4b05      	ldr	r3, [pc, #20]	; (80045dc <LCD_Init+0x260>)
            g_lcd_height = 320;
 80045c6:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 480;
 80045c8:	601a      	str	r2, [r3, #0]
            break;
 80045ca:	e7c7      	b.n	800455c <LCD_Init+0x1e0>
            LCD_WriteCmd(0x36);
 80045cc:	f7ff fe8a 	bl	80042e4 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x28);
 80045d0:	2028      	movs	r0, #40	; 0x28
 80045d2:	e7f0      	b.n	80045b6 <LCD_Init+0x23a>
 80045d4:	42020400 	.word	0x42020400
 80045d8:	2000a1a0 	.word	0x2000a1a0
 80045dc:	2000a1a4 	.word	0x2000a1a4

080045e0 <LCD_GetInfo>:
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_GetInfo(uint32_t *pWidth, uint32_t *pHeight)
{
    *pHeight = g_lcd_height;
 80045e0:	4a03      	ldr	r2, [pc, #12]	; (80045f0 <LCD_GetInfo+0x10>)
    *pWidth  = g_lcd_width;
 80045e2:	4b04      	ldr	r3, [pc, #16]	; (80045f4 <LCD_GetInfo+0x14>)
    *pHeight = g_lcd_height;
 80045e4:	6812      	ldr	r2, [r2, #0]
    *pWidth  = g_lcd_width;
 80045e6:	681b      	ldr	r3, [r3, #0]
    *pHeight = g_lcd_height;
 80045e8:	600a      	str	r2, [r1, #0]
    *pWidth  = g_lcd_width;
 80045ea:	6003      	str	r3, [r0, #0]
}
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	2000a1a0 	.word	0x2000a1a0
 80045f4:	2000a1a4 	.word	0x2000a1a4

080045f8 <LCD_SetWindows>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_SetWindows(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2)
{
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	4607      	mov	r7, r0
 80045fc:	4616      	mov	r6, r2
 80045fe:	460d      	mov	r5, r1
 8004600:	461c      	mov	r4, r3
    LCD_WriteCmd(0x2a);
 8004602:	202a      	movs	r0, #42	; 0x2a
 8004604:	f7ff fe6e 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara((x1 >> 8) & 0xFF);
 8004608:	f3c7 2007 	ubfx	r0, r7, #8, #8
 800460c:	f7ff fe44 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(x1 & 0xFF);
 8004610:	b2f8      	uxtb	r0, r7
 8004612:	f7ff fe41 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara((x2 >> 8) & 0xFF);
 8004616:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800461a:	f7ff fe3d 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(x2 & 0xFF);
 800461e:	b2f0      	uxtb	r0, r6
 8004620:	f7ff fe3a 	bl	8004298 <LCD_WritePara.isra.0>
    

    LCD_WriteCmd(0x2b);
 8004624:	202b      	movs	r0, #43	; 0x2b
 8004626:	f7ff fe5d 	bl	80042e4 <LCD_WriteCmd.isra.0>
    LCD_WritePara((y1 >> 8) & 0xFF);
 800462a:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800462e:	f7ff fe33 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(y1 & 0xFF);
 8004632:	b2e8      	uxtb	r0, r5
 8004634:	f7ff fe30 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara((y2 >> 8) & 0xFF);
 8004638:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800463c:	f7ff fe2c 	bl	8004298 <LCD_WritePara.isra.0>
    LCD_WritePara(y2 & 0xFF);
 8004640:	b2e0      	uxtb	r0, r4
 8004642:	f7ff fe29 	bl	8004298 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2C);
}
 8004646:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_WriteCmd(0x2C);
 800464a:	202c      	movs	r0, #44	; 0x2c
 800464c:	f7ff be4a 	b.w	80042e4 <LCD_WriteCmd.isra.0>

08004650 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004650:	480d      	ldr	r0, [pc, #52]	; (8004688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004654:	f008 fc70 	bl	800cf38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004658:	480c      	ldr	r0, [pc, #48]	; (800468c <LoopForever+0x6>)
  ldr r1, =_edata
 800465a:	490d      	ldr	r1, [pc, #52]	; (8004690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800465c:	4a0d      	ldr	r2, [pc, #52]	; (8004694 <LoopForever+0xe>)
  movs r3, #0
 800465e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004660:	e002      	b.n	8004668 <LoopCopyDataInit>

08004662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004666:	3304      	adds	r3, #4

08004668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800466a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800466c:	d3f9      	bcc.n	8004662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800466e:	4a0a      	ldr	r2, [pc, #40]	; (8004698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004670:	4c0a      	ldr	r4, [pc, #40]	; (800469c <LoopForever+0x16>)
  movs r3, #0
 8004672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004674:	e001      	b.n	800467a <LoopFillZerobss>

08004676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004678:	3204      	adds	r2, #4

0800467a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800467a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800467c:	d3fb      	bcc.n	8004676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800467e:	f00c f861 	bl	8010744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004682:	f7fd fcfb 	bl	800207c <main>

08004686 <LoopForever>:

LoopForever:
    b LoopForever
 8004686:	e7fe      	b.n	8004686 <LoopForever>
  ldr   r0, =_estack
 8004688:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800468c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004690:	20000644 	.word	0x20000644
  ldr r2, =_sidata
 8004694:	08011b54 	.word	0x08011b54
  ldr r2, =_sbss
 8004698:	20000644 	.word	0x20000644
  ldr r4, =_ebss
 800469c:	2000ae44 	.word	0x2000ae44

080046a0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80046a0:	e7fe      	b.n	80046a0 <ADC1_IRQHandler>
	...

080046a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046a4:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046a6:	2003      	movs	r0, #3
 80046a8:	f000 f834 	bl	8004714 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80046ac:	f001 ff60 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4a0c      	ldr	r2, [pc, #48]	; (80046e4 <HAL_Init+0x40>)
 80046b4:	480c      	ldr	r0, [pc, #48]	; (80046e8 <HAL_Init+0x44>)
 80046b6:	6a12      	ldr	r2, [r2, #32]
 80046b8:	490c      	ldr	r1, [pc, #48]	; (80046ec <HAL_Init+0x48>)
 80046ba:	f002 020f 	and.w	r2, r2, #15
 80046be:	5c82      	ldrb	r2, [r0, r2]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80046c0:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80046c2:	40d3      	lsrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80046c6:	f000 f897 	bl	80047f8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80046ca:	200f      	movs	r0, #15
 80046cc:	f006 ffd0 	bl	800b670 <HAL_InitTick>
 80046d0:	b110      	cbz	r0, 80046d8 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 80046d2:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 80046d4:	4620      	mov	r0, r4
 80046d6:	bd10      	pop	{r4, pc}
 80046d8:	4604      	mov	r4, r0
  HAL_MspInit();
 80046da:	f000 fea5 	bl	8005428 <HAL_MspInit>
}
 80046de:	4620      	mov	r0, r4
 80046e0:	bd10      	pop	{r4, pc}
 80046e2:	bf00      	nop
 80046e4:	44020c00 	.word	0x44020c00
 80046e8:	08011ad8 	.word	0x08011ad8
 80046ec:	200001b4 	.word	0x200001b4

080046f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80046f0:	4a03      	ldr	r2, [pc, #12]	; (8004700 <HAL_IncTick+0x10>)
 80046f2:	4b04      	ldr	r3, [pc, #16]	; (8004704 <HAL_IncTick+0x14>)
 80046f4:	6811      	ldr	r1, [r2, #0]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	440b      	add	r3, r1
 80046fa:	6013      	str	r3, [r2, #0]
}
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	2000a1a8 	.word	0x2000a1a8
 8004704:	200001ac 	.word	0x200001ac

08004708 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004708:	4b01      	ldr	r3, [pc, #4]	; (8004710 <HAL_GetTick+0x8>)
 800470a:	6818      	ldr	r0, [r3, #0]
}
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	2000a1a8 	.word	0x2000a1a8

08004714 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004714:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004718:	4906      	ldr	r1, [pc, #24]	; (8004734 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800471a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800471c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800471e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004722:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800472c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004730:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004732:	4770      	bx	lr
 8004734:	e000ed00 	.word	0xe000ed00

08004738 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004738:	4b1c      	ldr	r3, [pc, #112]	; (80047ac <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800473a:	b500      	push	{lr}
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004742:	f1c3 0e07 	rsb	lr, r3, #7
 8004746:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800474a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800474e:	bf28      	it	cs
 8004750:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004754:	f1bc 0f06 	cmp.w	ip, #6
 8004758:	d91b      	bls.n	8004792 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800475a:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800475e:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004760:	fa0c fc03 	lsl.w	ip, ip, r3
 8004764:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004768:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800476c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004770:	ea21 010c 	bic.w	r1, r1, ip
 8004774:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004776:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004778:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800477c:	db0c      	blt.n	8004798 <HAL_NVIC_SetPriority+0x60>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800477e:	0109      	lsls	r1, r1, #4
 8004780:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004784:	b2c9      	uxtb	r1, r1
 8004786:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800478a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800478e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004792:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004794:	4613      	mov	r3, r2
 8004796:	e7e7      	b.n	8004768 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004798:	4b05      	ldr	r3, [pc, #20]	; (80047b0 <HAL_NVIC_SetPriority+0x78>)
 800479a:	f000 000f 	and.w	r0, r0, #15
 800479e:	0109      	lsls	r1, r1, #4
 80047a0:	b2c9      	uxtb	r1, r1
 80047a2:	4403      	add	r3, r0
 80047a4:	7619      	strb	r1, [r3, #24]
 80047a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80047aa:	bf00      	nop
 80047ac:	e000ed00 	.word	0xe000ed00
 80047b0:	e000ecfc 	.word	0xe000ecfc

080047b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80047b4:	2800      	cmp	r0, #0
 80047b6:	db07      	blt.n	80047c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047b8:	2301      	movs	r3, #1
 80047ba:	f000 011f 	and.w	r1, r0, #31
 80047be:	4a03      	ldr	r2, [pc, #12]	; (80047cc <HAL_NVIC_EnableIRQ+0x18>)
 80047c0:	0940      	lsrs	r0, r0, #5
 80047c2:	408b      	lsls	r3, r1
 80047c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000e100 	.word	0xe000e100

080047d0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80047d0:	2800      	cmp	r0, #0
 80047d2:	db0d      	blt.n	80047f0 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047d4:	2201      	movs	r2, #1
 80047d6:	4907      	ldr	r1, [pc, #28]	; (80047f4 <HAL_NVIC_DisableIRQ+0x24>)
 80047d8:	0943      	lsrs	r3, r0, #5
 80047da:	f000 001f 	and.w	r0, r0, #31
 80047de:	3320      	adds	r3, #32
 80047e0:	fa02 f000 	lsl.w	r0, r2, r0
 80047e4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80047e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80047ec:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	e000e100 	.word	0xe000e100

080047f8 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80047f8:	2804      	cmp	r0, #4
 80047fa:	d813      	bhi.n	8004824 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 80047fc:	e8df f000 	tbb	[pc, r0]
 8004800:	12031a2a 	.word	0x12031a2a
 8004804:	13          	.byte	0x13
 8004805:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004806:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 800480a:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800480c:	4a18      	ldr	r2, [pc, #96]	; (8004870 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800480e:	f023 0304 	bic.w	r3, r3, #4
 8004812:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8004814:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8004818:	f023 030c 	bic.w	r3, r3, #12
 800481c:	f043 0308 	orr.w	r3, r3, #8
 8004820:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8004824:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004826:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 800482a:	6913      	ldr	r3, [r2, #16]
 800482c:	f043 0304 	orr.w	r3, r3, #4
 8004830:	6113      	str	r3, [r2, #16]
      break;
 8004832:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004834:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8004838:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800483a:	4a0d      	ldr	r2, [pc, #52]	; (8004870 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8004842:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8004846:	f023 030c 	bic.w	r3, r3, #12
 800484a:	f043 0304 	orr.w	r3, r3, #4
 800484e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8004852:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004854:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8004858:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800485a:	4a05      	ldr	r2, [pc, #20]	; (8004870 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800485c:	f023 0304 	bic.w	r3, r3, #4
 8004860:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8004862:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8004866:	f023 030c 	bic.w	r3, r3, #12
 800486a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 800486e:	4770      	bx	lr
 8004870:	44020c00 	.word	0x44020c00

08004874 <HAL_Delay>:
#include "main.h"

void HAL_Delay(uint32_t Delay)
{
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8004878:	f7ff ff46 	bl	8004708 <HAL_GetTick>
  uint32_t wait = Delay - 1;//减去多出的1ms时间
 800487c:	1e75      	subs	r5, r6, #1
  uint32_t tickstart = HAL_GetTick();
 800487e:	4604      	mov	r4, r0

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004880:	b116      	cbz	r6, 8004888 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004882:	4b04      	ldr	r3, [pc, #16]	; (8004894 <HAL_Delay+0x20>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	441d      	add	r5, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004888:	f7ff ff3e 	bl	8004708 <HAL_GetTick>
 800488c:	1b00      	subs	r0, r0, r4
 800488e:	42a8      	cmp	r0, r5
 8004890:	d3fa      	bcc.n	8004888 <HAL_Delay+0x14>
  {
  }
}
 8004892:	bd70      	pop	{r4, r5, r6, pc}
 8004894:	200001ac 	.word	0x200001ac

08004898 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	4604      	mov	r4, r0
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800489c:	f7ff ff34 	bl	8004708 <HAL_GetTick>

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80048a0:	2c00      	cmp	r4, #0
 80048a2:	f000 8148 	beq.w	8004b36 <HAL_DMA_Init+0x29e>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80048a6:	4605      	mov	r5, r0
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048a8:	2000      	movs	r0, #0

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 80048aa:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80048ae:	6823      	ldr	r3, [r4, #0]
  if (hdma->State == HAL_DMA_STATE_RESET)
 80048b0:	f001 02ff 	and.w	r2, r1, #255	; 0xff
  __HAL_UNLOCK(hdma);
 80048b4:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  if (hdma->State == HAL_DMA_STATE_RESET)
 80048b8:	2900      	cmp	r1, #0
 80048ba:	f000 80d5 	beq.w	8004a68 <HAL_DMA_Init+0x1d0>
    hdma->XferAbortCallback    = NULL;
    hdma->XferSuspendCallback  = NULL;
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048be:	2202      	movs	r2, #2
 80048c0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 80048c4:	695a      	ldr	r2, [r3, #20]
 80048c6:	f042 0206 	orr.w	r2, r2, #6
 80048ca:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80048cc:	e006      	b.n	80048dc <HAL_DMA_Init+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80048ce:	f7ff ff1b 	bl	8004708 <HAL_GetTick>
 80048d2:	1b43      	subs	r3, r0, r5
 80048d4:	2b05      	cmp	r3, #5
 80048d6:	f200 8124 	bhi.w	8004b22 <HAL_DMA_Init+0x28a>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80048da:	6823      	ldr	r3, [r4, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	07d2      	lsls	r2, r2, #31
 80048e0:	d4f5      	bmi.n	80048ce <HAL_DMA_Init+0x36>

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80048e2:	6959      	ldr	r1, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80048e4:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80048e6:	f421 0143 	bic.w	r1, r1, #12779520	; 0xc30000
 80048ea:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
 80048ee:	4301      	orrs	r1, r0
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80048f0:	6920      	ldr	r0, [r4, #16]
 80048f2:	432a      	orrs	r2, r5
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80048f4:	6159      	str	r1, [r3, #20]
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 80048f6:	69a1      	ldr	r1, [r4, #24]
 80048f8:	4302      	orrs	r2, r0
 80048fa:	4311      	orrs	r1, r2

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80048fc:	4a8f      	ldr	r2, [pc, #572]	; (8004b3c <HAL_DMA_Init+0x2a4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	f000 80b8 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 8004904:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004908:	4293      	cmp	r3, r2
 800490a:	f000 80b3 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 800490e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004912:	3280      	adds	r2, #128	; 0x80
 8004914:	4293      	cmp	r3, r2
 8004916:	f000 80ad 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 800491a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800491e:	4293      	cmp	r3, r2
 8004920:	f000 80a8 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 8004924:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004928:	3280      	adds	r2, #128	; 0x80
 800492a:	4293      	cmp	r3, r2
 800492c:	f000 80a2 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 8004930:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004934:	4293      	cmp	r3, r2
 8004936:	f000 809d 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 800493a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800493e:	3280      	adds	r2, #128	; 0x80
 8004940:	4293      	cmp	r3, r2
 8004942:	f000 8097 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 8004946:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800494a:	4293      	cmp	r3, r2
 800494c:	f000 8092 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 8004950:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004954:	3280      	adds	r2, #128	; 0x80
 8004956:	4293      	cmp	r3, r2
 8004958:	f000 808c 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 800495c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004960:	4293      	cmp	r3, r2
 8004962:	f000 8087 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 8004966:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800496a:	3280      	adds	r2, #128	; 0x80
 800496c:	4293      	cmp	r3, r2
 800496e:	f000 8081 	beq.w	8004a74 <HAL_DMA_Init+0x1dc>
 8004972:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004976:	4293      	cmp	r3, r2
 8004978:	d07c      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 800497a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800497e:	3280      	adds	r2, #128	; 0x80
 8004980:	4293      	cmp	r3, r2
 8004982:	d077      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 8004984:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004988:	4293      	cmp	r3, r2
 800498a:	d073      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 800498c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004990:	3280      	adds	r2, #128	; 0x80
 8004992:	4293      	cmp	r3, r2
 8004994:	d06e      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 8004996:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800499a:	4293      	cmp	r3, r2
 800499c:	d06a      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 800499e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80049a2:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d064      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049aa:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d060      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049b2:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80049b6:	3280      	adds	r2, #128	; 0x80
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d05b      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049bc:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d057      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049c4:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80049c8:	3280      	adds	r2, #128	; 0x80
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d052      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049ce:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d04e      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049d6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80049da:	3280      	adds	r2, #128	; 0x80
 80049dc:	4293      	cmp	r3, r2
 80049de:	d049      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049e0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d045      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049e8:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80049ec:	3280      	adds	r2, #128	; 0x80
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d040      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049f2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d03c      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 80049fa:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80049fe:	3280      	adds	r2, #128	; 0x80
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d037      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 8004a04:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d033      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 8004a0c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004a10:	3280      	adds	r2, #128	; 0x80
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d02e      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 8004a16:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d02a      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 8004a1e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004a22:	3280      	adds	r2, #128	; 0x80
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d025      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
 8004a28:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d021      	beq.n	8004a74 <HAL_DMA_Init+0x1dc>
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004a30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004a32:	68a0      	ldr	r0, [r4, #8]
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004a34:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004a3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a3e:	7921      	ldrb	r1, [r4, #4]
 8004a40:	4302      	orrs	r2, r0
 8004a42:	4311      	orrs	r1, r2

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a44:	68e2      	ldr	r2, [r4, #12]
 8004a46:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004a4a:	f000 8111 	beq.w	8004c70 <HAL_DMA_Init+0x3d8>
    {
      tmpreg |= DMA_CTR2_DREQ;
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004a4e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004a52:	d06d      	beq.n	8004b30 <HAL_DMA_Init+0x298>
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004a54:	2000      	movs	r0, #0
  tmpreg |= hdma->Init.Mode;
 8004a56:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5a:	4e39      	ldr	r6, [pc, #228]	; (8004b40 <HAL_DMA_Init+0x2a8>)
 8004a5c:	4329      	orrs	r1, r5
 8004a5e:	4032      	ands	r2, r6
 8004a60:	430a      	orrs	r2, r1
 8004a62:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004a64:	6498      	str	r0, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004a66:	e054      	b.n	8004b12 <HAL_DMA_Init+0x27a>
    hdma->XferHalfCpltCallback = NULL;
 8004a68:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
    hdma->XferAbortCallback    = NULL;
 8004a6c:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
    hdma->XferSuspendCallback  = NULL;
 8004a70:	6722      	str	r2, [r4, #112]	; 0x70
 8004a72:	e724      	b.n	80048be <HAL_DMA_Init+0x26>
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004a74:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004a78:	3a01      	subs	r2, #1
 8004a7a:	0512      	lsls	r2, r2, #20
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004a7c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004a7e:	3801      	subs	r0, #1
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004a80:	f002 727c 	and.w	r2, r2, #66060288	; 0x3f00000
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004a84:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8004a86:	430a      	orrs	r2, r1
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004a88:	0101      	lsls	r1, r0, #4
 8004a8a:	f401 717c 	and.w	r1, r1, #1008	; 0x3f0
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004a8e:	432a      	orrs	r2, r5
 8004a90:	430a      	orrs	r2, r1
 8004a92:	f006 2080 	and.w	r0, r6, #2147516416	; 0x80008000
 8004a96:	4302      	orrs	r2, r0
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004a98:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004a9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004a9e:	7920      	ldrb	r0, [r4, #4]
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	ea42 0100 	orr.w	r1, r2, r0
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004aa6:	68e2      	ldr	r2, [r4, #12]
 8004aa8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004aac:	d04c      	beq.n	8004b48 <HAL_DMA_Init+0x2b0>
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004aae:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004ab2:	d03d      	beq.n	8004b30 <HAL_DMA_Init+0x298>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ab6:	4822      	ldr	r0, [pc, #136]	; (8004b40 <HAL_DMA_Init+0x2a8>)
  tmpreg |= hdma->Init.Mode;
 8004ab8:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004aba:	4002      	ands	r2, r0
 8004abc:	432a      	orrs	r2, r5
 8004abe:	430a      	orrs	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004ac0:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004ac2:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004ac4:	4a1f      	ldr	r2, [pc, #124]	; (8004b44 <HAL_DMA_Init+0x2ac>)
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004ac6:	6499      	str	r1, [r3, #72]	; 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d01f      	beq.n	8004b0c <HAL_DMA_Init+0x274>
 8004acc:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d01b      	beq.n	8004b0c <HAL_DMA_Init+0x274>
 8004ad4:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004ad8:	3280      	adds	r2, #128	; 0x80
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d016      	beq.n	8004b0c <HAL_DMA_Init+0x274>
 8004ade:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d012      	beq.n	8004b0c <HAL_DMA_Init+0x274>
 8004ae6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004aea:	f502 6278 	add.w	r2, r2, #3968	; 0xf80
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d00c      	beq.n	8004b0c <HAL_DMA_Init+0x274>
 8004af2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d008      	beq.n	8004b0c <HAL_DMA_Init+0x274>
 8004afa:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004afe:	3280      	adds	r2, #128	; 0x80
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d003      	beq.n	8004b0c <HAL_DMA_Init+0x274>
 8004b04:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d102      	bne.n	8004b12 <HAL_DMA_Init+0x27a>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004b10:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004b12:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004b14:	2201      	movs	r2, #1
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004b16:	67d8      	str	r0, [r3, #124]	; 0x7c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b18:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->State = HAL_DMA_STATE_READY;
 8004b1a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
  hdma->Mode = hdma->Init.Mode;
 8004b1e:	6525      	str	r5, [r4, #80]	; 0x50
}
 8004b20:	bd70      	pop	{r4, r5, r6, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b22:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8004b24:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b26:	65a2      	str	r2, [r4, #88]	; 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 8004b28:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 8004b2c:	2001      	movs	r0, #1
}
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg |= DMA_CTR2_SWREQ;
 8004b30:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004b34:	e7be      	b.n	8004ab4 <HAL_DMA_Init+0x21c>
    return HAL_ERROR;
 8004b36:	2001      	movs	r0, #1
}
 8004b38:	bd70      	pop	{r4, r5, r6, pc}
 8004b3a:	bf00      	nop
 8004b3c:	40020050 	.word	0x40020050
 8004b40:	3cc02100 	.word	0x3cc02100
 8004b44:	40020350 	.word	0x40020350
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004b48:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <HAL_DMA_Init+0x3f4>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	f000 809a 	beq.w	8004c84 <HAL_DMA_Init+0x3ec>
 8004b50:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b54:	4293      	cmp	r3, r2
 8004b56:	f000 8095 	beq.w	8004c84 <HAL_DMA_Init+0x3ec>
 8004b5a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004b5e:	3280      	adds	r2, #128	; 0x80
 8004b60:	4293      	cmp	r3, r2
 8004b62:	f000 808f 	beq.w	8004c84 <HAL_DMA_Init+0x3ec>
 8004b66:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	f000 808a 	beq.w	8004c84 <HAL_DMA_Init+0x3ec>
 8004b70:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004b74:	3280      	adds	r2, #128	; 0x80
 8004b76:	4293      	cmp	r3, r2
 8004b78:	f000 8084 	beq.w	8004c84 <HAL_DMA_Init+0x3ec>
 8004b7c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d07f      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004b84:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004b88:	3280      	adds	r2, #128	; 0x80
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d07a      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004b8e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d076      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004b96:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004b9a:	3280      	adds	r2, #128	; 0x80
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d071      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004ba0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d06d      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004ba8:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004bac:	3280      	adds	r2, #128	; 0x80
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d068      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bb2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d064      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bba:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004bbe:	3280      	adds	r2, #128	; 0x80
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d05f      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bc4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d05b      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bcc:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004bd0:	3280      	adds	r2, #128	; 0x80
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d056      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bd6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d052      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bde:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004be2:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d04c      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bea:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d048      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bf2:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004bf6:	3280      	adds	r2, #128	; 0x80
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d043      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004bfc:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d03f      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c04:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c08:	3280      	adds	r2, #128	; 0x80
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d03a      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c0e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d036      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c16:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c1a:	3280      	adds	r2, #128	; 0x80
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d031      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c20:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d02d      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c28:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c2c:	3280      	adds	r2, #128	; 0x80
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d028      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c32:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d024      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c3a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c3e:	3280      	adds	r2, #128	; 0x80
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d01f      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c44:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d01b      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c4c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c50:	3280      	adds	r2, #128	; 0x80
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d016      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c56:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d012      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c5e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c62:	3280      	adds	r2, #128	; 0x80
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00d      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
 8004c68:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d009      	beq.n	8004c84 <HAL_DMA_Init+0x3ec>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c72:	4807      	ldr	r0, [pc, #28]	; (8004c90 <HAL_DMA_Init+0x3f8>)
  tmpreg |= hdma->Init.Mode;
 8004c74:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004c76:	4002      	ands	r2, r0
 8004c78:	432a      	orrs	r2, r5
 8004c7a:	430a      	orrs	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004c7c:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004c80:	6499      	str	r1, [r3, #72]	; 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004c82:	e746      	b.n	8004b12 <HAL_DMA_Init+0x27a>
      tmpreg |= DMA_CTR2_DREQ;
 8004c84:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004c88:	e714      	b.n	8004ab4 <HAL_DMA_Init+0x21c>
 8004c8a:	bf00      	nop
 8004c8c:	40020050 	.word	0x40020050
 8004c90:	3cc02100 	.word	0x3cc02100

08004c94 <HAL_DMA_DeInit>:
{
 8004c94:	b570      	push	{r4, r5, r6, lr}
 8004c96:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004c98:	f7ff fd36 	bl	8004708 <HAL_GetTick>
  if (hdma == NULL)
 8004c9c:	2c00      	cmp	r4, #0
 8004c9e:	d06b      	beq.n	8004d78 <HAL_DMA_DeInit+0xe4>
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004ca0:	6826      	ldr	r6, [r4, #0]
 8004ca2:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8004ca4:	6973      	ldr	r3, [r6, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004ca6:	4632      	mov	r2, r6
  __HAL_DMA_DISABLE(hdma);
 8004ca8:	f043 0306 	orr.w	r3, r3, #6
 8004cac:	6173      	str	r3, [r6, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004cae:	e005      	b.n	8004cbc <HAL_DMA_DeInit+0x28>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004cb0:	f7ff fd2a 	bl	8004708 <HAL_GetTick>
 8004cb4:	1b43      	subs	r3, r0, r5
 8004cb6:	2b05      	cmp	r3, #5
 8004cb8:	d857      	bhi.n	8004d6a <HAL_DMA_DeInit+0xd6>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	6953      	ldr	r3, [r2, #20]
 8004cbe:	f013 0301 	ands.w	r3, r3, #1
 8004cc2:	d1f5      	bne.n	8004cb0 <HAL_DMA_DeInit+0x1c>
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004cc4:	492d      	ldr	r1, [pc, #180]	; (8004d7c <HAL_DMA_DeInit+0xe8>)
  hdma->Instance->CLBAR = 0U;
 8004cc6:	6013      	str	r3, [r2, #0]
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004cc8:	428a      	cmp	r2, r1
  hdma->Instance->CCR   = 0U;
 8004cca:	6153      	str	r3, [r2, #20]
  hdma->Instance->CTR1  = 0U;
 8004ccc:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->Instance->CTR2  = 0U;
 8004cce:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->Instance->CBR1  = 0U;
 8004cd0:	6493      	str	r3, [r2, #72]	; 0x48
  hdma->Instance->CSAR  = 0U;
 8004cd2:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdma->Instance->CDAR  = 0U;
 8004cd4:	6513      	str	r3, [r2, #80]	; 0x50
  hdma->Instance->CLLR  = 0U;
 8004cd6:	67d3      	str	r3, [r2, #124]	; 0x7c
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004cd8:	d01e      	beq.n	8004d18 <HAL_DMA_DeInit+0x84>
 8004cda:	4b29      	ldr	r3, [pc, #164]	; (8004d80 <HAL_DMA_DeInit+0xec>)
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d01b      	beq.n	8004d18 <HAL_DMA_DeInit+0x84>
 8004ce0:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004ce4:	3380      	adds	r3, #128	; 0x80
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d016      	beq.n	8004d18 <HAL_DMA_DeInit+0x84>
 8004cea:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d012      	beq.n	8004d18 <HAL_DMA_DeInit+0x84>
 8004cf2:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004cf6:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d00c      	beq.n	8004d18 <HAL_DMA_DeInit+0x84>
 8004cfe:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d008      	beq.n	8004d18 <HAL_DMA_DeInit+0x84>
 8004d06:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004d0a:	3380      	adds	r3, #128	; 0x80
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d003      	beq.n	8004d18 <HAL_DMA_DeInit+0x84>
 8004d10:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d102      	bne.n	8004d1e <HAL_DMA_DeInit+0x8a>
    hdma->Instance->CTR3 = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	6553      	str	r3, [r2, #84]	; 0x54
    hdma->Instance->CBR2 = 0U;
 8004d1c:	6593      	str	r3, [r2, #88]	; 0x58
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004d1e:	2001      	movs	r0, #1
 8004d20:	f3c2 030b 	ubfx	r3, r2, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004d24:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004d28:	3b50      	subs	r3, #80	; 0x50
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004d2a:	f026 060f 	bic.w	r6, r6, #15
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004d2e:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8004d32:	6871      	ldr	r1, [r6, #4]
 8004d34:	fa00 f303 	lsl.w	r3, r0, r3
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004d38:	f44f 40fe 	mov.w	r0, #32512	; 0x7f00
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004d3c:	ea21 0103 	bic.w	r1, r1, r3
  hdma->XferCpltCallback     = NULL;
 8004d40:	2300      	movs	r3, #0
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004d42:	6071      	str	r1, [r6, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004d44:	60d0      	str	r0, [r2, #12]
  if (hdma->Parent != NULL)
 8004d46:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  hdma->XferHalfCpltCallback = NULL;
 8004d48:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  hdma->XferAbortCallback    = NULL;
 8004d4c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  hdma->LinkedListQueue = NULL;
 8004d50:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hdma->Parent != NULL)
 8004d54:	b102      	cbz	r2, 8004d58 <HAL_DMA_DeInit+0xc4>
    hdma->Parent = NULL;
 8004d56:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->Mode = DMA_NORMAL;
 8004d58:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d5a:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hdma);
 8004d5c:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  hdma->State = HAL_DMA_STATE_RESET;
 8004d60:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8004d64:	4618      	mov	r0, r3
  hdma->Mode = DMA_NORMAL;
 8004d66:	6523      	str	r3, [r4, #80]	; 0x50
}
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d6a:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8004d6c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d6e:	65a2      	str	r2, [r4, #88]	; 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 8004d70:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 8004d74:	2001      	movs	r0, #1
}
 8004d76:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004d78:	2001      	movs	r0, #1
}
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
 8004d7c:	40020350 	.word	0x40020350
 8004d80:	50020350 	.word	0x50020350

08004d84 <HAL_DMA_Start_IT>:
  if (hdma == NULL)
 8004d84:	2800      	cmp	r0, #0
 8004d86:	d043      	beq.n	8004e10 <HAL_DMA_Start_IT+0x8c>
{
 8004d88:	b530      	push	{r4, r5, lr}
  if (hdma->Mode != DMA_NORMAL)
 8004d8a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004d8c:	4684      	mov	ip, r0
 8004d8e:	2c00      	cmp	r4, #0
 8004d90:	d134      	bne.n	8004dfc <HAL_DMA_Start_IT+0x78>
  __HAL_LOCK(hdma);
 8004d92:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8004d96:	2801      	cmp	r0, #1
 8004d98:	d038      	beq.n	8004e0c <HAL_DMA_Start_IT+0x88>
 8004d9a:	2001      	movs	r0, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8004d9c:	f89c e054 	ldrb.w	lr, [ip, #84]	; 0x54
  __HAL_LOCK(hdma);
 8004da0:	f88c 004c 	strb.w	r0, [ip, #76]	; 0x4c
  if (hdma->State == HAL_DMA_STATE_READY)
 8004da4:	4586      	cmp	lr, r0
 8004da6:	d12b      	bne.n	8004e00 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004da8:	2002      	movs	r0, #2
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004daa:	f44f 45fe 	mov.w	r5, #32512	; 0x7f00
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dae:	f88c 0054 	strb.w	r0, [ip, #84]	; 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004db2:	f8cc 4058 	str.w	r4, [ip, #88]	; 0x58
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004db6:	f8dc 4000 	ldr.w	r4, [ip]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004dbe:	0c00      	lsrs	r0, r0, #16
 8004dc0:	0400      	lsls	r0, r0, #16
 8004dc2:	4303      	orrs	r3, r0
 8004dc4:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hdma->XferHalfCpltCallback != NULL)
 8004dc6:	f8dc 0064 	ldr.w	r0, [ip, #100]	; 0x64
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004dca:	60e5      	str	r5, [r4, #12]
  hdma->Instance->CSAR = SrcAddress;
 8004dcc:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdma->Instance->CDAR = DstAddress;
 8004dce:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004dd0:	6963      	ldr	r3, [r4, #20]
 8004dd2:	f443 43ba 	orr.w	r3, r3, #23808	; 0x5d00
 8004dd6:	6163      	str	r3, [r4, #20]
    if (hdma->XferHalfCpltCallback != NULL)
 8004dd8:	b118      	cbz	r0, 8004de2 <HAL_DMA_Start_IT+0x5e>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004dda:	6963      	ldr	r3, [r4, #20]
 8004ddc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004de0:	6163      	str	r3, [r4, #20]
    if (hdma->XferSuspendCallback != NULL)
 8004de2:	f8dc 3070 	ldr.w	r3, [ip, #112]	; 0x70
 8004de6:	b11b      	cbz	r3, 8004df0 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004de8:	6963      	ldr	r3, [r4, #20]
 8004dea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004dee:	6163      	str	r3, [r4, #20]
    __HAL_DMA_ENABLE(hdma);
 8004df0:	6963      	ldr	r3, [r4, #20]
  return HAL_OK;
 8004df2:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	6163      	str	r3, [r4, #20]
}
 8004dfa:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004dfc:	2001      	movs	r0, #1
}
 8004dfe:	bd30      	pop	{r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e00:	2340      	movs	r3, #64	; 0x40
    __HAL_UNLOCK(hdma);
 8004e02:	f88c 404c 	strb.w	r4, [ip, #76]	; 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004e06:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
}
 8004e0a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdma);
 8004e0c:	2002      	movs	r0, #2
}
 8004e0e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8004e10:	2001      	movs	r0, #1
}
 8004e12:	4770      	bx	lr

08004e14 <HAL_DMA_Abort>:
{
 8004e14:	b538      	push	{r3, r4, r5, lr}
 8004e16:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8004e18:	f7ff fc76 	bl	8004708 <HAL_GetTick>
  if (hdma == NULL)
 8004e1c:	2c00      	cmp	r4, #0
 8004e1e:	d048      	beq.n	8004eb2 <HAL_DMA_Abort+0x9e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004e20:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d12b      	bne.n	8004e80 <HAL_DMA_Abort+0x6c>
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004e28:	2105      	movs	r1, #5
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	f042 0204 	orr.w	r2, r2, #4
 8004e34:	615a      	str	r2, [r3, #20]
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004e36:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004e3a:	e005      	b.n	8004e48 <HAL_DMA_Abort+0x34>
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004e3c:	f7ff fc64 	bl	8004708 <HAL_GetTick>
 8004e40:	1b43      	subs	r3, r0, r5
 8004e42:	2b05      	cmp	r3, #5
 8004e44:	d823      	bhi.n	8004e8e <HAL_DMA_Abort+0x7a>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	691a      	ldr	r2, [r3, #16]
 8004e4a:	0491      	lsls	r1, r2, #18
 8004e4c:	d5f6      	bpl.n	8004e3c <HAL_DMA_Abort+0x28>
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e4e:	2504      	movs	r5, #4
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004e50:	f44f 40fe 	mov.w	r0, #32512	; 0x7f00
    hdma->State = HAL_DMA_STATE_READY;
 8004e54:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004e56:	695a      	ldr	r2, [r3, #20]
 8004e58:	f042 0202 	orr.w	r2, r2, #2
 8004e5c:	615a      	str	r2, [r3, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e5e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e60:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e64:	0612      	lsls	r2, r2, #24
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004e66:	60d8      	str	r0, [r3, #12]
    hdma->State = HAL_DMA_STATE_READY;
 8004e68:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e6c:	d503      	bpl.n	8004e76 <HAL_DMA_Abort+0x62>
      hdma->Instance->CBR1 = 0U;
 8004e6e:	2200      	movs	r2, #0
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004e70:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004e72:	7301      	strb	r1, [r0, #12]
      hdma->Instance->CBR1 = 0U;
 8004e74:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_UNLOCK(hdma);
 8004e76:	2300      	movs	r3, #0
 8004e78:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 8004e7c:	4618      	mov	r0, r3
}
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hdma);
 8004e80:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e82:	2220      	movs	r2, #32
    __HAL_UNLOCK(hdma);
 8004e84:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return HAL_ERROR;
 8004e88:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e8a:	65a2      	str	r2, [r4, #88]	; 0x58
}
 8004e8c:	bd38      	pop	{r3, r4, r5, pc}
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e8e:	2103      	movs	r1, #3
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004e90:	6da3      	ldr	r3, [r4, #88]	; 0x58
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e92:	6d22      	ldr	r2, [r4, #80]	; 0x50
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004e94:	f043 0310 	orr.w	r3, r3, #16
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e98:	0610      	lsls	r0, r2, #24
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004e9a:	65a3      	str	r3, [r4, #88]	; 0x58
        hdma->State = HAL_DMA_STATE_ERROR;
 8004e9c:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ea0:	d502      	bpl.n	8004ea8 <HAL_DMA_Abort+0x94>
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004ea6:	731a      	strb	r2, [r3, #12]
        __HAL_UNLOCK(hdma);
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
        return HAL_ERROR;
 8004eae:	2001      	movs	r0, #1
}
 8004eb0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004eb2:	2001      	movs	r0, #1
}
 8004eb4:	bd38      	pop	{r3, r4, r5, pc}
 8004eb6:	bf00      	nop

08004eb8 <HAL_DMA_Abort_IT>:
  if (hdma == NULL)
 8004eb8:	4603      	mov	r3, r0
 8004eba:	b190      	cbz	r0, 8004ee2 <HAL_DMA_Abort_IT+0x2a>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004ebc:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8004ec0:	2a02      	cmp	r2, #2
 8004ec2:	d003      	beq.n	8004ecc <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ec4:	2220      	movs	r2, #32
    return HAL_ERROR;
 8004ec6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ec8:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 8004eca:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ecc:	2104      	movs	r1, #4
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004ece:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004ed0:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004ed4:	6953      	ldr	r3, [r2, #20]
  return HAL_OK;
 8004ed6:	2000      	movs	r0, #0
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8004ee0:	4770      	bx	lr
    return HAL_ERROR;
 8004ee2:	2001      	movs	r0, #1
}
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop

08004ee8 <HAL_DMA_IRQHandler>:
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004ee8:	2101      	movs	r1, #1
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004eea:	6803      	ldr	r3, [r0, #0]
{
 8004eec:	b510      	push	{r4, lr}
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004eee:	f3c3 020b 	ubfx	r2, r3, #0, #12
{
 8004ef2:	4604      	mov	r4, r0
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004ef4:	f423 607f 	bic.w	r0, r3, #4080	; 0xff0
 8004ef8:	f020 000f 	bic.w	r0, r0, #15
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004efc:	3a50      	subs	r2, #80	; 0x50
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004efe:	68c0      	ldr	r0, [r0, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004f00:	f3c2 12c4 	ubfx	r2, r2, #7, #5
 8004f04:	fa01 f202 	lsl.w	r2, r1, r2
  if (global_active_flag_ns == 0U)
 8004f08:	4202      	tst	r2, r0
 8004f0a:	f000 80a4 	beq.w	8005056 <HAL_DMA_IRQHandler+0x16e>
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 8004f0e:	691a      	ldr	r2, [r3, #16]
 8004f10:	0552      	lsls	r2, r2, #21
 8004f12:	d508      	bpl.n	8004f26 <HAL_DMA_IRQHandler+0x3e>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004f14:	695a      	ldr	r2, [r3, #20]
 8004f16:	0550      	lsls	r0, r2, #21
 8004f18:	d505      	bpl.n	8004f26 <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004f1a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004f1e:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004f20:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004f22:	430a      	orrs	r2, r1
 8004f24:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	0511      	lsls	r1, r2, #20
 8004f2a:	d509      	bpl.n	8004f40 <HAL_DMA_IRQHandler+0x58>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004f2c:	695a      	ldr	r2, [r3, #20]
 8004f2e:	0512      	lsls	r2, r2, #20
 8004f30:	d506      	bpl.n	8004f40 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004f32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f36:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004f38:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004f3a:	f042 0202 	orr.w	r2, r2, #2
 8004f3e:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8004f40:	691a      	ldr	r2, [r3, #16]
 8004f42:	04d0      	lsls	r0, r2, #19
 8004f44:	d509      	bpl.n	8004f5a <HAL_DMA_IRQHandler+0x72>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004f46:	695a      	ldr	r2, [r3, #20]
 8004f48:	04d1      	lsls	r1, r2, #19
 8004f4a:	d506      	bpl.n	8004f5a <HAL_DMA_IRQHandler+0x72>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004f4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004f50:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004f52:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004f54:	f042 0204 	orr.w	r2, r2, #4
 8004f58:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	0452      	lsls	r2, r2, #17
 8004f5e:	d509      	bpl.n	8004f74 <HAL_DMA_IRQHandler+0x8c>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	0450      	lsls	r0, r2, #17
 8004f64:	d506      	bpl.n	8004f74 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004f66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004f6a:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004f6c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004f6e:	f042 0208 	orr.w	r2, r2, #8
 8004f72:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8004f74:	691a      	ldr	r2, [r3, #16]
 8004f76:	0591      	lsls	r1, r2, #22
 8004f78:	d50a      	bpl.n	8004f90 <HAL_DMA_IRQHandler+0xa8>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004f7a:	695a      	ldr	r2, [r3, #20]
 8004f7c:	0592      	lsls	r2, r2, #22
 8004f7e:	d507      	bpl.n	8004f90 <HAL_DMA_IRQHandler+0xa8>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004f80:	f44f 7100 	mov.w	r1, #512	; 0x200
      if (hdma->XferHalfCpltCallback != NULL)
 8004f84:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004f86:	60d9      	str	r1, [r3, #12]
      if (hdma->XferHalfCpltCallback != NULL)
 8004f88:	b112      	cbz	r2, 8004f90 <HAL_DMA_IRQHandler+0xa8>
        hdma->XferHalfCpltCallback(hdma);
 8004f8a:	4620      	mov	r0, r4
 8004f8c:	4790      	blx	r2
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	0490      	lsls	r0, r2, #18
 8004f94:	d511      	bpl.n	8004fba <HAL_DMA_IRQHandler+0xd2>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004f96:	695a      	ldr	r2, [r3, #20]
 8004f98:	0491      	lsls	r1, r2, #18
 8004f9a:	d50e      	bpl.n	8004fba <HAL_DMA_IRQHandler+0xd2>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004f9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fa0:	60da      	str	r2, [r3, #12]
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004fa2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8004fa6:	2a04      	cmp	r2, #4
 8004fa8:	d03d      	beq.n	8005026 <HAL_DMA_IRQHandler+0x13e>
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004faa:	2105      	movs	r1, #5
        if (hdma->XferSuspendCallback != NULL)
 8004fac:	6f22      	ldr	r2, [r4, #112]	; 0x70
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004fae:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if (hdma->XferSuspendCallback != NULL)
 8004fb2:	b112      	cbz	r2, 8004fba <HAL_DMA_IRQHandler+0xd2>
          hdma->XferSuspendCallback(hdma);
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	4790      	blx	r2
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	05d0      	lsls	r0, r2, #23
 8004fbe:	d518      	bpl.n	8004ff2 <HAL_DMA_IRQHandler+0x10a>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	05d1      	lsls	r1, r2, #23
 8004fc4:	d515      	bpl.n	8004ff2 <HAL_DMA_IRQHandler+0x10a>
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004fc6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004fc8:	0612      	lsls	r2, r2, #24
 8004fca:	d545      	bpl.n	8005058 <HAL_DMA_IRQHandler+0x170>
        if (hdma->Instance->CLLR == 0U)
 8004fcc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004fce:	b932      	cbnz	r2, 8004fde <HAL_DMA_IRQHandler+0xf6>
          if (hdma->Instance->CBR1 == 0U)
 8004fd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fd2:	b922      	cbnz	r2, 8004fde <HAL_DMA_IRQHandler+0xf6>
            hdma->State = HAL_DMA_STATE_READY;
 8004fd4:	2201      	movs	r2, #1
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004fd6:	6f61      	ldr	r1, [r4, #116]	; 0x74
            hdma->State = HAL_DMA_STATE_READY;
 8004fd8:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004fdc:	730a      	strb	r2, [r1, #12]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004fde:	f44f 7040 	mov.w	r0, #768	; 0x300
      __HAL_UNLOCK(hdma);
 8004fe2:	2100      	movs	r1, #0
      if (hdma->XferCpltCallback != NULL)
 8004fe4:	6e22      	ldr	r2, [r4, #96]	; 0x60
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004fe6:	60d8      	str	r0, [r3, #12]
      __HAL_UNLOCK(hdma);
 8004fe8:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
      if (hdma->XferCpltCallback != NULL)
 8004fec:	b10a      	cbz	r2, 8004ff2 <HAL_DMA_IRQHandler+0x10a>
        hdma->XferCpltCallback(hdma);
 8004fee:	4620      	mov	r0, r4
 8004ff0:	4790      	blx	r2
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d02e      	beq.n	8005056 <HAL_DMA_IRQHandler+0x16e>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004ff8:	6822      	ldr	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;
 8004ffa:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004ffc:	6953      	ldr	r3, [r2, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ffe:	6d20      	ldr	r0, [r4, #80]	; 0x50
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005000:	f043 0302 	orr.w	r3, r3, #2
 8005004:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hdma);
 8005006:	2200      	movs	r2, #0
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005008:	0603      	lsls	r3, r0, #24
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800500a:	bf48      	it	mi
 800500c:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
    hdma->State = HAL_DMA_STATE_READY;
 800500e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005012:	bf48      	it	mi
 8005014:	7319      	strbmi	r1, [r3, #12]
    if (hdma->XferErrorCallback != NULL)
 8005016:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    __HAL_UNLOCK(hdma);
 8005018:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if (hdma->XferErrorCallback != NULL)
 800501c:	b1db      	cbz	r3, 8005056 <HAL_DMA_IRQHandler+0x16e>
      hdma->XferErrorCallback(hdma);
 800501e:	4620      	mov	r0, r4
}
 8005020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hdma->XferErrorCallback(hdma);
 8005024:	4718      	bx	r3
        hdma->State = HAL_DMA_STATE_READY;
 8005026:	2101      	movs	r1, #1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005028:	695a      	ldr	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800502a:	6d20      	ldr	r0, [r4, #80]	; 0x50
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800502c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005030:	615a      	str	r2, [r3, #20]
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	f042 0202 	orr.w	r2, r2, #2
 8005038:	615a      	str	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800503a:	0602      	lsls	r2, r0, #24
        hdma->State = HAL_DMA_STATE_READY;
 800503c:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005040:	d503      	bpl.n	800504a <HAL_DMA_IRQHandler+0x162>
          hdma->Instance->CBR1 = 0U;
 8005042:	2200      	movs	r2, #0
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005044:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005046:	7301      	strb	r1, [r0, #12]
          hdma->Instance->CBR1 = 0U;
 8005048:	649a      	str	r2, [r3, #72]	; 0x48
        __HAL_UNLOCK(hdma);
 800504a:	2200      	movs	r2, #0
        if (hdma->XferAbortCallback != NULL)
 800504c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        __HAL_UNLOCK(hdma);
 800504e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
        if (hdma->XferAbortCallback != NULL)
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e3      	bne.n	800501e <HAL_DMA_IRQHandler+0x136>
}
 8005056:	bd10      	pop	{r4, pc}
        if (hdma->Instance->CBR1 == 0U)
 8005058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800505a:	2a00      	cmp	r2, #0
 800505c:	d1bf      	bne.n	8004fde <HAL_DMA_IRQHandler+0xf6>
          hdma->State = HAL_DMA_STATE_READY;
 800505e:	2201      	movs	r2, #1
 8005060:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8005064:	e7bb      	b.n	8004fde <HAL_DMA_IRQHandler+0xf6>
 8005066:	bf00      	nop

08005068 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8005068:	b1e8      	cbz	r0, 80050a6 <HAL_DMA_ConfigChannelAttributes+0x3e>
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 800506a:	f011 0310 	ands.w	r3, r1, #16
 800506e:	d018      	beq.n	80050a2 <HAL_DMA_ConfigChannelAttributes+0x3a>
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005070:	f04f 0c01 	mov.w	ip, #1
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005074:	6803      	ldr	r3, [r0, #0]
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005076:	f001 0111 	and.w	r1, r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800507a:	f3c3 020b 	ubfx	r2, r3, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 800507e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005082:	f023 030f 	bic.w	r3, r3, #15
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005086:	3a50      	subs	r2, #80	; 0x50
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8005088:	2911      	cmp	r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800508a:	f3c2 12c4 	ubfx	r2, r2, #7, #5
      p_dma_instance->PRIVCFGR |= channel_idx;
 800508e:	6859      	ldr	r1, [r3, #4]
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005090:	fa0c f202 	lsl.w	r2, ip, r2
      p_dma_instance->PRIVCFGR |= channel_idx;
 8005094:	bf0c      	ite	eq
 8005096:	430a      	orreq	r2, r1
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8005098:	ea21 0202 	bicne.w	r2, r1, r2
  return HAL_OK;
 800509c:	2000      	movs	r0, #0
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	4770      	bx	lr
  return HAL_OK;
 80050a2:	4618      	mov	r0, r3
}
 80050a4:	4770      	bx	lr
    return HAL_ERROR;
 80050a6:	2001      	movs	r0, #1
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop

080050ac <HAL_DMAEx_List_Start_IT>:
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80050ac:	b1f8      	cbz	r0, 80050ee <HAL_DMAEx_List_Start_IT+0x42>
 80050ae:	6f42      	ldr	r2, [r0, #116]	; 0x74
 80050b0:	4603      	mov	r3, r0
 80050b2:	b1e2      	cbz	r2, 80050ee <HAL_DMAEx_List_Start_IT+0x42>
  {
    return HAL_ERROR;
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 80050b4:	6d01      	ldr	r1, [r0, #80]	; 0x50
 80050b6:	b1d1      	cbz	r1, 80050ee <HAL_DMAEx_List_Start_IT+0x42>
{
 80050b8:	b410      	push	{r4}
  {
    return HAL_ERROR;
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 80050ba:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80050be:	6819      	ldr	r1, [r3, #0]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80050c0:	2801      	cmp	r0, #1
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 80050c2:	694c      	ldr	r4, [r1, #20]
  dma_state = hdma->State;
 80050c4:	fa5f fc80 	uxtb.w	ip, r0
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 80050c8:	d004      	beq.n	80050d4 <HAL_DMAEx_List_Start_IT+0x28>
 80050ca:	f1bc 0f02 	cmp.w	ip, #2
 80050ce:	d110      	bne.n	80050f2 <HAL_DMAEx_List_Start_IT+0x46>
 80050d0:	03e0      	lsls	r0, r4, #15
 80050d2:	d50e      	bpl.n	80050f2 <HAL_DMAEx_List_Start_IT+0x46>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 80050d4:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 80050d8:	2801      	cmp	r0, #1
 80050da:	b2c4      	uxtb	r4, r0
 80050dc:	d012      	beq.n	8005104 <HAL_DMAEx_List_Start_IT+0x58>
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 80050de:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80050e0:	694b      	ldr	r3, [r1, #20]
 80050e2:	f043 0301 	orr.w	r3, r3, #1
 80050e6:	614b      	str	r3, [r1, #20]
}
 80050e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80050ec:	4770      	bx	lr
    return HAL_ERROR;
 80050ee:	2001      	movs	r0, #1
}
 80050f0:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 80050f2:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80050f4:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(hdma);
 80050f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 80050fa:	2001      	movs	r0, #1
}
 80050fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005100:	6599      	str	r1, [r3, #88]	; 0x58
}
 8005102:	4770      	bx	lr
      __HAL_LOCK(hdma);
 8005104:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 8005108:	2801      	cmp	r0, #1
 800510a:	d02b      	beq.n	8005164 <HAL_DMAEx_List_Start_IT+0xb8>
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800510c:	2000      	movs	r0, #0
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800510e:	f04f 0c02 	mov.w	ip, #2
      __HAL_LOCK(hdma);
 8005112:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005116:	f883 c054 	strb.w	ip, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800511a:	f882 c00c 	strb.w	ip, [r2, #12]
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800511e:	6598      	str	r0, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005120:	6110      	str	r0, [r2, #16]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005122:	6948      	ldr	r0, [r1, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8005124:	6e5c      	ldr	r4, [r3, #100]	; 0x64
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005126:	f440 40ba 	orr.w	r0, r0, #23808	; 0x5d00
 800512a:	6148      	str	r0, [r1, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 800512c:	b11c      	cbz	r4, 8005136 <HAL_DMAEx_List_Start_IT+0x8a>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800512e:	6948      	ldr	r0, [r1, #20]
 8005130:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8005134:	6148      	str	r0, [r1, #20]
      if (hdma->XferSuspendCallback != NULL)
 8005136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005138:	b11b      	cbz	r3, 8005142 <HAL_DMAEx_List_Start_IT+0x96>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800513a:	694b      	ldr	r3, [r1, #20]
 800513c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005140:	614b      	str	r3, [r1, #20]
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8005142:	6813      	ldr	r3, [r2, #0]
  else
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005144:	4808      	ldr	r0, [pc, #32]	; (8005168 <HAL_DMAEx_List_Start_IT+0xbc>)
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005146:	6a1c      	ldr	r4, [r3, #32]
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005148:	4a08      	ldr	r2, [pc, #32]	; (800516c <HAL_DMAEx_List_Start_IT+0xc0>)
 800514a:	f014 0f02 	tst.w	r4, #2
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800514e:	f64f 74fc 	movw	r4, #65532	; 0xfffc
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005152:	bf08      	it	eq
 8005154:	4602      	moveq	r2, r0
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8005156:	0c18      	lsrs	r0, r3, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005158:	4023      	ands	r3, r4
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800515a:	0400      	lsls	r0, r0, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800515c:	4313      	orrs	r3, r2
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800515e:	6008      	str	r0, [r1, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005160:	67cb      	str	r3, [r1, #124]	; 0x7c
 8005162:	e7bc      	b.n	80050de <HAL_DMAEx_List_Start_IT+0x32>
      __HAL_LOCK(hdma);
 8005164:	2002      	movs	r0, #2
 8005166:	e7bf      	b.n	80050e8 <HAL_DMAEx_List_Start_IT+0x3c>
 8005168:	f8010000 	.word	0xf8010000
 800516c:	fe010000 	.word	0xfe010000

08005170 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005174:	680c      	ldr	r4, [r1, #0]
{
 8005176:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005178:	2c00      	cmp	r4, #0
 800517a:	f000 80c8 	beq.w	800530e <HAL_GPIO_Init+0x19e>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800517e:	4a65      	ldr	r2, [pc, #404]	; (8005314 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0U;
 8005180:	2300      	movs	r3, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005182:	ea02 2290 	and.w	r2, r2, r0, lsr #10
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8005186:	4e64      	ldr	r6, [pc, #400]	; (8005318 <HAL_GPIO_Init+0x1a8>)
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005188:	9201      	str	r2, [sp, #4]
 800518a:	e068      	b.n	800525e <HAL_GPIO_Init+0xee>
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800518c:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 800518e:	f8d0 b000 	ldr.w	fp, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005192:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005196:	fa07 f70c 	lsl.w	r7, r7, ip
 800519a:	ea2b 0b07 	bic.w	fp, fp, r7
 800519e:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80051a0:	f002 0903 	and.w	r9, r2, #3
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051a4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80051a8:	fa09 fa0c 	lsl.w	sl, r9, ip
 80051ac:	ea4a 0a0b 	orr.w	sl, sl, fp
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051b0:	f1be 0f01 	cmp.w	lr, #1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80051b4:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 80051b6:	f8c0 a000 	str.w	sl, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051ba:	f240 8088 	bls.w	80052ce <HAL_GPIO_Init+0x15e>
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80051be:	f1b9 0f03 	cmp.w	r9, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80051c2:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80051c4:	f000 809f 	beq.w	8005306 <HAL_GPIO_Init+0x196>
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80051c8:	fa05 f50c 	lsl.w	r5, r5, ip
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80051cc:	9f00      	ldr	r7, [sp, #0]
        tmp = GPIOx->PUPDR;
 80051ce:	f8d0 c00c 	ldr.w	ip, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80051d2:	ea0c 0707 	and.w	r7, ip, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80051d6:	433d      	orrs	r5, r7
        GPIOx->PUPDR = tmp;
 80051d8:	60c5      	str	r5, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80051da:	00d5      	lsls	r5, r2, #3
 80051dc:	d53b      	bpl.n	8005256 <HAL_GPIO_Init+0xe6>
        tmp = EXTI->EXTICR[position >> 2U];
 80051de:	f023 0703 	bic.w	r7, r3, #3
 80051e2:	f107 4988 	add.w	r9, r7, #1140850688	; 0x44000000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80051e6:	270f      	movs	r7, #15
 80051e8:	f003 0503 	and.w	r5, r3, #3
 80051ec:	00ed      	lsls	r5, r5, #3
 80051ee:	fa07 fe05 	lsl.w	lr, r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80051f2:	9f01      	ldr	r7, [sp, #4]
 80051f4:	f509 3908 	add.w	r9, r9, #139264	; 0x22000
 80051f8:	fa07 f505 	lsl.w	r5, r7, r5
        tmp &= ~((uint32_t)iocurrent);
 80051fc:	ea6f 0708 	mvn.w	r7, r8
        tmp = EXTI->EXTICR[position >> 2U];
 8005200:	f8d9 c060 	ldr.w	ip, [r9, #96]	; 0x60
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005204:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005208:	ea2c 0c0e 	bic.w	ip, ip, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800520c:	ea45 050c 	orr.w	r5, r5, ip
        EXTI->EXTICR[position >> 2U] = tmp;
 8005210:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
        tmp = EXTI->RTSR1;
 8005214:	6835      	ldr	r5, [r6, #0]
        tmp &= ~((uint32_t)iocurrent);
 8005216:	bf0c      	ite	eq
 8005218:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 800521a:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->RTSR1 = tmp;
 800521e:	6035      	str	r5, [r6, #0]

        tmp = EXTI->FTSR1;
 8005220:	6875      	ldr	r5, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005222:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8005226:	bf0c      	ite	eq
 8005228:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 800522a:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->FTSR1 = tmp;
 800522e:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005230:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005234:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8005238:	bf0c      	ite	eq
 800523a:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 800523c:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->EMR1 = tmp;
 8005240:	f8c6 5084 	str.w	r5, [r6, #132]	; 0x84

        tmp = EXTI->IMR1;
 8005244:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005248:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 800524a:	bf54      	ite	pl
 800524c:	403d      	andpl	r5, r7
        {
          tmp |= iocurrent;
 800524e:	ea48 0505 	orrmi.w	r5, r8, r5
        }
        EXTI->IMR1 = tmp;
 8005252:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
      }
    }

    position++;
 8005256:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005258:	fa34 f203 	lsrs.w	r2, r4, r3
 800525c:	d057      	beq.n	800530e <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800525e:	2201      	movs	r2, #1
 8005260:	fa02 f503 	lsl.w	r5, r2, r3
    if (iocurrent != 0U)
 8005264:	ea15 0804 	ands.w	r8, r5, r4
 8005268:	d0f5      	beq.n	8005256 <HAL_GPIO_Init+0xe6>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800526a:	684a      	ldr	r2, [r1, #4]
 800526c:	f022 0e10 	bic.w	lr, r2, #16
 8005270:	f1be 0f02 	cmp.w	lr, #2
 8005274:	d18a      	bne.n	800518c <HAL_GPIO_Init+0x1c>
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005276:	f04f 090f 	mov.w	r9, #15
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800527a:	690f      	ldr	r7, [r1, #16]
        tmp = GPIOx->AFR[position >> 3U];
 800527c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005280:	f003 0c07 	and.w	ip, r3, #7
 8005284:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8005288:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800528c:	f007 070f 	and.w	r7, r7, #15
 8005290:	fa07 f70c 	lsl.w	r7, r7, ip
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005294:	fa09 fc0c 	lsl.w	ip, r9, ip
        tmp = GPIOx->AFR[position >> 3U];
 8005298:	f8de 9020 	ldr.w	r9, [lr, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800529c:	ea29 0c0c 	bic.w	ip, r9, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80052a0:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = tmp;
 80052a4:	f8ce 7020 	str.w	r7, [lr, #32]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80052a8:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 80052aa:	f8d0 a000 	ldr.w	sl, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80052ae:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80052b2:	fa07 f70c 	lsl.w	r7, r7, ip
 80052b6:	ea2a 0a07 	bic.w	sl, sl, r7
 80052ba:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80052bc:	f002 0903 	and.w	r9, r2, #3
 80052c0:	fa09 fe0c 	lsl.w	lr, r9, ip
 80052c4:	ea4e 0e0a 	orr.w	lr, lr, sl
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80052c8:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 80052ca:	f8c0 e000 	str.w	lr, [r0]
        tmp = GPIOx->OSPEEDR;
 80052ce:	f8d0 e008 	ldr.w	lr, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80052d2:	9f00      	ldr	r7, [sp, #0]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80052d4:	f1b9 0f03 	cmp.w	r9, #3
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80052d8:	ea0e 0e07 	and.w	lr, lr, r7
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80052dc:	68cf      	ldr	r7, [r1, #12]
 80052de:	fa07 fa0c 	lsl.w	sl, r7, ip
 80052e2:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = tmp;
 80052e6:	f8c0 e008 	str.w	lr, [r0, #8]
        tmp = GPIOx->OTYPER;
 80052ea:	f8d0 e004 	ldr.w	lr, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052ee:	ea2e 0e05 	bic.w	lr, lr, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80052f2:	f3c2 1500 	ubfx	r5, r2, #4, #1
 80052f6:	fa05 f503 	lsl.w	r5, r5, r3
 80052fa:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = tmp;
 80052fe:	6045      	str	r5, [r0, #4]
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8005300:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8005302:	f47f af61 	bne.w	80051c8 <HAL_GPIO_Init+0x58>
 8005306:	2d01      	cmp	r5, #1
 8005308:	f47f af5e 	bne.w	80051c8 <HAL_GPIO_Init+0x58>
 800530c:	e765      	b.n	80051da <HAL_GPIO_Init+0x6a>
  }
}
 800530e:	b003      	add	sp, #12
 8005310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005314:	002f7f7f 	.word	0x002f7f7f
 8005318:	44022000 	.word	0x44022000

0800531c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800531c:	2900      	cmp	r1, #0
 800531e:	d064      	beq.n	80053ea <HAL_GPIO_DeInit+0xce>
{
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0U;
 8005324:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005326:	f04f 0b01 	mov.w	fp, #1
    if (iocurrent != 0U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800532a:	f04f 080f 	mov.w	r8, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 800532e:	4a2f      	ldr	r2, [pc, #188]	; (80053ec <HAL_GPIO_DeInit+0xd0>)
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005330:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80053f0 <HAL_GPIO_DeInit+0xd4>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8005334:	ea02 2a90 	and.w	sl, r2, r0, lsr #10

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
    }

    position++;
 8005338:	f023 0403 	bic.w	r4, r3, #3
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800533c:	f003 0203 	and.w	r2, r3, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005340:	fa0b f503 	lsl.w	r5, fp, r3
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005344:	00d2      	lsls	r2, r2, #3
 8005346:	f104 4488 	add.w	r4, r4, #1140850688	; 0x44000000
    if (iocurrent != 0U)
 800534a:	ea15 0e01 	ands.w	lr, r5, r1
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800534e:	fa08 f702 	lsl.w	r7, r8, r2
 8005352:	f504 3408 	add.w	r4, r4, #139264	; 0x22000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8005356:	fa0a f202 	lsl.w	r2, sl, r2
    if (iocurrent != 0U)
 800535a:	d040      	beq.n	80053de <HAL_GPIO_DeInit+0xc2>
      tmp = EXTI->EXTICR[position >> 2U];
 800535c:	6e26      	ldr	r6, [r4, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800535e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005362:	403e      	ands	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8005364:	42b2      	cmp	r2, r6
 8005366:	d11b      	bne.n	80053a0 <HAL_GPIO_DeInit+0x84>
        EXTI->IMR1 &= ~(iocurrent);
 8005368:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
 800536c:	ea22 020e 	bic.w	r2, r2, lr
 8005370:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8005374:	f8d9 2084 	ldr.w	r2, [r9, #132]	; 0x84
 8005378:	ea22 020e 	bic.w	r2, r2, lr
 800537c:	f8c9 2084 	str.w	r2, [r9, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8005380:	f8d9 2000 	ldr.w	r2, [r9]
 8005384:	ea22 020e 	bic.w	r2, r2, lr
 8005388:	f8c9 2000 	str.w	r2, [r9]
        EXTI->FTSR1 &= ~(iocurrent);
 800538c:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005390:	ea22 020e 	bic.w	r2, r2, lr
 8005394:	f8c9 2004 	str.w	r2, [r9, #4]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8005398:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800539a:	ea22 0707 	bic.w	r7, r2, r7
 800539e:	6627      	str	r7, [r4, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80053a0:	2203      	movs	r2, #3
 80053a2:	6806      	ldr	r6, [r0, #0]
 80053a4:	fa02 f40c 	lsl.w	r4, r2, ip
 80053a8:	4326      	orrs	r6, r4
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80053aa:	fa23 f202 	lsr.w	r2, r3, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80053ae:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80053b0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80053b4:	f003 0607 	and.w	r6, r3, #7
 80053b8:	6a17      	ldr	r7, [r2, #32]
 80053ba:	00b6      	lsls	r6, r6, #2
 80053bc:	fa08 f606 	lsl.w	r6, r8, r6
 80053c0:	ea27 0606 	bic.w	r6, r7, r6
 80053c4:	6216      	str	r6, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80053c6:	6882      	ldr	r2, [r0, #8]
 80053c8:	ea22 0204 	bic.w	r2, r2, r4
 80053cc:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80053ce:	6842      	ldr	r2, [r0, #4]
 80053d0:	ea22 0505 	bic.w	r5, r2, r5
 80053d4:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80053d6:	68c2      	ldr	r2, [r0, #12]
 80053d8:	ea22 0404 	bic.w	r4, r2, r4
 80053dc:	60c4      	str	r4, [r0, #12]
    position++;
 80053de:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 80053e0:	fa31 f203 	lsrs.w	r2, r1, r3
 80053e4:	d1a8      	bne.n	8005338 <HAL_GPIO_DeInit+0x1c>
  }
}
 80053e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ea:	4770      	bx	lr
 80053ec:	002f7f7f 	.word	0x002f7f7f
 80053f0:	44022000 	.word	0x44022000

080053f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053f4:	b10a      	cbz	r2, 80053fa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053f6:	6181      	str	r1, [r0, #24]
 80053f8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053fa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop

08005400 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005400:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005402:	ea01 0203 	and.w	r2, r1, r3
 8005406:	ea21 0103 	bic.w	r1, r1, r3
 800540a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800540e:	6181      	str	r1, [r0, #24]
}
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop

08005414 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005414:	4a03      	ldr	r2, [pc, #12]	; (8005424 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8005416:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005418:	6813      	ldr	r3, [r2, #0]
 800541a:	f043 0301 	orr.w	r3, r3, #1
 800541e:	6013      	str	r3, [r2, #0]
}
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	40030400 	.word	0x40030400

08005428 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
   HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005428:	2200      	movs	r2, #0
 800542a:	210f      	movs	r1, #15
 800542c:	f06f 0001 	mvn.w	r0, #1
 8005430:	f7ff b982 	b.w	8004738 <HAL_NVIC_SetPriority>

08005434 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	b082      	sub	sp, #8
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005438:	2800      	cmp	r0, #0
 800543a:	d067      	beq.n	800550c <HAL_PCD_Init+0xd8>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800543c:	f890 3295 	ldrb.w	r3, [r0, #661]	; 0x295
 8005440:	4604      	mov	r4, r0
 8005442:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005446:	2b00      	cmp	r3, #0
 8005448:	d05b      	beq.n	8005502 <HAL_PCD_Init+0xce>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800544a:	2303      	movs	r3, #3
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800544c:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_BUSY;
 800544e:	f884 3295 	strb.w	r3, [r4, #661]	; 0x295
  __HAL_PCD_DISABLE(hpcd);
 8005452:	f006 ffdf 	bl	800c414 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005456:	7c23      	ldrb	r3, [r4, #16]
 8005458:	1d25      	adds	r5, r4, #4
 800545a:	f88d 3000 	strb.w	r3, [sp]
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8005464:	f006 ffb6 	bl	800c3d4 <USB_CoreInit>
 8005468:	b130      	cbz	r0, 8005478 <HAL_PCD_Init+0x44>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800546a:	2501      	movs	r5, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800546c:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800546e:	4628      	mov	r0, r5
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005470:	f884 3295 	strb.w	r3, [r4, #661]	; 0x295
}
 8005474:	b002      	add	sp, #8
 8005476:	bd70      	pop	{r4, r5, r6, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005478:	4601      	mov	r1, r0
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	f006 ffd4 	bl	800c428 <USB_SetCurrentMode>
 8005480:	2800      	cmp	r0, #0
 8005482:	d1f2      	bne.n	800546a <HAL_PCD_Init+0x36>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005484:	7926      	ldrb	r6, [r4, #4]
 8005486:	b326      	cbz	r6, 80054d2 <HAL_PCD_Init+0x9e>
 8005488:	4623      	mov	r3, r4
 800548a:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800548c:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005490:	4601      	mov	r1, r0
    hpcd->IN_ep[i].num = i;
 8005492:	7510      	strb	r0, [r2, #20]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005494:	3001      	adds	r0, #1
 8005496:	fa5f fc80 	uxtb.w	ip, r0
 800549a:	4566      	cmp	r6, ip
    hpcd->IN_ep[i].xfer_buff = 0U;
 800549c:	e9c2 1109 	strd	r1, r1, [r2, #36]	; 0x24
    hpcd->IN_ep[i].is_in = 1U;
 80054a0:	f882 e015 	strb.w	lr, [r2, #21]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054a4:	75d1      	strb	r1, [r2, #23]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054a6:	62d1      	str	r1, [r2, #44]	; 0x2c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054a8:	f102 0228 	add.w	r2, r2, #40	; 0x28
 80054ac:	d8f1      	bhi.n	8005492 <HAL_PCD_Init+0x5e>
 80054ae:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 80054b0:	460a      	mov	r2, r1
    hpcd->OUT_ep[i].num = i;
 80054b2:	f883 1154 	strb.w	r1, [r3, #340]	; 0x154
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054b6:	3101      	adds	r1, #1
 80054b8:	b2c8      	uxtb	r0, r1
 80054ba:	4286      	cmp	r6, r0
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80054bc:	e9c3 2259 	strd	r2, r2, [r3, #356]	; 0x164
    hpcd->OUT_ep[i].is_in = 0U;
 80054c0:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054c4:	f883 2157 	strb.w	r2, [r3, #343]	; 0x157
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054c8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054cc:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80054d0:	d8ef      	bhi.n	80054b2 <HAL_PCD_Init+0x7e>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054d2:	7c23      	ldrb	r3, [r4, #16]
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	f88d 3000 	strb.w	r3, [sp]
 80054da:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80054de:	f006 ffb5 	bl	800c44c <USB_DevInit>
 80054e2:	4605      	mov	r5, r0
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d1c0      	bne.n	800546a <HAL_PCD_Init+0x36>
  hpcd->State = HAL_PCD_STATE_READY;
 80054e8:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 80054ea:	7b23      	ldrb	r3, [r4, #12]
  hpcd->USB_Address = 0U;
 80054ec:	7460      	strb	r0, [r4, #17]
  if (hpcd->Init.lpm_enable == 1U)
 80054ee:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 80054f0:	f884 2295 	strb.w	r2, [r4, #661]	; 0x295
  if (hpcd->Init.lpm_enable == 1U)
 80054f4:	d00e      	beq.n	8005514 <HAL_PCD_Init+0xe0>
  (void)USB_DevDisconnect(hpcd->Instance);
 80054f6:	6820      	ldr	r0, [r4, #0]
 80054f8:	f007 faec 	bl	800cad4 <USB_DevDisconnect>
}
 80054fc:	4628      	mov	r0, r5
 80054fe:	b002      	add	sp, #8
 8005500:	bd70      	pop	{r4, r5, r6, pc}
    hpcd->Lock = HAL_UNLOCKED;
 8005502:	f880 2294 	strb.w	r2, [r0, #660]	; 0x294
    HAL_PCD_MspInit(hpcd);
 8005506:	f7fc faab 	bl	8001a60 <HAL_PCD_MspInit>
 800550a:	e79e      	b.n	800544a <HAL_PCD_Init+0x16>
    return HAL_ERROR;
 800550c:	2501      	movs	r5, #1
}
 800550e:	4628      	mov	r0, r5
 8005510:	b002      	add	sp, #8
 8005512:	bd70      	pop	{r4, r5, r6, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005514:	4620      	mov	r0, r4
 8005516:	f000 ff75 	bl	8006404 <HAL_PCDEx_ActivateLPM>
 800551a:	e7ec      	b.n	80054f6 <HAL_PCD_Init+0xc2>

0800551c <HAL_PCD_Start>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800551c:	f890 3294 	ldrb.w	r3, [r0, #660]	; 0x294
 8005520:	2b01      	cmp	r3, #1
 8005522:	d00f      	beq.n	8005544 <HAL_PCD_Start+0x28>
{
 8005524:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8005526:	2301      	movs	r3, #1
 8005528:	4604      	mov	r4, r0
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800552a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800552c:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  __HAL_PCD_ENABLE(hpcd);
 8005530:	f006 ff68 	bl	800c404 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	f007 fac5 	bl	800cac4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800553a:	2300      	movs	r3, #0
 800553c:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294

  return HAL_OK;
 8005540:	4618      	mov	r0, r3
}
 8005542:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005544:	2002      	movs	r0, #2
}
 8005546:	4770      	bx	lr

08005548 <HAL_PCD_Stop>:
{
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005548:	f890 3294 	ldrb.w	r3, [r0, #660]	; 0x294
 800554c:	2b01      	cmp	r3, #1
 800554e:	d00f      	beq.n	8005570 <HAL_PCD_Stop+0x28>
{
 8005550:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8005552:	2301      	movs	r3, #1
 8005554:	4604      	mov	r4, r0
  __HAL_PCD_DISABLE(hpcd);
 8005556:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 8005558:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  __HAL_PCD_DISABLE(hpcd);
 800555c:	f006 ff5a 	bl	800c414 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	f007 fab7 	bl	800cad4 <USB_DevDisconnect>
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 8005566:	2300      	movs	r3, #0
 8005568:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294

  return HAL_OK;
 800556c:	4618      	mov	r0, r3
}
 800556e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8005570:	2002      	movs	r0, #2
}
 8005572:	4770      	bx	lr

08005574 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005578:	4604      	mov	r4, r0
 800557a:	b08b      	sub	sp, #44	; 0x2c
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800557c:	6800      	ldr	r0, [r0, #0]
 800557e:	f007 fab1 	bl	800cae4 <USB_ReadInterrupts>

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005582:	f410 4500 	ands.w	r5, r0, #32768	; 0x8000
 8005586:	d125      	bne.n	80055d4 <HAL_PCD_IRQHandler+0x60>
    (void)PCD_EP_ISR_Handler(hpcd);

    return;
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005588:	0543      	lsls	r3, r0, #21
 800558a:	f100 8324 	bmi.w	8005bd6 <HAL_PCD_IRQHandler+0x662>
    (void)HAL_PCD_SetAddress(hpcd, 0U);

    return;
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800558e:	0447      	lsls	r7, r0, #17
 8005590:	d417      	bmi.n	80055c2 <HAL_PCD_IRQHandler+0x4e>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);

    return;
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005592:	f410 5100 	ands.w	r1, r0, #8192	; 0x2000
 8005596:	f040 8339 	bne.w	8005c0c <HAL_PCD_IRQHandler+0x698>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);

    return;
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800559a:	04c6      	lsls	r6, r0, #19
 800559c:	d476      	bmi.n	800568c <HAL_PCD_IRQHandler+0x118>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);

    return;
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800559e:	0505      	lsls	r5, r0, #20
 80055a0:	f100 847e 	bmi.w	8005ea0 <HAL_PCD_IRQHandler+0x92c>

    return;
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80055a4:	0601      	lsls	r1, r0, #24
 80055a6:	f100 845b 	bmi.w	8005e60 <HAL_PCD_IRQHandler+0x8ec>
    }

    return;
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80055aa:	0582      	lsls	r2, r0, #22
 80055ac:	f100 84b8 	bmi.w	8005f20 <HAL_PCD_IRQHandler+0x9ac>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80055b0:	05c3      	lsls	r3, r0, #23
 80055b2:	d50c      	bpl.n	80055ce <HAL_PCD_IRQHandler+0x5a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80055b4:	f64f 61ff 	movw	r1, #65279	; 0xfeff
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80055bc:	400b      	ands	r3, r1
 80055be:	6453      	str	r3, [r2, #68]	; 0x44

    return;
 80055c0:	e005      	b.n	80055ce <HAL_PCD_IRQHandler+0x5a>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80055c2:	f64b 71ff 	movw	r1, #49151	; 0xbfff
 80055c6:	6822      	ldr	r2, [r4, #0]
 80055c8:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80055ca:	400b      	ands	r3, r1
 80055cc:	6453      	str	r3, [r2, #68]	; 0x44
  }
}
 80055ce:	b00b      	add	sp, #44	; 0x2c
 80055d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055d8:	041e      	lsls	r6, r3, #16
 80055da:	d5f8      	bpl.n	80055ce <HAL_PCD_IRQHandler+0x5a>
      if ((wEPVal & USB_EP_VTTX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80055dc:	f8df baf0 	ldr.w	fp, [pc, #2800]	; 80060d0 <HAL_PCD_IRQHandler+0xb5c>
 80055e0:	e00d      	b.n	80055fe <HAL_PCD_IRQHandler+0x8a>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80055e2:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055e6:	6803      	ldr	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80055e8:	f000 80e7 	beq.w	80057ba <HAL_PCD_IRQHandler+0x246>
        if ((wEPVal & USB_EP_SETUP) != 0U)
 80055ec:	051d      	lsls	r5, r3, #20
 80055ee:	f100 8157 	bmi.w	80058a0 <HAL_PCD_IRQHandler+0x32c>
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 80055f2:	0419      	lsls	r1, r3, #16
 80055f4:	f100 81cd 	bmi.w	8005992 <HAL_PCD_IRQHandler+0x41e>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80055f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055fa:	041a      	lsls	r2, r3, #16
 80055fc:	d5e7      	bpl.n	80055ce <HAL_PCD_IRQHandler+0x5a>
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 80055fe:	6c41      	ldr	r1, [r0, #68]	; 0x44
    if (epindex == 0U)
 8005600:	f011 050f 	ands.w	r5, r1, #15
 8005604:	d0ed      	beq.n	80055e2 <HAL_PCD_IRQHandler+0x6e>
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005606:	b22e      	sxth	r6, r5
 8005608:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
      if ((wEPVal & USB_EP_VTRX) != 0U)
 800560c:	043a      	lsls	r2, r7, #16
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800560e:	fa1f fa87 	uxth.w	sl, r7
      if ((wEPVal & USB_EP_VTRX) != 0U)
 8005612:	d453      	bmi.n	80056bc <HAL_PCD_IRQHandler+0x148>
      if ((wEPVal & USB_EP_VTTX) != 0U)
 8005614:	063b      	lsls	r3, r7, #24
 8005616:	d5ef      	bpl.n	80055f8 <HAL_PCD_IRQHandler+0x84>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005618:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]

        if (ep->type == EP_TYPE_ISOC)
 800561c:	ea4f 0885 	mov.w	r8, r5, lsl #2
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005620:	ea03 030b 	and.w	r3, r3, fp
 8005624:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005628:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 800562c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8005630:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005634:	7dda      	ldrb	r2, [r3, #23]
 8005636:	2a01      	cmp	r2, #1
 8005638:	f000 8161 	beq.w	80058fe <HAL_PCD_IRQHandler+0x38a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800563c:	f417 7780 	ands.w	r7, r7, #256	; 0x100
 8005640:	f040 81df 	bne.w	8005a02 <HAL_PCD_IRQHandler+0x48e>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005644:	7d19      	ldrb	r1, [r3, #20]
 8005646:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800564a:	00ca      	lsls	r2, r1, #3
 800564c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005650:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 8005654:	6812      	ldr	r2, [r2, #0]

            if (ep->xfer_len > TxPctSize)
 8005656:	eb04 05c6 	add.w	r5, r4, r6, lsl #3
 800565a:	f3c2 4c09 	ubfx	ip, r2, #16, #10
 800565e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8005660:	00f6      	lsls	r6, r6, #3
 8005662:	4562      	cmp	r2, ip
 8005664:	f240 81c7 	bls.w	80059f6 <HAL_PCD_IRQHandler+0x482>
            {
              ep->xfer_len -= TxPctSize;
 8005668:	eba2 020c 	sub.w	r2, r2, ip
 800566c:	62ea      	str	r2, [r5, #44]	; 0x2c
            {
              ep->xfer_len = 0U;
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800566e:	2a00      	cmp	r2, #0
 8005670:	f000 81c2 	beq.w	80059f8 <HAL_PCD_IRQHandler+0x484>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ep = &hpcd->IN_ep[epindex];
 8005676:	3614      	adds	r6, #20
              ep->xfer_buff += TxPctSize;
 8005678:	4462      	add	r2, ip
 800567a:	629a      	str	r2, [r3, #40]	; 0x28
              ep->xfer_count += TxPctSize;
 800567c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800567e:	19a1      	adds	r1, r4, r6
              ep->xfer_count += TxPctSize;
 8005680:	4463      	add	r3, ip
 8005682:	632b      	str	r3, [r5, #48]	; 0x30
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005684:	f007 fa62 	bl	800cb4c <USB_EPStartXfer>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005688:	6820      	ldr	r0, [r4, #0]
 800568a:	e7b5      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005690:	f022 0204 	bic.w	r2, r2, #4
 8005694:	641a      	str	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 8005696:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005698:	f022 0208 	bic.w	r2, r2, #8
 800569c:	641a      	str	r2, [r3, #64]	; 0x40
    if (hpcd->LPM_State == LPM_L1)
 800569e:	f894 32cc 	ldrb.w	r3, [r4, #716]	; 0x2cc
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	f000 845f 	beq.w	8005f66 <HAL_PCD_IRQHandler+0x9f2>
    HAL_PCD_ResumeCallback(hpcd);
 80056a8:	4620      	mov	r0, r4
 80056aa:	f008 fe77 	bl	800e39c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80056ae:	f64e 71ff 	movw	r1, #61439	; 0xefff
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80056b6:	400b      	ands	r3, r1
 80056b8:	6453      	str	r3, [r2, #68]	; 0x44
    return;
 80056ba:	e788      	b.n	80055ce <HAL_PCD_IRQHandler+0x5a>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80056bc:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80056c0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80056c4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80056c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056d4:	f840 3026 	str.w	r3, [r0, r6, lsl #2]
        if (ep->doublebuffer == 0U)
 80056d8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80056dc:	f892 3160 	ldrb.w	r3, [r2, #352]	; 0x160
 80056e0:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 8131 	beq.w	800594c <HAL_PCD_IRQHandler+0x3d8>
          if (ep->type == EP_TYPE_BULK)
 80056ea:	f892 3157 	ldrb.w	r3, [r2, #343]	; 0x157
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	f000 82ba 	beq.w	8005c68 <HAL_PCD_IRQHandler+0x6f4>
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80056f4:	f892 1154 	ldrb.w	r1, [r2, #340]	; 0x154
 80056f8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80056fc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800570c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005710:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005714:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 8005718:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800571c:	f413 4980 	ands.w	r9, r3, #16384	; 0x4000
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8005720:	f04f 030a 	mov.w	r3, #10
 8005724:	d013      	beq.n	800574e <HAL_PCD_IRQHandler+0x1da>
 8005726:	e001      	b.n	800572c <HAL_PCD_IRQHandler+0x1b8>

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
  {
    count--;
 8005728:	9b06      	ldr	r3, [sp, #24]
 800572a:	3b01      	subs	r3, #1
 800572c:	9306      	str	r3, [sp, #24]
  while (count > 0U)
 800572e:	9b06      	ldr	r3, [sp, #24]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f9      	bne.n	8005728 <HAL_PCD_IRQHandler+0x1b4>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8005734:	00d2      	lsls	r2, r2, #3
 8005736:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800573a:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800573e:	6813      	ldr	r3, [r2, #0]
 8005740:	f3c3 4309 	ubfx	r3, r3, #16, #10
              if (count != 0U)
 8005744:	bb6b      	cbnz	r3, 80057a2 <HAL_PCD_IRQHandler+0x22e>
 8005746:	4699      	mov	r9, r3
 8005748:	e010      	b.n	800576c <HAL_PCD_IRQHandler+0x1f8>
    count--;
 800574a:	9b07      	ldr	r3, [sp, #28]
 800574c:	3b01      	subs	r3, #1
 800574e:	9307      	str	r3, [sp, #28]
  while (count > 0U)
 8005750:	9b07      	ldr	r3, [sp, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f9      	bne.n	800574a <HAL_PCD_IRQHandler+0x1d6>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8005756:	00d2      	lsls	r2, r2, #3
 8005758:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800575c:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 8005760:	6853      	ldr	r3, [r2, #4]
 8005762:	f3c3 4309 	ubfx	r3, r3, #16, #10
              if (count != 0U)
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 831e 	bne.w	8005da8 <HAL_PCD_IRQHandler+0x834>
        ep->xfer_count += count;
 800576c:	eb08 0305 	add.w	r3, r8, r5
 8005770:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005774:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8005778:	444a      	add	r2, r9
 800577a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800577e:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8005782:	b122      	cbz	r2, 800578e <HAL_PCD_IRQHandler+0x21a>
 8005784:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8005788:	454a      	cmp	r2, r9
 800578a:	f240 8248 	bls.w	8005c1e <HAL_PCD_IRQHandler+0x6aa>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800578e:	44a8      	add	r8, r5
 8005790:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 8005794:	4620      	mov	r0, r4
 8005796:	f898 1154 	ldrb.w	r1, [r8, #340]	; 0x154
 800579a:	f008 fd8d 	bl	800e2b8 <HAL_PCD_DataOutStageCallback>
 800579e:	6820      	ldr	r0, [r4, #0]
 80057a0:	e738      	b.n	8005614 <HAL_PCD_IRQHandler+0xa0>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057a2:	eb08 0105 	add.w	r1, r8, r5
 80057a6:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 80057aa:	f8b1 215c 	ldrh.w	r2, [r1, #348]	; 0x15c
 80057ae:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
        ep->xfer_count += count;
 80057b2:	4699      	mov	r9, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80057b4:	f007 fb8a 	bl	800cecc <USB_ReadPMA>
 80057b8:	e7d8      	b.n	800576c <HAL_PCD_IRQHandler+0x1f8>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80057ba:	ea03 030b 	and.w	r3, r3, fp
 80057be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057c2:	6003      	str	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057c4:	7d23      	ldrb	r3, [r4, #20]
        ep->xfer_buff += ep->xfer_count;
 80057c6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057c8:	00db      	lsls	r3, r3, #3
 80057ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80057ce:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 80057d2:	681b      	ldr	r3, [r3, #0]
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80057d4:	4620      	mov	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80057d6:	f3c3 4309 	ubfx	r3, r3, #16, #10
 80057da:	6323      	str	r3, [r4, #48]	; 0x30
        ep->xfer_buff += ep->xfer_count;
 80057dc:	4413      	add	r3, r2
 80057de:	62a3      	str	r3, [r4, #40]	; 0x28
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80057e0:	f008 fcf8 	bl	800e1d4 <HAL_PCD_DataInStageCallback>
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80057e4:	7c63      	ldrb	r3, [r4, #17]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d058      	beq.n	800589c <HAL_PCD_IRQHandler+0x328>
 80057ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d155      	bne.n	800589c <HAL_PCD_IRQHandler+0x328>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80057f0:	7c62      	ldrb	r2, [r4, #17]
 80057f2:	6820      	ldr	r0, [r4, #0]
 80057f4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057f8:	64c2      	str	r2, [r0, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80057fa:	7463      	strb	r3, [r4, #17]
 80057fc:	e6fc      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
    count--;
 80057fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005800:	3b01      	subs	r3, #1
 8005802:	9309      	str	r3, [sp, #36]	; 0x24
  while (count > 0U)
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f9      	bne.n	80057fe <HAL_PCD_IRQHandler+0x28a>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 800580a:	00f9      	lsls	r1, r7, #3
 800580c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005810:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005814:	f501 31b2 	add.w	r1, r1, #91136	; 0x16400
 8005818:	684b      	ldr	r3, [r1, #4]
 800581a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 800581e:	fa0f fc87 	sxth.w	ip, r7
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);

    if (ep->xfer_len >= TxPctSize)
 8005822:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 8005824:	f3c3 4309 	ubfx	r3, r3, #16, #10
 8005828:	429f      	cmp	r7, r3
 800582a:	f080 8184 	bcs.w	8005b36 <HAL_PCD_IRQHandler+0x5c2>
 800582e:	2300      	movs	r3, #0
 8005830:	62f3      	str	r3, [r6, #44]	; 0x2c
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005832:	eb08 0305 	add.w	r3, r8, r5
 8005836:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800583a:	7d5b      	ldrb	r3, [r3, #21]
 800583c:	2b00      	cmp	r3, #0
 800583e:	f040 83a7 	bne.w	8005f90 <HAL_PCD_IRQHandler+0xa1c>
 8005842:	680b      	ldr	r3, [r1, #0]
 8005844:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005848:	600b      	str	r3, [r1, #0]
 800584a:	680b      	ldr	r3, [r1, #0]
 800584c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005850:	600b      	str	r3, [r1, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005852:	684b      	ldr	r3, [r1, #4]
 8005854:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005858:	604b      	str	r3, [r1, #4]
 800585a:	684b      	ldr	r3, [r1, #4]
 800585c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005860:	604b      	str	r3, [r1, #4]

      if (ep->type == EP_TYPE_BULK)
 8005862:	2a02      	cmp	r2, #2
 8005864:	d10f      	bne.n	8005886 <HAL_PCD_IRQHandler+0x312>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005866:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
 800586a:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005876:	f083 0320 	eor.w	r3, r3, #32
 800587a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800587e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005882:	f840 302c 	str.w	r3, [r0, ip, lsl #2]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005886:	4445      	add	r5, r8
 8005888:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800588c:	4620      	mov	r0, r4
 800588e:	7d29      	ldrb	r1, [r5, #20]
 8005890:	f008 fca0 	bl	800e1d4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005894:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8005898:	f000 8109 	beq.w	8005aae <HAL_PCD_IRQHandler+0x53a>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800589c:	6820      	ldr	r0, [r4, #0]
 800589e:	e6ab      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80058a0:	230a      	movs	r3, #10
 80058a2:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 80058a4:	9b01      	ldr	r3, [sp, #4]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058a6:	f894 2154 	ldrb.w	r2, [r4, #340]	; 0x154
 80058aa:	b12b      	cbz	r3, 80058b8 <HAL_PCD_IRQHandler+0x344>
    count--;
 80058ac:	9b01      	ldr	r3, [sp, #4]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	9301      	str	r3, [sp, #4]
  while (count > 0U)
 80058b2:	9b01      	ldr	r3, [sp, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f9      	bne.n	80058ac <HAL_PCD_IRQHandler+0x338>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80058b8:	00d3      	lsls	r3, r2, #3
 80058ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80058be:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f3c3 4309 	ubfx	r3, r3, #16, #10
          if (ep->xfer_count != 8U)
 80058c8:	2b08      	cmp	r3, #8
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058ca:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
          if (ep->xfer_count != 8U)
 80058ce:	f040 8332 	bne.w	8005f36 <HAL_PCD_IRQHandler+0x9c2>
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80058d2:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
 80058d6:	f504 7127 	add.w	r1, r4, #668	; 0x29c
 80058da:	f007 faf7 	bl	800cecc <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058de:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80058e0:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80058e2:	6813      	ldr	r3, [r2, #0]
 80058e4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80058e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f4:	6013      	str	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80058f6:	f008 fc21 	bl	800e13c <HAL_PCD_SetupStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	e67c      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
          ep->xfer_len = 0U;
 80058fe:	2100      	movs	r1, #0
 8005900:	1c6a      	adds	r2, r5, #1
 8005902:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005906:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 800590a:	6051      	str	r1, [r2, #4]
          if (ep->doublebuffer != 0U)
 800590c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005910:	b19a      	cbz	r2, 800593a <HAL_PCD_IRQHandler+0x3c6>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005912:	067f      	lsls	r7, r7, #25
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005914:	7d5a      	ldrb	r2, [r3, #21]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005916:	f140 8237 	bpl.w	8005d88 <HAL_PCD_IRQHandler+0x814>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800591a:	2a00      	cmp	r2, #0
 800591c:	f000 825f 	beq.w	8005dde <HAL_PCD_IRQHandler+0x86a>
 8005920:	2a01      	cmp	r2, #1
 8005922:	d10a      	bne.n	800593a <HAL_PCD_IRQHandler+0x3c6>
 8005924:	7d1b      	ldrb	r3, [r3, #20]
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800592c:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	b292      	uxth	r2, r2
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	601a      	str	r2, [r3, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800593a:	4445      	add	r5, r8
 800593c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8005940:	4620      	mov	r0, r4
 8005942:	7d29      	ldrb	r1, [r5, #20]
 8005944:	f008 fc46 	bl	800e1d4 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005948:	6820      	ldr	r0, [r4, #0]
 800594a:	e655      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800594c:	230a      	movs	r3, #10
 800594e:	9303      	str	r3, [sp, #12]
  while (count > 0U)
 8005950:	9b03      	ldr	r3, [sp, #12]
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005952:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
 8005956:	b12b      	cbz	r3, 8005964 <HAL_PCD_IRQHandler+0x3f0>
    count--;
 8005958:	9b03      	ldr	r3, [sp, #12]
 800595a:	3b01      	subs	r3, #1
 800595c:	9303      	str	r3, [sp, #12]
  while (count > 0U)
 800595e:	9b03      	ldr	r3, [sp, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1f9      	bne.n	8005958 <HAL_PCD_IRQHandler+0x3e4>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8005964:	00d3      	lsls	r3, r2, #3
 8005966:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800596a:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f3c3 4309 	ubfx	r3, r3, #16, #10
          if (count != 0U)
 8005974:	2b00      	cmp	r3, #0
 8005976:	f43f aee6 	beq.w	8005746 <HAL_PCD_IRQHandler+0x1d2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800597a:	eb08 0105 	add.w	r1, r8, r5
 800597e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8005982:	f8b1 215a 	ldrh.w	r2, [r1, #346]	; 0x15a
 8005986:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
        ep->xfer_count += count;
 800598a:	4699      	mov	r9, r3
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800598c:	f007 fa9e 	bl	800cecc <USB_ReadPMA>
 8005990:	e6ec      	b.n	800576c <HAL_PCD_IRQHandler+0x1f8>
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8005992:	220a      	movs	r2, #10
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005994:	6803      	ldr	r3, [r0, #0]
 8005996:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800599a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a6:	6003      	str	r3, [r0, #0]
 80059a8:	9202      	str	r2, [sp, #8]
  while (count > 0U)
 80059aa:	9b02      	ldr	r3, [sp, #8]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80059ac:	f894 2154 	ldrb.w	r2, [r4, #340]	; 0x154
 80059b0:	b12b      	cbz	r3, 80059be <HAL_PCD_IRQHandler+0x44a>
    count--;
 80059b2:	9b02      	ldr	r3, [sp, #8]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	9302      	str	r3, [sp, #8]
  while (count > 0U)
 80059b8:	9b02      	ldr	r3, [sp, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1f9      	bne.n	80059b2 <HAL_PCD_IRQHandler+0x43e>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80059be:	00d3      	lsls	r3, r2, #3
 80059c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059c4:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f3c3 4309 	ubfx	r3, r3, #16, #10
 80059ce:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
          if (ep->xfer_count == 0U)
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	f040 8132 	bne.w	8005c3c <HAL_PCD_IRQHandler+0x6c8>
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80059d8:	6803      	ldr	r3, [r0, #0]
 80059da:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80059de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80059ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f2:	6003      	str	r3, [r0, #0]
 80059f4:	e600      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
 80059f6:	62ef      	str	r7, [r5, #44]	; 0x2c
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059f8:	4620      	mov	r0, r4
 80059fa:	f008 fbeb 	bl	800e1d4 <HAL_PCD_DataInStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80059fe:	6820      	ldr	r0, [r4, #0]
 8005a00:	e5fa      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a02:	f01a 0f40 	tst.w	sl, #64	; 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a06:	7d1f      	ldrb	r7, [r3, #20]
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8005a08:	f04f 030a 	mov.w	r3, #10
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005a0c:	f43f aef9 	beq.w	8005802 <HAL_PCD_IRQHandler+0x28e>
 8005a10:	e001      	b.n	8005a16 <HAL_PCD_IRQHandler+0x4a2>
    count--;
 8005a12:	9b08      	ldr	r3, [sp, #32]
 8005a14:	3b01      	subs	r3, #1
 8005a16:	9308      	str	r3, [sp, #32]
  while (count > 0U)
 8005a18:	9b08      	ldr	r3, [sp, #32]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1f9      	bne.n	8005a12 <HAL_PCD_IRQHandler+0x49e>
  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8005a1e:	00f9      	lsls	r1, r7, #3
 8005a20:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8005a24:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005a28:	f501 31b2 	add.w	r1, r1, #91136	; 0x16400
 8005a2c:	680b      	ldr	r3, [r1, #0]
 8005a2e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
 8005a32:	fa0f fc87 	sxth.w	ip, r7
    if (ep->xfer_len > TxPctSize)
 8005a36:	6af7      	ldr	r7, [r6, #44]	; 0x2c
 8005a38:	f3c3 4309 	ubfx	r3, r3, #16, #10
 8005a3c:	429f      	cmp	r7, r3
 8005a3e:	d847      	bhi.n	8005ad0 <HAL_PCD_IRQHandler+0x55c>
 8005a40:	2300      	movs	r3, #0
 8005a42:	62f3      	str	r3, [r6, #44]	; 0x2c
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a44:	eb08 0305 	add.w	r3, r8, r5
 8005a48:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005a4c:	7d5b      	ldrb	r3, [r3, #21]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 8290 	bne.w	8005f74 <HAL_PCD_IRQHandler+0xa00>
 8005a54:	680b      	ldr	r3, [r1, #0]
 8005a56:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005a5a:	600b      	str	r3, [r1, #0]
 8005a5c:	680b      	ldr	r3, [r1, #0]
 8005a5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a62:	600b      	str	r3, [r1, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a64:	684b      	ldr	r3, [r1, #4]
 8005a66:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8005a6a:	604b      	str	r3, [r1, #4]
 8005a6c:	684b      	ldr	r3, [r1, #4]
 8005a6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a72:	604b      	str	r3, [r1, #4]
      if (ep->type == EP_TYPE_BULK)
 8005a74:	2a02      	cmp	r2, #2
 8005a76:	d10f      	bne.n	8005a98 <HAL_PCD_IRQHandler+0x524>
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8005a78:	f850 302c 	ldr.w	r3, [r0, ip, lsl #2]
 8005a7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a88:	f083 0320 	eor.w	r3, r3, #32
 8005a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a94:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a98:	4445      	add	r5, r8
 8005a9a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8005a9e:	4620      	mov	r0, r4
 8005aa0:	7d29      	ldrb	r1, [r5, #20]
 8005aa2:	f008 fb97 	bl	800e1d4 <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005aa6:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8005aaa:	f43f aef7 	beq.w	800589c <HAL_PCD_IRQHandler+0x328>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005aae:	7d2a      	ldrb	r2, [r5, #20]
 8005ab0:	6820      	ldr	r0, [r4, #0]
 8005ab2:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8005ab6:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ac2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ac6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aca:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005ace:	e593      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
      ep->xfer_len -= TxPctSize;
 8005ad0:	1aff      	subs	r7, r7, r3
 8005ad2:	62f7      	str	r7, [r6, #44]	; 0x2c
    if (ep->xfer_len == 0U)
 8005ad4:	2f00      	cmp	r7, #0
 8005ad6:	d0b5      	beq.n	8005a44 <HAL_PCD_IRQHandler+0x4d0>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ad8:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8005adc:	d00d      	beq.n	8005afa <HAL_PCD_IRQHandler+0x586>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ade:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 8005ae2:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8005ae6:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005aea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005aee:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005af2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005af6:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005afa:	eb08 0205 	add.w	r2, r8, r5
 8005afe:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005b02:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
 8005b06:	2901      	cmp	r1, #1
 8005b08:	f000 8178 	beq.w	8005dfc <HAL_PCD_IRQHandler+0x888>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005b0c:	4445      	add	r5, r8
 8005b0e:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8005b12:	7d2a      	ldrb	r2, [r5, #20]
 8005b14:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8005b18:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b24:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8005b28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b30:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  return HAL_OK;
 8005b34:	e560      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
      ep->xfer_len -= TxPctSize;
 8005b36:	1aff      	subs	r7, r7, r3
 8005b38:	62f7      	str	r7, [r6, #44]	; 0x2c
    if (ep->xfer_len == 0U)
 8005b3a:	2f00      	cmp	r7, #0
 8005b3c:	f43f ae79 	beq.w	8005832 <HAL_PCD_IRQHandler+0x2be>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b40:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
 8005b44:	d10d      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x5ee>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b46:	f850 202c 	ldr.w	r2, [r0, ip, lsl #2]
 8005b4a:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8005b4e:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005b52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b56:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005b5a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b5e:	f840 202c 	str.w	r2, [r0, ip, lsl #2]
      if (ep->xfer_fill_db == 1U)
 8005b62:	eb08 0205 	add.w	r2, r8, r5
 8005b66:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005b6a:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
 8005b6e:	2901      	cmp	r1, #1
 8005b70:	d1cc      	bne.n	8005b0c <HAL_PCD_IRQHandler+0x598>
        ep->xfer_buff += TxPctSize;
 8005b72:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005b74:	4419      	add	r1, r3
 8005b76:	6291      	str	r1, [r2, #40]	; 0x28
        ep->xfer_count += TxPctSize;
 8005b78:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8005b7a:	441f      	add	r7, r3
 8005b7c:	6337      	str	r7, [r6, #48]	; 0x30
        if (ep->xfer_len_db >= ep->maxpacket)
 8005b7e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005b80:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8005b82:	42b7      	cmp	r7, r6
 8005b84:	f0c0 822a 	bcc.w	8005fdc <HAL_PCD_IRQHandler+0xa68>
          ep->xfer_len_db -= len;
 8005b88:	1bbf      	subs	r7, r7, r6
 8005b8a:	6357      	str	r7, [r2, #52]	; 0x34
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005b8c:	b2b3      	uxth	r3, r6
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b8e:	eb08 0205 	add.w	r2, r8, r5
 8005b92:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005b96:	f892 c015 	ldrb.w	ip, [r2, #21]
 8005b9a:	f1bc 0f00 	cmp.w	ip, #0
 8005b9e:	f040 8207 	bne.w	8005fb0 <HAL_PCD_IRQHandler+0xa3c>
 8005ba2:	7d12      	ldrb	r2, [r2, #20]
 8005ba4:	00d2      	lsls	r2, r2, #3
 8005ba6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005baa:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 8005bae:	6857      	ldr	r7, [r2, #4]
 8005bb0:	f027 477c 	bic.w	r7, r7, #4227858432	; 0xfc000000
 8005bb4:	6057      	str	r7, [r2, #4]
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	f040 8247 	bne.w	800604a <HAL_PCD_IRQHandler+0xad6>
 8005bbc:	6856      	ldr	r6, [r2, #4]
 8005bbe:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8005bc2:	6056      	str	r6, [r2, #4]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005bc4:	eb08 0205 	add.w	r2, r8, r5
 8005bc8:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005bcc:	8bd2      	ldrh	r2, [r2, #30]
 8005bce:	f006 ff8b 	bl	800cae8 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005bd2:	6820      	ldr	r0, [r4, #0]
 8005bd4:	e79a      	b.n	8005b0c <HAL_PCD_IRQHandler+0x598>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005bd6:	f64f 31ff 	movw	r1, #64511	; 0xfbff
 8005bda:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8005bdc:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005bde:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005be0:	400b      	ands	r3, r1
 8005be2:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8005be4:	f008 fbb4 	bl	800e350 <HAL_PCD_ResetCallback>
  __HAL_LOCK(hpcd);
 8005be8:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	f43f acee 	beq.w	80055ce <HAL_PCD_IRQHandler+0x5a>
 8005bf2:	2301      	movs	r3, #1
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bf4:	4629      	mov	r1, r5
 8005bf6:	6820      	ldr	r0, [r4, #0]
  hpcd->USB_Address = address;
 8005bf8:	7465      	strb	r5, [r4, #17]
  __HAL_LOCK(hpcd);
 8005bfa:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005bfe:	f006 ff5b 	bl	800cab8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c02:	f884 5294 	strb.w	r5, [r4, #660]	; 0x294
}
 8005c06:	b00b      	add	sp, #44	; 0x2c
 8005c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005c0c:	f64d 71ff 	movw	r1, #57343	; 0xdfff
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005c14:	400b      	ands	r3, r1
 8005c16:	6453      	str	r3, [r2, #68]	; 0x44
}
 8005c18:	b00b      	add	sp, #44	; 0x2c
 8005c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ep = &hpcd->OUT_ep[epindex];
 8005c1e:	2128      	movs	r1, #40	; 0x28
 8005c20:	fb01 4105 	mla	r1, r1, r5, r4
           ep->xfer_buff += count;
 8005c24:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c28:	6820      	ldr	r0, [r4, #0]
           ep->xfer_buff += count;
 8005c2a:	444a      	add	r2, r9
 8005c2c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005c30:	f501 71aa 	add.w	r1, r1, #340	; 0x154
 8005c34:	f006 ff8a 	bl	800cb4c <USB_EPStartXfer>
 8005c38:	6820      	ldr	r0, [r4, #0]
 8005c3a:	e4eb      	b.n	8005614 <HAL_PCD_IRQHandler+0xa0>
            if (ep->xfer_buff != 0U)
 8005c3c:	f8d4 1168 	ldr.w	r1, [r4, #360]	; 0x168
 8005c40:	2900      	cmp	r1, #0
 8005c42:	f43f acd9 	beq.w	80055f8 <HAL_PCD_IRQHandler+0x84>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005c46:	f8b4 215a 	ldrh.w	r2, [r4, #346]	; 0x15a
 8005c4a:	f007 f93f 	bl	800cecc <USB_ReadPMA>
              ep->xfer_buff += ep->xfer_count;
 8005c4e:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 8005c52:	f8d4 2170 	ldr.w	r2, [r4, #368]	; 0x170
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005c56:	4620      	mov	r0, r4
              ep->xfer_buff += ep->xfer_count;
 8005c58:	4413      	add	r3, r2
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005c5a:	2100      	movs	r1, #0
              ep->xfer_buff += ep->xfer_count;
 8005c5c:	f8c4 3168 	str.w	r3, [r4, #360]	; 0x168
              HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005c60:	f008 fb2a 	bl	800e2b8 <HAL_PCD_DataOutStageCallback>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c64:	6820      	ldr	r0, [r4, #0]
 8005c66:	e4c7      	b.n	80055f8 <HAL_PCD_IRQHandler+0x84>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c68:	f41a 4f80 	tst.w	sl, #16384	; 0x4000
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8005c6c:	f04f 030a 	mov.w	r3, #10
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005c70:	f892 2154 	ldrb.w	r2, [r2, #340]	; 0x154
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c74:	d046      	beq.n	8005d04 <HAL_PCD_IRQHandler+0x790>
 8005c76:	e001      	b.n	8005c7c <HAL_PCD_IRQHandler+0x708>
    count--;
 8005c78:	9b04      	ldr	r3, [sp, #16]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	9304      	str	r3, [sp, #16]
  while (count > 0U)
 8005c7e:	9b04      	ldr	r3, [sp, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d1f9      	bne.n	8005c78 <HAL_PCD_IRQHandler+0x704>
  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8005c84:	00d3      	lsls	r3, r2, #3
 8005c86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c8a:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
    if (ep->xfer_len >= count)
 8005c8e:	eb08 0c05 	add.w	ip, r8, r5
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8005c98:	f8dc 116c 	ldr.w	r1, [ip, #364]	; 0x16c
 8005c9c:	f3c3 4309 	ubfx	r3, r3, #16, #10
 8005ca0:	4299      	cmp	r1, r3
 8005ca2:	4699      	mov	r9, r3
 8005ca4:	b212      	sxth	r2, r2
 8005ca6:	f0c0 8113 	bcc.w	8005ed0 <HAL_PCD_IRQHandler+0x95c>
      ep->xfer_len -= count;
 8005caa:	1ac9      	subs	r1, r1, r3
 8005cac:	f8cc 116c 	str.w	r1, [ip, #364]	; 0x16c
    if (ep->xfer_len == 0U)
 8005cb0:	2900      	cmp	r1, #0
 8005cb2:	f000 8110 	beq.w	8005ed6 <HAL_PCD_IRQHandler+0x962>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005cb6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005cba:	d013      	beq.n	8005ce4 <HAL_PCD_IRQHandler+0x770>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005cbc:	eb08 0205 	add.w	r2, r8, r5
 8005cc0:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005cc4:	f892 1154 	ldrb.w	r1, [r2, #340]	; 0x154
 8005cc8:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8005ccc:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8005cd0:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005cd4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005cd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cdc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005ce0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f43f ad2e 	beq.w	8005746 <HAL_PCD_IRQHandler+0x1d2>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005cea:	eb08 0105 	add.w	r1, r8, r5
 8005cee:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8005cf2:	f8b1 215c 	ldrh.w	r2, [r1, #348]	; 0x15c
 8005cf6:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
 8005cfa:	f007 f8e7 	bl	800cecc <USB_ReadPMA>
 8005cfe:	e535      	b.n	800576c <HAL_PCD_IRQHandler+0x1f8>
    count--;
 8005d00:	9b05      	ldr	r3, [sp, #20]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	9305      	str	r3, [sp, #20]
  while (count > 0U)
 8005d06:	9b05      	ldr	r3, [sp, #20]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1f9      	bne.n	8005d00 <HAL_PCD_IRQHandler+0x78c>
  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8005d0c:	00d3      	lsls	r3, r2, #3
 8005d0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d12:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
    if (ep->xfer_len >= count)
 8005d16:	eb08 0c05 	add.w	ip, r8, r5
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 8005d20:	f8dc 116c 	ldr.w	r1, [ip, #364]	; 0x16c
 8005d24:	f3c3 4309 	ubfx	r3, r3, #16, #10
 8005d28:	4299      	cmp	r1, r3
 8005d2a:	4699      	mov	r9, r3
 8005d2c:	b212      	sxth	r2, r2
 8005d2e:	f0c0 80e3 	bcc.w	8005ef8 <HAL_PCD_IRQHandler+0x984>
      ep->xfer_len -= count;
 8005d32:	1ac9      	subs	r1, r1, r3
 8005d34:	f8cc 116c 	str.w	r1, [ip, #364]	; 0x16c
    if (ep->xfer_len == 0U)
 8005d38:	2900      	cmp	r1, #0
 8005d3a:	f000 80e0 	beq.w	8005efe <HAL_PCD_IRQHandler+0x98a>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005d3e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005d42:	d113      	bne.n	8005d6c <HAL_PCD_IRQHandler+0x7f8>
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d44:	eb08 0205 	add.w	r2, r8, r5
 8005d48:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005d4c:	f892 1154 	ldrb.w	r1, [r2, #340]	; 0x154
 8005d50:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
 8005d54:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8005d58:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005d5c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d64:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8005d68:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    if (count != 0U)
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f43f acea 	beq.w	8005746 <HAL_PCD_IRQHandler+0x1d2>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d72:	eb08 0105 	add.w	r1, r8, r5
 8005d76:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8005d7a:	f8b1 215e 	ldrh.w	r2, [r1, #350]	; 0x15e
 8005d7e:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
 8005d82:	f007 f8a3 	bl	800cecc <USB_ReadPMA>
 8005d86:	e4f1      	b.n	800576c <HAL_PCD_IRQHandler+0x1f8>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005d88:	b1d2      	cbz	r2, 8005dc0 <HAL_PCD_IRQHandler+0x84c>
 8005d8a:	2a01      	cmp	r2, #1
 8005d8c:	f47f add5 	bne.w	800593a <HAL_PCD_IRQHandler+0x3c6>
 8005d90:	7d1b      	ldrb	r3, [r3, #20]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d98:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8005d9c:	685a      	ldr	r2, [r3, #4]
 8005d9e:	b292      	uxth	r2, r2
 8005da0:	605a      	str	r2, [r3, #4]
 8005da2:	685a      	ldr	r2, [r3, #4]
 8005da4:	605a      	str	r2, [r3, #4]
 8005da6:	e5c8      	b.n	800593a <HAL_PCD_IRQHandler+0x3c6>
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005da8:	eb08 0105 	add.w	r1, r8, r5
 8005dac:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8005db0:	f8b1 215e 	ldrh.w	r2, [r1, #350]	; 0x15e
 8005db4:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
        ep->xfer_count += count;
 8005db8:	4699      	mov	r9, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005dba:	f007 f887 	bl	800cecc <USB_ReadPMA>
 8005dbe:	e4d5      	b.n	800576c <HAL_PCD_IRQHandler+0x1f8>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dc0:	7d1b      	ldrb	r3, [r3, #20]
 8005dc2:	00db      	lsls	r3, r3, #3
 8005dc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005dc8:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8005dd2:	605a      	str	r2, [r3, #4]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005dda:	605a      	str	r2, [r3, #4]
 8005ddc:	e5ad      	b.n	800593a <HAL_PCD_IRQHandler+0x3c6>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dde:	7d1b      	ldrb	r3, [r3, #20]
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005de6:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8005df0:	601a      	str	r2, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	e59e      	b.n	800593a <HAL_PCD_IRQHandler+0x3c6>
        ep->xfer_buff += TxPctSize;
 8005dfc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005dfe:	4419      	add	r1, r3
 8005e00:	6291      	str	r1, [r2, #40]	; 0x28
        ep->xfer_count += TxPctSize;
 8005e02:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8005e04:	441f      	add	r7, r3
 8005e06:	6337      	str	r7, [r6, #48]	; 0x30
        if (ep->xfer_len_db >= ep->maxpacket)
 8005e08:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005e0a:	6a56      	ldr	r6, [r2, #36]	; 0x24
 8005e0c:	42b7      	cmp	r7, r6
 8005e0e:	f0c0 8102 	bcc.w	8006016 <HAL_PCD_IRQHandler+0xaa2>
          ep->xfer_len_db -= len;
 8005e12:	1bbf      	subs	r7, r7, r6
 8005e14:	6357      	str	r7, [r2, #52]	; 0x34
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e16:	b2b3      	uxth	r3, r6
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005e18:	eb08 0205 	add.w	r2, r8, r5
 8005e1c:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005e20:	f892 c015 	ldrb.w	ip, [r2, #21]
 8005e24:	f1bc 0f00 	cmp.w	ip, #0
 8005e28:	f040 80df 	bne.w	8005fea <HAL_PCD_IRQHandler+0xa76>
 8005e2c:	7d12      	ldrb	r2, [r2, #20]
 8005e2e:	00d2      	lsls	r2, r2, #3
 8005e30:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005e34:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 8005e38:	6817      	ldr	r7, [r2, #0]
 8005e3a:	f027 477c 	bic.w	r7, r7, #4227858432	; 0xfc000000
 8005e3e:	6017      	str	r7, [r2, #0]
 8005e40:	2e00      	cmp	r6, #0
 8005e42:	f040 8122 	bne.w	800608a <HAL_PCD_IRQHandler+0xb16>
 8005e46:	6816      	ldr	r6, [r2, #0]
 8005e48:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8005e4c:	6016      	str	r6, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e4e:	eb08 0205 	add.w	r2, r8, r5
 8005e52:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005e56:	8b92      	ldrh	r2, [r2, #28]
 8005e58:	f006 fe46 	bl	800cae8 <USB_WritePMA>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	e655      	b.n	8005b0c <HAL_PCD_IRQHandler+0x598>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005e60:	f64f 717f 	movw	r1, #65407	; 0xff7f
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e68:	400a      	ands	r2, r1
 8005e6a:	645a      	str	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005e6c:	f894 22cc 	ldrb.w	r2, [r4, #716]	; 0x2cc
 8005e70:	bb4a      	cbnz	r2, 8005ec6 <HAL_PCD_IRQHandler+0x952>
      hpcd->LPM_State = LPM_L1;
 8005e72:	2101      	movs	r1, #1
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e74:	4620      	mov	r0, r4
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8005e76:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e78:	f042 0204 	orr.w	r2, r2, #4
 8005e7c:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8005e7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e80:	f042 0208 	orr.w	r2, r2, #8
 8005e84:	641a      	str	r2, [r3, #64]	; 0x40
      hpcd->LPM_State = LPM_L1;
 8005e86:	f884 12cc 	strb.w	r1, [r4, #716]	; 0x2cc
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8c:	089b      	lsrs	r3, r3, #2
 8005e8e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005e92:	f8c4 32d0 	str.w	r3, [r4, #720]	; 0x2d0
}
 8005e96:	b00b      	add	sp, #44	; 0x2c
 8005e98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e9c:	f000 bac6 	b.w	800642c <HAL_PCDEx_LPM_Callback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005ea0:	f24f 71ff 	movw	r1, #63487	; 0xf7ff
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8005ea4:	6823      	ldr	r3, [r4, #0]
    HAL_PCD_SuspendCallback(hpcd);
 8005ea6:	4620      	mov	r0, r4
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8005ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eaa:	f042 0208 	orr.w	r2, r2, #8
 8005eae:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb2:	400a      	ands	r2, r1
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8005eb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eb8:	f042 0204 	orr.w	r2, r2, #4
 8005ebc:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_PCD_SuspendCallback(hpcd);
 8005ebe:	f008 fa63 	bl	800e388 <HAL_PCD_SuspendCallback>
    return;
 8005ec2:	f7ff bb84 	b.w	80055ce <HAL_PCD_IRQHandler+0x5a>
      HAL_PCD_SuspendCallback(hpcd);
 8005ec6:	4620      	mov	r0, r4
 8005ec8:	f008 fa5e 	bl	800e388 <HAL_PCD_SuspendCallback>
 8005ecc:	f7ff bb7f 	b.w	80055ce <HAL_PCD_IRQHandler+0x5a>
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	f8cc 116c 	str.w	r1, [ip, #364]	; 0x16c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ed6:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8005eda:	f021 4178 	bic.w	r1, r1, #4160749568	; 0xf8000000
 8005ede:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005ee2:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005ee6:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8005eea:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005eee:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005ef2:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8005ef6:	e6de      	b.n	8005cb6 <HAL_PCD_IRQHandler+0x742>
 8005ef8:	2100      	movs	r1, #0
 8005efa:	f8cc 116c 	str.w	r1, [ip, #364]	; 0x16c
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005efe:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8005f02:	f021 4178 	bic.w	r1, r1, #4160749568	; 0xf8000000
 8005f06:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8005f0a:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005f0e:	f481 5100 	eor.w	r1, r1, #8192	; 0x2000
 8005f12:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8005f16:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005f1a:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
 8005f1e:	e70e      	b.n	8005d3e <HAL_PCD_IRQHandler+0x7ca>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005f20:	f64f 51ff 	movw	r1, #65023	; 0xfdff
 8005f24:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 8005f26:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005f28:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005f2a:	400b      	ands	r3, r1
 8005f2c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8005f2e:	f008 fa3f 	bl	800e3b0 <HAL_PCD_SOFCallback>
    return;
 8005f32:	f7ff bb4c 	b.w	80055ce <HAL_PCD_IRQHandler+0x5a>
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_STALL);
 8005f36:	f248 0480 	movw	r4, #32896	; 0x8080
 8005f3a:	6801      	ldr	r1, [r0, #0]
 8005f3c:	4a65      	ldr	r2, [pc, #404]	; (80060d4 <HAL_PCD_IRQHandler+0xb60>)
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 8005f3e:	4b66      	ldr	r3, [pc, #408]	; (80060d8 <HAL_PCD_IRQHandler+0xb64>)
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_STALL);
 8005f40:	400a      	ands	r2, r1
 8005f42:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8005f46:	4322      	orrs	r2, r4
 8005f48:	6002      	str	r2, [r0, #0]
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 8005f4a:	6802      	ldr	r2, [r0, #0]
            PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f4c:	4963      	ldr	r1, [pc, #396]	; (80060dc <HAL_PCD_IRQHandler+0xb68>)
            PCD_SET_EP_TX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_TX_STALL);
 8005f4e:	4013      	ands	r3, r2
 8005f50:	f083 0310 	eor.w	r3, r3, #16
 8005f54:	4323      	orrs	r3, r4
 8005f56:	6003      	str	r3, [r0, #0]
            PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005f58:	6803      	ldr	r3, [r0, #0]
 8005f5a:	4019      	ands	r1, r3
 8005f5c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8005f60:	6001      	str	r1, [r0, #0]
            return HAL_OK;
 8005f62:	f7ff bb34 	b.w	80055ce <HAL_PCD_IRQHandler+0x5a>
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f66:	4620      	mov	r0, r4
      hpcd->LPM_State = LPM_L0;
 8005f68:	f884 12cc 	strb.w	r1, [r4, #716]	; 0x2cc
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005f6c:	f000 fa5e 	bl	800642c <HAL_PCDEx_LPM_Callback>
 8005f70:	f7ff bb9a 	b.w	80056a8 <HAL_PCD_IRQHandler+0x134>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	f47f ad7d 	bne.w	8005a74 <HAL_PCD_IRQHandler+0x500>
 8005f7a:	680b      	ldr	r3, [r1, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	600b      	str	r3, [r1, #0]
 8005f80:	680b      	ldr	r3, [r1, #0]
 8005f82:	600b      	str	r3, [r1, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f84:	684b      	ldr	r3, [r1, #4]
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	604b      	str	r3, [r1, #4]
 8005f8a:	684b      	ldr	r3, [r1, #4]
 8005f8c:	604b      	str	r3, [r1, #4]
 8005f8e:	e571      	b.n	8005a74 <HAL_PCD_IRQHandler+0x500>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	f47f ac66 	bne.w	8005862 <HAL_PCD_IRQHandler+0x2ee>
 8005f96:	680b      	ldr	r3, [r1, #0]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	600b      	str	r3, [r1, #0]
 8005f9c:	680b      	ldr	r3, [r1, #0]
 8005f9e:	600b      	str	r3, [r1, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fa0:	684b      	ldr	r3, [r1, #4]
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	604b      	str	r3, [r1, #4]
 8005fa6:	684b      	ldr	r3, [r1, #4]
 8005fa8:	604b      	str	r3, [r1, #4]
 8005faa:	e45a      	b.n	8005862 <HAL_PCD_IRQHandler+0x2ee>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005fac:	463e      	mov	r6, r7
 8005fae:	b2bb      	uxth	r3, r7
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fb0:	f1bc 0f01 	cmp.w	ip, #1
 8005fb4:	f47f ae06 	bne.w	8005bc4 <HAL_PCD_IRQHandler+0x650>
 8005fb8:	eb08 0205 	add.w	r2, r8, r5
 8005fbc:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005fc0:	7d12      	ldrb	r2, [r2, #20]
 8005fc2:	00d2      	lsls	r2, r2, #3
 8005fc4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005fc8:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 8005fcc:	6857      	ldr	r7, [r2, #4]
 8005fce:	b2bf      	uxth	r7, r7
 8005fd0:	6057      	str	r7, [r2, #4]
 8005fd2:	6857      	ldr	r7, [r2, #4]
 8005fd4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8005fd8:	6056      	str	r6, [r2, #4]
 8005fda:	e5f3      	b.n	8005bc4 <HAL_PCD_IRQHandler+0x650>
        else if (ep->xfer_len_db == 0U)
 8005fdc:	bb07      	cbnz	r7, 8006020 <HAL_PCD_IRQHandler+0xaac>
          ep->xfer_fill_db = 0U;
 8005fde:	461e      	mov	r6, r3
 8005fe0:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
 8005fe4:	e5d3      	b.n	8005b8e <HAL_PCD_IRQHandler+0x61a>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005fe6:	463e      	mov	r6, r7
 8005fe8:	b2bb      	uxth	r3, r7
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005fea:	f1bc 0f01 	cmp.w	ip, #1
 8005fee:	f47f af2e 	bne.w	8005e4e <HAL_PCD_IRQHandler+0x8da>
 8005ff2:	eb08 0205 	add.w	r2, r8, r5
 8005ff6:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005ffa:	7d12      	ldrb	r2, [r2, #20]
 8005ffc:	00d2      	lsls	r2, r2, #3
 8005ffe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8006002:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 8006006:	6817      	ldr	r7, [r2, #0]
 8006008:	b2bf      	uxth	r7, r7
 800600a:	6017      	str	r7, [r2, #0]
 800600c:	6817      	ldr	r7, [r2, #0]
 800600e:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8006012:	6016      	str	r6, [r2, #0]
 8006014:	e71b      	b.n	8005e4e <HAL_PCD_IRQHandler+0x8da>
        else if (ep->xfer_len_db == 0U)
 8006016:	bb1f      	cbnz	r7, 8006060 <HAL_PCD_IRQHandler+0xaec>
          ep->xfer_fill_db = 0U;
 8006018:	461e      	mov	r6, r3
 800601a:	f882 7038 	strb.w	r7, [r2, #56]	; 0x38
 800601e:	e6fb      	b.n	8005e18 <HAL_PCD_IRQHandler+0x8a4>
          ep->xfer_len_db = 0U;
 8006020:	2300      	movs	r3, #0
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006022:	f892 c015 	ldrb.w	ip, [r2, #21]
          ep->xfer_len_db = 0U;
 8006026:	6353      	str	r3, [r2, #52]	; 0x34
          ep->xfer_fill_db = 0;
 8006028:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800602c:	f1bc 0f00 	cmp.w	ip, #0
 8006030:	d1bc      	bne.n	8005fac <HAL_PCD_IRQHandler+0xa38>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006032:	463e      	mov	r6, r7
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006034:	7d12      	ldrb	r2, [r2, #20]
 8006036:	00d2      	lsls	r2, r2, #3
 8006038:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800603c:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 8006040:	6853      	ldr	r3, [r2, #4]
 8006042:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8006046:	6053      	str	r3, [r2, #4]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006048:	b2bb      	uxth	r3, r7
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800604a:	2e3e      	cmp	r6, #62	; 0x3e
 800604c:	d828      	bhi.n	80060a0 <HAL_PCD_IRQHandler+0xb2c>
 800604e:	0877      	lsrs	r7, r6, #1
 8006050:	07f6      	lsls	r6, r6, #31
 8006052:	6856      	ldr	r6, [r2, #4]
 8006054:	bf48      	it	mi
 8006056:	3701      	addmi	r7, #1
 8006058:	ea46 6687 	orr.w	r6, r6, r7, lsl #26
 800605c:	6056      	str	r6, [r2, #4]
 800605e:	e5b1      	b.n	8005bc4 <HAL_PCD_IRQHandler+0x650>
          ep->xfer_fill_db = 0U;
 8006060:	2300      	movs	r3, #0
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006062:	f892 c015 	ldrb.w	ip, [r2, #21]
          ep->xfer_fill_db = 0U;
 8006066:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
          ep->xfer_len_db = 0U;
 800606a:	6353      	str	r3, [r2, #52]	; 0x34
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800606c:	f1bc 0f00 	cmp.w	ip, #0
 8006070:	d1b9      	bne.n	8005fe6 <HAL_PCD_IRQHandler+0xa72>
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006072:	463e      	mov	r6, r7
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006074:	7d12      	ldrb	r2, [r2, #20]
 8006076:	00d2      	lsls	r2, r2, #3
 8006078:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800607c:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 8006080:	6813      	ldr	r3, [r2, #0]
 8006082:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8006086:	6013      	str	r3, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006088:	b2bb      	uxth	r3, r7
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800608a:	2e3e      	cmp	r6, #62	; 0x3e
 800608c:	d814      	bhi.n	80060b8 <HAL_PCD_IRQHandler+0xb44>
 800608e:	0877      	lsrs	r7, r6, #1
 8006090:	07f6      	lsls	r6, r6, #31
 8006092:	6816      	ldr	r6, [r2, #0]
 8006094:	bf48      	it	mi
 8006096:	3701      	addmi	r7, #1
 8006098:	ea46 6687 	orr.w	r6, r6, r7, lsl #26
 800609c:	6016      	str	r6, [r2, #0]
 800609e:	e6d6      	b.n	8005e4e <HAL_PCD_IRQHandler+0x8da>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060a0:	0977      	lsrs	r7, r6, #5
 80060a2:	06f6      	lsls	r6, r6, #27
 80060a4:	6856      	ldr	r6, [r2, #4]
 80060a6:	bf08      	it	eq
 80060a8:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80060ac:	ea46 6687 	orr.w	r6, r6, r7, lsl #26
 80060b0:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80060b4:	6056      	str	r6, [r2, #4]
 80060b6:	e585      	b.n	8005bc4 <HAL_PCD_IRQHandler+0x650>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80060b8:	0977      	lsrs	r7, r6, #5
 80060ba:	06f6      	lsls	r6, r6, #27
 80060bc:	6816      	ldr	r6, [r2, #0]
 80060be:	bf08      	it	eq
 80060c0:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 80060c4:	ea46 6687 	orr.w	r6, r6, r7, lsl #26
 80060c8:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80060cc:	6016      	str	r6, [r2, #0]
 80060ce:	e6be      	b.n	8005e4e <HAL_PCD_IRQHandler+0x8da>
 80060d0:	07ff8f0f 	.word	0x07ff8f0f
 80060d4:	07ffbf8f 	.word	0x07ffbf8f
 80060d8:	07ff8fbf 	.word	0x07ff8fbf
 80060dc:	07ff0f8f 	.word	0x07ff0f8f

080060e0 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 80060e0:	f890 2294 	ldrb.w	r2, [r0, #660]	; 0x294
 80060e4:	2a01      	cmp	r2, #1
 80060e6:	d00d      	beq.n	8006104 <HAL_PCD_SetAddress+0x24>
{
 80060e8:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 80060ea:	2201      	movs	r2, #1
 80060ec:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060ee:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 80060f0:	7461      	strb	r1, [r4, #17]
  __HAL_LOCK(hpcd);
 80060f2:	f884 2294 	strb.w	r2, [r4, #660]	; 0x294
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060f6:	f006 fcdf 	bl	800cab8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060fa:	2300      	movs	r3, #0
 80060fc:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  return HAL_OK;
 8006100:	4618      	mov	r0, r3
}
 8006102:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8006104:	2002      	movs	r0, #2
}
 8006106:	4770      	bx	lr

08006108 <HAL_PCD_EP_Open>:
  if ((ep_addr & 0x80U) == 0x80U)
 8006108:	f001 0c07 	and.w	ip, r1, #7
 800610c:	0609      	lsls	r1, r1, #24
{
 800610e:	b510      	push	{r4, lr}
 8006110:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006112:	f04f 0e28 	mov.w	lr, #40	; 0x28
  if ((ep_addr & 0x80U) == 0x80U)
 8006116:	d424      	bmi.n	8006162 <HAL_PCD_EP_Open+0x5a>
    ep->is_in = 0U;
 8006118:	2000      	movs	r0, #0
 800611a:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 800611e:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8006122:	f881 0155 	strb.w	r0, [r1, #341]	; 0x155
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006126:	fb0e 410c 	mla	r1, lr, ip, r4
 800612a:	f501 71aa 	add.w	r1, r1, #340	; 0x154
  if (ep_type == EP_TYPE_BULK)
 800612e:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8006130:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8006132:	bf08      	it	eq
 8006134:	2300      	moveq	r3, #0
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006136:	f3c2 020a 	ubfx	r2, r2, #0, #11
    ep->data_pid_start = 0U;
 800613a:	bf08      	it	eq
 800613c:	710b      	strbeq	r3, [r1, #4]
  ep->num = ep_addr & EP_ADDR_MSK;
 800613e:	f881 c000 	strb.w	ip, [r1]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006142:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8006144:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
 8006148:	2b01      	cmp	r3, #1
 800614a:	d014      	beq.n	8006176 <HAL_PCD_EP_Open+0x6e>
 800614c:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800614e:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006150:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006154:	f006 f994 	bl	800c480 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006158:	2300      	movs	r3, #0
 800615a:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  return ret;
 800615e:	4618      	mov	r0, r3
}
 8006160:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 8006162:	2001      	movs	r0, #1
 8006164:	eb0c 018c 	add.w	r1, ip, ip, lsl #2
 8006168:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 800616c:	7548      	strb	r0, [r1, #21]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800616e:	fb0e 410c 	mla	r1, lr, ip, r4
 8006172:	3114      	adds	r1, #20
    ep->is_in = 1U;
 8006174:	e7db      	b.n	800612e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 8006176:	2002      	movs	r0, #2
}
 8006178:	bd10      	pop	{r4, pc}
 800617a:	bf00      	nop

0800617c <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800617c:	060b      	lsls	r3, r1, #24
{
 800617e:	b510      	push	{r4, lr}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006180:	f04f 0228 	mov.w	r2, #40	; 0x28
{
 8006184:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 8006186:	d41d      	bmi.n	80061c4 <HAL_PCD_EP_Close+0x48>
    ep->is_in = 0U;
 8006188:	f04f 0c00 	mov.w	ip, #0
 800618c:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006190:	fb02 4103 	mla	r1, r2, r3, r4
    ep->is_in = 0U;
 8006194:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006198:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800619c:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    ep->is_in = 0U;
 80061a0:	f880 c155 	strb.w	ip, [r0, #341]	; 0x155
  ep->num = ep_addr & EP_ADDR_MSK;
 80061a4:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80061a6:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d01c      	beq.n	80061e8 <HAL_PCD_EP_Close+0x6c>
 80061ae:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80061b2:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80061b6:	f006 fb29 	bl	800c80c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061ba:	2300      	movs	r3, #0
 80061bc:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  return HAL_OK;
 80061c0:	4618      	mov	r0, r3
}
 80061c2:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 80061c4:	f04f 0c01 	mov.w	ip, #1
 80061c8:	f001 0307 	and.w	r3, r1, #7
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061cc:	fb02 4103 	mla	r1, r2, r3, r4
    ep->is_in = 1U;
 80061d0:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80061d4:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061d8:	3114      	adds	r1, #20
    ep->is_in = 1U;
 80061da:	f880 c015 	strb.w	ip, [r0, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061de:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 80061e0:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d1e2      	bne.n	80061ae <HAL_PCD_EP_Close+0x32>
 80061e8:	2002      	movs	r0, #2
}
 80061ea:	bd10      	pop	{r4, pc}

080061ec <HAL_PCD_EP_Receive>:
{
 80061ec:	b510      	push	{r4, lr}
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061ee:	f04f 0e28 	mov.w	lr, #40	; 0x28
  ep->xfer_count = 0U;
 80061f2:	2400      	movs	r4, #0
 80061f4:	f001 0107 	and.w	r1, r1, #7
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061f8:	fb0e 0e01 	mla	lr, lr, r1, r0
  ep->xfer_buff = pBuf;
 80061fc:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8006200:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
  ep->xfer_len = len;
 8006204:	e9cc 235a 	strd	r2, r3, [ip, #360]	; 0x168
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006208:	6800      	ldr	r0, [r0, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800620a:	f88c 1154 	strb.w	r1, [ip, #340]	; 0x154
  ep->xfer_count = 0U;
 800620e:	f8cc 4170 	str.w	r4, [ip, #368]	; 0x170
  ep->is_in = 0U;
 8006212:	f88c 4155 	strb.w	r4, [ip, #341]	; 0x155
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006216:	f50e 71aa 	add.w	r1, lr, #340	; 0x154
 800621a:	f006 fc97 	bl	800cb4c <USB_EPStartXfer>
}
 800621e:	4620      	mov	r0, r4
 8006220:	bd10      	pop	{r4, pc}
 8006222:	bf00      	nop

08006224 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006224:	f001 0107 	and.w	r1, r1, #7
 8006228:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800622c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
}
 8006230:	f8d1 0170 	ldr.w	r0, [r1, #368]	; 0x170
 8006234:	4770      	bx	lr
 8006236:	bf00      	nop

08006238 <HAL_PCD_EP_Transmit>:
{
 8006238:	b538      	push	{r3, r4, r5, lr}
 800623a:	f001 0e07 	and.w	lr, r1, #7
 800623e:	eb0e 018e 	add.w	r1, lr, lr, lsl #2
  ep->xfer_buff = pBuf;
 8006242:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
  ep->xfer_fill_db = 1U;
 8006246:	2501      	movs	r5, #1
  ep->xfer_count = 0U;
 8006248:	2400      	movs	r4, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800624a:	4661      	mov	r1, ip
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800624c:	6800      	ldr	r0, [r0, #0]
  ep->xfer_buff = pBuf;
 800624e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
  ep->xfer_len = len;
 8006252:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  ep->xfer_len_db = len;
 8006256:	f8cc 3034 	str.w	r3, [ip, #52]	; 0x34
  ep->xfer_fill_db = 1U;
 800625a:	f88c 5038 	strb.w	r5, [ip, #56]	; 0x38
  ep->xfer_count = 0U;
 800625e:	f8cc 4030 	str.w	r4, [ip, #48]	; 0x30
  ep->is_in = 1U;
 8006262:	f88c 5015 	strb.w	r5, [ip, #21]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006266:	f88c e014 	strb.w	lr, [ip, #20]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800626a:	3114      	adds	r1, #20
 800626c:	f006 fc6e 	bl	800cb4c <USB_EPStartXfer>
}
 8006270:	4620      	mov	r0, r4
 8006272:	bd38      	pop	{r3, r4, r5, pc}

08006274 <HAL_PCD_EP_SetStall>:
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006274:	7902      	ldrb	r2, [r0, #4]
 8006276:	f001 0307 	and.w	r3, r1, #7
 800627a:	429a      	cmp	r2, r3
 800627c:	d336      	bcc.n	80062ec <HAL_PCD_EP_SetStall+0x78>
  if ((0x80U & ep_addr) == 0x80U)
 800627e:	060a      	lsls	r2, r1, #24
{
 8006280:	b510      	push	{r4, lr}
 8006282:	4604      	mov	r4, r0
  if ((0x80U & ep_addr) == 0x80U)
 8006284:	d41f      	bmi.n	80062c6 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 0U;
 8006286:	f04f 0c00 	mov.w	ip, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800628a:	2028      	movs	r0, #40	; 0x28
    ep->is_in = 0U;
 800628c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8006290:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8006294:	f882 c155 	strb.w	ip, [r2, #341]	; 0x155
  ep->is_stall = 1U;
 8006298:	2201      	movs	r2, #1
    ep = &hpcd->OUT_ep[ep_addr];
 800629a:	fb00 4101 	mla	r1, r0, r1, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800629e:	f881 3154 	strb.w	r3, [r1, #340]	; 0x154
  ep->is_stall = 1U;
 80062a2:	f881 2156 	strb.w	r2, [r1, #342]	; 0x156
  __HAL_LOCK(hpcd);
 80062a6:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
    ep = &hpcd->OUT_ep[ep_addr];
 80062aa:	f501 71aa 	add.w	r1, r1, #340	; 0x154
  __HAL_LOCK(hpcd);
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d01a      	beq.n	80062e8 <HAL_PCD_EP_SetStall+0x74>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062b2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80062b4:	f884 2294 	strb.w	r2, [r4, #660]	; 0x294
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062b8:	f006 fb58 	bl	800c96c <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 80062bc:	2300      	movs	r3, #0
 80062be:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  return HAL_OK;
 80062c2:	4618      	mov	r0, r3
}
 80062c4:	bd10      	pop	{r4, pc}
    ep->is_in = 1U;
 80062c6:	2001      	movs	r0, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062c8:	2128      	movs	r1, #40	; 0x28
    ep->is_in = 1U;
 80062ca:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80062ce:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 80062d2:	7550      	strb	r0, [r2, #21]
  ep->is_stall = 1U;
 80062d4:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d6:	fb01 4103 	mla	r1, r1, r3, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 80062da:	750b      	strb	r3, [r1, #20]
  ep->is_stall = 1U;
 80062dc:	758a      	strb	r2, [r1, #22]
  __HAL_LOCK(hpcd);
 80062de:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062e2:	3114      	adds	r1, #20
  __HAL_LOCK(hpcd);
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d1e4      	bne.n	80062b2 <HAL_PCD_EP_SetStall+0x3e>
 80062e8:	2002      	movs	r0, #2
}
 80062ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80062ec:	2001      	movs	r0, #1
}
 80062ee:	4770      	bx	lr

080062f0 <HAL_PCD_EP_ClrStall>:
{
 80062f0:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80062f2:	7902      	ldrb	r2, [r0, #4]
 80062f4:	f001 030f 	and.w	r3, r1, #15
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d338      	bcc.n	800636e <HAL_PCD_EP_ClrStall+0x7e>
  if ((0x80U & ep_addr) == 0x80U)
 80062fc:	060b      	lsls	r3, r1, #24
 80062fe:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006300:	f04f 0228 	mov.w	r2, #40	; 0x28
  if ((0x80U & ep_addr) == 0x80U)
 8006304:	d41f      	bmi.n	8006346 <HAL_PCD_EP_ClrStall+0x56>
    ep->is_in = 0U;
 8006306:	2500      	movs	r5, #0
 8006308:	f001 0307 	and.w	r3, r1, #7
 800630c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006310:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8006314:	f880 5155 	strb.w	r5, [r0, #341]	; 0x155
  ep->is_stall = 0U;
 8006318:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800631a:	fb02 4103 	mla	r1, r2, r3, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800631e:	f881 3154 	strb.w	r3, [r1, #340]	; 0x154
  ep->is_stall = 0U;
 8006322:	f881 5156 	strb.w	r5, [r1, #342]	; 0x156
  __HAL_LOCK(hpcd);
 8006326:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800632a:	f501 71aa 	add.w	r1, r1, #340	; 0x154
  __HAL_LOCK(hpcd);
 800632e:	2b01      	cmp	r3, #1
 8006330:	d01b      	beq.n	800636a <HAL_PCD_EP_ClrStall+0x7a>
 8006332:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006334:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8006336:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800633a:	f006 fb3b 	bl	800c9b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800633e:	f884 5294 	strb.w	r5, [r4, #660]	; 0x294
  return HAL_OK;
 8006342:	4628      	mov	r0, r5
}
 8006344:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 1U;
 8006346:	2501      	movs	r5, #1
 8006348:	f001 0307 	and.w	r3, r1, #7
 800634c:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006350:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8006354:	7545      	strb	r5, [r0, #21]
  ep->is_stall = 0U;
 8006356:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006358:	fb02 4103 	mla	r1, r2, r3, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800635c:	750b      	strb	r3, [r1, #20]
  ep->is_stall = 0U;
 800635e:	758d      	strb	r5, [r1, #22]
  __HAL_LOCK(hpcd);
 8006360:	f894 3294 	ldrb.w	r3, [r4, #660]	; 0x294
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006364:	3114      	adds	r1, #20
  __HAL_LOCK(hpcd);
 8006366:	2b01      	cmp	r3, #1
 8006368:	d1e3      	bne.n	8006332 <HAL_PCD_EP_ClrStall+0x42>
 800636a:	2002      	movs	r0, #2
}
 800636c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800636e:	2001      	movs	r0, #1
}
 8006370:	bd38      	pop	{r3, r4, r5, pc}
 8006372:	bf00      	nop

08006374 <HAL_PCD_EP_Abort>:
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006374:	2328      	movs	r3, #40	; 0x28
  if ((0x80U & ep_addr) == 0x80U)
 8006376:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800637a:	f001 0107 	and.w	r1, r1, #7
 800637e:	fb03 0101 	mla	r1, r3, r1, r0
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006382:	6800      	ldr	r0, [r0, #0]
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006384:	bf14      	ite	ne
 8006386:	3114      	addne	r1, #20
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006388:	f501 71aa 	addeq.w	r1, r1, #340	; 0x154
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800638c:	f006 bb5a 	b.w	800ca44 <USB_EPStopXfer>

08006390 <HAL_PCD_EP_Flush>:
  __HAL_LOCK(hpcd);
 8006390:	f890 3294 	ldrb.w	r3, [r0, #660]	; 0x294
 8006394:	2b01      	cmp	r3, #1
 8006396:	d017      	beq.n	80063c8 <HAL_PCD_EP_Flush+0x38>
 8006398:	2301      	movs	r3, #1
{
 800639a:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800639c:	f880 3294 	strb.w	r3, [r0, #660]	; 0x294
  if ((ep_addr & 0x80U) == 0x80U)
 80063a0:	060b      	lsls	r3, r1, #24
 80063a2:	4604      	mov	r4, r0
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80063a4:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0x80U) == 0x80U)
 80063a6:	d406      	bmi.n	80063b6 <HAL_PCD_EP_Flush+0x26>
    (void)USB_FlushRxFifo(hpcd->Instance);
 80063a8:	f006 f868 	bl	800c47c <USB_FlushRxFifo>
  __HAL_UNLOCK(hpcd);
 80063ac:	2300      	movs	r3, #0
 80063ae:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  return HAL_OK;
 80063b2:	4618      	mov	r0, r3
}
 80063b4:	bd10      	pop	{r4, pc}
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80063b6:	f001 0107 	and.w	r1, r1, #7
 80063ba:	f006 f85d 	bl	800c478 <USB_FlushTxFifo>
  __HAL_UNLOCK(hpcd);
 80063be:	2300      	movs	r3, #0
 80063c0:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
  return HAL_OK;
 80063c4:	4618      	mov	r0, r3
}
 80063c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80063c8:	2002      	movs	r0, #2
}
 80063ca:	4770      	bx	lr

080063cc <HAL_PCDEx_PMAConfig>:
                                       uint16_t ep_kind, uint32_t pmaadress)
{
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80063cc:	f011 0f80 	tst.w	r1, #128	; 0x80
 80063d0:	d00b      	beq.n	80063ea <HAL_PCDEx_PMAConfig+0x1e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063d2:	f001 0107 	and.w	r1, r1, #7
 80063d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80063da:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80063de:	3014      	adds	r0, #20
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80063e0:	b95a      	cbnz	r2, 80063fa <HAL_PCDEx_PMAConfig+0x2e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80063e2:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80063e4:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80063e6:	2000      	movs	r0, #0
 80063e8:	4770      	bx	lr
    ep = &hpcd->OUT_ep[ep_addr];
 80063ea:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80063ee:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 80063f2:	f500 70aa 	add.w	r0, r0, #340	; 0x154
  if (ep_kind == PCD_SNG_BUF)
 80063f6:	2a00      	cmp	r2, #0
 80063f8:	d0f3      	beq.n	80063e2 <HAL_PCDEx_PMAConfig+0x16>
    ep->doublebuffer = 1U;
 80063fa:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80063fc:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80063fe:	7302      	strb	r2, [r0, #12]
}
 8006400:	2000      	movs	r0, #0
 8006402:	4770      	bx	lr

08006404 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006404:	4603      	mov	r3, r0

  USB_DRD_TypeDef *USBx = hpcd->Instance;
  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 8006406:	2100      	movs	r1, #0
{
 8006408:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800640a:	2401      	movs	r4, #1
  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800640c:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 800640e:	f883 12cc 	strb.w	r1, [r3, #716]	; 0x2cc

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;

  return HAL_OK;
}
 8006412:	4608      	mov	r0, r1
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006414:	6d51      	ldr	r1, [r2, #84]	; 0x54
  hpcd->lpm_active = 1U;
 8006416:	f8c3 42d8 	str.w	r4, [r3, #728]	; 0x2d8
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800641a:	4321      	orrs	r1, r4
 800641c:	6551      	str	r1, [r2, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800641e:	6d53      	ldr	r3, [r2, #84]	; 0x54
}
 8006420:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006424:	f043 0302 	orr.w	r3, r3, #2
 8006428:	6553      	str	r3, [r2, #84]	; 0x54
}
 800642a:	4770      	bx	lr

0800642c <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop

08006430 <HAL_PWREx_EnableUSBVoltageDetector>:
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector(void)
{
  /* Enable the USB voltage detector */
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33DEN);
 8006430:	4a02      	ldr	r2, [pc, #8]	; (800643c <HAL_PWREx_EnableUSBVoltageDetector+0xc>)
 8006432:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006434:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006438:	6393      	str	r3, [r2, #56]	; 0x38
}
 800643a:	4770      	bx	lr
 800643c:	44020800 	.word	0x44020800

08006440 <HAL_PWREx_EnableVddUSB>:
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->USBSCR, PWR_USBSCR_USB33SV);
 8006440:	4a02      	ldr	r2, [pc, #8]	; (800644c <HAL_PWREx_EnableVddUSB+0xc>)
 8006442:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006444:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006448:	6393      	str	r3, [r2, #56]	; 0x38
}
 800644a:	4770      	bx	lr
 800644c:	44020800 	.word	0x44020800

08006450 <HAL_RCC_GetSysClockFreq.part.0>:
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006450:	4b42      	ldr	r3, [pc, #264]	; (800655c <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 8006452:	69da      	ldr	r2, [r3, #28]
 8006454:	f002 0218 	and.w	r2, r2, #24
 8006458:	2a18      	cmp	r2, #24
 800645a:	d001      	beq.n	8006460 <HAL_RCC_GetSysClockFreq.part.0+0x10>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800645c:	4840      	ldr	r0, [pc, #256]	; (8006560 <HAL_RCC_GetSysClockFreq.part.0+0x110>)
  }

  return sysclockfreq;
}
 800645e:	4770      	bx	lr
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006460:	6a99      	ldr	r1, [r3, #40]	; 0x28
uint32_t HAL_RCC_GetSysClockFreq(void)
 8006462:	b430      	push	{r4, r5}
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8006464:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if (pllm != 0U)
 8006468:	f414 5f7c 	tst.w	r4, #16128	; 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800646c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800646e:	f3c4 2005 	ubfx	r0, r4, #8, #6
    if (pllm != 0U)
 8006472:	d039      	beq.n	80064e8 <HAL_RCC_GetSysClockFreq.part.0+0x98>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006474:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8006478:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800647c:	fb05 f202 	mul.w	r2, r5, r2
 8006480:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006484:	f001 0103 	and.w	r1, r1, #3
      switch (pllsource)
 8006488:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800648a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      switch (pllsource)
 800648e:	d03f      	beq.n	8006510 <HAL_RCC_GetSysClockFreq.part.0+0xc0>
 8006490:	2903      	cmp	r1, #3
 8006492:	d12b      	bne.n	80064ec <HAL_RCC_GetSysClockFreq.part.0+0x9c>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006496:	ee05 0a90 	vmov	s11, r0
 800649a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649e:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80064a2:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006564 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 80064a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064ae:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80064b2:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8006568 <HAL_RCC_GetSysClockFreq.part.0+0x118>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80064b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064be:	eec5 6a25 	vdiv.f32	s13, s10, s11
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c2:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064c6:	ee67 7aa6 	vmul.f32	s15, s15, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80064ca:	4b24      	ldr	r3, [pc, #144]	; (800655c <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 80064cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ce:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80064d2:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80064d4:	ee07 3a10 	vmov	s14, r3
 80064d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80064dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80064e0:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80064e4:	ee17 0a90 	vmov	r0, s15
}
 80064e8:	bc30      	pop	{r4, r5}
 80064ea:	4770      	bx	lr
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80064ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ee:	ee05 0a90 	vmov	s11, r0
 80064f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064f6:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80064fa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8006564 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 80064fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006502:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006506:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800650a:	ed9f 5a18 	vldr	s10, [pc, #96]	; 800656c <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 800650e:	e7d2      	b.n	80064b6 <HAL_RCC_GetSysClockFreq.part.0+0x66>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	0692      	lsls	r2, r2, #26
 8006514:	d5be      	bpl.n	8006494 <HAL_RCC_GetSysClockFreq.part.0+0x44>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006516:	6819      	ldr	r1, [r3, #0]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800651a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006564 <HAL_RCC_GetSysClockFreq.part.0+0x114>
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006522:	ee06 3a90 	vmov	s13, r3
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8006526:	4a0e      	ldr	r2, [pc, #56]	; (8006560 <HAL_RCC_GetSysClockFreq.part.0+0x110>)
 8006528:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 800652c:	40da      	lsrs	r2, r3
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800652e:	ee05 0a90 	vmov	s11, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006532:	ee67 7a87 	vmul.f32	s15, s15, s14
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006536:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800653a:	ee06 2a10 	vmov	s12, r2
 800653e:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8006542:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006546:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800654a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654e:	ee86 7a05 	vdiv.f32	s14, s12, s10
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8006552:	ee77 7aa5 	vadd.f32	s15, s15, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	e7b6      	b.n	80064ca <HAL_RCC_GetSysClockFreq.part.0+0x7a>
 800655c:	44020c00 	.word	0x44020c00
 8006560:	017d7840 	.word	0x017d7840
 8006564:	39000000 	.word	0x39000000
 8006568:	4bbebc20 	.word	0x4bbebc20
 800656c:	4a742400 	.word	0x4a742400

08006570 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006570:	4a0e      	ldr	r2, [pc, #56]	; (80065ac <HAL_RCC_GetSysClockFreq+0x3c>)
 8006572:	69d3      	ldr	r3, [r2, #28]
 8006574:	f003 0318 	and.w	r3, r3, #24
 8006578:	2b08      	cmp	r3, #8
 800657a:	d015      	beq.n	80065a8 <HAL_RCC_GetSysClockFreq+0x38>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800657c:	69d3      	ldr	r3, [r2, #28]
 800657e:	f013 0f18 	tst.w	r3, #24
 8006582:	d108      	bne.n	8006596 <HAL_RCC_GetSysClockFreq+0x26>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006584:	6813      	ldr	r3, [r2, #0]
 8006586:	069b      	lsls	r3, r3, #26
 8006588:	d50c      	bpl.n	80065a4 <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800658a:	6813      	ldr	r3, [r2, #0]
 800658c:	4808      	ldr	r0, [pc, #32]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x40>)
 800658e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006592:	40d8      	lsrs	r0, r3
 8006594:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006596:	69d3      	ldr	r3, [r2, #28]
 8006598:	f003 0318 	and.w	r3, r3, #24
 800659c:	2b10      	cmp	r3, #16
 800659e:	d001      	beq.n	80065a4 <HAL_RCC_GetSysClockFreq+0x34>
 80065a0:	f7ff bf56 	b.w	8006450 <HAL_RCC_GetSysClockFreq.part.0>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80065a4:	4802      	ldr	r0, [pc, #8]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80065a6:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 80065a8:	4802      	ldr	r0, [pc, #8]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x44>)
 80065aa:	4770      	bx	lr
 80065ac:	44020c00 	.word	0x44020c00
 80065b0:	017d7840 	.word	0x017d7840
 80065b4:	003d0900 	.word	0x003d0900

080065b8 <HAL_RCC_ClockConfig>:
  if (pClkInitStruct == NULL)
 80065b8:	2800      	cmp	r0, #0
 80065ba:	f000 8115 	beq.w	80067e8 <HAL_RCC_ClockConfig+0x230>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065be:	4a8e      	ldr	r2, [pc, #568]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
{
 80065c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065c4:	6813      	ldr	r3, [r2, #0]
 80065c6:	4604      	mov	r4, r0
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	428b      	cmp	r3, r1
 80065ce:	460d      	mov	r5, r1
 80065d0:	d20c      	bcs.n	80065ec <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d2:	6813      	ldr	r3, [r2, #0]
 80065d4:	f023 030f 	bic.w	r3, r3, #15
 80065d8:	430b      	orrs	r3, r1
 80065da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065dc:	6813      	ldr	r3, [r2, #0]
 80065de:	f003 030f 	and.w	r3, r3, #15
 80065e2:	428b      	cmp	r3, r1
 80065e4:	d002      	beq.n	80065ec <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80065e6:	2001      	movs	r0, #1
}
 80065e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	06de      	lsls	r6, r3, #27
 80065f0:	d50d      	bpl.n	800660e <HAL_RCC_ClockConfig+0x56>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80065f2:	4982      	ldr	r1, [pc, #520]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80065f4:	6960      	ldr	r0, [r4, #20]
 80065f6:	6a0a      	ldr	r2, [r1, #32]
 80065f8:	0a12      	lsrs	r2, r2, #8
 80065fa:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80065fe:	4290      	cmp	r0, r2
 8006600:	d905      	bls.n	800660e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8006602:	6a0a      	ldr	r2, [r1, #32]
 8006604:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8006608:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800660c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660e:	0718      	lsls	r0, r3, #28
 8006610:	d50d      	bpl.n	800662e <HAL_RCC_ClockConfig+0x76>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006612:	497a      	ldr	r1, [pc, #488]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006614:	6920      	ldr	r0, [r4, #16]
 8006616:	6a0a      	ldr	r2, [r1, #32]
 8006618:	0912      	lsrs	r2, r2, #4
 800661a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800661e:	4290      	cmp	r0, r2
 8006620:	d905      	bls.n	800662e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8006622:	6a0a      	ldr	r2, [r1, #32]
 8006624:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006628:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800662c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662e:	0759      	lsls	r1, r3, #29
 8006630:	d50b      	bpl.n	800664a <HAL_RCC_ClockConfig+0x92>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006632:	4972      	ldr	r1, [pc, #456]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006634:	68e0      	ldr	r0, [r4, #12]
 8006636:	6a0a      	ldr	r2, [r1, #32]
 8006638:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800663c:	4290      	cmp	r0, r2
 800663e:	d904      	bls.n	800664a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8006640:	6a0a      	ldr	r2, [r1, #32]
 8006642:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006646:	4302      	orrs	r2, r0
 8006648:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800664a:	079a      	lsls	r2, r3, #30
 800664c:	f140 8095 	bpl.w	800677a <HAL_RCC_ClockConfig+0x1c2>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006650:	486a      	ldr	r0, [pc, #424]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006652:	68a1      	ldr	r1, [r4, #8]
 8006654:	6a02      	ldr	r2, [r0, #32]
 8006656:	f002 020f 	and.w	r2, r2, #15
 800665a:	4291      	cmp	r1, r2
 800665c:	d904      	bls.n	8006668 <HAL_RCC_ClockConfig+0xb0>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800665e:	6a02      	ldr	r2, [r0, #32]
 8006660:	f022 020f 	bic.w	r2, r2, #15
 8006664:	430a      	orrs	r2, r1
 8006666:	6202      	str	r2, [r0, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006668:	07d8      	lsls	r0, r3, #31
 800666a:	d52f      	bpl.n	80066cc <HAL_RCC_ClockConfig+0x114>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800666c:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800666e:	4b63      	ldr	r3, [pc, #396]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006670:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006672:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006674:	f000 8089 	beq.w	800678a <HAL_RCC_ClockConfig+0x1d2>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006678:	2a02      	cmp	r2, #2
 800667a:	f000 80b1 	beq.w	80067e0 <HAL_RCC_ClockConfig+0x228>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800667e:	2a01      	cmp	r2, #1
 8006680:	f000 80b6 	beq.w	80067f0 <HAL_RCC_ClockConfig+0x238>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006684:	0799      	lsls	r1, r3, #30
 8006686:	d5ae      	bpl.n	80065e6 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8006688:	4e5c      	ldr	r6, [pc, #368]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800668a:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800668e:	69f3      	ldr	r3, [r6, #28]
 8006690:	f023 0303 	bic.w	r3, r3, #3
 8006694:	4313      	orrs	r3, r2
 8006696:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 8006698:	f7fe f836 	bl	8004708 <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800669c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800669e:	4607      	mov	r7, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d07b      	beq.n	800679c <HAL_RCC_ClockConfig+0x1e4>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	f000 8084 	beq.w	80067b2 <HAL_RCC_ClockConfig+0x1fa>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d106      	bne.n	80066bc <HAL_RCC_ClockConfig+0x104>
 80066ae:	e08b      	b.n	80067c8 <HAL_RCC_ClockConfig+0x210>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80066b0:	f7fe f82a 	bl	8004708 <HAL_GetTick>
 80066b4:	1bc0      	subs	r0, r0, r7
 80066b6:	4540      	cmp	r0, r8
 80066b8:	f200 8098 	bhi.w	80067ec <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80066bc:	69f3      	ldr	r3, [r6, #28]
 80066be:	f013 0f18 	tst.w	r3, #24
 80066c2:	d1f5      	bne.n	80066b0 <HAL_RCC_ClockConfig+0xf8>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	079a      	lsls	r2, r3, #30
 80066c8:	d506      	bpl.n	80066d8 <HAL_RCC_ClockConfig+0x120>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80066ca:	68a1      	ldr	r1, [r4, #8]
 80066cc:	484b      	ldr	r0, [pc, #300]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 80066ce:	6a02      	ldr	r2, [r0, #32]
 80066d0:	f002 020f 	and.w	r2, r2, #15
 80066d4:	428a      	cmp	r2, r1
 80066d6:	d87d      	bhi.n	80067d4 <HAL_RCC_ClockConfig+0x21c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066d8:	4947      	ldr	r1, [pc, #284]	; (80067f8 <HAL_RCC_ClockConfig+0x240>)
 80066da:	680a      	ldr	r2, [r1, #0]
 80066dc:	f002 020f 	and.w	r2, r2, #15
 80066e0:	42aa      	cmp	r2, r5
 80066e2:	d90a      	bls.n	80066fa <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066e4:	680a      	ldr	r2, [r1, #0]
 80066e6:	f022 020f 	bic.w	r2, r2, #15
 80066ea:	432a      	orrs	r2, r5
 80066ec:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ee:	680a      	ldr	r2, [r1, #0]
 80066f0:	f002 020f 	and.w	r2, r2, #15
 80066f4:	42aa      	cmp	r2, r5
 80066f6:	f47f af76 	bne.w	80065e6 <HAL_RCC_ClockConfig+0x2e>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066fa:	075f      	lsls	r7, r3, #29
 80066fc:	d50b      	bpl.n	8006716 <HAL_RCC_ClockConfig+0x15e>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80066fe:	493f      	ldr	r1, [pc, #252]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006700:	68e0      	ldr	r0, [r4, #12]
 8006702:	6a0a      	ldr	r2, [r1, #32]
 8006704:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006708:	4290      	cmp	r0, r2
 800670a:	d204      	bcs.n	8006716 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800670c:	6a0a      	ldr	r2, [r1, #32]
 800670e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006712:	4302      	orrs	r2, r0
 8006714:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006716:	071e      	lsls	r6, r3, #28
 8006718:	d50d      	bpl.n	8006736 <HAL_RCC_ClockConfig+0x17e>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800671a:	4938      	ldr	r1, [pc, #224]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800671c:	6920      	ldr	r0, [r4, #16]
 800671e:	6a0a      	ldr	r2, [r1, #32]
 8006720:	0912      	lsrs	r2, r2, #4
 8006722:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8006726:	4290      	cmp	r0, r2
 8006728:	d205      	bcs.n	8006736 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800672a:	6a0a      	ldr	r2, [r1, #32]
 800672c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006730:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8006734:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006736:	06dd      	lsls	r5, r3, #27
 8006738:	d50d      	bpl.n	8006756 <HAL_RCC_ClockConfig+0x19e>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800673a:	4a30      	ldr	r2, [pc, #192]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 800673c:	6961      	ldr	r1, [r4, #20]
 800673e:	6a13      	ldr	r3, [r2, #32]
 8006740:	0a1b      	lsrs	r3, r3, #8
 8006742:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006746:	4299      	cmp	r1, r3
 8006748:	d205      	bcs.n	8006756 <HAL_RCC_ClockConfig+0x19e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800674a:	6a13      	ldr	r3, [r2, #32]
 800674c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006754:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006756:	f7ff ff0b 	bl	8006570 <HAL_RCC_GetSysClockFreq>
}
 800675a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800675e:	4603      	mov	r3, r0
 8006760:	4a26      	ldr	r2, [pc, #152]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
 8006762:	4927      	ldr	r1, [pc, #156]	; (8006800 <HAL_RCC_ClockConfig+0x248>)
 8006764:	6a12      	ldr	r2, [r2, #32]
  halstatus = HAL_InitTick(uwTickPrio);
 8006766:	4827      	ldr	r0, [pc, #156]	; (8006804 <HAL_RCC_ClockConfig+0x24c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006768:	f002 020f 	and.w	r2, r2, #15
 800676c:	5c89      	ldrb	r1, [r1, r2]
 800676e:	4a26      	ldr	r2, [pc, #152]	; (8006808 <HAL_RCC_ClockConfig+0x250>)
 8006770:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8006772:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006774:	6013      	str	r3, [r2, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8006776:	f004 bf7b 	b.w	800b670 <HAL_InitTick>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677a:	07da      	lsls	r2, r3, #31
 800677c:	d5ac      	bpl.n	80066d8 <HAL_RCC_ClockConfig+0x120>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800677e:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006780:	4b1e      	ldr	r3, [pc, #120]	; (80067fc <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006782:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006784:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006786:	f47f af77 	bne.w	8006678 <HAL_RCC_ClockConfig+0xc0>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800678a:	019f      	lsls	r7, r3, #6
 800678c:	f53f af7c 	bmi.w	8006688 <HAL_RCC_ClockConfig+0xd0>
 8006790:	e729      	b.n	80065e6 <HAL_RCC_ClockConfig+0x2e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8006792:	f7fd ffb9 	bl	8004708 <HAL_GetTick>
 8006796:	1bc3      	subs	r3, r0, r7
 8006798:	4543      	cmp	r3, r8
 800679a:	d827      	bhi.n	80067ec <HAL_RCC_ClockConfig+0x234>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800679c:	69f3      	ldr	r3, [r6, #28]
 800679e:	f003 0318 	and.w	r3, r3, #24
 80067a2:	2b18      	cmp	r3, #24
 80067a4:	d1f5      	bne.n	8006792 <HAL_RCC_ClockConfig+0x1da>
 80067a6:	e78d      	b.n	80066c4 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067a8:	f7fd ffae 	bl	8004708 <HAL_GetTick>
 80067ac:	1bc0      	subs	r0, r0, r7
 80067ae:	4540      	cmp	r0, r8
 80067b0:	d81c      	bhi.n	80067ec <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80067b2:	69f3      	ldr	r3, [r6, #28]
 80067b4:	f003 0318 	and.w	r3, r3, #24
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d1f5      	bne.n	80067a8 <HAL_RCC_ClockConfig+0x1f0>
 80067bc:	e782      	b.n	80066c4 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80067be:	f7fd ffa3 	bl	8004708 <HAL_GetTick>
 80067c2:	1bc0      	subs	r0, r0, r7
 80067c4:	4540      	cmp	r0, r8
 80067c6:	d811      	bhi.n	80067ec <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80067c8:	69f3      	ldr	r3, [r6, #28]
 80067ca:	f003 0318 	and.w	r3, r3, #24
 80067ce:	2b08      	cmp	r3, #8
 80067d0:	d1f5      	bne.n	80067be <HAL_RCC_ClockConfig+0x206>
 80067d2:	e777      	b.n	80066c4 <HAL_RCC_ClockConfig+0x10c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 80067d4:	6a02      	ldr	r2, [r0, #32]
 80067d6:	f022 020f 	bic.w	r2, r2, #15
 80067da:	4311      	orrs	r1, r2
 80067dc:	6201      	str	r1, [r0, #32]
 80067de:	e77b      	b.n	80066d8 <HAL_RCC_ClockConfig+0x120>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80067e0:	039e      	lsls	r6, r3, #14
 80067e2:	f53f af51 	bmi.w	8006688 <HAL_RCC_ClockConfig+0xd0>
 80067e6:	e6fe      	b.n	80065e6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80067e8:	2001      	movs	r0, #1
}
 80067ea:	4770      	bx	lr
          return HAL_TIMEOUT;
 80067ec:	2003      	movs	r0, #3
 80067ee:	e6fb      	b.n	80065e8 <HAL_RCC_ClockConfig+0x30>
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80067f0:	0598      	lsls	r0, r3, #22
 80067f2:	f53f af49 	bmi.w	8006688 <HAL_RCC_ClockConfig+0xd0>
 80067f6:	e6f6      	b.n	80065e6 <HAL_RCC_ClockConfig+0x2e>
 80067f8:	40022000 	.word	0x40022000
 80067fc:	44020c00 	.word	0x44020c00
 8006800:	08011ad8 	.word	0x08011ad8
 8006804:	200001b0 	.word	0x200001b0
 8006808:	200001b4 	.word	0x200001b4

0800680c <HAL_RCC_GetHCLKFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800680c:	4a15      	ldr	r2, [pc, #84]	; (8006864 <HAL_RCC_GetHCLKFreq+0x58>)
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800680e:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8006810:	69d3      	ldr	r3, [r2, #28]
 8006812:	f003 0318 	and.w	r3, r3, #24
 8006816:	2b08      	cmp	r3, #8
 8006818:	d021      	beq.n	800685e <HAL_RCC_GetHCLKFreq+0x52>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800681a:	69d3      	ldr	r3, [r2, #28]
 800681c:	f013 0f18 	tst.w	r3, #24
 8006820:	d012      	beq.n	8006848 <HAL_RCC_GetHCLKFreq+0x3c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006822:	69d3      	ldr	r3, [r2, #28]
 8006824:	f003 0318 	and.w	r3, r3, #24
 8006828:	2b10      	cmp	r3, #16
 800682a:	d016      	beq.n	800685a <HAL_RCC_GetHCLKFreq+0x4e>
 800682c:	f7ff fe10 	bl	8006450 <HAL_RCC_GetSysClockFreq.part.0>

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <HAL_RCC_GetHCLKFreq+0x58>)
 8006832:	490d      	ldr	r1, [pc, #52]	; (8006868 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	4a0d      	ldr	r2, [pc, #52]	; (800686c <HAL_RCC_GetHCLKFreq+0x60>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006838:	f003 030f 	and.w	r3, r3, #15
 800683c:	5ccb      	ldrb	r3, [r1, r3]
 800683e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006842:	40d8      	lsrs	r0, r3
 8006844:	6010      	str	r0, [r2, #0]

  return SystemCoreClock;
}
 8006846:	bd08      	pop	{r3, pc}
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8006848:	6813      	ldr	r3, [r2, #0]
 800684a:	069b      	lsls	r3, r3, #26
 800684c:	d505      	bpl.n	800685a <HAL_RCC_GetHCLKFreq+0x4e>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800684e:	6813      	ldr	r3, [r2, #0]
 8006850:	4807      	ldr	r0, [pc, #28]	; (8006870 <HAL_RCC_GetHCLKFreq+0x64>)
 8006852:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8006856:	40d8      	lsrs	r0, r3
 8006858:	e7ea      	b.n	8006830 <HAL_RCC_GetHCLKFreq+0x24>
      sysclockfreq = (uint32_t) HSI_VALUE;
 800685a:	4805      	ldr	r0, [pc, #20]	; (8006870 <HAL_RCC_GetHCLKFreq+0x64>)
 800685c:	e7e8      	b.n	8006830 <HAL_RCC_GetHCLKFreq+0x24>
    sysclockfreq = CSI_VALUE;
 800685e:	4805      	ldr	r0, [pc, #20]	; (8006874 <HAL_RCC_GetHCLKFreq+0x68>)
 8006860:	e7e6      	b.n	8006830 <HAL_RCC_GetHCLKFreq+0x24>
 8006862:	bf00      	nop
 8006864:	44020c00 	.word	0x44020c00
 8006868:	08011ad8 	.word	0x08011ad8
 800686c:	200001b4 	.word	0x200001b4
 8006870:	017d7840 	.word	0x017d7840
 8006874:	003d0900 	.word	0x003d0900

08006878 <HAL_RCC_OscConfig>:
  if (pOscInitStruct == NULL)
 8006878:	2800      	cmp	r0, #0
 800687a:	f000 8258 	beq.w	8006d2e <HAL_RCC_OscConfig+0x4b6>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800687e:	4aaa      	ldr	r2, [pc, #680]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006880:	6803      	ldr	r3, [r0, #0]
{
 8006882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006886:	69d5      	ldr	r5, [r2, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8006888:	6a96      	ldr	r6, [r2, #40]	; 0x28
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800688a:	06df      	lsls	r7, r3, #27
 800688c:	4604      	mov	r4, r0
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800688e:	f005 0518 	and.w	r5, r5, #24
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8006892:	f006 0603 	and.w	r6, r6, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006896:	d524      	bpl.n	80068e2 <HAL_RCC_OscConfig+0x6a>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8006898:	2d08      	cmp	r5, #8
 800689a:	f000 8157 	beq.w	8006b4c <HAL_RCC_OscConfig+0x2d4>
 800689e:	2d18      	cmp	r5, #24
 80068a0:	f000 8151 	beq.w	8006b46 <HAL_RCC_OscConfig+0x2ce>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80068a4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80068a6:	4fa0      	ldr	r7, [pc, #640]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8134 	beq.w	8006b16 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b4:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80068b6:	f7fd ff27 	bl	8004708 <HAL_GetTick>
 80068ba:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80068bc:	e006      	b.n	80068cc <HAL_RCC_OscConfig+0x54>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80068be:	f7fd ff23 	bl	8004708 <HAL_GetTick>
 80068c2:	eba0 0008 	sub.w	r0, r0, r8
 80068c6:	2802      	cmp	r0, #2
 80068c8:	f200 818b 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	0598      	lsls	r0, r3, #22
 80068d0:	d5f5      	bpl.n	80068be <HAL_RCC_OscConfig+0x46>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	6a22      	ldr	r2, [r4, #32]
 80068d6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80068da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068de:	61bb      	str	r3, [r7, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068e0:	6823      	ldr	r3, [r4, #0]
 80068e2:	07da      	lsls	r2, r3, #31
 80068e4:	d538      	bpl.n	8006958 <HAL_RCC_OscConfig+0xe0>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80068e6:	2d10      	cmp	r5, #16
 80068e8:	f000 8141 	beq.w	8006b6e <HAL_RCC_OscConfig+0x2f6>
 80068ec:	2d18      	cmp	r5, #24
 80068ee:	f000 813b 	beq.w	8006b68 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80068f2:	6863      	ldr	r3, [r4, #4]
 80068f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068f8:	d018      	beq.n	800692c <HAL_RCC_OscConfig+0xb4>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 8174 	beq.w	8006be8 <HAL_RCC_OscConfig+0x370>
 8006900:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006904:	f000 8284 	beq.w	8006e10 <HAL_RCC_OscConfig+0x598>
 8006908:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800690c:	4b86      	ldr	r3, [pc, #536]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	f000 829c 	beq.w	8006e4c <HAL_RCC_OscConfig+0x5d4>
 8006914:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006918:	601a      	str	r2, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006928:	601a      	str	r2, [r3, #0]
 800692a:	e004      	b.n	8006936 <HAL_RCC_OscConfig+0xbe>
 800692c:	4a7e      	ldr	r2, [pc, #504]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
 800692e:	6813      	ldr	r3, [r2, #0]
 8006930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006934:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006936:	f7fd fee7 	bl	8004708 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800693a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8006b28 <HAL_RCC_OscConfig+0x2b0>
        tickstart = HAL_GetTick();
 800693e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006940:	e005      	b.n	800694e <HAL_RCC_OscConfig+0xd6>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006942:	f7fd fee1 	bl	8004708 <HAL_GetTick>
 8006946:	1bc0      	subs	r0, r0, r7
 8006948:	2864      	cmp	r0, #100	; 0x64
 800694a:	f200 814a 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800694e:	f8d8 3000 	ldr.w	r3, [r8]
 8006952:	039b      	lsls	r3, r3, #14
 8006954:	d5f5      	bpl.n	8006942 <HAL_RCC_OscConfig+0xca>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	0799      	lsls	r1, r3, #30
 800695a:	d529      	bpl.n	80069b0 <HAL_RCC_OscConfig+0x138>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800695c:	2d00      	cmp	r5, #0
 800695e:	f000 80b9 	beq.w	8006ad4 <HAL_RCC_OscConfig+0x25c>
 8006962:	2d18      	cmp	r5, #24
 8006964:	f000 8262 	beq.w	8006e2c <HAL_RCC_OscConfig+0x5b4>
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8006968:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800696a:	4e6f      	ldr	r6, [pc, #444]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800696c:	2b00      	cmp	r3, #0
 800696e:	f000 81cb 	beq.w	8006d08 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006972:	6833      	ldr	r3, [r6, #0]
 8006974:	6922      	ldr	r2, [r4, #16]
 8006976:	f023 0318 	bic.w	r3, r3, #24
 800697a:	4313      	orrs	r3, r2
 800697c:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 800697e:	6833      	ldr	r3, [r6, #0]
 8006980:	f043 0301 	orr.w	r3, r3, #1
 8006984:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006986:	f7fd febf 	bl	8004708 <HAL_GetTick>
 800698a:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800698c:	e005      	b.n	800699a <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800698e:	f7fd febb 	bl	8004708 <HAL_GetTick>
 8006992:	1bc0      	subs	r0, r0, r7
 8006994:	2802      	cmp	r0, #2
 8006996:	f200 8124 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800699a:	6833      	ldr	r3, [r6, #0]
 800699c:	079b      	lsls	r3, r3, #30
 800699e:	d5f6      	bpl.n	800698e <HAL_RCC_OscConfig+0x116>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80069a0:	6933      	ldr	r3, [r6, #16]
 80069a2:	6962      	ldr	r2, [r4, #20]
 80069a4:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80069a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ac:	6133      	str	r3, [r6, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	0719      	lsls	r1, r3, #28
 80069b2:	d519      	bpl.n	80069e8 <HAL_RCC_OscConfig+0x170>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80069b4:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_LSI_ENABLE();
 80069b6:	4e5c      	ldr	r6, [pc, #368]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8130 	beq.w	8006c1e <HAL_RCC_OscConfig+0x3a6>
      __HAL_RCC_LSI_ENABLE();
 80069be:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80069c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80069c6:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 80069ca:	f7fd fe9d 	bl	8004708 <HAL_GetTick>
 80069ce:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80069d0:	e005      	b.n	80069de <HAL_RCC_OscConfig+0x166>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80069d2:	f7fd fe99 	bl	8004708 <HAL_GetTick>
 80069d6:	1bc0      	subs	r0, r0, r7
 80069d8:	2802      	cmp	r0, #2
 80069da:	f200 8102 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80069de:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80069e2:	011a      	lsls	r2, r3, #4
 80069e4:	d5f5      	bpl.n	80069d2 <HAL_RCC_OscConfig+0x15a>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	075e      	lsls	r6, r3, #29
 80069ea:	d536      	bpl.n	8006a5a <HAL_RCC_OscConfig+0x1e2>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 80069ec:	4e4f      	ldr	r6, [pc, #316]	; (8006b2c <HAL_RCC_OscConfig+0x2b4>)
 80069ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80069f0:	07d8      	lsls	r0, r3, #31
 80069f2:	f140 80e6 	bpl.w	8006bc2 <HAL_RCC_OscConfig+0x34a>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80069f6:	68a3      	ldr	r3, [r4, #8]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	f000 821f 	beq.w	8006e3c <HAL_RCC_OscConfig+0x5c4>
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80bc 	beq.w	8006b7c <HAL_RCC_OscConfig+0x304>
 8006a04:	2b05      	cmp	r3, #5
 8006a06:	f000 822d 	beq.w	8006e64 <HAL_RCC_OscConfig+0x5ec>
 8006a0a:	2b85      	cmp	r3, #133	; 0x85
 8006a0c:	4b46      	ldr	r3, [pc, #280]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
 8006a0e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006a12:	f000 823b 	beq.w	8006e8c <HAL_RCC_OscConfig+0x614>
 8006a16:	f022 0201 	bic.w	r2, r2, #1
 8006a1a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006a1e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006a2a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006a2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a32:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8006a36:	f7fd fe67 	bl	8004708 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a3a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006a3e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a40:	4f39      	ldr	r7, [pc, #228]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
 8006a42:	e005      	b.n	8006a50 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a44:	f7fd fe60 	bl	8004708 <HAL_GetTick>
 8006a48:	1b80      	subs	r0, r0, r6
 8006a4a:	4540      	cmp	r0, r8
 8006a4c:	f200 80c9 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a50:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006a54:	079a      	lsls	r2, r3, #30
 8006a56:	d5f5      	bpl.n	8006a44 <HAL_RCC_OscConfig+0x1cc>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	069e      	lsls	r6, r3, #26
 8006a5c:	d515      	bpl.n	8006a8a <HAL_RCC_OscConfig+0x212>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8006a60:	4e31      	ldr	r6, [pc, #196]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 8165 	beq.w	8006d32 <HAL_RCC_OscConfig+0x4ba>
      __HAL_RCC_HSI48_ENABLE();
 8006a68:	6833      	ldr	r3, [r6, #0]
 8006a6a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a6e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006a70:	f7fd fe4a 	bl	8004708 <HAL_GetTick>
 8006a74:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006a76:	e005      	b.n	8006a84 <HAL_RCC_OscConfig+0x20c>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006a78:	f7fd fe46 	bl	8004708 <HAL_GetTick>
 8006a7c:	1bc0      	subs	r0, r0, r7
 8006a7e:	2802      	cmp	r0, #2
 8006a80:	f200 80af 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006a84:	6833      	ldr	r3, [r6, #0]
 8006a86:	0498      	lsls	r0, r3, #18
 8006a88:	d5f6      	bpl.n	8006a78 <HAL_RCC_OscConfig+0x200>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f000 8139 	beq.w	8006d04 <HAL_RCC_OscConfig+0x48c>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a92:	2d18      	cmp	r5, #24
 8006a94:	f000 816e 	beq.w	8006d74 <HAL_RCC_OscConfig+0x4fc>
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	f000 80d4 	beq.w	8006c46 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_PLL1_DISABLE();
 8006a9e:	4c22      	ldr	r4, [pc, #136]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
 8006aa0:	6823      	ldr	r3, [r4, #0]
 8006aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006aa6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006aa8:	f7fd fe2e 	bl	8004708 <HAL_GetTick>
 8006aac:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006aae:	e005      	b.n	8006abc <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006ab0:	f7fd fe2a 	bl	8004708 <HAL_GetTick>
 8006ab4:	1b40      	subs	r0, r0, r5
 8006ab6:	2802      	cmp	r0, #2
 8006ab8:	f200 8093 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006abc:	6823      	ldr	r3, [r4, #0]
 8006abe:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8006ac2:	d1f5      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x238>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006ac4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  return HAL_OK;
 8006ac6:	4618      	mov	r0, r3
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8006ac8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8006acc:	f022 0203 	bic.w	r2, r2, #3
 8006ad0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ad2:	e051      	b.n	8006b78 <HAL_RCC_OscConfig+0x300>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006ad4:	68e3      	ldr	r3, [r4, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d04d      	beq.n	8006b76 <HAL_RCC_OscConfig+0x2fe>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8006ada:	4a13      	ldr	r2, [pc, #76]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
 8006adc:	6921      	ldr	r1, [r4, #16]
 8006ade:	6813      	ldr	r3, [r2, #0]
 8006ae0:	f003 0318 	and.w	r3, r3, #24
 8006ae4:	428b      	cmp	r3, r1
 8006ae6:	f040 8136 	bne.w	8006d56 <HAL_RCC_OscConfig+0x4de>
        tickstart = HAL_GetTick();
 8006aea:	f7fd fe0d 	bl	8004708 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aee:	4f0e      	ldr	r7, [pc, #56]	; (8006b28 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8006af0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006af2:	e004      	b.n	8006afe <HAL_RCC_OscConfig+0x286>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006af4:	f7fd fe08 	bl	8004708 <HAL_GetTick>
 8006af8:	1b80      	subs	r0, r0, r6
 8006afa:	2802      	cmp	r0, #2
 8006afc:	d871      	bhi.n	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	079a      	lsls	r2, r3, #30
 8006b02:	d5f7      	bpl.n	8006af4 <HAL_RCC_OscConfig+0x27c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6962      	ldr	r2, [r4, #20]
 8006b08:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006b0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b10:	613b      	str	r3, [r7, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b12:	6823      	ldr	r3, [r4, #0]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006b14:	e74c      	b.n	80069b0 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_CSI_DISABLE();
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b1c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8006b1e:	f7fd fdf3 	bl	8004708 <HAL_GetTick>
 8006b22:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006b24:	e00a      	b.n	8006b3c <HAL_RCC_OscConfig+0x2c4>
 8006b26:	bf00      	nop
 8006b28:	44020c00 	.word	0x44020c00
 8006b2c:	44020800 	.word	0x44020800
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8006b30:	f7fd fdea 	bl	8004708 <HAL_GetTick>
 8006b34:	eba0 0008 	sub.w	r0, r0, r8
 8006b38:	2802      	cmp	r0, #2
 8006b3a:	d852      	bhi.n	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	0599      	lsls	r1, r3, #22
 8006b40:	d4f6      	bmi.n	8006b30 <HAL_RCC_OscConfig+0x2b8>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	e6cd      	b.n	80068e2 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8006b46:	2e02      	cmp	r6, #2
 8006b48:	f47f aeac 	bne.w	80068a4 <HAL_RCC_OscConfig+0x2c>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8006b4c:	69e2      	ldr	r2, [r4, #28]
 8006b4e:	b192      	cbz	r2, 8006b76 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8006b50:	49ad      	ldr	r1, [pc, #692]	; (8006e08 <HAL_RCC_OscConfig+0x590>)
 8006b52:	6a20      	ldr	r0, [r4, #32]
 8006b54:	698a      	ldr	r2, [r1, #24]
 8006b56:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8006b5a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8006b5e:	618a      	str	r2, [r1, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b60:	07da      	lsls	r2, r3, #31
 8006b62:	f57f aef9 	bpl.w	8006958 <HAL_RCC_OscConfig+0xe0>
 8006b66:	e6be      	b.n	80068e6 <HAL_RCC_OscConfig+0x6e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8006b68:	2e03      	cmp	r6, #3
 8006b6a:	f47f aec2 	bne.w	80068f2 <HAL_RCC_OscConfig+0x7a>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8006b6e:	6862      	ldr	r2, [r4, #4]
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	f47f aef1 	bne.w	8006958 <HAL_RCC_OscConfig+0xe0>
        return HAL_ERROR;
 8006b76:	2001      	movs	r0, #1
}
 8006b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006b7c:	4ea2      	ldr	r6, [pc, #648]	; (8006e08 <HAL_RCC_OscConfig+0x590>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b7e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006b82:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8006b86:	f023 0301 	bic.w	r3, r3, #1
 8006b8a:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8006b8e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8006b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b96:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8006b9a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8006b9e:	f023 0304 	bic.w	r3, r3, #4
 8006ba2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8006ba6:	f7fd fdaf 	bl	8004708 <HAL_GetTick>
 8006baa:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bac:	e004      	b.n	8006bb8 <HAL_RCC_OscConfig+0x340>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bae:	f7fd fdab 	bl	8004708 <HAL_GetTick>
 8006bb2:	1bc0      	subs	r0, r0, r7
 8006bb4:	4540      	cmp	r0, r8
 8006bb6:	d814      	bhi.n	8006be2 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006bb8:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8006bbc:	079b      	lsls	r3, r3, #30
 8006bbe:	d4f6      	bmi.n	8006bae <HAL_RCC_OscConfig+0x336>
 8006bc0:	e74a      	b.n	8006a58 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006bc2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006bc4:	f043 0301 	orr.w	r3, r3, #1
 8006bc8:	6273      	str	r3, [r6, #36]	; 0x24
      tickstart = HAL_GetTick();
 8006bca:	f7fd fd9d 	bl	8004708 <HAL_GetTick>
 8006bce:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006bd0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006bd2:	07d9      	lsls	r1, r3, #31
 8006bd4:	f53f af0f 	bmi.w	80069f6 <HAL_RCC_OscConfig+0x17e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006bd8:	f7fd fd96 	bl	8004708 <HAL_GetTick>
 8006bdc:	1bc0      	subs	r0, r0, r7
 8006bde:	2802      	cmp	r0, #2
 8006be0:	d9f6      	bls.n	8006bd0 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8006be2:	2003      	movs	r0, #3
}
 8006be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006be8:	4f87      	ldr	r7, [pc, #540]	; (8006e08 <HAL_RCC_OscConfig+0x590>)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bf0:	603b      	str	r3, [r7, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c00:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8006c02:	f7fd fd81 	bl	8004708 <HAL_GetTick>
 8006c06:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c08:	e005      	b.n	8006c16 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8006c0a:	f7fd fd7d 	bl	8004708 <HAL_GetTick>
 8006c0e:	eba0 0008 	sub.w	r0, r0, r8
 8006c12:	2864      	cmp	r0, #100	; 0x64
 8006c14:	d8e5      	bhi.n	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	0398      	lsls	r0, r3, #14
 8006c1a:	d4f6      	bmi.n	8006c0a <HAL_RCC_OscConfig+0x392>
 8006c1c:	e69b      	b.n	8006956 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_LSI_DISABLE();
 8006c1e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8006c22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c26:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8006c2a:	f7fd fd6d 	bl	8004708 <HAL_GetTick>
 8006c2e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c30:	e004      	b.n	8006c3c <HAL_RCC_OscConfig+0x3c4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8006c32:	f7fd fd69 	bl	8004708 <HAL_GetTick>
 8006c36:	1bc0      	subs	r0, r0, r7
 8006c38:	2802      	cmp	r0, #2
 8006c3a:	d8d2      	bhi.n	8006be2 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c3c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8006c40:	011b      	lsls	r3, r3, #4
 8006c42:	d4f6      	bmi.n	8006c32 <HAL_RCC_OscConfig+0x3ba>
 8006c44:	e6cf      	b.n	80069e6 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL1_DISABLE();
 8006c46:	4d70      	ldr	r5, [pc, #448]	; (8006e08 <HAL_RCC_OscConfig+0x590>)
 8006c48:	682b      	ldr	r3, [r5, #0]
 8006c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c4e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006c50:	f7fd fd5a 	bl	8004708 <HAL_GetTick>
 8006c54:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c56:	e004      	b.n	8006c62 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006c58:	f7fd fd56 	bl	8004708 <HAL_GetTick>
 8006c5c:	1b80      	subs	r0, r0, r6
 8006c5e:	2802      	cmp	r0, #2
 8006c60:	d8bf      	bhi.n	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006c62:	682b      	ldr	r3, [r5, #0]
 8006c64:	019a      	lsls	r2, r3, #6
 8006c66:	d4f7      	bmi.n	8006c58 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006c68:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006c6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c6c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c70:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006c72:	f023 0303 	bic.w	r3, r3, #3
 8006c76:	430b      	orrs	r3, r1
 8006c78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006c7c:	62ab      	str	r3, [r5, #40]	; 0x28
 8006c7e:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
 8006c82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c84:	3b01      	subs	r3, #1
 8006c86:	3a01      	subs	r2, #1
 8006c88:	025b      	lsls	r3, r3, #9
 8006c8a:	0412      	lsls	r2, r2, #16
 8006c8c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006c90:	3901      	subs	r1, #1
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	4313      	orrs	r3, r2
 8006c96:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	6c22      	ldr	r2, [r4, #64]	; 0x40
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006c9e:	4e5a      	ldr	r6, [pc, #360]	; (8006e08 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8006ca0:	3a01      	subs	r2, #1
 8006ca2:	0612      	lsls	r2, r2, #24
 8006ca4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006cac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006cae:	f023 0310 	bic.w	r3, r3, #16
 8006cb2:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006cb4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	63ab      	str	r3, [r5, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006cba:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006cbc:	f043 0310 	orr.w	r3, r3, #16
 8006cc0:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8006cc2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006cc4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006cc6:	f023 030c 	bic.w	r3, r3, #12
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8006cce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006cd0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8006cd2:	f023 0320 	bic.w	r3, r3, #32
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006cda:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8006cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ce0:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_ENABLE();
 8006ce2:	682b      	ldr	r3, [r5, #0]
 8006ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ce8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8006cea:	f7fd fd0d 	bl	8004708 <HAL_GetTick>
 8006cee:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006cf0:	e005      	b.n	8006cfe <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8006cf2:	f7fd fd09 	bl	8004708 <HAL_GetTick>
 8006cf6:	1b00      	subs	r0, r0, r4
 8006cf8:	2802      	cmp	r0, #2
 8006cfa:	f63f af72 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006cfe:	6833      	ldr	r3, [r6, #0]
 8006d00:	019b      	lsls	r3, r3, #6
 8006d02:	d5f6      	bpl.n	8006cf2 <HAL_RCC_OscConfig+0x47a>
  return HAL_OK;
 8006d04:	2000      	movs	r0, #0
 8006d06:	e737      	b.n	8006b78 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_DISABLE();
 8006d08:	6833      	ldr	r3, [r6, #0]
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006d10:	f7fd fcfa 	bl	8004708 <HAL_GetTick>
 8006d14:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d16:	e005      	b.n	8006d24 <HAL_RCC_OscConfig+0x4ac>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8006d18:	f7fd fcf6 	bl	8004708 <HAL_GetTick>
 8006d1c:	1bc0      	subs	r0, r0, r7
 8006d1e:	2802      	cmp	r0, #2
 8006d20:	f63f af5f 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d24:	6833      	ldr	r3, [r6, #0]
 8006d26:	0798      	lsls	r0, r3, #30
 8006d28:	d4f6      	bmi.n	8006d18 <HAL_RCC_OscConfig+0x4a0>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	e640      	b.n	80069b0 <HAL_RCC_OscConfig+0x138>
    return HAL_ERROR;
 8006d2e:	2001      	movs	r0, #1
}
 8006d30:	4770      	bx	lr
      __HAL_RCC_HSI48_DISABLE();
 8006d32:	6833      	ldr	r3, [r6, #0]
 8006d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d38:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006d3a:	f7fd fce5 	bl	8004708 <HAL_GetTick>
 8006d3e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006d40:	e005      	b.n	8006d4e <HAL_RCC_OscConfig+0x4d6>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8006d42:	f7fd fce1 	bl	8004708 <HAL_GetTick>
 8006d46:	1bc0      	subs	r0, r0, r7
 8006d48:	2802      	cmp	r0, #2
 8006d4a:	f63f af4a 	bhi.w	8006be2 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006d4e:	6833      	ldr	r3, [r6, #0]
 8006d50:	0499      	lsls	r1, r3, #18
 8006d52:	d4f6      	bmi.n	8006d42 <HAL_RCC_OscConfig+0x4ca>
 8006d54:	e699      	b.n	8006a8a <HAL_RCC_OscConfig+0x212>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8006d56:	6813      	ldr	r3, [r2, #0]
 8006d58:	f023 0318 	bic.w	r3, r3, #24
 8006d5c:	430b      	orrs	r3, r1
 8006d5e:	6013      	str	r3, [r2, #0]
            (void) HAL_RCC_GetHCLKFreq();
 8006d60:	f7ff fd54 	bl	800680c <HAL_RCC_GetHCLKFreq>
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006d64:	4b29      	ldr	r3, [pc, #164]	; (8006e0c <HAL_RCC_OscConfig+0x594>)
 8006d66:	6818      	ldr	r0, [r3, #0]
 8006d68:	f004 fc82 	bl	800b670 <HAL_InitTick>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	f43f aebc 	beq.w	8006aea <HAL_RCC_OscConfig+0x272>
 8006d72:	e700      	b.n	8006b76 <HAL_RCC_OscConfig+0x2fe>
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006d74:	4a24      	ldr	r2, [pc, #144]	; (8006e08 <HAL_RCC_OscConfig+0x590>)
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d76:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8006d78:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006d7a:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d7c:	f43f aefb 	beq.w	8006b76 <HAL_RCC_OscConfig+0x2fe>
 8006d80:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006d82:	f001 0303 	and.w	r3, r1, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d86:	4283      	cmp	r3, r0
 8006d88:	f47f aef5 	bne.w	8006b76 <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006d8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006d8e:	f3c1 2105 	ubfx	r1, r1, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8006d92:	4299      	cmp	r1, r3
 8006d94:	f47f aeef 	bne.w	8006b76 <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006d98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d9a:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8006d9e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8006da0:	4299      	cmp	r1, r3
 8006da2:	f47f aee8 	bne.w	8006b76 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006da6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006da8:	f3c5 2146 	ubfx	r1, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006dac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8006dae:	4299      	cmp	r1, r3
 8006db0:	f47f aee1 	bne.w	8006b76 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006db4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006db6:	f3c5 4106 	ubfx	r1, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006dba:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8006dbc:	4299      	cmp	r1, r3
 8006dbe:	f47f aeda 	bne.w	8006b76 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006dc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006dc4:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8006dc8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8006dca:	429d      	cmp	r5, r3
 8006dcc:	f47f aed3 	bne.w	8006b76 <HAL_RCC_OscConfig+0x2fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8006dd0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8006dd2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006dd4:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d093      	beq.n	8006d04 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006ddc:	4a0a      	ldr	r2, [pc, #40]	; (8006e08 <HAL_RCC_OscConfig+0x590>)
 8006dde:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006de0:	f023 0310 	bic.w	r3, r3, #16
 8006de4:	6293      	str	r3, [r2, #40]	; 0x28
        tickstart = HAL_GetTick();
 8006de6:	f7fd fc8f 	bl	8004708 <HAL_GetTick>
 8006dea:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006dec:	f7fd fc8c 	bl	8004708 <HAL_GetTick>
 8006df0:	42a8      	cmp	r0, r5
 8006df2:	d0fb      	beq.n	8006dec <HAL_RCC_OscConfig+0x574>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006df4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006df6:	4b04      	ldr	r3, [pc, #16]	; (8006e08 <HAL_RCC_OscConfig+0x590>)
 8006df8:	00d2      	lsls	r2, r2, #3
 8006dfa:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return HAL_OK;
 8006dfe:	2000      	movs	r0, #0
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006e00:	f042 0210 	orr.w	r2, r2, #16
 8006e04:	629a      	str	r2, [r3, #40]	; 0x28
 8006e06:	e6b7      	b.n	8006b78 <HAL_RCC_OscConfig+0x300>
 8006e08:	44020c00 	.word	0x44020c00
 8006e0c:	200001b0 	.word	0x200001b0
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006e10:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <HAL_RCC_OscConfig+0x638>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e28:	601a      	str	r2, [r3, #0]
 8006e2a:	e584      	b.n	8006936 <HAL_RCC_OscConfig+0xbe>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006e2c:	2e01      	cmp	r6, #1
 8006e2e:	f47f ad9b 	bne.w	8006968 <HAL_RCC_OscConfig+0xf0>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8006e32:	68e3      	ldr	r3, [r4, #12]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f47f ae58 	bne.w	8006aea <HAL_RCC_OscConfig+0x272>
 8006e3a:	e69c      	b.n	8006b76 <HAL_RCC_OscConfig+0x2fe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006e3c:	4a1c      	ldr	r2, [pc, #112]	; (8006eb0 <HAL_RCC_OscConfig+0x638>)
 8006e3e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006e4a:	e5f4      	b.n	8006a36 <HAL_RCC_OscConfig+0x1be>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006e4c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e568      	b.n	8006936 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006e64:	4b12      	ldr	r3, [pc, #72]	; (8006eb0 <HAL_RCC_OscConfig+0x638>)
 8006e66:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006e6a:	f042 0204 	orr.w	r2, r2, #4
 8006e6e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006e72:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e7a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006e7e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006e82:	f042 0201 	orr.w	r2, r2, #1
 8006e86:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006e8a:	e5d4      	b.n	8006a36 <HAL_RCC_OscConfig+0x1be>
 8006e8c:	f042 0204 	orr.w	r2, r2, #4
 8006e90:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006e94:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006e98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e9c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006ea0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006ea4:	f042 0201 	orr.w	r2, r2, #1
 8006ea8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8006eac:	e5c3      	b.n	8006a36 <HAL_RCC_OscConfig+0x1be>
 8006eae:	bf00      	nop
 8006eb0:	44020c00 	.word	0x44020c00

08006eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006eb4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006eb6:	f7ff fb5b 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 8006eba:	4a0a      	ldr	r2, [pc, #40]	; (8006ee4 <HAL_RCC_GetPCLK1Freq+0x30>)
 8006ebc:	490a      	ldr	r1, [pc, #40]	; (8006ee8 <HAL_RCC_GetPCLK1Freq+0x34>)
 8006ebe:	6a13      	ldr	r3, [r2, #32]
 8006ec0:	4c0a      	ldr	r4, [pc, #40]	; (8006eec <HAL_RCC_GetPCLK1Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006ec2:	f003 030f 	and.w	r3, r3, #15
 8006ec6:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006ec8:	4909      	ldr	r1, [pc, #36]	; (8006ef0 <HAL_RCC_GetPCLK1Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006eca:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ece:	40d8      	lsrs	r0, r3
 8006ed0:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8006ed2:	6a13      	ldr	r3, [r2, #32]
 8006ed4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006ed8:	5ccb      	ldrb	r3, [r1, r3]
 8006eda:	f003 031f 	and.w	r3, r3, #31
}
 8006ede:	40d8      	lsrs	r0, r3
 8006ee0:	bd10      	pop	{r4, pc}
 8006ee2:	bf00      	nop
 8006ee4:	44020c00 	.word	0x44020c00
 8006ee8:	08011ad8 	.word	0x08011ad8
 8006eec:	200001b4 	.word	0x200001b4
 8006ef0:	08011ae8 	.word	0x08011ae8

08006ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ef4:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006ef6:	f7ff fb3b 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 8006efa:	4a0a      	ldr	r2, [pc, #40]	; (8006f24 <HAL_RCC_GetPCLK2Freq+0x30>)
 8006efc:	490a      	ldr	r1, [pc, #40]	; (8006f28 <HAL_RCC_GetPCLK2Freq+0x34>)
 8006efe:	6a13      	ldr	r3, [r2, #32]
 8006f00:	4c0a      	ldr	r4, [pc, #40]	; (8006f2c <HAL_RCC_GetPCLK2Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006f08:	4909      	ldr	r1, [pc, #36]	; (8006f30 <HAL_RCC_GetPCLK2Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006f0a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006f0e:	40d8      	lsrs	r0, r3
 8006f10:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006f12:	6a13      	ldr	r3, [r2, #32]
 8006f14:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006f18:	5ccb      	ldrb	r3, [r1, r3]
 8006f1a:	f003 031f 	and.w	r3, r3, #31
}
 8006f1e:	40d8      	lsrs	r0, r3
 8006f20:	bd10      	pop	{r4, pc}
 8006f22:	bf00      	nop
 8006f24:	44020c00 	.word	0x44020c00
 8006f28:	08011ad8 	.word	0x08011ad8
 8006f2c:	200001b4 	.word	0x200001b4
 8006f30:	08011ae8 	.word	0x08011ae8

08006f34 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006f34:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006f36:	f7ff fb1b 	bl	8006570 <HAL_RCC_GetSysClockFreq>
 8006f3a:	4a0a      	ldr	r2, [pc, #40]	; (8006f64 <HAL_RCC_GetPCLK3Freq+0x30>)
 8006f3c:	490a      	ldr	r1, [pc, #40]	; (8006f68 <HAL_RCC_GetPCLK3Freq+0x34>)
 8006f3e:	6a13      	ldr	r3, [r2, #32]
 8006f40:	4c0a      	ldr	r4, [pc, #40]	; (8006f6c <HAL_RCC_GetPCLK3Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006f48:	4909      	ldr	r1, [pc, #36]	; (8006f70 <HAL_RCC_GetPCLK3Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006f4a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006f4e:	40d8      	lsrs	r0, r3
 8006f50:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006f52:	6a13      	ldr	r3, [r2, #32]
 8006f54:	f3c3 3302 	ubfx	r3, r3, #12, #3
 8006f58:	5ccb      	ldrb	r3, [r1, r3]
 8006f5a:	f003 031f 	and.w	r3, r3, #31
}
 8006f5e:	40d8      	lsrs	r0, r3
 8006f60:	bd10      	pop	{r4, pc}
 8006f62:	bf00      	nop
 8006f64:	44020c00 	.word	0x44020c00
 8006f68:	08011ad8 	.word	0x08011ad8
 8006f6c:	200001b4 	.word	0x200001b4
 8006f70:	08011ae8 	.word	0x08011ae8

08006f74 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8006f74:	231f      	movs	r3, #31
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006f76:	4a0f      	ldr	r2, [pc, #60]	; (8006fb4 <HAL_RCC_GetClockConfig+0x40>)
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8006f78:	6003      	str	r3, [r0, #0]
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006f7a:	69d3      	ldr	r3, [r2, #28]
{
 8006f7c:	b410      	push	{r4}
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	6043      	str	r3, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8006f84:	6a13      	ldr	r3, [r2, #32]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f86:	4c0c      	ldr	r4, [pc, #48]	; (8006fb8 <HAL_RCC_GetClockConfig+0x44>)
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 8006f88:	f003 020f 	and.w	r2, r3, #15
 8006f8c:	6082      	str	r2, [r0, #8]
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8006f8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006f92:	60c2      	str	r2, [r0, #12]
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8006f94:	091a      	lsrs	r2, r3, #4
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8006f96:	0a1b      	lsrs	r3, r3, #8
 8006f98:	f003 0370 	and.w	r3, r3, #112	; 0x70
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8006f9c:	f002 0270 	and.w	r2, r2, #112	; 0x70
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8006fa0:	e9c0 2304 	strd	r2, r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006fa4:	6823      	ldr	r3, [r4, #0]
}
 8006fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006faa:	f003 030f 	and.w	r3, r3, #15
 8006fae:	600b      	str	r3, [r1, #0]
}
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	44020c00 	.word	0x44020c00
 8006fb8:	40022000 	.word	0x40022000

08006fbc <RCCEx_PLL2_Config.part.0>:
  * @param  pll2  pointer to an RCC_PLL2InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
 8006fbc:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8006fbe:	e9d0 1200 	ldrd	r1, r2, [r0]
 8006fc2:	4c2a      	ldr	r4, [pc, #168]	; (800706c <RCCEx_PLL2_Config.part.0+0xb0>)
 8006fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006fc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006fca:	f023 0303 	bic.w	r3, r3, #3
 8006fce:	430b      	orrs	r3, r1
 8006fd0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006fd4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fd6:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	3a01      	subs	r2, #1
 8006fde:	025b      	lsls	r3, r3, #9
 8006fe0:	0412      	lsls	r2, r2, #16
 8006fe2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	6881      	ldr	r1, [r0, #8]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	6942      	ldr	r2, [r0, #20]
 8006fee:	3901      	subs	r1, #1
 8006ff0:	3a01      	subs	r2, #1
 8006ff2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006ff6:	0612      	lsls	r2, r2, #24
 8006ff8:	430b      	orrs	r3, r1
 8006ffa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8006ffe:	4313      	orrs	r3, r2
 8007000:	63e3      	str	r3, [r4, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007004:	6982      	ldr	r2, [r0, #24]
 8007006:	f023 030c 	bic.w	r3, r3, #12
 800700a:	4313      	orrs	r3, r2
 800700c:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800700e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007010:	69c2      	ldr	r2, [r0, #28]
 8007012:	f023 0320 	bic.w	r3, r3, #32
 8007016:	4313      	orrs	r3, r2
 8007018:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800701a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800701c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800701e:	4313      	orrs	r3, r2
 8007020:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8007022:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007024:	f023 0310 	bic.w	r3, r3, #16
 8007028:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 800702a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800702c:	6a02      	ldr	r2, [r0, #32]
 800702e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007032:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007036:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800703a:	6423      	str	r3, [r4, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 800703c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800703e:	f043 0310 	orr.w	r3, r3, #16
 8007042:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8007044:	6823      	ldr	r3, [r4, #0]
 8007046:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800704a:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800704c:	f7fd fb5c 	bl	8004708 <HAL_GetTick>
 8007050:	4605      	mov	r5, r0

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007052:	e004      	b.n	800705e <RCCEx_PLL2_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007054:	f7fd fb58 	bl	8004708 <HAL_GetTick>
 8007058:	1b40      	subs	r0, r0, r5
 800705a:	2802      	cmp	r0, #2
 800705c:	d804      	bhi.n	8007068 <RCCEx_PLL2_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	d5f7      	bpl.n	8007054 <RCCEx_PLL2_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8007064:	2000      	movs	r0, #0

}
 8007066:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8007068:	2003      	movs	r0, #3
}
 800706a:	bd38      	pop	{r3, r4, r5, pc}
 800706c:	44020c00 	.word	0x44020c00

08007070 <RCCEx_PLL3_Config.part.0>:
  * @param  pll3  pointer to an RCC_PLL3InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
 8007070:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007072:	e9d0 1200 	ldrd	r1, r2, [r0]
 8007076:	4c2a      	ldr	r4, [pc, #168]	; (8007120 <RCCEx_PLL3_Config.part.0+0xb0>)
 8007078:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800707a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800707e:	f023 0303 	bic.w	r3, r3, #3
 8007082:	430b      	orrs	r3, r1
 8007084:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8007088:	6323      	str	r3, [r4, #48]	; 0x30
 800708a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800708e:	3b01      	subs	r3, #1
 8007090:	3a01      	subs	r2, #1
 8007092:	025b      	lsls	r3, r3, #9
 8007094:	0412      	lsls	r2, r2, #16
 8007096:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800709a:	b29b      	uxth	r3, r3
 800709c:	6881      	ldr	r1, [r0, #8]
 800709e:	4313      	orrs	r3, r2
 80070a0:	6942      	ldr	r2, [r0, #20]
 80070a2:	3901      	subs	r1, #1
 80070a4:	3a01      	subs	r2, #1
 80070a6:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80070aa:	0612      	lsls	r2, r2, #24
 80070ac:	430b      	orrs	r3, r1
 80070ae:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80070b2:	4313      	orrs	r3, r2
 80070b4:	6463      	str	r3, [r4, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80070b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070b8:	6982      	ldr	r2, [r0, #24]
 80070ba:	f023 030c 	bic.w	r3, r3, #12
 80070be:	4313      	orrs	r3, r2
 80070c0:	6323      	str	r3, [r4, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80070c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070c4:	69c2      	ldr	r2, [r0, #28]
 80070c6:	f023 0320 	bic.w	r3, r3, #32
 80070ca:	4313      	orrs	r3, r2
 80070cc:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80070ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070d0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80070d2:	4313      	orrs	r3, r2
 80070d4:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 80070d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070d8:	f023 0310 	bic.w	r3, r3, #16
 80070dc:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 80070de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80070e0:	6a02      	ldr	r2, [r0, #32]
 80070e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80070ea:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80070ee:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 80070f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80070f2:	f043 0310 	orr.w	r3, r3, #16
 80070f6:	6323      	str	r3, [r4, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 80070f8:	6823      	ldr	r3, [r4, #0]
 80070fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070fe:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007100:	f7fd fb02 	bl	8004708 <HAL_GetTick>
 8007104:	4605      	mov	r5, r0

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007106:	e004      	b.n	8007112 <RCCEx_PLL3_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007108:	f7fd fafe 	bl	8004708 <HAL_GetTick>
 800710c:	1b40      	subs	r0, r0, r5
 800710e:	2802      	cmp	r0, #2
 8007110:	d804      	bhi.n	800711c <RCCEx_PLL3_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	009b      	lsls	r3, r3, #2
 8007116:	d5f7      	bpl.n	8007108 <RCCEx_PLL3_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8007118:	2000      	movs	r0, #0
}
 800711a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 800711c:	2003      	movs	r0, #3
}
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	44020c00 	.word	0x44020c00

08007124 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007128:	e9d0 3200 	ldrd	r3, r2, [r0]
 800712c:	01d9      	lsls	r1, r3, #7
{
 800712e:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007130:	d508      	bpl.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8007132:	488f      	ldr	r0, [pc, #572]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007134:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8007136:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 800713a:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800713e:	4329      	orrs	r1, r5
 8007140:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007144:	f013 0601 	ands.w	r6, r3, #1
 8007148:	d031      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Usart1ClockSelection)
 800714a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800714c:	2905      	cmp	r1, #5
 800714e:	f201 86dd 	bhi.w	8008f0c <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 8007152:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007156:	0023      	.short	0x0023
 8007158:	00060d13 	.word	0x00060d13
 800715c:	00230023 	.word	0x00230023
 8007160:	0023      	.short	0x0023
  __HAL_RCC_PLL3_DISABLE();
 8007162:	4d83      	ldr	r5, [pc, #524]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007164:	682b      	ldr	r3, [r5, #0]
 8007166:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800716a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800716c:	f7fd facc 	bl	8004708 <HAL_GetTick>
 8007170:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007172:	e005      	b.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007174:	f7fd fac8 	bl	8004708 <HAL_GetTick>
 8007178:	1b80      	subs	r0, r0, r6
 800717a:	2802      	cmp	r0, #2
 800717c:	f201 85c6 	bhi.w	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	0098      	lsls	r0, r3, #2
 8007184:	d4f6      	bmi.n	8007174 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8007186:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800718a:	f7ff ff71 	bl	8007070 <RCCEx_PLL3_Config.part.0>
 800718e:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8007190:	2e00      	cmp	r6, #0
 8007192:	f041 86b4 	bne.w	8008efe <HAL_RCCEx_PeriphCLKConfig+0x1dda>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007196:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800719a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800719c:	2600      	movs	r6, #0
 800719e:	4d74      	ldr	r5, [pc, #464]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80071a0:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
 80071a4:	f020 0007 	bic.w	r0, r0, #7
 80071a8:	4301      	orrs	r1, r0
 80071aa:	f8c5 10d8 	str.w	r1, [r5, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071ae:	0799      	lsls	r1, r3, #30
 80071b0:	d52e      	bpl.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (pPeriphClkInit->Usart2ClockSelection)
 80071b2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80071b4:	2928      	cmp	r1, #40	; 0x28
 80071b6:	d82a      	bhi.n	800720e <HAL_RCCEx_PeriphCLKConfig+0xea>
 80071b8:	e8df f011 	tbh	[pc, r1, lsl #1]
 80071bc:	00290cb4 	.word	0x00290cb4
 80071c0:	00290029 	.word	0x00290029
 80071c4:	00290029 	.word	0x00290029
 80071c8:	00290029 	.word	0x00290029
 80071cc:	00290d6f 	.word	0x00290d6f
 80071d0:	00290029 	.word	0x00290029
 80071d4:	00290029 	.word	0x00290029
 80071d8:	00290029 	.word	0x00290029
 80071dc:	00290d89 	.word	0x00290d89
 80071e0:	00290029 	.word	0x00290029
 80071e4:	00290029 	.word	0x00290029
 80071e8:	00290029 	.word	0x00290029
 80071ec:	00290cb4 	.word	0x00290cb4
 80071f0:	00290029 	.word	0x00290029
 80071f4:	00290029 	.word	0x00290029
 80071f8:	00290029 	.word	0x00290029
 80071fc:	00290cb4 	.word	0x00290cb4
 8007200:	00290029 	.word	0x00290029
 8007204:	00290029 	.word	0x00290029
 8007208:	00290029 	.word	0x00290029
 800720c:	0cb4      	.short	0x0cb4
 800720e:	2601      	movs	r6, #1
 8007210:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007212:	0759      	lsls	r1, r3, #29
 8007214:	d52e      	bpl.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8007216:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8007218:	2980      	cmp	r1, #128	; 0x80
 800721a:	f001 8285 	beq.w	8008728 <HAL_RCCEx_PeriphCLKConfig+0x1604>
 800721e:	f200 81a2 	bhi.w	8007566 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8007222:	b1d9      	cbz	r1, 800725c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8007224:	2940      	cmp	r1, #64	; 0x40
 8007226:	f040 81a7 	bne.w	8007578 <HAL_RCCEx_PeriphCLKConfig+0x454>
  __HAL_RCC_PLL2_DISABLE();
 800722a:	4d51      	ldr	r5, [pc, #324]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800722c:	682b      	ldr	r3, [r5, #0]
 800722e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007232:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007234:	f7fd fa68 	bl	8004708 <HAL_GetTick>
 8007238:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800723a:	e005      	b.n	8007248 <HAL_RCCEx_PeriphCLKConfig+0x124>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800723c:	f7fd fa64 	bl	8004708 <HAL_GetTick>
 8007240:	1bc0      	subs	r0, r0, r7
 8007242:	2802      	cmp	r0, #2
 8007244:	f201 85a8 	bhi.w	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	d4f6      	bmi.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x118>
 800724e:	f104 0008 	add.w	r0, r4, #8
 8007252:	f7ff feb3 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007256:	e9d4 3200 	ldrd	r3, r2, [r4]
 800725a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800725c:	2d00      	cmp	r5, #0
 800725e:	f041 84b8 	bne.w	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aae>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007262:	4f43      	ldr	r7, [pc, #268]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007264:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8007266:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800726a:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800726e:	4301      	orrs	r1, r0
 8007270:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007274:	0719      	lsls	r1, r3, #28
 8007276:	d530      	bpl.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8007278:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800727a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800727e:	f001 8378 	beq.w	8008972 <HAL_RCCEx_PeriphCLKConfig+0x184e>
 8007282:	f200 817c 	bhi.w	800757e <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8007286:	b1e1      	cbz	r1, 80072c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007288:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800728c:	f040 8181 	bne.w	8007592 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  __HAL_RCC_PLL2_DISABLE();
 8007290:	4d37      	ldr	r5, [pc, #220]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007292:	682b      	ldr	r3, [r5, #0]
 8007294:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007298:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800729a:	f7fd fa35 	bl	8004708 <HAL_GetTick>
 800729e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072a0:	e005      	b.n	80072ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80072a2:	f7fd fa31 	bl	8004708 <HAL_GetTick>
 80072a6:	1bc0      	subs	r0, r0, r7
 80072a8:	2802      	cmp	r0, #2
 80072aa:	f201 8534 	bhi.w	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80072ae:	682b      	ldr	r3, [r5, #0]
 80072b0:	011b      	lsls	r3, r3, #4
 80072b2:	d4f6      	bmi.n	80072a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80072b4:	f104 0008 	add.w	r0, r4, #8
 80072b8:	f7ff fe80 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80072c0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	f041 8473 	bne.w	8008bae <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80072c8:	4f29      	ldr	r7, [pc, #164]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80072ca:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80072cc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80072d0:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 80072d4:	4301      	orrs	r1, r0
 80072d6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80072da:	06d9      	lsls	r1, r3, #27
 80072dc:	d530      	bpl.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Uart5ClockSelection)
 80072de:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80072e0:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80072e4:	f001 8156 	beq.w	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1470>
 80072e8:	f200 8156 	bhi.w	8007598 <HAL_RCCEx_PeriphCLKConfig+0x474>
 80072ec:	b1e1      	cbz	r1, 8007328 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80072ee:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80072f2:	f040 815b 	bne.w	80075ac <HAL_RCCEx_PeriphCLKConfig+0x488>
  __HAL_RCC_PLL2_DISABLE();
 80072f6:	4d1e      	ldr	r5, [pc, #120]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80072fe:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007300:	f7fd fa02 	bl	8004708 <HAL_GetTick>
 8007304:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007306:	e005      	b.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007308:	f7fd f9fe 	bl	8004708 <HAL_GetTick>
 800730c:	1bc0      	subs	r0, r0, r7
 800730e:	2802      	cmp	r0, #2
 8007310:	f201 8548 	bhi.w	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	011b      	lsls	r3, r3, #4
 8007318:	d4f6      	bmi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800731a:	f104 0008 	add.w	r0, r4, #8
 800731e:	f7ff fe4d 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007322:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007326:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007328:	2d00      	cmp	r5, #0
 800732a:	f041 8479 	bne.w	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1afc>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800732e:	4f10      	ldr	r7, [pc, #64]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007330:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007332:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007336:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800733a:	4301      	orrs	r1, r0
 800733c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007340:	0699      	lsls	r1, r3, #26
 8007342:	d533      	bpl.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8007344:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007346:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800734a:	f001 8179 	beq.w	8008640 <HAL_RCCEx_PeriphCLKConfig+0x151c>
 800734e:	f200 8130 	bhi.w	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8007352:	b1f9      	cbz	r1, 8007394 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8007354:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8007358:	f040 8135 	bne.w	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  __HAL_RCC_PLL2_DISABLE();
 800735c:	4d04      	ldr	r5, [pc, #16]	; (8007370 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800735e:	682b      	ldr	r3, [r5, #0]
 8007360:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007364:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007366:	f7fd f9cf 	bl	8004708 <HAL_GetTick>
 800736a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800736c:	e008      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800736e:	bf00      	nop
 8007370:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007374:	f7fd f9c8 	bl	8004708 <HAL_GetTick>
 8007378:	1bc0      	subs	r0, r0, r7
 800737a:	2802      	cmp	r0, #2
 800737c:	f201 84dd 	bhi.w	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	011b      	lsls	r3, r3, #4
 8007384:	d4f6      	bmi.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8007386:	f104 0008 	add.w	r0, r4, #8
 800738a:	f7ff fe17 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800738e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007392:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007394:	2d00      	cmp	r5, #0
 8007396:	f041 843d 	bne.w	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x1af0>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 800739a:	4fb1      	ldr	r7, [pc, #708]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800739c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800739e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80073a2:	f421 3160 	bic.w	r1, r1, #229376	; 0x38000
 80073a6:	4301      	orrs	r1, r0
 80073a8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80073ac:	0659      	lsls	r1, r3, #25
 80073ae:	d530      	bpl.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart7ClockSelection)
 80073b0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80073b2:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80073b6:	f001 8286 	beq.w	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
 80073ba:	f200 8107 	bhi.w	80075cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80073be:	b1e1      	cbz	r1, 80073fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80073c0:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80073c4:	f040 810c 	bne.w	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
  __HAL_RCC_PLL2_DISABLE();
 80073c8:	4da5      	ldr	r5, [pc, #660]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80073ca:	682b      	ldr	r3, [r5, #0]
 80073cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073d0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80073d2:	f7fd f999 	bl	8004708 <HAL_GetTick>
 80073d6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d8:	e005      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80073da:	f7fd f995 	bl	8004708 <HAL_GetTick>
 80073de:	1bc0      	subs	r0, r0, r7
 80073e0:	2802      	cmp	r0, #2
 80073e2:	f201 84cd 	bhi.w	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073e6:	682b      	ldr	r3, [r5, #0]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	d4f6      	bmi.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 80073ec:	f104 0008 	add.w	r0, r4, #8
 80073f0:	f7ff fde4 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80073f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80073f8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80073fa:	2d00      	cmp	r5, #0
 80073fc:	f041 83f5 	bne.w	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8007400:	4f97      	ldr	r7, [pc, #604]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007402:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8007404:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007408:	f421 11e0 	bic.w	r1, r1, #1835008	; 0x1c0000
 800740c:	4301      	orrs	r1, r0
 800740e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007412:	0619      	lsls	r1, r3, #24
 8007414:	d530      	bpl.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8007416:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8007418:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800741c:	f001 8167 	beq.w	80086ee <HAL_RCCEx_PeriphCLKConfig+0x15ca>
 8007420:	f200 80e1 	bhi.w	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8007424:	b1e1      	cbz	r1, 8007460 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007426:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800742a:	f040 80e6 	bne.w	80075fa <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  __HAL_RCC_PLL2_DISABLE();
 800742e:	4d8c      	ldr	r5, [pc, #560]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007436:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007438:	f7fd f966 	bl	8004708 <HAL_GetTick>
 800743c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800743e:	e005      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x328>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007440:	f7fd f962 	bl	8004708 <HAL_GetTick>
 8007444:	1bc0      	subs	r0, r0, r7
 8007446:	2802      	cmp	r0, #2
 8007448:	f201 8483 	bhi.w	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	d4f6      	bmi.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007452:	f104 0008 	add.w	r0, r4, #8
 8007456:	f7ff fdb1 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800745a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800745e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007460:	2d00      	cmp	r5, #0
 8007462:	f041 83da 	bne.w	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1af6>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8007466:	4f7e      	ldr	r7, [pc, #504]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007468:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800746a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800746e:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8007472:	4301      	orrs	r1, r0
 8007474:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007478:	05d9      	lsls	r1, r3, #23
 800747a:	d530      	bpl.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Uart9ClockSelection)
 800747c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800747e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8007482:	f001 818d 	beq.w	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x167c>
 8007486:	f200 80bb 	bhi.w	8007600 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 800748a:	b1e1      	cbz	r1, 80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800748c:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8007490:	f040 80c0 	bne.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  __HAL_RCC_PLL2_DISABLE();
 8007494:	4d72      	ldr	r5, [pc, #456]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007496:	682b      	ldr	r3, [r5, #0]
 8007498:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800749c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800749e:	f7fd f933 	bl	8004708 <HAL_GetTick>
 80074a2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074a4:	e005      	b.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074a6:	f7fd f92f 	bl	8004708 <HAL_GetTick>
 80074aa:	1bc0      	subs	r0, r0, r7
 80074ac:	2802      	cmp	r0, #2
 80074ae:	f201 846d 	bhi.w	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074b2:	682b      	ldr	r3, [r5, #0]
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	d4f6      	bmi.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80074b8:	f104 0008 	add.w	r0, r4, #8
 80074bc:	f7ff fd7e 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80074c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80074c4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	f041 838c 	bne.w	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80074cc:	4f64      	ldr	r7, [pc, #400]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80074ce:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80074d0:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80074d4:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80074d8:	4301      	orrs	r1, r0
 80074da:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80074de:	0599      	lsls	r1, r3, #22
 80074e0:	d532      	bpl.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (pPeriphClkInit->Usart10ClockSelection)
 80074e2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80074e6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80074ea:	f001 80c6 	beq.w	800867a <HAL_RCCEx_PeriphCLKConfig+0x1556>
 80074ee:	f200 8094 	bhi.w	800761a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80074f2:	b1e1      	cbz	r1, 800752e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80074f4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80074f8:	f040 8097 	bne.w	800762a <HAL_RCCEx_PeriphCLKConfig+0x506>
  __HAL_RCC_PLL2_DISABLE();
 80074fc:	4d58      	ldr	r5, [pc, #352]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007504:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007506:	f7fd f8ff 	bl	8004708 <HAL_GetTick>
 800750a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800750c:	e005      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800750e:	f7fd f8fb 	bl	8004708 <HAL_GetTick>
 8007512:	1bc0      	subs	r0, r0, r7
 8007514:	2802      	cmp	r0, #2
 8007516:	f201 842d 	bhi.w	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800751a:	682b      	ldr	r3, [r5, #0]
 800751c:	011b      	lsls	r3, r3, #4
 800751e:	d4f6      	bmi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8007520:	f104 0008 	add.w	r0, r4, #8
 8007524:	f7ff fd4a 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007528:	e9d4 3200 	ldrd	r3, r2, [r4]
 800752c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800752e:	2d00      	cmp	r5, #0
 8007530:	f041 8352 	bne.w	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8007534:	4f4a      	ldr	r7, [pc, #296]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007536:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800753a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800753e:	f021 5160 	bic.w	r1, r1, #939524096	; 0x38000000
 8007542:	4301      	orrs	r1, r0
 8007544:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007548:	0559      	lsls	r1, r3, #21
 800754a:	d572      	bpl.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 800754c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8007550:	2905      	cmp	r1, #5
 8007552:	f201 84e2 	bhi.w	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 8007556:	e8df f011 	tbh	[pc, r1, lsl #1]
 800755a:	05f0      	.short	0x05f0
 800755c:	05d70af4 	.word	0x05d70af4
 8007560:	05f005f0 	.word	0x05f005f0
 8007564:	05f0      	.short	0x05f0
    switch (pPeriphClkInit->Usart3ClockSelection)
 8007566:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800756a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800756e:	f43f ae75 	beq.w	800725c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8007572:	29c0      	cmp	r1, #192	; 0xc0
 8007574:	f43f ae72 	beq.w	800725c <HAL_RCCEx_PeriphCLKConfig+0x138>
 8007578:	2601      	movs	r6, #1
 800757a:	4635      	mov	r5, r6
 800757c:	e67a      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Uart4ClockSelection)
 800757e:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 8007582:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8007586:	f43f ae9c 	beq.w	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 800758a:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 800758e:	f43f ae98 	beq.w	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8007592:	2601      	movs	r6, #1
 8007594:	4635      	mov	r5, r6
 8007596:	e6a0      	b.n	80072da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8007598:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 800759c:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80075a0:	f43f aec2 	beq.w	8007328 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80075a4:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80075a8:	f43f aebe 	beq.w	8007328 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80075ac:	2601      	movs	r6, #1
 80075ae:	4635      	mov	r5, r6
 80075b0:	e6c6      	b.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Usart6ClockSelection)
 80075b2:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 80075b6:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 80075ba:	f43f aeeb 	beq.w	8007394 <HAL_RCCEx_PeriphCLKConfig+0x270>
 80075be:	f5b1 3fc0 	cmp.w	r1, #98304	; 0x18000
 80075c2:	f43f aee7 	beq.w	8007394 <HAL_RCCEx_PeriphCLKConfig+0x270>
 80075c6:	2601      	movs	r6, #1
 80075c8:	4635      	mov	r5, r6
 80075ca:	e6ef      	b.n	80073ac <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Uart7ClockSelection)
 80075cc:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 80075d0:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80075d4:	f43f af11 	beq.w	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80075d8:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 80075dc:	f43f af0d 	beq.w	80073fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80075e0:	2601      	movs	r6, #1
 80075e2:	4635      	mov	r5, r6
 80075e4:	e715      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart8ClockSelection)
 80075e6:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 80075ea:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80075ee:	f43f af37 	beq.w	8007460 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80075f2:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 80075f6:	f43f af33 	beq.w	8007460 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80075fa:	2601      	movs	r6, #1
 80075fc:	4635      	mov	r5, r6
 80075fe:	e73b      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8007600:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8007604:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8007608:	f43f af5d 	beq.w	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800760c:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8007610:	f43f af59 	beq.w	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8007614:	2601      	movs	r6, #1
 8007616:	4635      	mov	r5, r6
 8007618:	e761      	b.n	80074de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Usart10ClockSelection)
 800761a:	f021 6000 	bic.w	r0, r1, #134217728	; 0x8000000
 800761e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8007622:	d084      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8007624:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 8007628:	d081      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800762a:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800762c:	0559      	lsls	r1, r3, #21
    switch (pPeriphClkInit->Usart10ClockSelection)
 800762e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007630:	d48c      	bmi.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x428>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007632:	0519      	lsls	r1, r3, #20
 8007634:	d533      	bpl.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8007636:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800763a:	2920      	cmp	r1, #32
 800763c:	f001 8126 	beq.w	800888c <HAL_RCCEx_PeriphCLKConfig+0x1768>
 8007640:	f200 831e 	bhi.w	8007c80 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8007644:	b1f1      	cbz	r1, 8007684 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8007646:	2910      	cmp	r1, #16
 8007648:	f040 8322 	bne.w	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  __HAL_RCC_PLL2_DISABLE();
 800764c:	4d04      	ldr	r5, [pc, #16]	; (8007660 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800764e:	682b      	ldr	r3, [r5, #0]
 8007650:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007654:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007656:	f7fd f857 	bl	8004708 <HAL_GetTick>
 800765a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800765c:	e008      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 800765e:	bf00      	nop
 8007660:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007664:	f7fd f850 	bl	8004708 <HAL_GetTick>
 8007668:	1bc0      	subs	r0, r0, r7
 800766a:	2802      	cmp	r0, #2
 800766c:	f201 83a0 	bhi.w	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007670:	682b      	ldr	r3, [r5, #0]
 8007672:	011b      	lsls	r3, r3, #4
 8007674:	d4f6      	bmi.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x540>
 8007676:	f104 0008 	add.w	r0, r4, #8
 800767a:	f7ff fc9f 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800767e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007682:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007684:	2d00      	cmp	r5, #0
 8007686:	f041 82b6 	bne.w	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800768a:	4fac      	ldr	r7, [pc, #688]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800768c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8007690:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007694:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007698:	4301      	orrs	r1, r0
 800769a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800769e:	04d9      	lsls	r1, r3, #19
 80076a0:	d532      	bpl.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80076a2:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80076a6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80076aa:	f001 8129 	beq.w	8008900 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
 80076ae:	f200 82f2 	bhi.w	8007c96 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80076b2:	b1e1      	cbz	r1, 80076ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80076b4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80076b8:	f040 82f7 	bne.w	8007caa <HAL_RCCEx_PeriphCLKConfig+0xb86>
  __HAL_RCC_PLL2_DISABLE();
 80076bc:	4d9f      	ldr	r5, [pc, #636]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80076be:	682b      	ldr	r3, [r5, #0]
 80076c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076c4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80076c6:	f7fd f81f 	bl	8004708 <HAL_GetTick>
 80076ca:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076cc:	e005      	b.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80076ce:	f7fd f81b 	bl	8004708 <HAL_GetTick>
 80076d2:	1bc0      	subs	r0, r0, r7
 80076d4:	2802      	cmp	r0, #2
 80076d6:	f201 8324 	bhi.w	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80076da:	682b      	ldr	r3, [r5, #0]
 80076dc:	011b      	lsls	r3, r3, #4
 80076de:	d4f6      	bmi.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80076e0:	f104 0008 	add.w	r0, r4, #8
 80076e4:	f7ff fc6a 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076e8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076ec:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80076ee:	2d00      	cmp	r5, #0
 80076f0:	f041 826c 	bne.w	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80076f4:	4f91      	ldr	r7, [pc, #580]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80076f6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 80076fa:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80076fe:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8007702:	4301      	orrs	r1, r0
 8007704:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007708:	0499      	lsls	r1, r3, #18
 800770a:	d50f      	bpl.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c1ClockSelection)
 800770c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8007710:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007714:	f000 86a0 	beq.w	8008458 <HAL_RCCEx_PeriphCLKConfig+0x1334>
 8007718:	f240 82ec 	bls.w	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 800771c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8007720:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007724:	f000 82e9 	beq.w	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8007728:	2601      	movs	r6, #1
 800772a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800772c:	045f      	lsls	r7, r3, #17
 800772e:	d50f      	bpl.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8007730:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8007734:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8007738:	f000 86b0 	beq.w	800849c <HAL_RCCEx_PeriphCLKConfig+0x1378>
 800773c:	f240 82eb 	bls.w	8007d16 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 8007740:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8007744:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8007748:	f000 82e8 	beq.w	8007d1c <HAL_RCCEx_PeriphCLKConfig+0xbf8>
 800774c:	2601      	movs	r6, #1
 800774e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007750:	0419      	lsls	r1, r3, #16
 8007752:	d50f      	bpl.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8007754:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8007758:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800775c:	f000 8642 	beq.w	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
 8007760:	f240 82b7 	bls.w	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8007764:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8007768:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800776c:	f000 82b4 	beq.w	8007cd8 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8007770:	2601      	movs	r6, #1
 8007772:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007774:	0557      	lsls	r7, r2, #21
 8007776:	d50f      	bpl.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8007778:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800777c:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8007780:	f000 864d 	beq.w	800841e <HAL_RCCEx_PeriphCLKConfig+0x12fa>
 8007784:	f240 8294 	bls.w	8007cb0 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 8007788:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 800778c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8007790:	f000 8291 	beq.w	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8007794:	2601      	movs	r6, #1
 8007796:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007798:	03d9      	lsls	r1, r3, #15
 800779a:	d50b      	bpl.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    switch (pPeriphClkInit->I3c1ClockSelection)
 800779c:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80077a0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80077a4:	f000 851d 	beq.w	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x10be>
 80077a8:	f031 7100 	bics.w	r1, r1, #33554432	; 0x2000000
 80077ac:	f000 8532 	beq.w	8008214 <HAL_RCCEx_PeriphCLKConfig+0x10f0>
 80077b0:	2601      	movs	r6, #1
 80077b2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80077b4:	0510      	lsls	r0, r2, #20
 80077b6:	d509      	bpl.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80077b8:	4960      	ldr	r1, [pc, #384]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80077ba:	69c8      	ldr	r0, [r1, #28]
 80077bc:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80077c0:	61c8      	str	r0, [r1, #28]
 80077c2:	69c8      	ldr	r0, [r1, #28]
 80077c4:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
 80077c8:	4338      	orrs	r0, r7
 80077ca:	61c8      	str	r0, [r1, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077cc:	0399      	lsls	r1, r3, #14
 80077ce:	d532      	bpl.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 80077d0:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80077d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80077d8:	f000 87ff 	beq.w	80087da <HAL_RCCEx_PeriphCLKConfig+0x16b6>
 80077dc:	f200 82ac 	bhi.w	8007d38 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 80077e0:	b1e1      	cbz	r1, 800781c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80077e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80077e6:	f040 82b1 	bne.w	8007d4c <HAL_RCCEx_PeriphCLKConfig+0xc28>
  __HAL_RCC_PLL2_DISABLE();
 80077ea:	4d54      	ldr	r5, [pc, #336]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077f2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80077f4:	f7fc ff88 	bl	8004708 <HAL_GetTick>
 80077f8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80077fa:	e005      	b.n	8007808 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80077fc:	f7fc ff84 	bl	8004708 <HAL_GetTick>
 8007800:	1bc0      	subs	r0, r0, r7
 8007802:	2802      	cmp	r0, #2
 8007804:	f201 82da 	bhi.w	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007808:	682b      	ldr	r3, [r5, #0]
 800780a:	011b      	lsls	r3, r3, #4
 800780c:	d4f6      	bmi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 800780e:	f104 0008 	add.w	r0, r4, #8
 8007812:	f7ff fbd3 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007816:	e9d4 3200 	ldrd	r3, r2, [r4]
 800781a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800781c:	2d00      	cmp	r5, #0
 800781e:	f041 81cf 	bne.w	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007822:	4f46      	ldr	r7, [pc, #280]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8007824:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8007828:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800782c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8007830:	4301      	orrs	r1, r0
 8007832:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007836:	0359      	lsls	r1, r3, #13
 8007838:	d532      	bpl.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 800783a:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800783e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8007842:	f000 866d 	beq.w	8008520 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
 8007846:	f200 8284 	bhi.w	8007d52 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 800784a:	b1e1      	cbz	r1, 8007886 <HAL_RCCEx_PeriphCLKConfig+0x762>
 800784c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007850:	f040 8289 	bne.w	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xc42>
  __HAL_RCC_PLL2_DISABLE();
 8007854:	4d39      	ldr	r5, [pc, #228]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8007856:	682b      	ldr	r3, [r5, #0]
 8007858:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800785c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800785e:	f7fc ff53 	bl	8004708 <HAL_GetTick>
 8007862:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007864:	e005      	b.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007866:	f7fc ff4f 	bl	8004708 <HAL_GetTick>
 800786a:	1bc0      	subs	r0, r0, r7
 800786c:	2802      	cmp	r0, #2
 800786e:	f201 826a 	bhi.w	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007872:	682b      	ldr	r3, [r5, #0]
 8007874:	011b      	lsls	r3, r3, #4
 8007876:	d4f6      	bmi.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8007878:	f104 0008 	add.w	r0, r4, #8
 800787c:	f7ff fb9e 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007880:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007884:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007886:	2d00      	cmp	r5, #0
 8007888:	f041 81be 	bne.w	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 800788c:	4f2b      	ldr	r7, [pc, #172]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800788e:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8007892:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007896:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800789a:	4301      	orrs	r1, r0
 800789c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80078a0:	0691      	lsls	r1, r2, #26
 80078a2:	d532      	bpl.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 80078a4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80078a8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80078ac:	f000 8655 	beq.w	800855a <HAL_RCCEx_PeriphCLKConfig+0x1436>
 80078b0:	f200 825c 	bhi.w	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078b4:	b1e1      	cbz	r1, 80078f0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80078b6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80078ba:	f040 8261 	bne.w	8007d80 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  __HAL_RCC_PLL2_DISABLE();
 80078be:	4d1f      	ldr	r5, [pc, #124]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80078c0:	682b      	ldr	r3, [r5, #0]
 80078c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078c6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80078c8:	f7fc ff1e 	bl	8004708 <HAL_GetTick>
 80078cc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078ce:	e005      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80078d0:	f7fc ff1a 	bl	8004708 <HAL_GetTick>
 80078d4:	1bc0      	subs	r0, r0, r7
 80078d6:	2802      	cmp	r0, #2
 80078d8:	f201 827e 	bhi.w	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	d4f6      	bmi.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 80078e2:	f104 0008 	add.w	r0, r4, #8
 80078e6:	f7ff fb69 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80078ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 80078ee:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80078f0:	2d00      	cmp	r5, #0
 80078f2:	f041 8186 	bne.w	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x1ade>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 80078f6:	4f11      	ldr	r7, [pc, #68]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80078f8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80078fc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007900:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8007904:	4301      	orrs	r1, r0
 8007906:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800790a:	0651      	lsls	r1, r2, #25
 800790c:	d535      	bpl.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 800790e:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8007912:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007916:	f000 86cd 	beq.w	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x1590>
 800791a:	f200 8234 	bhi.w	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800791e:	b1f9      	cbz	r1, 8007960 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007920:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007924:	f040 8239 	bne.w	8007d9a <HAL_RCCEx_PeriphCLKConfig+0xc76>
  __HAL_RCC_PLL2_DISABLE();
 8007928:	4d04      	ldr	r5, [pc, #16]	; (800793c <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800792a:	682b      	ldr	r3, [r5, #0]
 800792c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007930:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007932:	f7fc fee9 	bl	8004708 <HAL_GetTick>
 8007936:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007938:	e008      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x828>
 800793a:	bf00      	nop
 800793c:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007940:	f7fc fee2 	bl	8004708 <HAL_GetTick>
 8007944:	1bc0      	subs	r0, r0, r7
 8007946:	2802      	cmp	r0, #2
 8007948:	f201 8209 	bhi.w	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	011b      	lsls	r3, r3, #4
 8007950:	d4f6      	bmi.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8007952:	f104 0008 	add.w	r0, r4, #8
 8007956:	f7ff fb31 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800795a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800795e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007960:	2d00      	cmp	r5, #0
 8007962:	f041 813c 	bne.w	8008bde <HAL_RCCEx_PeriphCLKConfig+0x1aba>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8007966:	4faf      	ldr	r7, [pc, #700]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007968:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 800796c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007970:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8007974:	4301      	orrs	r1, r0
 8007976:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800797a:	0611      	lsls	r1, r2, #24
 800797c:	d532      	bpl.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 800797e:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8007982:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8007986:	f000 86ec 	beq.w	8008762 <HAL_RCCEx_PeriphCLKConfig+0x163e>
 800798a:	f200 8209 	bhi.w	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800798e:	b1e1      	cbz	r1, 80079ca <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8007990:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8007994:	f040 820e 	bne.w	8007db4 <HAL_RCCEx_PeriphCLKConfig+0xc90>
  __HAL_RCC_PLL2_DISABLE();
 8007998:	4da2      	ldr	r5, [pc, #648]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 800799a:	682b      	ldr	r3, [r5, #0]
 800799c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079a0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80079a2:	f7fc feb1 	bl	8004708 <HAL_GetTick>
 80079a6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079a8:	e005      	b.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x892>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80079aa:	f7fc fead 	bl	8004708 <HAL_GetTick>
 80079ae:	1bc0      	subs	r0, r0, r7
 80079b0:	2802      	cmp	r0, #2
 80079b2:	f201 81bc 	bhi.w	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80079b6:	682b      	ldr	r3, [r5, #0]
 80079b8:	011b      	lsls	r3, r3, #4
 80079ba:	d4f6      	bmi.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x886>
 80079bc:	f104 0008 	add.w	r0, r4, #8
 80079c0:	f7ff fafc 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80079c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80079c8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80079ca:	2d00      	cmp	r5, #0
 80079cc:	f041 80f2 	bne.w	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a90>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80079d0:	4f94      	ldr	r7, [pc, #592]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80079d2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80079d6:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80079da:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80079de:	4301      	orrs	r1, r0
 80079e0:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80079e4:	05d1      	lsls	r1, r2, #23
 80079e6:	d532      	bpl.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 80079e8:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 80079ec:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80079f0:	f000 872c 	beq.w	800884c <HAL_RCCEx_PeriphCLKConfig+0x1728>
 80079f4:	f200 81e1 	bhi.w	8007dba <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80079f8:	b1e1      	cbz	r1, 8007a34 <HAL_RCCEx_PeriphCLKConfig+0x910>
 80079fa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80079fe:	f040 81e6 	bne.w	8007dce <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  __HAL_RCC_PLL2_DISABLE();
 8007a02:	4d88      	ldr	r5, [pc, #544]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007a04:	682b      	ldr	r3, [r5, #0]
 8007a06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a0a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007a0c:	f7fc fe7c 	bl	8004708 <HAL_GetTick>
 8007a10:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a12:	e005      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a14:	f7fc fe78 	bl	8004708 <HAL_GetTick>
 8007a18:	1bc0      	subs	r0, r0, r7
 8007a1a:	2802      	cmp	r0, #2
 8007a1c:	f201 81e8 	bhi.w	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	d4f6      	bmi.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007a26:	f104 0008 	add.w	r0, r4, #8
 8007a2a:	f7ff fac7 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a2e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a32:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007a34:	2d00      	cmp	r5, #0
 8007a36:	f041 80c6 	bne.w	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8007a3a:	4f7a      	ldr	r7, [pc, #488]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007a3c:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8007a40:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007a44:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8007a48:	4301      	orrs	r1, r0
 8007a4a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007a4e:	0319      	lsls	r1, r3, #12
 8007a50:	d536      	bpl.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8007a52:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8007a56:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8007a5a:	f000 87f9 	beq.w	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x192c>
 8007a5e:	f200 81b9 	bhi.w	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8007a62:	2900      	cmp	r1, #0
 8007a64:	f000 8476 	beq.w	8008354 <HAL_RCCEx_PeriphCLKConfig+0x1230>
 8007a68:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8007a6c:	f040 81ba 	bne.w	8007de4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
  __HAL_RCC_PLL2_DISABLE();
 8007a70:	4d6c      	ldr	r5, [pc, #432]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007a72:	682b      	ldr	r3, [r5, #0]
 8007a74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007a78:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007a7a:	f7fc fe45 	bl	8004708 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a7e:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007a80:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	d508      	bpl.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x974>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007a86:	f7fc fe3f 	bl	8004708 <HAL_GetTick>
 8007a8a:	1bc0      	subs	r0, r0, r7
 8007a8c:	2802      	cmp	r0, #2
 8007a8e:	f201 81cd 	bhi.w	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007a92:	682b      	ldr	r3, [r5, #0]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	d4f6      	bmi.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8007a98:	f104 0008 	add.w	r0, r4, #8
 8007a9c:	f7ff fa8e 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007aa0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007aa4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007aa6:	2d00      	cmp	r5, #0
 8007aa8:	f040 845c 	bne.w	8008364 <HAL_RCCEx_PeriphCLKConfig+0x1240>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007aac:	4f5d      	ldr	r7, [pc, #372]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007aae:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8007ab2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8007ab6:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8007aba:	4301      	orrs	r1, r0
 8007abc:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007ac0:	02d9      	lsls	r1, r3, #11
 8007ac2:	d536      	bpl.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8007ac4:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8007ac8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007acc:	f000 87a5 	beq.w	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x18f6>
 8007ad0:	f200 818b 	bhi.w	8007dea <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	f000 8448 	beq.w	800836a <HAL_RCCEx_PeriphCLKConfig+0x1246>
 8007ada:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8007ade:	f040 818c 	bne.w	8007dfa <HAL_RCCEx_PeriphCLKConfig+0xcd6>
  __HAL_RCC_PLL2_DISABLE();
 8007ae2:	4d50      	ldr	r5, [pc, #320]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aea:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007aec:	f7fc fe0c 	bl	8004708 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007af0:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007af2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007af4:	011b      	lsls	r3, r3, #4
 8007af6:	d508      	bpl.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007af8:	f7fc fe06 	bl	8004708 <HAL_GetTick>
 8007afc:	1bc0      	subs	r0, r0, r7
 8007afe:	2802      	cmp	r0, #2
 8007b00:	f201 8188 	bhi.w	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	d4f6      	bmi.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8007b0a:	f104 0008 	add.w	r0, r4, #8
 8007b0e:	f7ff fa55 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007b12:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007b16:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	f040 842e 	bne.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x1256>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8007b1e:	4f41      	ldr	r7, [pc, #260]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007b20:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8007b24:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8007b28:	f421 1160 	bic.w	r1, r1, #3670016	; 0x380000
 8007b2c:	4301      	orrs	r1, r0
 8007b2e:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007b32:	0299      	lsls	r1, r3, #10
 8007b34:	d516      	bpl.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8007b36:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 8007b3a:	2902      	cmp	r1, #2
 8007b3c:	f000 8435 	beq.w	80083aa <HAL_RCCEx_PeriphCLKConfig+0x1286>
 8007b40:	d903      	bls.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8007b42:	3903      	subs	r1, #3
 8007b44:	2902      	cmp	r1, #2
 8007b46:	f200 831a 	bhi.w	800817e <HAL_RCCEx_PeriphCLKConfig+0x105a>
    if (ret == HAL_OK)
 8007b4a:	2d00      	cmp	r5, #0
 8007b4c:	f040 87d8 	bne.w	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8007b50:	4f34      	ldr	r7, [pc, #208]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007b52:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8007b56:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8007b5a:	f021 0107 	bic.w	r1, r1, #7
 8007b5e:	4301      	orrs	r1, r0
 8007b60:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007b64:	0590      	lsls	r0, r2, #22
 8007b66:	d507      	bpl.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8007b68:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8007b6c:	f031 0008 	bics.w	r0, r1, #8
 8007b70:	f000 835f 	beq.w	8008232 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007b74:	2601      	movs	r6, #1
 8007b76:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007b78:	0199      	lsls	r1, r3, #6
 8007b7a:	f100 8368 	bmi.w	800824e <HAL_RCCEx_PeriphCLKConfig+0x112a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007b7e:	0158      	lsls	r0, r3, #5
 8007b80:	d50d      	bpl.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    switch (pPeriphClkInit->RngClockSelection)
 8007b82:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8007b86:	2910      	cmp	r1, #16
 8007b88:	f000 8406 	beq.w	8008398 <HAL_RCCEx_PeriphCLKConfig+0x1274>
 8007b8c:	f240 8138 	bls.w	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8007b90:	f021 0010 	bic.w	r0, r1, #16
 8007b94:	2820      	cmp	r0, #32
 8007b96:	f000 8136 	beq.w	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8007b9a:	2601      	movs	r6, #1
 8007b9c:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007b9e:	0259      	lsls	r1, r3, #9
 8007ba0:	d52d      	bpl.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xada>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8007ba2:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 8007ba6:	2900      	cmp	r1, #0
 8007ba8:	f000 83f0 	beq.w	800838c <HAL_RCCEx_PeriphCLKConfig+0x1268>
 8007bac:	2940      	cmp	r1, #64	; 0x40
 8007bae:	f040 82ef 	bne.w	8008190 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  __HAL_RCC_PLL2_DISABLE();
 8007bb2:	4d1c      	ldr	r5, [pc, #112]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007bba:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007bbc:	f7fc fda4 	bl	8004708 <HAL_GetTick>
 8007bc0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bc2:	e005      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bc4:	f7fc fda0 	bl	8004708 <HAL_GetTick>
 8007bc8:	1bc0      	subs	r0, r0, r7
 8007bca:	2802      	cmp	r0, #2
 8007bcc:	f201 8146 	bhi.w	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x1d38>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bd0:	682b      	ldr	r3, [r5, #0]
 8007bd2:	011b      	lsls	r3, r3, #4
 8007bd4:	d4f6      	bmi.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8007bd6:	f104 0008 	add.w	r0, r4, #8
 8007bda:	f7ff f9ef 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007bde:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007be2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007be4:	2d00      	cmp	r5, #0
 8007be6:	f041 8136 	bne.w	8008e56 <HAL_RCCEx_PeriphCLKConfig+0x1d32>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8007bea:	4f0e      	ldr	r7, [pc, #56]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007bec:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8007bf0:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007bf4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007bf8:	4301      	orrs	r1, r0
 8007bfa:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007bfe:	021f      	lsls	r7, r3, #8
 8007c00:	d52f      	bpl.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8007c02:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8007c06:	2900      	cmp	r1, #0
 8007c08:	f000 83ba 	beq.w	8008380 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8007c0c:	2980      	cmp	r1, #128	; 0x80
 8007c0e:	f040 82b9 	bne.w	8008184 <HAL_RCCEx_PeriphCLKConfig+0x1060>
  __HAL_RCC_PLL2_DISABLE();
 8007c12:	4d04      	ldr	r5, [pc, #16]	; (8007c24 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8007c14:	682b      	ldr	r3, [r5, #0]
 8007c16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c1a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007c1c:	f7fc fd74 	bl	8004708 <HAL_GetTick>
 8007c20:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c22:	e007      	b.n	8007c34 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8007c24:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c28:	f7fc fd6e 	bl	8004708 <HAL_GetTick>
 8007c2c:	1bc0      	subs	r0, r0, r7
 8007c2e:	2802      	cmp	r0, #2
 8007c30:	f201 8120 	bhi.w	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x1d50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	0118      	lsls	r0, r3, #4
 8007c38:	d4f6      	bmi.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8007c3a:	f104 0008 	add.w	r0, r4, #8
 8007c3e:	f7ff f9bd 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007c42:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c46:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	f041 8101 	bne.w	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x1d2c>
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8007c4e:	4f91      	ldr	r7, [pc, #580]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8007c50:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 8007c54:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007c58:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c5c:	4301      	orrs	r1, r0
 8007c5e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007c62:	0119      	lsls	r1, r3, #4
 8007c64:	f140 80ed 	bpl.w	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8007c68:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8007c6c:	2904      	cmp	r1, #4
 8007c6e:	f201 8150 	bhi.w	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x1dee>
 8007c72:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007c76:	00d4      	.short	0x00d4
 8007c78:	070b072a 	.word	0x070b072a
 8007c7c:	00d900d9 	.word	0x00d900d9
    switch (pPeriphClkInit->Uart12ClockSelection)
 8007c80:	f021 0010 	bic.w	r0, r1, #16
 8007c84:	2840      	cmp	r0, #64	; 0x40
 8007c86:	f43f acfd 	beq.w	8007684 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8007c8a:	2930      	cmp	r1, #48	; 0x30
 8007c8c:	f43f acfa 	beq.w	8007684 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8007c90:	2601      	movs	r6, #1
 8007c92:	4635      	mov	r5, r6
 8007c94:	e503      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8007c96:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8007c9a:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8007c9e:	f43f ad26 	beq.w	80076ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007ca2:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8007ca6:	f43f ad22 	beq.w	80076ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8007caa:	2601      	movs	r6, #1
 8007cac:	4635      	mov	r5, r6
 8007cae:	e52b      	b.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8007cb0:	2900      	cmp	r1, #0
 8007cb2:	f47f ad6f 	bne.w	8007794 <HAL_RCCEx_PeriphCLKConfig+0x670>
    if (ret == HAL_OK)
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	f040 8725 	bne.w	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x19e2>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007cbc:	4f75      	ldr	r7, [pc, #468]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8007cbe:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8007cc2:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007cc6:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8007cca:	4301      	orrs	r1, r0
 8007ccc:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8007cd0:	e562      	b.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8007cd2:	2900      	cmp	r1, #0
 8007cd4:	f47f ad4c 	bne.w	8007770 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    if (ret == HAL_OK)
 8007cd8:	2d00      	cmp	r5, #0
 8007cda:	f040 8720 	bne.w	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007cde:	4f6d      	ldr	r7, [pc, #436]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8007ce0:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8007ce4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007ce8:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8007cec:	4301      	orrs	r1, r0
 8007cee:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8007cf2:	e53f      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	f47f ad17 	bne.w	8007728 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if (ret == HAL_OK)
 8007cfa:	2d00      	cmp	r5, #0
 8007cfc:	f040 8709 	bne.w	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x19ee>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007d00:	4f64      	ldr	r7, [pc, #400]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8007d02:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8007d06:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007d0a:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8007d0e:	4301      	orrs	r1, r0
 8007d10:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8007d14:	e50a      	b.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8007d16:	2900      	cmp	r1, #0
 8007d18:	f47f ad18 	bne.w	800774c <HAL_RCCEx_PeriphCLKConfig+0x628>
    if (ret == HAL_OK)
 8007d1c:	2d00      	cmp	r5, #0
 8007d1e:	f040 86fb 	bne.w	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x19f4>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007d22:	4f5c      	ldr	r7, [pc, #368]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8007d24:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8007d28:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007d2c:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8007d30:	4301      	orrs	r1, r0
 8007d32:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8007d36:	e50b      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8007d38:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8007d3c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007d40:	f43f ad6c 	beq.w	800781c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007d44:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8007d48:	f43f ad68 	beq.w	800781c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8007d4c:	2601      	movs	r6, #1
 8007d4e:	4635      	mov	r5, r6
 8007d50:	e571      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8007d52:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 8007d56:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8007d5a:	f43f ad94 	beq.w	8007886 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8007d5e:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8007d62:	f43f ad90 	beq.w	8007886 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8007d66:	2601      	movs	r6, #1
 8007d68:	4635      	mov	r5, r6
 8007d6a:	e599      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8007d6c:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8007d70:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8007d74:	f43f adbc 	beq.w	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8007d78:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8007d7c:	f43f adb8 	beq.w	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8007d80:	2601      	movs	r6, #1
 8007d82:	4635      	mov	r5, r6
 8007d84:	e5c1      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8007d86:	f421 1080 	bic.w	r0, r1, #1048576	; 0x100000
 8007d8a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8007d8e:	f43f ade7 	beq.w	8007960 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007d92:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007d96:	f43f ade3 	beq.w	8007960 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007d9a:	2601      	movs	r6, #1
 8007d9c:	4635      	mov	r5, r6
 8007d9e:	e5ec      	b.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8007da0:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8007da4:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8007da8:	f43f ae0f 	beq.w	80079ca <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8007dac:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8007db0:	f43f ae0b 	beq.w	80079ca <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8007db4:	2601      	movs	r6, #1
 8007db6:	4635      	mov	r5, r6
 8007db8:	e614      	b.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8007dba:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8007dbe:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007dc2:	f43f ae37 	beq.w	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007dc6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8007dca:	f43f ae33 	beq.w	8007a34 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8007dce:	2601      	movs	r6, #1
 8007dd0:	4635      	mov	r5, r6
 8007dd2:	e63c      	b.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8007dd4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8007dd8:	f43f ae65 	beq.w	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8007ddc:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8007de0:	f43f ae61 	beq.w	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8007de4:	2601      	movs	r6, #1
 8007de6:	4635      	mov	r5, r6
 8007de8:	e66a      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8007dea:	f5b1 1fc0 	cmp.w	r1, #1572864	; 0x180000
 8007dee:	f43f ae93 	beq.w	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8007df2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007df6:	f43f ae8f 	beq.w	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8007dfa:	2601      	movs	r6, #1
 8007dfc:	4635      	mov	r5, r6
 8007dfe:	e698      	b.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->RngClockSelection)
 8007e00:	2900      	cmp	r1, #0
 8007e02:	f47f aeca 	bne.w	8007b9a <HAL_RCCEx_PeriphCLKConfig+0xa76>
    if (ret == HAL_OK)
 8007e06:	2d00      	cmp	r5, #0
 8007e08:	f040 8365 	bne.w	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007e0c:	4f21      	ldr	r7, [pc, #132]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8007e0e:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8007e12:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8007e16:	4301      	orrs	r1, r0
 8007e18:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8007e1c:	e6bf      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e1e:	481d      	ldr	r0, [pc, #116]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8007e20:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007e22:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007e26:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8007e28:	2d00      	cmp	r5, #0
 8007e2a:	f040 864b 	bne.w	8008ac4 <HAL_RCCEx_PeriphCLKConfig+0x19a0>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8007e2e:	4f19      	ldr	r7, [pc, #100]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8007e30:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007e34:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007e38:	f021 0107 	bic.w	r1, r1, #7
 8007e3c:	4301      	orrs	r1, r0
 8007e3e:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007e42:	00d9      	lsls	r1, r3, #3
 8007e44:	d52a      	bpl.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd78>
    switch (pPeriphClkInit->Spi2ClockSelection)
 8007e46:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 8007e4a:	2920      	cmp	r1, #32
 8007e4c:	d824      	bhi.n	8007e98 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8007e4e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007e52:	0264      	.short	0x0264
 8007e54:	00230023 	.word	0x00230023
 8007e58:	00230023 	.word	0x00230023
 8007e5c:	00230023 	.word	0x00230023
 8007e60:	07090023 	.word	0x07090023
 8007e64:	00230023 	.word	0x00230023
 8007e68:	00230023 	.word	0x00230023
 8007e6c:	00230023 	.word	0x00230023
 8007e70:	06ea0023 	.word	0x06ea0023
 8007e74:	00230023 	.word	0x00230023
 8007e78:	00230023 	.word	0x00230023
 8007e7c:	00230023 	.word	0x00230023
 8007e80:	02690023 	.word	0x02690023
 8007e84:	00230023 	.word	0x00230023
 8007e88:	00230023 	.word	0x00230023
 8007e8c:	00230023 	.word	0x00230023
 8007e90:	02690023 	.word	0x02690023
 8007e94:	44020c00 	.word	0x44020c00
 8007e98:	2601      	movs	r6, #1
 8007e9a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007e9c:	0099      	lsls	r1, r3, #2
 8007e9e:	d534      	bpl.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8007ea0:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8007ea4:	2980      	cmp	r1, #128	; 0x80
 8007ea6:	f000 859d 	beq.w	80089e4 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
 8007eaa:	f200 80d5 	bhi.w	8008058 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8007eae:	2900      	cmp	r1, #0
 8007eb0:	f000 8246 	beq.w	8008340 <HAL_RCCEx_PeriphCLKConfig+0x121c>
 8007eb4:	2940      	cmp	r1, #64	; 0x40
 8007eb6:	f040 80d6 	bne.w	8008066 <HAL_RCCEx_PeriphCLKConfig+0xf42>
  __HAL_RCC_PLL2_DISABLE();
 8007eba:	4db4      	ldr	r5, [pc, #720]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ec2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007ec4:	f7fc fc20 	bl	8004708 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ec8:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007eca:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ecc:	011a      	lsls	r2, r3, #4
 8007ece:	d508      	bpl.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ed0:	f7fc fc1a 	bl	8004708 <HAL_GetTick>
 8007ed4:	1bc0      	subs	r0, r0, r7
 8007ed6:	2802      	cmp	r0, #2
 8007ed8:	f200 87a2 	bhi.w	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	011a      	lsls	r2, r3, #4
 8007ee0:	d4f6      	bmi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8007ee2:	f104 0008 	add.w	r0, r4, #8
 8007ee6:	f7ff f869 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007eea:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007eee:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	f040 822d 	bne.w	8008350 <HAL_RCCEx_PeriphCLKConfig+0x122c>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007ef6:	4fa5      	ldr	r7, [pc, #660]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007ef8:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8007efc:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007f00:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8007f04:	4301      	orrs	r1, r0
 8007f06:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007f0a:	0058      	lsls	r0, r3, #1
 8007f0c:	d532      	bpl.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8007f0e:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8007f12:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007f16:	f000 8376 	beq.w	8008606 <HAL_RCCEx_PeriphCLKConfig+0x14e2>
 8007f1a:	f200 80a7 	bhi.w	800806c <HAL_RCCEx_PeriphCLKConfig+0xf48>
 8007f1e:	b1e1      	cbz	r1, 8007f5a <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8007f20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007f24:	f040 80ac 	bne.w	8008080 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
  __HAL_RCC_PLL2_DISABLE();
 8007f28:	4d98      	ldr	r5, [pc, #608]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f30:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007f32:	f7fc fbe9 	bl	8004708 <HAL_GetTick>
 8007f36:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f38:	e005      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xe22>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007f3a:	f7fc fbe5 	bl	8004708 <HAL_GetTick>
 8007f3e:	1bc0      	subs	r0, r0, r7
 8007f40:	2802      	cmp	r0, #2
 8007f42:	f200 8761 	bhi.w	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007f46:	682b      	ldr	r3, [r5, #0]
 8007f48:	0119      	lsls	r1, r3, #4
 8007f4a:	d4f6      	bmi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0xe16>
 8007f4c:	f104 0008 	add.w	r0, r4, #8
 8007f50:	f7ff f834 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007f54:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f58:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007f5a:	2d00      	cmp	r5, #0
 8007f5c:	f040 864e 	bne.w	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8007f60:	4f8a      	ldr	r7, [pc, #552]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007f62:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8007f66:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007f6a:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8007f6e:	4301      	orrs	r1, r0
 8007f70:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	da30      	bge.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8007f78:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8007f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f80:	f000 8325 	beq.w	80085ce <HAL_RCCEx_PeriphCLKConfig+0x14aa>
 8007f84:	d87f      	bhi.n	8008086 <HAL_RCCEx_PeriphCLKConfig+0xf62>
 8007f86:	b1db      	cbz	r3, 8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8007f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f8c:	f040 8083 	bne.w	8008096 <HAL_RCCEx_PeriphCLKConfig+0xf72>
  __HAL_RCC_PLL2_DISABLE();
 8007f90:	4d7e      	ldr	r5, [pc, #504]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007f92:	682b      	ldr	r3, [r5, #0]
 8007f94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007f98:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007f9a:	f7fc fbb5 	bl	8004708 <HAL_GetTick>
 8007f9e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fa0:	e005      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xe8a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007fa2:	f7fc fbb1 	bl	8004708 <HAL_GetTick>
 8007fa6:	1bc0      	subs	r0, r0, r7
 8007fa8:	2802      	cmp	r0, #2
 8007faa:	f200 870d 	bhi.w	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007fae:	682b      	ldr	r3, [r5, #0]
 8007fb0:	011b      	lsls	r3, r3, #4
 8007fb2:	d4f6      	bmi.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
 8007fb4:	f104 0008 	add.w	r0, r4, #8
 8007fb8:	f7ff f800 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
 8007fbc:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007fbe:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007fc0:	2d00      	cmp	r5, #0
 8007fc2:	f040 8615 	bne.w	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8007fc6:	4971      	ldr	r1, [pc, #452]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007fc8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8007fcc:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 8007fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fd4:	4303      	orrs	r3, r0
 8007fd6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007fda:	07d1      	lsls	r1, r2, #31
 8007fdc:	d52f      	bpl.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xf1a>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8007fde:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8007fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe6:	f000 84a8 	beq.w	800893a <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8007fea:	d857      	bhi.n	800809c <HAL_RCCEx_PeriphCLKConfig+0xf78>
 8007fec:	b1d3      	cbz	r3, 8008024 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8007fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff2:	d15b      	bne.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0xf88>
  __HAL_RCC_PLL2_DISABLE();
 8007ff4:	4d65      	ldr	r5, [pc, #404]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007ff6:	682b      	ldr	r3, [r5, #0]
 8007ff8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ffc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007ffe:	f7fc fb83 	bl	8004708 <HAL_GetTick>
 8008002:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008004:	e005      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0xeee>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008006:	f7fc fb7f 	bl	8004708 <HAL_GetTick>
 800800a:	1bc0      	subs	r0, r0, r7
 800800c:	2802      	cmp	r0, #2
 800800e:	f200 86ac 	bhi.w	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008012:	682b      	ldr	r3, [r5, #0]
 8008014:	011b      	lsls	r3, r3, #4
 8008016:	d4f6      	bmi.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0xee2>
 8008018:	f104 0008 	add.w	r0, r4, #8
 800801c:	f7fe ffce 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
 8008020:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008022:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008024:	2d00      	cmp	r5, #0
 8008026:	f040 85c8 	bne.w	8008bba <HAL_RCCEx_PeriphCLKConfig+0x1a96>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 800802a:	4958      	ldr	r1, [pc, #352]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800802c:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8008030:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 8008034:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8008038:	4303      	orrs	r3, r0
 800803a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800803e:	0791      	lsls	r1, r2, #30
 8008040:	d538      	bpl.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->OspiClockSelection)
 8008042:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8008046:	2b03      	cmp	r3, #3
 8008048:	f200 876b 	bhi.w	8008f22 <HAL_RCCEx_PeriphCLKConfig+0x1dfe>
 800804c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008050:	00840089 	.word	0x00840089
 8008054:	008904ae 	.word	0x008904ae
    switch (pPeriphClkInit->Spi3ClockSelection)
 8008058:	29c0      	cmp	r1, #192	; 0xc0
 800805a:	f43f af49 	beq.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 800805e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008062:	f43f af45 	beq.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 8008066:	2601      	movs	r6, #1
 8008068:	4635      	mov	r5, r6
 800806a:	e74e      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi4ClockSelection)
 800806c:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 8008070:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8008074:	f43f af71 	beq.w	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8008078:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 800807c:	f43f af6d 	beq.w	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8008080:	2601      	movs	r6, #1
 8008082:	4635      	mov	r5, r6
 8008084:	e776      	b.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8008086:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800808a:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800808e:	d097      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8008090:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008094:	d094      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8008096:	2601      	movs	r6, #1
 8008098:	4635      	mov	r5, r6
 800809a:	e79e      	b.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi6ClockSelection)
 800809c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80080a0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80080a4:	d0be      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80080a6:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80080aa:	d0bb      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80080ac:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80080ae:	0791      	lsls	r1, r2, #30
    switch (pPeriphClkInit->Spi6ClockSelection)
 80080b0:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80080b2:	d4c6      	bmi.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080b4:	0757      	lsls	r7, r2, #29
 80080b6:	d50c      	bpl.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xfae>
    switch (pPeriphClkInit->FdcanClockSelection)
 80080b8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80080bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080c0:	d069      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1072>
 80080c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080c6:	f000 8209 	beq.w	80084dc <HAL_RCCEx_PeriphCLKConfig+0x13b8>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d068      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80080ce:	2601      	movs	r6, #1
 80080d0:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080d2:	06d1      	lsls	r1, r2, #27
 80080d4:	d509      	bpl.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xfc6>
    switch (pPeriphClkInit->UsbClockSelection)
 80080d6:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80080da:	2b20      	cmp	r3, #32
 80080dc:	f000 839a 	beq.w	8008814 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 80080e0:	2b30      	cmp	r3, #48	; 0x30
 80080e2:	d070      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x10a2>
 80080e4:	2b10      	cmp	r3, #16
 80080e6:	d069      	beq.n	80081bc <HAL_RCCEx_PeriphCLKConfig+0x1098>
 80080e8:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080ea:	0713      	lsls	r3, r2, #28
 80080ec:	d509      	bpl.n	8008102 <HAL_RCCEx_PeriphCLKConfig+0xfde>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 80080ee:	4a27      	ldr	r2, [pc, #156]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80080f0:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 80080f4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 80080f8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80080fc:	430b      	orrs	r3, r1
 80080fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8008102:	4630      	mov	r0, r6
 8008104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_RCC_PLL3_DISABLE();
 8008108:	4d20      	ldr	r5, [pc, #128]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800810a:	682b      	ldr	r3, [r5, #0]
 800810c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008110:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008112:	f7fc faf9 	bl	8004708 <HAL_GetTick>
 8008116:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008118:	e005      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x1002>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800811a:	f7fc faf5 	bl	8004708 <HAL_GetTick>
 800811e:	1bc0      	subs	r0, r0, r7
 8008120:	2802      	cmp	r0, #2
 8008122:	f200 866b 	bhi.w	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008126:	682b      	ldr	r3, [r5, #0]
 8008128:	0098      	lsls	r0, r3, #2
 800812a:	d4f6      	bmi.n	800811a <HAL_RCCEx_PeriphCLKConfig+0xff6>
 800812c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008130:	f7fe ff9e 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008134:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008138:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800813a:	2d00      	cmp	r5, #0
 800813c:	f040 8567 	bne.w	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x1aea>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8008140:	4f12      	ldr	r7, [pc, #72]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8008142:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8008146:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800814a:	f021 0107 	bic.w	r1, r1, #7
 800814e:	4301      	orrs	r1, r0
 8008150:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8008154:	f7ff ba6d 	b.w	8007632 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008158:	490c      	ldr	r1, [pc, #48]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800815a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800815c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008160:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8008162:	2d00      	cmp	r5, #0
 8008164:	f040 81d6 	bne.w	8008514 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8008168:	4908      	ldr	r1, [pc, #32]	; (800818c <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800816a:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 800816e:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	4303      	orrs	r3, r0
 8008178:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800817c:	e79a      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->AdcDacClockSelection)
 800817e:	2601      	movs	r6, #1
 8008180:	4635      	mov	r5, r6
 8008182:	e4ef      	b.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8008184:	2601      	movs	r6, #1
 8008186:	4635      	mov	r5, r6
 8008188:	e56b      	b.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 800818a:	bf00      	nop
 800818c:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8008190:	2601      	movs	r6, #1
 8008192:	4635      	mov	r5, r6
 8008194:	e533      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xada>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008196:	49b5      	ldr	r1, [pc, #724]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8008198:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800819a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800819e:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 80081a0:	2d00      	cmp	r5, #0
 80081a2:	f040 81b9 	bne.w	8008518 <HAL_RCCEx_PeriphCLKConfig+0x13f4>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80081a6:	49b1      	ldr	r1, [pc, #708]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80081a8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 80081ac:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
 80081b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b4:	4303      	orrs	r3, r0
 80081b6:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80081ba:	e78a      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xfae>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081bc:	49ab      	ldr	r1, [pc, #684]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80081be:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80081c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081c4:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 80081c6:	2d00      	cmp	r5, #0
 80081c8:	f040 81a8 	bne.w	800851c <HAL_RCCEx_PeriphCLKConfig+0x13f8>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80081cc:	49a7      	ldr	r1, [pc, #668]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80081ce:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80081d2:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 80081d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80081da:	4303      	orrs	r3, r0
 80081dc:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80081e0:	e783      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 80081e2:	4da2      	ldr	r5, [pc, #648]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081ea:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80081ec:	f7fc fa8c 	bl	8004708 <HAL_GetTick>
 80081f0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081f2:	e005      	b.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081f4:	f7fc fa88 	bl	8004708 <HAL_GetTick>
 80081f8:	1bc0      	subs	r0, r0, r7
 80081fa:	2802      	cmp	r0, #2
 80081fc:	f200 8646 	bhi.w	8008e8c <HAL_RCCEx_PeriphCLKConfig+0x1d68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	d4f6      	bmi.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x10d0>
 8008206:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800820a:	f7fe ff31 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800820e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008212:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008214:	2d00      	cmp	r5, #0
 8008216:	f040 8479 	bne.w	8008b0c <HAL_RCCEx_PeriphCLKConfig+0x19e8>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 800821a:	4f94      	ldr	r7, [pc, #592]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800821c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8008220:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8008224:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8008228:	4301      	orrs	r1, r0
 800822a:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800822e:	f7ff bac1 	b.w	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    if (ret == HAL_OK)
 8008232:	2d00      	cmp	r5, #0
 8008234:	f040 8327 	bne.w	8008886 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8008238:	4f8c      	ldr	r7, [pc, #560]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800823a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800823e:	f020 0008 	bic.w	r0, r0, #8
 8008242:	4301      	orrs	r1, r0
 8008244:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008248:	0199      	lsls	r1, r3, #6
 800824a:	f57f ac98 	bpl.w	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800824e:	4f88      	ldr	r7, [pc, #544]	; (8008470 <HAL_RCCEx_PeriphCLKConfig+0x134c>)
 8008250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008252:	f043 0301 	orr.w	r3, r3, #1
 8008256:	627b      	str	r3, [r7, #36]	; 0x24
    tickstart = HAL_GetTick();
 8008258:	f7fc fa56 	bl	8004708 <HAL_GetTick>
 800825c:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800825e:	e006      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x114a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008260:	f7fc fa52 	bl	8004708 <HAL_GetTick>
 8008264:	eba0 0008 	sub.w	r0, r0, r8
 8008268:	2802      	cmp	r0, #2
 800826a:	f200 8549 	bhi.w	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	07db      	lsls	r3, r3, #31
 8008272:	d5f5      	bpl.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0x113c>
    if (ret == HAL_OK)
 8008274:	2d00      	cmp	r5, #0
 8008276:	f040 863d 	bne.w	8008ef4 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800827a:	4f7c      	ldr	r7, [pc, #496]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 800827c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008280:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK)
 8008284:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8008288:	d02b      	beq.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x11be>
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 800828a:	f402 7140 	and.w	r1, r2, #768	; 0x300
 800828e:	4299      	cmp	r1, r3
 8008290:	d029      	beq.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008292:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 8008296:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800829a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800829e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80082a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80082ae:	f420 7340 	bic.w	r3, r0, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082b2:	07c0      	lsls	r0, r0, #31
        RCC->BDCR = tmpregister;
 80082b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80082b8:	f140 8625 	bpl.w	8008f06 <HAL_RCCEx_PeriphCLKConfig+0x1de2>
        tickstart = HAL_GetTick();
 80082bc:	f7fc fa24 	bl	8004708 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082c0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80082c4:	4680      	mov	r8, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082c6:	e006      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x11b2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082c8:	f7fc fa1e 	bl	8004708 <HAL_GetTick>
 80082cc:	eba0 0008 	sub.w	r0, r0, r8
 80082d0:	4548      	cmp	r0, r9
 80082d2:	f200 8515 	bhi.w	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80082da:	079b      	lsls	r3, r3, #30
 80082dc:	d5f4      	bpl.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x11a4>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 80082de:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 80082e2:	f402 7340 	and.w	r3, r2, #768	; 0x300
 80082e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082ea:	f000 85f8 	beq.w	8008ede <HAL_RCCEx_PeriphCLKConfig+0x1dba>
 80082ee:	495f      	ldr	r1, [pc, #380]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80082f0:	69cb      	ldr	r3, [r1, #28]
 80082f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80082f6:	61cb      	str	r3, [r1, #28]
 80082f8:	4b5c      	ldr	r3, [pc, #368]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80082fa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80082fe:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8008302:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8008306:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 800830a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800830e:	430a      	orrs	r2, r1
 8008310:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008314:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008318:	e431      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800831a:	4854      	ldr	r0, [pc, #336]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800831c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800831e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008322:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8008324:	2d00      	cmp	r5, #0
 8008326:	f040 849a 	bne.w	8008c5e <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800832a:	4f50      	ldr	r7, [pc, #320]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800832c:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8008330:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8008334:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8008338:	4301      	orrs	r1, r0
 800833a:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800833e:	e5ad      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd78>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008340:	484a      	ldr	r0, [pc, #296]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8008342:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008344:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008348:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 800834a:	2d00      	cmp	r5, #0
 800834c:	f43f add3 	beq.w	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008350:	462e      	mov	r6, r5
 8008352:	e5da      	b.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008354:	4845      	ldr	r0, [pc, #276]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8008356:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008358:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800835c:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 800835e:	2d00      	cmp	r5, #0
 8008360:	f43f aba4 	beq.w	8007aac <HAL_RCCEx_PeriphCLKConfig+0x988>
 8008364:	462e      	mov	r6, r5
 8008366:	f7ff bbab 	b.w	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x99c>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800836a:	4840      	ldr	r0, [pc, #256]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800836c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800836e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008372:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8008374:	2d00      	cmp	r5, #0
 8008376:	f43f abd2 	beq.w	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800837a:	462e      	mov	r6, r5
 800837c:	f7ff bbd9 	b.w	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008380:	483a      	ldr	r0, [pc, #232]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8008382:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008384:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008388:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 800838a:	e45d      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0xb24>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838c:	4837      	ldr	r0, [pc, #220]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800838e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8008390:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8008394:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 8008396:	e425      	b.n	8007be4 <HAL_RCCEx_PeriphCLKConfig+0xac0>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008398:	4f34      	ldr	r7, [pc, #208]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800839a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800839c:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80083a0:	62b8      	str	r0, [r7, #40]	; 0x28
    if (ret == HAL_OK)
 80083a2:	2d00      	cmp	r5, #0
 80083a4:	f040 8097 	bne.w	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80083a8:	e530      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xce8>
  __HAL_RCC_PLL2_DISABLE();
 80083aa:	4d30      	ldr	r5, [pc, #192]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80083ac:	682b      	ldr	r3, [r5, #0]
 80083ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80083b2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80083b4:	f7fc f9a8 	bl	8004708 <HAL_GetTick>
 80083b8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083ba:	e005      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x12a4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80083bc:	f7fc f9a4 	bl	8004708 <HAL_GetTick>
 80083c0:	1bc0      	subs	r0, r0, r7
 80083c2:	2802      	cmp	r0, #2
 80083c4:	f200 8574 	bhi.w	8008eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	011b      	lsls	r3, r3, #4
 80083cc:	d4f6      	bmi.n	80083bc <HAL_RCCEx_PeriphCLKConfig+0x1298>
 80083ce:	f104 0008 	add.w	r0, r4, #8
 80083d2:	f7fe fdf3 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80083d6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80083da:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80083dc:	2d00      	cmp	r5, #0
 80083de:	f43f abb7 	beq.w	8007b50 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 80083e2:	e38d      	b.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
  __HAL_RCC_PLL3_DISABLE();
 80083e4:	4d21      	ldr	r5, [pc, #132]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80083e6:	682b      	ldr	r3, [r5, #0]
 80083e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083ec:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80083ee:	f7fc f98b 	bl	8004708 <HAL_GetTick>
 80083f2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80083f4:	e005      	b.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x12de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80083f6:	f7fc f987 	bl	8004708 <HAL_GetTick>
 80083fa:	1bc0      	subs	r0, r0, r7
 80083fc:	2802      	cmp	r0, #2
 80083fe:	f200 853f 	bhi.w	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008402:	682b      	ldr	r3, [r5, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	d4f6      	bmi.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8008408:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800840c:	f7fe fe30 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008410:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008414:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008416:	2d00      	cmp	r5, #0
 8008418:	f43f ac61 	beq.w	8007cde <HAL_RCCEx_PeriphCLKConfig+0xbba>
 800841c:	e37f      	b.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x19fa>
  __HAL_RCC_PLL3_DISABLE();
 800841e:	4d13      	ldr	r5, [pc, #76]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008426:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008428:	f7fc f96e 	bl	8004708 <HAL_GetTick>
 800842c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800842e:	e005      	b.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1318>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008430:	f7fc f96a 	bl	8004708 <HAL_GetTick>
 8008434:	1bc0      	subs	r0, r0, r7
 8008436:	2802      	cmp	r0, #2
 8008438:	f200 8534 	bhi.w	8008ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800843c:	682b      	ldr	r3, [r5, #0]
 800843e:	0098      	lsls	r0, r3, #2
 8008440:	d4f6      	bmi.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8008442:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008446:	f7fe fe13 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800844a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800844e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008450:	2d00      	cmp	r5, #0
 8008452:	f43f ac33 	beq.w	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008456:	e356      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x19e2>
  __HAL_RCC_PLL3_DISABLE();
 8008458:	4d04      	ldr	r5, [pc, #16]	; (800846c <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800845a:	682b      	ldr	r3, [r5, #0]
 800845c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008460:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008462:	f7fc f951 	bl	8004708 <HAL_GetTick>
 8008466:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008468:	e00a      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x135c>
 800846a:	bf00      	nop
 800846c:	44020c00 	.word	0x44020c00
 8008470:	44020800 	.word	0x44020800
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008474:	f7fc f948 	bl	8004708 <HAL_GetTick>
 8008478:	1bc0      	subs	r0, r0, r7
 800847a:	2802      	cmp	r0, #2
 800847c:	f200 850c 	bhi.w	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1d74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	d4f6      	bmi.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1350>
 8008486:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800848a:	f7fe fdf1 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800848e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008492:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008494:	2d00      	cmp	r5, #0
 8008496:	f43f ac33 	beq.w	8007d00 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
 800849a:	e33a      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x19ee>
  __HAL_RCC_PLL3_DISABLE();
 800849c:	4db5      	ldr	r5, [pc, #724]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800849e:	682b      	ldr	r3, [r5, #0]
 80084a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80084a4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80084a6:	f7fc f92f 	bl	8004708 <HAL_GetTick>
 80084aa:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ac:	e005      	b.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x1396>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80084ae:	f7fc f92b 	bl	8004708 <HAL_GetTick>
 80084b2:	1bc0      	subs	r0, r0, r7
 80084b4:	2802      	cmp	r0, #2
 80084b6:	f200 84d7 	bhi.w	8008e68 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80084ba:	682b      	ldr	r3, [r5, #0]
 80084bc:	0098      	lsls	r0, r3, #2
 80084be:	d4f6      	bmi.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x138a>
 80084c0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80084c4:	f7fe fdd4 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084cc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	f43f ac27 	beq.w	8007d22 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80084d4:	e320      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x19f4>
 80084d6:	462e      	mov	r6, r5
 80084d8:	f7ff bb61 	b.w	8007b9e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
  __HAL_RCC_PLL2_DISABLE();
 80084dc:	4da5      	ldr	r5, [pc, #660]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80084de:	682b      	ldr	r3, [r5, #0]
 80084e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084e4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80084e6:	f7fc f90f 	bl	8004708 <HAL_GetTick>
 80084ea:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084ec:	e005      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80084ee:	f7fc f90b 	bl	8004708 <HAL_GetTick>
 80084f2:	1bc0      	subs	r0, r0, r7
 80084f4:	2802      	cmp	r0, #2
 80084f6:	f200 84e9 	bhi.w	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	0118      	lsls	r0, r3, #4
 80084fe:	d4f6      	bmi.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x13ca>
 8008500:	f104 0008 	add.w	r0, r4, #8
 8008504:	f7fe fd5a 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
 8008508:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800850a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800850c:	2d00      	cmp	r5, #0
 800850e:	f43f ae4a 	beq.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8008512:	e001      	b.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x13f4>
 8008514:	462e      	mov	r6, r5
 8008516:	e5cd      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8008518:	462e      	mov	r6, r5
 800851a:	e5da      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xfae>
 800851c:	462e      	mov	r6, r5
 800851e:	e5e4      	b.n	80080ea <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 8008520:	4d94      	ldr	r5, [pc, #592]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8008522:	682b      	ldr	r3, [r5, #0]
 8008524:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008528:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800852a:	f7fc f8ed 	bl	8004708 <HAL_GetTick>
 800852e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008530:	e005      	b.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x141a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008532:	f7fc f8e9 	bl	8004708 <HAL_GetTick>
 8008536:	1bc0      	subs	r0, r0, r7
 8008538:	2802      	cmp	r0, #2
 800853a:	f200 8404 	bhi.w	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800853e:	682b      	ldr	r3, [r5, #0]
 8008540:	0098      	lsls	r0, r3, #2
 8008542:	d4f6      	bmi.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x140e>
 8008544:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008548:	f7fe fd92 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 800854c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008550:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008552:	2d00      	cmp	r5, #0
 8008554:	f43f a99a 	beq.w	800788c <HAL_RCCEx_PeriphCLKConfig+0x768>
 8008558:	e356      	b.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
  __HAL_RCC_PLL3_DISABLE();
 800855a:	4d86      	ldr	r5, [pc, #536]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008562:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008564:	f7fc f8d0 	bl	8004708 <HAL_GetTick>
 8008568:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800856a:	e005      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x1454>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800856c:	f7fc f8cc 	bl	8004708 <HAL_GetTick>
 8008570:	1bc0      	subs	r0, r0, r7
 8008572:	2802      	cmp	r0, #2
 8008574:	f200 8430 	bhi.w	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008578:	682b      	ldr	r3, [r5, #0]
 800857a:	0098      	lsls	r0, r3, #2
 800857c:	d4f6      	bmi.n	800856c <HAL_RCCEx_PeriphCLKConfig+0x1448>
 800857e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008582:	f7fe fd75 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8008586:	e9d4 3200 	ldrd	r3, r2, [r4]
 800858a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800858c:	2d00      	cmp	r5, #0
 800858e:	f43f a9b2 	beq.w	80078f6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008592:	e336      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x1ade>
  __HAL_RCC_PLL3_DISABLE();
 8008594:	4d77      	ldr	r5, [pc, #476]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8008596:	682b      	ldr	r3, [r5, #0]
 8008598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800859c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800859e:	f7fc f8b3 	bl	8004708 <HAL_GetTick>
 80085a2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085a4:	e005      	b.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x148e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085a6:	f7fc f8af 	bl	8004708 <HAL_GetTick>
 80085aa:	1bc0      	subs	r0, r0, r7
 80085ac:	2802      	cmp	r0, #2
 80085ae:	f200 83f9 	bhi.w	8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	0098      	lsls	r0, r3, #2
 80085b6:	d4f6      	bmi.n	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x1482>
 80085b8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80085bc:	f7fe fd58 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80085c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80085c4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80085c6:	2d00      	cmp	r5, #0
 80085c8:	f43e aeb1 	beq.w	800732e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80085cc:	e328      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1afc>
  __HAL_RCC_PLL3_DISABLE();
 80085ce:	4d69      	ldr	r5, [pc, #420]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80085d8:	f7fc f896 	bl	8004708 <HAL_GetTick>
 80085dc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085de:	e005      	b.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x14c8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80085e0:	f7fc f892 	bl	8004708 <HAL_GetTick>
 80085e4:	1bc0      	subs	r0, r0, r7
 80085e6:	2802      	cmp	r0, #2
 80085e8:	f200 83ee 	bhi.w	8008dc8 <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80085ec:	682b      	ldr	r3, [r5, #0]
 80085ee:	0098      	lsls	r0, r3, #2
 80085f0:	d4f6      	bmi.n	80085e0 <HAL_RCCEx_PeriphCLKConfig+0x14bc>
 80085f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80085f6:	f7fe fd3b 	bl	8007070 <RCCEx_PLL3_Config.part.0>
 80085fa:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80085fc:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80085fe:	2d00      	cmp	r5, #0
 8008600:	f43f ace1 	beq.w	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8008604:	e2f4      	b.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
  __HAL_RCC_PLL3_DISABLE();
 8008606:	4d5b      	ldr	r5, [pc, #364]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800860e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008610:	f7fc f87a 	bl	8004708 <HAL_GetTick>
 8008614:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008616:	e005      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x1500>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008618:	f7fc f876 	bl	8004708 <HAL_GetTick>
 800861c:	1bc0      	subs	r0, r0, r7
 800861e:	2802      	cmp	r0, #2
 8008620:	f200 83f2 	bhi.w	8008e08 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008624:	682b      	ldr	r3, [r5, #0]
 8008626:	009a      	lsls	r2, r3, #2
 8008628:	d4f6      	bmi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x14f4>
 800862a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800862e:	f7fe fd1f 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008632:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008636:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008638:	2d00      	cmp	r5, #0
 800863a:	f43f ac91 	beq.w	8007f60 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 800863e:	e2dd      	b.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
  __HAL_RCC_PLL3_DISABLE();
 8008640:	4d4c      	ldr	r5, [pc, #304]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008648:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800864a:	f7fc f85d 	bl	8004708 <HAL_GetTick>
 800864e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008650:	e005      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x153a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008652:	f7fc f859 	bl	8004708 <HAL_GetTick>
 8008656:	1bc0      	subs	r0, r0, r7
 8008658:	2802      	cmp	r0, #2
 800865a:	f200 836e 	bhi.w	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800865e:	682b      	ldr	r3, [r5, #0]
 8008660:	0098      	lsls	r0, r3, #2
 8008662:	d4f6      	bmi.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x152e>
 8008664:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008668:	f7fe fd02 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800866c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008670:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008672:	2d00      	cmp	r5, #0
 8008674:	f43e ae91 	beq.w	800739a <HAL_RCCEx_PeriphCLKConfig+0x276>
 8008678:	e2cc      	b.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x1af0>
  __HAL_RCC_PLL3_DISABLE();
 800867a:	4d3e      	ldr	r5, [pc, #248]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008682:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008684:	f7fc f840 	bl	8004708 <HAL_GetTick>
 8008688:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800868a:	e005      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x1574>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800868c:	f7fc f83c 	bl	8004708 <HAL_GetTick>
 8008690:	1bc0      	subs	r0, r0, r7
 8008692:	2802      	cmp	r0, #2
 8008694:	f200 836e 	bhi.w	8008d74 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	0098      	lsls	r0, r3, #2
 800869c:	d4f6      	bmi.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x1568>
 800869e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80086a2:	f7fe fce5 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80086a6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80086aa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80086ac:	2d00      	cmp	r5, #0
 80086ae:	f43e af41 	beq.w	8007534 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80086b2:	e291      	b.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
  __HAL_RCC_PLL3_DISABLE();
 80086b4:	4d2f      	ldr	r5, [pc, #188]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80086b6:	682b      	ldr	r3, [r5, #0]
 80086b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086bc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80086be:	f7fc f823 	bl	8004708 <HAL_GetTick>
 80086c2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086c4:	e005      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x15ae>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80086c6:	f7fc f81f 	bl	8004708 <HAL_GetTick>
 80086ca:	1bc0      	subs	r0, r0, r7
 80086cc:	2802      	cmp	r0, #2
 80086ce:	f200 8346 	bhi.w	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	0098      	lsls	r0, r3, #2
 80086d6:	d4f6      	bmi.n	80086c6 <HAL_RCCEx_PeriphCLKConfig+0x15a2>
 80086d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80086dc:	f7fe fcc8 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80086e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80086e4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	f43f a93d 	beq.w	8007966 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80086ec:	e277      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x1aba>
  __HAL_RCC_PLL3_DISABLE();
 80086ee:	4d21      	ldr	r5, [pc, #132]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086f6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80086f8:	f7fc f806 	bl	8004708 <HAL_GetTick>
 80086fc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086fe:	e005      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x15e8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008700:	f7fc f802 	bl	8004708 <HAL_GetTick>
 8008704:	1bc0      	subs	r0, r0, r7
 8008706:	2802      	cmp	r0, #2
 8008708:	f200 8323 	bhi.w	8008d52 <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	0098      	lsls	r0, r3, #2
 8008710:	d4f6      	bmi.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
 8008712:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008716:	f7fe fcab 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 800871a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800871e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008720:	2d00      	cmp	r5, #0
 8008722:	f43e aea0 	beq.w	8007466 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008726:	e278      	b.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1af6>
  __HAL_RCC_PLL3_DISABLE();
 8008728:	4d12      	ldr	r5, [pc, #72]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800872a:	682b      	ldr	r3, [r5, #0]
 800872c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008730:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008732:	f7fb ffe9 	bl	8004708 <HAL_GetTick>
 8008736:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008738:	e005      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x1622>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800873a:	f7fb ffe5 	bl	8004708 <HAL_GetTick>
 800873e:	1bc0      	subs	r0, r0, r7
 8008740:	2802      	cmp	r0, #2
 8008742:	f200 8329 	bhi.w	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008746:	682b      	ldr	r3, [r5, #0]
 8008748:	0098      	lsls	r0, r3, #2
 800874a:	d4f6      	bmi.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x1616>
 800874c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008750:	f7fe fc8e 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008754:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008758:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800875a:	2d00      	cmp	r5, #0
 800875c:	f43e ad81 	beq.w	8007262 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8008760:	e237      	b.n	8008bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aae>
  __HAL_RCC_PLL3_DISABLE();
 8008762:	4d04      	ldr	r5, [pc, #16]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8008764:	682b      	ldr	r3, [r5, #0]
 8008766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800876a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800876c:	f7fb ffcc 	bl	8004708 <HAL_GetTick>
 8008770:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008772:	e007      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1660>
 8008774:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008778:	f7fb ffc6 	bl	8004708 <HAL_GetTick>
 800877c:	1bc0      	subs	r0, r0, r7
 800877e:	2802      	cmp	r0, #2
 8008780:	f200 82d5 	bhi.w	8008d2e <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	0098      	lsls	r0, r3, #2
 8008788:	d4f6      	bmi.n	8008778 <HAL_RCCEx_PeriphCLKConfig+0x1654>
 800878a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800878e:	f7fe fc6f 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8008792:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008796:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008798:	2d00      	cmp	r5, #0
 800879a:	f43f a919 	beq.w	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 800879e:	e209      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x1a90>
  __HAL_RCC_PLL3_DISABLE();
 80087a0:	4db0      	ldr	r5, [pc, #704]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80087a2:	682b      	ldr	r3, [r5, #0]
 80087a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087a8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80087aa:	f7fb ffad 	bl	8004708 <HAL_GetTick>
 80087ae:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087b0:	e005      	b.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x169a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80087b2:	f7fb ffa9 	bl	8004708 <HAL_GetTick>
 80087b6:	1bc0      	subs	r0, r0, r7
 80087b8:	2802      	cmp	r0, #2
 80087ba:	f200 82e7 	bhi.w	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087be:	682b      	ldr	r3, [r5, #0]
 80087c0:	0098      	lsls	r0, r3, #2
 80087c2:	d4f6      	bmi.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x168e>
 80087c4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80087c8:	f7fe fc52 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80087cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80087d0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80087d2:	2d00      	cmp	r5, #0
 80087d4:	f43e ae7a 	beq.w	80074cc <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 80087d8:	e204      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
  __HAL_RCC_PLL3_DISABLE();
 80087da:	4da2      	ldr	r5, [pc, #648]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087e2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80087e4:	f7fb ff90 	bl	8004708 <HAL_GetTick>
 80087e8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087ea:	e005      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x16d4>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80087ec:	f7fb ff8c 	bl	8004708 <HAL_GetTick>
 80087f0:	1bc0      	subs	r0, r0, r7
 80087f2:	2802      	cmp	r0, #2
 80087f4:	f200 82e2 	bhi.w	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	0098      	lsls	r0, r3, #2
 80087fc:	d4f6      	bmi.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x16c8>
 80087fe:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008802:	f7fe fc35 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008806:	e9d4 3200 	ldrd	r3, r2, [r4]
 800880a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800880c:	2d00      	cmp	r5, #0
 800880e:	f43f a808 	beq.w	8007822 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8008812:	e1d5      	b.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
  __HAL_RCC_PLL3_DISABLE();
 8008814:	4d93      	ldr	r5, [pc, #588]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8008816:	682b      	ldr	r3, [r5, #0]
 8008818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800881c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800881e:	f7fb ff73 	bl	8004708 <HAL_GetTick>
 8008822:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008824:	e005      	b.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x170e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008826:	f7fb ff6f 	bl	8004708 <HAL_GetTick>
 800882a:	1bc0      	subs	r0, r0, r7
 800882c:	2802      	cmp	r0, #2
 800882e:	f200 8352 	bhi.w	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008832:	682b      	ldr	r3, [r5, #0]
 8008834:	009a      	lsls	r2, r3, #2
 8008836:	d4f6      	bmi.n	8008826 <HAL_RCCEx_PeriphCLKConfig+0x1702>
 8008838:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800883c:	f7fe fc18 	bl	8007070 <RCCEx_PLL3_Config.part.0>
 8008840:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008842:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008844:	2d00      	cmp	r5, #0
 8008846:	f43f acc1 	beq.w	80081cc <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 800884a:	e667      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x13f8>
  __HAL_RCC_PLL3_DISABLE();
 800884c:	4d85      	ldr	r5, [pc, #532]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800884e:	682b      	ldr	r3, [r5, #0]
 8008850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008854:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008856:	f7fb ff57 	bl	8004708 <HAL_GetTick>
 800885a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800885c:	e005      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x1746>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800885e:	f7fb ff53 	bl	8004708 <HAL_GetTick>
 8008862:	1bc0      	subs	r0, r0, r7
 8008864:	2802      	cmp	r0, #2
 8008866:	f200 82c3 	bhi.w	8008df0 <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800886a:	682b      	ldr	r3, [r5, #0]
 800886c:	0098      	lsls	r0, r3, #2
 800886e:	d4f6      	bmi.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x173a>
 8008870:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008874:	f7fe fbfc 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008878:	e9d4 3200 	ldrd	r3, r2, [r4]
 800887c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800887e:	2d00      	cmp	r5, #0
 8008880:	f43f a8db 	beq.w	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x916>
 8008884:	e19f      	b.n	8008bc6 <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
 8008886:	462e      	mov	r6, r5
 8008888:	f7ff b976 	b.w	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  __HAL_RCC_PLL3_DISABLE();
 800888c:	4d75      	ldr	r5, [pc, #468]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800888e:	682b      	ldr	r3, [r5, #0]
 8008890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008894:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008896:	f7fb ff37 	bl	8004708 <HAL_GetTick>
 800889a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800889c:	e005      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x1786>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800889e:	f7fb ff33 	bl	8004708 <HAL_GetTick>
 80088a2:	1bc0      	subs	r0, r0, r7
 80088a4:	2802      	cmp	r0, #2
 80088a6:	f200 8283 	bhi.w	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088aa:	682b      	ldr	r3, [r5, #0]
 80088ac:	0098      	lsls	r0, r3, #2
 80088ae:	d4f6      	bmi.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x177a>
 80088b0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80088b4:	f7fe fbdc 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80088bc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80088be:	2d00      	cmp	r5, #0
 80088c0:	f43e aee3 	beq.w	800768a <HAL_RCCEx_PeriphCLKConfig+0x566>
 80088c4:	e197      	b.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
  __HAL_RCC_PLL3_DISABLE();
 80088c6:	4d67      	ldr	r5, [pc, #412]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088ce:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80088d0:	f7fb ff1a 	bl	8004708 <HAL_GetTick>
 80088d4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088d6:	e005      	b.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x17c0>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088d8:	f7fb ff16 	bl	8004708 <HAL_GetTick>
 80088dc:	1bc0      	subs	r0, r0, r7
 80088de:	2802      	cmp	r0, #2
 80088e0:	f200 824e 	bhi.w	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	0098      	lsls	r0, r3, #2
 80088e8:	d4f6      	bmi.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x17b4>
 80088ea:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80088ee:	f7fe fbbf 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80088f2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80088f6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	f43e ad81 	beq.w	8007400 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80088fe:	e174      	b.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
  __HAL_RCC_PLL3_DISABLE();
 8008900:	4d58      	ldr	r5, [pc, #352]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8008902:	682b      	ldr	r3, [r5, #0]
 8008904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008908:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800890a:	f7fb fefd 	bl	8004708 <HAL_GetTick>
 800890e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008910:	e005      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x17fa>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008912:	f7fb fef9 	bl	8004708 <HAL_GetTick>
 8008916:	1bc0      	subs	r0, r0, r7
 8008918:	2802      	cmp	r0, #2
 800891a:	f200 8202 	bhi.w	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	0098      	lsls	r0, r3, #2
 8008922:	d4f6      	bmi.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x17ee>
 8008924:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008928:	f7fe fba2 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800892c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008930:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008932:	2d00      	cmp	r5, #0
 8008934:	f43e aede 	beq.w	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008938:	e148      	b.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
  __HAL_RCC_PLL3_DISABLE();
 800893a:	4d4a      	ldr	r5, [pc, #296]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008942:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008944:	f7fb fee0 	bl	8004708 <HAL_GetTick>
 8008948:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800894a:	e005      	b.n	8008958 <HAL_RCCEx_PeriphCLKConfig+0x1834>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800894c:	f7fb fedc 	bl	8004708 <HAL_GetTick>
 8008950:	1bc0      	subs	r0, r0, r7
 8008952:	2802      	cmp	r0, #2
 8008954:	f200 8209 	bhi.w	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	0098      	lsls	r0, r3, #2
 800895c:	d4f6      	bmi.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x1828>
 800895e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008962:	f7fe fb85 	bl	8007070 <RCCEx_PLL3_Config.part.0>
 8008966:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008968:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800896a:	2d00      	cmp	r5, #0
 800896c:	f43f ab5d 	beq.w	800802a <HAL_RCCEx_PeriphCLKConfig+0xf06>
 8008970:	e123      	b.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x1a96>
  __HAL_RCC_PLL3_DISABLE();
 8008972:	4d3c      	ldr	r5, [pc, #240]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8008974:	682b      	ldr	r3, [r5, #0]
 8008976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800897a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800897c:	f7fb fec4 	bl	8004708 <HAL_GetTick>
 8008980:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008982:	e005      	b.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x186c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008984:	f7fb fec0 	bl	8004708 <HAL_GetTick>
 8008988:	1bc0      	subs	r0, r0, r7
 800898a:	2802      	cmp	r0, #2
 800898c:	f200 81c3 	bhi.w	8008d16 <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	0098      	lsls	r0, r3, #2
 8008994:	d4f6      	bmi.n	8008984 <HAL_RCCEx_PeriphCLKConfig+0x1860>
 8008996:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800899a:	f7fe fb69 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800899e:	e9d4 3200 	ldrd	r3, r2, [r4]
 80089a2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80089a4:	2d00      	cmp	r5, #0
 80089a6:	f43e ac8f 	beq.w	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80089aa:	e100      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
  __HAL_RCC_PLL2_DISABLE();
 80089ac:	4d2d      	ldr	r5, [pc, #180]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089b4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80089b6:	f7fb fea7 	bl	8004708 <HAL_GetTick>
 80089ba:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089bc:	e005      	b.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x18a6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089be:	f7fb fea3 	bl	8004708 <HAL_GetTick>
 80089c2:	1bc0      	subs	r0, r0, r7
 80089c4:	2802      	cmp	r0, #2
 80089c6:	f200 827c 	bhi.w	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x1d9e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80089ca:	682b      	ldr	r3, [r5, #0]
 80089cc:	011b      	lsls	r3, r3, #4
 80089ce:	d4f6      	bmi.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x189a>
 80089d0:	f104 0008 	add.w	r0, r4, #8
 80089d4:	f7fe faf2 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
 80089d8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089da:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80089dc:	2d00      	cmp	r5, #0
 80089de:	f43f abc3 	beq.w	8008168 <HAL_RCCEx_PeriphCLKConfig+0x1044>
 80089e2:	e597      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
  __HAL_RCC_PLL3_DISABLE();
 80089e4:	4d1f      	ldr	r5, [pc, #124]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80089e6:	682b      	ldr	r3, [r5, #0]
 80089e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ec:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80089ee:	f7fb fe8b 	bl	8004708 <HAL_GetTick>
 80089f2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80089f4:	e005      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x18de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80089f6:	f7fb fe87 	bl	8004708 <HAL_GetTick>
 80089fa:	1bc0      	subs	r0, r0, r7
 80089fc:	2802      	cmp	r0, #2
 80089fe:	f200 820f 	bhi.w	8008e20 <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	009b      	lsls	r3, r3, #2
 8008a06:	d4f6      	bmi.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
 8008a08:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008a0c:	f7fe fb30 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008a10:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008a14:	4605      	mov	r5, r0
 8008a16:	f7ff ba6b 	b.w	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
  __HAL_RCC_PLL3_DISABLE();
 8008a1a:	4d12      	ldr	r5, [pc, #72]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a22:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008a24:	f7fb fe70 	bl	8004708 <HAL_GetTick>
 8008a28:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a2a:	e005      	b.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x1914>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a2c:	f7fb fe6c 	bl	8004708 <HAL_GetTick>
 8008a30:	1bc0      	subs	r0, r0, r7
 8008a32:	2802      	cmp	r0, #2
 8008a34:	f200 81ee 	bhi.w	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a38:	682b      	ldr	r3, [r5, #0]
 8008a3a:	0098      	lsls	r0, r3, #2
 8008a3c:	d4f6      	bmi.n	8008a2c <HAL_RCCEx_PeriphCLKConfig+0x1908>
 8008a3e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008a42:	f7fe fb15 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008a46:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	f7ff b864 	b.w	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  __HAL_RCC_PLL3_DISABLE();
 8008a50:	4d04      	ldr	r5, [pc, #16]	; (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8008a52:	682b      	ldr	r3, [r5, #0]
 8008a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a58:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008a5a:	f7fb fe55 	bl	8004708 <HAL_GetTick>
 8008a5e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a60:	e008      	b.n	8008a74 <HAL_RCCEx_PeriphCLKConfig+0x1950>
 8008a62:	bf00      	nop
 8008a64:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a68:	f7fb fe4e 	bl	8004708 <HAL_GetTick>
 8008a6c:	1bc0      	subs	r0, r0, r7
 8008a6e:	2802      	cmp	r0, #2
 8008a70:	f200 81dc 	bhi.w	8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a74:	682b      	ldr	r3, [r5, #0]
 8008a76:	0098      	lsls	r0, r3, #2
 8008a78:	d4f6      	bmi.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x1944>
 8008a7a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008a7e:	f7fe faf7 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8008a82:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008a86:	4605      	mov	r5, r0
 8008a88:	f7ff b80d 	b.w	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x982>
  __HAL_RCC_PLL3_DISABLE();
 8008a8c:	4dd1      	ldr	r5, [pc, #836]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a94:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008a96:	f7fb fe37 	bl	8004708 <HAL_GetTick>
 8008a9a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a9c:	e005      	b.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x1986>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a9e:	f7fb fe33 	bl	8004708 <HAL_GetTick>
 8008aa2:	1bc0      	subs	r0, r0, r7
 8008aa4:	2802      	cmp	r0, #2
 8008aa6:	f200 81c7 	bhi.w	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008aaa:	682b      	ldr	r3, [r5, #0]
 8008aac:	0098      	lsls	r0, r3, #2
 8008aae:	d4f6      	bmi.n	8008a9e <HAL_RCCEx_PeriphCLKConfig+0x197a>
 8008ab0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008ab4:	f7fe fadc 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008ab8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008abc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008abe:	2d00      	cmp	r5, #0
 8008ac0:	f43f a9b5 	beq.w	8007e2e <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8008ac4:	462e      	mov	r6, r5
 8008ac6:	f7ff b9bc 	b.w	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  __HAL_RCC_PLL2_DISABLE();
 8008aca:	4dc2      	ldr	r5, [pc, #776]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008acc:	682b      	ldr	r3, [r5, #0]
 8008ace:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ad2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008ad4:	f7fb fe18 	bl	8004708 <HAL_GetTick>
 8008ad8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ada:	e005      	b.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x19c4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008adc:	f7fb fe14 	bl	8004708 <HAL_GetTick>
 8008ae0:	1bc0      	subs	r0, r0, r7
 8008ae2:	2802      	cmp	r0, #2
 8008ae4:	f200 81a8 	bhi.w	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	d4f6      	bmi.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x19b8>
 8008aee:	f104 0008 	add.w	r0, r4, #8
 8008af2:	f7fe fa63 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008af6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008afa:	4605      	mov	r5, r0
 8008afc:	f7ff b994 	b.w	8007e28 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8008b00:	462e      	mov	r6, r5
 8008b02:	f7ff b82f 	b.w	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008b06:	462e      	mov	r6, r5
 8008b08:	f7fe be46 	b.w	8007798 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8008b0c:	462e      	mov	r6, r5
 8008b0e:	f7fe be51 	b.w	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8008b12:	462e      	mov	r6, r5
 8008b14:	f7fe be0a 	b.w	800772c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008b18:	462e      	mov	r6, r5
 8008b1a:	f7fe be19 	b.w	8007750 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8008b1e:	462e      	mov	r6, r5
 8008b20:	f7fe be28 	b.w	8007774 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8008b24:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8008b26:	2d00      	cmp	r5, #0
 8008b28:	f040 81c8 	bne.w	8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d98>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8008b2c:	4fa9      	ldr	r7, [pc, #676]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008b2e:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8008b30:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8008b34:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8008b38:	4301      	orrs	r1, r0
 8008b3a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8008b3e:	f7fe bb68 	b.w	8007212 <HAL_RCCEx_PeriphCLKConfig+0xee>
  __HAL_RCC_PLL2_DISABLE();
 8008b42:	4da4      	ldr	r5, [pc, #656]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008b44:	682b      	ldr	r3, [r5, #0]
 8008b46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b4a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008b4c:	f7fb fddc 	bl	8004708 <HAL_GetTick>
 8008b50:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b52:	e005      	b.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x1a3c>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b54:	f7fb fdd8 	bl	8004708 <HAL_GetTick>
 8008b58:	1bc0      	subs	r0, r0, r7
 8008b5a:	2802      	cmp	r0, #2
 8008b5c:	f200 814e 	bhi.w	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	011b      	lsls	r3, r3, #4
 8008b64:	d4f6      	bmi.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0x1a30>
 8008b66:	f104 0008 	add.w	r0, r4, #8
 8008b6a:	f7fe fa27 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008b6e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008b72:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008b74:	2d00      	cmp	r5, #0
 8008b76:	f43f aae3 	beq.w	8008140 <HAL_RCCEx_PeriphCLKConfig+0x101c>
 8008b7a:	e048      	b.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x1aea>
  __HAL_RCC_PLL2_DISABLE();
 8008b7c:	4d95      	ldr	r5, [pc, #596]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008b7e:	682b      	ldr	r3, [r5, #0]
 8008b80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b84:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008b86:	f7fb fdbf 	bl	8004708 <HAL_GetTick>
 8008b8a:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b8c:	e005      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x1a76>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008b8e:	f7fb fdbb 	bl	8004708 <HAL_GetTick>
 8008b92:	1b80      	subs	r0, r0, r6
 8008b94:	2802      	cmp	r0, #2
 8008b96:	f200 80b9 	bhi.w	8008d0c <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	011f      	lsls	r7, r3, #4
 8008b9e:	d4f6      	bmi.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x1a6a>
 8008ba0:	f104 0008 	add.w	r0, r4, #8
 8008ba4:	f7fe fa0a 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
 8008ba8:	4606      	mov	r6, r0
 8008baa:	f7fe baf1 	b.w	8007190 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8008bae:	462e      	mov	r6, r5
 8008bb0:	f7fe bb93 	b.w	80072da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008bb4:	462e      	mov	r6, r5
 8008bb6:	f7fe bf15 	b.w	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8008bba:	462e      	mov	r6, r5
 8008bbc:	f7ff ba3f 	b.w	800803e <HAL_RCCEx_PeriphCLKConfig+0xf1a>
 8008bc0:	462e      	mov	r6, r5
 8008bc2:	f7fe be38 	b.w	8007836 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8008bc6:	462e      	mov	r6, r5
 8008bc8:	f7fe bf41 	b.w	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8008bcc:	462e      	mov	r6, r5
 8008bce:	f7fe bd9b 	b.w	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8008bd2:	462e      	mov	r6, r5
 8008bd4:	f7fe bb4e 	b.w	8007274 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8008bd8:	462e      	mov	r6, r5
 8008bda:	f7fe bcb5 	b.w	8007548 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8008bde:	462e      	mov	r6, r5
 8008be0:	f7fe becb 	b.w	800797a <HAL_RCCEx_PeriphCLKConfig+0x856>
 8008be4:	462e      	mov	r6, r5
 8008be6:	f7fe bc7a 	b.w	80074de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008bea:	462e      	mov	r6, r5
 8008bec:	f7fe bc11 	b.w	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8008bf0:	462e      	mov	r6, r5
 8008bf2:	f7ff b9f2 	b.w	8007fda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8008bf6:	462e      	mov	r6, r5
 8008bf8:	f7fe bd51 	b.w	800769e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8008bfc:	462e      	mov	r6, r5
 8008bfe:	f7ff b9b9 	b.w	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8008c02:	462e      	mov	r6, r5
 8008c04:	f7fe be81 	b.w	800790a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8008c08:	462e      	mov	r6, r5
 8008c0a:	f7fe be49 	b.w	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8008c0e:	462e      	mov	r6, r5
 8008c10:	f7fe bd0f 	b.w	8007632 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8008c14:	462e      	mov	r6, r5
 8008c16:	f7fe bbc9 	b.w	80073ac <HAL_RCCEx_PeriphCLKConfig+0x288>
 8008c1a:	462e      	mov	r6, r5
 8008c1c:	f7fe bc2c 	b.w	8007478 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008c20:	462e      	mov	r6, r5
 8008c22:	f7fe bb8d 	b.w	8007340 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  __HAL_RCC_PLL3_DISABLE();
 8008c26:	4d6b      	ldr	r5, [pc, #428]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c2e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008c30:	f7fb fd6a 	bl	8004708 <HAL_GetTick>
 8008c34:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c36:	e005      	b.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x1b20>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008c38:	f7fb fd66 	bl	8004708 <HAL_GetTick>
 8008c3c:	1bc0      	subs	r0, r0, r7
 8008c3e:	2802      	cmp	r0, #2
 8008c40:	f200 8100 	bhi.w	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	0098      	lsls	r0, r3, #2
 8008c48:	d4f6      	bmi.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x1b14>
 8008c4a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008c4e:	f7fe fa0f 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008c52:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008c56:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008c58:	2d00      	cmp	r5, #0
 8008c5a:	f43f ab66 	beq.w	800832a <HAL_RCCEx_PeriphCLKConfig+0x1206>
 8008c5e:	462e      	mov	r6, r5
 8008c60:	f7ff b91c 	b.w	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  __HAL_RCC_PLL2_DISABLE();
 8008c64:	4d5b      	ldr	r5, [pc, #364]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008c66:	682b      	ldr	r3, [r5, #0]
 8008c68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c6c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008c6e:	f7fb fd4b 	bl	8004708 <HAL_GetTick>
 8008c72:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c74:	e005      	b.n	8008c82 <HAL_RCCEx_PeriphCLKConfig+0x1b5e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c76:	f7fb fd47 	bl	8004708 <HAL_GetTick>
 8008c7a:	1bc0      	subs	r0, r0, r7
 8008c7c:	2802      	cmp	r0, #2
 8008c7e:	f200 80e1 	bhi.w	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c82:	682b      	ldr	r3, [r5, #0]
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	d4f6      	bmi.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x1b52>
 8008c88:	f104 0008 	add.w	r0, r4, #8
 8008c8c:	f7fe f996 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008c90:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008c94:	4605      	mov	r5, r0
 8008c96:	f7ff bb45 	b.w	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1200>
  __HAL_RCC_PLL2_DISABLE();
 8008c9a:	4d4e      	ldr	r5, [pc, #312]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ca2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008ca4:	f7fb fd30 	bl	8004708 <HAL_GetTick>
 8008ca8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008caa:	e005      	b.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b94>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008cac:	f7fb fd2c 	bl	8004708 <HAL_GetTick>
 8008cb0:	1bc0      	subs	r0, r0, r7
 8008cb2:	2802      	cmp	r0, #2
 8008cb4:	f200 8096 	bhi.w	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	011b      	lsls	r3, r3, #4
 8008cbc:	d4f6      	bmi.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8008cbe:	f104 0008 	add.w	r0, r4, #8
 8008cc2:	f7fe f97b 	bl	8006fbc <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cc6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008cca:	4605      	mov	r5, r0
 8008ccc:	e72b      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x1a02>
  __HAL_RCC_PLL3_DISABLE();
 8008cce:	4d41      	ldr	r5, [pc, #260]	; (8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cd6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8008cd8:	f7fb fd16 	bl	8004708 <HAL_GetTick>
 8008cdc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cde:	e004      	b.n	8008cea <HAL_RCCEx_PeriphCLKConfig+0x1bc6>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008ce0:	f7fb fd12 	bl	8004708 <HAL_GetTick>
 8008ce4:	1bc0      	subs	r0, r0, r7
 8008ce6:	2802      	cmp	r0, #2
 8008ce8:	d87c      	bhi.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008cea:	682b      	ldr	r3, [r5, #0]
 8008cec:	0098      	lsls	r0, r3, #2
 8008cee:	d4f7      	bmi.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bbc>
 8008cf0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8008cf4:	f7fe f9bc 	bl	8007070 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008cf8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008cfc:	4605      	mov	r5, r0
 8008cfe:	e712      	b.n	8008b26 <HAL_RCCEx_PeriphCLKConfig+0x1a02>
            ret = HAL_TIMEOUT;
 8008d00:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008d02:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 8008d06:	4635      	mov	r5, r6
 8008d08:	f7fe bf39 	b.w	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d0c:	2603      	movs	r6, #3
 8008d0e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d12:	f7fe ba4c 	b.w	80071ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008d16:	2603      	movs	r6, #3
 8008d18:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d1c:	4635      	mov	r5, r6
 8008d1e:	f7fe badc 	b.w	80072da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d22:	2603      	movs	r6, #3
 8008d24:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d28:	4635      	mov	r5, r6
 8008d2a:	f7fe bced 	b.w	8007708 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8008d2e:	2603      	movs	r6, #3
 8008d30:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d34:	4635      	mov	r5, r6
 8008d36:	f7fe be55 	b.w	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008d3a:	2603      	movs	r6, #3
 8008d3c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d40:	4635      	mov	r5, r6
 8008d42:	f7fe bb33 	b.w	80073ac <HAL_RCCEx_PeriphCLKConfig+0x288>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8008d46:	2603      	movs	r6, #3
 8008d48:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d4c:	4635      	mov	r5, r6
 8008d4e:	f7fe bda7 	b.w	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8008d52:	2603      	movs	r6, #3
 8008d54:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d58:	4635      	mov	r5, r6
 8008d5a:	f7fe bb8d 	b.w	8007478 <HAL_RCCEx_PeriphCLKConfig+0x354>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8008d5e:	2603      	movs	r6, #3
 8008d60:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d64:	4635      	mov	r5, r6
 8008d66:	f7fe be08 	b.w	800797a <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008d6a:	2603      	movs	r6, #3
 8008d6c:	6862      	ldr	r2, [r4, #4]
 8008d6e:	4635      	mov	r5, r6
 8008d70:	f7ff b965 	b.w	800803e <HAL_RCCEx_PeriphCLKConfig+0xf1a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8008d74:	2603      	movs	r6, #3
 8008d76:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d7a:	4635      	mov	r5, r6
 8008d7c:	f7fe bbe4 	b.w	8007548 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008d80:	2603      	movs	r6, #3
 8008d82:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d86:	4635      	mov	r5, r6
 8008d88:	f7fe bb43 	b.w	8007412 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8008d8c:	2603      	movs	r6, #3
 8008d8e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d92:	4635      	mov	r5, r6
 8008d94:	f7fe bba3 	b.w	80074de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008d98:	2603      	movs	r6, #3
 8008d9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008d9e:	4635      	mov	r5, r6
 8008da0:	f7fe ba68 	b.w	8007274 <HAL_RCCEx_PeriphCLKConfig+0x150>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008da4:	2603      	movs	r6, #3
 8008da6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008daa:	4635      	mov	r5, r6
 8008dac:	f7fe bac8 	b.w	8007340 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008db0:	2603      	movs	r6, #3
 8008db2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008db6:	4635      	mov	r5, r6
 8008db8:	f7fe bc71 	b.w	800769e <HAL_RCCEx_PeriphCLKConfig+0x57a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008dbc:	2603      	movs	r6, #3
 8008dbe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008dc2:	4635      	mov	r5, r6
 8008dc4:	f7fe bd37 	b.w	8007836 <HAL_RCCEx_PeriphCLKConfig+0x712>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008dc8:	2603      	movs	r6, #3
 8008dca:	6862      	ldr	r2, [r4, #4]
 8008dcc:	4635      	mov	r5, r6
 8008dce:	f7ff b904 	b.w	8007fda <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8008dd2:	bf00      	nop
 8008dd4:	44020c00 	.word	0x44020c00
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8008dd8:	2603      	movs	r6, #3
 8008dda:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008dde:	4635      	mov	r5, r6
 8008de0:	f7fe bd93 	b.w	800790a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008de4:	2603      	movs	r6, #3
 8008de6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008dea:	4635      	mov	r5, r6
 8008dec:	f7fe ba11 	b.w	8007212 <HAL_RCCEx_PeriphCLKConfig+0xee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008df0:	2603      	movs	r6, #3
 8008df2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008df6:	4635      	mov	r5, r6
 8008df8:	f7fe be29 	b.w	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x92a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008dfc:	2603      	movs	r6, #3
 8008dfe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e02:	4635      	mov	r5, r6
 8008e04:	f7fe bc15 	b.w	8007632 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008e08:	2603      	movs	r6, #3
 8008e0a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e0e:	4635      	mov	r5, r6
 8008e10:	f7ff b8b0 	b.w	8007f74 <HAL_RCCEx_PeriphCLKConfig+0xe50>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008e14:	2603      	movs	r6, #3
 8008e16:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e1a:	4635      	mov	r5, r6
 8008e1c:	f7fe be89 	b.w	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8008e20:	2603      	movs	r6, #3
 8008e22:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e26:	4635      	mov	r5, r6
 8008e28:	f7ff b86f 	b.w	8007f0a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8008e2c:	2603      	movs	r6, #3
 8008e2e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e32:	4635      	mov	r5, r6
 8008e34:	f7fe be44 	b.w	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x99c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008e38:	2603      	movs	r6, #3
 8008e3a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e3e:	4635      	mov	r5, r6
 8008e40:	f7fe bfff 	b.w	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008e44:	2603      	movs	r6, #3
 8008e46:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008e4a:	4635      	mov	r5, r6
 8008e4c:	f7ff b826 	b.w	8007e9c <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8008e50:	462e      	mov	r6, r5
 8008e52:	f7fe bf06 	b.w	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 8008e56:	462e      	mov	r6, r5
 8008e58:	f7fe bed1 	b.w	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8008e5c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008e5e:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8008e62:	4635      	mov	r5, r6
 8008e64:	f7fe becb 	b.w	8007bfe <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8008e68:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e6a:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8008e6e:	4635      	mov	r5, r6
 8008e70:	f7fe bc6e 	b.w	8007750 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      return HAL_TIMEOUT;
 8008e74:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8008e76:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8008e7a:	4635      	mov	r5, r6
 8008e7c:	f7fe bef1 	b.w	8007c62 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      return HAL_TIMEOUT;
 8008e80:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e82:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8008e86:	4635      	mov	r5, r6
 8008e88:	f7fe bc74 	b.w	8007774 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8008e8c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008e8e:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8008e92:	4635      	mov	r5, r6
 8008e94:	f7fe bc8e 	b.w	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8008e98:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e9a:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8008e9e:	4635      	mov	r5, r6
 8008ea0:	f7fe bc44 	b.w	800772c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008ea4:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8008ea6:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8008eaa:	4635      	mov	r5, r6
 8008eac:	f7fe bc74 	b.w	8007798 <HAL_RCCEx_PeriphCLKConfig+0x674>
      return HAL_TIMEOUT;
 8008eb0:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8008eb2:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8008eb6:	4635      	mov	r5, r6
 8008eb8:	f7fe be54 	b.w	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008ebc:	462e      	mov	r6, r5
 8008ebe:	f7fe b9a8 	b.w	8007212 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8008ec2:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ec4:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 8008ec6:	4635      	mov	r5, r6
 8008ec8:	f7ff b8f4 	b.w	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8008ecc:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008ece:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 8008ed0:	4635      	mov	r5, r6
 8008ed2:	f7ff b8fe 	b.w	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xfae>
      return HAL_TIMEOUT;
 8008ed6:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008ed8:	6862      	ldr	r2, [r4, #4]
 8008eda:	f7ff b906 	b.w	80080ea <HAL_RCCEx_PeriphCLKConfig+0xfc6>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8008ede:	4813      	ldr	r0, [pc, #76]	; (8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
 8008ee0:	4b13      	ldr	r3, [pc, #76]	; (8008f30 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
 8008ee2:	69c1      	ldr	r1, [r0, #28]
 8008ee4:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8008ee8:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8008eec:	430b      	orrs	r3, r1
 8008eee:	61c3      	str	r3, [r0, #28]
 8008ef0:	f7ff ba02 	b.w	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008ef4:	462e      	mov	r6, r5
 8008ef6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008efa:	f7fe be40 	b.w	8007b7e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008efe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008f02:	f7fe b954 	b.w	80071ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8008f06:	460b      	mov	r3, r1
 8008f08:	f7ff b9ed 	b.w	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8008f0c:	2601      	movs	r6, #1
 8008f0e:	f7fe b94e 	b.w	80071ae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8008f12:	2601      	movs	r6, #1
 8008f14:	4635      	mov	r5, r6
 8008f16:	f7fe bf94 	b.w	8007e42 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8008f1a:	2601      	movs	r6, #1
 8008f1c:	4635      	mov	r5, r6
 8008f1e:	f7fe bb88 	b.w	8007632 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->OspiClockSelection)
 8008f22:	2601      	movs	r6, #1
 8008f24:	4635      	mov	r5, r6
 8008f26:	f7ff b8c5 	b.w	80080b4 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8008f2a:	bf00      	nop
 8008f2c:	44020c00 	.word	0x44020c00
 8008f30:	00ffffcf 	.word	0x00ffffcf

08008f34 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008f34:	4b59      	ldr	r3, [pc, #356]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
{
 8008f36:	b4f0      	push	{r4, r5, r6, r7}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008f38:	6b59      	ldr	r1, [r3, #52]	; 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008f3a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008f3c:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008f3e:	6a9f      	ldr	r7, [r3, #40]	; 0x28
  if (pll1m != 0U)
 8008f40:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008f46:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll1m != 0U)
 8008f4a:	d05a      	beq.n	8009002 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f4c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8008f50:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f54:	fb07 f202 	mul.w	r2, r7, r2
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008f58:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f5c:	ee07 2a90 	vmov	s15, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008f60:	ee07 1a10 	vmov	s14, r1
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008f64:	f005 0203 	and.w	r2, r5, #3
    switch (pll1source)
 8008f68:	2a02      	cmp	r2, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008f6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008f6e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80090a0 <HAL_RCCEx_GetPLL1ClockFreq+0x16c>
 8008f72:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll1source)
 8008f76:	f000 8087 	beq.w	8009088 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8008f7a:	2a03      	cmp	r2, #3
 8008f7c:	d05f      	beq.n	800903e <HAL_RCCEx_GetPLL1ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	4b48      	ldr	r3, [pc, #288]	; (80090a4 <HAL_RCCEx_GetPLL1ClockFreq+0x170>)
 8008f82:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8008f86:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8008f88:	ee05 4a90 	vmov	s11, r4
 8008f8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008f90:	ee06 3a10 	vmov	s12, r3
 8008f94:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8008f98:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008f9c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008fa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008fa4:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8008fa8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008fac:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fb0:	4b3a      	ldr	r3, [pc, #232]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	0197      	lsls	r7, r2, #6
 8008fb6:	d429      	bmi.n	800900c <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fbc:	4b37      	ldr	r3, [pc, #220]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8008fbe:	681a      	ldr	r2, [r3, #0]
 8008fc0:	0195      	lsls	r5, r2, #6
 8008fc2:	d502      	bpl.n	8008fca <HAL_RCCEx_GetPLL1ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8008fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fc6:	0394      	lsls	r4, r2, #14
 8008fc8:	d44c      	bmi.n	8009064 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008fce:	4b33      	ldr	r3, [pc, #204]	; (800909c <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	0191      	lsls	r1, r2, #6
 8008fd4:	d52f      	bpl.n	8009036 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008fd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fd8:	0352      	lsls	r2, r2, #13
 8008fda:	d52c      	bpl.n	8009036 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
}
 8008fdc:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008fe4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008fe8:	ee07 3a10 	vmov	s14, r3
 8008fec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8008ff0:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 8008ff4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ff8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008ffc:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8009000:	4770      	bx	lr
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009002:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009006:	6084      	str	r4, [r0, #8]
}
 8009008:	bcf0      	pop	{r4, r5, r6, r7}
 800900a:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800900c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800900e:	03d6      	lsls	r6, r2, #15
 8009010:	d5d2      	bpl.n	8008fb8 <HAL_RCCEx_GetPLL1ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8009014:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009018:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800901c:	ee07 3a10 	vmov	s14, r3
 8009020:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8009024:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 8009028:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800902c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009030:	edc0 6a00 	vstr	s13, [r0]
 8009034:	e7c2      	b.n	8008fbc <HAL_RCCEx_GetPLL1ClockFreq+0x88>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8009036:	2300      	movs	r3, #0
}
 8009038:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 800903a:	6083      	str	r3, [r0, #8]
}
 800903c:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800903e:	ee05 4a90 	vmov	s11, r4
 8009042:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009046:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800904a:	ed9f 5a17 	vldr	s10, [pc, #92]	; 80090a8 <HAL_RCCEx_GetPLL1ClockFreq+0x174>
 800904e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009056:	eec5 6a25 	vdiv.f32	s13, s10, s11
 800905a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800905e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8009062:	e7a5      	b.n	8008fb0 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8009064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800906a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800906e:	ee07 3a10 	vmov	s14, r3
 8009072:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8009076:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 800907a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800907e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009082:	edc0 6a01 	vstr	s13, [r0, #4]
 8009086:	e7a2      	b.n	8008fce <HAL_RCCEx_GetPLL1ClockFreq+0x9a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8009088:	ee05 4a90 	vmov	s11, r4
 800908c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009090:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009094:	ed9f 5a05 	vldr	s10, [pc, #20]	; 80090ac <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8009098:	e7d9      	b.n	800904e <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 800909a:	bf00      	nop
 800909c:	44020c00 	.word	0x44020c00
 80090a0:	39000000 	.word	0x39000000
 80090a4:	017d7840 	.word	0x017d7840
 80090a8:	4bbebc20 	.word	0x4bbebc20
 80090ac:	4a742400 	.word	0x4a742400

080090b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80090b0:	4b59      	ldr	r3, [pc, #356]	; (8009218 <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
{
 80090b2:	b4f0      	push	{r4, r5, r6, r7}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80090b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80090b6:	6add      	ldr	r5, [r3, #44]	; 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80090b8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80090ba:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 80090bc:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80090c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80090c2:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll2m != 0U)
 80090c6:	d05a      	beq.n	800917e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80090c8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80090cc:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80090d0:	fb07 f202 	mul.w	r2, r7, r2
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80090d4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80090d8:	ee07 2a90 	vmov	s15, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80090dc:	ee07 1a10 	vmov	s14, r1
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80090e0:	f005 0203 	and.w	r2, r5, #3
    switch (pll2source)
 80090e4:	2a02      	cmp	r2, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80090e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80090ea:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800921c <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 80090ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll2source)
 80090f2:	f000 8087 	beq.w	8009204 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 80090f6:	2a03      	cmp	r2, #3
 80090f8:	d05f      	beq.n	80091ba <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	4b48      	ldr	r3, [pc, #288]	; (8009220 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
 80090fe:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8009102:	40d3      	lsrs	r3, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009104:	ee05 4a90 	vmov	s11, r4
 8009108:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800910c:	ee06 3a10 	vmov	s12, r3
 8009110:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8009114:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009118:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800911c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009120:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8009124:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8009128:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800912c:	4b3a      	ldr	r3, [pc, #232]	; (8009218 <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	0117      	lsls	r7, r2, #4
 8009132:	d429      	bmi.n	8009188 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8009134:	2300      	movs	r3, #0
 8009136:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009138:	4b37      	ldr	r3, [pc, #220]	; (8009218 <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	0115      	lsls	r5, r2, #4
 800913e:	d502      	bpl.n	8009146 <HAL_RCCEx_GetPLL2ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	0394      	lsls	r4, r2, #14
 8009144:	d44c      	bmi.n	80091e0 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009146:	2300      	movs	r3, #0
 8009148:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800914a:	4b33      	ldr	r3, [pc, #204]	; (8009218 <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	0111      	lsls	r1, r2, #4
 8009150:	d52f      	bpl.n	80091b2 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8009152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009154:	0352      	lsls	r2, r2, #13
 8009156:	d52c      	bpl.n	80091b2 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
}
 8009158:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800915a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800915c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009160:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009164:	ee07 3a10 	vmov	s14, r3
 8009168:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 800916c:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 8009170:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009174:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009178:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800917c:	4770      	bx	lr
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 800917e:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8009182:	6084      	str	r4, [r0, #8]
}
 8009184:	bcf0      	pop	{r4, r5, r6, r7}
 8009186:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8009188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918a:	03d6      	lsls	r6, r2, #15
 800918c:	d5d2      	bpl.n	8009134 <HAL_RCCEx_GetPLL2ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800918e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8009190:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8009194:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009198:	ee07 3a10 	vmov	s14, r3
 800919c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80091a0:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 80091a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091a8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80091ac:	edc0 6a00 	vstr	s13, [r0]
 80091b0:	e7c2      	b.n	8009138 <HAL_RCCEx_GetPLL2ClockFreq+0x88>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80091b2:	2300      	movs	r3, #0
}
 80091b4:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80091b6:	6083      	str	r3, [r0, #8]
}
 80091b8:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80091ba:	ee05 4a90 	vmov	s11, r4
 80091be:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80091c2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80091c6:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8009224 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 80091ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80091ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80091d2:	eec5 6a25 	vdiv.f32	s13, s10, s11
 80091d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 80091da:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 80091de:	e7a5      	b.n	800912c <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80091e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80091e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80091e6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 80091ea:	ee07 3a10 	vmov	s14, r3
 80091ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 80091f2:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 80091f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091fa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80091fe:	edc0 6a01 	vstr	s13, [r0, #4]
 8009202:	e7a2      	b.n	800914a <HAL_RCCEx_GetPLL2ClockFreq+0x9a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8009204:	ee05 4a90 	vmov	s11, r4
 8009208:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800920c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009210:	ed9f 5a05 	vldr	s10, [pc, #20]	; 8009228 <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 8009214:	e7d9      	b.n	80091ca <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
 8009216:	bf00      	nop
 8009218:	44020c00 	.word	0x44020c00
 800921c:	39000000 	.word	0x39000000
 8009220:	017d7840 	.word	0x017d7840
 8009224:	4bbebc20 	.word	0x4bbebc20
 8009228:	4a742400 	.word	0x4a742400

0800922c <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800922c:	4b59      	ldr	r3, [pc, #356]	; (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
{
 800922e:	b4f0      	push	{r4, r5, r6, r7}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009230:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8009232:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8009234:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009236:	6b1f      	ldr	r7, [r3, #48]	; 0x30
  if (pll3m != 0U)
 8009238:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800923c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800923e:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll3m != 0U)
 8009242:	d05a      	beq.n	80092fa <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009244:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8009248:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800924c:	fb07 f202 	mul.w	r2, r7, r2
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8009250:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009254:	ee07 2a90 	vmov	s15, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009258:	ee07 1a10 	vmov	s14, r1
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800925c:	f005 0203 	and.w	r2, r5, #3
    switch (pll3source)
 8009260:	2a02      	cmp	r2, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8009262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009266:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8009398 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 800926a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll3source)
 800926e:	f000 8087 	beq.w	8009380 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8009272:	2a03      	cmp	r2, #3
 8009274:	d05f      	beq.n	8009336 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009276:	681a      	ldr	r2, [r3, #0]
 8009278:	4b48      	ldr	r3, [pc, #288]	; (800939c <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
 800927a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800927e:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009280:	ee05 4a90 	vmov	s11, r4
 8009284:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009288:	ee06 3a10 	vmov	s12, r3
 800928c:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8009290:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8009294:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800929c:	eec6 6a05 	vdiv.f32	s13, s12, s10
 80092a0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80092a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092a8:	4b3a      	ldr	r3, [pc, #232]	; (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	0097      	lsls	r7, r2, #2
 80092ae:	d429      	bmi.n	8009304 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80092b0:	2300      	movs	r3, #0
 80092b2:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092b4:	4b37      	ldr	r3, [pc, #220]	; (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	0095      	lsls	r5, r2, #2
 80092ba:	d502      	bpl.n	80092c2 <HAL_RCCEx_GetPLL3ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80092bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092be:	0394      	lsls	r4, r2, #14
 80092c0:	d44c      	bmi.n	800935c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80092c6:	4b33      	ldr	r3, [pc, #204]	; (8009394 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	0091      	lsls	r1, r2, #2
 80092cc:	d52f      	bpl.n	800932e <HAL_RCCEx_GetPLL3ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80092ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092d0:	0352      	lsls	r2, r2, #13
 80092d2:	d52c      	bpl.n	800932e <HAL_RCCEx_GetPLL3ClockFreq+0x102>
}
 80092d4:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80092d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80092d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80092dc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 80092e0:	ee07 3a10 	vmov	s14, r3
 80092e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 80092e8:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 80092ec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092f0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80092f4:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80092f8:	4770      	bx	lr
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80092fa:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 80092fe:	6084      	str	r4, [r0, #8]
}
 8009300:	bcf0      	pop	{r4, r5, r6, r7}
 8009302:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8009304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009306:	03d6      	lsls	r6, r2, #15
 8009308:	d5d2      	bpl.n	80092b0 <HAL_RCCEx_GetPLL3ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800930a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800930c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009310:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009314:	ee07 3a10 	vmov	s14, r3
 8009318:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 800931c:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 8009320:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009324:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8009328:	edc0 6a00 	vstr	s13, [r0]
 800932c:	e7c2      	b.n	80092b4 <HAL_RCCEx_GetPLL3ClockFreq+0x88>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800932e:	2300      	movs	r3, #0
}
 8009330:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8009332:	6083      	str	r3, [r0, #8]
}
 8009334:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009336:	ee05 4a90 	vmov	s11, r4
 800933a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800933e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8009342:	ed9f 5a17 	vldr	s10, [pc, #92]	; 80093a0 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 8009346:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800934a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800934e:	eec5 6a25 	vdiv.f32	s13, s10, s11
 8009352:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009356:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800935a:	e7a5      	b.n	80092a8 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800935c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800935e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8009362:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8009366:	ee07 3a10 	vmov	s14, r3
 800936a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800936e:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 8009372:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009376:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800937a:	edc0 6a01 	vstr	s13, [r0, #4]
 800937e:	e7a2      	b.n	80092c6 <HAL_RCCEx_GetPLL3ClockFreq+0x9a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8009380:	ee05 4a90 	vmov	s11, r4
 8009384:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009388:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800938c:	ed9f 5a05 	vldr	s10, [pc, #20]	; 80093a4 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 8009390:	e7d9      	b.n	8009346 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
 8009392:	bf00      	nop
 8009394:	44020c00 	.word	0x44020c00
 8009398:	39000000 	.word	0x39000000
 800939c:	017d7840 	.word	0x017d7840
 80093a0:	4bbebc20 	.word	0x4bbebc20
 80093a4:	4a742400 	.word	0x4a742400

080093a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80093a8:	f100 437e 	add.w	r3, r0, #4261412864	; 0xfe000000
 80093ac:	430b      	orrs	r3, r1
 80093ae:	f000 8318 	beq.w	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
{
 80093b2:	b500      	push	{lr}
    switch (PeriphClk)
 80093b4:	f5a0 1380 	sub.w	r3, r0, #1048576	; 0x100000
 80093b8:	430b      	orrs	r3, r1
{
 80093ba:	b085      	sub	sp, #20
    switch (PeriphClk)
 80093bc:	f000 872b 	beq.w	800a216 <HAL_RCCEx_GetPeriphCLKFreq+0xe6e>
 80093c0:	4bac      	ldr	r3, [pc, #688]	; (8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80093c2:	4298      	cmp	r0, r3
 80093c4:	f171 0300 	sbcs.w	r3, r1, #0
 80093c8:	d23f      	bcs.n	800944a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80093ca:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 80093ce:	430b      	orrs	r3, r1
 80093d0:	f000 8750 	beq.w	800a274 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>
 80093d4:	f240 4301 	movw	r3, #1025	; 0x401
 80093d8:	4298      	cmp	r0, r3
 80093da:	f171 0300 	sbcs.w	r3, r1, #0
 80093de:	d377      	bcc.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 80093e0:	f5a0 4300 	sub.w	r3, r0, #32768	; 0x8000
 80093e4:	430b      	orrs	r3, r1
 80093e6:	f001 8077 	beq.w	800a4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 80093ea:	f248 0301 	movw	r3, #32769	; 0x8001
 80093ee:	4298      	cmp	r0, r3
 80093f0:	f171 0300 	sbcs.w	r3, r1, #0
 80093f4:	f0c0 8207 	bcc.w	8009806 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 80093f8:	f5a0 2380 	sub.w	r3, r0, #262144	; 0x40000
 80093fc:	430b      	orrs	r3, r1
 80093fe:	f000 8720 	beq.w	800a242 <HAL_RCCEx_GetPeriphCLKFreq+0xe9a>
 8009402:	4b9d      	ldr	r3, [pc, #628]	; (8009678 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8009404:	4298      	cmp	r0, r3
 8009406:	f171 0300 	sbcs.w	r3, r1, #0
 800940a:	f0c0 81d8 	bcc.w	80097be <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800940e:	f5a0 2000 	sub.w	r0, r0, #524288	; 0x80000
 8009412:	ea50 0301 	orrs.w	r3, r0, r1
 8009416:	bf18      	it	ne
 8009418:	2000      	movne	r0, #0
 800941a:	d113      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800941c:	4a97      	ldr	r2, [pc, #604]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800941e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8009422:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
        switch (srcclk)
 8009426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800942a:	f000 85a6 	beq.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 800942e:	f200 866b 	bhi.w	800a108 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 859b 	beq.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 8009438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800943c:	bf18      	it	ne
 800943e:	2000      	movne	r0, #0
 8009440:	f000 83c6 	beq.w	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
}
 8009444:	b005      	add	sp, #20
 8009446:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 800944a:	2300      	movs	r3, #0
 800944c:	2202      	movs	r2, #2
 800944e:	4291      	cmp	r1, r2
 8009450:	bf08      	it	eq
 8009452:	4298      	cmpeq	r0, r3
 8009454:	f001 8016 	beq.w	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 8009458:	4283      	cmp	r3, r0
 800945a:	418a      	sbcs	r2, r1
 800945c:	d24c      	bcs.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800945e:	2240      	movs	r2, #64	; 0x40
 8009460:	4291      	cmp	r1, r2
 8009462:	bf08      	it	eq
 8009464:	4298      	cmpeq	r0, r3
 8009466:	f000 879d 	beq.w	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0xffc>
 800946a:	4283      	cmp	r3, r0
 800946c:	418a      	sbcs	r2, r1
 800946e:	f080 821f 	bcs.w	80098b0 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
 8009472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009476:	4291      	cmp	r1, r2
 8009478:	bf08      	it	eq
 800947a:	4298      	cmpeq	r0, r3
 800947c:	f001 8015 	beq.w	800a4aa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8009480:	4283      	cmp	r3, r0
 8009482:	418a      	sbcs	r2, r1
 8009484:	f080 81f0 	bcs.w	8009868 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8009488:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800948c:	bf08      	it	eq
 800948e:	4298      	cmpeq	r0, r3
 8009490:	bf18      	it	ne
 8009492:	2000      	movne	r0, #0
 8009494:	d1d6      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009496:	4a79      	ldr	r2, [pc, #484]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009498:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 800949c:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 80094a0:	f000 822c 	beq.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80094a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094a8:	f001 8089 	beq.w	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80094ac:	6811      	ldr	r1, [r2, #0]
 80094ae:	0788      	lsls	r0, r1, #30
 80094b0:	d503      	bpl.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80094b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094b6:	f001 8255 	beq.w	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80094ba:	4a70      	ldr	r2, [pc, #448]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80094bc:	6810      	ldr	r0, [r2, #0]
 80094be:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80094c2:	d0bf      	beq.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 80094c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80094c8:	486d      	ldr	r0, [pc, #436]	; (8009680 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80094ca:	bf18      	it	ne
 80094cc:	2000      	movne	r0, #0
 80094ce:	e7b9      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80094d0:	2821      	cmp	r0, #33	; 0x21
 80094d2:	f171 0300 	sbcs.w	r3, r1, #0
 80094d6:	d25e      	bcs.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 80094d8:	ea50 0301 	orrs.w	r3, r0, r1
 80094dc:	f000 827d 	beq.w	80099da <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 80094e0:	3801      	subs	r0, #1
 80094e2:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 80094e6:	2820      	cmp	r0, #32
 80094e8:	f171 0300 	sbcs.w	r3, r1, #0
 80094ec:	f0c0 82a0 	bcc.w	8009a30 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 80094f0:	2000      	movs	r0, #0
}
 80094f2:	b005      	add	sp, #20
 80094f4:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 80094f8:	f100 4270 	add.w	r2, r0, #4026531840	; 0xf0000000
 80094fc:	430a      	orrs	r2, r1
 80094fe:	f000 8625 	beq.w	800a14c <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 8009502:	4a60      	ldr	r2, [pc, #384]	; (8009684 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009504:	4290      	cmp	r0, r2
 8009506:	f171 0200 	sbcs.w	r2, r1, #0
 800950a:	f0c0 808d 	bcc.w	8009628 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800950e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009512:	4299      	cmp	r1, r3
 8009514:	bf08      	it	eq
 8009516:	4290      	cmpeq	r0, r2
 8009518:	f000 8764 	beq.w	800a3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 800951c:	4282      	cmp	r2, r0
 800951e:	eb73 0201 	sbcs.w	r2, r3, r1
 8009522:	f080 80cd 	bcs.w	80096c0 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8009526:	2901      	cmp	r1, #1
 8009528:	bf08      	it	eq
 800952a:	4298      	cmpeq	r0, r3
 800952c:	bf18      	it	ne
 800952e:	2000      	movne	r0, #0
 8009530:	d188      	bne.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009532:	4a52      	ldr	r2, [pc, #328]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009534:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8009538:	f413 3360 	ands.w	r3, r3, #229376	; 0x38000
 800953c:	f000 8512 	beq.w	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8009540:	6812      	ldr	r2, [r2, #0]
 8009542:	0112      	lsls	r2, r2, #4
 8009544:	d503      	bpl.n	800954e <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8009546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800954a:	f000 855b 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800954e:	4a4b      	ldr	r2, [pc, #300]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009550:	6812      	ldr	r2, [r2, #0]
 8009552:	0090      	lsls	r0, r2, #2
 8009554:	d503      	bpl.n	800955e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8009556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800955a:	f000 8559 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800955e:	4a47      	ldr	r2, [pc, #284]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009560:	6811      	ldr	r1, [r2, #0]
 8009562:	0789      	lsls	r1, r1, #30
 8009564:	d503      	bpl.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8009566:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 800956a:	f001 8209 	beq.w	800a980 <HAL_RCCEx_GetPeriphCLKFreq+0x15d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800956e:	4a43      	ldr	r2, [pc, #268]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009570:	6812      	ldr	r2, [r2, #0]
 8009572:	0590      	lsls	r0, r2, #22
 8009574:	d503      	bpl.n	800957e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8009576:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800957a:	f001 8291 	beq.w	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x16f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 800957e:	4a3f      	ldr	r2, [pc, #252]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009580:	6810      	ldr	r0, [r2, #0]
 8009582:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009586:	f43f af5d 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800958a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800958e:	483e      	ldr	r0, [pc, #248]	; (8009688 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8009590:	bf18      	it	ne
 8009592:	2000      	movne	r0, #0
 8009594:	e756      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8009596:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800959a:	430b      	orrs	r3, r1
 800959c:	f000 86cd 	beq.w	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0xf92>
 80095a0:	f240 1301 	movw	r3, #257	; 0x101
 80095a4:	4298      	cmp	r0, r3
 80095a6:	f171 0300 	sbcs.w	r3, r1, #0
 80095aa:	f0c0 80c8 	bcc.w	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80095ae:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 80095b2:	ea50 0301 	orrs.w	r3, r0, r1
 80095b6:	bf18      	it	ne
 80095b8:	2000      	movne	r0, #0
 80095ba:	f47f af43 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80095be:	4b2f      	ldr	r3, [pc, #188]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80095c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80095c4:	f013 5360 	ands.w	r3, r3, #939524096	; 0x38000000
 80095c8:	f000 822d 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80095cc:	4a2b      	ldr	r2, [pc, #172]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80095ce:	6812      	ldr	r2, [r2, #0]
 80095d0:	0112      	lsls	r2, r2, #4
 80095d2:	d503      	bpl.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 80095d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095d8:	f000 8514 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 80095dc:	4a27      	ldr	r2, [pc, #156]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80095de:	6812      	ldr	r2, [r2, #0]
 80095e0:	0090      	lsls	r0, r2, #2
 80095e2:	d503      	bpl.n	80095ec <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80095e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095e8:	f000 8512 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 80095ec:	4a23      	ldr	r2, [pc, #140]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80095ee:	6811      	ldr	r1, [r2, #0]
 80095f0:	0789      	lsls	r1, r1, #30
 80095f2:	d503      	bpl.n	80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80095f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80095f8:	f001 81d7 	beq.w	800a9aa <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 80095fc:	4a1f      	ldr	r2, [pc, #124]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80095fe:	6812      	ldr	r2, [r2, #0]
 8009600:	0590      	lsls	r0, r2, #22
 8009602:	d503      	bpl.n	800960c <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8009604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009608:	f001 8238 	beq.w	800aa7c <HAL_RCCEx_GetPeriphCLKFreq+0x16d4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 800960c:	4a1b      	ldr	r2, [pc, #108]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800960e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009612:	f010 0002 	ands.w	r0, r0, #2
 8009616:	f43f af15 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800961a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800961e:	bf14      	ite	ne
 8009620:	2000      	movne	r0, #0
 8009622:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009626:	e70d      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8009628:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800962c:	430b      	orrs	r3, r1
 800962e:	f000 835a 	beq.w	8009ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 8009632:	4b16      	ldr	r3, [pc, #88]	; (800968c <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8009634:	4298      	cmp	r0, r3
 8009636:	f171 0300 	sbcs.w	r3, r1, #0
 800963a:	d329      	bcc.n	8009690 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 800963c:	f100 437c 	add.w	r3, r0, #4227858432	; 0xfc000000
 8009640:	430b      	orrs	r3, r1
 8009642:	f000 8322 	beq.w	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8009646:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 800964a:	ea50 0301 	orrs.w	r3, r0, r1
 800964e:	bf18      	it	ne
 8009650:	2000      	movne	r0, #0
 8009652:	f47f aef7 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009656:	4b09      	ldr	r3, [pc, #36]	; (800967c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8009658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800965c:	f003 0307 	and.w	r3, r3, #7
 8009660:	2b04      	cmp	r3, #4
 8009662:	f201 8253 	bhi.w	800ab0c <HAL_RCCEx_GetPeriphCLKFreq+0x1764>
 8009666:	e8df f013 	tbh	[pc, r3, lsl #1]
 800966a:	0482      	.short	0x0482
 800966c:	048802b3 	.word	0x048802b3
 8009670:	0491048e 	.word	0x0491048e
 8009674:	00100001 	.word	0x00100001
 8009678:	00040001 	.word	0x00040001
 800967c:	44020c00 	.word	0x44020c00
 8009680:	003d0900 	.word	0x003d0900
 8009684:	10000001 	.word	0x10000001
 8009688:	017d7840 	.word	0x017d7840
 800968c:	00800001 	.word	0x00800001
    switch (PeriphClk)
 8009690:	f5a0 1300 	sub.w	r3, r0, #2097152	; 0x200000
 8009694:	430b      	orrs	r3, r1
 8009696:	f000 82a0 	beq.w	8009bda <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800969a:	f5a0 0080 	sub.w	r0, r0, #4194304	; 0x400000
 800969e:	ea50 0301 	orrs.w	r3, r0, r1
 80096a2:	bf18      	it	ne
 80096a4:	2000      	movne	r0, #0
 80096a6:	f47f aecd 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80096aa:	4bb3      	ldr	r3, [pc, #716]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80096ac:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80096b0:	0658      	lsls	r0, r3, #25
 80096b2:	f100 831e 	bmi.w	8009cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80096b6:	a801      	add	r0, sp, #4
 80096b8:	f7ff fc3c 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80096bc:	9802      	ldr	r0, [sp, #8]
 80096be:	e6c1      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80096c0:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 80096c4:	430b      	orrs	r3, r1
 80096c6:	f000 8271 	beq.w	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80096ca:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 80096ce:	ea50 0301 	orrs.w	r3, r0, r1
 80096d2:	bf18      	it	ne
 80096d4:	2000      	movne	r0, #0
 80096d6:	f47f aeb5 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 80096da:	4aa7      	ldr	r2, [pc, #668]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80096dc:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 80096e0:	f413 6360 	ands.w	r3, r3, #3584	; 0xe00
 80096e4:	f000 843e 	beq.w	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	0112      	lsls	r2, r2, #4
 80096ec:	d503      	bpl.n	80096f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80096ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096f2:	f000 8487 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 80096f6:	4aa0      	ldr	r2, [pc, #640]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80096f8:	6812      	ldr	r2, [r2, #0]
 80096fa:	0090      	lsls	r0, r2, #2
 80096fc:	d503      	bpl.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 80096fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009702:	f000 8485 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8009706:	4a9c      	ldr	r2, [pc, #624]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009708:	6811      	ldr	r1, [r2, #0]
 800970a:	0789      	lsls	r1, r1, #30
 800970c:	d503      	bpl.n	8009716 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800970e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009712:	f001 812e 	beq.w	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8009716:	4a98      	ldr	r2, [pc, #608]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009718:	6812      	ldr	r2, [r2, #0]
 800971a:	0590      	lsls	r0, r2, #22
 800971c:	d503      	bpl.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800971e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009722:	f001 81a5 	beq.w	800aa70 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8009726:	4a94      	ldr	r2, [pc, #592]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009728:	6810      	ldr	r0, [r2, #0]
 800972a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800972e:	f43f ae89 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009732:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009736:	4891      	ldr	r0, [pc, #580]	; (800997c <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8009738:	bf18      	it	ne
 800973a:	2000      	movne	r0, #0
 800973c:	e682      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 800973e:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
 8009742:	430b      	orrs	r3, r1
 8009744:	f000 81fd 	beq.w	8009b42 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8009748:	3880      	subs	r0, #128	; 0x80
 800974a:	ea50 0301 	orrs.w	r3, r0, r1
 800974e:	bf18      	it	ne
 8009750:	2000      	movne	r0, #0
 8009752:	f47f ae77 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8009756:	4a88      	ldr	r2, [pc, #544]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009758:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 800975c:	f413 0360 	ands.w	r3, r3, #14680064	; 0xe00000
 8009760:	f000 8161 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8009764:	6812      	ldr	r2, [r2, #0]
 8009766:	0112      	lsls	r2, r2, #4
 8009768:	d503      	bpl.n	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
 800976a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800976e:	f000 8449 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8009772:	4a81      	ldr	r2, [pc, #516]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009774:	6812      	ldr	r2, [r2, #0]
 8009776:	0090      	lsls	r0, r2, #2
 8009778:	d503      	bpl.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800977a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800977e:	f000 8447 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8009782:	4a7d      	ldr	r2, [pc, #500]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009784:	6811      	ldr	r1, [r2, #0]
 8009786:	0789      	lsls	r1, r1, #30
 8009788:	d503      	bpl.n	8009792 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800978a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800978e:	f001 80fe 	beq.w	800a98e <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8009792:	4a79      	ldr	r2, [pc, #484]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009794:	6812      	ldr	r2, [r2, #0]
 8009796:	0590      	lsls	r0, r2, #22
 8009798:	d503      	bpl.n	80097a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800979a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800979e:	f001 815b 	beq.w	800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80097a2:	4a75      	ldr	r2, [pc, #468]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80097a4:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80097a8:	f010 0002 	ands.w	r0, r0, #2
 80097ac:	f43f ae4a 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80097b0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80097b4:	bf14      	ite	ne
 80097b6:	2000      	movne	r0, #0
 80097b8:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80097bc:	e642      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80097be:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 80097c2:	430b      	orrs	r3, r1
 80097c4:	f000 824a 	beq.w	8009c5c <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 80097c8:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
 80097cc:	ea50 0301 	orrs.w	r3, r0, r1
 80097d0:	bf18      	it	ne
 80097d2:	2000      	movne	r0, #0
 80097d4:	f47f ae36 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80097d8:	4a67      	ldr	r2, [pc, #412]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80097da:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 80097de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
        switch (srcclk)
 80097e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097e6:	f000 83e4 	beq.w	8009fb2 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 80097ea:	f200 8439 	bhi.w	800a060 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 80097ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80097f2:	f000 81ed 	beq.w	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80097f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80097fa:	f000 8225 	beq.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d07c      	beq.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8009802:	2000      	movs	r0, #0
 8009804:	e61e      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8009806:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800980a:	430b      	orrs	r3, r1
 800980c:	f000 869b 	beq.w	800a546 <HAL_RCCEx_GetPeriphCLKFreq+0x119e>
 8009810:	f242 0301 	movw	r3, #8193	; 0x2001
 8009814:	4298      	cmp	r0, r3
 8009816:	f171 0300 	sbcs.w	r3, r1, #0
 800981a:	d374      	bcc.n	8009906 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 800981c:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8009820:	ea50 0301 	orrs.w	r3, r0, r1
 8009824:	bf18      	it	ne
 8009826:	2000      	movne	r0, #0
 8009828:	f47f ae0c 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800982c:	4a52      	ldr	r2, [pc, #328]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800982e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009832:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 8009836:	f000 80f6 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 800983a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800983e:	f000 86be 	beq.w	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009842:	6811      	ldr	r1, [r2, #0]
 8009844:	0789      	lsls	r1, r1, #30
 8009846:	d503      	bpl.n	8009850 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8009848:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800984c:	f001 8075 	beq.w	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8009850:	4a49      	ldr	r2, [pc, #292]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009852:	6810      	ldr	r0, [r2, #0]
 8009854:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8009858:	f43f adf4 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 800985c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009860:	4847      	ldr	r0, [pc, #284]	; (8009980 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8009862:	bf18      	it	ne
 8009864:	2000      	movne	r0, #0
 8009866:	e5ed      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8009868:	2980      	cmp	r1, #128	; 0x80
 800986a:	bf08      	it	eq
 800986c:	4298      	cmpeq	r0, r3
 800986e:	f000 81d9 	beq.w	8009c24 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8009872:	2300      	movs	r3, #0
 8009874:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8009878:	bf08      	it	eq
 800987a:	4298      	cmpeq	r0, r3
 800987c:	bf18      	it	ne
 800987e:	4618      	movne	r0, r3
 8009880:	f47f ade0 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8009884:	493c      	ldr	r1, [pc, #240]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009886:	f8d1 20dc 	ldr.w	r2, [r1, #220]	; 0xdc
 800988a:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
        switch (srcclk)
 800988e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8009892:	f000 8397 	beq.w	8009fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
 8009896:	f200 83ff 	bhi.w	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 800989a:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800989e:	f000 8197 	beq.w	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80098a2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80098a6:	f000 81cf 	beq.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 80098aa:	b33a      	cbz	r2, 80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80098ac:	4618      	mov	r0, r3
 80098ae:	e5c9      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80098b0:	2210      	movs	r2, #16
 80098b2:	4291      	cmp	r1, r2
 80098b4:	bf08      	it	eq
 80098b6:	4298      	cmpeq	r0, r3
 80098b8:	f000 850c 	beq.w	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
 80098bc:	4283      	cmp	r3, r0
 80098be:	418a      	sbcs	r2, r1
 80098c0:	d260      	bcs.n	8009984 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 80098c2:	2920      	cmp	r1, #32
 80098c4:	bf08      	it	eq
 80098c6:	4298      	cmpeq	r0, r3
 80098c8:	bf18      	it	ne
 80098ca:	2000      	movne	r0, #0
 80098cc:	f47f adba 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80098d0:	4a29      	ldr	r2, [pc, #164]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80098d2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 80098d6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
        switch (srcclk)
 80098da:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80098de:	f000 837a 	beq.w	8009fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80098e2:	f200 83f5 	bhi.w	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
 80098e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098ea:	f000 8171 	beq.w	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80098ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80098f2:	f000 81a9 	beq.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f040 867a 	bne.w	800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
}
 80098fc:	b005      	add	sp, #20
 80098fe:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK3Freq();
 8009902:	f7fd bb17 	b.w	8006f34 <HAL_RCC_GetPCLK3Freq>
    switch (PeriphClk)
 8009906:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800990a:	430b      	orrs	r3, r1
 800990c:	f000 80eb 	beq.w	8009ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8009910:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 8009914:	ea50 0301 	orrs.w	r3, r0, r1
 8009918:	bf18      	it	ne
 800991a:	2000      	movne	r0, #0
 800991c:	f47f ad92 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8009920:	4a15      	ldr	r2, [pc, #84]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8009922:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8009926:	f013 63e0 	ands.w	r3, r3, #117440512	; 0x7000000
 800992a:	d0e7      	beq.n	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 800992c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009930:	f000 8368 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8009934:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009938:	f000 836a 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800993c:	6811      	ldr	r1, [r2, #0]
 800993e:	0789      	lsls	r1, r1, #30
 8009940:	d503      	bpl.n	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
 8009942:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009946:	f001 8076 	beq.w	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x168e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 800994a:	4a0b      	ldr	r2, [pc, #44]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800994c:	6812      	ldr	r2, [r2, #0]
 800994e:	0592      	lsls	r2, r2, #22
 8009950:	d503      	bpl.n	800995a <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8009952:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009956:	f001 80ac 	beq.w	800aab2 <HAL_RCCEx_GetPeriphCLKFreq+0x170a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800995a:	4a07      	ldr	r2, [pc, #28]	; (8009978 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800995c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009960:	f010 0002 	ands.w	r0, r0, #2
 8009964:	f43f ad6e 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009968:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800996c:	bf14      	ite	ne
 800996e:	2000      	movne	r0, #0
 8009970:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009974:	e566      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009976:	bf00      	nop
 8009978:	44020c00 	.word	0x44020c00
 800997c:	017d7840 	.word	0x017d7840
 8009980:	003d0900 	.word	0x003d0900
    switch (PeriphClk)
 8009984:	2904      	cmp	r1, #4
 8009986:	bf08      	it	eq
 8009988:	4298      	cmpeq	r0, r3
 800998a:	f000 8097 	beq.w	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 800998e:	2300      	movs	r3, #0
 8009990:	2908      	cmp	r1, #8
 8009992:	bf08      	it	eq
 8009994:	4298      	cmpeq	r0, r3
 8009996:	bf18      	it	ne
 8009998:	4618      	movne	r0, r3
 800999a:	f47f ad53 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800999e:	4aad      	ldr	r2, [pc, #692]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80099a0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80099a4:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 80099a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80099ac:	0790      	lsls	r0, r2, #30
 80099ae:	f100 81a6 	bmi.w	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 80099b2:	4aa8      	ldr	r2, [pc, #672]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80099b4:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 80099b8:	0111      	lsls	r1, r2, #4
 80099ba:	d502      	bpl.n	80099c2 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 80099bc:	2b40      	cmp	r3, #64	; 0x40
 80099be:	f001 800a 	beq.w	800a9d6 <HAL_RCCEx_GetPeriphCLKFreq+0x162e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 80099c2:	4aa4      	ldr	r2, [pc, #656]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80099c4:	6810      	ldr	r0, [r2, #0]
 80099c6:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80099ca:	f43f ad3b 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = CSI_VALUE / 122U;
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	f248 0012 	movw	r0, #32786	; 0x8012
 80099d4:	bf18      	it	ne
 80099d6:	2000      	movne	r0, #0
 80099d8:	e534      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80099da:	2000      	movs	r0, #0
}
 80099dc:	b005      	add	sp, #20
 80099de:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80099e2:	4a9c      	ldr	r2, [pc, #624]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80099e4:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80099e8:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80099ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80099f0:	0792      	lsls	r2, r2, #30
 80099f2:	d503      	bpl.n	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 80099f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f8:	f000 816f 	beq.w	8009cda <HAL_RCCEx_GetPeriphCLKFreq+0x932>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80099fc:	4a95      	ldr	r2, [pc, #596]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80099fe:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8009a02:	0110      	lsls	r0, r2, #4
 8009a04:	d503      	bpl.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8009a06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a0a:	f000 8169 	beq.w	8009ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8009a0e:	4a91      	ldr	r2, [pc, #580]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009a10:	6810      	ldr	r0, [r2, #0]
 8009a12:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009a16:	d005      	beq.n	8009a24 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8009a18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a1c:	f000 82e4 	beq.w	8009fe8 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 8009a20:	2000      	movs	r0, #0
 8009a22:	4770      	bx	lr
}
 8009a24:	4770      	bx	lr
 8009a26:	b005      	add	sp, #20
 8009a28:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK1Freq();
 8009a2c:	f7fd ba42 	b.w	8006eb4 <HAL_RCC_GetPCLK1Freq>
    switch (PeriphClk)
 8009a30:	281f      	cmp	r0, #31
 8009a32:	f63f ad5d 	bhi.w	80094f0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8009a36:	a301      	add	r3, pc, #4	; (adr r3, 8009a3c <HAL_RCCEx_GetPeriphCLKFreq+0x694>)
 8009a38:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8009a3c:	08009f0b 	.word	0x08009f0b
 8009a40:	08009e45 	.word	0x08009e45
 8009a44:	080094f1 	.word	0x080094f1
 8009a48:	08009de1 	.word	0x08009de1
 8009a4c:	080094f1 	.word	0x080094f1
 8009a50:	080094f1 	.word	0x080094f1
 8009a54:	080094f1 	.word	0x080094f1
 8009a58:	08009ea1 	.word	0x08009ea1
 8009a5c:	080094f1 	.word	0x080094f1
 8009a60:	080094f1 	.word	0x080094f1
 8009a64:	080094f1 	.word	0x080094f1
 8009a68:	080094f1 	.word	0x080094f1
 8009a6c:	080094f1 	.word	0x080094f1
 8009a70:	080094f1 	.word	0x080094f1
 8009a74:	080094f1 	.word	0x080094f1
 8009a78:	08009d77 	.word	0x08009d77
 8009a7c:	080094f1 	.word	0x080094f1
 8009a80:	080094f1 	.word	0x080094f1
 8009a84:	080094f1 	.word	0x080094f1
 8009a88:	080094f1 	.word	0x080094f1
 8009a8c:	080094f1 	.word	0x080094f1
 8009a90:	080094f1 	.word	0x080094f1
 8009a94:	080094f1 	.word	0x080094f1
 8009a98:	080094f1 	.word	0x080094f1
 8009a9c:	080094f1 	.word	0x080094f1
 8009aa0:	080094f1 	.word	0x080094f1
 8009aa4:	080094f1 	.word	0x080094f1
 8009aa8:	080094f1 	.word	0x080094f1
 8009aac:	080094f1 	.word	0x080094f1
 8009ab0:	080094f1 	.word	0x080094f1
 8009ab4:	080094f1 	.word	0x080094f1
 8009ab8:	08009d0d 	.word	0x08009d0d
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009abc:	4a65      	ldr	r2, [pc, #404]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009abe:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009ac2:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009ac4:	f403 7340 	and.w	r3, r3, #768	; 0x300
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8009ac8:	0390      	lsls	r0, r2, #14
 8009aca:	d502      	bpl.n	8009ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 85bf 	beq.w	800a650 <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8009ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ad6:	f43f adee 	beq.w	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8009ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ade:	f000 8291 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = 0U;
 8009ae2:	2000      	movs	r0, #0
 8009ae4:	e4ae      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8009ae6:	4a5b      	ldr	r2, [pc, #364]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009ae8:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8009aec:	f013 0370 	ands.w	r3, r3, #112	; 0x70
 8009af0:	d099      	beq.n	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8009af2:	6812      	ldr	r2, [r2, #0]
 8009af4:	0112      	lsls	r2, r2, #4
 8009af6:	d502      	bpl.n	8009afe <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8009af8:	2b10      	cmp	r3, #16
 8009afa:	f000 8283 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8009afe:	4a55      	ldr	r2, [pc, #340]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b00:	6812      	ldr	r2, [r2, #0]
 8009b02:	0090      	lsls	r0, r2, #2
 8009b04:	d502      	bpl.n	8009b0c <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8009b06:	2b20      	cmp	r3, #32
 8009b08:	f000 8282 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8009b0c:	4a51      	ldr	r2, [pc, #324]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b0e:	6811      	ldr	r1, [r2, #0]
 8009b10:	0789      	lsls	r1, r1, #30
 8009b12:	d502      	bpl.n	8009b1a <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8009b14:	2b30      	cmp	r3, #48	; 0x30
 8009b16:	f000 8709 	beq.w	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8009b1a:	4a4e      	ldr	r2, [pc, #312]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b1c:	6812      	ldr	r2, [r2, #0]
 8009b1e:	0590      	lsls	r0, r2, #22
 8009b20:	d502      	bpl.n	8009b28 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 8009b22:	2b40      	cmp	r3, #64	; 0x40
 8009b24:	f000 87a7 	beq.w	800aa76 <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8009b28:	4a4a      	ldr	r2, [pc, #296]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b2a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009b2e:	f010 0002 	ands.w	r0, r0, #2
 8009b32:	f43f ac87 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009b36:	2b50      	cmp	r3, #80	; 0x50
 8009b38:	bf14      	ite	ne
 8009b3a:	2000      	movne	r0, #0
 8009b3c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009b40:	e480      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8009b42:	4b44      	ldr	r3, [pc, #272]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8009b48:	f413 13e0 	ands.w	r3, r3, #1835008	; 0x1c0000
 8009b4c:	f43f af6b 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8009b50:	4a40      	ldr	r2, [pc, #256]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b52:	6812      	ldr	r2, [r2, #0]
 8009b54:	0111      	lsls	r1, r2, #4
 8009b56:	d503      	bpl.n	8009b60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8009b58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009b5c:	f000 8252 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8009b60:	4a3c      	ldr	r2, [pc, #240]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	0092      	lsls	r2, r2, #2
 8009b66:	d503      	bpl.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8009b68:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009b6c:	f000 8250 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8009b70:	4a38      	ldr	r2, [pc, #224]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b72:	6811      	ldr	r1, [r2, #0]
 8009b74:	0788      	lsls	r0, r1, #30
 8009b76:	d503      	bpl.n	8009b80 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8009b78:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009b7c:	f000 86eb 	beq.w	800a956 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8009b80:	4a34      	ldr	r2, [pc, #208]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b82:	6812      	ldr	r2, [r2, #0]
 8009b84:	0591      	lsls	r1, r2, #22
 8009b86:	d503      	bpl.n	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8009b88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b8c:	f000 8761 	beq.w	800aa52 <HAL_RCCEx_GetPeriphCLKFreq+0x16aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8009b90:	4a30      	ldr	r2, [pc, #192]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009b92:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009b96:	f010 0002 	ands.w	r0, r0, #2
 8009b9a:	f43f ac53 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009b9e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8009ba2:	bf14      	ite	ne
 8009ba4:	2000      	movne	r0, #0
 8009ba6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009baa:	e44b      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8009bac:	4a29      	ldr	r2, [pc, #164]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009bae:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8009bb2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        switch (srcclk)
 8009bb6:	2b80      	cmp	r3, #128	; 0x80
 8009bb8:	f000 81df 	beq.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 8009bbc:	f200 83a4 	bhi.w	800a308 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	f000 81d4 	beq.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 8009bc6:	2b40      	cmp	r3, #64	; 0x40
 8009bc8:	bf18      	it	ne
 8009bca:	2000      	movne	r0, #0
 8009bcc:	f47f ac3a 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bd0:	a801      	add	r0, sp, #4
 8009bd2:	f7ff fa6d 	bl	80090b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8009bd6:	9801      	ldr	r0, [sp, #4]
            break;
 8009bd8:	e434      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009bda:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009bdc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8009be0:	f013 0307 	ands.w	r3, r3, #7
 8009be4:	f000 845c 	beq.w	800a4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x10f8>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	f000 8598 	beq.w	800a71e <HAL_RCCEx_GetPeriphCLKFreq+0x1376>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8009bee:	2b02      	cmp	r3, #2
 8009bf0:	f000 8642 	beq.w	800a878 <HAL_RCCEx_GetPeriphCLKFreq+0x14d0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009bf4:	6812      	ldr	r2, [r2, #0]
 8009bf6:	0390      	lsls	r0, r2, #14
 8009bf8:	d502      	bpl.n	8009c00 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8009bfa:	2b03      	cmp	r3, #3
 8009bfc:	f000 8753 	beq.w	800aaa6 <HAL_RCCEx_GetPeriphCLKFreq+0x16fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009c00:	4a14      	ldr	r2, [pc, #80]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009c02:	6811      	ldr	r1, [r2, #0]
 8009c04:	0789      	lsls	r1, r1, #30
 8009c06:	d502      	bpl.n	8009c0e <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8009c08:	2b04      	cmp	r3, #4
 8009c0a:	f000 871b 	beq.w	800aa44 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8009c0e:	4a11      	ldr	r2, [pc, #68]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009c10:	6810      	ldr	r0, [r2, #0]
 8009c12:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8009c16:	f43f ac15 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8009c1a:	2b05      	cmp	r3, #5
 8009c1c:	480e      	ldr	r0, [pc, #56]	; (8009c58 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8009c1e:	bf18      	it	ne
 8009c20:	2000      	movne	r0, #0
 8009c22:	e40f      	b.n	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009c24:	4a0b      	ldr	r2, [pc, #44]	; (8009c54 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8009c26:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8009c2a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
        switch (srcclk)
 8009c2e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009c32:	f000 8517 	beq.w	800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8009c36:	f200 81f7 	bhi.w	800a028 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8009c3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c3e:	d0c7      	beq.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8009c40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c44:	f040 81ea 	bne.w	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009c48:	a801      	add	r0, sp, #4
 8009c4a:	f7ff faef 	bl	800922c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8009c4e:	9803      	ldr	r0, [sp, #12]
            break;
 8009c50:	f7ff bbf8 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009c54:	44020c00 	.word	0x44020c00
 8009c58:	003d0900 	.word	0x003d0900
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8009c5c:	4a8f      	ldr	r2, [pc, #572]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009c5e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8009c62:	f013 7340 	ands.w	r3, r3, #50331648	; 0x3000000
 8009c66:	f43f aede 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8009c6a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c6e:	f000 84a6 	beq.w	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8009c72:	6810      	ldr	r0, [r2, #0]
 8009c74:	f010 0002 	ands.w	r0, r0, #2
 8009c78:	f43f abe4 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009c7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c80:	f000 8646 	beq.w	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
          frequency = 0U;
 8009c84:	2000      	movs	r0, #0
 8009c86:	f7ff bbdd 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009c8a:	4a84      	ldr	r2, [pc, #528]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009c8c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009c90:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009c92:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8009c96:	0492      	lsls	r2, r2, #18
 8009c98:	d502      	bpl.n	8009ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	f000 84df 	beq.w	800a65e <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8009ca0:	4a7e      	ldr	r2, [pc, #504]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009ca2:	6812      	ldr	r2, [r2, #0]
 8009ca4:	0190      	lsls	r0, r2, #6
 8009ca6:	d502      	bpl.n	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8009ca8:	2b10      	cmp	r3, #16
 8009caa:	f43f ad04 	beq.w	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8009cae:	4a7b      	ldr	r2, [pc, #492]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009cb0:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8009cb4:	0791      	lsls	r1, r2, #30
 8009cb6:	d502      	bpl.n	8009cbe <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8009cb8:	2b20      	cmp	r3, #32
 8009cba:	f000 86b8 	beq.w	800aa2e <HAL_RCCEx_GetPeriphCLKFreq+0x1686>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8009cbe:	4a77      	ldr	r2, [pc, #476]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009cc0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009cc4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009cc8:	f43f abbc 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSI_VALUE;
 8009ccc:	2b30      	cmp	r3, #48	; 0x30
 8009cce:	bf14      	ite	ne
 8009cd0:	2000      	movne	r0, #0
 8009cd2:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8009cd6:	f7ff bbb5 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009cda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009cde:	4770      	bx	lr
      frequency = LSI_VALUE;
 8009ce0:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8009ce4:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8009ce6:	4b6d      	ldr	r3, [pc, #436]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009ce8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8009cec:	0619      	lsls	r1, r3, #24
 8009cee:	f57f ace2 	bpl.w	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf2:	a801      	add	r0, sp, #4
 8009cf4:	f7ff f9dc 	bl	80090b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009cf8:	9803      	ldr	r0, [sp, #12]
 8009cfa:	f7ff bba3 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f47f ae57 	bne.w	80099b2 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = LSE_VALUE;
 8009d04:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009d08:	f7ff bb9c 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8009d0c:	4a63      	ldr	r2, [pc, #396]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009d0e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8009d12:	f413 3360 	ands.w	r3, r3, #229376	; 0x38000
 8009d16:	f43f ae86 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8009d1a:	6812      	ldr	r2, [r2, #0]
 8009d1c:	0112      	lsls	r2, r2, #4
 8009d1e:	d503      	bpl.n	8009d28 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8009d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d24:	f000 816e 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8009d28:	4a5c      	ldr	r2, [pc, #368]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009d2a:	6812      	ldr	r2, [r2, #0]
 8009d2c:	0090      	lsls	r0, r2, #2
 8009d2e:	d503      	bpl.n	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8009d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d34:	f000 816c 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8009d38:	4a58      	ldr	r2, [pc, #352]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009d3a:	6811      	ldr	r1, [r2, #0]
 8009d3c:	0789      	lsls	r1, r1, #30
 8009d3e:	d503      	bpl.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 8009d40:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8009d44:	f000 85dd 	beq.w	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8009d48:	4a54      	ldr	r2, [pc, #336]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009d4a:	6812      	ldr	r2, [r2, #0]
 8009d4c:	0590      	lsls	r0, r2, #22
 8009d4e:	d503      	bpl.n	8009d58 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8009d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d54:	f000 86a1 	beq.w	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8009d58:	4a50      	ldr	r2, [pc, #320]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009d5a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009d5e:	f010 0002 	ands.w	r0, r0, #2
 8009d62:	f43f ab6f 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009d66:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8009d6a:	bf14      	ite	ne
 8009d6c:	2000      	movne	r0, #0
 8009d6e:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009d72:	f7ff bb67 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009d76:	4a49      	ldr	r2, [pc, #292]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009d78:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009d7c:	f413 43e0 	ands.w	r3, r3, #28672	; 0x7000
 8009d80:	f43f ae51 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8009d84:	6812      	ldr	r2, [r2, #0]
 8009d86:	0111      	lsls	r1, r2, #4
 8009d88:	d503      	bpl.n	8009d92 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8009d8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d8e:	f000 8139 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8009d92:	4a42      	ldr	r2, [pc, #264]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009d94:	6812      	ldr	r2, [r2, #0]
 8009d96:	0092      	lsls	r2, r2, #2
 8009d98:	d503      	bpl.n	8009da2 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8009d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d9e:	f000 8137 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009da2:	4a3e      	ldr	r2, [pc, #248]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009da4:	6811      	ldr	r1, [r2, #0]
 8009da6:	0788      	lsls	r0, r1, #30
 8009da8:	d503      	bpl.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
 8009daa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009dae:	f000 8622 	beq.w	800a9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x164e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8009db2:	4a3a      	ldr	r2, [pc, #232]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009db4:	6812      	ldr	r2, [r2, #0]
 8009db6:	0591      	lsls	r1, r2, #22
 8009db8:	d503      	bpl.n	8009dc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8009dba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009dbe:	f000 8666 	beq.w	800aa8e <HAL_RCCEx_GetPeriphCLKFreq+0x16e6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8009dc2:	4a36      	ldr	r2, [pc, #216]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009dc4:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009dc8:	f010 0002 	ands.w	r0, r0, #2
 8009dcc:	f43f ab3a 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009dd0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009dd4:	bf14      	ite	ne
 8009dd6:	2000      	movne	r0, #0
 8009dd8:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009ddc:	f7ff bb32 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009de0:	4a2e      	ldr	r2, [pc, #184]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009de2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009de6:	f413 73e0 	ands.w	r3, r3, #448	; 0x1c0
 8009dea:	f43f ae1c 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	0111      	lsls	r1, r2, #4
 8009df2:	d502      	bpl.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8009df4:	2b40      	cmp	r3, #64	; 0x40
 8009df6:	f000 8105 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009dfa:	4a28      	ldr	r2, [pc, #160]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009dfc:	6812      	ldr	r2, [r2, #0]
 8009dfe:	0092      	lsls	r2, r2, #2
 8009e00:	d502      	bpl.n	8009e08 <HAL_RCCEx_GetPeriphCLKFreq+0xa60>
 8009e02:	2b80      	cmp	r3, #128	; 0x80
 8009e04:	f000 8104 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009e08:	4a24      	ldr	r2, [pc, #144]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009e0a:	6811      	ldr	r1, [r2, #0]
 8009e0c:	0788      	lsls	r0, r1, #30
 8009e0e:	d502      	bpl.n	8009e16 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8009e10:	2bc0      	cmp	r3, #192	; 0xc0
 8009e12:	f000 85f7 	beq.w	800aa04 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009e16:	4a21      	ldr	r2, [pc, #132]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009e18:	6812      	ldr	r2, [r2, #0]
 8009e1a:	0591      	lsls	r1, r2, #22
 8009e1c:	d503      	bpl.n	8009e26 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 8009e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e22:	f000 861f 	beq.w	800aa64 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009e26:	4a1d      	ldr	r2, [pc, #116]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009e28:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009e2c:	f010 0002 	ands.w	r0, r0, #2
 8009e30:	f43f ab08 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009e34:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009e38:	bf14      	ite	ne
 8009e3a:	2000      	movne	r0, #0
 8009e3c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009e40:	f7ff bb00 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009e44:	4a15      	ldr	r2, [pc, #84]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009e46:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009e4a:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8009e4e:	f43f adea 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 8009e52:	6812      	ldr	r2, [r2, #0]
 8009e54:	0110      	lsls	r0, r2, #4
 8009e56:	d502      	bpl.n	8009e5e <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8009e58:	2b08      	cmp	r3, #8
 8009e5a:	f000 80d3 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8009e5e:	2b10      	cmp	r3, #16
 8009e60:	f000 80d6 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009e64:	4a0d      	ldr	r2, [pc, #52]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009e66:	6811      	ldr	r1, [r2, #0]
 8009e68:	0789      	lsls	r1, r1, #30
 8009e6a:	d502      	bpl.n	8009e72 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8009e6c:	2b18      	cmp	r3, #24
 8009e6e:	f000 85d7 	beq.w	800aa20 <HAL_RCCEx_GetPeriphCLKFreq+0x1678>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8009e72:	4a0a      	ldr	r2, [pc, #40]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009e74:	6812      	ldr	r2, [r2, #0]
 8009e76:	0590      	lsls	r0, r2, #22
 8009e78:	d502      	bpl.n	8009e80 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 8009e7a:	2b20      	cmp	r3, #32
 8009e7c:	f000 8616 	beq.w	800aaac <HAL_RCCEx_GetPeriphCLKFreq+0x1704>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009e80:	4a06      	ldr	r2, [pc, #24]	; (8009e9c <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009e82:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009e86:	f010 0002 	ands.w	r0, r0, #2
 8009e8a:	f43f aadb 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009e8e:	2b28      	cmp	r3, #40	; 0x28
 8009e90:	bf14      	ite	ne
 8009e92:	2000      	movne	r0, #0
 8009e94:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009e98:	f7ff bad4 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009e9c:	44020c00 	.word	0x44020c00
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8009ea0:	4aa7      	ldr	r2, [pc, #668]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009ea2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8009ea6:	f413 6360 	ands.w	r3, r3, #3584	; 0xe00
 8009eaa:	f43f adbc 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8009eae:	6812      	ldr	r2, [r2, #0]
 8009eb0:	0112      	lsls	r2, r2, #4
 8009eb2:	d503      	bpl.n	8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8009eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009eb8:	f000 80a4 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8009ebc:	4aa0      	ldr	r2, [pc, #640]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009ebe:	6812      	ldr	r2, [r2, #0]
 8009ec0:	0090      	lsls	r0, r2, #2
 8009ec2:	d503      	bpl.n	8009ecc <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8009ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ec8:	f000 80a2 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8009ecc:	4a9c      	ldr	r2, [pc, #624]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009ece:	6811      	ldr	r1, [r2, #0]
 8009ed0:	0789      	lsls	r1, r1, #30
 8009ed2:	d503      	bpl.n	8009edc <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8009ed4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009ed8:	f000 859b 	beq.w	800aa12 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009edc:	4a98      	ldr	r2, [pc, #608]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009ede:	6812      	ldr	r2, [r2, #0]
 8009ee0:	0590      	lsls	r0, r2, #22
 8009ee2:	d503      	bpl.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
 8009ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ee8:	f000 85bf 	beq.w	800aa6a <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009eec:	4a94      	ldr	r2, [pc, #592]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009eee:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009ef2:	f010 0002 	ands.w	r0, r0, #2
 8009ef6:	f43f aaa5 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009efa:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8009efe:	bf14      	ite	ne
 8009f00:	2000      	movne	r0, #0
 8009f02:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009f06:	f7ff ba9d 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009f0a:	4a8d      	ldr	r2, [pc, #564]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009f0c:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8009f10:	f013 0307 	ands.w	r3, r3, #7
 8009f14:	d026      	beq.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009f16:	6812      	ldr	r2, [r2, #0]
 8009f18:	0112      	lsls	r2, r2, #4
 8009f1a:	d501      	bpl.n	8009f20 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d071      	beq.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 8009f20:	4a87      	ldr	r2, [pc, #540]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009f22:	6812      	ldr	r2, [r2, #0]
 8009f24:	0090      	lsls	r0, r2, #2
 8009f26:	d501      	bpl.n	8009f2c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d071      	beq.n	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009f2c:	4a84      	ldr	r2, [pc, #528]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009f2e:	6811      	ldr	r1, [r2, #0]
 8009f30:	0789      	lsls	r1, r1, #30
 8009f32:	d502      	bpl.n	8009f3a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8009f34:	2b03      	cmp	r3, #3
 8009f36:	f000 8507 	beq.w	800a948 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009f3a:	4a81      	ldr	r2, [pc, #516]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009f3c:	6812      	ldr	r2, [r2, #0]
 8009f3e:	0592      	lsls	r2, r2, #22
 8009f40:	d502      	bpl.n	8009f48 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 8009f42:	2b04      	cmp	r3, #4
 8009f44:	f000 859d 	beq.w	800aa82 <HAL_RCCEx_GetPeriphCLKFreq+0x16da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009f48:	4a7d      	ldr	r2, [pc, #500]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009f4a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009f4e:	f010 0002 	ands.w	r0, r0, #2
 8009f52:	f43f aa77 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009f56:	2b05      	cmp	r3, #5
 8009f58:	bf14      	ite	ne
 8009f5a:	2000      	movne	r0, #0
 8009f5c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009f60:	f7ff ba70 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
}
 8009f64:	b005      	add	sp, #20
 8009f66:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetPCLK2Freq();
 8009f6a:	f7fc bfc3 	b.w	8006ef4 <HAL_RCC_GetPCLK2Freq>
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f6e:	a801      	add	r0, sp, #4
 8009f70:	f7fe ffe0 	bl	8008f34 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f74:	9802      	ldr	r0, [sp, #8]
            break;
 8009f76:	f7ff ba65 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f7a:	a801      	add	r0, sp, #4
 8009f7c:	f7ff f956 	bl	800922c <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8009f80:	9801      	ldr	r0, [sp, #4]
            break;
 8009f82:	f7ff ba5f 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 8009f86:	486f      	ldr	r0, [pc, #444]	; (800a144 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009f88:	f7ff ba5c 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f8c:	4a6c      	ldr	r2, [pc, #432]	; (800a140 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009f8e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f92:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f94:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f98:	0789      	lsls	r1, r1, #30
 8009f9a:	f140 83da 	bpl.w	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f040 83d7 	bne.w	800a752 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009fa4:	6813      	ldr	r3, [r2, #0]
 8009fa6:	4868      	ldr	r0, [pc, #416]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8009fa8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009fac:	40d8      	lsrs	r0, r3
 8009fae:	f7ff ba49 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009fb2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8009fb6:	f010 0002 	ands.w	r0, r0, #2
 8009fba:	bf18      	it	ne
 8009fbc:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009fc0:	f7ff ba40 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009fc4:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
      frequency = LSE_VALUE;
 8009fc8:	f010 0002 	ands.w	r0, r0, #2
 8009fcc:	bf18      	it	ne
 8009fce:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009fd2:	f7ff ba37 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009fd6:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8009fda:	f010 0002 	ands.w	r0, r0, #2
 8009fde:	bf18      	it	ne
 8009fe0:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009fe4:	f7ff ba2e 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009fe8:	69d3      	ldr	r3, [r2, #28]
 8009fea:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8009fee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ff2:	f4ff ad15 	bcc.w	8009a20 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009ff6:	69d0      	ldr	r0, [r2, #28]
 8009ff8:	4b53      	ldr	r3, [pc, #332]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8009ffa:	f3c0 2005 	ubfx	r0, r0, #8, #6
 8009ffe:	fbb3 f0f0 	udiv	r0, r3, r0
 800a002:	4770      	bx	lr
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a004:	a801      	add	r0, sp, #4
 800a006:	f7ff f853 	bl	80090b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a00a:	9802      	ldr	r0, [sp, #8]
 800a00c:	f7ff ba1a 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a010:	a801      	add	r0, sp, #4
 800a012:	f7ff f90b 	bl	800922c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a016:	9802      	ldr	r0, [sp, #8]
 800a018:	f7ff ba14 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f43f ac6d 	beq.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800a022:	2000      	movs	r0, #0
 800a024:	f7ff ba0e 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a028:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a02c:	f000 832c 	beq.w	800a688 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800a030:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a034:	bf18      	it	ne
 800a036:	2000      	movne	r0, #0
 800a038:	f47f aa04 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a03c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a040:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a042:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a046:	0789      	lsls	r1, r1, #30
 800a048:	f140 83ec 	bpl.w	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f040 83e9 	bne.w	800a824 <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a052:	6813      	ldr	r3, [r2, #0]
 800a054:	483c      	ldr	r0, [pc, #240]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800a056:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a05a:	40d8      	lsrs	r0, r3
 800a05c:	f7ff b9f2 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a064:	f000 8307 	beq.w	800a676 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 800a068:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800a06c:	bf18      	it	ne
 800a06e:	2000      	movne	r0, #0
 800a070:	f47f a9e8 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a074:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a078:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a07a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a07e:	0789      	lsls	r1, r1, #30
 800a080:	f140 83bb 	bpl.w	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 800a084:	2b00      	cmp	r3, #0
 800a086:	f040 83b8 	bne.w	800a7fa <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a08a:	6813      	ldr	r3, [r2, #0]
 800a08c:	482e      	ldr	r0, [pc, #184]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800a08e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a092:	40d8      	lsrs	r0, r3
 800a094:	f7ff b9d6 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a098:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800a09c:	f000 82fd 	beq.w	800a69a <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 800a0a0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 800a0a4:	bf18      	it	ne
 800a0a6:	4618      	movne	r0, r3
 800a0a8:	f47f a9cc 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0ac:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0b0:	680a      	ldr	r2, [r1, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0b6:	0790      	lsls	r0, r2, #30
 800a0b8:	f140 83f9 	bpl.w	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	f040 83f6 	bne.w	800a8ae <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0c2:	680b      	ldr	r3, [r1, #0]
 800a0c4:	4820      	ldr	r0, [pc, #128]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800a0c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a0ca:	40d8      	lsrs	r0, r3
 800a0cc:	f7ff b9ba 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a0d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a0d4:	f000 82ea 	beq.w	800a6ac <HAL_RCCEx_GetPeriphCLKFreq+0x1304>
 800a0d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a0dc:	bf18      	it	ne
 800a0de:	2000      	movne	r0, #0
 800a0e0:	f47f a9b0 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0e4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0e8:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0ee:	0789      	lsls	r1, r1, #30
 800a0f0:	f140 83f2 	bpl.w	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1530>
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f040 83ef 	bne.w	800a8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1530>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a0fa:	6813      	ldr	r3, [r2, #0]
 800a0fc:	4812      	ldr	r0, [pc, #72]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800a0fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a102:	40d8      	lsrs	r0, r3
 800a104:	f7ff b99e 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a108:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a10c:	f000 826d 	beq.w	800a5ea <HAL_RCCEx_GetPeriphCLKFreq+0x1242>
 800a110:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a114:	bf18      	it	ne
 800a116:	2000      	movne	r0, #0
 800a118:	f47f a994 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a11c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a120:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a122:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a126:	0789      	lsls	r1, r1, #30
 800a128:	f140 82fe 	bpl.w	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	f040 82fb 	bne.w	800a728 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a132:	6813      	ldr	r3, [r2, #0]
 800a134:	4804      	ldr	r0, [pc, #16]	; (800a148 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800a136:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a13a:	40d8      	lsrs	r0, r3
 800a13c:	f7ff b982 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a140:	44020c00 	.word	0x44020c00
 800a144:	00bb8000 	.word	0x00bb8000
 800a148:	017d7840 	.word	0x017d7840
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a14c:	4ba1      	ldr	r3, [pc, #644]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a14e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a156:	2b20      	cmp	r3, #32
 800a158:	d844      	bhi.n	800a1e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800a15a:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	08009f6f 	.word	0x08009f6f
 800a164:	0800a1e5 	.word	0x0800a1e5
 800a168:	0800a1e5 	.word	0x0800a1e5
 800a16c:	0800a1e5 	.word	0x0800a1e5
 800a170:	0800a1e5 	.word	0x0800a1e5
 800a174:	0800a1e5 	.word	0x0800a1e5
 800a178:	0800a1e5 	.word	0x0800a1e5
 800a17c:	0800a1e5 	.word	0x0800a1e5
 800a180:	08009bd1 	.word	0x08009bd1
 800a184:	0800a1e5 	.word	0x0800a1e5
 800a188:	0800a1e5 	.word	0x0800a1e5
 800a18c:	0800a1e5 	.word	0x0800a1e5
 800a190:	0800a1e5 	.word	0x0800a1e5
 800a194:	0800a1e5 	.word	0x0800a1e5
 800a198:	0800a1e5 	.word	0x0800a1e5
 800a19c:	0800a1e5 	.word	0x0800a1e5
 800a1a0:	08009f7b 	.word	0x08009f7b
 800a1a4:	0800a1e5 	.word	0x0800a1e5
 800a1a8:	0800a1e5 	.word	0x0800a1e5
 800a1ac:	0800a1e5 	.word	0x0800a1e5
 800a1b0:	0800a1e5 	.word	0x0800a1e5
 800a1b4:	0800a1e5 	.word	0x0800a1e5
 800a1b8:	0800a1e5 	.word	0x0800a1e5
 800a1bc:	0800a1e5 	.word	0x0800a1e5
 800a1c0:	0800a211 	.word	0x0800a211
 800a1c4:	0800a1e5 	.word	0x0800a1e5
 800a1c8:	0800a1e5 	.word	0x0800a1e5
 800a1cc:	0800a1e5 	.word	0x0800a1e5
 800a1d0:	0800a1e5 	.word	0x0800a1e5
 800a1d4:	0800a1e5 	.word	0x0800a1e5
 800a1d8:	0800a1e5 	.word	0x0800a1e5
 800a1dc:	0800a1e5 	.word	0x0800a1e5
 800a1e0:	0800a1eb 	.word	0x0800a1eb
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	f7ff b92d 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1ea:	4a7a      	ldr	r2, [pc, #488]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a1ec:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1f0:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1f2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1f6:	0789      	lsls	r1, r1, #30
 800a1f8:	f140 82ea 	bpl.w	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1428>
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	f040 82e7 	bne.w	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1428>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a202:	6813      	ldr	r3, [r2, #0]
 800a204:	4874      	ldr	r0, [pc, #464]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 800a206:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a20a:	40d8      	lsrs	r0, r3
 800a20c:	f7ff b91a 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 800a210:	4872      	ldr	r0, [pc, #456]	; (800a3dc <HAL_RCCEx_GetPeriphCLKFreq+0x1034>)
 800a212:	f7ff b917 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800a216:	4a6f      	ldr	r2, [pc, #444]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a218:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800a21c:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
        switch (srcclk)
 800a220:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a224:	f43f aea9 	beq.w	8009f7a <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 800a228:	f200 8174 	bhi.w	800a514 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	f43f ae9e 	beq.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 800a232:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a236:	bf18      	it	ne
 800a238:	2000      	movne	r0, #0
 800a23a:	f43f acc9 	beq.w	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a23e:	f7ff b901 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800a242:	4a64      	ldr	r2, [pc, #400]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a244:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 800a248:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
        switch (srcclk)
 800a24c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a250:	f000 825c 	beq.w	800a70c <HAL_RCCEx_GetPeriphCLKFreq+0x1364>
 800a254:	f200 8196 	bhi.w	800a584 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
 800a258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a25c:	f43f acb8 	beq.w	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a264:	f43f acf0 	beq.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f43f abdc 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800a26e:	2000      	movs	r0, #0
 800a270:	f7ff b8e8 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 800a274:	4a57      	ldr	r2, [pc, #348]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a276:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 800a27a:	f013 0307 	ands.w	r3, r3, #7
 800a27e:	f43f abd2 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 800a282:	6812      	ldr	r2, [r2, #0]
 800a284:	0111      	lsls	r1, r2, #4
 800a286:	d502      	bpl.n	800a28e <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 800a288:	2b01      	cmp	r3, #1
 800a28a:	f43f aebb 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 800a28e:	4a51      	ldr	r2, [pc, #324]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a290:	6812      	ldr	r2, [r2, #0]
 800a292:	0092      	lsls	r2, r2, #2
 800a294:	d502      	bpl.n	800a29c <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800a296:	2b02      	cmp	r3, #2
 800a298:	f43f aeba 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 800a29c:	4a4d      	ldr	r2, [pc, #308]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a29e:	6811      	ldr	r1, [r2, #0]
 800a2a0:	0788      	lsls	r0, r1, #30
 800a2a2:	d502      	bpl.n	800a2aa <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 800a2a4:	2b03      	cmp	r3, #3
 800a2a6:	f000 833a 	beq.w	800a91e <HAL_RCCEx_GetPeriphCLKFreq+0x1576>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 800a2aa:	4a4a      	ldr	r2, [pc, #296]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a2ac:	6812      	ldr	r2, [r2, #0]
 800a2ae:	0591      	lsls	r1, r2, #22
 800a2b0:	d502      	bpl.n	800a2b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 800a2b2:	2b04      	cmp	r3, #4
 800a2b4:	f000 83ee 	beq.w	800aa94 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 800a2b8:	4a46      	ldr	r2, [pc, #280]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a2ba:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800a2be:	f010 0002 	ands.w	r0, r0, #2
 800a2c2:	f43f a8bf 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	bf14      	ite	ne
 800a2ca:	2000      	movne	r0, #0
 800a2cc:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800a2d0:	f7ff b8b8 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 800a2d4:	4a3f      	ldr	r2, [pc, #252]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a2d6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800a2da:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800a2de:	2b10      	cmp	r3, #16
 800a2e0:	f43f a9e9 	beq.w	80096b6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 800a2e4:	6812      	ldr	r2, [r2, #0]
 800a2e6:	0092      	lsls	r2, r2, #2
 800a2e8:	d502      	bpl.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	f43f ae90 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800a2f0:	4a38      	ldr	r2, [pc, #224]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a2f2:	6810      	ldr	r0, [r2, #0]
 800a2f4:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 800a2f8:	f43f a8a4 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSI48_VALUE;
 800a2fc:	2b30      	cmp	r3, #48	; 0x30
 800a2fe:	4838      	ldr	r0, [pc, #224]	; (800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>)
 800a300:	bf18      	it	ne
 800a302:	2000      	movne	r0, #0
 800a304:	f7ff b89e 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a308:	2bc0      	cmp	r3, #192	; 0xc0
 800a30a:	f000 816b 	beq.w	800a5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x123c>
 800a30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a312:	f040 83f8 	bne.w	800ab06 <HAL_RCCEx_GetPeriphCLKFreq+0x175e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a316:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a31a:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a31c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a320:	0788      	lsls	r0, r1, #30
 800a322:	f140 822b 	bpl.w	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 800a326:	2b00      	cmp	r3, #0
 800a328:	f040 8228 	bne.w	800a77c <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a32c:	6813      	ldr	r3, [r2, #0]
 800a32e:	482a      	ldr	r0, [pc, #168]	; (800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 800a330:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a334:	40d8      	lsrs	r0, r3
 800a336:	f7ff b885 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 800a33a:	4a26      	ldr	r2, [pc, #152]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a33c:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800a340:	f013 63e0 	ands.w	r3, r3, #117440512	; 0x7000000
 800a344:	f43f ab6f 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 800a348:	6812      	ldr	r2, [r2, #0]
 800a34a:	0111      	lsls	r1, r2, #4
 800a34c:	d503      	bpl.n	800a356 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800a34e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a352:	f43f ae57 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 800a356:	4a1f      	ldr	r2, [pc, #124]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a358:	6812      	ldr	r2, [r2, #0]
 800a35a:	0092      	lsls	r2, r2, #2
 800a35c:	d503      	bpl.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800a35e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a362:	f43f ae55 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 800a366:	4a1b      	ldr	r2, [pc, #108]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a368:	6811      	ldr	r1, [r2, #0]
 800a36a:	0788      	lsls	r0, r1, #30
 800a36c:	d503      	bpl.n	800a376 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800a36e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a372:	f000 8339 	beq.w	800a9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 800a376:	4a17      	ldr	r2, [pc, #92]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a378:	6812      	ldr	r2, [r2, #0]
 800a37a:	0591      	lsls	r1, r2, #22
 800a37c:	d503      	bpl.n	800a386 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
 800a37e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a382:	f000 8381 	beq.w	800aa88 <HAL_RCCEx_GetPeriphCLKFreq+0x16e0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 800a386:	4a13      	ldr	r2, [pc, #76]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a388:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800a38c:	f010 0002 	ands.w	r0, r0, #2
 800a390:	f43f a858 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800a394:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a398:	bf14      	ite	ne
 800a39a:	2000      	movne	r0, #0
 800a39c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800a3a0:	f7ff b850 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 800a3a4:	4a0b      	ldr	r2, [pc, #44]	; (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800a3a6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 800a3aa:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
        switch (srcclk)
 800a3ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a3b2:	f000 8199 	beq.w	800a6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
 800a3b6:	d848      	bhi.n	800a44a <HAL_RCCEx_GetPeriphCLKFreq+0x10a2>
 800a3b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3bc:	f43f ac08 	beq.w	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800a3c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3c4:	f43f ac40 	beq.w	8009c48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f43f aa97 	beq.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f7ff b838 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a3d4:	44020c00 	.word	0x44020c00
 800a3d8:	017d7840 	.word	0x017d7840
 800a3dc:	00bb8000 	.word	0x00bb8000
 800a3e0:	02dc6c00 	.word	0x02dc6c00
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 800a3e4:	4abb      	ldr	r2, [pc, #748]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a3e6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 800a3ea:	f413 43e0 	ands.w	r3, r3, #28672	; 0x7000
 800a3ee:	f43f aa85 	beq.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800a3f2:	6812      	ldr	r2, [r2, #0]
 800a3f4:	0111      	lsls	r1, r2, #4
 800a3f6:	d503      	bpl.n	800a400 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 800a3f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fc:	f43f ae02 	beq.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800a400:	4ab4      	ldr	r2, [pc, #720]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a402:	6812      	ldr	r2, [r2, #0]
 800a404:	0092      	lsls	r2, r2, #2
 800a406:	d503      	bpl.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 800a408:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a40c:	f43f ae00 	beq.w	800a010 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800a410:	4ab0      	ldr	r2, [pc, #704]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a412:	6811      	ldr	r1, [r2, #0]
 800a414:	0788      	lsls	r0, r1, #30
 800a416:	d503      	bpl.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>
 800a418:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a41c:	f000 82be 	beq.w	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x15f4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800a420:	4aac      	ldr	r2, [pc, #688]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a422:	6812      	ldr	r2, [r2, #0]
 800a424:	0591      	lsls	r1, r2, #22
 800a426:	d503      	bpl.n	800a430 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 800a428:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a42c:	f000 8317 	beq.w	800aa5e <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800a430:	4aa8      	ldr	r2, [pc, #672]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a432:	6810      	ldr	r0, [r2, #0]
 800a434:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a438:	f43f a804 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a43c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a440:	48a5      	ldr	r0, [pc, #660]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800a442:	bf18      	it	ne
 800a444:	2000      	movne	r0, #0
 800a446:	f7fe bffd 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a44a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a44e:	f000 8154 	beq.w	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x1352>
 800a452:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 800a456:	bf18      	it	ne
 800a458:	2000      	movne	r0, #0
 800a45a:	f47e aff3 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a45e:	4a9d      	ldr	r2, [pc, #628]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a460:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a464:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a466:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a46a:	0789      	lsls	r1, r1, #30
 800a46c:	f140 81ef 	bpl.w	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
 800a470:	2b00      	cmp	r3, #0
 800a472:	f040 81ec 	bne.w	800a84e <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a476:	6813      	ldr	r3, [r2, #0]
 800a478:	4897      	ldr	r0, [pc, #604]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800a47a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a47e:	40d8      	lsrs	r0, r3
 800a480:	f7fe bfe0 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a484:	4a93      	ldr	r2, [pc, #588]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a486:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800a48a:	f003 0303 	and.w	r3, r3, #3
        switch (srcclk)
 800a48e:	2b02      	cmp	r3, #2
 800a490:	f000 80c0 	beq.w	800a614 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>
 800a494:	2b03      	cmp	r3, #3
 800a496:	f000 80ae 	beq.w	800a5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	f43f ad67 	beq.w	8009f6e <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
}
 800a4a0:	b005      	add	sp, #20
 800a4a2:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetHCLKFreq();
 800a4a6:	f7fc b9b1 	b.w	800680c <HAL_RCC_GetHCLKFreq>
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800a4aa:	4b8a      	ldr	r3, [pc, #552]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a4ac:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800a4b0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 800a4b4:	f000 0008 	and.w	r0, r0, #8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 800a4b8:	0792      	lsls	r2, r2, #30
 800a4ba:	f140 8086 	bpl.w	800a5ca <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	f000 80c9 	beq.w	800a656 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800a4c4:	4b83      	ldr	r3, [pc, #524]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a4c6:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
          frequency = LSI_VALUE;
 800a4ca:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a4ce:	bf18      	it	ne
 800a4d0:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800a4d4:	f7fe bfb6 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800a4d8:	4a7e      	ldr	r2, [pc, #504]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a4da:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800a4de:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 800a4e2:	f43f aa0b 	beq.w	80098fc <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 800a4e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4ea:	d068      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 800a4ec:	6812      	ldr	r2, [r2, #0]
 800a4ee:	0792      	lsls	r2, r2, #30
 800a4f0:	d503      	bpl.n	800a4fa <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
 800a4f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a4f6:	f000 825f 	beq.w	800a9b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 800a4fa:	4a76      	ldr	r2, [pc, #472]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a4fc:	6810      	ldr	r0, [r2, #0]
 800a4fe:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800a502:	f43e af9f 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 800a506:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a50a:	4874      	ldr	r0, [pc, #464]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x1334>)
 800a50c:	bf18      	it	ne
 800a50e:	2000      	movne	r0, #0
 800a510:	f7fe bf98 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a514:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800a518:	d061      	beq.n	800a5de <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
 800a51a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a51e:	f040 82ef 	bne.w	800ab00 <HAL_RCCEx_GetPeriphCLKFreq+0x1758>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a522:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a526:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a528:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a52c:	0789      	lsls	r1, r1, #30
 800a52e:	f140 813a 	bpl.w	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
 800a532:	2b00      	cmp	r3, #0
 800a534:	f040 8137 	bne.w	800a7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a538:	6813      	ldr	r3, [r2, #0]
 800a53a:	4867      	ldr	r0, [pc, #412]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800a53c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a540:	40d8      	lsrs	r0, r3
 800a542:	f7fe bf7f 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800a546:	4b63      	ldr	r3, [pc, #396]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a548:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800a54c:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 800a550:	f43f aa69 	beq.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 800a554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a558:	d031      	beq.n	800a5be <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800a55a:	4a5e      	ldr	r2, [pc, #376]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a55c:	6811      	ldr	r1, [r2, #0]
 800a55e:	0788      	lsls	r0, r1, #30
 800a560:	d503      	bpl.n	800a56a <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 800a562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a566:	f000 822f 	beq.w	800a9c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 800a56a:	4a5a      	ldr	r2, [pc, #360]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a56c:	6810      	ldr	r0, [r2, #0]
 800a56e:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800a572:	f43e af67 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 800a576:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a57a:	4858      	ldr	r0, [pc, #352]	; (800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0x1334>)
 800a57c:	bf18      	it	ne
 800a57e:	2000      	movne	r0, #0
 800a580:	f7fe bf60 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a588:	f000 8099 	beq.w	800a6be <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
 800a58c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800a590:	bf18      	it	ne
 800a592:	2000      	movne	r0, #0
 800a594:	f47e af56 	bne.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a598:	4a4e      	ldr	r2, [pc, #312]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a59a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a59e:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5a0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5a4:	0789      	lsls	r1, r1, #30
 800a5a6:	f140 816d 	bpl.w	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f040 816a 	bne.w	800a884 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a5b0:	6813      	ldr	r3, [r2, #0]
 800a5b2:	4849      	ldr	r0, [pc, #292]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800a5b4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a5b8:	40d8      	lsrs	r0, r3
 800a5ba:	f7fe bf43 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5be:	a801      	add	r0, sp, #4
 800a5c0:	f7fe fe34 	bl	800922c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a5c4:	9803      	ldr	r0, [sp, #12]
 800a5c6:	f7fe bf3d 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 800a5ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a5ce:	011b      	lsls	r3, r3, #4
 800a5d0:	d526      	bpl.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
          frequency = LSI_VALUE;
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	bf18      	it	ne
 800a5d6:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800a5da:	f7fe bf33 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 800a5de:	4840      	ldr	r0, [pc, #256]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 800a5e0:	f7fe bf30 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a5e4:	483e      	ldr	r0, [pc, #248]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 800a5e6:	f7fe bf2d 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a5ea:	483d      	ldr	r0, [pc, #244]	; (800a6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 800a5ec:	f7fe bf2a 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a5f0:	2000      	movs	r0, #0
 800a5f2:	f7fe bf27 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5f6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a5fa:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a5fc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a600:	0789      	lsls	r1, r1, #30
 800a602:	d510      	bpl.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 800a604:	b97b      	cbnz	r3, 800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a606:	6813      	ldr	r3, [r2, #0]
 800a608:	4833      	ldr	r0, [pc, #204]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800a60a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a60e:	40d8      	lsrs	r0, r3
 800a610:	f7fe bf18 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a614:	a801      	add	r0, sp, #4
 800a616:	f7fe fd4b 	bl	80090b0 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 800a61a:	9803      	ldr	r0, [sp, #12]
            break;
 800a61c:	f7fe bf12 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = 0U;
 800a620:	2000      	movs	r0, #0
 800a622:	f7fe bf0f 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a626:	4a2b      	ldr	r2, [pc, #172]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a628:	6812      	ldr	r2, [r2, #0]
 800a62a:	0592      	lsls	r2, r2, #22
 800a62c:	d503      	bpl.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x128e>
 800a62e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a632:	f000 8241 	beq.w	800aab8 <HAL_RCCEx_GetPeriphCLKFreq+0x1710>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a636:	4a27      	ldr	r2, [pc, #156]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a638:	6810      	ldr	r0, [r2, #0]
 800a63a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a63e:	f43e af01 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a646:	4824      	ldr	r0, [pc, #144]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800a648:	bf18      	it	ne
 800a64a:	2000      	movne	r0, #0
 800a64c:	f7fe befa 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a650:	4821      	ldr	r0, [pc, #132]	; (800a6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800a652:	f7fe bef7 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800a656:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800a65a:	f7fe bef3 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSI48_VALUE;
 800a65e:	4821      	ldr	r0, [pc, #132]	; (800a6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 800a660:	f7fe bef0 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a664:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 800a668:	f010 0002 	ands.w	r0, r0, #2
 800a66c:	bf18      	it	ne
 800a66e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800a672:	f7fe bee7 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a676:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 800a67a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a67e:	bf18      	it	ne
 800a680:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800a684:	f7fe bede 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a688:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 800a68c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a690:	bf18      	it	ne
 800a692:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800a696:	f7fe bed5 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a69a:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
          frequency = LSI_VALUE;
 800a69e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a6a2:	bf18      	it	ne
 800a6a4:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800a6a8:	f7fe becc 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a6ac:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 800a6b0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a6b4:	bf18      	it	ne
 800a6b6:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800a6ba:	f7fe bec3 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a6be:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800a6c0:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
          frequency = LSI_VALUE;
 800a6c4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a6c8:	bf18      	it	ne
 800a6ca:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800a6ce:	f7fe beb9 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a6d2:	bf00      	nop
 800a6d4:	44020c00 	.word	0x44020c00
 800a6d8:	017d7840 	.word	0x017d7840
 800a6dc:	003d0900 	.word	0x003d0900
 800a6e0:	00bb8000 	.word	0x00bb8000
 800a6e4:	02dc6c00 	.word	0x02dc6c00
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a6e8:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 800a6ec:	f010 0002 	ands.w	r0, r0, #2
 800a6f0:	bf18      	it	ne
 800a6f2:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800a6f6:	f7fe bea5 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800a6fa:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 800a6fe:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800a702:	bf18      	it	ne
 800a704:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800a708:	f7fe be9c 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800a70c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 800a710:	f010 0002 	ands.w	r0, r0, #2
 800a714:	bf18      	it	ne
 800a716:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800a71a:	f7fe be93 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
}
 800a71e:	b005      	add	sp, #20
 800a720:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 800a724:	f7fb bf24 	b.w	8006570 <HAL_RCC_GetSysClockFreq>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a728:	4aad      	ldr	r2, [pc, #692]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a72a:	6812      	ldr	r2, [r2, #0]
 800a72c:	0590      	lsls	r0, r2, #22
 800a72e:	d503      	bpl.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
 800a730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a734:	f000 81d2 	beq.w	800aadc <HAL_RCCEx_GetPeriphCLKFreq+0x1734>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a738:	4aa9      	ldr	r2, [pc, #676]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a73a:	6810      	ldr	r0, [r2, #0]
 800a73c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a740:	f43e ae80 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a748:	48a6      	ldr	r0, [pc, #664]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a74a:	bf18      	it	ne
 800a74c:	2000      	movne	r0, #0
 800a74e:	f7fe be79 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a752:	4aa3      	ldr	r2, [pc, #652]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a754:	6812      	ldr	r2, [r2, #0]
 800a756:	0590      	lsls	r0, r2, #22
 800a758:	d503      	bpl.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
 800a75a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a75e:	f000 81c9 	beq.w	800aaf4 <HAL_RCCEx_GetPeriphCLKFreq+0x174c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a762:	4a9f      	ldr	r2, [pc, #636]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a764:	6810      	ldr	r0, [r2, #0]
 800a766:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a76a:	f43e ae6b 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a76e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a772:	489c      	ldr	r0, [pc, #624]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a774:	bf18      	it	ne
 800a776:	2000      	movne	r0, #0
 800a778:	f7fe be64 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a77c:	4a98      	ldr	r2, [pc, #608]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a77e:	6812      	ldr	r2, [r2, #0]
 800a780:	0591      	lsls	r1, r2, #22
 800a782:	d503      	bpl.n	800a78c <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 800a784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a788:	f000 81b1 	beq.w	800aaee <HAL_RCCEx_GetPeriphCLKFreq+0x1746>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a78c:	4a94      	ldr	r2, [pc, #592]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a78e:	6810      	ldr	r0, [r2, #0]
 800a790:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a794:	f43e ae56 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a79c:	4891      	ldr	r0, [pc, #580]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a79e:	bf18      	it	ne
 800a7a0:	2000      	movne	r0, #0
 800a7a2:	f7fe be4f 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7a6:	4a8e      	ldr	r2, [pc, #568]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a7a8:	6812      	ldr	r2, [r2, #0]
 800a7aa:	0592      	lsls	r2, r2, #22
 800a7ac:	d503      	bpl.n	800a7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x140e>
 800a7ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b2:	f000 8187 	beq.w	800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x171c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7b6:	4a8a      	ldr	r2, [pc, #552]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a7b8:	6810      	ldr	r0, [r2, #0]
 800a7ba:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a7be:	f43e ae41 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a7c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7c6:	4887      	ldr	r0, [pc, #540]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a7c8:	bf18      	it	ne
 800a7ca:	2000      	movne	r0, #0
 800a7cc:	f7fe be3a 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7d0:	4a83      	ldr	r2, [pc, #524]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a7d2:	6812      	ldr	r2, [r2, #0]
 800a7d4:	0592      	lsls	r2, r2, #22
 800a7d6:	d503      	bpl.n	800a7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800a7d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7dc:	f000 8184 	beq.w	800aae8 <HAL_RCCEx_GetPeriphCLKFreq+0x1740>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a7e0:	4a7f      	ldr	r2, [pc, #508]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a7e2:	6810      	ldr	r0, [r2, #0]
 800a7e4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a7e8:	f43e ae2c 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a7ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7f0:	487c      	ldr	r0, [pc, #496]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a7f2:	bf18      	it	ne
 800a7f4:	2000      	movne	r0, #0
 800a7f6:	f7fe be25 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a7fa:	4a79      	ldr	r2, [pc, #484]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a7fc:	6812      	ldr	r2, [r2, #0]
 800a7fe:	0590      	lsls	r0, r2, #22
 800a800:	d503      	bpl.n	800a80a <HAL_RCCEx_GetPeriphCLKFreq+0x1462>
 800a802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a806:	f000 816c 	beq.w	800aae2 <HAL_RCCEx_GetPeriphCLKFreq+0x173a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a80a:	4a75      	ldr	r2, [pc, #468]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a80c:	6810      	ldr	r0, [r2, #0]
 800a80e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a812:	f43e ae17 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a81a:	4872      	ldr	r0, [pc, #456]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a81c:	bf18      	it	ne
 800a81e:	2000      	movne	r0, #0
 800a820:	f7fe be10 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a824:	4a6e      	ldr	r2, [pc, #440]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a826:	6812      	ldr	r2, [r2, #0]
 800a828:	0592      	lsls	r2, r2, #22
 800a82a:	d503      	bpl.n	800a834 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 800a82c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a830:	f000 8151 	beq.w	800aad6 <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a834:	4a6a      	ldr	r2, [pc, #424]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a836:	6810      	ldr	r0, [r2, #0]
 800a838:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a83c:	f43e ae02 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a844:	4867      	ldr	r0, [pc, #412]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a846:	bf18      	it	ne
 800a848:	2000      	movne	r0, #0
 800a84a:	f7fe bdfb 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a84e:	4a64      	ldr	r2, [pc, #400]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a850:	6812      	ldr	r2, [r2, #0]
 800a852:	0590      	lsls	r0, r2, #22
 800a854:	d503      	bpl.n	800a85e <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 800a856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a85a:	f000 8130 	beq.w	800aabe <HAL_RCCEx_GetPeriphCLKFreq+0x1716>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a85e:	4a60      	ldr	r2, [pc, #384]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a860:	6810      	ldr	r0, [r2, #0]
 800a862:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a866:	f43e aded 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a86a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a86e:	485d      	ldr	r0, [pc, #372]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a870:	bf18      	it	ne
 800a872:	2000      	movne	r0, #0
 800a874:	f7fe bde6 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a878:	a801      	add	r0, sp, #4
 800a87a:	f7fe fc19 	bl	80090b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a87e:	9803      	ldr	r0, [sp, #12]
 800a880:	f7fe bde0 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a884:	4a56      	ldr	r2, [pc, #344]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a886:	6812      	ldr	r2, [r2, #0]
 800a888:	0590      	lsls	r0, r2, #22
 800a88a:	d503      	bpl.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>
 800a88c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a890:	f000 8133 	beq.w	800aafa <HAL_RCCEx_GetPeriphCLKFreq+0x1752>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a894:	4a52      	ldr	r2, [pc, #328]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a896:	6810      	ldr	r0, [r2, #0]
 800a898:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a89c:	f43e add2 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8a4:	484f      	ldr	r0, [pc, #316]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a8a6:	bf18      	it	ne
 800a8a8:	2000      	movne	r0, #0
 800a8aa:	f7fe bdcb 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8ae:	4a4c      	ldr	r2, [pc, #304]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	0592      	lsls	r2, r2, #22
 800a8b4:	d503      	bpl.n	800a8be <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800a8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8ba:	f000 8106 	beq.w	800aaca <HAL_RCCEx_GetPeriphCLKFreq+0x1722>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8be:	4a48      	ldr	r2, [pc, #288]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a8c0:	6810      	ldr	r0, [r2, #0]
 800a8c2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a8c6:	f43e adbd 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a8ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8ce:	4845      	ldr	r0, [pc, #276]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a8d0:	bf18      	it	ne
 800a8d2:	2000      	movne	r0, #0
 800a8d4:	f7fe bdb6 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8d8:	4a41      	ldr	r2, [pc, #260]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a8da:	6812      	ldr	r2, [r2, #0]
 800a8dc:	0590      	lsls	r0, r2, #22
 800a8de:	d503      	bpl.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 800a8e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a8e4:	f000 80f4 	beq.w	800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8e8:	4a3d      	ldr	r2, [pc, #244]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a8ea:	6810      	ldr	r0, [r2, #0]
 800a8ec:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800a8f0:	f43e ada8 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800a8f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8f8:	483a      	ldr	r0, [pc, #232]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a8fa:	bf18      	it	ne
 800a8fc:	2000      	movne	r0, #0
 800a8fe:	f7fe bda1 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a902:	6813      	ldr	r3, [r2, #0]
 800a904:	4837      	ldr	r0, [pc, #220]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a906:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a90a:	40d8      	lsrs	r0, r3
 800a90c:	f7fe bd9a 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a910:	6813      	ldr	r3, [r2, #0]
 800a912:	4834      	ldr	r0, [pc, #208]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a914:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a918:	40d8      	lsrs	r0, r3
 800a91a:	f7fe bd93 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a91e:	6813      	ldr	r3, [r2, #0]
 800a920:	4830      	ldr	r0, [pc, #192]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a922:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a926:	40d8      	lsrs	r0, r3
 800a928:	f7fe bd8c 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a92c:	6813      	ldr	r3, [r2, #0]
 800a92e:	482d      	ldr	r0, [pc, #180]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a930:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a934:	40d8      	lsrs	r0, r3
 800a936:	f7fe bd85 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a93a:	6813      	ldr	r3, [r2, #0]
 800a93c:	4829      	ldr	r0, [pc, #164]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a93e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a942:	40d8      	lsrs	r0, r3
 800a944:	f7fe bd7e 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a948:	6813      	ldr	r3, [r2, #0]
 800a94a:	4826      	ldr	r0, [pc, #152]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a94c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a950:	40d8      	lsrs	r0, r3
 800a952:	f7fe bd77 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a956:	6813      	ldr	r3, [r2, #0]
 800a958:	4822      	ldr	r0, [pc, #136]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a95a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a95e:	40d8      	lsrs	r0, r3
 800a960:	f7fe bd70 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a964:	6813      	ldr	r3, [r2, #0]
 800a966:	481f      	ldr	r0, [pc, #124]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a968:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a96c:	40d8      	lsrs	r0, r3
 800a96e:	f7fe bd69 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a972:	6813      	ldr	r3, [r2, #0]
 800a974:	481b      	ldr	r0, [pc, #108]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a976:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a97a:	40d8      	lsrs	r0, r3
 800a97c:	f7fe bd62 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a980:	6813      	ldr	r3, [r2, #0]
 800a982:	4818      	ldr	r0, [pc, #96]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a984:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a988:	40d8      	lsrs	r0, r3
 800a98a:	f7fe bd5b 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a98e:	6813      	ldr	r3, [r2, #0]
 800a990:	4814      	ldr	r0, [pc, #80]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a992:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a996:	40d8      	lsrs	r0, r3
 800a998:	f7fe bd54 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a99c:	6813      	ldr	r3, [r2, #0]
 800a99e:	4811      	ldr	r0, [pc, #68]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a9a0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a9a4:	40d8      	lsrs	r0, r3
 800a9a6:	f7fe bd4d 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9aa:	6813      	ldr	r3, [r2, #0]
 800a9ac:	480d      	ldr	r0, [pc, #52]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a9ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a9b2:	40d8      	lsrs	r0, r3
 800a9b4:	f7fe bd46 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9b8:	4b09      	ldr	r3, [pc, #36]	; (800a9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800a9ba:	480a      	ldr	r0, [pc, #40]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a9c2:	40d8      	lsrs	r0, r3
 800a9c4:	f7fe bd3e 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9c8:	6813      	ldr	r3, [r2, #0]
 800a9ca:	4806      	ldr	r0, [pc, #24]	; (800a9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800a9cc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a9d0:	40d8      	lsrs	r0, r3
 800a9d2:	f7fe bd37 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSI_VALUE;
 800a9d6:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800a9da:	f7fe bd33 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800a9de:	bf00      	nop
 800a9e0:	44020c00 	.word	0x44020c00
 800a9e4:	017d7840 	.word	0x017d7840
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9e8:	6813      	ldr	r3, [r2, #0]
 800a9ea:	484a      	ldr	r0, [pc, #296]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800a9ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a9f0:	40d8      	lsrs	r0, r3
 800a9f2:	f7fe bd27 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800a9f6:	6813      	ldr	r3, [r2, #0]
 800a9f8:	4846      	ldr	r0, [pc, #280]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800a9fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a9fe:	40d8      	lsrs	r0, r3
 800aa00:	f7fe bd20 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa04:	6813      	ldr	r3, [r2, #0]
 800aa06:	4843      	ldr	r0, [pc, #268]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800aa08:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aa0c:	40d8      	lsrs	r0, r3
 800aa0e:	f7fe bd19 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa12:	6813      	ldr	r3, [r2, #0]
 800aa14:	483f      	ldr	r0, [pc, #252]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800aa16:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aa1a:	40d8      	lsrs	r0, r3
 800aa1c:	f7fe bd12 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa20:	6813      	ldr	r3, [r2, #0]
 800aa22:	483c      	ldr	r0, [pc, #240]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800aa24:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aa28:	40d8      	lsrs	r0, r3
 800aa2a:	f7fe bd0b 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSE_VALUE;
 800aa2e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800aa32:	f7fe bd07 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa36:	6813      	ldr	r3, [r2, #0]
 800aa38:	4836      	ldr	r0, [pc, #216]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800aa3a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aa3e:	40d8      	lsrs	r0, r3
 800aa40:	f7fe bd00 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800aa44:	6813      	ldr	r3, [r2, #0]
 800aa46:	4833      	ldr	r0, [pc, #204]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800aa48:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800aa4c:	40d8      	lsrs	r0, r3
 800aa4e:	f7fe bcf9 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 800aa52:	4831      	ldr	r0, [pc, #196]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa54:	f7fe bcf6 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa58:	482f      	ldr	r0, [pc, #188]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa5a:	f7fe bcf3 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa5e:	482e      	ldr	r0, [pc, #184]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa60:	f7fe bcf0 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa64:	482c      	ldr	r0, [pc, #176]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa66:	f7fe bced 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa6a:	482b      	ldr	r0, [pc, #172]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa6c:	f7fe bcea 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa70:	4829      	ldr	r0, [pc, #164]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa72:	f7fe bce7 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa76:	4828      	ldr	r0, [pc, #160]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa78:	f7fe bce4 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa7c:	4826      	ldr	r0, [pc, #152]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa7e:	f7fe bce1 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa82:	4825      	ldr	r0, [pc, #148]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa84:	f7fe bcde 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa88:	4823      	ldr	r0, [pc, #140]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa8a:	f7fe bcdb 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa8e:	4822      	ldr	r0, [pc, #136]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa90:	f7fe bcd8 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa94:	4820      	ldr	r0, [pc, #128]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa96:	f7fe bcd5 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aa9a:	481f      	ldr	r0, [pc, #124]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aa9c:	f7fe bcd2 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aaa0:	481d      	ldr	r0, [pc, #116]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aaa2:	f7fe bccf 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSE_VALUE;
 800aaa6:	481b      	ldr	r0, [pc, #108]	; (800ab14 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800aaa8:	f7fe bccc 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 800aaac:	481a      	ldr	r0, [pc, #104]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aaae:	f7fe bcc9 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aab2:	4819      	ldr	r0, [pc, #100]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aab4:	f7fe bcc6 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aab8:	4817      	ldr	r0, [pc, #92]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aaba:	f7fe bcc3 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aabe:	4816      	ldr	r0, [pc, #88]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aac0:	f7fe bcc0 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aac4:	4814      	ldr	r0, [pc, #80]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aac6:	f7fe bcbd 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aaca:	4813      	ldr	r0, [pc, #76]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aacc:	f7fe bcba 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aad0:	4811      	ldr	r0, [pc, #68]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aad2:	f7fe bcb7 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aad6:	4810      	ldr	r0, [pc, #64]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aad8:	f7fe bcb4 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aadc:	480e      	ldr	r0, [pc, #56]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aade:	f7fe bcb1 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aae2:	480d      	ldr	r0, [pc, #52]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aae4:	f7fe bcae 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aae8:	480b      	ldr	r0, [pc, #44]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aaea:	f7fe bcab 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aaee:	480a      	ldr	r0, [pc, #40]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aaf0:	f7fe bca8 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aaf4:	4808      	ldr	r0, [pc, #32]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aaf6:	f7fe bca5 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800aafa:	4807      	ldr	r0, [pc, #28]	; (800ab18 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800aafc:	f7fe bca2 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800ab00:	2000      	movs	r0, #0
 800ab02:	f7fe bc9f 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800ab06:	2000      	movs	r0, #0
 800ab08:	f7fe bc9c 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f7fe bc99 	b.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800ab12:	bf00      	nop
 800ab14:	017d7840 	.word	0x017d7840
 800ab18:	003d0900 	.word	0x003d0900

0800ab1c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800ab1c:	6803      	ldr	r3, [r0, #0]
 800ab1e:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	f042 0208 	orr.w	r2, r2, #8
 800ab26:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ab28:	699a      	ldr	r2, [r3, #24]
 800ab2a:	f042 0210 	orr.w	r2, r2, #16
 800ab2e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab30:	681a      	ldr	r2, [r3, #0]
 800ab32:	f022 0201 	bic.w	r2, r2, #1
 800ab36:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ab38:	691a      	ldr	r2, [r3, #16]
 800ab3a:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 800ab3e:	f022 0203 	bic.w	r2, r2, #3
 800ab42:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ab44:	689a      	ldr	r2, [r3, #8]
 800ab46:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ab4a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab4c:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 800ab50:	2a04      	cmp	r2, #4
 800ab52:	d001      	beq.n	800ab58 <SPI_CloseTransfer+0x3c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ab54:	068a      	lsls	r2, r1, #26
 800ab56:	d431      	bmi.n	800abbc <SPI_CloseTransfer+0xa0>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ab58:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 800ab5c:	2a03      	cmp	r2, #3
 800ab5e:	d00f      	beq.n	800ab80 <SPI_CloseTransfer+0x64>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ab60:	064a      	lsls	r2, r1, #25
 800ab62:	d509      	bpl.n	800ab78 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ab64:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800ab68:	f042 0204 	orr.w	r2, r2, #4
 800ab6c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab70:	699a      	ldr	r2, [r3, #24]
 800ab72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab76:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ab78:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800ab7a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800ab7e:	d028      	beq.n	800abd2 <SPI_CloseTransfer+0xb6>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ab80:	058a      	lsls	r2, r1, #22
 800ab82:	d509      	bpl.n	800ab98 <SPI_CloseTransfer+0x7c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ab84:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800ab88:	f042 0201 	orr.w	r2, r2, #1
 800ab8c:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ab90:	699a      	ldr	r2, [r3, #24]
 800ab92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab96:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ab98:	05ca      	lsls	r2, r1, #23
 800ab9a:	d509      	bpl.n	800abb0 <SPI_CloseTransfer+0x94>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ab9c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800aba0:	f042 0208 	orr.w	r2, r2, #8
 800aba4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aba8:	699a      	ldr	r2, [r3, #24]
 800abaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abae:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800abb0:	2300      	movs	r3, #0
 800abb2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800abb6:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
}
 800abba:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800abbc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800abc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800abc4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	f042 0220 	orr.w	r2, r2, #32
 800abce:	619a      	str	r2, [r3, #24]
 800abd0:	e7c2      	b.n	800ab58 <SPI_CloseTransfer+0x3c>
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 800abd2:	060a      	lsls	r2, r1, #24
 800abd4:	d5d4      	bpl.n	800ab80 <SPI_CloseTransfer+0x64>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800abd6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800abda:	f042 0202 	orr.w	r2, r2, #2
 800abde:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800abe2:	699a      	ldr	r2, [r3, #24]
 800abe4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800abe8:	619a      	str	r2, [r3, #24]
 800abea:	e7c9      	b.n	800ab80 <SPI_CloseTransfer+0x64>

0800abec <HAL_SPI_Init>:
  if (hspi == NULL)
 800abec:	2800      	cmp	r0, #0
 800abee:	f000 811e 	beq.w	800ae2e <HAL_SPI_Init+0x242>
{
 800abf2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800abf6:	4a9b      	ldr	r2, [pc, #620]	; (800ae64 <HAL_SPI_Init+0x278>)
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800abf8:	6803      	ldr	r3, [r0, #0]
 800abfa:	4604      	mov	r4, r0
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800abfc:	4293      	cmp	r3, r2
 800abfe:	f000 80a5 	beq.w	800ad4c <HAL_SPI_Init+0x160>
 800ac02:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800ac06:	4293      	cmp	r3, r2
 800ac08:	f000 80a0 	beq.w	800ad4c <HAL_SPI_Init+0x160>
 800ac0c:	4a96      	ldr	r2, [pc, #600]	; (800ae68 <HAL_SPI_Init+0x27c>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	f000 809c 	beq.w	800ad4c <HAL_SPI_Init+0x160>
 800ac14:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	f000 8097 	beq.w	800ad4c <HAL_SPI_Init+0x160>
 800ac1e:	4a93      	ldr	r2, [pc, #588]	; (800ae6c <HAL_SPI_Init+0x280>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	f000 8093 	beq.w	800ad4c <HAL_SPI_Init+0x160>
 800ac26:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800ac2a:	4293      	cmp	r3, r2
 800ac2c:	f000 808e 	beq.w	800ad4c <HAL_SPI_Init+0x160>
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ac30:	68c2      	ldr	r2, [r0, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac32:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ac34:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac38:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 800ac3a:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 800ac3c:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ac40:	4d8b      	ldr	r5, [pc, #556]	; (800ae70 <HAL_SPI_Init+0x284>)
 800ac42:	42ab      	cmp	r3, r5
 800ac44:	d010      	beq.n	800ac68 <HAL_SPI_Init+0x7c>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ac46:	4d8b      	ldr	r5, [pc, #556]	; (800ae74 <HAL_SPI_Init+0x288>)
 800ac48:	42ab      	cmp	r3, r5
 800ac4a:	d00d      	beq.n	800ac68 <HAL_SPI_Init+0x7c>
 800ac4c:	4d8a      	ldr	r5, [pc, #552]	; (800ae78 <HAL_SPI_Init+0x28c>)
 800ac4e:	42ab      	cmp	r3, r5
 800ac50:	d00a      	beq.n	800ac68 <HAL_SPI_Init+0x7c>
 800ac52:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 800ac56:	42ab      	cmp	r3, r5
 800ac58:	d006      	beq.n	800ac68 <HAL_SPI_Init+0x7c>
 800ac5a:	4d88      	ldr	r5, [pc, #544]	; (800ae7c <HAL_SPI_Init+0x290>)
 800ac5c:	42ab      	cmp	r3, r5
 800ac5e:	d003      	beq.n	800ac68 <HAL_SPI_Init+0x7c>
 800ac60:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 800ac64:	42ab      	cmp	r3, r5
 800ac66:	d101      	bne.n	800ac6c <HAL_SPI_Init+0x80>
 800ac68:	2910      	cmp	r1, #16
 800ac6a:	d87c      	bhi.n	800ad66 <HAL_SPI_Init+0x17a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac6c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ac6e:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 800ac72:	f000 810d 	beq.w	800ae90 <HAL_SPI_Init+0x2a4>
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 800ac76:	0417      	lsls	r7, r2, #16
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ac78:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
 800ac7c:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 800ac80:	2900      	cmp	r1, #0
 800ac82:	f000 80e5 	beq.w	800ae50 <HAL_SPI_Init+0x264>
  hspi->State = HAL_SPI_STATE_BUSY;
 800ac86:	2102      	movs	r1, #2
 800ac88:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
  __HAL_SPI_DISABLE(hspi);
 800ac8c:	6819      	ldr	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac8e:	f8d4 8018 	ldr.w	r8, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 800ac92:	f021 0101 	bic.w	r1, r1, #1
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ac96:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
 800ac9a:	6865      	ldr	r5, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ac9c:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 800aca0:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aca2:	f000 80c6 	beq.w	800ae32 <HAL_SPI_Init+0x246>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aca6:	f415 0e80 	ands.w	lr, r5, #4194304	; 0x400000
 800acaa:	f000 80cc 	beq.w	800ae46 <HAL_SPI_Init+0x25a>
 800acae:	2a06      	cmp	r2, #6
 800acb0:	f240 80c9 	bls.w	800ae46 <HAL_SPI_Init+0x25a>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800acb4:	6819      	ldr	r1, [r3, #0]
 800acb6:	f421 7980 	bic.w	r9, r1, #256	; 0x100
 800acba:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800acbc:	ea49 0101 	orr.w	r1, r9, r1
 800acc0:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800acc2:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800acc4:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800acc8:	ea48 0801 	orr.w	r8, r8, r1
 800accc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800acce:	ea48 0801 	orr.w	r8, r8, r1
 800acd2:	6921      	ldr	r1, [r4, #16]
 800acd4:	ea48 0801 	orr.w	r8, r8, r1
 800acd8:	6961      	ldr	r1, [r4, #20]
 800acda:	ea48 0801 	orr.w	r8, r8, r1
 800acde:	6a21      	ldr	r1, [r4, #32]
 800ace0:	ea48 0801 	orr.w	r8, r8, r1
 800ace4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ace6:	ea48 0801 	orr.w	r8, r8, r1
 800acea:	68a1      	ldr	r1, [r4, #8]
 800acec:	ea48 0801 	orr.w	r8, r8, r1
 800acf0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800acf2:	ea48 0801 	orr.w	r8, r8, r1
 800acf6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800acf8:	ea48 0801 	orr.w	r8, r8, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800acfc:	69e1      	ldr	r1, [r4, #28]
 800acfe:	ea41 0100 	orr.w	r1, r1, r0
 800ad02:	ea41 0107 	orr.w	r1, r1, r7
 800ad06:	ea42 0201 	orr.w	r2, r2, r1
 800ad0a:	ea42 0206 	orr.w	r2, r2, r6
 800ad0e:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ad10:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800ad12:	ea48 0102 	orr.w	r1, r8, r2
 800ad16:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800ad18:	ea42 0201 	orr.w	r2, r2, r1
 800ad1c:	ea42 0c0c 	orr.w	ip, r2, ip
 800ad20:	ea4c 0205 	orr.w	r2, ip, r5
 800ad24:	60da      	str	r2, [r3, #12]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ad26:	d021      	beq.n	800ad6c <HAL_SPI_Init+0x180>
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ad28:	2d00      	cmp	r5, #0
 800ad2a:	d168      	bne.n	800adfe <HAL_SPI_Init+0x212>
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG);
 800ad2c:	689a      	ldr	r2, [r3, #8]
 800ad2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad32:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ad34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ad36:	f022 0201 	bic.w	r2, r2, #1
 800ad3a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad3c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800ad3e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ad40:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800ad44:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
}
 800ad48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800ad4c:	68e2      	ldr	r2, [r4, #12]
 800ad4e:	2a0f      	cmp	r2, #15
 800ad50:	d809      	bhi.n	800ad66 <HAL_SPI_Init+0x17a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad52:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800ad54:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad58:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 800ad5a:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 800ad5c:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ad60:	2908      	cmp	r1, #8
 800ad62:	f240 808d 	bls.w	800ae80 <HAL_SPI_Init+0x294>
    return HAL_ERROR;
 800ad66:	2001      	movs	r0, #1
}
 800ad68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 800ad6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800ad6e:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	bf0c      	ite	eq
 800ad74:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 800ad78:	f422 4200 	bicne.w	r2, r2, #32768	; 0x8000
 800ad7c:	601a      	str	r2, [r3, #0]
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 800ad7e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800ad80:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	bf0c      	ite	eq
 800ad86:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 800ad8a:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 800ad8e:	601a      	str	r2, [r3, #0]
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 800ad90:	4a34      	ldr	r2, [pc, #208]	; (800ae64 <HAL_SPI_Init+0x278>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d041      	beq.n	800ae1a <HAL_SPI_Init+0x22e>
 800ad96:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800ad9a:	4293      	cmp	r3, r2
 800ad9c:	d03d      	beq.n	800ae1a <HAL_SPI_Init+0x22e>
 800ad9e:	4a32      	ldr	r2, [pc, #200]	; (800ae68 <HAL_SPI_Init+0x27c>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d03a      	beq.n	800ae1a <HAL_SPI_Init+0x22e>
 800ada4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d036      	beq.n	800ae1a <HAL_SPI_Init+0x22e>
 800adac:	4a2f      	ldr	r2, [pc, #188]	; (800ae6c <HAL_SPI_Init+0x280>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d033      	beq.n	800ae1a <HAL_SPI_Init+0x22e>
 800adb2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d02f      	beq.n	800ae1a <HAL_SPI_Init+0x22e>
 800adba:	4a2d      	ldr	r2, [pc, #180]	; (800ae70 <HAL_SPI_Init+0x284>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d00e      	beq.n	800adde <HAL_SPI_Init+0x1f2>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 800adc0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d00a      	beq.n	800adde <HAL_SPI_Init+0x1f2>
 800adc8:	4a2b      	ldr	r2, [pc, #172]	; (800ae78 <HAL_SPI_Init+0x28c>)
 800adca:	4293      	cmp	r3, r2
 800adcc:	d007      	beq.n	800adde <HAL_SPI_Init+0x1f2>
 800adce:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800add2:	4293      	cmp	r3, r2
 800add4:	d003      	beq.n	800adde <HAL_SPI_Init+0x1f2>
 800add6:	4a29      	ldr	r2, [pc, #164]	; (800ae7c <HAL_SPI_Init+0x290>)
 800add8:	4293      	cmp	r3, r2
 800adda:	f040 8086 	bne.w	800aeea <HAL_SPI_Init+0x2fe>
 800adde:	f5b7 1ff8 	cmp.w	r7, #2031616	; 0x1f0000
 800ade2:	d01d      	beq.n	800ae20 <HAL_SPI_Init+0x234>
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800ade4:	2201      	movs	r2, #1
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800ade6:	6819      	ldr	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800ade8:	0c3f      	lsrs	r7, r7, #16
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800adea:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800adee:	6019      	str	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800adf0:	3701      	adds	r7, #1
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 800adf2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800adf4:	40ba      	lsls	r2, r7
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 800adf6:	430a      	orrs	r2, r1
 800adf8:	641a      	str	r2, [r3, #64]	; 0x40
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800adfa:	2d00      	cmp	r5, #0
 800adfc:	d096      	beq.n	800ad2c <HAL_SPI_Init+0x140>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800adfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ae00:	f022 0201 	bic.w	r2, r2, #1
 800ae04:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ae06:	f1be 0f00 	cmp.w	lr, #0
 800ae0a:	d097      	beq.n	800ad3c <HAL_SPI_Init+0x150>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ae0c:	68da      	ldr	r2, [r3, #12]
 800ae0e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ae10:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800ae14:	430a      	orrs	r2, r1
 800ae16:	60da      	str	r2, [r3, #12]
 800ae18:	e790      	b.n	800ad3c <HAL_SPI_Init+0x150>
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 800ae1a:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 800ae1e:	d1e1      	bne.n	800ade4 <HAL_SPI_Init+0x1f8>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ae26:	601a      	str	r2, [r3, #0]
      WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 800ae28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ae2a:	641a      	str	r2, [r3, #64]	; 0x40
 800ae2c:	e77c      	b.n	800ad28 <HAL_SPI_Init+0x13c>
    return HAL_ERROR;
 800ae2e:	2001      	movs	r0, #1
}
 800ae30:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae32:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800ae36:	d04e      	beq.n	800aed6 <HAL_SPI_Init+0x2ea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae38:	2d00      	cmp	r5, #0
 800ae3a:	f47f af34 	bne.w	800aca6 <HAL_SPI_Init+0xba>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ae3e:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 800ae42:	d04d      	beq.n	800aee0 <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ae44:	46ae      	mov	lr, r5
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae46:	6819      	ldr	r1, [r3, #0]
 800ae48:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800ae4c:	6019      	str	r1, [r3, #0]
 800ae4e:	e738      	b.n	800acc2 <HAL_SPI_Init+0xd6>
    HAL_SPI_MspInit(hspi);
 800ae50:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800ae52:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    HAL_SPI_MspInit(hspi);
 800ae56:	f7f6 fa1b 	bl	8001290 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800ae5a:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ae5c:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ae5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae60:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ae62:	e710      	b.n	800ac86 <HAL_SPI_Init+0x9a>
 800ae64:	40014c00 	.word	0x40014c00
 800ae68:	44002000 	.word	0x44002000
 800ae6c:	40015000 	.word	0x40015000
 800ae70:	40013000 	.word	0x40013000
 800ae74:	50013000 	.word	0x50013000
 800ae78:	40003800 	.word	0x40003800
 800ae7c:	40003c00 	.word	0x40003c00
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae80:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ae82:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 800ae86:	f47f aef6 	bne.w	800ac76 <HAL_SPI_Init+0x8a>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 800ae8a:	491b      	ldr	r1, [pc, #108]	; (800aef8 <HAL_SPI_Init+0x30c>)
 800ae8c:	428b      	cmp	r3, r1
 800ae8e:	d01a      	beq.n	800aec6 <HAL_SPI_Init+0x2da>
 800ae90:	491a      	ldr	r1, [pc, #104]	; (800aefc <HAL_SPI_Init+0x310>)
 800ae92:	428b      	cmp	r3, r1
 800ae94:	d017      	beq.n	800aec6 <HAL_SPI_Init+0x2da>
 800ae96:	491a      	ldr	r1, [pc, #104]	; (800af00 <HAL_SPI_Init+0x314>)
 800ae98:	428b      	cmp	r3, r1
 800ae9a:	d014      	beq.n	800aec6 <HAL_SPI_Init+0x2da>
 800ae9c:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 800aea0:	428b      	cmp	r3, r1
 800aea2:	d010      	beq.n	800aec6 <HAL_SPI_Init+0x2da>
 800aea4:	4917      	ldr	r1, [pc, #92]	; (800af04 <HAL_SPI_Init+0x318>)
 800aea6:	428b      	cmp	r3, r1
 800aea8:	d00d      	beq.n	800aec6 <HAL_SPI_Init+0x2da>
 800aeaa:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 800aeae:	428b      	cmp	r3, r1
 800aeb0:	d009      	beq.n	800aec6 <HAL_SPI_Init+0x2da>
 800aeb2:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800aeb4:	b907      	cbnz	r7, 800aeb8 <HAL_SPI_Init+0x2cc>
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 800aeb6:	0417      	lsls	r7, r2, #16
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 800aeb8:	ebb2 4f17 	cmp.w	r2, r7, lsr #16
 800aebc:	f63f af53 	bhi.w	800ad66 <HAL_SPI_Init+0x17a>
 800aec0:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 800aec4:	e6d8      	b.n	800ac78 <HAL_SPI_Init+0x8c>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 800aec6:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800aec8:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 800aecc:	f63f af4b 	bhi.w	800ad66 <HAL_SPI_Init+0x17a>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800aed0:	2f00      	cmp	r7, #0
 800aed2:	d1f1      	bne.n	800aeb8 <HAL_SPI_Init+0x2cc>
 800aed4:	e7ef      	b.n	800aeb6 <HAL_SPI_Init+0x2ca>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aed6:	f1bc 0f00 	cmp.w	ip, #0
 800aeda:	d001      	beq.n	800aee0 <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aedc:	46ae      	mov	lr, r5
 800aede:	e6e6      	b.n	800acae <HAL_SPI_Init+0xc2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aee0:	6819      	ldr	r1, [r3, #0]
 800aee2:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800aee6:	6019      	str	r1, [r3, #0]
 800aee8:	e6dd      	b.n	800aca6 <HAL_SPI_Init+0xba>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 800aeea:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800aeee:	4293      	cmp	r3, r2
 800aef0:	f43f af75 	beq.w	800adde <HAL_SPI_Init+0x1f2>
 800aef4:	e776      	b.n	800ade4 <HAL_SPI_Init+0x1f8>
 800aef6:	bf00      	nop
 800aef8:	40014c00 	.word	0x40014c00
 800aefc:	50014c00 	.word	0x50014c00
 800af00:	44002000 	.word	0x44002000
 800af04:	40015000 	.word	0x40015000

0800af08 <HAL_SPI_Transmit>:
{
 800af08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af0c:	4604      	mov	r4, r0
 800af0e:	4690      	mov	r8, r2
 800af10:	4689      	mov	r9, r1
 800af12:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800af14:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 800af16:	f7f9 fbf7 	bl	8004708 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800af1a:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 800af1e:	2a01      	cmp	r2, #1
 800af20:	d172      	bne.n	800b008 <HAL_SPI_Transmit+0x100>
  if ((pData == NULL) || (Size == 0UL))
 800af22:	b2d3      	uxtb	r3, r2
 800af24:	f1b9 0f00 	cmp.w	r9, #0
 800af28:	d06f      	beq.n	800b00a <HAL_SPI_Transmit+0x102>
 800af2a:	f1b8 0f00 	cmp.w	r8, #0
 800af2e:	d06c      	beq.n	800b00a <HAL_SPI_Transmit+0x102>
  __HAL_LOCK(hspi);
 800af30:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 800af34:	2a01      	cmp	r2, #1
 800af36:	d067      	beq.n	800b008 <HAL_SPI_Transmit+0x100>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af38:	2203      	movs	r2, #3
  __HAL_LOCK(hspi);
 800af3a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af3e:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800af40:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
  hspi->pRxBuffPtr  = NULL;
 800af44:	66e3      	str	r3, [r4, #108]	; 0x6c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800af46:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800af4a:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  hspi->TxXferCount = Size;
 800af4e:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800af52:	67e3      	str	r3, [r4, #124]	; 0x7c
  hspi->RxXferCount = (uint16_t) 0UL;
 800af54:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
  hspi->RxISR       = NULL;
 800af58:	67a3      	str	r3, [r4, #120]	; 0x78
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af5a:	68a3      	ldr	r3, [r4, #8]
 800af5c:	4606      	mov	r6, r0
 800af5e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    SPI_1LINE_TX(hspi);
 800af62:	6821      	ldr	r1, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800af64:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800af68:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af6c:	f000 8121 	beq.w	800b1b2 <HAL_SPI_Transmit+0x2aa>
    SPI_2LINES_TX(hspi);
 800af70:	68cb      	ldr	r3, [r1, #12]
 800af72:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800af76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af7a:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800af7c:	684b      	ldr	r3, [r1, #4]
 800af7e:	0c1b      	lsrs	r3, r3, #16
 800af80:	041b      	lsls	r3, r3, #16
 800af82:	ea43 0308 	orr.w	r3, r3, r8
 800af86:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800af88:	680b      	ldr	r3, [r1, #0]
 800af8a:	f043 0301 	orr.w	r3, r3, #1
 800af8e:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af90:	6863      	ldr	r3, [r4, #4]
 800af92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af96:	d103      	bne.n	800afa0 <HAL_SPI_Transmit+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af98:	680b      	ldr	r3, [r1, #0]
 800af9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af9e:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800afa0:	68e3      	ldr	r3, [r4, #12]
 800afa2:	2b0f      	cmp	r3, #15
 800afa4:	f200 808f 	bhi.w	800b0c6 <HAL_SPI_Transmit+0x1be>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800afa8:	2b07      	cmp	r3, #7
 800afaa:	d860      	bhi.n	800b06e <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 800afac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	b383      	cbz	r3, 800b016 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800afb4:	694b      	ldr	r3, [r1, #20]
 800afb6:	0798      	lsls	r0, r3, #30
 800afb8:	d51b      	bpl.n	800aff2 <HAL_SPI_Transmit+0xea>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800afba:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	2b03      	cmp	r3, #3
 800afc2:	f240 80ba 	bls.w	800b13a <HAL_SPI_Transmit+0x232>
 800afc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800afc8:	2b40      	cmp	r3, #64	; 0x40
 800afca:	f240 80b6 	bls.w	800b13a <HAL_SPI_Transmit+0x232>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800afce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afd4:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800afd6:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800afd8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800afdc:	3b04      	subs	r3, #4
 800afde:	b29b      	uxth	r3, r3
 800afe0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 800afe4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800afe8:	b29b      	uxth	r3, r3
 800afea:	b1a3      	cbz	r3, 800b016 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800afec:	694b      	ldr	r3, [r1, #20]
 800afee:	0798      	lsls	r0, r3, #30
 800aff0:	d4e3      	bmi.n	800afba <HAL_SPI_Transmit+0xb2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aff2:	f7f9 fb89 	bl	8004708 <HAL_GetTick>
 800aff6:	1b80      	subs	r0, r0, r6
 800aff8:	42a8      	cmp	r0, r5
 800affa:	f0c0 80d6 	bcc.w	800b1aa <HAL_SPI_Transmit+0x2a2>
 800affe:	1c69      	adds	r1, r5, #1
 800b000:	f040 80bf 	bne.w	800b182 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b004:	6821      	ldr	r1, [r4, #0]
 800b006:	e7d1      	b.n	800afac <HAL_SPI_Transmit+0xa4>
    return HAL_BUSY;
 800b008:	2302      	movs	r3, #2
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b010:	1c6a      	adds	r2, r5, #1
 800b012:	d10a      	bne.n	800b02a <HAL_SPI_Transmit+0x122>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b014:	6821      	ldr	r1, [r4, #0]
 800b016:	694b      	ldr	r3, [r1, #20]
 800b018:	071b      	lsls	r3, r3, #28
 800b01a:	d40c      	bmi.n	800b036 <HAL_SPI_Transmit+0x12e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b01c:	f7f9 fb74 	bl	8004708 <HAL_GetTick>
 800b020:	1b80      	subs	r0, r0, r6
 800b022:	4285      	cmp	r5, r0
 800b024:	d9f4      	bls.n	800b010 <HAL_SPI_Transmit+0x108>
 800b026:	2d00      	cmp	r5, #0
 800b028:	d1f4      	bne.n	800b014 <HAL_SPI_Transmit+0x10c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b02a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800b02e:	f043 0320 	orr.w	r3, r3, #32
 800b032:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  SPI_CloseTransfer(hspi);
 800b036:	4620      	mov	r0, r4
 800b038:	f7ff fd70 	bl	800ab1c <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800b03c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 800b03e:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 800b040:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b044:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  __HAL_UNLOCK(hspi);
 800b048:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
    return HAL_BUSY;
 800b04c:	1a9b      	subs	r3, r3, r2
 800b04e:	bf18      	it	ne
 800b050:	2301      	movne	r3, #1
}
 800b052:	4618      	mov	r0, r3
 800b054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b058:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b05a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800b05e:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b060:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 800b062:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b066:	3b01      	subs	r3, #1
 800b068:	b29b      	uxth	r3, r3
 800b06a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 800b06e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b072:	b29b      	uxth	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	d0ce      	beq.n	800b016 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b078:	694b      	ldr	r3, [r1, #20]
 800b07a:	079a      	lsls	r2, r3, #30
 800b07c:	d51a      	bpl.n	800b0b4 <HAL_SPI_Transmit+0x1ac>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b07e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b082:	b29b      	uxth	r3, r3
 800b084:	2b01      	cmp	r3, #1
 800b086:	d9e7      	bls.n	800b058 <HAL_SPI_Transmit+0x150>
 800b088:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d0e4      	beq.n	800b058 <HAL_SPI_Transmit+0x150>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b08e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b090:	f853 2b04 	ldr.w	r2, [r3], #4
 800b094:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800b096:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b098:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b09c:	3b02      	subs	r3, #2
 800b09e:	b29b      	uxth	r3, r3
 800b0a0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 800b0a4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0b3      	beq.n	800b016 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b0ae:	694b      	ldr	r3, [r1, #20]
 800b0b0:	079a      	lsls	r2, r3, #30
 800b0b2:	d4e4      	bmi.n	800b07e <HAL_SPI_Transmit+0x176>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0b4:	f7f9 fb28 	bl	8004708 <HAL_GetTick>
 800b0b8:	1b80      	subs	r0, r0, r6
 800b0ba:	42a8      	cmp	r0, r5
 800b0bc:	d372      	bcc.n	800b1a4 <HAL_SPI_Transmit+0x29c>
 800b0be:	1c6b      	adds	r3, r5, #1
 800b0c0:	d15f      	bne.n	800b182 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b0c2:	6821      	ldr	r1, [r4, #0]
 800b0c4:	e7d3      	b.n	800b06e <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800b0c6:	4b3d      	ldr	r3, [pc, #244]	; (800b1bc <HAL_SPI_Transmit+0x2b4>)
 800b0c8:	4299      	cmp	r1, r3
 800b0ca:	d011      	beq.n	800b0f0 <HAL_SPI_Transmit+0x1e8>
 800b0cc:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800b0d0:	4299      	cmp	r1, r3
 800b0d2:	d00d      	beq.n	800b0f0 <HAL_SPI_Transmit+0x1e8>
 800b0d4:	4b3a      	ldr	r3, [pc, #232]	; (800b1c0 <HAL_SPI_Transmit+0x2b8>)
 800b0d6:	4299      	cmp	r1, r3
 800b0d8:	d00a      	beq.n	800b0f0 <HAL_SPI_Transmit+0x1e8>
 800b0da:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800b0de:	4299      	cmp	r1, r3
 800b0e0:	d006      	beq.n	800b0f0 <HAL_SPI_Transmit+0x1e8>
 800b0e2:	4b38      	ldr	r3, [pc, #224]	; (800b1c4 <HAL_SPI_Transmit+0x2bc>)
 800b0e4:	4299      	cmp	r1, r3
 800b0e6:	d003      	beq.n	800b0f0 <HAL_SPI_Transmit+0x1e8>
 800b0e8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800b0ec:	4299      	cmp	r1, r3
 800b0ee:	d1be      	bne.n	800b06e <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 800b0f0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d08d      	beq.n	800b016 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b0fa:	694b      	ldr	r3, [r1, #20]
 800b0fc:	0798      	lsls	r0, r3, #30
 800b0fe:	d513      	bpl.n	800b128 <HAL_SPI_Transmit+0x220>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800b100:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b102:	f852 3b04 	ldr.w	r3, [r2], #4
 800b106:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 800b108:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800b10c:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->TxXferCount--;
 800b10e:	3b01      	subs	r3, #1
 800b110:	b29b      	uxth	r3, r3
 800b112:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 800b116:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f43f af7a 	beq.w	800b016 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800b122:	694b      	ldr	r3, [r1, #20]
 800b124:	0798      	lsls	r0, r3, #30
 800b126:	d4eb      	bmi.n	800b100 <HAL_SPI_Transmit+0x1f8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b128:	f7f9 faee 	bl	8004708 <HAL_GetTick>
 800b12c:	1b80      	subs	r0, r0, r6
 800b12e:	42a8      	cmp	r0, r5
 800b130:	d325      	bcc.n	800b17e <HAL_SPI_Transmit+0x276>
 800b132:	1c69      	adds	r1, r5, #1
 800b134:	d125      	bne.n	800b182 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b136:	6821      	ldr	r1, [r4, #0]
 800b138:	e7da      	b.n	800b0f0 <HAL_SPI_Transmit+0x1e8>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800b13a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b13e:	b29b      	uxth	r3, r3
 800b140:	2b01      	cmp	r3, #1
 800b142:	d90d      	bls.n	800b160 <HAL_SPI_Transmit+0x258>
 800b144:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b146:	b15b      	cbz	r3, 800b160 <HAL_SPI_Transmit+0x258>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800b148:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b14a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800b14e:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b150:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800b152:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b156:	3b02      	subs	r3, #2
 800b158:	b29b      	uxth	r3, r3
 800b15a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b15e:	e725      	b.n	800afac <HAL_SPI_Transmit+0xa4>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800b160:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b168:	6e63      	ldr	r3, [r4, #100]	; 0x64
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b16a:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800b16c:	3301      	adds	r3, #1
 800b16e:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 800b170:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b174:	3b01      	subs	r3, #1
 800b176:	b29b      	uxth	r3, r3
 800b178:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800b17c:	e716      	b.n	800afac <HAL_SPI_Transmit+0xa4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b17e:	2d00      	cmp	r5, #0
 800b180:	d1d9      	bne.n	800b136 <HAL_SPI_Transmit+0x22e>
          SPI_CloseTransfer(hspi);
 800b182:	4620      	mov	r0, r4
 800b184:	f7ff fcca 	bl	800ab1c <SPI_CloseTransfer>
          hspi->State = HAL_SPI_STATE_READY;
 800b188:	2401      	movs	r4, #1
          __HAL_UNLOCK(hspi);
 800b18a:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b18c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
          return HAL_TIMEOUT;
 800b190:	2303      	movs	r3, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800b192:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b196:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
          __HAL_UNLOCK(hspi);
 800b19a:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
          hspi->State = HAL_SPI_STATE_READY;
 800b19e:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
          return HAL_TIMEOUT;
 800b1a2:	e732      	b.n	800b00a <HAL_SPI_Transmit+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1a4:	2d00      	cmp	r5, #0
 800b1a6:	d18c      	bne.n	800b0c2 <HAL_SPI_Transmit+0x1ba>
 800b1a8:	e7eb      	b.n	800b182 <HAL_SPI_Transmit+0x27a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1aa:	2d00      	cmp	r5, #0
 800b1ac:	f47f af2a 	bne.w	800b004 <HAL_SPI_Transmit+0xfc>
 800b1b0:	e7e7      	b.n	800b182 <HAL_SPI_Transmit+0x27a>
    SPI_1LINE_TX(hspi);
 800b1b2:	680b      	ldr	r3, [r1, #0]
 800b1b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1b8:	600b      	str	r3, [r1, #0]
 800b1ba:	e6df      	b.n	800af7c <HAL_SPI_Transmit+0x74>
 800b1bc:	40013000 	.word	0x40013000
 800b1c0:	40003800 	.word	0x40003800
 800b1c4:	40003c00 	.word	0x40003c00

0800b1c8 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop

0800b1cc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d14b      	bne.n	800b26c <HAL_TIM_Base_Start_IT+0xa0>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1d4:	2202      	movs	r2, #2

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1d6:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b1d8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1dc:	68da      	ldr	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1de:	4925      	ldr	r1, [pc, #148]	; (800b274 <HAL_TIM_Base_Start_IT+0xa8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1e0:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1e4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1e6:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1e8:	d032      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b1ea:	4a23      	ldr	r2, [pc, #140]	; (800b278 <HAL_TIM_Base_Start_IT+0xac>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d02f      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b1f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1f4:	d02c      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b1f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b1fa:	d029      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b1fc:	4a1f      	ldr	r2, [pc, #124]	; (800b27c <HAL_TIM_Base_Start_IT+0xb0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d026      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b202:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b206:	4293      	cmp	r3, r2
 800b208:	d022      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b20a:	4a1d      	ldr	r2, [pc, #116]	; (800b280 <HAL_TIM_Base_Start_IT+0xb4>)
 800b20c:	4293      	cmp	r3, r2
 800b20e:	d01f      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b210:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b214:	4293      	cmp	r3, r2
 800b216:	d01b      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b218:	4a1a      	ldr	r2, [pc, #104]	; (800b284 <HAL_TIM_Base_Start_IT+0xb8>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d018      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b21e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b222:	4293      	cmp	r3, r2
 800b224:	d014      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b226:	4a18      	ldr	r2, [pc, #96]	; (800b288 <HAL_TIM_Base_Start_IT+0xbc>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d011      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b22c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b230:	4293      	cmp	r3, r2
 800b232:	d00d      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b234:	4a15      	ldr	r2, [pc, #84]	; (800b28c <HAL_TIM_Base_Start_IT+0xc0>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d00a      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b23a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b23e:	4293      	cmp	r3, r2
 800b240:	d006      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b242:	4a13      	ldr	r2, [pc, #76]	; (800b290 <HAL_TIM_Base_Start_IT+0xc4>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d003      	beq.n	800b250 <HAL_TIM_Base_Start_IT+0x84>
 800b248:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d107      	bne.n	800b260 <HAL_TIM_Base_Start_IT+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b250:	6899      	ldr	r1, [r3, #8]
 800b252:	4a10      	ldr	r2, [pc, #64]	; (800b294 <HAL_TIM_Base_Start_IT+0xc8>)
 800b254:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b256:	2a06      	cmp	r2, #6
 800b258:	d00a      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0xa4>
 800b25a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800b25e:	d007      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0xa4>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b260:	681a      	ldr	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b262:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800b264:	f042 0201 	orr.w	r2, r2, #1
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	4770      	bx	lr
    return HAL_ERROR;
 800b26c:	2001      	movs	r0, #1
 800b26e:	4770      	bx	lr
  return HAL_OK;
 800b270:	2000      	movs	r0, #0
}
 800b272:	4770      	bx	lr
 800b274:	40012c00 	.word	0x40012c00
 800b278:	50012c00 	.word	0x50012c00
 800b27c:	40000400 	.word	0x40000400
 800b280:	40000800 	.word	0x40000800
 800b284:	40000c00 	.word	0x40000c00
 800b288:	40013400 	.word	0x40013400
 800b28c:	40001800 	.word	0x40001800
 800b290:	40014000 	.word	0x40014000
 800b294:	00010007 	.word	0x00010007

0800b298 <HAL_TIM_OC_DelayElapsedCallback>:
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop

0800b29c <HAL_TIM_IC_CaptureCallback>:
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop

0800b2a0 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop

0800b2a4 <HAL_TIM_TriggerCallback>:
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop

0800b2a8 <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 800b2a8:	6803      	ldr	r3, [r0, #0]
{
 800b2aa:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800b2ac:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b2ae:	691c      	ldr	r4, [r3, #16]
{
 800b2b0:	4605      	mov	r5, r0

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b2b2:	07a2      	lsls	r2, r4, #30
 800b2b4:	d501      	bpl.n	800b2ba <HAL_TIM_IRQHandler+0x12>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b2b6:	07b1      	lsls	r1, r6, #30
 800b2b8:	d46c      	bmi.n	800b394 <HAL_TIM_IRQHandler+0xec>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b2ba:	0763      	lsls	r3, r4, #29
 800b2bc:	d501      	bpl.n	800b2c2 <HAL_TIM_IRQHandler+0x1a>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b2be:	0770      	lsls	r0, r6, #29
 800b2c0:	d455      	bmi.n	800b36e <HAL_TIM_IRQHandler+0xc6>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b2c2:	0721      	lsls	r1, r4, #28
 800b2c4:	d501      	bpl.n	800b2ca <HAL_TIM_IRQHandler+0x22>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b2c6:	0732      	lsls	r2, r6, #28
 800b2c8:	d43e      	bmi.n	800b348 <HAL_TIM_IRQHandler+0xa0>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b2ca:	06e0      	lsls	r0, r4, #27
 800b2cc:	d501      	bpl.n	800b2d2 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b2ce:	06f1      	lsls	r1, r6, #27
 800b2d0:	d426      	bmi.n	800b320 <HAL_TIM_IRQHandler+0x78>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b2d2:	07e2      	lsls	r2, r4, #31
 800b2d4:	d501      	bpl.n	800b2da <HAL_TIM_IRQHandler+0x32>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b2d6:	07f3      	lsls	r3, r6, #31
 800b2d8:	d47a      	bmi.n	800b3d0 <HAL_TIM_IRQHandler+0x128>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b2da:	f414 5f02 	tst.w	r4, #8320	; 0x2080
 800b2de:	d069      	beq.n	800b3b4 <HAL_TIM_IRQHandler+0x10c>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b2e0:	0630      	lsls	r0, r6, #24
 800b2e2:	d47d      	bmi.n	800b3e0 <HAL_TIM_IRQHandler+0x138>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b2e4:	0660      	lsls	r0, r4, #25
 800b2e6:	d502      	bpl.n	800b2ee <HAL_TIM_IRQHandler+0x46>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b2e8:	0671      	lsls	r1, r6, #25
 800b2ea:	f100 808b 	bmi.w	800b404 <HAL_TIM_IRQHandler+0x15c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b2ee:	06a2      	lsls	r2, r4, #26
 800b2f0:	d502      	bpl.n	800b2f8 <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b2f2:	06b3      	lsls	r3, r6, #26
 800b2f4:	f100 808e 	bmi.w	800b414 <HAL_TIM_IRQHandler+0x16c>
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b2f8:	02e0      	lsls	r0, r4, #11
 800b2fa:	d502      	bpl.n	800b302 <HAL_TIM_IRQHandler+0x5a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b2fc:	02f1      	lsls	r1, r6, #11
 800b2fe:	f100 8091 	bmi.w	800b424 <HAL_TIM_IRQHandler+0x17c>
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b302:	02a2      	lsls	r2, r4, #10
 800b304:	d502      	bpl.n	800b30c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b306:	02b3      	lsls	r3, r6, #10
 800b308:	f100 8094 	bmi.w	800b434 <HAL_TIM_IRQHandler+0x18c>
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b30c:	0260      	lsls	r0, r4, #9
 800b30e:	d502      	bpl.n	800b316 <HAL_TIM_IRQHandler+0x6e>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b310:	0271      	lsls	r1, r6, #9
 800b312:	f100 8097 	bmi.w	800b444 <HAL_TIM_IRQHandler+0x19c>
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b316:	0222      	lsls	r2, r4, #8
 800b318:	d501      	bpl.n	800b31e <HAL_TIM_IRQHandler+0x76>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b31a:	0233      	lsls	r3, r6, #8
 800b31c:	d44f      	bmi.n	800b3be <HAL_TIM_IRQHandler+0x116>
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b31e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b320:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b324:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b326:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800b328:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b32a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b32c:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b32e:	69db      	ldr	r3, [r3, #28]
 800b330:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b334:	f040 8097 	bne.w	800b466 <HAL_TIM_IRQHandler+0x1be>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b338:	f7ff ffae 	bl	800b298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b33c:	4628      	mov	r0, r5
 800b33e:	f7ff ffaf 	bl	800b2a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b342:	2300      	movs	r3, #0
 800b344:	772b      	strb	r3, [r5, #28]
 800b346:	e7c4      	b.n	800b2d2 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b348:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b34c:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b34e:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800b350:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b352:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b354:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b356:	69db      	ldr	r3, [r3, #28]
 800b358:	079b      	lsls	r3, r3, #30
 800b35a:	f040 8081 	bne.w	800b460 <HAL_TIM_IRQHandler+0x1b8>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b35e:	f7ff ff9b 	bl	800b298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b362:	4628      	mov	r0, r5
 800b364:	f7ff ff9c 	bl	800b2a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b368:	2300      	movs	r3, #0
 800b36a:	772b      	strb	r3, [r5, #28]
 800b36c:	e7ad      	b.n	800b2ca <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b36e:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b372:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b374:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800b376:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b378:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b37a:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b37c:	699b      	ldr	r3, [r3, #24]
 800b37e:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b382:	d16a      	bne.n	800b45a <HAL_TIM_IRQHandler+0x1b2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b384:	f7ff ff88 	bl	800b298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b388:	4628      	mov	r0, r5
 800b38a:	f7ff ff89 	bl	800b2a0 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b38e:	2300      	movs	r3, #0
 800b390:	772b      	strb	r3, [r5, #28]
 800b392:	e796      	b.n	800b2c2 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b394:	f06f 0202 	mvn.w	r2, #2
 800b398:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b39a:	2201      	movs	r2, #1
 800b39c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	079a      	lsls	r2, r3, #30
 800b3a2:	d157      	bne.n	800b454 <HAL_TIM_IRQHandler+0x1ac>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3a4:	f7ff ff78 	bl	800b298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3a8:	4628      	mov	r0, r5
 800b3aa:	f7ff ff79 	bl	800b2a0 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	772b      	strb	r3, [r5, #28]
 800b3b2:	e782      	b.n	800b2ba <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b3b4:	05e2      	lsls	r2, r4, #23
 800b3b6:	d595      	bpl.n	800b2e4 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b3b8:	0633      	lsls	r3, r6, #24
 800b3ba:	d41b      	bmi.n	800b3f4 <HAL_TIM_IRQHandler+0x14c>
 800b3bc:	e792      	b.n	800b2e4 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b3be:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b3c2:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b3c4:	4628      	mov	r0, r5
}
 800b3c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b3ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b3cc:	f000 b94e 	b.w	800b66c <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3d0:	f06f 0201 	mvn.w	r2, #1
 800b3d4:	682b      	ldr	r3, [r5, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3d6:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b3d8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b3da:	f7f6 fecb 	bl	8002174 <HAL_TIM_PeriodElapsedCallback>
 800b3de:	e77c      	b.n	800b2da <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b3e0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800b3e4:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_BreakCallback(htim);
 800b3e6:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b3e8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b3ea:	f000 f935 	bl	800b658 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b3ee:	05e1      	lsls	r1, r4, #23
 800b3f0:	f57f af78 	bpl.w	800b2e4 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b3f4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b3f8:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_Break2Callback(htim);
 800b3fa:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b3fc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b3fe:	f000 f92d 	bl	800b65c <HAL_TIMEx_Break2Callback>
 800b402:	e76f      	b.n	800b2e4 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b408:	682b      	ldr	r3, [r5, #0]
      HAL_TIM_TriggerCallback(htim);
 800b40a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b40c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b40e:	f7ff ff49 	bl	800b2a4 <HAL_TIM_TriggerCallback>
 800b412:	e76c      	b.n	800b2ee <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b414:	f06f 0220 	mvn.w	r2, #32
 800b418:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_CommutCallback(htim);
 800b41a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b41c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800b41e:	f000 f919 	bl	800b654 <HAL_TIMEx_CommutCallback>
 800b422:	e769      	b.n	800b2f8 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b424:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b428:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b42a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b42c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b42e:	f000 f917 	bl	800b660 <HAL_TIMEx_EncoderIndexCallback>
 800b432:	e766      	b.n	800b302 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b434:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b438:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b43a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b43c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b43e:	f000 f911 	bl	800b664 <HAL_TIMEx_DirectionChangeCallback>
 800b442:	e763      	b.n	800b30c <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b444:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b448:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_IndexErrorCallback(htim);
 800b44a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b44c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 800b44e:	f000 f90b 	bl	800b668 <HAL_TIMEx_IndexErrorCallback>
 800b452:	e760      	b.n	800b316 <HAL_TIM_IRQHandler+0x6e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b454:	f7ff ff22 	bl	800b29c <HAL_TIM_IC_CaptureCallback>
 800b458:	e7a9      	b.n	800b3ae <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 800b45a:	f7ff ff1f 	bl	800b29c <HAL_TIM_IC_CaptureCallback>
 800b45e:	e796      	b.n	800b38e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800b460:	f7ff ff1c 	bl	800b29c <HAL_TIM_IC_CaptureCallback>
 800b464:	e780      	b.n	800b368 <HAL_TIM_IRQHandler+0xc0>
        HAL_TIM_IC_CaptureCallback(htim);
 800b466:	f7ff ff19 	bl	800b29c <HAL_TIM_IC_CaptureCallback>
 800b46a:	e76a      	b.n	800b342 <HAL_TIM_IRQHandler+0x9a>

0800b46c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b46c:	4a54      	ldr	r2, [pc, #336]	; (800b5c0 <TIM_Base_SetConfig+0x154>)
{
 800b46e:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b470:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 800b472:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b474:	d059      	beq.n	800b52a <TIM_Base_SetConfig+0xbe>
 800b476:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b47a:	4290      	cmp	r0, r2
 800b47c:	d055      	beq.n	800b52a <TIM_Base_SetConfig+0xbe>
 800b47e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b482:	d070      	beq.n	800b566 <TIM_Base_SetConfig+0xfa>
 800b484:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800b488:	d06d      	beq.n	800b566 <TIM_Base_SetConfig+0xfa>
 800b48a:	4a4e      	ldr	r2, [pc, #312]	; (800b5c4 <TIM_Base_SetConfig+0x158>)
 800b48c:	4290      	cmp	r0, r2
 800b48e:	d06a      	beq.n	800b566 <TIM_Base_SetConfig+0xfa>
 800b490:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b494:	4290      	cmp	r0, r2
 800b496:	d066      	beq.n	800b566 <TIM_Base_SetConfig+0xfa>
 800b498:	4a4b      	ldr	r2, [pc, #300]	; (800b5c8 <TIM_Base_SetConfig+0x15c>)
 800b49a:	4290      	cmp	r0, r2
 800b49c:	d063      	beq.n	800b566 <TIM_Base_SetConfig+0xfa>
 800b49e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b4a2:	4290      	cmp	r0, r2
 800b4a4:	d05f      	beq.n	800b566 <TIM_Base_SetConfig+0xfa>
 800b4a6:	4a49      	ldr	r2, [pc, #292]	; (800b5cc <TIM_Base_SetConfig+0x160>)
 800b4a8:	4290      	cmp	r0, r2
 800b4aa:	d05c      	beq.n	800b566 <TIM_Base_SetConfig+0xfa>
 800b4ac:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b4b0:	4290      	cmp	r0, r2
 800b4b2:	d058      	beq.n	800b566 <TIM_Base_SetConfig+0xfa>
 800b4b4:	4a46      	ldr	r2, [pc, #280]	; (800b5d0 <TIM_Base_SetConfig+0x164>)
 800b4b6:	4290      	cmp	r0, r2
 800b4b8:	d067      	beq.n	800b58a <TIM_Base_SetConfig+0x11e>
 800b4ba:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b4be:	4290      	cmp	r0, r2
 800b4c0:	d063      	beq.n	800b58a <TIM_Base_SetConfig+0x11e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4c2:	4a44      	ldr	r2, [pc, #272]	; (800b5d4 <TIM_Base_SetConfig+0x168>)
 800b4c4:	4290      	cmp	r0, r2
 800b4c6:	d052      	beq.n	800b56e <TIM_Base_SetConfig+0x102>
 800b4c8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b4cc:	4290      	cmp	r0, r2
 800b4ce:	d04e      	beq.n	800b56e <TIM_Base_SetConfig+0x102>
 800b4d0:	4a41      	ldr	r2, [pc, #260]	; (800b5d8 <TIM_Base_SetConfig+0x16c>)
 800b4d2:	4290      	cmp	r0, r2
 800b4d4:	d04b      	beq.n	800b56e <TIM_Base_SetConfig+0x102>
 800b4d6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b4da:	4290      	cmp	r0, r2
 800b4dc:	d047      	beq.n	800b56e <TIM_Base_SetConfig+0x102>
 800b4de:	4a3f      	ldr	r2, [pc, #252]	; (800b5dc <TIM_Base_SetConfig+0x170>)
 800b4e0:	4290      	cmp	r0, r2
 800b4e2:	d044      	beq.n	800b56e <TIM_Base_SetConfig+0x102>
 800b4e4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b4e8:	4290      	cmp	r0, r2
 800b4ea:	d040      	beq.n	800b56e <TIM_Base_SetConfig+0x102>
 800b4ec:	4a3c      	ldr	r2, [pc, #240]	; (800b5e0 <TIM_Base_SetConfig+0x174>)
 800b4ee:	4290      	cmp	r0, r2
 800b4f0:	d050      	beq.n	800b594 <TIM_Base_SetConfig+0x128>
 800b4f2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b4f6:	4290      	cmp	r0, r2
 800b4f8:	d052      	beq.n	800b5a0 <TIM_Base_SetConfig+0x134>
 800b4fa:	4a3a      	ldr	r2, [pc, #232]	; (800b5e4 <TIM_Base_SetConfig+0x178>)
 800b4fc:	4290      	cmp	r0, r2
 800b4fe:	d049      	beq.n	800b594 <TIM_Base_SetConfig+0x128>
 800b500:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b504:	4290      	cmp	r0, r2
 800b506:	d045      	beq.n	800b594 <TIM_Base_SetConfig+0x128>
 800b508:	4a37      	ldr	r2, [pc, #220]	; (800b5e8 <TIM_Base_SetConfig+0x17c>)
 800b50a:	4290      	cmp	r0, r2
 800b50c:	d042      	beq.n	800b594 <TIM_Base_SetConfig+0x128>
 800b50e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800b512:	4290      	cmp	r0, r2
 800b514:	d03e      	beq.n	800b594 <TIM_Base_SetConfig+0x128>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b516:	694d      	ldr	r5, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b518:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b51a:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b51c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b520:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800b522:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b524:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b526:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b528:	e012      	b.n	800b550 <TIM_Base_SetConfig+0xe4>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b52a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 800b52c:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b52e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b532:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800b534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b538:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b53a:	694a      	ldr	r2, [r1, #20]
 800b53c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b540:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800b542:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b544:	688b      	ldr	r3, [r1, #8]
 800b546:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b548:	680b      	ldr	r3, [r1, #0]
 800b54a:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b54c:	690b      	ldr	r3, [r1, #16]
 800b54e:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b550:	2301      	movs	r3, #1
 800b552:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b554:	6903      	ldr	r3, [r0, #16]
 800b556:	07db      	lsls	r3, r3, #31
 800b558:	d503      	bpl.n	800b562 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b55a:	6903      	ldr	r3, [r0, #16]
 800b55c:	f023 0301 	bic.w	r3, r3, #1
 800b560:	6103      	str	r3, [r0, #16]
  }
}
 800b562:	bc30      	pop	{r4, r5}
 800b564:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800b566:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b568:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b56c:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b56e:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b570:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b574:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b576:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b57c:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b57e:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800b580:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800b582:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b584:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b586:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b588:	e7e2      	b.n	800b550 <TIM_Base_SetConfig+0xe4>
    tmpcr1 |= Structure->CounterMode;
 800b58a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b58c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b58e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b592:	e7ce      	b.n	800b532 <TIM_Base_SetConfig+0xc6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b594:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b59a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b59c:	4323      	orrs	r3, r4
 800b59e:	e7cd      	b.n	800b53c <TIM_Base_SetConfig+0xd0>
 800b5a0:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b5a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5a6:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b5a8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b5aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5ae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800b5b0:	4a0e      	ldr	r2, [pc, #56]	; (800b5ec <TIM_Base_SetConfig+0x180>)
 800b5b2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b5b4:	688b      	ldr	r3, [r1, #8]
 800b5b6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b5b8:	680b      	ldr	r3, [r1, #0]
 800b5ba:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b5bc:	e7c6      	b.n	800b54c <TIM_Base_SetConfig+0xe0>
 800b5be:	bf00      	nop
 800b5c0:	40012c00 	.word	0x40012c00
 800b5c4:	40000400 	.word	0x40000400
 800b5c8:	40000800 	.word	0x40000800
 800b5cc:	40000c00 	.word	0x40000c00
 800b5d0:	40013400 	.word	0x40013400
 800b5d4:	40001800 	.word	0x40001800
 800b5d8:	40001c00 	.word	0x40001c00
 800b5dc:	40002000 	.word	0x40002000
 800b5e0:	40014000 	.word	0x40014000
 800b5e4:	40014400 	.word	0x40014400
 800b5e8:	40014800 	.word	0x40014800
 800b5ec:	50014000 	.word	0x50014000

0800b5f0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800b5f0:	b370      	cbz	r0, 800b650 <HAL_TIM_Base_Init+0x60>
{
 800b5f2:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800b5f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b5fe:	b313      	cbz	r3, 800b646 <HAL_TIM_Base_Init+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 800b600:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b602:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800b604:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b608:	f851 0b04 	ldr.w	r0, [r1], #4
 800b60c:	f7ff ff2e 	bl	800b46c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b610:	2301      	movs	r3, #1
 800b612:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b616:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b61a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b61e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b622:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800b626:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b62a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b62e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b636:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800b63a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b63e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800b642:	2000      	movs	r0, #0
}
 800b644:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800b646:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b64a:	f7ff fdbd 	bl	800b1c8 <HAL_TIM_Base_MspInit>
 800b64e:	e7d7      	b.n	800b600 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800b650:	2001      	movs	r0, #1
}
 800b652:	4770      	bx	lr

0800b654 <HAL_TIMEx_CommutCallback>:
 800b654:	4770      	bx	lr
 800b656:	bf00      	nop

0800b658 <HAL_TIMEx_BreakCallback>:
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop

0800b65c <HAL_TIMEx_Break2Callback>:
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop

0800b660 <HAL_TIMEx_EncoderIndexCallback>:
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop

0800b664 <HAL_TIMEx_DirectionChangeCallback>:
 800b664:	4770      	bx	lr
 800b666:	bf00      	nop

0800b668 <HAL_TIMEx_IndexErrorCallback>:
 800b668:	4770      	bx	lr
 800b66a:	bf00      	nop

0800b66c <HAL_TIMEx_TransitionErrorCallback>:
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop

0800b670 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b670:	4b26      	ldr	r3, [pc, #152]	; (800b70c <HAL_InitTick+0x9c>)
{
 800b672:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b674:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
{
 800b678:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b67a:	f042 0210 	orr.w	r2, r2, #16
 800b67e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800b682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
{
 800b686:	4604      	mov	r4, r0
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b688:	f003 0310 	and.w	r3, r3, #16
 800b68c:	9301      	str	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b68e:	4669      	mov	r1, sp
 800b690:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 800b692:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b694:	f7fb fc6e 	bl	8006f74 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800b698:	9b05      	ldr	r3, [sp, #20]
 800b69a:	b9e3      	cbnz	r3, 800b6d6 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800b69c:	f7fb fc0a 	bl	8006eb4 <HAL_RCC_GetPCLK1Freq>
 800b6a0:	4603      	mov	r3, r0
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800b6a2:	2200      	movs	r2, #0
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800b6a4:	2163      	movs	r1, #99	; 0x63
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800b6a6:	481a      	ldr	r0, [pc, #104]	; (800b710 <HAL_InitTick+0xa0>)
 800b6a8:	095b      	lsrs	r3, r3, #5
 800b6aa:	fba0 0303 	umull	r0, r3, r0, r3
  htim6.Instance = TIM6;
 800b6ae:	4d19      	ldr	r5, [pc, #100]	; (800b714 <HAL_InitTick+0xa4>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800b6b0:	09db      	lsrs	r3, r3, #7
 800b6b2:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800b6b4:	606b      	str	r3, [r5, #4]
  htim6.Instance = TIM6;
 800b6b6:	4b18      	ldr	r3, [pc, #96]	; (800b718 <HAL_InitTick+0xa8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim6);
 800b6b8:	4628      	mov	r0, r5
  htim6.Init.ClockDivision = 0;
 800b6ba:	e9c5 1203 	strd	r1, r2, [r5, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b6be:	60aa      	str	r2, [r5, #8]
  htim6.Instance = TIM6;
 800b6c0:	602b      	str	r3, [r5, #0]
  status = HAL_TIM_Base_Init(&htim6);
 800b6c2:	f7ff ff95 	bl	800b5f0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	b148      	cbz	r0, 800b6de <HAL_InitTick+0x6e>
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800b6ca:	2031      	movs	r0, #49	; 0x31
 800b6cc:	f7f9 f872 	bl	80047b4 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
}
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	b008      	add	sp, #32
 800b6d4:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800b6d6:	f7fb fbed 	bl	8006eb4 <HAL_RCC_GetPCLK1Freq>
 800b6da:	0043      	lsls	r3, r0, #1
 800b6dc:	e7e1      	b.n	800b6a2 <HAL_InitTick+0x32>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800b6de:	4628      	mov	r0, r5
 800b6e0:	f7ff fd74 	bl	800b1cc <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800b6e4:	4606      	mov	r6, r0
 800b6e6:	2800      	cmp	r0, #0
 800b6e8:	d1ef      	bne.n	800b6ca <HAL_InitTick+0x5a>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b6ea:	2c0f      	cmp	r4, #15
 800b6ec:	d906      	bls.n	800b6fc <HAL_InitTick+0x8c>
        status = HAL_ERROR;
 800b6ee:	2601      	movs	r6, #1
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800b6f0:	2031      	movs	r0, #49	; 0x31
 800b6f2:	f7f9 f85f 	bl	80047b4 <HAL_NVIC_EnableIRQ>
}
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	b008      	add	sp, #32
 800b6fa:	bd70      	pop	{r4, r5, r6, pc}
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	4621      	mov	r1, r4
 800b700:	2031      	movs	r0, #49	; 0x31
 800b702:	f7f9 f819 	bl	8004738 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800b706:	4b05      	ldr	r3, [pc, #20]	; (800b71c <HAL_InitTick+0xac>)
 800b708:	601c      	str	r4, [r3, #0]
 800b70a:	e7de      	b.n	800b6ca <HAL_InitTick+0x5a>
 800b70c:	44020c00 	.word	0x44020c00
 800b710:	0a7c5ac5 	.word	0x0a7c5ac5
 800b714:	2000a1ac 	.word	0x2000a1ac
 800b718:	40001000 	.word	0x40001000
 800b71c:	200001b0 	.word	0x200001b0

0800b720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b720:	b410      	push	{r4}
 800b722:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b724:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72c:	e842 3100 	strex	r1, r3, [r2]
 800b730:	2900      	cmp	r1, #0
 800b732:	d1f7      	bne.n	800b724 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b734:	4c14      	ldr	r4, [pc, #80]	; (800b788 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b736:	f102 0308 	add.w	r3, r2, #8
 800b73a:	e853 3f00 	ldrex	r3, [r3]
 800b73e:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b740:	f102 0c08 	add.w	ip, r2, #8
 800b744:	e84c 3100 	strex	r1, r3, [ip]
 800b748:	2900      	cmp	r1, #0
 800b74a:	d1f4      	bne.n	800b736 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b74c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d008      	beq.n	800b764 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b752:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800b754:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 800b756:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 800b75a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxISR = NULL;
 800b75e:	6743      	str	r3, [r0, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b760:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800b762:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b764:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b768:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b76c:	e842 3100 	strex	r1, r3, [r2]
 800b770:	2900      	cmp	r1, #0
 800b772:	d0ee      	beq.n	800b752 <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b774:	e852 3f00 	ldrex	r3, [r2]
 800b778:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b77c:	e842 3100 	strex	r1, r3, [r2]
 800b780:	2900      	cmp	r1, #0
 800b782:	d1ef      	bne.n	800b764 <UART_EndRxTransfer+0x44>
 800b784:	e7e5      	b.n	800b752 <UART_EndRxTransfer+0x32>
 800b786:	bf00      	nop
 800b788:	effffffe 	.word	0xeffffffe

0800b78c <HAL_UART_DeInit>:
  if (huart == NULL)
 800b78c:	b1d8      	cbz	r0, 800b7c6 <HAL_UART_DeInit+0x3a>
  huart->gState = HAL_UART_STATE_BUSY;
 800b78e:	2224      	movs	r2, #36	; 0x24
{
 800b790:	b538      	push	{r3, r4, r5, lr}
  huart->Instance->CR1 = 0x0U;
 800b792:	2500      	movs	r5, #0
 800b794:	4604      	mov	r4, r0
  __HAL_UART_DISABLE(huart);
 800b796:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b798:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	f022 0201 	bic.w	r2, r2, #1
 800b7a2:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800b7a4:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800b7a6:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800b7a8:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800b7aa:	f7f6 f839 	bl	8001820 <HAL_UART_MspDeInit>
  __HAL_UNLOCK(huart);
 800b7ae:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7b2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  return HAL_OK;
 800b7b6:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 800b7b8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800b7bc:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7c0:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7c2:	6725      	str	r5, [r4, #112]	; 0x70
}
 800b7c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b7c6:	2001      	movs	r0, #1
}
 800b7c8:	4770      	bx	lr
 800b7ca:	bf00      	nop

0800b7cc <HAL_UART_RxHalfCpltCallback>:
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop

0800b7d0 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b7d0:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
{
 800b7d2:	b510      	push	{r4, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b7d4:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b7d6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b7da:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	0612      	lsls	r2, r2, #24
 800b7e2:	d501      	bpl.n	800b7e8 <UART_DMAError+0x18>
 800b7e4:	2921      	cmp	r1, #33	; 0x21
 800b7e6:	d013      	beq.n	800b810 <UART_DMAError+0x40>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	065b      	lsls	r3, r3, #25
 800b7ec:	d501      	bpl.n	800b7f2 <UART_DMAError+0x22>
 800b7ee:	2c22      	cmp	r4, #34	; 0x22
 800b7f0:	d008      	beq.n	800b804 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b7f2:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800b7f6:	f043 0310 	orr.w	r3, r3, #16
 800b7fa:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b7fe:	f7f6 f8bf 	bl	8001980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b802:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b80a:	f7ff ff89 	bl	800b720 <UART_EndRxTransfer>
 800b80e:	e7f0      	b.n	800b7f2 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800b810:	2200      	movs	r2, #0
 800b812:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b816:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b81a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81e:	e843 2100 	strex	r1, r2, [r3]
 800b822:	2900      	cmp	r1, #0
 800b824:	d1f7      	bne.n	800b816 <UART_DMAError+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b826:	f103 0208 	add.w	r2, r3, #8
 800b82a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b82e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b832:	f103 0c08 	add.w	ip, r3, #8
 800b836:	e84c 2100 	strex	r1, r2, [ip]
 800b83a:	2900      	cmp	r1, #0
 800b83c:	d1f3      	bne.n	800b826 <UART_DMAError+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800b83e:	2220      	movs	r2, #32
 800b840:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 800b844:	e7d0      	b.n	800b7e8 <UART_DMAError+0x18>
 800b846:	bf00      	nop

0800b848 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b848:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800b84a:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b84c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  huart->RxXferCount = 0U;
 800b84e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b852:	f7f6 f895 	bl	8001980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b856:	bd08      	pop	{r3, pc}

0800b858 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b858:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b85c:	6803      	ldr	r3, [r0, #0]
{
 800b85e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b862:	69da      	ldr	r2, [r3, #28]
{
 800b864:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800b866:	ea12 0f0c 	tst.w	r2, ip
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b86a:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b86c:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800b86e:	f000 80d8 	beq.w	800ba22 <HAL_UART_IRQHandler+0x1ca>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b872:	4eae      	ldr	r6, [pc, #696]	; (800bb2c <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b874:	48ae      	ldr	r0, [pc, #696]	; (800bb30 <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b876:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b87a:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b87c:	ea5c 0600 	orrs.w	r6, ip, r0
 800b880:	d16b      	bne.n	800b95a <HAL_UART_IRQHandler+0x102>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b882:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800b884:	2801      	cmp	r0, #1
 800b886:	d01e      	beq.n	800b8c6 <HAL_UART_IRQHandler+0x6e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b888:	02d7      	lsls	r7, r2, #11
 800b88a:	d502      	bpl.n	800b892 <HAL_UART_IRQHandler+0x3a>
 800b88c:	024e      	lsls	r6, r1, #9
 800b88e:	f100 80fe 	bmi.w	800ba8e <HAL_UART_IRQHandler+0x236>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b892:	0610      	lsls	r0, r2, #24
 800b894:	d506      	bpl.n	800b8a4 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b896:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b89a:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b89e:	4301      	orrs	r1, r0
 800b8a0:	f040 80ed 	bne.w	800ba7e <HAL_UART_IRQHandler+0x226>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b8a4:	0657      	lsls	r7, r2, #25
 800b8a6:	d502      	bpl.n	800b8ae <HAL_UART_IRQHandler+0x56>
 800b8a8:	066e      	lsls	r6, r5, #25
 800b8aa:	f100 80cb 	bmi.w	800ba44 <HAL_UART_IRQHandler+0x1ec>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b8ae:	0210      	lsls	r0, r2, #8
 800b8b0:	d502      	bpl.n	800b8b8 <HAL_UART_IRQHandler+0x60>
 800b8b2:	0069      	lsls	r1, r5, #1
 800b8b4:	f100 80f7 	bmi.w	800baa6 <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b8b8:	01d3      	lsls	r3, r2, #7
 800b8ba:	d502      	bpl.n	800b8c2 <HAL_UART_IRQHandler+0x6a>
 800b8bc:	2d00      	cmp	r5, #0
 800b8be:	f2c0 813d 	blt.w	800bb3c <HAL_UART_IRQHandler+0x2e4>
}
 800b8c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b8c6:	06d6      	lsls	r6, r2, #27
 800b8c8:	d5de      	bpl.n	800b888 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b8ca:	06e8      	lsls	r0, r5, #27
 800b8cc:	d5dc      	bpl.n	800b888 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8ce:	2210      	movs	r2, #16
 800b8d0:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8d2:	689a      	ldr	r2, [r3, #8]
 800b8d4:	0652      	lsls	r2, r2, #25
 800b8d6:	f140 80f2 	bpl.w	800babe <HAL_UART_IRQHandler+0x266>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8da:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800b8de:	6802      	ldr	r2, [r0, #0]
 800b8e0:	6c91      	ldr	r1, [r2, #72]	; 0x48
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8e2:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8e6:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	f000 8131 	beq.w	800bb50 <HAL_UART_IRQHandler+0x2f8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8ee:	428a      	cmp	r2, r1
 800b8f0:	f240 812e 	bls.w	800bb50 <HAL_UART_IRQHandler+0x2f8>
        huart->RxXferCount = nb_remaining_rx_data;
 800b8f4:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800b8f8:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b8fa:	2981      	cmp	r1, #129	; 0x81
 800b8fc:	d023      	beq.n	800b946 <HAL_UART_IRQHandler+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fe:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b902:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b906:	e843 2100 	strex	r1, r2, [r3]
 800b90a:	2900      	cmp	r1, #0
 800b90c:	d1f7      	bne.n	800b8fe <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b90e:	f103 0208 	add.w	r2, r3, #8
 800b912:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b916:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91a:	f103 0508 	add.w	r5, r3, #8
 800b91e:	e845 2100 	strex	r1, r2, [r5]
 800b922:	2900      	cmp	r1, #0
 800b924:	d1f3      	bne.n	800b90e <HAL_UART_IRQHandler+0xb6>
          huart->RxState = HAL_UART_STATE_READY;
 800b926:	2220      	movs	r2, #32
 800b928:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b92c:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b92e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b932:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b936:	e843 2100 	strex	r1, r2, [r3]
 800b93a:	2900      	cmp	r1, #0
 800b93c:	d1f7      	bne.n	800b92e <HAL_UART_IRQHandler+0xd6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b93e:	f7f9 fa69 	bl	8004e14 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b942:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b946:	2302      	movs	r3, #2
 800b948:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b94a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b94e:	4620      	mov	r0, r4
 800b950:	1ad2      	subs	r2, r2, r3
 800b952:	b291      	uxth	r1, r2
 800b954:	f7f5 ffda 	bl	800190c <HAL_UARTEx_RxEventCallback>
 800b958:	e7b3      	b.n	800b8c2 <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b95a:	07d6      	lsls	r6, r2, #31
 800b95c:	461f      	mov	r7, r3
 800b95e:	d509      	bpl.n	800b974 <HAL_UART_IRQHandler+0x11c>
 800b960:	05ee      	lsls	r6, r5, #23
 800b962:	d507      	bpl.n	800b974 <HAL_UART_IRQHandler+0x11c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b964:	2601      	movs	r6, #1
 800b966:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b968:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800b96c:	f046 0601 	orr.w	r6, r6, #1
 800b970:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b974:	0796      	lsls	r6, r2, #30
 800b976:	d575      	bpl.n	800ba64 <HAL_UART_IRQHandler+0x20c>
 800b978:	07ce      	lsls	r6, r1, #31
 800b97a:	d509      	bpl.n	800b990 <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b97c:	2602      	movs	r6, #2
 800b97e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b980:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800b984:	f046 0604 	orr.w	r6, r6, #4
 800b988:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b98c:	0756      	lsls	r6, r2, #29
 800b98e:	d46d      	bmi.n	800ba6c <HAL_UART_IRQHandler+0x214>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b990:	0716      	lsls	r6, r2, #28
 800b992:	d50b      	bpl.n	800b9ac <HAL_UART_IRQHandler+0x154>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b994:	f005 0620 	and.w	r6, r5, #32
 800b998:	4330      	orrs	r0, r6
 800b99a:	d007      	beq.n	800b9ac <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b99c:	2008      	movs	r0, #8
 800b99e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b9a0:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800b9a4:	f040 0008 	orr.w	r0, r0, #8
 800b9a8:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b9ac:	0516      	lsls	r6, r2, #20
 800b9ae:	d50a      	bpl.n	800b9c6 <HAL_UART_IRQHandler+0x16e>
 800b9b0:	0168      	lsls	r0, r5, #5
 800b9b2:	d508      	bpl.n	800b9c6 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b9b8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b9ba:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b9be:	f043 0320 	orr.w	r3, r3, #32
 800b9c2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b9c6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f43f af79 	beq.w	800b8c2 <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b9d0:	0693      	lsls	r3, r2, #26
 800b9d2:	d506      	bpl.n	800b9e2 <HAL_UART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b9d4:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b9d8:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800b9dc:	ea55 0301 	orrs.w	r3, r5, r1
 800b9e0:	d166      	bne.n	800bab0 <HAL_UART_IRQHandler+0x258>
      errorcode = huart->ErrorCode;
 800b9e2:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9e6:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b9e8:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f0:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 800b9f2:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b9f4:	f000 80a7 	beq.w	800bb46 <HAL_UART_IRQHandler+0x2ee>
        UART_EndRxTransfer(huart);
 800b9f8:	f7ff fe92 	bl	800b720 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b9fc:	6823      	ldr	r3, [r4, #0]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	065f      	lsls	r7, r3, #25
 800ba02:	d54c      	bpl.n	800ba9e <HAL_UART_IRQHandler+0x246>
          if (huart->hdmarx != NULL)
 800ba04:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d048      	beq.n	800ba9e <HAL_UART_IRQHandler+0x246>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ba0c:	4b49      	ldr	r3, [pc, #292]	; (800bb34 <HAL_UART_IRQHandler+0x2dc>)
 800ba0e:	66c3      	str	r3, [r0, #108]	; 0x6c
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ba10:	f7f9 fa52 	bl	8004eb8 <HAL_DMA_Abort_IT>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	f43f af54 	beq.w	800b8c2 <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba1a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ba1e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ba20:	e00d      	b.n	800ba3e <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ba22:	0697      	lsls	r7, r2, #26
 800ba24:	f57f af2d 	bpl.w	800b882 <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ba28:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ba2c:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 800ba30:	433e      	orrs	r6, r7
 800ba32:	f43f af26 	beq.w	800b882 <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800ba36:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	f43f af42 	beq.w	800b8c2 <HAL_UART_IRQHandler+0x6a>
}
 800ba3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ba42:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba44:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4c:	e843 2100 	strex	r1, r2, [r3]
 800ba50:	2900      	cmp	r1, #0
 800ba52:	d1f7      	bne.n	800ba44 <HAL_UART_IRQHandler+0x1ec>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba54:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba56:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800ba58:	67a1      	str	r1, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800ba5a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_TxCpltCallback(huart);
 800ba5e:	f7f5 ff1f 	bl	80018a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba62:	e72e      	b.n	800b8c2 <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba64:	0756      	lsls	r6, r2, #29
 800ba66:	d593      	bpl.n	800b990 <HAL_UART_IRQHandler+0x138>
 800ba68:	07ce      	lsls	r6, r1, #31
 800ba6a:	d591      	bpl.n	800b990 <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba6c:	2604      	movs	r6, #4
 800ba6e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba70:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800ba74:	f046 0602 	orr.w	r6, r6, #2
 800ba78:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800ba7c:	e788      	b.n	800b990 <HAL_UART_IRQHandler+0x138>
    if (huart->TxISR != NULL)
 800ba7e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f43f af1e 	beq.w	800b8c2 <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 800ba86:	4620      	mov	r0, r4
}
 800ba88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800ba8c:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800ba92:	4620      	mov	r0, r4
}
 800ba94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba98:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800ba9a:	f000 bbbd 	b.w	800c218 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800ba9e:	4620      	mov	r0, r4
 800baa0:	f7f5 ff6e 	bl	8001980 <HAL_UART_ErrorCallback>
 800baa4:	e70d      	b.n	800b8c2 <HAL_UART_IRQHandler+0x6a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800baa6:	4620      	mov	r0, r4
}
 800baa8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800baac:	f000 bbb8 	b.w	800c220 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 800bab0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d095      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x18a>
          huart->RxISR(huart);
 800bab6:	4620      	mov	r0, r4
 800bab8:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800baba:	6827      	ldr	r7, [r4, #0]
 800babc:	e791      	b.n	800b9e2 <HAL_UART_IRQHandler+0x18a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800babe:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 800bac2:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bac6:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800bac8:	b292      	uxth	r2, r2
 800baca:	2a00      	cmp	r2, #0
 800bacc:	f43f aef9 	beq.w	800b8c2 <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bad0:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800bad4:	1a51      	subs	r1, r2, r1
 800bad6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800bad8:	2900      	cmp	r1, #0
 800bada:	f43f aef2 	beq.w	800b8c2 <HAL_UART_IRQHandler+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bade:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bae2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae6:	e843 2000 	strex	r0, r2, [r3]
 800baea:	2800      	cmp	r0, #0
 800baec:	d1f7      	bne.n	800bade <HAL_UART_IRQHandler+0x286>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800baee:	4d12      	ldr	r5, [pc, #72]	; (800bb38 <HAL_UART_IRQHandler+0x2e0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baf0:	f103 0208 	add.w	r2, r3, #8
 800baf4:	e852 2f00 	ldrex	r2, [r2]
 800baf8:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bafa:	f103 0608 	add.w	r6, r3, #8
 800bafe:	e846 2000 	strex	r0, r2, [r6]
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d1f4      	bne.n	800baf0 <HAL_UART_IRQHandler+0x298>
        huart->RxState = HAL_UART_STATE_READY;
 800bb06:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800bb08:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bb0a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb0e:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb10:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb14:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	e843 2000 	strex	r0, r2, [r3]
 800bb1c:	2800      	cmp	r0, #0
 800bb1e:	d1f7      	bne.n	800bb10 <HAL_UART_IRQHandler+0x2b8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb20:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb22:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800bb24:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800bb26:	f7f5 fef1 	bl	800190c <HAL_UARTEx_RxEventCallback>
 800bb2a:	e6ca      	b.n	800b8c2 <HAL_UART_IRQHandler+0x6a>
 800bb2c:	04000120 	.word	0x04000120
 800bb30:	10000001 	.word	0x10000001
 800bb34:	0800b849 	.word	0x0800b849
 800bb38:	effffffe 	.word	0xeffffffe
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb3c:	4620      	mov	r0, r4
}
 800bb3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb42:	f000 bb6b 	b.w	800c21c <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800bb46:	f7f5 ff1b 	bl	8001980 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb4a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 800bb4e:	e6b8      	b.n	800b8c2 <HAL_UART_IRQHandler+0x6a>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800bb50:	4291      	cmp	r1, r2
 800bb52:	f47f aeb6 	bne.w	800b8c2 <HAL_UART_IRQHandler+0x6a>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800bb56:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800bb58:	2b81      	cmp	r3, #129	; 0x81
 800bb5a:	f47f aeb2 	bne.w	800b8c2 <HAL_UART_IRQHandler+0x6a>
 800bb5e:	e7df      	b.n	800bb20 <HAL_UART_IRQHandler+0x2c8>

0800bb60 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb60:	2201      	movs	r2, #1
{
 800bb62:	b508      	push	{r3, lr}
 800bb64:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb66:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bb68:	6702      	str	r2, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb6a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800bb6c:	2a01      	cmp	r2, #1
 800bb6e:	d112      	bne.n	800bb96 <UART_DMARxHalfCplt+0x36>
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bb70:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb74:	681b      	ldr	r3, [r3, #0]
    huart->RxXferCount = huart->RxXferSize / 2U;
 800bb76:	084a      	lsrs	r2, r1, #1
 800bb78:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bb7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb7e:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800bb80:	4299      	cmp	r1, r3
      huart->RxXferCount = nb_remaining_rx_data;
 800bb82:	bf28      	it	cs
 800bb84:	f8a0 305e 	strhcs.w	r3, [r0, #94]	; 0x5e
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bb88:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800bb8c:	1ac9      	subs	r1, r1, r3
 800bb8e:	b289      	uxth	r1, r1
 800bb90:	f7f5 febc 	bl	800190c <HAL_UARTEx_RxEventCallback>
}
 800bb94:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800bb96:	f7ff fe19 	bl	800b7cc <HAL_UART_RxHalfCpltCallback>
}
 800bb9a:	bd08      	pop	{r3, pc}

0800bb9c <UART_DMAReceiveCplt>:
{
 800bb9c:	b508      	push	{r3, lr}
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800bb9e:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 800bba0:	4684      	mov	ip, r0
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800bba2:	2b81      	cmp	r3, #129	; 0x81
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bba4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800bba6:	d01d      	beq.n	800bbe4 <UART_DMAReceiveCplt+0x48>
    huart->RxXferCount = 0U;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	6802      	ldr	r2, [r0, #0]
 800bbac:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb8:	e842 3100 	strex	r1, r3, [r2]
 800bbbc:	2900      	cmp	r1, #0
 800bbbe:	d1f7      	bne.n	800bbb0 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbc0:	f102 0308 	add.w	r3, r2, #8
 800bbc4:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbc8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbcc:	f102 0e08 	add.w	lr, r2, #8
 800bbd0:	e84e 3100 	strex	r1, r3, [lr]
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	d1f3      	bne.n	800bbc0 <UART_DMAReceiveCplt+0x24>
    huart->RxState = HAL_UART_STATE_READY;
 800bbd8:	2320      	movs	r3, #32
 800bbda:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbde:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d017      	beq.n	800bc14 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbe8:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800bbea:	2a01      	cmp	r2, #1
 800bbec:	d123      	bne.n	800bc36 <UART_DMAReceiveCplt+0x9a>
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bbee:	f8dc 2000 	ldr.w	r2, [ip]
    huart->RxXferCount = 0;
 800bbf2:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bbf6:	6c93      	ldr	r3, [r2, #72]	; 0x48
    if (nb_remaining_rx_data < huart->RxXferSize)
 800bbf8:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800bbfc:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data < huart->RxXferSize)
 800bbfe:	4299      	cmp	r1, r3
      huart->RxXferCount = nb_remaining_rx_data;
 800bc00:	bf88      	it	hi
 800bc02:	f8a0 305e 	strhhi.w	r3, [r0, #94]	; 0x5e
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bc06:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800bc0a:	1ac9      	subs	r1, r1, r3
 800bc0c:	b289      	uxth	r1, r1
 800bc0e:	f7f5 fe7d 	bl	800190c <HAL_UARTEx_RxEventCallback>
}
 800bc12:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc14:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc18:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc1c:	e842 3100 	strex	r1, r3, [r2]
 800bc20:	2900      	cmp	r1, #0
 800bc22:	d0df      	beq.n	800bbe4 <UART_DMAReceiveCplt+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc24:	e852 3f00 	ldrex	r3, [r2]
 800bc28:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc2c:	e842 3100 	strex	r1, r3, [r2]
 800bc30:	2900      	cmp	r1, #0
 800bc32:	d1ef      	bne.n	800bc14 <UART_DMAReceiveCplt+0x78>
 800bc34:	e7d6      	b.n	800bbe4 <UART_DMAReceiveCplt+0x48>
    HAL_UART_RxCpltCallback(huart);
 800bc36:	f7f5 fe47 	bl	80018c8 <HAL_UART_RxCpltCallback>
}
 800bc3a:	bd08      	pop	{r3, pc}

0800bc3c <UART_SetConfig>:
{
 800bc3c:	b570      	push	{r4, r5, r6, lr}
 800bc3e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800bc40:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc42:	69c5      	ldr	r5, [r0, #28]
 800bc44:	6882      	ldr	r2, [r0, #8]
 800bc46:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc48:	4987      	ldr	r1, [pc, #540]	; (800be68 <UART_SetConfig+0x22c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc4a:	4302      	orrs	r2, r0
 800bc4c:	6960      	ldr	r0, [r4, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc4e:	4e87      	ldr	r6, [pc, #540]	; (800be6c <UART_SetConfig+0x230>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc50:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc52:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bc54:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bc56:	4001      	ands	r1, r0
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	68e1      	ldr	r1, [r4, #12]
 800bc60:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800bc64:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc66:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc68:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc6a:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc6c:	f000 80bb 	beq.w	800bde6 <UART_SetConfig+0x1aa>
 800bc70:	497f      	ldr	r1, [pc, #508]	; (800be70 <UART_SetConfig+0x234>)
 800bc72:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc74:	6899      	ldr	r1, [r3, #8]
 800bc76:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800bc7a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc7e:	d02a      	beq.n	800bcd6 <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 800bc80:	6a20      	ldr	r0, [r4, #32]
 800bc82:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc84:	430a      	orrs	r2, r1
 800bc86:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bc8c:	f022 020f 	bic.w	r2, r2, #15
 800bc90:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc92:	4978      	ldr	r1, [pc, #480]	; (800be74 <UART_SetConfig+0x238>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc94:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc96:	428b      	cmp	r3, r1
 800bc98:	d17a      	bne.n	800bd90 <UART_SetConfig+0x154>
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc9e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800bca2:	d05d      	beq.n	800bd60 <UART_SetConfig+0x124>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bca4:	f7fd fb80 	bl	80093a8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d051      	beq.n	800bd50 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcae:	4b72      	ldr	r3, [pc, #456]	; (800be78 <UART_SetConfig+0x23c>)
 800bcb0:	6862      	ldr	r2, [r4, #4]
 800bcb2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcb6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcba:	fbb0 f3f3 	udiv	r3, r0, r3
 800bcbe:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800bcc2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bcc6:	f1a3 0210 	sub.w	r2, r3, #16
 800bcca:	428a      	cmp	r2, r1
 800bccc:	d85e      	bhi.n	800bd8c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcce:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bcd0:	2000      	movs	r0, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bcd2:	60d3      	str	r3, [r2, #12]
 800bcd4:	e03d      	b.n	800bd52 <UART_SetConfig+0x116>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcd6:	430a      	orrs	r2, r1
 800bcd8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bcda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcde:	f022 020f 	bic.w	r2, r2, #15
 800bce2:	430a      	orrs	r2, r1
 800bce4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (UART_INSTANCE_LOWPOWER(huart))
 800bce6:	4a62      	ldr	r2, [pc, #392]	; (800be70 <UART_SetConfig+0x234>)
 800bce8:	2000      	movs	r0, #0
 800bcea:	4293      	cmp	r3, r2
 800bcec:	f04f 0100 	mov.w	r1, #0
 800bcf0:	d1d5      	bne.n	800bc9e <UART_SetConfig+0x62>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bcf2:	f7fd fb59 	bl	80093a8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800bcf6:	b358      	cbz	r0, 800bd50 <UART_SetConfig+0x114>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bcf8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bcfa:	4a5f      	ldr	r2, [pc, #380]	; (800be78 <UART_SetConfig+0x23c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcfc:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bcfe:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd02:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bd06:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bd0a:	4299      	cmp	r1, r3
 800bd0c:	d83e      	bhi.n	800bd8c <UART_SetConfig+0x150>
 800bd0e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800bd12:	d83b      	bhi.n	800bd8c <UART_SetConfig+0x150>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd14:	2300      	movs	r3, #0
 800bd16:	4619      	mov	r1, r3
 800bd18:	f7f4 ff88 	bl	8000c2c <__aeabi_uldivmod>
 800bd1c:	4606      	mov	r6, r0
 800bd1e:	462a      	mov	r2, r5
 800bd20:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800bd24:	0209      	lsls	r1, r1, #8
 800bd26:	0235      	lsls	r5, r6, #8
 800bd28:	eb15 000c 	adds.w	r0, r5, ip
 800bd2c:	ea41 6116 	orr.w	r1, r1, r6, lsr #24
 800bd30:	f04f 0300 	mov.w	r3, #0
 800bd34:	f141 0100 	adc.w	r1, r1, #0
 800bd38:	f7f4 ff78 	bl	8000c2c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd3c:	4a4f      	ldr	r2, [pc, #316]	; (800be7c <UART_SetConfig+0x240>)
 800bd3e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800bd42:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd44:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd46:	d821      	bhi.n	800bd8c <UART_SetConfig+0x150>
          huart->Instance->BRR = usartdiv;
 800bd48:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd4a:	2000      	movs	r0, #0
          huart->Instance->BRR = usartdiv;
 800bd4c:	60d3      	str	r3, [r2, #12]
 800bd4e:	e000      	b.n	800bd52 <UART_SetConfig+0x116>
  HAL_StatusTypeDef ret               = HAL_OK;
 800bd50:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800bd52:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800bd54:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800bd58:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800bd5a:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800bd5c:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800bd5e:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd60:	f7fd fb22 	bl	80093a8 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d0f3      	beq.n	800bd50 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd68:	4b43      	ldr	r3, [pc, #268]	; (800be78 <UART_SetConfig+0x23c>)
 800bd6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bd6c:	6862      	ldr	r2, [r4, #4]
 800bd6e:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800bd72:	0853      	lsrs	r3, r2, #1
 800bd74:	fbb0 f0f1 	udiv	r0, r0, r1
 800bd78:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800bd7c:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd80:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800bd84:	f1a0 0310 	sub.w	r3, r0, #16
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	d94c      	bls.n	800be26 <UART_SetConfig+0x1ea>
        ret = HAL_ERROR;
 800bd8c:	2001      	movs	r0, #1
 800bd8e:	e7e0      	b.n	800bd52 <UART_SetConfig+0x116>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd90:	4a3b      	ldr	r2, [pc, #236]	; (800be80 <UART_SetConfig+0x244>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d038      	beq.n	800be08 <UART_SetConfig+0x1cc>
 800bd96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d03a      	beq.n	800be14 <UART_SetConfig+0x1d8>
 800bd9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bda2:	4293      	cmp	r3, r2
 800bda4:	d039      	beq.n	800be1a <UART_SetConfig+0x1de>
 800bda6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdaa:	4293      	cmp	r3, r2
 800bdac:	d02f      	beq.n	800be0e <UART_SetConfig+0x1d2>
 800bdae:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800bdb2:	4293      	cmp	r3, r2
 800bdb4:	d034      	beq.n	800be20 <UART_SetConfig+0x1e4>
 800bdb6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800bdba:	4293      	cmp	r3, r2
 800bdbc:	d040      	beq.n	800be40 <UART_SetConfig+0x204>
 800bdbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d039      	beq.n	800be3a <UART_SetConfig+0x1fe>
 800bdc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdca:	4293      	cmp	r3, r2
 800bdcc:	d03b      	beq.n	800be46 <UART_SetConfig+0x20a>
 800bdce:	f5a2 52c0 	sub.w	r2, r2, #6144	; 0x1800
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d03b      	beq.n	800be4e <UART_SetConfig+0x212>
 800bdd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d13b      	bne.n	800be56 <UART_SetConfig+0x21a>
 800bdde:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bde2:	2100      	movs	r1, #0
 800bde4:	e75b      	b.n	800bc9e <UART_SetConfig+0x62>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bde6:	6899      	ldr	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bde8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bdec:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800bdf0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bdf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bdfc:	f022 020f 	bic.w	r2, r2, #15
 800be00:	430a      	orrs	r2, r1
 800be02:	62da      	str	r2, [r3, #44]	; 0x2c
 800be04:	2100      	movs	r1, #0
 800be06:	e774      	b.n	800bcf2 <UART_SetConfig+0xb6>
 800be08:	2002      	movs	r0, #2
 800be0a:	2100      	movs	r1, #0
 800be0c:	e747      	b.n	800bc9e <UART_SetConfig+0x62>
 800be0e:	2010      	movs	r0, #16
 800be10:	2100      	movs	r1, #0
 800be12:	e744      	b.n	800bc9e <UART_SetConfig+0x62>
 800be14:	2004      	movs	r0, #4
 800be16:	2100      	movs	r1, #0
 800be18:	e741      	b.n	800bc9e <UART_SetConfig+0x62>
 800be1a:	2008      	movs	r0, #8
 800be1c:	2100      	movs	r1, #0
 800be1e:	e73e      	b.n	800bc9e <UART_SetConfig+0x62>
 800be20:	2020      	movs	r0, #32
 800be22:	2100      	movs	r1, #0
 800be24:	e73b      	b.n	800bc9e <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be26:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800be2a:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be2c:	f3c0 0042 	ubfx	r0, r0, #1, #3
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be30:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800be32:	4303      	orrs	r3, r0
 800be34:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800be36:	2000      	movs	r0, #0
 800be38:	e78b      	b.n	800bd52 <UART_SetConfig+0x116>
 800be3a:	2080      	movs	r0, #128	; 0x80
 800be3c:	2100      	movs	r1, #0
 800be3e:	e72e      	b.n	800bc9e <UART_SetConfig+0x62>
 800be40:	2040      	movs	r0, #64	; 0x40
 800be42:	2100      	movs	r1, #0
 800be44:	e72b      	b.n	800bc9e <UART_SetConfig+0x62>
 800be46:	f44f 7080 	mov.w	r0, #256	; 0x100
 800be4a:	2100      	movs	r1, #0
 800be4c:	e727      	b.n	800bc9e <UART_SetConfig+0x62>
 800be4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 800be52:	2100      	movs	r1, #0
 800be54:	e723      	b.n	800bc9e <UART_SetConfig+0x62>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800be56:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 800be5a:	4293      	cmp	r3, r2
 800be5c:	f47f af43 	bne.w	800bce6 <UART_SetConfig+0xaa>
 800be60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800be64:	2100      	movs	r1, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 800be66:	e71a      	b.n	800bc9e <UART_SetConfig+0x62>
 800be68:	cfff69f3 	.word	0xcfff69f3
 800be6c:	44002400 	.word	0x44002400
 800be70:	54002400 	.word	0x54002400
 800be74:	40013800 	.word	0x40013800
 800be78:	08011ab0 	.word	0x08011ab0
 800be7c:	000ffcff 	.word	0x000ffcff
 800be80:	40004400 	.word	0x40004400

0800be84 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be84:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800be86:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be88:	071a      	lsls	r2, r3, #28
 800be8a:	d506      	bpl.n	800be9a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be8c:	6801      	ldr	r1, [r0, #0]
 800be8e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800be90:	684a      	ldr	r2, [r1, #4]
 800be92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800be96:	4322      	orrs	r2, r4
 800be98:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be9a:	07dc      	lsls	r4, r3, #31
 800be9c:	d506      	bpl.n	800beac <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be9e:	6801      	ldr	r1, [r0, #0]
 800bea0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800bea2:	684a      	ldr	r2, [r1, #4]
 800bea4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800bea8:	4322      	orrs	r2, r4
 800beaa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800beac:	0799      	lsls	r1, r3, #30
 800beae:	d506      	bpl.n	800bebe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800beb0:	6801      	ldr	r1, [r0, #0]
 800beb2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800beb4:	684a      	ldr	r2, [r1, #4]
 800beb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800beba:	4322      	orrs	r2, r4
 800bebc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bebe:	075a      	lsls	r2, r3, #29
 800bec0:	d506      	bpl.n	800bed0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bec2:	6801      	ldr	r1, [r0, #0]
 800bec4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800bec6:	684a      	ldr	r2, [r1, #4]
 800bec8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800becc:	4322      	orrs	r2, r4
 800bece:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bed0:	06dc      	lsls	r4, r3, #27
 800bed2:	d506      	bpl.n	800bee2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bed4:	6801      	ldr	r1, [r0, #0]
 800bed6:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800bed8:	688a      	ldr	r2, [r1, #8]
 800beda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800bede:	4322      	orrs	r2, r4
 800bee0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bee2:	0699      	lsls	r1, r3, #26
 800bee4:	d506      	bpl.n	800bef4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bee6:	6801      	ldr	r1, [r0, #0]
 800bee8:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800beea:	688a      	ldr	r2, [r1, #8]
 800beec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bef0:	4322      	orrs	r2, r4
 800bef2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bef4:	065a      	lsls	r2, r3, #25
 800bef6:	d50a      	bpl.n	800bf0e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bef8:	6801      	ldr	r1, [r0, #0]
 800befa:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800befc:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800befe:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf02:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800bf06:	ea42 0204 	orr.w	r2, r2, r4
 800bf0a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf0c:	d00b      	beq.n	800bf26 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf0e:	061b      	lsls	r3, r3, #24
 800bf10:	d506      	bpl.n	800bf20 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf12:	6802      	ldr	r2, [r0, #0]
 800bf14:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800bf16:	6853      	ldr	r3, [r2, #4]
 800bf18:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	6053      	str	r3, [r2, #4]
}
 800bf20:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf24:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf26:	684a      	ldr	r2, [r1, #4]
 800bf28:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800bf2a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800bf2e:	4322      	orrs	r2, r4
 800bf30:	604a      	str	r2, [r1, #4]
 800bf32:	e7ec      	b.n	800bf0e <UART_AdvFeatureConfig+0x8a>

0800bf34 <UART_WaitOnFlagUntilTimeout>:
{
 800bf34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf38:	9f08      	ldr	r7, [sp, #32]
 800bf3a:	460d      	mov	r5, r1
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	4616      	mov	r6, r2
 800bf40:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf42:	6801      	ldr	r1, [r0, #0]
 800bf44:	e001      	b.n	800bf4a <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800bf46:	1c78      	adds	r0, r7, #1
 800bf48:	d10d      	bne.n	800bf66 <UART_WaitOnFlagUntilTimeout+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf4a:	69cc      	ldr	r4, [r1, #28]
 800bf4c:	ea35 0304 	bics.w	r3, r5, r4
 800bf50:	bf0c      	ite	eq
 800bf52:	f04f 0c01 	moveq.w	ip, #1
 800bf56:	f04f 0c00 	movne.w	ip, #0
 800bf5a:	45b4      	cmp	ip, r6
 800bf5c:	d0f3      	beq.n	800bf46 <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800bf5e:	2300      	movs	r3, #0
}
 800bf60:	4618      	mov	r0, r3
 800bf62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf66:	f7f8 fbcf 	bl	8004708 <HAL_GetTick>
 800bf6a:	eba0 0009 	sub.w	r0, r0, r9
 800bf6e:	42b8      	cmp	r0, r7
 800bf70:	d81d      	bhi.n	800bfae <UART_WaitOnFlagUntilTimeout+0x7a>
 800bf72:	b1e7      	cbz	r7, 800bfae <UART_WaitOnFlagUntilTimeout+0x7a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf74:	f8d8 1000 	ldr.w	r1, [r8]
 800bf78:	680b      	ldr	r3, [r1, #0]
 800bf7a:	075a      	lsls	r2, r3, #29
 800bf7c:	d5e5      	bpl.n	800bf4a <UART_WaitOnFlagUntilTimeout+0x16>
 800bf7e:	2d80      	cmp	r5, #128	; 0x80
 800bf80:	d0e3      	beq.n	800bf4a <UART_WaitOnFlagUntilTimeout+0x16>
 800bf82:	2d40      	cmp	r5, #64	; 0x40
 800bf84:	d0e1      	beq.n	800bf4a <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bf86:	69cc      	ldr	r4, [r1, #28]
 800bf88:	f014 0408 	ands.w	r4, r4, #8
 800bf8c:	d111      	bne.n	800bfb2 <UART_WaitOnFlagUntilTimeout+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bf8e:	69cb      	ldr	r3, [r1, #28]
 800bf90:	051b      	lsls	r3, r3, #20
 800bf92:	d5da      	bpl.n	800bf4a <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf94:	f44f 6300 	mov.w	r3, #2048	; 0x800
          UART_EndRxTransfer(huart);
 800bf98:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bf9a:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800bf9c:	f7ff fbc0 	bl	800b720 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfa0:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 800bfa2:	2303      	movs	r3, #3
          __HAL_UNLOCK(huart);
 800bfa4:	f888 4084 	strb.w	r4, [r8, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfa8:	f8c8 2090 	str.w	r2, [r8, #144]	; 0x90
          return HAL_TIMEOUT;
 800bfac:	e7d8      	b.n	800bf60 <UART_WaitOnFlagUntilTimeout+0x2c>
        return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e7d6      	b.n	800bf60 <UART_WaitOnFlagUntilTimeout+0x2c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfb2:	2408      	movs	r4, #8
          UART_EndRxTransfer(huart);
 800bfb4:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfb6:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 800bfb8:	f7ff fbb2 	bl	800b720 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800bfbc:	2200      	movs	r2, #0
          return HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfc0:	f8c8 4090 	str.w	r4, [r8, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800bfc4:	f888 2084 	strb.w	r2, [r8, #132]	; 0x84
          return HAL_ERROR;
 800bfc8:	e7ca      	b.n	800bf60 <UART_WaitOnFlagUntilTimeout+0x2c>
 800bfca:	bf00      	nop

0800bfcc <UART_CheckIdleState>:
{
 800bfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfce:	2600      	movs	r6, #0
{
 800bfd0:	4604      	mov	r4, r0
 800bfd2:	b083      	sub	sp, #12
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfd4:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800bfd8:	f7f8 fb96 	bl	8004708 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfdc:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800bfde:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	0712      	lsls	r2, r2, #28
 800bfe4:	d40f      	bmi.n	800c006 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	075b      	lsls	r3, r3, #29
 800bfea:	d428      	bmi.n	800c03e <UART_CheckIdleState+0x72>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfec:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800bfee:	2220      	movs	r2, #32
  return HAL_OK;
 800bff0:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800bff2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800bff6:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bffa:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bffe:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c000:	6723      	str	r3, [r4, #112]	; 0x70
}
 800c002:	b003      	add	sp, #12
 800c004:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c006:	f06f 477e 	mvn.w	r7, #4261412864	; 0xfe000000
 800c00a:	4603      	mov	r3, r0
 800c00c:	4632      	mov	r2, r6
 800c00e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c012:	4620      	mov	r0, r4
 800c014:	9700      	str	r7, [sp, #0]
 800c016:	f7ff ff8d 	bl	800bf34 <UART_WaitOnFlagUntilTimeout>
 800c01a:	6823      	ldr	r3, [r4, #0]
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d0e2      	beq.n	800bfe6 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c020:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c028:	e843 2100 	strex	r1, r2, [r3]
 800c02c:	2900      	cmp	r1, #0
 800c02e:	d1f7      	bne.n	800c020 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 800c030:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800c032:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800c034:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800c038:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800c03c:	e7e1      	b.n	800c002 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c03e:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 800c042:	462b      	mov	r3, r5
 800c044:	2200      	movs	r2, #0
 800c046:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c04a:	4620      	mov	r0, r4
 800c04c:	9600      	str	r6, [sp, #0]
 800c04e:	f7ff ff71 	bl	800bf34 <UART_WaitOnFlagUntilTimeout>
 800c052:	2800      	cmp	r0, #0
 800c054:	d0ca      	beq.n	800bfec <UART_CheckIdleState+0x20>
 800c056:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c058:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c05c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c060:	e843 2100 	strex	r1, r2, [r3]
 800c064:	2900      	cmp	r1, #0
 800c066:	d1f7      	bne.n	800c058 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c068:	f103 0208 	add.w	r2, r3, #8
 800c06c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c070:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c074:	f103 0008 	add.w	r0, r3, #8
 800c078:	e840 2100 	strex	r1, r2, [r0]
 800c07c:	2900      	cmp	r1, #0
 800c07e:	d1f3      	bne.n	800c068 <UART_CheckIdleState+0x9c>
      huart->RxState = HAL_UART_STATE_READY;
 800c080:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800c082:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800c084:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800c088:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 800c08c:	e7b9      	b.n	800c002 <UART_CheckIdleState+0x36>
 800c08e:	bf00      	nop

0800c090 <HAL_UART_Init>:
  if (huart == NULL)
 800c090:	b380      	cbz	r0, 800c0f4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c092:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800c096:	b510      	push	{r4, lr}
 800c098:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800c09a:	b333      	cbz	r3, 800c0ea <HAL_UART_Init+0x5a>
  huart->gState = HAL_UART_STATE_BUSY;
 800c09c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800c09e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c0a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800c0a4:	6813      	ldr	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0a6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  __HAL_UART_DISABLE(huart);
 800c0a8:	f023 0301 	bic.w	r3, r3, #1
 800c0ac:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c0ae:	b9c1      	cbnz	r1, 800c0e2 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f7ff fdc3 	bl	800bc3c <UART_SetConfig>
 800c0b6:	2801      	cmp	r0, #1
 800c0b8:	d011      	beq.n	800c0de <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0ba:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c0bc:	4620      	mov	r0, r4
}
 800c0be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0c2:	685a      	ldr	r2, [r3, #4]
 800c0c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0ca:	689a      	ldr	r2, [r3, #8]
 800c0cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c0d0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c0d2:	681a      	ldr	r2, [r3, #0]
 800c0d4:	f042 0201 	orr.w	r2, r2, #1
 800c0d8:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c0da:	f7ff bf77 	b.w	800bfcc <UART_CheckIdleState>
}
 800c0de:	2001      	movs	r0, #1
 800c0e0:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	f7ff fece 	bl	800be84 <UART_AdvFeatureConfig>
 800c0e8:	e7e2      	b.n	800c0b0 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800c0ea:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800c0ee:	f7f5 fa49 	bl	8001584 <HAL_UART_MspInit>
 800c0f2:	e7d3      	b.n	800c09c <HAL_UART_Init+0xc>
}
 800c0f4:	2001      	movs	r0, #1
 800c0f6:	4770      	bx	lr

0800c0f8 <UART_Start_Receive_DMA>:
{
 800c0f8:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0fa:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0fc:	2522      	movs	r5, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0fe:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
{
 800c102:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800c104:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 800c106:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c10a:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  if (huart->hdmarx != NULL)
 800c10e:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800c112:	b1e0      	cbz	r0, 800c14e <UART_Start_Receive_DMA+0x56>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c114:	4d2d      	ldr	r5, [pc, #180]	; (800c1cc <UART_Start_Receive_DMA+0xd4>)
    huart->hdmarx->XferAbortCallback = NULL;
 800c116:	66c3      	str	r3, [r0, #108]	; 0x6c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c118:	68a3      	ldr	r3, [r4, #8]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c11a:	6605      	str	r5, [r0, #96]	; 0x60
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c11c:	4d2c      	ldr	r5, [pc, #176]	; (800c1d0 <UART_Start_Receive_DMA+0xd8>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c11e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c122:	6645      	str	r5, [r0, #100]	; 0x64
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c124:	4d2b      	ldr	r5, [pc, #172]	; (800c1d4 <UART_Start_Receive_DMA+0xdc>)
 800c126:	6685      	str	r5, [r0, #104]	; 0x68
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c128:	d037      	beq.n	800c19a <UART_Start_Receive_DMA+0xa2>
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c12a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c12c:	061b      	lsls	r3, r3, #24
 800c12e:	d53c      	bpl.n	800c1aa <UART_Start_Receive_DMA+0xb2>
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800c130:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800c132:	2b00      	cmp	r3, #0
 800c134:	d042      	beq.n	800c1bc <UART_Start_Receive_DMA+0xc4>
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d03f      	beq.n	800c1bc <UART_Start_Receive_DMA+0xc4>
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800c13c:	609a      	str	r2, [r3, #8]
          (uint32_t)&huart->Instance->RDR;
 800c13e:	6822      	ldr	r2, [r4, #0]
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800c140:	6119      	str	r1, [r3, #16]
          (uint32_t)&huart->Instance->RDR;
 800c142:	3224      	adds	r2, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800c144:	60da      	str	r2, [r3, #12]
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800c146:	f7f8 ffb1 	bl	80050ac <HAL_DMAEx_List_Start_IT>
    if (status != HAL_OK)
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d136      	bne.n	800c1bc <UART_Start_Receive_DMA+0xc4>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800c14e:	6923      	ldr	r3, [r4, #16]
 800c150:	b14b      	cbz	r3, 800c166 <UART_Start_Receive_DMA+0x6e>
 800c152:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c154:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c15c:	e843 2100 	strex	r1, r2, [r3]
 800c160:	2900      	cmp	r1, #0
 800c162:	d1f7      	bne.n	800c154 <UART_Start_Receive_DMA+0x5c>
 800c164:	e000      	b.n	800c168 <UART_Start_Receive_DMA+0x70>
 800c166:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c168:	f103 0208 	add.w	r2, r3, #8
 800c16c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c170:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	f103 0008 	add.w	r0, r3, #8
 800c178:	e840 2100 	strex	r1, r2, [r0]
 800c17c:	2900      	cmp	r1, #0
 800c17e:	d1f3      	bne.n	800c168 <UART_Start_Receive_DMA+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c180:	f103 0208 	add.w	r2, r3, #8
 800c184:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18c:	f103 0108 	add.w	r1, r3, #8
 800c190:	e841 2000 	strex	r0, r2, [r1]
 800c194:	2800      	cmp	r0, #0
 800c196:	d1f3      	bne.n	800c180 <UART_Start_Receive_DMA+0x88>
}
 800c198:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d1c4      	bne.n	800c12a <UART_Start_Receive_DMA+0x32>
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c1a0:	6d03      	ldr	r3, [r0, #80]	; 0x50
      nbByte = Size * 2U;
 800c1a2:	0052      	lsls	r2, r2, #1
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c1a4:	061b      	lsls	r3, r3, #24
      nbByte = Size * 2U;
 800c1a6:	b292      	uxth	r2, r2
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800c1a8:	d4c2      	bmi.n	800c130 <UART_Start_Receive_DMA+0x38>
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800c1aa:	6825      	ldr	r5, [r4, #0]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	460a      	mov	r2, r1
 800c1b0:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800c1b4:	f7f8 fde6 	bl	8004d84 <HAL_DMA_Start_IT>
    if (status != HAL_OK)
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d0c8      	beq.n	800c14e <UART_Start_Receive_DMA+0x56>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1bc:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 800c1be:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c1c0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
      return HAL_ERROR;
 800c1c4:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800c1c6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800c1ca:	bd38      	pop	{r3, r4, r5, pc}
 800c1cc:	0800bb9d 	.word	0x0800bb9d
 800c1d0:	0800bb61 	.word	0x0800bb61
 800c1d4:	0800b7d1 	.word	0x0800b7d1

0800c1d8 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1d8:	6803      	ldr	r3, [r0, #0]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800c1da:	b430      	push	{r4, r5}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1dc:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1de:	689b      	ldr	r3, [r3, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1e0:	4d0b      	ldr	r5, [pc, #44]	; (800c210 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1e2:	4c0c      	ldr	r4, [pc, #48]	; (800c214 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1e4:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1e8:	f3c1 6142 	ubfx	r1, r1, #25, #3
 800c1ec:	5c6b      	ldrb	r3, [r5, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1ee:	f815 200c 	ldrb.w	r2, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1f2:	5c61      	ldrb	r1, [r4, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1f4:	f814 500c 	ldrb.w	r5, [r4, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1f8:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1fa:	00db      	lsls	r3, r3, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1fc:	fbb2 f2f5 	udiv	r2, r2, r5
  }
}
 800c200:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c202:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c206:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c20a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800c20e:	4770      	bx	lr
 800c210:	08011ad0 	.word	0x08011ad0
 800c214:	08011ac8 	.word	0x08011ac8

0800c218 <HAL_UARTEx_WakeupCallback>:
}
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop

0800c21c <HAL_UARTEx_RxFifoFullCallback>:
 800c21c:	4770      	bx	lr
 800c21e:	bf00      	nop

0800c220 <HAL_UARTEx_TxFifoEmptyCallback>:
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop

0800c224 <HAL_UARTEx_EnableFifoMode>:
{
 800c224:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c226:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d01b      	beq.n	800c266 <HAL_UARTEx_EnableFifoMode+0x42>
 800c22e:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800c230:	2224      	movs	r2, #36	; 0x24
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c232:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c236:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800c238:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c23c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c240:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c242:	6819      	ldr	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c244:	432a      	orrs	r2, r5
  __HAL_UART_DISABLE(huart);
 800c246:	f021 0101 	bic.w	r1, r1, #1
 800c24a:	6019      	str	r1, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c24c:	6645      	str	r5, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c24e:	601a      	str	r2, [r3, #0]
 800c250:	f7ff ffc2 	bl	800c1d8 <UARTEx_SetNbDataToProcess.part.0>
 800c254:	4604      	mov	r4, r0
  __HAL_UNLOCK(huart);
 800c256:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800c258:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c25a:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800c25e:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800c260:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800c264:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c266:	2002      	movs	r0, #2
}
 800c268:	bd38      	pop	{r3, r4, r5, pc}
 800c26a:	bf00      	nop

0800c26c <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800c26c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c270:	2b01      	cmp	r3, #1
 800c272:	d023      	beq.n	800c2bc <HAL_UARTEx_SetTxFifoThreshold+0x50>
{
 800c274:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800c276:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 800c278:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c27a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800c27c:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c280:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c284:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c286:	681a      	ldr	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c288:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800c28a:	f022 0201 	bic.w	r2, r2, #1
 800c28e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c290:	689a      	ldr	r2, [r3, #8]
 800c292:	4604      	mov	r4, r0
 800c294:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800c298:	4311      	orrs	r1, r2
 800c29a:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c29c:	b156      	cbz	r6, 800c2b4 <HAL_UARTEx_SetTxFifoThreshold+0x48>
 800c29e:	f7ff ff9b 	bl	800c1d8 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2a2:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 800c2a4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c2a6:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2a8:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 800c2aa:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800c2ae:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800c2b2:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800c2b4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800c2b8:	6682      	str	r2, [r0, #104]	; 0x68
 800c2ba:	e7f3      	b.n	800c2a4 <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 800c2bc:	2002      	movs	r0, #2
}
 800c2be:	4770      	bx	lr

0800c2c0 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800c2c0:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d023      	beq.n	800c310 <HAL_UARTEx_SetRxFifoThreshold+0x50>
{
 800c2c8:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800c2ca:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 800c2cc:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2ce:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800c2d0:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c2d4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2d8:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c2da:	681a      	ldr	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c2dc:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800c2de:	f022 0201 	bic.w	r2, r2, #1
 800c2e2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c2e4:	689a      	ldr	r2, [r3, #8]
 800c2e6:	4604      	mov	r4, r0
 800c2e8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800c2ec:	4311      	orrs	r1, r2
 800c2ee:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c2f0:	b156      	cbz	r6, 800c308 <HAL_UARTEx_SetRxFifoThreshold+0x48>
 800c2f2:	f7ff ff71 	bl	800c1d8 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2f6:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 800c2f8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c2fa:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2fc:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 800c2fe:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800c302:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800c306:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800c308:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800c30c:	6682      	str	r2, [r0, #104]	; 0x68
 800c30e:	e7f3      	b.n	800c2f8 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 800c310:	2002      	movs	r0, #2
}
 800c312:	4770      	bx	lr

0800c314 <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 800c314:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800c316:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
 800c31a:	2e20      	cmp	r6, #32
 800c31c:	d103      	bne.n	800c326 <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    if ((pData == NULL) || (Size == 0U))
 800c31e:	b101      	cbz	r1, 800c322 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
 800c320:	b91a      	cbnz	r2, 800c32a <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      return HAL_ERROR;
 800c322:	2001      	movs	r0, #1
}
 800c324:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c326:	2002      	movs	r0, #2
}
 800c328:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c32a:	2501      	movs	r5, #1
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c32c:	2300      	movs	r3, #0
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c32e:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c330:	6703      	str	r3, [r0, #112]	; 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c332:	4604      	mov	r4, r0
 800c334:	f7ff fee0 	bl	800c0f8 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800c338:	2800      	cmp	r0, #0
 800c33a:	d1f3      	bne.n	800c324 <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c33c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800c33e:	42ab      	cmp	r3, r5
 800c340:	d1ef      	bne.n	800c322 <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c342:	2310      	movs	r3, #16
 800c344:	6822      	ldr	r2, [r4, #0]
 800c346:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c348:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c34c:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c350:	e842 3100 	strex	r1, r3, [r2]
 800c354:	2900      	cmp	r1, #0
 800c356:	d1f7      	bne.n	800c348 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
}
 800c358:	bd70      	pop	{r4, r5, r6, pc}
 800c35a:	bf00      	nop

0800c35c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop

0800c360 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800c360:	e7fe      	b.n	800c360 <HardFault_Handler>
 800c362:	bf00      	nop

0800c364 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800c364:	e7fe      	b.n	800c364 <MemManage_Handler>
 800c366:	bf00      	nop

0800c368 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800c368:	e7fe      	b.n	800c368 <BusFault_Handler>
 800c36a:	bf00      	nop

0800c36c <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800c36c:	e7fe      	b.n	800c36c <UsageFault_Handler>
 800c36e:	bf00      	nop

0800c370 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
 800c370:	e7fe      	b.n	800c370 <DebugMon_Handler>
 800c372:	bf00      	nop

0800c374 <GPDMA1_Channel0_IRQHandler>:
void GPDMA1_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800c374:	4801      	ldr	r0, [pc, #4]	; (800c37c <GPDMA1_Channel0_IRQHandler+0x8>)
 800c376:	f7f8 bdb7 	b.w	8004ee8 <HAL_DMA_IRQHandler>
 800c37a:	bf00      	nop
 800c37c:	20004b00 	.word	0x20004b00

0800c380 <GPDMA1_Channel1_IRQHandler>:
void GPDMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 800c380:	4801      	ldr	r0, [pc, #4]	; (800c388 <GPDMA1_Channel1_IRQHandler+0x8>)
 800c382:	f7f8 bdb1 	b.w	8004ee8 <HAL_DMA_IRQHandler>
 800c386:	bf00      	nop
 800c388:	20004b78 	.word	0x20004b78

0800c38c <GPDMA1_Channel2_IRQHandler>:
void GPDMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 800c38c:	4801      	ldr	r0, [pc, #4]	; (800c394 <GPDMA1_Channel2_IRQHandler+0x8>)
 800c38e:	f7f8 bdab 	b.w	8004ee8 <HAL_DMA_IRQHandler>
 800c392:	bf00      	nop
 800c394:	20004bf0 	.word	0x20004bf0

0800c398 <GPDMA1_Channel3_IRQHandler>:
void GPDMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 800c398:	4801      	ldr	r0, [pc, #4]	; (800c3a0 <GPDMA1_Channel3_IRQHandler+0x8>)
 800c39a:	f7f8 bda5 	b.w	8004ee8 <HAL_DMA_IRQHandler>
 800c39e:	bf00      	nop
 800c3a0:	20004c68 	.word	0x20004c68

0800c3a4 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800c3a4:	4801      	ldr	r0, [pc, #4]	; (800c3ac <TIM6_IRQHandler+0x8>)
 800c3a6:	f7fe bf7f 	b.w	800b2a8 <HAL_TIM_IRQHandler>
 800c3aa:	bf00      	nop
 800c3ac:	2000a1ac 	.word	0x2000a1ac

0800c3b0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800c3b0:	4801      	ldr	r0, [pc, #4]	; (800c3b8 <USART2_IRQHandler+0x8>)
 800c3b2:	f7ff ba51 	b.w	800b858 <HAL_UART_IRQHandler>
 800c3b6:	bf00      	nop
 800c3b8:	20004ce0 	.word	0x20004ce0

0800c3bc <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800c3bc:	4801      	ldr	r0, [pc, #4]	; (800c3c4 <UART4_IRQHandler+0x8>)
 800c3be:	f7ff ba4b 	b.w	800b858 <HAL_UART_IRQHandler>
 800c3c2:	bf00      	nop
 800c3c4:	20004d74 	.word	0x20004d74

0800c3c8 <USB_DRD_FS_IRQHandler>:
void USB_DRD_FS_IRQHandler(void)
{
  /* USER CODE BEGIN USB_DRD_FS_IRQn 0 */

  /* USER CODE END USB_DRD_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 800c3c8:	4801      	ldr	r0, [pc, #4]	; (800c3d0 <USB_DRD_FS_IRQHandler+0x8>)
 800c3ca:	f7f9 b8d3 	b.w	8005574 <HAL_PCD_IRQHandler>
 800c3ce:	bf00      	nop
 800c3d0:	20004e0c 	.word	0x20004e0c

0800c3d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c3d4:	b084      	sub	sp, #16
 800c3d6:	f10d 0c04 	add.w	ip, sp, #4
 800c3da:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  UNUSED(cfg);

  if (USBx == NULL)
 800c3de:	b168      	cbz	r0, 800c3fc <USB_CoreInit+0x28>
 800c3e0:	4603      	mov	r3, r0

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c3e2:	2100      	movs	r1, #0
  USBx->CNTR &= ~USB_CNTR_HOST;
 800c3e4:	6c02      	ldr	r2, [r0, #64]	; 0x40

  return ret;
}
 800c3e6:	b004      	add	sp, #16
  USBx->CNTR &= ~USB_CNTR_HOST;
 800c3e8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c3ec:	6402      	str	r2, [r0, #64]	; 0x40
  USBx->CNTR |= USB_CNTR_USBRST;
 800c3ee:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800c3f0:	f042 0201 	orr.w	r2, r2, #1
 800c3f4:	6402      	str	r2, [r0, #64]	; 0x40
  return ret;
 800c3f6:	4608      	mov	r0, r1
  USBx->ISTR = 0U;
 800c3f8:	6459      	str	r1, [r3, #68]	; 0x44
}
 800c3fa:	4770      	bx	lr
    return HAL_ERROR;
 800c3fc:	2001      	movs	r0, #1
}
 800c3fe:	b004      	add	sp, #16
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop

0800c404 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c404:	4603      	mov	r3, r0
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c406:	2200      	movs	r2, #0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800c408:	f64b 7180 	movw	r1, #49024	; 0xbf80
  USBx->ISTR = 0U;
 800c40c:	645a      	str	r2, [r3, #68]	; 0x44

  return HAL_OK;
}
 800c40e:	4610      	mov	r0, r2
  USBx->CNTR = winterruptmask;
 800c410:	6419      	str	r1, [r3, #64]	; 0x40
}
 800c412:	4770      	bx	lr

0800c414 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800c414:	4602      	mov	r2, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800c416:	6c13      	ldr	r3, [r2, #64]	; 0x40

  return HAL_OK;
}
 800c418:	2000      	movs	r0, #0
  USBx->CNTR &= ~winterruptmask;
 800c41a:	f423 433f 	bic.w	r3, r3, #48896	; 0xbf00
 800c41e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c422:	6413      	str	r3, [r2, #64]	; 0x40
}
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop

0800c428 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800c428:	4603      	mov	r3, r0
  if (mode == USB_DEVICE_MODE)
 800c42a:	b929      	cbnz	r1, 800c438 <USB_SetCurrentMode+0x10>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c42c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c42e:	4608      	mov	r0, r1
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c430:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c434:	641a      	str	r2, [r3, #64]	; 0x40
 800c436:	4770      	bx	lr
  else if (mode == USB_HOST_MODE)
 800c438:	2901      	cmp	r1, #1
 800c43a:	d105      	bne.n	800c448 <USB_SetCurrentMode+0x20>
    USBx->CNTR |= USB_CNTR_HOST;
 800c43c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  return HAL_OK;
 800c43e:	2000      	movs	r0, #0
    USBx->CNTR |= USB_CNTR_HOST;
 800c440:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800c444:	641a      	str	r2, [r3, #64]	; 0x40
 800c446:	4770      	bx	lr
    return HAL_ERROR;
 800c448:	2001      	movs	r0, #1
}
 800c44a:	4770      	bx	lr

0800c44c <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800c44c:	b084      	sub	sp, #16
 800c44e:	f10d 0c04 	add.w	ip, sp, #4
 800c452:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 800c456:	4603      	mov	r3, r0

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800c458:	2201      	movs	r2, #1

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800c45a:	2100      	movs	r1, #0
  USBx->CNTR = USB_CNTR_USBRST;
 800c45c:	641a      	str	r2, [r3, #64]	; 0x40
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c45e:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  return ret;
}
 800c460:	4608      	mov	r0, r1
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800c462:	f022 0201 	bic.w	r2, r2, #1
 800c466:	641a      	str	r2, [r3, #64]	; 0x40
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
}
 800c46a:	b004      	add	sp, #16
    USBx->CNTR &= ~USB_CNTR_HOST;
 800c46c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800c470:	641a      	str	r2, [r3, #64]	; 0x40
  USBx->ISTR = 0U;
 800c472:	6459      	str	r1, [r3, #68]	; 0x44
}
 800c474:	4770      	bx	lr
 800c476:	bf00      	nop

0800c478 <USB_FlushTxFifo>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800c478:	2000      	movs	r0, #0
 800c47a:	4770      	bx	lr

0800c47c <USB_FlushRxFifo>:
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 800c47c:	2000      	movs	r0, #0
 800c47e:	4770      	bx	lr

0800c480 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c480:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c482:	780d      	ldrb	r5, [r1, #0]
 800c484:	4abf      	ldr	r2, [pc, #764]	; (800c784 <USB_ActivateEndpoint+0x304>)
 800c486:	b22b      	sxth	r3, r5
 800c488:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]

  /* initialize Endpoint */
  switch (ep->type)
 800c48c:	f891 c003 	ldrb.w	ip, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800c490:	4022      	ands	r2, r4
  switch (ep->type)
 800c492:	f1bc 0f03 	cmp.w	ip, #3
 800c496:	f200 81a3 	bhi.w	800c7e0 <USB_ActivateEndpoint+0x360>
 800c49a:	e8df f01c 	tbh	[pc, ip, lsl #1]
 800c49e:	00ce      	.short	0x00ce
 800c4a0:	008b00d1 	.word	0x008b00d1
 800c4a4:	0004      	.short	0x0004
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800c4a6:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c4aa:	f248 0680 	movw	r6, #32896	; 0x8080
 800c4ae:	4332      	orrs	r2, r6
 800c4b0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c4b4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c4b8:	4cb3      	ldr	r4, [pc, #716]	; (800c788 <USB_ActivateEndpoint+0x308>)
 800c4ba:	4014      	ands	r4, r2
 800c4bc:	432c      	orrs	r4, r5
 800c4be:	4334      	orrs	r4, r6
 800c4c0:	f840 4023 	str.w	r4, [r0, r3, lsl #2]

  if (ep->doublebuffer == 0U)
 800c4c4:	7b0c      	ldrb	r4, [r1, #12]
 800c4c6:	2c00      	cmp	r4, #0
 800c4c8:	f000 8085 	beq.w	800c5d6 <USB_ActivateEndpoint+0x156>
 800c4cc:	2400      	movs	r4, #0
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c4ce:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800c4d2:	4aae      	ldr	r2, [pc, #696]	; (800c78c <USB_ActivateEndpoint+0x30c>)
 800c4d4:	402a      	ands	r2, r5
 800c4d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c4de:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c4e2:	00da      	lsls	r2, r3, #3
 800c4e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c4e8:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800c4ec:	6816      	ldr	r6, [r2, #0]
 800c4ee:	4fa8      	ldr	r7, [pc, #672]	; (800c790 <USB_ActivateEndpoint+0x310>)
 800c4f0:	403e      	ands	r6, r7
 800c4f2:	6016      	str	r6, [r2, #0]
 800c4f4:	890e      	ldrh	r6, [r1, #8]
 800c4f6:	ea4f 0e96 	mov.w	lr, r6, lsr #2
 800c4fa:	6816      	ldr	r6, [r2, #0]
 800c4fc:	ea46 068e 	orr.w	r6, r6, lr, lsl #2
 800c500:	6016      	str	r6, [r2, #0]
 800c502:	6855      	ldr	r5, [r2, #4]
 800c504:	403d      	ands	r5, r7
 800c506:	6055      	str	r5, [r2, #4]
 800c508:	894d      	ldrh	r5, [r1, #10]
 800c50a:	ea4f 0e95 	mov.w	lr, r5, lsr #2
 800c50e:	6855      	ldr	r5, [r2, #4]
 800c510:	ea45 058e 	orr.w	r5, r5, lr, lsl #2
 800c514:	6055      	str	r5, [r2, #4]

    if (ep->is_in == 0U)
 800c516:	784d      	ldrb	r5, [r1, #1]
 800c518:	2d00      	cmp	r5, #0
 800c51a:	f040 80dd 	bne.w	800c6d8 <USB_ActivateEndpoint+0x258>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c51e:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800c522:	046e      	lsls	r6, r5, #17
 800c524:	d509      	bpl.n	800c53a <USB_ActivateEndpoint+0xba>
 800c526:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 800c52a:	4d97      	ldr	r5, [pc, #604]	; (800c788 <USB_ActivateEndpoint+0x308>)
 800c52c:	4035      	ands	r5, r6
 800c52e:	f445 4540 	orr.w	r5, r5, #49152	; 0xc000
 800c532:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800c536:	f840 5023 	str.w	r5, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c53a:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 800c53e:	066d      	lsls	r5, r5, #25
 800c540:	d509      	bpl.n	800c556 <USB_ActivateEndpoint+0xd6>
 800c542:	f850 6023 	ldr.w	r6, [r0, r3, lsl #2]
 800c546:	4d90      	ldr	r5, [pc, #576]	; (800c788 <USB_ActivateEndpoint+0x308>)
 800c548:	4035      	ands	r5, r6
 800c54a:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 800c54e:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
 800c552:	f840 5023 	str.w	r5, [r0, r3, lsl #2]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c556:	690d      	ldr	r5, [r1, #16]
 800c558:	6811      	ldr	r1, [r2, #0]
 800c55a:	f021 417c 	bic.w	r1, r1, #4227858432	; 0xfc000000
 800c55e:	6011      	str	r1, [r2, #0]
 800c560:	2d00      	cmp	r5, #0
 800c562:	f000 80f1 	beq.w	800c748 <USB_ActivateEndpoint+0x2c8>
 800c566:	2d3e      	cmp	r5, #62	; 0x3e
 800c568:	f200 8124 	bhi.w	800c7b4 <USB_ActivateEndpoint+0x334>
 800c56c:	6811      	ldr	r1, [r2, #0]
 800c56e:	086e      	lsrs	r6, r5, #1
 800c570:	07ef      	lsls	r7, r5, #31
 800c572:	bf48      	it	mi
 800c574:	3601      	addmi	r6, #1
 800c576:	ea41 6186 	orr.w	r1, r1, r6, lsl #26
 800c57a:	6011      	str	r1, [r2, #0]
 800c57c:	6851      	ldr	r1, [r2, #4]
 800c57e:	f021 417c 	bic.w	r1, r1, #4227858432	; 0xfc000000
 800c582:	6051      	str	r1, [r2, #4]
 800c584:	6851      	ldr	r1, [r2, #4]
 800c586:	ea41 6186 	orr.w	r1, r1, r6, lsl #26
 800c58a:	6051      	str	r1, [r2, #4]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c58c:	f248 0580 	movw	r5, #32896	; 0x8080
 800c590:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c594:	4a7f      	ldr	r2, [pc, #508]	; (800c794 <USB_ActivateEndpoint+0x314>)
 800c596:	400a      	ands	r2, r1
 800c598:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800c59c:	432a      	orrs	r2, r5
 800c59e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5a2:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c5a6:	497c      	ldr	r1, [pc, #496]	; (800c798 <USB_ActivateEndpoint+0x318>)
 800c5a8:	4011      	ands	r1, r2
 800c5aa:	4329      	orrs	r1, r5
 800c5ac:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c5b4:	f248 0480 	movw	r4, #32896	; 0x8080
 800c5b8:	4322      	orrs	r2, r4
 800c5ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c5be:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c5c2:	4e71      	ldr	r6, [pc, #452]	; (800c788 <USB_ActivateEndpoint+0x308>)
 800c5c4:	4032      	ands	r2, r6
 800c5c6:	432a      	orrs	r2, r5
 800c5c8:	4322      	orrs	r2, r4
 800c5ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  if (ep->doublebuffer == 0U)
 800c5ce:	7b0c      	ldrb	r4, [r1, #12]
 800c5d0:	2c00      	cmp	r4, #0
 800c5d2:	f040 80cb 	bne.w	800c76c <USB_ActivateEndpoint+0x2ec>
    if (ep->is_in != 0U)
 800c5d6:	784a      	ldrb	r2, [r1, #1]
 800c5d8:	2a00      	cmp	r2, #0
 800c5da:	d03e      	beq.n	800c65a <USB_ActivateEndpoint+0x1da>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c5dc:	00da      	lsls	r2, r3, #3
 800c5de:	88c9      	ldrh	r1, [r1, #6]
 800c5e0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c5e4:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800c5e8:	088d      	lsrs	r5, r1, #2
 800c5ea:	6811      	ldr	r1, [r2, #0]
 800c5ec:	0c09      	lsrs	r1, r1, #16
 800c5ee:	0409      	lsls	r1, r1, #16
 800c5f0:	6011      	str	r1, [r2, #0]
 800c5f2:	6811      	ldr	r1, [r2, #0]
 800c5f4:	ea41 0185 	orr.w	r1, r1, r5, lsl #2
 800c5f8:	6011      	str	r1, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c5fa:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c5fe:	0652      	lsls	r2, r2, #25
 800c600:	d509      	bpl.n	800c616 <USB_ActivateEndpoint+0x196>
 800c602:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c606:	4a60      	ldr	r2, [pc, #384]	; (800c788 <USB_ActivateEndpoint+0x308>)
 800c608:	400a      	ands	r2, r1
 800c60a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c60e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800c612:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c616:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c61a:	4a5f      	ldr	r2, [pc, #380]	; (800c798 <USB_ActivateEndpoint+0x318>)
      if (ep->type != EP_TYPE_ISOC)
 800c61c:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c620:	ea02 0201 	and.w	r2, r2, r1
      if (ep->type != EP_TYPE_ISOC)
 800c624:	d011      	beq.n	800c64a <USB_ActivateEndpoint+0x1ca>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c626:	f082 0220 	eor.w	r2, r2, #32
 800c62a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c62e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c632:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800c636:	4620      	mov	r0, r4
 800c638:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wEpRegVal |= USB_EP_CONTROL;
 800c63a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      break;
 800c63e:	e734      	b.n	800c4aa <USB_ActivateEndpoint+0x2a>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800c640:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
      break;
 800c644:	e731      	b.n	800c4aa <USB_ActivateEndpoint+0x2a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c646:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 800c64a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c64e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c652:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800c656:	4620      	mov	r0, r4
 800c658:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c65a:	00da      	lsls	r2, r3, #3
 800c65c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800c660:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800c664:	6856      	ldr	r6, [r2, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c666:	690f      	ldr	r7, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c668:	0c36      	lsrs	r6, r6, #16
 800c66a:	0436      	lsls	r6, r6, #16
 800c66c:	6056      	str	r6, [r2, #4]
 800c66e:	88ce      	ldrh	r6, [r1, #6]
 800c670:	6851      	ldr	r1, [r2, #4]
 800c672:	08b6      	lsrs	r6, r6, #2
 800c674:	ea41 0186 	orr.w	r1, r1, r6, lsl #2
 800c678:	6051      	str	r1, [r2, #4]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c67a:	6851      	ldr	r1, [r2, #4]
 800c67c:	f021 417c 	bic.w	r1, r1, #4227858432	; 0xfc000000
 800c680:	6051      	str	r1, [r2, #4]
 800c682:	2f00      	cmp	r7, #0
 800c684:	d06d      	beq.n	800c762 <USB_ActivateEndpoint+0x2e2>
 800c686:	2f3e      	cmp	r7, #62	; 0x3e
 800c688:	f200 8088 	bhi.w	800c79c <USB_ActivateEndpoint+0x31c>
 800c68c:	087e      	lsrs	r6, r7, #1
 800c68e:	6851      	ldr	r1, [r2, #4]
 800c690:	07ff      	lsls	r7, r7, #31
 800c692:	bf48      	it	mi
 800c694:	3601      	addmi	r6, #1
 800c696:	ea41 6186 	orr.w	r1, r1, r6, lsl #26
 800c69a:	6051      	str	r1, [r2, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c69c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c6a0:	0457      	lsls	r7, r2, #17
 800c6a2:	d509      	bpl.n	800c6b8 <USB_ActivateEndpoint+0x238>
 800c6a4:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c6a8:	4a37      	ldr	r2, [pc, #220]	; (800c788 <USB_ActivateEndpoint+0x308>)
 800c6aa:	400a      	ands	r2, r1
 800c6ac:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c6b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c6b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6b8:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c6bc:	4a35      	ldr	r2, [pc, #212]	; (800c794 <USB_ActivateEndpoint+0x314>)
 800c6be:	400a      	ands	r2, r1
      if (ep->num == 0U)
 800c6c0:	2d00      	cmp	r5, #0
 800c6c2:	d1c0      	bne.n	800c646 <USB_ActivateEndpoint+0x1c6>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6c4:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800c6c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c6d0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c6d8:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c6dc:	0451      	lsls	r1, r2, #17
 800c6de:	d509      	bpl.n	800c6f4 <USB_ActivateEndpoint+0x274>
 800c6e0:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c6e4:	4a28      	ldr	r2, [pc, #160]	; (800c788 <USB_ActivateEndpoint+0x308>)
 800c6e6:	400a      	ands	r2, r1
 800c6e8:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c6ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c6f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6f4:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c6f8:	0652      	lsls	r2, r2, #25
 800c6fa:	d509      	bpl.n	800c710 <USB_ActivateEndpoint+0x290>
 800c6fc:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c700:	4a21      	ldr	r2, [pc, #132]	; (800c788 <USB_ActivateEndpoint+0x308>)
 800c702:	400a      	ands	r2, r1
 800c704:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c708:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800c70c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c710:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c714:	4a20      	ldr	r2, [pc, #128]	; (800c798 <USB_ActivateEndpoint+0x318>)
      if (ep->type != EP_TYPE_ISOC)
 800c716:	f1bc 0f01 	cmp.w	ip, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c71a:	ea02 0201 	and.w	r2, r2, r1
 800c71e:	bf18      	it	ne
 800c720:	f082 0220 	eorne.w	r2, r2, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c72c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c730:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c734:	4a17      	ldr	r2, [pc, #92]	; (800c794 <USB_ActivateEndpoint+0x314>)
 800c736:	400a      	ands	r2, r1
 800c738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c73c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c740:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800c744:	4620      	mov	r0, r4
 800c746:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c748:	6811      	ldr	r1, [r2, #0]
 800c74a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c74e:	6011      	str	r1, [r2, #0]
 800c750:	6851      	ldr	r1, [r2, #4]
 800c752:	f021 417c 	bic.w	r1, r1, #4227858432	; 0xfc000000
 800c756:	6051      	str	r1, [r2, #4]
 800c758:	6851      	ldr	r1, [r2, #4]
 800c75a:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c75e:	6051      	str	r1, [r2, #4]
 800c760:	e714      	b.n	800c58c <USB_ActivateEndpoint+0x10c>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c762:	6851      	ldr	r1, [r2, #4]
 800c764:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c768:	6051      	str	r1, [r2, #4]
 800c76a:	e797      	b.n	800c69c <USB_ActivateEndpoint+0x21c>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c76c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c770:	2400      	movs	r4, #0
 800c772:	4032      	ands	r2, r6
 800c774:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800c778:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c77c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800c780:	e6af      	b.n	800c4e2 <USB_ActivateEndpoint+0x62>
 800c782:	bf00      	nop
 800c784:	07ff898f 	.word	0x07ff898f
 800c788:	07ff8f8f 	.word	0x07ff8f8f
 800c78c:	07ff8e8f 	.word	0x07ff8e8f
 800c790:	ffff0000 	.word	0xffff0000
 800c794:	07ffbf8f 	.word	0x07ffbf8f
 800c798:	07ff8fbf 	.word	0x07ff8fbf
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c79c:	097e      	lsrs	r6, r7, #5
 800c79e:	06f9      	lsls	r1, r7, #27
 800c7a0:	6851      	ldr	r1, [r2, #4]
 800c7a2:	bf08      	it	eq
 800c7a4:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 800c7a8:	ea41 6186 	orr.w	r1, r1, r6, lsl #26
 800c7ac:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c7b0:	6051      	str	r1, [r2, #4]
 800c7b2:	e773      	b.n	800c69c <USB_ActivateEndpoint+0x21c>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c7b4:	096e      	lsrs	r6, r5, #5
 800c7b6:	06ed      	lsls	r5, r5, #27
 800c7b8:	6815      	ldr	r5, [r2, #0]
 800c7ba:	bf08      	it	eq
 800c7bc:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 800c7c0:	ea45 6586 	orr.w	r5, r5, r6, lsl #26
 800c7c4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 800c7c8:	6015      	str	r5, [r2, #0]
 800c7ca:	6851      	ldr	r1, [r2, #4]
 800c7cc:	f021 417c 	bic.w	r1, r1, #4227858432	; 0xfc000000
 800c7d0:	6051      	str	r1, [r2, #4]
 800c7d2:	6851      	ldr	r1, [r2, #4]
 800c7d4:	ea41 6186 	orr.w	r1, r1, r6, lsl #26
 800c7d8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800c7dc:	6051      	str	r1, [r2, #4]
 800c7de:	e6d5      	b.n	800c58c <USB_ActivateEndpoint+0x10c>
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800c7e0:	f248 0680 	movw	r6, #32896	; 0x8080
 800c7e4:	4332      	orrs	r2, r6
 800c7e6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800c7ea:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c7ee:	4c06      	ldr	r4, [pc, #24]	; (800c808 <USB_ActivateEndpoint+0x388>)
 800c7f0:	4014      	ands	r4, r2
 800c7f2:	ea44 0205 	orr.w	r2, r4, r5
 800c7f6:	4332      	orrs	r2, r6
 800c7f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  if (ep->doublebuffer == 0U)
 800c7fc:	7b0a      	ldrb	r2, [r1, #12]
 800c7fe:	2401      	movs	r4, #1
 800c800:	2a00      	cmp	r2, #0
 800c802:	f47f ae64 	bne.w	800c4ce <USB_ActivateEndpoint+0x4e>
 800c806:	e6e6      	b.n	800c5d6 <USB_ActivateEndpoint+0x156>
 800c808:	07ff8f8f 	.word	0x07ff8f8f

0800c80c <USB_DeactivateEndpoint>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 800c80c:	7b0b      	ldrb	r3, [r1, #12]
 800c80e:	b9a3      	cbnz	r3, 800c83a <USB_DeactivateEndpoint+0x2e>
  {
    if (ep->is_in != 0U)
 800c810:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c812:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 800c814:	2b00      	cmp	r3, #0
 800c816:	d072      	beq.n	800c8fe <USB_DeactivateEndpoint+0xf2>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c818:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800c81c:	0659      	lsls	r1, r3, #25
 800c81e:	f100 8093 	bmi.w	800c948 <USB_DeactivateEndpoint+0x13c>

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c822:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800c826:	4b4e      	ldr	r3, [pc, #312]	; (800c960 <USB_DeactivateEndpoint+0x154>)
 800c828:	400b      	ands	r3, r1
 800c82a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c82e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c832:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 800c836:	2000      	movs	r0, #0
 800c838:	4770      	bx	lr
    if (ep->is_in == 0U)
 800c83a:	784b      	ldrb	r3, [r1, #1]
 800c83c:	bb73      	cbnz	r3, 800c89c <USB_DeactivateEndpoint+0x90>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c83e:	780b      	ldrb	r3, [r1, #0]
 800c840:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c844:	0451      	lsls	r1, r2, #17
 800c846:	d509      	bpl.n	800c85c <USB_DeactivateEndpoint+0x50>
 800c848:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c84c:	4a45      	ldr	r2, [pc, #276]	; (800c964 <USB_DeactivateEndpoint+0x158>)
 800c84e:	400a      	ands	r2, r1
 800c850:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c858:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c85c:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c860:	0652      	lsls	r2, r2, #25
 800c862:	d509      	bpl.n	800c878 <USB_DeactivateEndpoint+0x6c>
 800c864:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c868:	4a3e      	ldr	r2, [pc, #248]	; (800c964 <USB_DeactivateEndpoint+0x158>)
 800c86a:	400a      	ands	r2, r1
 800c86c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c870:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800c874:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800c878:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c87c:	4a39      	ldr	r2, [pc, #228]	; (800c964 <USB_DeactivateEndpoint+0x158>)
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c87e:	f248 0c80 	movw	ip, #32896	; 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 800c882:	400a      	ands	r2, r1
 800c884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c888:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800c88c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c890:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c894:	4934      	ldr	r1, [pc, #208]	; (800c968 <USB_DeactivateEndpoint+0x15c>)
 800c896:	4011      	ands	r1, r2
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c898:	4a31      	ldr	r2, [pc, #196]	; (800c960 <USB_DeactivateEndpoint+0x154>)
 800c89a:	e023      	b.n	800c8e4 <USB_DeactivateEndpoint+0xd8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c89c:	780b      	ldrb	r3, [r1, #0]
 800c89e:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c8a2:	0451      	lsls	r1, r2, #17
 800c8a4:	d509      	bpl.n	800c8ba <USB_DeactivateEndpoint+0xae>
 800c8a6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c8aa:	4a2e      	ldr	r2, [pc, #184]	; (800c964 <USB_DeactivateEndpoint+0x158>)
 800c8ac:	400a      	ands	r2, r1
 800c8ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c8b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c8b6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8ba:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c8be:	0652      	lsls	r2, r2, #25
 800c8c0:	d437      	bmi.n	800c932 <USB_DeactivateEndpoint+0x126>
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8c2:	f248 0c80 	movw	ip, #32896	; 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 800c8c6:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c8ca:	4a26      	ldr	r2, [pc, #152]	; (800c964 <USB_DeactivateEndpoint+0x158>)
 800c8cc:	400a      	ands	r2, r1
 800c8ce:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800c8d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c8d6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8da:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
 800c8de:	4920      	ldr	r1, [pc, #128]	; (800c960 <USB_DeactivateEndpoint+0x154>)
 800c8e0:	4011      	ands	r1, r2
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8e2:	4a21      	ldr	r2, [pc, #132]	; (800c968 <USB_DeactivateEndpoint+0x15c>)
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8e4:	ea41 010c 	orr.w	r1, r1, ip
 800c8e8:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8ec:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c8f0:	400a      	ands	r2, r1
 800c8f2:	ea42 020c 	orr.w	r2, r2, ip
 800c8f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8fe:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800c902:	045b      	lsls	r3, r3, #17
 800c904:	d509      	bpl.n	800c91a <USB_DeactivateEndpoint+0x10e>
 800c906:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800c90a:	4b16      	ldr	r3, [pc, #88]	; (800c964 <USB_DeactivateEndpoint+0x158>)
 800c90c:	400b      	ands	r3, r1
 800c90e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c916:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c91a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800c91e:	4b12      	ldr	r3, [pc, #72]	; (800c968 <USB_DeactivateEndpoint+0x15c>)
 800c920:	400b      	ands	r3, r1
 800c922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c92a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800c92e:	2000      	movs	r0, #0
 800c930:	4770      	bx	lr
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c932:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800c936:	4a0b      	ldr	r2, [pc, #44]	; (800c964 <USB_DeactivateEndpoint+0x158>)
 800c938:	400a      	ands	r2, r1
 800c93a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c93e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800c942:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 800c946:	e7bc      	b.n	800c8c2 <USB_DeactivateEndpoint+0xb6>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c948:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800c94c:	4b05      	ldr	r3, [pc, #20]	; (800c964 <USB_DeactivateEndpoint+0x158>)
 800c94e:	400b      	ands	r3, r1
 800c950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c954:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c958:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800c95c:	e761      	b.n	800c822 <USB_DeactivateEndpoint+0x16>
 800c95e:	bf00      	nop
 800c960:	07ff8fbf 	.word	0x07ff8fbf
 800c964:	07ff8f8f 	.word	0x07ff8f8f
 800c968:	07ffbf8f 	.word	0x07ffbf8f

0800c96c <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800c96c:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c96e:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 800c970:	b16b      	cbz	r3, 800c98e <USB_EPSetStall+0x22>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c972:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800c976:	4b0d      	ldr	r3, [pc, #52]	; (800c9ac <USB_EPSetStall+0x40>)
 800c978:	400b      	ands	r3, r1
 800c97a:	f083 0310 	eor.w	r3, r3, #16
 800c97e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c986:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
  }

  return HAL_OK;
}
 800c98a:	2000      	movs	r0, #0
 800c98c:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c98e:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800c992:	4b07      	ldr	r3, [pc, #28]	; (800c9b0 <USB_EPSetStall+0x44>)
 800c994:	400b      	ands	r3, r1
 800c996:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c99a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9a2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	07ff8fbf 	.word	0x07ff8fbf
 800c9b0:	07ffbf8f 	.word	0x07ffbf8f

0800c9b4 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 800c9b4:	784b      	ldrb	r3, [r1, #1]
 800c9b6:	b313      	cbz	r3, 800c9fe <USB_EPClearStall+0x4a>
{
 800c9b8:	b410      	push	{r4}
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c9ba:	780a      	ldrb	r2, [r1, #0]
 800c9bc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800c9c0:	065c      	lsls	r4, r3, #25
 800c9c2:	d509      	bpl.n	800c9d8 <USB_EPClearStall+0x24>
 800c9c4:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 800c9c8:	4b1b      	ldr	r3, [pc, #108]	; (800ca38 <USB_EPClearStall+0x84>)
 800c9ca:	4023      	ands	r3, r4
 800c9cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c9d4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    if (ep->type != EP_TYPE_ISOC)
 800c9d8:	78cb      	ldrb	r3, [r1, #3]
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d00b      	beq.n	800c9f6 <USB_EPClearStall+0x42>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c9de:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800c9e2:	4b16      	ldr	r3, [pc, #88]	; (800ca3c <USB_EPClearStall+0x88>)
 800c9e4:	400b      	ands	r3, r1
 800c9e6:	f083 0320 	eor.w	r3, r3, #32
 800c9ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c9ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9f2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
  }

  return HAL_OK;
}
 800c9f6:	2000      	movs	r0, #0
 800c9f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9fc:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c9fe:	780a      	ldrb	r2, [r1, #0]
 800ca00:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800ca04:	045b      	lsls	r3, r3, #17
 800ca06:	d509      	bpl.n	800ca1c <USB_EPClearStall+0x68>
 800ca08:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800ca0c:	4b0a      	ldr	r3, [pc, #40]	; (800ca38 <USB_EPClearStall+0x84>)
 800ca0e:	400b      	ands	r3, r1
 800ca10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ca14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca18:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ca1c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800ca20:	4b07      	ldr	r3, [pc, #28]	; (800ca40 <USB_EPClearStall+0x8c>)
 800ca22:	400b      	ands	r3, r1
 800ca24:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800ca28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca30:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800ca34:	2000      	movs	r0, #0
 800ca36:	4770      	bx	lr
 800ca38:	07ff8f8f 	.word	0x07ff8f8f
 800ca3c:	07ff8fbf 	.word	0x07ff8fbf
 800ca40:	07ffbf8f 	.word	0x07ffbf8f

0800ca44 <USB_EPStopXfer>:
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
  /* IN endpoint */
  if (ep->is_in == 1U)
 800ca44:	784b      	ldrb	r3, [r1, #1]
 800ca46:	2b01      	cmp	r3, #1
  {
    if (ep->doublebuffer == 0U)
 800ca48:	7b0b      	ldrb	r3, [r1, #12]
  if (ep->is_in == 1U)
 800ca4a:	d013      	beq.n	800ca74 <USB_EPStopXfer+0x30>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ca4c:	b983      	cbnz	r3, 800ca70 <USB_EPStopXfer+0x2c>
    {
      if (ep->type != EP_TYPE_ISOC)
 800ca4e:	78cb      	ldrb	r3, [r1, #3]
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ca50:	780a      	ldrb	r2, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 800ca52:	2b01      	cmp	r3, #1
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ca54:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800ca58:	4b15      	ldr	r3, [pc, #84]	; (800cab0 <USB_EPStopXfer+0x6c>)
 800ca5a:	ea03 0301 	and.w	r3, r3, r1
      if (ep->type != EP_TYPE_ISOC)
 800ca5e:	d01e      	beq.n	800ca9e <USB_EPStopXfer+0x5a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800ca60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ca64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca6c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
      }
    }
  }

  return HAL_OK;
}
 800ca70:	2000      	movs	r0, #0
 800ca72:	4770      	bx	lr
    if (ep->doublebuffer == 0U)
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d1fb      	bne.n	800ca70 <USB_EPStopXfer+0x2c>
      if (ep->type != EP_TYPE_ISOC)
 800ca78:	78cb      	ldrb	r3, [r1, #3]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca7a:	780a      	ldrb	r2, [r1, #0]
      if (ep->type != EP_TYPE_ISOC)
 800ca7c:	2b01      	cmp	r3, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca7e:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800ca82:	4b0c      	ldr	r3, [pc, #48]	; (800cab4 <USB_EPStopXfer+0x70>)
 800ca84:	ea03 0301 	and.w	r3, r3, r1
      if (ep->type != EP_TYPE_ISOC)
 800ca88:	d009      	beq.n	800ca9e <USB_EPStopXfer+0x5a>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ca8a:	f083 0320 	eor.w	r3, r3, #32
 800ca8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca96:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800ca9a:	2000      	movs	r0, #0
 800ca9c:	4770      	bx	lr
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ca9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800caa6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 800caaa:	2000      	movs	r0, #0
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	07ffbf8f 	.word	0x07ffbf8f
 800cab4:	07ff8fbf 	.word	0x07ff8fbf

0800cab8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800cab8:	b909      	cbnz	r1, 800cabe <USB_SetDevAddress+0x6>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800caba:	2380      	movs	r3, #128	; 0x80
 800cabc:	64c3      	str	r3, [r0, #76]	; 0x4c
  }

  return HAL_OK;
}
 800cabe:	2000      	movs	r0, #0
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop

0800cac4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800cac4:	4603      	mov	r3, r0
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800cac6:	6d9a      	ldr	r2, [r3, #88]	; 0x58

  return HAL_OK;
}
 800cac8:	2000      	movs	r0, #0
  USBx->BCDR |= USB_BCDR_DPPU;
 800caca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cace:	659a      	str	r2, [r3, #88]	; 0x58
}
 800cad0:	4770      	bx	lr
 800cad2:	bf00      	nop

0800cad4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800cad4:	4603      	mov	r3, r0
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800cad6:	6d9a      	ldr	r2, [r3, #88]	; 0x58

  return HAL_OK;
}
 800cad8:	2000      	movs	r0, #0
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800cada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cade:	659a      	str	r2, [r3, #88]	; 0x58
}
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop

0800cae4 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800cae4:	6c40      	ldr	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 800cae6:	4770      	bx	lr

0800cae8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cae8:	b470      	push	{r4, r5, r6}
  {
    NbWords--;
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800caea:	f102 4c80 	add.w	ip, r2, #1073741824	; 0x40000000
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800caee:	1cde      	adds	r6, r3, #3
  if (remaining_bytes != 0U)
 800caf0:	f013 0503 	ands.w	r5, r3, #3
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800caf4:	ea4f 0696 	mov.w	r6, r6, lsr #2
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800caf8:	f50c 3cb2 	add.w	ip, ip, #91136	; 0x16400
  if (remaining_bytes != 0U)
 800cafc:	d022      	beq.n	800cb44 <USB_WritePMA+0x5c>

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800cafe:	3e01      	subs	r6, #1
 800cb00:	d00d      	beq.n	800cb1e <USB_WritePMA+0x36>
  uint8_t *pBuf = pbUsrBuf;
 800cb02:	4608      	mov	r0, r1
 800cb04:	4662      	mov	r2, ip
 800cb06:	4633      	mov	r3, r6
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800cb08:	f850 4b04 	ldr.w	r4, [r0], #4
  for (count = NbWords; count != 0U; count--)
 800cb0c:	3b01      	subs	r3, #1
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800cb0e:	f842 4b04 	str.w	r4, [r2], #4
  for (count = NbWords; count != 0U; count--)
 800cb12:	d1f9      	bne.n	800cb08 <USB_WritePMA+0x20>
    pdwVal++;
 800cb14:	eb0c 0c86 	add.w	ip, ip, r6, lsl #2
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
    pBuf++;
    pBuf++;
    pBuf++;
 800cb18:	eb01 0186 	add.w	r1, r1, r6, lsl #2
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800cb1c:	b185      	cbz	r5, 800cb40 <USB_WritePMA+0x58>
  uint8_t *pBuf = pbUsrBuf;
 800cb1e:	2000      	movs	r0, #0
 800cb20:	3d01      	subs	r5, #1
 800cb22:	1e4c      	subs	r4, r1, #1
 800cb24:	fa11 f385 	uxtah	r3, r1, r5
 800cb28:	4601      	mov	r1, r0
  {
    WrVal = 0U;

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800cb2a:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800cb2e:	4082      	lsls	r2, r0
      count++;
      pBuf++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 800cb30:	42a3      	cmp	r3, r4
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800cb32:	ea41 0102 	orr.w	r1, r1, r2
    } while (remaining_bytes != 0U);
 800cb36:	f100 0008 	add.w	r0, r0, #8
 800cb3a:	d1f6      	bne.n	800cb2a <USB_WritePMA+0x42>

    *pdwVal = WrVal;
 800cb3c:	f8cc 1000 	str.w	r1, [ip]
  }
}
 800cb40:	bc70      	pop	{r4, r5, r6}
 800cb42:	4770      	bx	lr
  for (count = NbWords; count != 0U; count--)
 800cb44:	2e00      	cmp	r6, #0
 800cb46:	d1dc      	bne.n	800cb02 <USB_WritePMA+0x1a>
 800cb48:	e7fa      	b.n	800cb40 <USB_WritePMA+0x58>
 800cb4a:	bf00      	nop

0800cb4c <USB_EPStartXfer>:
{
 800cb4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 800cb4e:	784b      	ldrb	r3, [r1, #1]
{
 800cb50:	460c      	mov	r4, r1
  if (ep->is_in == 1U)
 800cb52:	2b01      	cmp	r3, #1
{
 800cb54:	4605      	mov	r5, r0
 800cb56:	b083      	sub	sp, #12
  if (ep->is_in == 1U)
 800cb58:	d03d      	beq.n	800cbd6 <USB_EPStartXfer+0x8a>
    if (ep->doublebuffer == 0U)
 800cb5a:	7b0b      	ldrb	r3, [r1, #12]
 800cb5c:	b1c3      	cbz	r3, 800cb90 <USB_EPStartXfer+0x44>
      if (ep->type == EP_TYPE_BULK)
 800cb5e:	78cb      	ldrb	r3, [r1, #3]
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	f000 80d6 	beq.w	800cd12 <USB_EPStartXfer+0x1c6>
      else if (ep->type == EP_TYPE_ISOC)
 800cb66:	2b01      	cmp	r3, #1
 800cb68:	d16b      	bne.n	800cc42 <USB_EPStartXfer+0xf6>
        ep->xfer_len = 0U;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	7822      	ldrb	r2, [r4, #0]
 800cb6e:	61a3      	str	r3, [r4, #24]
  return HAL_OK;
 800cb70:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800cb72:	b212      	sxth	r2, r2
 800cb74:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 800cb78:	4ba6      	ldr	r3, [pc, #664]	; (800ce14 <USB_EPStartXfer+0x2c8>)
 800cb7a:	400b      	ands	r3, r1
 800cb7c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800cb80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cb84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb88:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
 800cb8c:	b003      	add	sp, #12
 800cb8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800cb90:	698b      	ldr	r3, [r1, #24]
 800cb92:	b96b      	cbnz	r3, 800cbb0 <USB_EPStartXfer+0x64>
 800cb94:	78cb      	ldrb	r3, [r1, #3]
 800cb96:	b95b      	cbnz	r3, 800cbb0 <USB_EPStartXfer+0x64>
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800cb98:	780a      	ldrb	r2, [r1, #0]
 800cb9a:	4b9f      	ldr	r3, [pc, #636]	; (800ce18 <USB_EPStartXfer+0x2cc>)
 800cb9c:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 800cba0:	400b      	ands	r3, r1
 800cba2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800cba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbaa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cbae:	e00a      	b.n	800cbc6 <USB_EPStartXfer+0x7a>
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800cbb0:	7822      	ldrb	r2, [r4, #0]
 800cbb2:	4b9a      	ldr	r3, [pc, #616]	; (800ce1c <USB_EPStartXfer+0x2d0>)
 800cbb4:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 800cbb8:	400b      	ands	r3, r1
 800cbba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cbbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbc2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
      if (ep->xfer_len > ep->maxpacket)
 800cbc6:	69a3      	ldr	r3, [r4, #24]
 800cbc8:	6922      	ldr	r2, [r4, #16]
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d9cd      	bls.n	800cb6a <USB_EPStartXfer+0x1e>
        ep->xfer_len -= ep->maxpacket;
 800cbce:	1a9b      	subs	r3, r3, r2
 800cbd0:	61a3      	str	r3, [r4, #24]
 800cbd2:	7822      	ldrb	r2, [r4, #0]
 800cbd4:	e7cc      	b.n	800cb70 <USB_EPStartXfer+0x24>
    if (ep->xfer_len > ep->maxpacket)
 800cbd6:	690a      	ldr	r2, [r1, #16]
 800cbd8:	698e      	ldr	r6, [r1, #24]
    if (ep->doublebuffer == 0U)
 800cbda:	7b0b      	ldrb	r3, [r1, #12]
 800cbdc:	4296      	cmp	r6, r2
 800cbde:	bf28      	it	cs
 800cbe0:	4616      	movcs	r6, r2
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	f000 8082 	beq.w	800ccec <USB_EPStartXfer+0x1a0>
      if (ep->type == EP_TYPE_BULK)
 800cbe8:	78cb      	ldrb	r3, [r1, #3]
 800cbea:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 800cbec:	6a0b      	ldr	r3, [r1, #32]
      if (ep->type == EP_TYPE_BULK)
 800cbee:	d02b      	beq.n	800cc48 <USB_EPStartXfer+0xfc>
        ep->xfer_len_db -= len;
 800cbf0:	1b9b      	subs	r3, r3, r6
 800cbf2:	620b      	str	r3, [r1, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cbf4:	780b      	ldrb	r3, [r1, #0]
 800cbf6:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc00:	0652      	lsls	r2, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc02:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc06:	f140 80a1 	bpl.w	800cd4c <USB_EPStartXfer+0x200>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc0a:	685a      	ldr	r2, [r3, #4]
 800cc0c:	b292      	uxth	r2, r2
 800cc0e:	605a      	str	r2, [r3, #4]
 800cc10:	685a      	ldr	r2, [r3, #4]
 800cc12:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800cc16:	605a      	str	r2, [r3, #4]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc18:	894a      	ldrh	r2, [r1, #10]
 800cc1a:	b2b3      	uxth	r3, r6
 800cc1c:	6949      	ldr	r1, [r1, #20]
 800cc1e:	f7ff ff63 	bl	800cae8 <USB_WritePMA>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cc22:	7822      	ldrb	r2, [r4, #0]
  return HAL_OK;
 800cc24:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cc26:	f855 1022 	ldr.w	r1, [r5, r2, lsl #2]
 800cc2a:	4b7d      	ldr	r3, [pc, #500]	; (800ce20 <USB_EPStartXfer+0x2d4>)
 800cc2c:	400b      	ands	r3, r1
 800cc2e:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 800cc32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cc36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc3a:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
 800cc3e:	b003      	add	sp, #12
 800cc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800cc42:	2001      	movs	r0, #1
}
 800cc44:	b003      	add	sp, #12
 800cc46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ep->xfer_len_db > ep->maxpacket)
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	f080 80c5 	bcs.w	800cdd8 <USB_EPStartXfer+0x28c>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cc4e:	780b      	ldrb	r3, [r1, #0]
 800cc50:	4a71      	ldr	r2, [pc, #452]	; (800ce18 <USB_EPStartXfer+0x2cc>)
 800cc52:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 800cc56:	400a      	ands	r2, r1
 800cc58:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800cc5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cc60:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
          ep->xfer_len_db -= len;
 800cc64:	6a22      	ldr	r2, [r4, #32]
 800cc66:	1b92      	subs	r2, r2, r6
 800cc68:	6222      	str	r2, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc6a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc6e:	00db      	lsls	r3, r3, #3
 800cc70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc74:	f017 0740 	ands.w	r7, r7, #64	; 0x40
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc78:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cc7c:	d074      	beq.n	800cd68 <USB_EPStartXfer+0x21c>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc7e:	685a      	ldr	r2, [r3, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc80:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cc82:	b292      	uxth	r2, r2
 800cc84:	605a      	str	r2, [r3, #4]
 800cc86:	685a      	ldr	r2, [r3, #4]
 800cc88:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800cc8c:	605a      	str	r2, [r3, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc8e:	b2b3      	uxth	r3, r6
 800cc90:	8962      	ldrh	r2, [r4, #10]
 800cc92:	9301      	str	r3, [sp, #4]
 800cc94:	f7ff ff28 	bl	800cae8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800cc98:	6a27      	ldr	r7, [r4, #32]
 800cc9a:	6922      	ldr	r2, [r4, #16]
            ep->xfer_buff += len;
 800cc9c:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800cc9e:	4297      	cmp	r7, r2
              ep->xfer_len_db = 0U;
 800cca0:	bf94      	ite	ls
 800cca2:	2200      	movls	r2, #0
              ep->xfer_len_db -= len;
 800cca4:	1bba      	subhi	r2, r7, r6
 800cca6:	6222      	str	r2, [r4, #32]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cca8:	7862      	ldrb	r2, [r4, #1]
            ep->xfer_buff += len;
 800ccaa:	4431      	add	r1, r6
            if (ep->xfer_len_db > ep->maxpacket)
 800ccac:	9b01      	ldr	r3, [sp, #4]
 800ccae:	bf88      	it	hi
 800ccb0:	4637      	movhi	r7, r6
            ep->xfer_buff += len;
 800ccb2:	6161      	str	r1, [r4, #20]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ccb4:	bf98      	it	ls
 800ccb6:	b2bb      	uxthls	r3, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ccb8:	2a00      	cmp	r2, #0
 800ccba:	f040 80b3 	bne.w	800ce24 <USB_EPStartXfer+0x2d8>
 800ccbe:	7822      	ldrb	r2, [r4, #0]
 800ccc0:	00d2      	lsls	r2, r2, #3
 800ccc2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ccc6:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800ccca:	6810      	ldr	r0, [r2, #0]
 800cccc:	f020 407c 	bic.w	r0, r0, #4227858432	; 0xfc000000
 800ccd0:	6010      	str	r0, [r2, #0]
 800ccd2:	2f00      	cmp	r7, #0
 800ccd4:	f040 80c7 	bne.w	800ce66 <USB_EPStartXfer+0x31a>
 800ccd8:	6810      	ldr	r0, [r2, #0]
 800ccda:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ccde:	6010      	str	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cce0:	8922      	ldrh	r2, [r4, #8]
 800cce2:	4628      	mov	r0, r5
 800cce4:	f7ff ff00 	bl	800cae8 <USB_WritePMA>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cce8:	7822      	ldrb	r2, [r4, #0]
 800ccea:	e79b      	b.n	800cc24 <USB_EPStartXfer+0xd8>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ccec:	88ca      	ldrh	r2, [r1, #6]
 800ccee:	b2b3      	uxth	r3, r6
 800ccf0:	6949      	ldr	r1, [r1, #20]
 800ccf2:	f7ff fef9 	bl	800cae8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ccf6:	7822      	ldrb	r2, [r4, #0]
 800ccf8:	00d3      	lsls	r3, r2, #3
 800ccfa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ccfe:	f503 33b2 	add.w	r3, r3, #91136	; 0x16400
 800cd02:	6819      	ldr	r1, [r3, #0]
 800cd04:	b289      	uxth	r1, r1
 800cd06:	6019      	str	r1, [r3, #0]
 800cd08:	6819      	ldr	r1, [r3, #0]
 800cd0a:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 800cd0e:	601e      	str	r6, [r3, #0]
 800cd10:	e788      	b.n	800cc24 <USB_EPStartXfer+0xd8>
        if (ep->xfer_count != 0U)
 800cd12:	69cb      	ldr	r3, [r1, #28]
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800cd14:	780a      	ldrb	r2, [r1, #0]
        if (ep->xfer_count != 0U)
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	f43f af2a 	beq.w	800cb70 <USB_EPStartXfer+0x24>
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cd1c:	f244 0340 	movw	r3, #16448	; 0x4040
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800cd20:	b211      	sxth	r1, r2
 800cd22:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cd26:	ea00 0603 	and.w	r6, r0, r3
 800cd2a:	4383      	bics	r3, r0
 800cd2c:	d002      	beq.n	800cd34 <USB_EPStartXfer+0x1e8>
 800cd2e:	2e00      	cmp	r6, #0
 800cd30:	f47f af1e 	bne.w	800cb70 <USB_EPStartXfer+0x24>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cd34:	f855 2021 	ldr.w	r2, [r5, r1, lsl #2]
 800cd38:	4b37      	ldr	r3, [pc, #220]	; (800ce18 <USB_EPStartXfer+0x2cc>)
 800cd3a:	4013      	ands	r3, r2
 800cd3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cd44:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
 800cd48:	7822      	ldrb	r2, [r4, #0]
 800cd4a:	e711      	b.n	800cb70 <USB_EPStartXfer+0x24>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd4c:	681a      	ldr	r2, [r3, #0]
 800cd4e:	b292      	uxth	r2, r2
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	681a      	ldr	r2, [r3, #0]
 800cd54:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800cd58:	601a      	str	r2, [r3, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd5a:	890a      	ldrh	r2, [r1, #8]
 800cd5c:	b2b3      	uxth	r3, r6
 800cd5e:	6949      	ldr	r1, [r1, #20]
 800cd60:	f7ff fec2 	bl	800cae8 <USB_WritePMA>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cd64:	7822      	ldrb	r2, [r4, #0]
 800cd66:	e75d      	b.n	800cc24 <USB_EPStartXfer+0xd8>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd68:	681a      	ldr	r2, [r3, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd6a:	6961      	ldr	r1, [r4, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd6c:	b292      	uxth	r2, r2
 800cd6e:	601a      	str	r2, [r3, #0]
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800cd76:	601a      	str	r2, [r3, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd78:	b2b3      	uxth	r3, r6
 800cd7a:	8922      	ldrh	r2, [r4, #8]
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	f7ff feb3 	bl	800cae8 <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 800cd82:	f8d4 c020 	ldr.w	ip, [r4, #32]
 800cd86:	6922      	ldr	r2, [r4, #16]
            ep->xfer_buff += len;
 800cd88:	6961      	ldr	r1, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 800cd8a:	4594      	cmp	ip, r2
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cd8c:	7862      	ldrb	r2, [r4, #1]
              ep->xfer_len_db -= len;
 800cd8e:	bf88      	it	hi
 800cd90:	ebac 0706 	subhi.w	r7, ip, r6
            ep->xfer_buff += len;
 800cd94:	4431      	add	r1, r6
            if (ep->xfer_len_db > ep->maxpacket)
 800cd96:	9b01      	ldr	r3, [sp, #4]
 800cd98:	bf88      	it	hi
 800cd9a:	46b4      	movhi	ip, r6
            ep->xfer_buff += len;
 800cd9c:	6161      	str	r1, [r4, #20]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd9e:	bf98      	it	ls
 800cda0:	fa1f f38c 	uxthls.w	r3, ip
              ep->xfer_len_db -= len;
 800cda4:	6227      	str	r7, [r4, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cda6:	2a00      	cmp	r2, #0
 800cda8:	d14d      	bne.n	800ce46 <USB_EPStartXfer+0x2fa>
 800cdaa:	7822      	ldrb	r2, [r4, #0]
 800cdac:	00d2      	lsls	r2, r2, #3
 800cdae:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800cdb2:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800cdb6:	6850      	ldr	r0, [r2, #4]
 800cdb8:	f020 407c 	bic.w	r0, r0, #4227858432	; 0xfc000000
 800cdbc:	6050      	str	r0, [r2, #4]
 800cdbe:	f1bc 0f00 	cmp.w	ip, #0
 800cdc2:	d15b      	bne.n	800ce7c <USB_EPStartXfer+0x330>
 800cdc4:	6850      	ldr	r0, [r2, #4]
 800cdc6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cdca:	6050      	str	r0, [r2, #4]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cdcc:	8962      	ldrh	r2, [r4, #10]
 800cdce:	4628      	mov	r0, r5
 800cdd0:	f7ff fe8a 	bl	800cae8 <USB_WritePMA>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cdd4:	7822      	ldrb	r2, [r4, #0]
 800cdd6:	e725      	b.n	800cc24 <USB_EPStartXfer+0xd8>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cdd8:	780a      	ldrb	r2, [r1, #0]
 800cdda:	4910      	ldr	r1, [pc, #64]	; (800ce1c <USB_EPStartXfer+0x2d0>)
 800cddc:	f850 6022 	ldr.w	r6, [r0, r2, lsl #2]
 800cde0:	4031      	ands	r1, r6
 800cde2:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 800cde6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800cdea:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cdee:	00d2      	lsls	r2, r2, #3
 800cdf0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800cdf4:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800cdf8:	6811      	ldr	r1, [r2, #0]
 800cdfa:	b289      	uxth	r1, r1
 800cdfc:	6011      	str	r1, [r2, #0]
 800cdfe:	6811      	ldr	r1, [r2, #0]
 800ce00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ce04:	6011      	str	r1, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	8922      	ldrh	r2, [r4, #8]
 800ce0a:	6961      	ldr	r1, [r4, #20]
 800ce0c:	f7ff fe6c 	bl	800cae8 <USB_WritePMA>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ce10:	7822      	ldrb	r2, [r4, #0]
 800ce12:	e707      	b.n	800cc24 <USB_EPStartXfer+0xd8>
 800ce14:	07ffbf8f 	.word	0x07ffbf8f
 800ce18:	07ff8f8f 	.word	0x07ff8f8f
 800ce1c:	07ff8e8f 	.word	0x07ff8e8f
 800ce20:	07ff8fbf 	.word	0x07ff8fbf
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce24:	2a01      	cmp	r2, #1
 800ce26:	f47f af5b 	bne.w	800cce0 <USB_EPStartXfer+0x194>
 800ce2a:	7822      	ldrb	r2, [r4, #0]
 800ce2c:	00d2      	lsls	r2, r2, #3
 800ce2e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ce32:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800ce36:	6810      	ldr	r0, [r2, #0]
 800ce38:	b280      	uxth	r0, r0
 800ce3a:	6010      	str	r0, [r2, #0]
 800ce3c:	6810      	ldr	r0, [r2, #0]
 800ce3e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800ce42:	6017      	str	r7, [r2, #0]
 800ce44:	e74c      	b.n	800cce0 <USB_EPStartXfer+0x194>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce46:	2a01      	cmp	r2, #1
 800ce48:	d1c0      	bne.n	800cdcc <USB_EPStartXfer+0x280>
 800ce4a:	7822      	ldrb	r2, [r4, #0]
 800ce4c:	00d2      	lsls	r2, r2, #3
 800ce4e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800ce52:	f502 32b2 	add.w	r2, r2, #91136	; 0x16400
 800ce56:	6850      	ldr	r0, [r2, #4]
 800ce58:	b280      	uxth	r0, r0
 800ce5a:	6050      	str	r0, [r2, #4]
 800ce5c:	6850      	ldr	r0, [r2, #4]
 800ce5e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800ce62:	6050      	str	r0, [r2, #4]
 800ce64:	e7b2      	b.n	800cdcc <USB_EPStartXfer+0x280>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce66:	2f3e      	cmp	r7, #62	; 0x3e
 800ce68:	d816      	bhi.n	800ce98 <USB_EPStartXfer+0x34c>
 800ce6a:	087e      	lsrs	r6, r7, #1
 800ce6c:	6810      	ldr	r0, [r2, #0]
 800ce6e:	07ff      	lsls	r7, r7, #31
 800ce70:	bf48      	it	mi
 800ce72:	3601      	addmi	r6, #1
 800ce74:	ea40 6086 	orr.w	r0, r0, r6, lsl #26
 800ce78:	6010      	str	r0, [r2, #0]
 800ce7a:	e731      	b.n	800cce0 <USB_EPStartXfer+0x194>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce7c:	f1bc 0f3e 	cmp.w	ip, #62	; 0x3e
 800ce80:	d816      	bhi.n	800ceb0 <USB_EPStartXfer+0x364>
 800ce82:	6850      	ldr	r0, [r2, #4]
 800ce84:	ea4f 065c 	mov.w	r6, ip, lsr #1
 800ce88:	f01c 0f01 	tst.w	ip, #1
 800ce8c:	bf18      	it	ne
 800ce8e:	3601      	addne	r6, #1
 800ce90:	ea40 6086 	orr.w	r0, r0, r6, lsl #26
 800ce94:	6050      	str	r0, [r2, #4]
 800ce96:	e799      	b.n	800cdcc <USB_EPStartXfer+0x280>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce98:	097e      	lsrs	r6, r7, #5
 800ce9a:	06f8      	lsls	r0, r7, #27
 800ce9c:	6810      	ldr	r0, [r2, #0]
 800ce9e:	bf08      	it	eq
 800cea0:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 800cea4:	ea40 6086 	orr.w	r0, r0, r6, lsl #26
 800cea8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ceac:	6010      	str	r0, [r2, #0]
 800ceae:	e717      	b.n	800cce0 <USB_EPStartXfer+0x194>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ceb0:	6850      	ldr	r0, [r2, #4]
 800ceb2:	ea4f 165c 	mov.w	r6, ip, lsr #5
 800ceb6:	f01c 0f1f 	tst.w	ip, #31
 800ceba:	bf08      	it	eq
 800cebc:	f106 36ff 	addeq.w	r6, r6, #4294967295	; 0xffffffff
 800cec0:	ea40 6086 	orr.w	r0, r0, r6, lsl #26
 800cec4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800cec8:	6050      	str	r0, [r2, #4]
 800ceca:	e77f      	b.n	800cdcc <USB_EPStartXfer+0x280>

0800cecc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cecc:	b570      	push	{r4, r5, r6, lr}
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
  uint8_t *pBuf = pbUsrBuf;

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800cece:	f102 4e80 	add.w	lr, r2, #1073741824	; 0x40000000
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800ced2:	1cde      	adds	r6, r3, #3

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800ced4:	f013 0503 	ands.w	r5, r3, #3
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800ced8:	ea4f 0696 	mov.w	r6, r6, lsr #2
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800cedc:	f50e 3eb2 	add.w	lr, lr, #91136	; 0x16400
  if (remaining_bytes != 0U)
 800cee0:	d026      	beq.n	800cf30 <USB_ReadPMA+0x64>
  {
    NbWords--;
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800cee2:	3e01      	subs	r6, #1
 800cee4:	d014      	beq.n	800cf10 <USB_ReadPMA+0x44>
 800cee6:	eba1 0c02 	sub.w	ip, r1, r2
{
 800ceea:	4630      	mov	r0, r6
 800ceec:	4672      	mov	r2, lr
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800ceee:	eb02 030c 	add.w	r3, r2, ip
 800cef2:	6814      	ldr	r4, [r2, #0]
 800cef4:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 800cef8:	f5a3 33b2 	sub.w	r3, r3, #91136	; 0x16400
  for (count = NbWords; count != 0U; count--)
 800cefc:	3801      	subs	r0, #1
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800cefe:	601c      	str	r4, [r3, #0]

    pdwVal++;
 800cf00:	f102 0204 	add.w	r2, r2, #4
  for (count = NbWords; count != 0U; count--)
 800cf04:	d1f3      	bne.n	800ceee <USB_ReadPMA+0x22>
    pdwVal++;
 800cf06:	eb0e 0e86 	add.w	lr, lr, r6, lsl #2
    pBuf++;
    pBuf++;
    pBuf++;
    pBuf++;
 800cf0a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800cf0e:	b175      	cbz	r5, 800cf2e <USB_ReadPMA+0x62>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800cf10:	2200      	movs	r2, #0
 800cf12:	1e6b      	subs	r3, r5, #1
 800cf14:	b29b      	uxth	r3, r3
 800cf16:	3301      	adds	r3, #1
 800cf18:	f8de 4000 	ldr.w	r4, [lr]
 800cf1c:	440b      	add	r3, r1

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800cf1e:	fa24 f002 	lsr.w	r0, r4, r2
 800cf22:	f801 0b01 	strb.w	r0, [r1], #1
      count++;
      pBuf++;
      remaining_bytes--;
    } while (remaining_bytes != 0U);
 800cf26:	4299      	cmp	r1, r3
 800cf28:	f102 0208 	add.w	r2, r2, #8
 800cf2c:	d1f7      	bne.n	800cf1e <USB_ReadPMA+0x52>
  }
}
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}
  for (count = NbWords; count != 0U; count--)
 800cf30:	2e00      	cmp	r6, #0
 800cf32:	d1d8      	bne.n	800cee6 <USB_ReadPMA+0x1a>
}
 800cf34:	bd70      	pop	{r4, r5, r6, pc}
 800cf36:	bf00      	nop

0800cf38 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800cf38:	b4f0      	push	{r4, r5, r6, r7}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800cf3a:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_HSION;
 800cf3c:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cf3e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800cf42:	491d      	ldr	r1, [pc, #116]	; (800cfb8 <SystemInit+0x80>)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800cf44:	4c1d      	ldr	r4, [pc, #116]	; (800cfbc <SystemInit+0x84>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800cf46:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  RCC->PLL1DIVR = 0x01010280U;
 800cf4a:	481d      	ldr	r0, [pc, #116]	; (800cfc0 <SystemInit+0x88>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800cf4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cf50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR = RCC_CR_HSION;
 800cf54:	4b1b      	ldr	r3, [pc, #108]	; (800cfc4 <SystemInit+0x8c>)
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800cf56:	4d1c      	ldr	r5, [pc, #112]	; (800cfc8 <SystemInit+0x90>)
  RCC->CR = RCC_CR_HSION;
 800cf58:	601f      	str	r7, [r3, #0]
  RCC->CFGR1 = 0U;
 800cf5a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800cf5c:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800cf5e:	681f      	ldr	r7, [r3, #0]
 800cf60:	403c      	ands	r4, r7
 800cf62:	601c      	str	r4, [r3, #0]
  RCC->PLL1CFGR = 0U;
 800cf64:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800cf66:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 800cf68:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1DIVR = 0x01010280U;
 800cf6a:	6358      	str	r0, [r3, #52]	; 0x34
  RCC->PLL1FRACR = 0x00000000U;
 800cf6c:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2DIVR = 0x01010280U;
 800cf6e:	63d8      	str	r0, [r3, #60]	; 0x3c
  RCC->PLL2FRACR = 0x00000000U;
 800cf70:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3DIVR = 0x01010280U;
 800cf72:	6458      	str	r0, [r3, #68]	; 0x44
  RCC->PLL3FRACR = 0x00000000U;
 800cf74:	649a      	str	r2, [r3, #72]	; 0x48
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800cf76:	6818      	ldr	r0, [r3, #0]
 800cf78:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800cf7c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0U;
 800cf7e:	651a      	str	r2, [r3, #80]	; 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800cf80:	608e      	str	r6, [r1, #8]
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800cf82:	69ab      	ldr	r3, [r5, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800cf84:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800cf88:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800cf8c:	d001      	beq.n	800cf92 <SystemInit+0x5a>
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
  }
}
 800cf8e:	bcf0      	pop	{r4, r5, r6, r7}
 800cf90:	4770      	bx	lr
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800cf92:	69eb      	ldr	r3, [r5, #28]
 800cf94:	07db      	lsls	r3, r3, #31
 800cf96:	d503      	bpl.n	800cfa0 <SystemInit+0x68>
      FLASH->OPTKEYR = 0x08192A3BU;
 800cf98:	4a0c      	ldr	r2, [pc, #48]	; (800cfcc <SystemInit+0x94>)
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	; (800cfd0 <SystemInit+0x98>)
      FLASH->OPTKEYR = 0x08192A3BU;
 800cf9c:	60ea      	str	r2, [r5, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800cf9e:	60eb      	str	r3, [r5, #12]
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800cfa0:	4b09      	ldr	r3, [pc, #36]	; (800cfc8 <SystemInit+0x90>)
}
 800cfa2:	bcf0      	pop	{r4, r5, r6, r7}
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800cfa4:	69da      	ldr	r2, [r3, #28]
 800cfa6:	f042 0202 	orr.w	r2, r2, #2
 800cfaa:	61da      	str	r2, [r3, #28]
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800cfac:	69da      	ldr	r2, [r3, #28]
 800cfae:	f042 0201 	orr.w	r2, r2, #1
 800cfb2:	61da      	str	r2, [r3, #28]
}
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	e000ed00 	.word	0xe000ed00
 800cfbc:	eae2eae3 	.word	0xeae2eae3
 800cfc0:	01010280 	.word	0x01010280
 800cfc4:	44020c00 	.word	0x44020c00
 800cfc8:	40022000 	.word	0x40022000
 800cfcc:	08192a3b 	.word	0x08192a3b
 800cfd0:	4c5d6e7f 	.word	0x4c5d6e7f

0800cfd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800cfd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd8:	4604      	mov	r4, r0
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800cfda:	f7f5 f907 	bl	80021ec <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800cfde:	4a3e      	ldr	r2, [pc, #248]	; (800d0d8 <prvAddNewTaskToReadyList+0x104>)

            if( pxCurrentTCB == NULL )
 800cfe0:	4d3e      	ldr	r5, [pc, #248]	; (800d0dc <prvAddNewTaskToReadyList+0x108>)
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800cfe2:	6813      	ldr	r3, [r2, #0]
 800cfe4:	3301      	adds	r3, #1
 800cfe6:	6013      	str	r3, [r2, #0]
            if( pxCurrentTCB == NULL )
 800cfe8:	682b      	ldr	r3, [r5, #0]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d042      	beq.n	800d074 <prvAddNewTaskToReadyList+0xa0>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800cfee:	4f3c      	ldr	r7, [pc, #240]	; (800d0e0 <prvAddNewTaskToReadyList+0x10c>)
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d036      	beq.n	800d064 <prvAddNewTaskToReadyList+0x90>
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800cff6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800cff8:	4e3a      	ldr	r6, [pc, #232]	; (800d0e4 <prvAddNewTaskToReadyList+0x110>)
 800cffa:	f04f 0e01 	mov.w	lr, #1
 800cffe:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800d002:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800d006:	6841      	ldr	r1, [r0, #4]
 800d008:	fa0e fe02 	lsl.w	lr, lr, r2
            uxTaskNumber++;
 800d00c:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800d0fc <prvAddNewTaskToReadyList+0x128>
            prvAddTaskToReadyList( pxNewTCB );
 800d010:	688a      	ldr	r2, [r1, #8]
 800d012:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800d100 <prvAddNewTaskToReadyList+0x12c>
 800d016:	60e2      	str	r2, [r4, #12]
            uxTaskNumber++;
 800d018:	f8d9 2000 	ldr.w	r2, [r9]
            prvAddTaskToReadyList( pxNewTCB );
 800d01c:	009b      	lsls	r3, r3, #2
            uxTaskNumber++;
 800d01e:	3201      	adds	r2, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d020:	6462      	str	r2, [r4, #68]	; 0x44
            uxTaskNumber++;
 800d022:	f8c9 2000 	str.w	r2, [r9]
            prvAddTaskToReadyList( pxNewTCB );
 800d026:	f8d8 2000 	ldr.w	r2, [r8]
 800d02a:	60a1      	str	r1, [r4, #8]
 800d02c:	ea4e 0202 	orr.w	r2, lr, r2
 800d030:	f8c8 2000 	str.w	r2, [r8]
 800d034:	58f2      	ldr	r2, [r6, r3]
 800d036:	f104 0e04 	add.w	lr, r4, #4
 800d03a:	f102 0c01 	add.w	ip, r2, #1
 800d03e:	688a      	ldr	r2, [r1, #8]
 800d040:	f8c2 e004 	str.w	lr, [r2, #4]
 800d044:	f8c1 e008 	str.w	lr, [r1, #8]
 800d048:	6160      	str	r0, [r4, #20]
 800d04a:	f846 c003 	str.w	ip, [r6, r3]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800d04e:	f7f5 f8db 	bl	8002208 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	b123      	cbz	r3, 800d060 <prvAddNewTaskToReadyList+0x8c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800d056:	682a      	ldr	r2, [r5, #0]
 800d058:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d05a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d311      	bcc.n	800d084 <prvAddNewTaskToReadyList+0xb0>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800d060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d064:	682b      	ldr	r3, [r5, #0]
 800d066:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06a:	4e1e      	ldr	r6, [pc, #120]	; (800d0e4 <prvAddNewTaskToReadyList+0x110>)
 800d06c:	4293      	cmp	r3, r2
                        pxCurrentTCB = pxNewTCB;
 800d06e:	bf98      	it	ls
 800d070:	602c      	strls	r4, [r5, #0]
 800d072:	e7c2      	b.n	800cffa <prvAddNewTaskToReadyList+0x26>
                pxCurrentTCB = pxNewTCB;
 800d074:	602c      	str	r4, [r5, #0]
                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d076:	6813      	ldr	r3, [r2, #0]
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d007      	beq.n	800d08c <prvAddNewTaskToReadyList+0xb8>
            prvAddTaskToReadyList( pxNewTCB );
 800d07c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d07e:	4e19      	ldr	r6, [pc, #100]	; (800d0e4 <prvAddNewTaskToReadyList+0x110>)
 800d080:	4f17      	ldr	r7, [pc, #92]	; (800d0e0 <prvAddNewTaskToReadyList+0x10c>)
 800d082:	e7ba      	b.n	800cffa <prvAddNewTaskToReadyList+0x26>
    }
 800d084:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800d088:	f7f5 b8a4 	b.w	80021d4 <vPortYield>
 800d08c:	4e15      	ldr	r6, [pc, #84]	; (800d0e4 <prvAddNewTaskToReadyList+0x110>)
 800d08e:	4637      	mov	r7, r6
 800d090:	f106 08c8 	add.w	r8, r6, #200	; 0xc8
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d094:	4638      	mov	r0, r7
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d096:	3714      	adds	r7, #20
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d098:	f7f4 ffb4 	bl	8002004 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d09c:	45b8      	cmp	r8, r7
 800d09e:	d1f9      	bne.n	800d094 <prvAddNewTaskToReadyList+0xc0>
    }

    vListInitialise( &xDelayedTaskList1 );
 800d0a0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800d104 <prvAddNewTaskToReadyList+0x130>
    vListInitialise( &xDelayedTaskList2 );
 800d0a4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800d108 <prvAddNewTaskToReadyList+0x134>
    vListInitialise( &xDelayedTaskList1 );
 800d0a8:	4648      	mov	r0, r9
 800d0aa:	f7f4 ffab 	bl	8002004 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800d0ae:	4640      	mov	r0, r8
 800d0b0:	f7f4 ffa8 	bl	8002004 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800d0b4:	480c      	ldr	r0, [pc, #48]	; (800d0e8 <prvAddNewTaskToReadyList+0x114>)
 800d0b6:	f7f4 ffa5 	bl	8002004 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800d0ba:	480c      	ldr	r0, [pc, #48]	; (800d0ec <prvAddNewTaskToReadyList+0x118>)
 800d0bc:	f7f4 ffa2 	bl	8002004 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800d0c0:	480b      	ldr	r0, [pc, #44]	; (800d0f0 <prvAddNewTaskToReadyList+0x11c>)
 800d0c2:	f7f4 ff9f 	bl	8002004 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800d0c6:	4b0b      	ldr	r3, [pc, #44]	; (800d0f4 <prvAddNewTaskToReadyList+0x120>)
 800d0c8:	4f05      	ldr	r7, [pc, #20]	; (800d0e0 <prvAddNewTaskToReadyList+0x10c>)
 800d0ca:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0ce:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <prvAddNewTaskToReadyList+0x124>)
            prvAddTaskToReadyList( pxNewTCB );
 800d0d0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0d2:	f8c3 8000 	str.w	r8, [r3]
}
 800d0d6:	e790      	b.n	800cffa <prvAddNewTaskToReadyList+0x26>
 800d0d8:	2000a2cc 	.word	0x2000a2cc
 800d0dc:	2000a1f8 	.word	0x2000a1f8
 800d0e0:	2000a788 	.word	0x2000a788
 800d0e4:	2000a204 	.word	0x2000a204
 800d0e8:	2000a774 	.word	0x2000a774
 800d0ec:	2000a7a0 	.word	0x2000a7a0
 800d0f0:	2000a78c 	.word	0x2000a78c
 800d0f4:	2000a1fc 	.word	0x2000a1fc
 800d0f8:	2000a200 	.word	0x2000a200
 800d0fc:	2000a4d8 	.word	0x2000a4d8
 800d100:	2000a6dc 	.word	0x2000a6dc
 800d104:	2000a6e0 	.word	0x2000a6e0
 800d108:	2000a6f4 	.word	0x2000a6f4

0800d10c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800d10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    List_t * const pxDelayedList = pxDelayedTaskList;
 800d110:	4a24      	ldr	r2, [pc, #144]	; (800d1a4 <prvAddCurrentTaskToDelayedList+0x98>)
{
 800d112:	4605      	mov	r5, r0
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800d114:	4b24      	ldr	r3, [pc, #144]	; (800d1a8 <prvAddCurrentTaskToDelayedList+0x9c>)
    const TickType_t xConstTickCount = xTickCount;
 800d116:	4825      	ldr	r0, [pc, #148]	; (800d1ac <prvAddCurrentTaskToDelayedList+0xa0>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d118:	4e25      	ldr	r6, [pc, #148]	; (800d1b0 <prvAddCurrentTaskToDelayedList+0xa4>)
    const TickType_t xConstTickCount = xTickCount;
 800d11a:	6804      	ldr	r4, [r0, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800d11c:	f8d2 8000 	ldr.w	r8, [r2]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800d120:	f8d3 9000 	ldr.w	r9, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d124:	6830      	ldr	r0, [r6, #0]
{
 800d126:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d128:	3004      	adds	r0, #4
 800d12a:	f7f4 ff93 	bl	8002054 <uxListRemove>
 800d12e:	b948      	cbnz	r0, 800d144 <prvAddCurrentTaskToDelayedList+0x38>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d130:	2301      	movs	r3, #1
 800d132:	6832      	ldr	r2, [r6, #0]
 800d134:	491f      	ldr	r1, [pc, #124]	; (800d1b4 <prvAddCurrentTaskToDelayedList+0xa8>)
 800d136:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d138:	fa03 f202 	lsl.w	r2, r3, r2
 800d13c:	680b      	ldr	r3, [r1, #0]
 800d13e:	ea23 0302 	bic.w	r3, r3, r2
 800d142:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d144:	1c6b      	adds	r3, r5, #1
 800d146:	d015      	beq.n	800d174 <prvAddCurrentTaskToDelayedList+0x68>
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d148:	6833      	ldr	r3, [r6, #0]
 800d14a:	1964      	adds	r4, r4, r5
            if( xTimeToWake < xConstTickCount )
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800d14c:	6831      	ldr	r1, [r6, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d14e:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800d150:	d20a      	bcs.n	800d168 <prvAddCurrentTaskToDelayedList+0x5c>
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                traceMOVED_TASK_TO_DELAYED_LIST();
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800d152:	4640      	mov	r0, r8
 800d154:	3104      	adds	r1, #4
 800d156:	f7f4 ff65 	bl	8002024 <vListInsert>

                /* If the task entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime
                 * needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
 800d15a:	4b17      	ldr	r3, [pc, #92]	; (800d1b8 <prvAddCurrentTaskToDelayedList+0xac>)
 800d15c:	681a      	ldr	r2, [r3, #0]
 800d15e:	42a2      	cmp	r2, r4
                {
                    xNextTaskUnblockTime = xTimeToWake;
 800d160:	bf88      	it	hi
 800d162:	601c      	strhi	r4, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800d164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800d168:	4648      	mov	r0, r9
}
 800d16a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800d16e:	3104      	adds	r1, #4
 800d170:	f7f4 bf58 	b.w	8002024 <vListInsert>
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d174:	2f00      	cmp	r7, #0
 800d176:	d0e7      	beq.n	800d148 <prvAddCurrentTaskToDelayedList+0x3c>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d178:	4b10      	ldr	r3, [pc, #64]	; (800d1bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800d17a:	6830      	ldr	r0, [r6, #0]
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	6831      	ldr	r1, [r6, #0]
 800d180:	6082      	str	r2, [r0, #8]
 800d182:	6890      	ldr	r0, [r2, #8]
 800d184:	60c8      	str	r0, [r1, #12]
 800d186:	6831      	ldr	r1, [r6, #0]
 800d188:	6890      	ldr	r0, [r2, #8]
 800d18a:	3104      	adds	r1, #4
 800d18c:	6041      	str	r1, [r0, #4]
 800d18e:	6830      	ldr	r0, [r6, #0]
 800d190:	6819      	ldr	r1, [r3, #0]
 800d192:	6834      	ldr	r4, [r6, #0]
 800d194:	3004      	adds	r0, #4
 800d196:	3101      	adds	r1, #1
 800d198:	6090      	str	r0, [r2, #8]
 800d19a:	6019      	str	r1, [r3, #0]
 800d19c:	6163      	str	r3, [r4, #20]
}
 800d19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1a2:	bf00      	nop
 800d1a4:	2000a1fc 	.word	0x2000a1fc
 800d1a8:	2000a200 	.word	0x2000a200
 800d1ac:	2000a7b4 	.word	0x2000a7b4
 800d1b0:	2000a1f8 	.word	0x2000a1f8
 800d1b4:	2000a6dc 	.word	0x2000a6dc
 800d1b8:	2000a768 	.word	0x2000a768
 800d1bc:	2000a78c 	.word	0x2000a78c

0800d1c0 <vTaskSwitchContext.part.0>:
            xYieldPendings[ 0 ] = pdFALSE;
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	4b1d      	ldr	r3, [pc, #116]	; (800d238 <vTaskSwitchContext.part.0+0x78>)
    void vTaskSwitchContext( void )
 800d1c4:	b510      	push	{r4, lr}
            taskCHECK_FOR_STACK_OVERFLOW();
 800d1c6:	4c1d      	ldr	r4, [pc, #116]	; (800d23c <vTaskSwitchContext.part.0+0x7c>)
            xYieldPendings[ 0 ] = pdFALSE;
 800d1c8:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800d1ca:	6823      	ldr	r3, [r4, #0]
 800d1cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800d1d4:	d103      	bne.n	800d1de <vTaskSwitchContext.part.0+0x1e>
 800d1d6:	685a      	ldr	r2, [r3, #4]
 800d1d8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800d1dc:	d022      	beq.n	800d224 <vTaskSwitchContext.part.0+0x64>
 800d1de:	6821      	ldr	r1, [r4, #0]
 800d1e0:	6820      	ldr	r0, [r4, #0]
 800d1e2:	3134      	adds	r1, #52	; 0x34
 800d1e4:	f7f3 ff8a 	bl	80010fc <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800d1e8:	4b15      	ldr	r3, [pc, #84]	; (800d240 <vTaskSwitchContext.part.0+0x80>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 */
    static portFORCE_INLINE uint32_t ulPortCountLeadingZeros( uint32_t ulBitmap )
    {
        uint32_t ulReturn;

        __asm volatile ( "clz %0, %1" : "=r" ( ulReturn ) : "r" ( ulBitmap ) : "memory" );
 800d1ec:	fab3 f383 	clz	r3, r3
 800d1f0:	f1c3 031f 	rsb	r3, r3, #31
 800d1f4:	4a13      	ldr	r2, [pc, #76]	; (800d244 <vTaskSwitchContext.part.0+0x84>)
 800d1f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d1fa:	0099      	lsls	r1, r3, #2
 800d1fc:	5850      	ldr	r0, [r2, r1]
 800d1fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d202:	b160      	cbz	r0, 800d21e <vTaskSwitchContext.part.0+0x5e>
 800d204:	6858      	ldr	r0, [r3, #4]
 800d206:	3108      	adds	r1, #8
 800d208:	6840      	ldr	r0, [r0, #4]
 800d20a:	440a      	add	r2, r1
 800d20c:	4290      	cmp	r0, r2
 800d20e:	6058      	str	r0, [r3, #4]
 800d210:	bf04      	itt	eq
 800d212:	68d8      	ldreq	r0, [r3, #12]
 800d214:	6058      	streq	r0, [r3, #4]
 800d216:	68c3      	ldr	r3, [r0, #12]
 800d218:	6023      	str	r3, [r4, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800d21a:	6823      	ldr	r3, [r4, #0]
    }
 800d21c:	bd10      	pop	{r4, pc}
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800d21e:	f7f5 f93b 	bl	8002498 <ulSetInterruptMask>
 800d222:	e7fe      	b.n	800d222 <vTaskSwitchContext.part.0+0x62>
            taskCHECK_FOR_STACK_OVERFLOW();
 800d224:	689a      	ldr	r2, [r3, #8]
 800d226:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800d22a:	d1d8      	bne.n	800d1de <vTaskSwitchContext.part.0+0x1e>
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800d232:	d1d4      	bne.n	800d1de <vTaskSwitchContext.part.0+0x1e>
 800d234:	e7d8      	b.n	800d1e8 <vTaskSwitchContext.part.0+0x28>
 800d236:	bf00      	nop
 800d238:	2000a814 	.word	0x2000a814
 800d23c:	2000a1f8 	.word	0x2000a1f8
 800d240:	2000a6dc 	.word	0x2000a6dc
 800d244:	2000a204 	.word	0x2000a204

0800d248 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800d248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d24c:	460c      	mov	r4, r1
 800d24e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800d250:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800d254:	4607      	mov	r7, r0
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800d256:	21a5      	movs	r1, #165	; 0xa5
 800d258:	464a      	mov	r2, r9
 800d25a:	6b28      	ldr	r0, [r5, #48]	; 0x30
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800d25c:	4698      	mov	r8, r3
 800d25e:	9e08      	ldr	r6, [sp, #32]
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800d260:	f003 fa94 	bl	801078c <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800d264:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
    if( pcName != NULL )
 800d268:	b174      	cbz	r4, 800d288 <prvInitialiseNewTask.constprop.0+0x40>
 800d26a:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800d26e:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 800d272:	340f      	adds	r4, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d274:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800d278:	f80e 1f01 	strb.w	r1, [lr, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 800d27c:	b109      	cbz	r1, 800d282 <prvInitialiseNewTask.constprop.0+0x3a>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d27e:	45a4      	cmp	ip, r4
 800d280:	d1f8      	bne.n	800d274 <prvInitialiseNewTask.constprop.0+0x2c>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800d282:	2300      	movs	r3, #0
 800d284:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800d288:	2e09      	cmp	r6, #9
 800d28a:	d902      	bls.n	800d292 <prvInitialiseNewTask.constprop.0+0x4a>
 800d28c:	f7f5 f904 	bl	8002498 <ulSetInterruptMask>
 800d290:	e7fe      	b.n	800d290 <prvInitialiseNewTask.constprop.0+0x48>
    pxNewTCB->uxPriority = uxPriority;
 800d292:	62ee      	str	r6, [r5, #44]	; 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 800d294:	64ee      	str	r6, [r5, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d296:	1d28      	adds	r0, r5, #4
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800d298:	f1a9 0904 	sub.w	r9, r9, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d29c:	f7f4 febe 	bl	800201c <vListInitialiseItem>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800d2a0:	44d1      	add	r9, sl
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d2a2:	f105 0018 	add.w	r0, r5, #24
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800d2a6:	f1c6 060a 	rsb	r6, r6, #10
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d2aa:	f7f4 feb7 	bl	800201c <vListInitialiseItem>
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d2ae:	4643      	mov	r3, r8
 800d2b0:	463a      	mov	r2, r7
 800d2b2:	6b29      	ldr	r1, [r5, #48]	; 0x30
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800d2b4:	61ae      	str	r6, [r5, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d2b6:	612d      	str	r5, [r5, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d2b8:	626d      	str	r5, [r5, #36]	; 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d2ba:	f029 0007 	bic.w	r0, r9, #7
 800d2be:	f7f4 ffe5 	bl	800228c <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 800d2c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800d2c4:	6028      	str	r0, [r5, #0]
    if( pxCreatedTask != NULL )
 800d2c6:	b103      	cbz	r3, 800d2ca <prvInitialiseNewTask.constprop.0+0x82>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d2c8:	601d      	str	r5, [r3, #0]
}
 800d2ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ce:	bf00      	nop

0800d2d0 <prvCheckTasksWaitingTermination>:
{
 800d2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d2d2:	4d17      	ldr	r5, [pc, #92]	; (800d330 <prvCheckTasksWaitingTermination+0x60>)
 800d2d4:	682b      	ldr	r3, [r5, #0]
 800d2d6:	b31b      	cbz	r3, 800d320 <prvCheckTasksWaitingTermination+0x50>
 800d2d8:	4f16      	ldr	r7, [pc, #88]	; (800d334 <prvCheckTasksWaitingTermination+0x64>)
 800d2da:	4e17      	ldr	r6, [pc, #92]	; (800d338 <prvCheckTasksWaitingTermination+0x68>)
                taskENTER_CRITICAL();
 800d2dc:	f7f4 ff86 	bl	80021ec <vPortEnterCritical>
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	68dc      	ldr	r4, [r3, #12]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d2e4:	1d20      	adds	r0, r4, #4
 800d2e6:	f7f4 feb5 	bl	8002054 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800d2ea:	6833      	ldr	r3, [r6, #0]
 800d2ec:	3b01      	subs	r3, #1
 800d2ee:	6033      	str	r3, [r6, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	602b      	str	r3, [r5, #0]
                taskEXIT_CRITICAL();
 800d2f6:	f7f4 ff87 	bl	8002208 <vPortExitCritical>
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d2fa:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 800d2fe:	b133      	cbz	r3, 800d30e <prvCheckTasksWaitingTermination+0x3e>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d300:	2b01      	cmp	r3, #1
 800d302:	d00e      	beq.n	800d322 <prvCheckTasksWaitingTermination+0x52>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800d304:	2b02      	cmp	r3, #2
 800d306:	d008      	beq.n	800d31a <prvCheckTasksWaitingTermination+0x4a>
 800d308:	f7f5 f8c6 	bl	8002498 <ulSetInterruptMask>
 800d30c:	e7fe      	b.n	800d30c <prvCheckTasksWaitingTermination+0x3c>
                vPortFreeStack( pxTCB->pxStack );
 800d30e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d310:	f7f4 fdec 	bl	8001eec <vPortFree>
                vPortFree( pxTCB );
 800d314:	4620      	mov	r0, r4
 800d316:	f7f4 fde9 	bl	8001eec <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d31a:	682b      	ldr	r3, [r5, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d1dd      	bne.n	800d2dc <prvCheckTasksWaitingTermination+0xc>
}
 800d320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                vPortFree( pxTCB );
 800d322:	4620      	mov	r0, r4
 800d324:	f7f4 fde2 	bl	8001eec <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d328:	682b      	ldr	r3, [r5, #0]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d1d6      	bne.n	800d2dc <prvCheckTasksWaitingTermination+0xc>
 800d32e:	e7f7      	b.n	800d320 <prvCheckTasksWaitingTermination+0x50>
 800d330:	2000a2d0 	.word	0x2000a2d0
 800d334:	2000a7a0 	.word	0x2000a7a0
 800d338:	2000a2cc 	.word	0x2000a2cc

0800d33c <prvIdleTask>:
{
 800d33c:	b508      	push	{r3, lr}
 800d33e:	4c04      	ldr	r4, [pc, #16]	; (800d350 <prvIdleTask+0x14>)
        prvCheckTasksWaitingTermination();
 800d340:	f7ff ffc6 	bl	800d2d0 <prvCheckTasksWaitingTermination>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800d344:	6823      	ldr	r3, [r4, #0]
 800d346:	2b01      	cmp	r3, #1
 800d348:	d9fa      	bls.n	800d340 <prvIdleTask+0x4>
                taskYIELD();
 800d34a:	f7f4 ff43 	bl	80021d4 <vPortYield>
 800d34e:	e7f7      	b.n	800d340 <prvIdleTask+0x4>
 800d350:	2000a204 	.word	0x2000a204

0800d354 <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800d354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d358:	4b61      	ldr	r3, [pc, #388]	; (800d4e0 <xTaskIncrementTick.part.0+0x18c>)
BaseType_t xTaskIncrementTick( void )
 800d35a:	b085      	sub	sp, #20
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d35c:	681c      	ldr	r4, [r3, #0]
 800d35e:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 800d360:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U )
 800d362:	2c00      	cmp	r4, #0
 800d364:	d07a      	beq.n	800d45c <xTaskIncrementTick.part.0+0x108>
 800d366:	4b5f      	ldr	r3, [pc, #380]	; (800d4e4 <xTaskIncrementTick.part.0+0x190>)
 800d368:	9303      	str	r3, [sp, #12]
        if( xConstTickCount >= xNextTaskUnblockTime )
 800d36a:	9b03      	ldr	r3, [sp, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	429c      	cmp	r4, r3
 800d370:	d37b      	bcc.n	800d46a <xTaskIncrementTick.part.0+0x116>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d372:	4d5d      	ldr	r5, [pc, #372]	; (800d4e8 <xTaskIncrementTick.part.0+0x194>)
 800d374:	682b      	ldr	r3, [r5, #0]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f000 80a8 	beq.w	800d4ce <xTaskIncrementTick.part.0+0x17a>
    BaseType_t xSwitchRequired = pdFALSE;
 800d37e:	f04f 0c00 	mov.w	ip, #0
 800d382:	4b5a      	ldr	r3, [pc, #360]	; (800d4ec <xTaskIncrementTick.part.0+0x198>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d384:	4667      	mov	r7, ip
 800d386:	485a      	ldr	r0, [pc, #360]	; (800d4f0 <xTaskIncrementTick.part.0+0x19c>)
                    prvAddTaskToReadyList( pxTCB );
 800d388:	4e5a      	ldr	r6, [pc, #360]	; (800d4f4 <xTaskIncrementTick.part.0+0x1a0>)
 800d38a:	9301      	str	r3, [sp, #4]
 800d38c:	9402      	str	r4, [sp, #8]
 800d38e:	e058      	b.n	800d442 <xTaskIncrementTick.part.0+0xee>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d390:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800d394:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 800d398:	f8c2 9008 	str.w	r9, [r2, #8]
 800d39c:	f8c9 2004 	str.w	r2, [r9, #4]
 800d3a0:	f8de 2004 	ldr.w	r2, [lr, #4]
 800d3a4:	428a      	cmp	r2, r1
 800d3a6:	f8de 2000 	ldr.w	r2, [lr]
 800d3aa:	bf08      	it	eq
 800d3ac:	f8ce 9004 	streq.w	r9, [lr, #4]
 800d3b0:	3a01      	subs	r2, #1
 800d3b2:	615f      	str	r7, [r3, #20]
 800d3b4:	f8ce 2000 	str.w	r2, [lr]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3b8:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
 800d3bc:	f1be 0f00 	cmp.w	lr, #0
 800d3c0:	d012      	beq.n	800d3e8 <xTaskIncrementTick.part.0+0x94>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d3c2:	e9d3 9207 	ldrd	r9, r2, [r3, #28]
 800d3c6:	f8de 4004 	ldr.w	r4, [lr, #4]
 800d3ca:	f8c9 2008 	str.w	r2, [r9, #8]
 800d3ce:	6a1a      	ldr	r2, [r3, #32]
 800d3d0:	4544      	cmp	r4, r8
 800d3d2:	f8c2 9004 	str.w	r9, [r2, #4]
 800d3d6:	bf08      	it	eq
 800d3d8:	f8ce 2004 	streq.w	r2, [lr, #4]
 800d3dc:	f8de 2000 	ldr.w	r2, [lr]
 800d3e0:	629f      	str	r7, [r3, #40]	; 0x28
 800d3e2:	3a01      	subs	r2, #1
 800d3e4:	f8ce 2000 	str.w	r2, [lr]
                    prvAddTaskToReadyList( pxTCB );
 800d3e8:	2401      	movs	r4, #1
 800d3ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ec:	f8d6 b000 	ldr.w	fp, [r6]
 800d3f0:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 800d3f4:	eb00 0988 	add.w	r9, r0, r8, lsl #2
 800d3f8:	f8d9 e004 	ldr.w	lr, [r9, #4]
 800d3fc:	fa04 fa02 	lsl.w	sl, r4, r2
 800d400:	f8de 4008 	ldr.w	r4, [lr, #8]
 800d404:	ea4a 0a0b 	orr.w	sl, sl, fp
 800d408:	60dc      	str	r4, [r3, #12]
 800d40a:	f850 4028 	ldr.w	r4, [r0, r8, lsl #2]
 800d40e:	f8c6 a000 	str.w	sl, [r6]
 800d412:	f104 0a01 	add.w	sl, r4, #1
 800d416:	f8de 4008 	ldr.w	r4, [lr, #8]
 800d41a:	f8c3 e008 	str.w	lr, [r3, #8]
 800d41e:	6061      	str	r1, [r4, #4]
 800d420:	f8ce 1008 	str.w	r1, [lr, #8]
 800d424:	f8c3 9014 	str.w	r9, [r3, #20]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d428:	9b01      	ldr	r3, [sp, #4]
                    prvAddTaskToReadyList( pxTCB );
 800d42a:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d42e:	6819      	ldr	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d430:	682b      	ldr	r3, [r5, #0]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d432:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d434:	681b      	ldr	r3, [r3, #0]
                                xSwitchRequired = pdTRUE;
 800d436:	428a      	cmp	r2, r1
 800d438:	bf88      	it	hi
 800d43a:	f04f 0c01 	movhi.w	ip, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d049      	beq.n	800d4d6 <xTaskIncrementTick.part.0+0x182>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d442:	682b      	ldr	r3, [r5, #0]
                    if( xConstTickCount < xItemValue )
 800d444:	9c02      	ldr	r4, [sp, #8]
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d44a:	685a      	ldr	r2, [r3, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d44c:	1d19      	adds	r1, r3, #4
                    if( xConstTickCount < xItemValue )
 800d44e:	4294      	cmp	r4, r2
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d450:	f103 0818 	add.w	r8, r3, #24
                    if( xConstTickCount < xItemValue )
 800d454:	d29c      	bcs.n	800d390 <xTaskIncrementTick.part.0+0x3c>
                        xNextTaskUnblockTime = xItemValue;
 800d456:	9b03      	ldr	r3, [sp, #12]
 800d458:	601a      	str	r2, [r3, #0]
                        break;
 800d45a:	e00b      	b.n	800d474 <xTaskIncrementTick.part.0+0x120>
            taskSWITCH_DELAYED_LISTS();
 800d45c:	4b22      	ldr	r3, [pc, #136]	; (800d4e8 <xTaskIncrementTick.part.0+0x194>)
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	6812      	ldr	r2, [r2, #0]
 800d462:	b1da      	cbz	r2, 800d49c <xTaskIncrementTick.part.0+0x148>
 800d464:	f7f5 f818 	bl	8002498 <ulSetInterruptMask>
 800d468:	e7fe      	b.n	800d468 <xTaskIncrementTick.part.0+0x114>
    BaseType_t xSwitchRequired = pdFALSE;
 800d46a:	f04f 0c00 	mov.w	ip, #0
 800d46e:	4b1f      	ldr	r3, [pc, #124]	; (800d4ec <xTaskIncrementTick.part.0+0x198>)
 800d470:	481f      	ldr	r0, [pc, #124]	; (800d4f0 <xTaskIncrementTick.part.0+0x19c>)
 800d472:	9301      	str	r3, [sp, #4]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800d474:	9b01      	ldr	r3, [sp, #4]
                if( xYieldPendings[ 0 ] != pdFALSE )
 800d476:	4a20      	ldr	r2, [pc, #128]	; (800d4f8 <xTaskIncrementTick.part.0+0x1a4>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800d478:	681b      	ldr	r3, [r3, #0]
                if( xYieldPendings[ 0 ] != pdFALSE )
 800d47a:	6812      	ldr	r2, [r2, #0]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800d47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d47e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d482:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                    xSwitchRequired = pdTRUE;
 800d486:	2b02      	cmp	r3, #2
 800d488:	bf28      	it	cs
 800d48a:	f04f 0c01 	movcs.w	ip, #1
                    xSwitchRequired = pdTRUE;
 800d48e:	2a00      	cmp	r2, #0
}
 800d490:	bf0c      	ite	eq
 800d492:	4660      	moveq	r0, ip
 800d494:	2001      	movne	r0, #1
 800d496:	b005      	add	sp, #20
 800d498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
 800d49c:	4a17      	ldr	r2, [pc, #92]	; (800d4fc <xTaskIncrementTick.part.0+0x1a8>)
 800d49e:	6818      	ldr	r0, [r3, #0]
 800d4a0:	6811      	ldr	r1, [r2, #0]
 800d4a2:	6019      	str	r1, [r3, #0]
 800d4a4:	4916      	ldr	r1, [pc, #88]	; (800d500 <xTaskIncrementTick.part.0+0x1ac>)
 800d4a6:	6010      	str	r0, [r2, #0]
 800d4a8:	680a      	ldr	r2, [r1, #0]
 800d4aa:	3201      	adds	r2, #1
 800d4ac:	600a      	str	r2, [r1, #0]
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	6812      	ldr	r2, [r2, #0]
 800d4b2:	b92a      	cbnz	r2, 800d4c0 <xTaskIncrementTick.part.0+0x16c>
        xNextTaskUnblockTime = portMAX_DELAY;
 800d4b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4b8:	4a0a      	ldr	r2, [pc, #40]	; (800d4e4 <xTaskIncrementTick.part.0+0x190>)
 800d4ba:	9203      	str	r2, [sp, #12]
 800d4bc:	6013      	str	r3, [r2, #0]
 800d4be:	e754      	b.n	800d36a <xTaskIncrementTick.part.0+0x16>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a08      	ldr	r2, [pc, #32]	; (800d4e4 <xTaskIncrementTick.part.0+0x190>)
 800d4c4:	68db      	ldr	r3, [r3, #12]
 800d4c6:	9203      	str	r2, [sp, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	6013      	str	r3, [r2, #0]
}
 800d4cc:	e74d      	b.n	800d36a <xTaskIncrementTick.part.0+0x16>
    BaseType_t xSwitchRequired = pdFALSE;
 800d4ce:	469c      	mov	ip, r3
 800d4d0:	4b06      	ldr	r3, [pc, #24]	; (800d4ec <xTaskIncrementTick.part.0+0x198>)
 800d4d2:	4807      	ldr	r0, [pc, #28]	; (800d4f0 <xTaskIncrementTick.part.0+0x19c>)
 800d4d4:	9301      	str	r3, [sp, #4]
                    xNextTaskUnblockTime = portMAX_DELAY;
 800d4d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4da:	9a03      	ldr	r2, [sp, #12]
 800d4dc:	6013      	str	r3, [r2, #0]
                    break;
 800d4de:	e7c9      	b.n	800d474 <xTaskIncrementTick.part.0+0x120>
 800d4e0:	2000a7b4 	.word	0x2000a7b4
 800d4e4:	2000a768 	.word	0x2000a768
 800d4e8:	2000a1fc 	.word	0x2000a1fc
 800d4ec:	2000a1f8 	.word	0x2000a1f8
 800d4f0:	2000a204 	.word	0x2000a204
 800d4f4:	2000a6dc 	.word	0x2000a6dc
 800d4f8:	2000a814 	.word	0x2000a814
 800d4fc:	2000a200 	.word	0x2000a200
 800d500:	2000a76c 	.word	0x2000a76c

0800d504 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800d504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800d508:	4f53      	ldr	r7, [pc, #332]	; (800d658 <xTaskResumeAll.part.0+0x154>)
BaseType_t xTaskResumeAll( void )
 800d50a:	b083      	sub	sp, #12
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	3b01      	subs	r3, #1
 800d510:	603b      	str	r3, [r7, #0]
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d512:	f8d7 8000 	ldr.w	r8, [r7]
 800d516:	f1b8 0f00 	cmp.w	r8, #0
 800d51a:	f040 808d 	bne.w	800d638 <xTaskResumeAll.part.0+0x134>
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d51e:	4b4f      	ldr	r3, [pc, #316]	; (800d65c <xTaskResumeAll.part.0+0x158>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	f000 8088 	beq.w	800d638 <xTaskResumeAll.part.0+0x134>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d528:	f8df c14c 	ldr.w	ip, [pc, #332]	; 800d678 <xTaskResumeAll.part.0+0x174>
 800d52c:	f8dc 3000 	ldr.w	r3, [ip]
 800d530:	2b00      	cmp	r3, #0
 800d532:	f000 808e 	beq.w	800d652 <xTaskResumeAll.part.0+0x14e>
                        prvAddTaskToReadyList( pxTCB );
 800d536:	f04f 0b01 	mov.w	fp, #1
 800d53a:	46c2      	mov	sl, r8
 800d53c:	4b48      	ldr	r3, [pc, #288]	; (800d660 <xTaskResumeAll.part.0+0x15c>)
 800d53e:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800d67c <xTaskResumeAll.part.0+0x178>
 800d542:	4d48      	ldr	r5, [pc, #288]	; (800d664 <xTaskResumeAll.part.0+0x160>)
 800d544:	9301      	str	r3, [sp, #4]
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d546:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800d54a:	68db      	ldr	r3, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800d54c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d54e:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 800d552:	6081      	str	r1, [r0, #8]
 800d554:	6048      	str	r0, [r1, #4]
 800d556:	6850      	ldr	r0, [r2, #4]
 800d558:	f103 0418 	add.w	r4, r3, #24
 800d55c:	42a0      	cmp	r0, r4
 800d55e:	bf08      	it	eq
 800d560:	6051      	streq	r1, [r2, #4]
 800d562:	6811      	ldr	r1, [r2, #0]
 800d564:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
 800d568:	3901      	subs	r1, #1
 800d56a:	6011      	str	r1, [r2, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d56c:	6958      	ldr	r0, [r3, #20]
 800d56e:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 800d572:	6091      	str	r1, [r2, #8]
 800d574:	604a      	str	r2, [r1, #4]
 800d576:	6842      	ldr	r2, [r0, #4]
 800d578:	1d1e      	adds	r6, r3, #4
 800d57a:	42b2      	cmp	r2, r6
 800d57c:	bf08      	it	eq
 800d57e:	6041      	streq	r1, [r0, #4]
 800d580:	6801      	ldr	r1, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 800d582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800d584:	3901      	subs	r1, #1
 800d586:	6001      	str	r1, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 800d588:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800d58c:	f8de 9000 	ldr.w	r9, [lr]
 800d590:	eb05 0880 	add.w	r8, r5, r0, lsl #2
 800d594:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d598:	fa0b f402 	lsl.w	r4, fp, r2
 800d59c:	ea44 0409 	orr.w	r4, r4, r9
 800d5a0:	f8ce 4000 	str.w	r4, [lr]
 800d5a4:	688c      	ldr	r4, [r1, #8]
 800d5a6:	6099      	str	r1, [r3, #8]
 800d5a8:	60dc      	str	r4, [r3, #12]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5aa:	4c2f      	ldr	r4, [pc, #188]	; (800d668 <xTaskResumeAll.part.0+0x164>)
 800d5ac:	6824      	ldr	r4, [r4, #0]
 800d5ae:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                        prvAddTaskToReadyList( pxTCB );
 800d5b2:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d5b6:	454a      	cmp	r2, r9
                        prvAddTaskToReadyList( pxTCB );
 800d5b8:	f104 0401 	add.w	r4, r4, #1
 800d5bc:	9400      	str	r4, [sp, #0]
 800d5be:	688c      	ldr	r4, [r1, #8]
 800d5c0:	6066      	str	r6, [r4, #4]
 800d5c2:	608e      	str	r6, [r1, #8]
 800d5c4:	f8c3 8014 	str.w	r8, [r3, #20]
 800d5c8:	9b00      	ldr	r3, [sp, #0]
 800d5ca:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800d5ce:	bf84      	itt	hi
 800d5d0:	9b01      	ldrhi	r3, [sp, #4]
 800d5d2:	f8c3 b000 	strhi.w	fp, [r3]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d1b3      	bne.n	800d546 <xTaskResumeAll.part.0+0x42>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5de:	4b23      	ldr	r3, [pc, #140]	; (800d66c <xTaskResumeAll.part.0+0x168>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	6812      	ldr	r2, [r2, #0]
 800d5e4:	2a00      	cmp	r2, #0
 800d5e6:	d02f      	beq.n	800d648 <xTaskResumeAll.part.0+0x144>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	4b21      	ldr	r3, [pc, #132]	; (800d670 <xTaskResumeAll.part.0+0x16c>)
 800d5ec:	68d2      	ldr	r2, [r2, #12]
 800d5ee:	6812      	ldr	r2, [r2, #0]
 800d5f0:	601a      	str	r2, [r3, #0]
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d5f2:	4d20      	ldr	r5, [pc, #128]	; (800d674 <xTaskResumeAll.part.0+0x170>)
 800d5f4:	682c      	ldr	r4, [r5, #0]
                        if( xPendedCounts > ( TickType_t ) 0U )
 800d5f6:	b1a4      	cbz	r4, 800d622 <xTaskResumeAll.part.0+0x11e>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800d5f8:	2601      	movs	r6, #1
 800d5fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d5fe:	e006      	b.n	800d60e <xTaskResumeAll.part.0+0x10a>
 800d600:	f7ff fea8 	bl	800d354 <xTaskIncrementTick.part.0>
                                if( xTaskIncrementTick() != pdFALSE )
 800d604:	b108      	cbz	r0, 800d60a <xTaskResumeAll.part.0+0x106>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800d606:	f8c8 6000 	str.w	r6, [r8]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800d60a:	3c01      	subs	r4, #1
 800d60c:	d008      	beq.n	800d620 <xTaskResumeAll.part.0+0x11c>
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d0f5      	beq.n	800d600 <xTaskResumeAll.part.0+0xfc>
        xPendedTicks += 1U;
 800d614:	682b      	ldr	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800d616:	3c01      	subs	r4, #1
        xPendedTicks += 1U;
 800d618:	f103 0301 	add.w	r3, r3, #1
 800d61c:	602b      	str	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800d61e:	d1f6      	bne.n	800d60e <xTaskResumeAll.part.0+0x10a>
                            xPendedTicks = 0;
 800d620:	602c      	str	r4, [r5, #0]
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800d622:	9b01      	ldr	r3, [sp, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	b13b      	cbz	r3, 800d638 <xTaskResumeAll.part.0+0x134>
                            xAlreadyYielded = pdTRUE;
 800d628:	2001      	movs	r0, #1
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800d62a:	4b0f      	ldr	r3, [pc, #60]	; (800d668 <xTaskResumeAll.part.0+0x164>)
                            xAlreadyYielded = pdTRUE;
 800d62c:	9000      	str	r0, [sp, #0]
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f7f4 fdd0 	bl	80021d4 <vPortYield>
 800d634:	9800      	ldr	r0, [sp, #0]
 800d636:	e000      	b.n	800d63a <xTaskResumeAll.part.0+0x136>
    BaseType_t xAlreadyYielded = pdFALSE;
 800d638:	2000      	movs	r0, #0
 800d63a:	9000      	str	r0, [sp, #0]
        taskEXIT_CRITICAL();
 800d63c:	f7f4 fde4 	bl	8002208 <vPortExitCritical>
}
 800d640:	9800      	ldr	r0, [sp, #0]
 800d642:	b003      	add	sp, #12
 800d644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xNextTaskUnblockTime = portMAX_DELAY;
 800d648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d64c:	4b08      	ldr	r3, [pc, #32]	; (800d670 <xTaskResumeAll.part.0+0x16c>)
 800d64e:	601a      	str	r2, [r3, #0]
 800d650:	e7cf      	b.n	800d5f2 <xTaskResumeAll.part.0+0xee>
 800d652:	4b03      	ldr	r3, [pc, #12]	; (800d660 <xTaskResumeAll.part.0+0x15c>)
 800d654:	9301      	str	r3, [sp, #4]
 800d656:	e7cc      	b.n	800d5f2 <xTaskResumeAll.part.0+0xee>
 800d658:	2000a4d4 	.word	0x2000a4d4
 800d65c:	2000a2cc 	.word	0x2000a2cc
 800d660:	2000a814 	.word	0x2000a814
 800d664:	2000a204 	.word	0x2000a204
 800d668:	2000a1f8 	.word	0x2000a1f8
 800d66c:	2000a1fc 	.word	0x2000a1fc
 800d670:	2000a768 	.word	0x2000a768
 800d674:	2000a770 	.word	0x2000a770
 800d678:	2000a774 	.word	0x2000a774
 800d67c:	2000a6dc 	.word	0x2000a6dc

0800d680 <xTaskCreateStatic>:
    {
 800d680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        TaskHandle_t xReturn = NULL;
 800d684:	2700      	movs	r7, #0
    {
 800d686:	b087      	sub	sp, #28
 800d688:	4698      	mov	r8, r3
        configASSERT( puxStackBuffer != NULL );
 800d68a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    {
 800d68c:	9e10      	ldr	r6, [sp, #64]	; 0x40
        TaskHandle_t xReturn = NULL;
 800d68e:	9704      	str	r7, [sp, #16]
        configASSERT( puxStackBuffer != NULL );
 800d690:	b33b      	cbz	r3, 800d6e2 <xTaskCreateStatic+0x62>
        configASSERT( pxTaskBuffer != NULL );
 800d692:	b34e      	cbz	r6, 800d6e8 <xTaskCreateStatic+0x68>
 800d694:	4691      	mov	r9, r2
            volatile size_t xSize = sizeof( StaticTask_t );
 800d696:	225c      	movs	r2, #92	; 0x5c
 800d698:	9205      	str	r2, [sp, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800d69a:	9a05      	ldr	r2, [sp, #20]
 800d69c:	2a5c      	cmp	r2, #92	; 0x5c
 800d69e:	d002      	beq.n	800d6a6 <xTaskCreateStatic+0x26>
 800d6a0:	f7f4 fefa 	bl	8002498 <ulSetInterruptMask>
 800d6a4:	e7fe      	b.n	800d6a4 <xTaskCreateStatic+0x24>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	460d      	mov	r5, r1
 800d6aa:	9805      	ldr	r0, [sp, #20]
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d6ac:	4639      	mov	r1, r7
 800d6ae:	4630      	mov	r0, r6
 800d6b0:	f003 f86c 	bl	801078c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6b6:	4620      	mov	r0, r4
 800d6b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6ba:	6333      	str	r3, [r6, #48]	; 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6bc:	9400      	str	r4, [sp, #0]
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6be:	2402      	movs	r4, #2
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6c0:	9602      	str	r6, [sp, #8]
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6c2:	f886 4059 	strb.w	r4, [r6, #89]	; 0x59
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d6c6:	ac04      	add	r4, sp, #16
 800d6c8:	4643      	mov	r3, r8
 800d6ca:	464a      	mov	r2, r9
 800d6cc:	4629      	mov	r1, r5
 800d6ce:	9401      	str	r4, [sp, #4]
 800d6d0:	f7ff fdba 	bl	800d248 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d6d4:	4630      	mov	r0, r6
 800d6d6:	f7ff fc7d 	bl	800cfd4 <prvAddNewTaskToReadyList>
    }
 800d6da:	9804      	ldr	r0, [sp, #16]
 800d6dc:	b007      	add	sp, #28
 800d6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        configASSERT( puxStackBuffer != NULL );
 800d6e2:	f7f4 fed9 	bl	8002498 <ulSetInterruptMask>
 800d6e6:	e7fe      	b.n	800d6e6 <xTaskCreateStatic+0x66>
        configASSERT( pxTaskBuffer != NULL );
 800d6e8:	f7f4 fed6 	bl	8002498 <ulSetInterruptMask>
 800d6ec:	e7fe      	b.n	800d6ec <xTaskCreateStatic+0x6c>
 800d6ee:	bf00      	nop

0800d6f0 <xTaskCreate>:
    {
 800d6f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6f4:	4607      	mov	r7, r0
 800d6f6:	b085      	sub	sp, #20
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800d6f8:	0090      	lsls	r0, r2, #2
    {
 800d6fa:	4616      	mov	r6, r2
 800d6fc:	4688      	mov	r8, r1
 800d6fe:	4699      	mov	r9, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800d700:	f7f4 fb42 	bl	8001d88 <pvPortMalloc>
            if( pxStack != NULL )
 800d704:	b1e0      	cbz	r0, 800d740 <xTaskCreate+0x50>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800d706:	4604      	mov	r4, r0
 800d708:	205c      	movs	r0, #92	; 0x5c
 800d70a:	f7f4 fb3d 	bl	8001d88 <pvPortMalloc>
                if( pxNewTCB != NULL )
 800d70e:	4605      	mov	r5, r0
 800d710:	b1d8      	cbz	r0, 800d74a <xTaskCreate+0x5a>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800d712:	225c      	movs	r2, #92	; 0x5c
 800d714:	2100      	movs	r1, #0
 800d716:	f003 f839 	bl	801078c <memset>
                    pxNewTCB->pxStack = pxStack;
 800d71a:	632c      	str	r4, [r5, #48]	; 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d71c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800d71e:	464b      	mov	r3, r9
 800d720:	9401      	str	r4, [sp, #4]
 800d722:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d724:	4632      	mov	r2, r6
 800d726:	4641      	mov	r1, r8
 800d728:	4638      	mov	r0, r7
 800d72a:	9502      	str	r5, [sp, #8]
 800d72c:	9400      	str	r4, [sp, #0]
 800d72e:	f7ff fd8b 	bl	800d248 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
 800d732:	4628      	mov	r0, r5
 800d734:	f7ff fc4e 	bl	800cfd4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800d738:	2001      	movs	r0, #1
    }
 800d73a:	b005      	add	sp, #20
 800d73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 800d744:	b005      	add	sp, #20
 800d746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    vPortFreeStack( pxStack );
 800d74a:	4620      	mov	r0, r4
 800d74c:	f7f4 fbce 	bl	8001eec <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 800d754:	b005      	add	sp, #20
 800d756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d75a:	bf00      	nop

0800d75c <vTaskDelay>:
        if( xTicksToDelay > ( TickType_t ) 0U )
 800d75c:	b1e0      	cbz	r0, 800d798 <vTaskDelay+0x3c>
    {
 800d75e:	b510      	push	{r4, lr}
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800d760:	4c0e      	ldr	r4, [pc, #56]	; (800d79c <vTaskDelay+0x40>)
 800d762:	6823      	ldr	r3, [r4, #0]
 800d764:	3301      	adds	r3, #1
 800d766:	6023      	str	r3, [r4, #0]
                configASSERT( uxSchedulerSuspended == 1U );
 800d768:	6823      	ldr	r3, [r4, #0]
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d002      	beq.n	800d774 <vTaskDelay+0x18>
 800d76e:	f7f4 fe93 	bl	8002498 <ulSetInterruptMask>
 800d772:	e7fe      	b.n	800d772 <vTaskDelay+0x16>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d774:	2100      	movs	r1, #0
 800d776:	f7ff fcc9 	bl	800d10c <prvAddCurrentTaskToDelayedList>
        taskENTER_CRITICAL();
 800d77a:	f7f4 fd37 	bl	80021ec <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 800d77e:	6823      	ldr	r3, [r4, #0]
 800d780:	b11b      	cbz	r3, 800d78a <vTaskDelay+0x2e>
 800d782:	f7ff febf 	bl	800d504 <xTaskResumeAll.part.0>
        if( xAlreadyYielded == pdFALSE )
 800d786:	b118      	cbz	r0, 800d790 <vTaskDelay+0x34>
    }
 800d788:	bd10      	pop	{r4, pc}
            configASSERT( uxSchedulerSuspended != 0U );
 800d78a:	f7f4 fe85 	bl	8002498 <ulSetInterruptMask>
 800d78e:	e7fe      	b.n	800d78e <vTaskDelay+0x32>
    }
 800d790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            taskYIELD_WITHIN_API();
 800d794:	f7f4 bd1e 	b.w	80021d4 <vPortYield>
 800d798:	f7f4 bd1c 	b.w	80021d4 <vPortYield>
 800d79c:	2000a4d4 	.word	0x2000a4d4

0800d7a0 <vTaskStartScheduler>:
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800d7a0:	2149      	movs	r1, #73	; 0x49
{
 800d7a2:	b530      	push	{r4, r5, lr}
 800d7a4:	4a19      	ldr	r2, [pc, #100]	; (800d80c <vTaskStartScheduler+0x6c>)
 800d7a6:	b089      	sub	sp, #36	; 0x24
 800d7a8:	f10d 0311 	add.w	r3, sp, #17
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800d7ac:	f88d 1010 	strb.w	r1, [sp, #16]
 800d7b0:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800d7b4:	f803 4b01 	strb.w	r4, [r3], #1
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800d7b8:	2c00      	cmp	r4, #0
 800d7ba:	d1f9      	bne.n	800d7b0 <vTaskStartScheduler+0x10>
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800d7bc:	4814      	ldr	r0, [pc, #80]	; (800d810 <vTaskStartScheduler+0x70>)
 800d7be:	4915      	ldr	r1, [pc, #84]	; (800d814 <vTaskStartScheduler+0x74>)
 800d7c0:	4623      	mov	r3, r4
 800d7c2:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800d7c6:	2280      	movs	r2, #128	; 0x80
 800d7c8:	4813      	ldr	r0, [pc, #76]	; (800d818 <vTaskStartScheduler+0x78>)
 800d7ca:	9400      	str	r4, [sp, #0]
 800d7cc:	a904      	add	r1, sp, #16
 800d7ce:	f7ff ff57 	bl	800d680 <xTaskCreateStatic>
 800d7d2:	4b12      	ldr	r3, [pc, #72]	; (800d81c <vTaskStartScheduler+0x7c>)
 800d7d4:	6018      	str	r0, [r3, #0]
            if( xIdleTaskHandles[ xCoreID ] != NULL )
 800d7d6:	b180      	cbz	r0, 800d7fa <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800d7d8:	f000 fc30 	bl	800e03c <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 800d7dc:	2801      	cmp	r0, #1
            xReturn = xTimerCreateTimerTask();
 800d7de:	4605      	mov	r5, r0
    if( xReturn == pdPASS )
 800d7e0:	d10f      	bne.n	800d802 <vTaskStartScheduler+0x62>
        portDISABLE_INTERRUPTS();
 800d7e2:	f7f4 fe59 	bl	8002498 <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
 800d7e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7ea:	490d      	ldr	r1, [pc, #52]	; (800d820 <vTaskStartScheduler+0x80>)
        xSchedulerRunning = pdTRUE;
 800d7ec:	4a0d      	ldr	r2, [pc, #52]	; (800d824 <vTaskStartScheduler+0x84>)
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7ee:	4b0e      	ldr	r3, [pc, #56]	; (800d828 <vTaskStartScheduler+0x88>)
        xNextTaskUnblockTime = portMAX_DELAY;
 800d7f0:	6008      	str	r0, [r1, #0]
        xSchedulerRunning = pdTRUE;
 800d7f2:	6015      	str	r5, [r2, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d7f4:	601c      	str	r4, [r3, #0]
        ( void ) xPortStartScheduler();
 800d7f6:	f7f4 fd87 	bl	8002308 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 800d7fa:	4b0c      	ldr	r3, [pc, #48]	; (800d82c <vTaskStartScheduler+0x8c>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
}
 800d7fe:	b009      	add	sp, #36	; 0x24
 800d800:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d802:	3501      	adds	r5, #1
 800d804:	d1f9      	bne.n	800d7fa <vTaskStartScheduler+0x5a>
 800d806:	f7f4 fe47 	bl	8002498 <ulSetInterruptMask>
 800d80a:	e7fe      	b.n	800d80a <vTaskStartScheduler+0x6a>
 800d80c:	08011af0 	.word	0x08011af0
 800d810:	2000a70c 	.word	0x2000a70c
 800d814:	2000a2d4 	.word	0x2000a2d4
 800d818:	0800d33d 	.word	0x0800d33d
 800d81c:	2000a708 	.word	0x2000a708
 800d820:	2000a768 	.word	0x2000a768
 800d824:	2000a788 	.word	0x2000a788
 800d828:	2000a7b4 	.word	0x2000a7b4
 800d82c:	200001b8 	.word	0x200001b8

0800d830 <vTaskSuspendAll>:
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800d830:	4a02      	ldr	r2, [pc, #8]	; (800d83c <vTaskSuspendAll+0xc>)
 800d832:	6813      	ldr	r3, [r2, #0]
 800d834:	3301      	adds	r3, #1
 800d836:	6013      	str	r3, [r2, #0]
}
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	2000a4d4 	.word	0x2000a4d4

0800d840 <xTaskResumeAll>:
{
 800d840:	b508      	push	{r3, lr}
        taskENTER_CRITICAL();
 800d842:	f7f4 fcd3 	bl	80021ec <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 800d846:	4b05      	ldr	r3, [pc, #20]	; (800d85c <xTaskResumeAll+0x1c>)
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	b11b      	cbz	r3, 800d854 <xTaskResumeAll+0x14>
}
 800d84c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800d850:	f7ff be58 	b.w	800d504 <xTaskResumeAll.part.0>
            configASSERT( uxSchedulerSuspended != 0U );
 800d854:	f7f4 fe20 	bl	8002498 <ulSetInterruptMask>
 800d858:	e7fe      	b.n	800d858 <xTaskResumeAll+0x18>
 800d85a:	bf00      	nop
 800d85c:	2000a4d4 	.word	0x2000a4d4

0800d860 <xTaskGetTickCount>:
        xTicks = xTickCount;
 800d860:	4b01      	ldr	r3, [pc, #4]	; (800d868 <xTaskGetTickCount+0x8>)
 800d862:	6818      	ldr	r0, [r3, #0]
}
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	2000a7b4 	.word	0x2000a7b4

0800d86c <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 800d86c:	4b01      	ldr	r3, [pc, #4]	; (800d874 <uxTaskGetNumberOfTasks+0x8>)
 800d86e:	6818      	ldr	r0, [r3, #0]
}
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	2000a2cc 	.word	0x2000a2cc

0800d878 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d878:	4b05      	ldr	r3, [pc, #20]	; (800d890 <xTaskIncrementTick+0x18>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	b90b      	cbnz	r3, 800d882 <xTaskIncrementTick+0xa>
 800d87e:	f7ff bd69 	b.w	800d354 <xTaskIncrementTick.part.0>
        xPendedTicks += 1U;
 800d882:	4a04      	ldr	r2, [pc, #16]	; (800d894 <xTaskIncrementTick+0x1c>)
}
 800d884:	2000      	movs	r0, #0
        xPendedTicks += 1U;
 800d886:	6813      	ldr	r3, [r2, #0]
 800d888:	3301      	adds	r3, #1
 800d88a:	6013      	str	r3, [r2, #0]
}
 800d88c:	4770      	bx	lr
 800d88e:	bf00      	nop
 800d890:	2000a4d4 	.word	0x2000a4d4
 800d894:	2000a770 	.word	0x2000a770

0800d898 <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800d898:	4b04      	ldr	r3, [pc, #16]	; (800d8ac <vTaskSwitchContext+0x14>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	b11b      	cbz	r3, 800d8a6 <vTaskSwitchContext+0xe>
            xYieldPendings[ 0 ] = pdTRUE;
 800d89e:	2201      	movs	r2, #1
 800d8a0:	4b03      	ldr	r3, [pc, #12]	; (800d8b0 <vTaskSwitchContext+0x18>)
 800d8a2:	601a      	str	r2, [r3, #0]
    }
 800d8a4:	4770      	bx	lr
 800d8a6:	f7ff bc8b 	b.w	800d1c0 <vTaskSwitchContext.part.0>
 800d8aa:	bf00      	nop
 800d8ac:	2000a4d4 	.word	0x2000a4d4
 800d8b0:	2000a814 	.word	0x2000a814

0800d8b4 <vTaskPlaceOnEventList>:
{
 800d8b4:	b510      	push	{r4, lr}
    configASSERT( pxEventList );
 800d8b6:	b158      	cbz	r0, 800d8d0 <vTaskPlaceOnEventList+0x1c>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8b8:	460c      	mov	r4, r1
 800d8ba:	4b07      	ldr	r3, [pc, #28]	; (800d8d8 <vTaskPlaceOnEventList+0x24>)
 800d8bc:	6819      	ldr	r1, [r3, #0]
 800d8be:	3118      	adds	r1, #24
 800d8c0:	f7f4 fbb0 	bl	8002024 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8c4:	4620      	mov	r0, r4
}
 800d8c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d8ca:	2101      	movs	r1, #1
 800d8cc:	f7ff bc1e 	b.w	800d10c <prvAddCurrentTaskToDelayedList>
    configASSERT( pxEventList );
 800d8d0:	f7f4 fde2 	bl	8002498 <ulSetInterruptMask>
 800d8d4:	e7fe      	b.n	800d8d4 <vTaskPlaceOnEventList+0x20>
 800d8d6:	bf00      	nop
 800d8d8:	2000a1f8 	.word	0x2000a1f8

0800d8dc <vTaskPlaceOnEventListRestricted>:
    {
 800d8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( pxEventList );
 800d8de:	4603      	mov	r3, r0
 800d8e0:	b1f8      	cbz	r0, 800d922 <vTaskPlaceOnEventListRestricted+0x46>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8e2:	4c11      	ldr	r4, [pc, #68]	; (800d928 <vTaskPlaceOnEventListRestricted+0x4c>)
 800d8e4:	685d      	ldr	r5, [r3, #4]
 800d8e6:	4608      	mov	r0, r1
            xTicksToWait = portMAX_DELAY;
 800d8e8:	2a00      	cmp	r2, #0
 800d8ea:	4611      	mov	r1, r2
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8ec:	6822      	ldr	r2, [r4, #0]
 800d8ee:	68ae      	ldr	r6, [r5, #8]
 800d8f0:	61d5      	str	r5, [r2, #28]
 800d8f2:	6822      	ldr	r2, [r4, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d8f4:	bf18      	it	ne
 800d8f6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d8fa:	6216      	str	r6, [r2, #32]
 800d8fc:	6826      	ldr	r6, [r4, #0]
 800d8fe:	6822      	ldr	r2, [r4, #0]
 800d900:	6827      	ldr	r7, [r4, #0]
 800d902:	f102 0418 	add.w	r4, r2, #24
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	3618      	adds	r6, #24
 800d90a:	f102 0c01 	add.w	ip, r2, #1
 800d90e:	68aa      	ldr	r2, [r5, #8]
 800d910:	6056      	str	r6, [r2, #4]
 800d912:	60ac      	str	r4, [r5, #8]
 800d914:	62bb      	str	r3, [r7, #40]	; 0x28
 800d916:	f8c3 c000 	str.w	ip, [r3]
    }
 800d91a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d91e:	f7ff bbf5 	b.w	800d10c <prvAddCurrentTaskToDelayedList>
        configASSERT( pxEventList );
 800d922:	f7f4 fdb9 	bl	8002498 <ulSetInterruptMask>
 800d926:	e7fe      	b.n	800d926 <vTaskPlaceOnEventListRestricted+0x4a>
 800d928:	2000a1f8 	.word	0x2000a1f8

0800d92c <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d92c:	68c3      	ldr	r3, [r0, #12]
{
 800d92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d932:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 800d934:	2b00      	cmp	r3, #0
 800d936:	d05e      	beq.n	800d9f6 <xTaskRemoveFromEventList+0xca>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800d938:	e9d3 4107 	ldrd	r4, r1, [r3, #28]
 800d93c:	2500      	movs	r5, #0
 800d93e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d940:	60a1      	str	r1, [r4, #8]
 800d942:	604c      	str	r4, [r1, #4]
 800d944:	6854      	ldr	r4, [r2, #4]
 800d946:	f103 0018 	add.w	r0, r3, #24
 800d94a:	4284      	cmp	r4, r0
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d94c:	4c2b      	ldr	r4, [pc, #172]	; (800d9fc <xTaskRemoveFromEventList+0xd0>)
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800d94e:	bf08      	it	eq
 800d950:	6051      	streq	r1, [r2, #4]
 800d952:	6811      	ldr	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d954:	6824      	ldr	r4, [r4, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800d956:	3901      	subs	r1, #1
 800d958:	629d      	str	r5, [r3, #40]	; 0x28
 800d95a:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800d95c:	b1bc      	cbz	r4, 800d98e <xTaskRemoveFromEventList+0x62>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d95e:	4928      	ldr	r1, [pc, #160]	; (800da00 <xTaskRemoveFromEventList+0xd4>)
 800d960:	684a      	ldr	r2, [r1, #4]
 800d962:	6894      	ldr	r4, [r2, #8]
 800d964:	e9c3 2407 	strd	r2, r4, [r3, #28]
 800d968:	6894      	ldr	r4, [r2, #8]
 800d96a:	6060      	str	r0, [r4, #4]
 800d96c:	6090      	str	r0, [r2, #8]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d970:	6299      	str	r1, [r3, #40]	; 0x28
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d972:	4b24      	ldr	r3, [pc, #144]	; (800da04 <xTaskRemoveFromEventList+0xd8>)
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d974:	680c      	ldr	r4, [r1, #0]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d976:	681b      	ldr	r3, [r3, #0]
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d978:	3401      	adds	r4, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d97c:	600c      	str	r4, [r1, #0]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d97e:	4293      	cmp	r3, r2
 800d980:	d236      	bcs.n	800d9f0 <xTaskRemoveFromEventList+0xc4>
            xYieldPendings[ 0 ] = pdTRUE;
 800d982:	2301      	movs	r3, #1
 800d984:	4a20      	ldr	r2, [pc, #128]	; (800da08 <xTaskRemoveFromEventList+0xdc>)
            xReturn = pdTRUE;
 800d986:	4618      	mov	r0, r3
            xYieldPendings[ 0 ] = pdTRUE;
 800d988:	6013      	str	r3, [r2, #0]
}
 800d98a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800d98e:	6959      	ldr	r1, [r3, #20]
 800d990:	e9d3 2002 	ldrd	r2, r0, [r3, #8]
 800d994:	6090      	str	r0, [r2, #8]
 800d996:	68d8      	ldr	r0, [r3, #12]
 800d998:	1d1f      	adds	r7, r3, #4
 800d99a:	6042      	str	r2, [r0, #4]
 800d99c:	684a      	ldr	r2, [r1, #4]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d99e:	4d1b      	ldr	r5, [pc, #108]	; (800da0c <xTaskRemoveFromEventList+0xe0>)
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800d9a0:	42ba      	cmp	r2, r7
 800d9a2:	bf08      	it	eq
 800d9a4:	6048      	streq	r0, [r1, #4]
 800d9a6:	6808      	ldr	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d9a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800d9aa:	3801      	subs	r0, #1
 800d9ac:	6008      	str	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d9ae:	2001      	movs	r0, #1
 800d9b0:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800d9b4:	eb05 0c81 	add.w	ip, r5, r1, lsl #2
 800d9b8:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800d9bc:	f8df e050 	ldr.w	lr, [pc, #80]	; 800da10 <xTaskRemoveFromEventList+0xe4>
 800d9c0:	68a6      	ldr	r6, [r4, #8]
 800d9c2:	0089      	lsls	r1, r1, #2
 800d9c4:	60de      	str	r6, [r3, #12]
 800d9c6:	586e      	ldr	r6, [r5, r1]
 800d9c8:	f8de 8000 	ldr.w	r8, [lr]
 800d9cc:	4406      	add	r6, r0
 800d9ce:	4090      	lsls	r0, r2
 800d9d0:	ea40 0008 	orr.w	r0, r0, r8
 800d9d4:	f8ce 0000 	str.w	r0, [lr]
 800d9d8:	68a0      	ldr	r0, [r4, #8]
 800d9da:	609c      	str	r4, [r3, #8]
 800d9dc:	6047      	str	r7, [r0, #4]
 800d9de:	60a7      	str	r7, [r4, #8]
 800d9e0:	f8c3 c014 	str.w	ip, [r3, #20]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9e4:	4b07      	ldr	r3, [pc, #28]	; (800da04 <xTaskRemoveFromEventList+0xd8>)
        prvAddTaskToReadyList( pxUnblockedTCB );
 800d9e6:	506e      	str	r6, [r5, r1]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ec:	4293      	cmp	r3, r2
 800d9ee:	d3c8      	bcc.n	800d982 <xTaskRemoveFromEventList+0x56>
            xReturn = pdFALSE;
 800d9f0:	2000      	movs	r0, #0
}
 800d9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( pxUnblockedTCB );
 800d9f6:	f7f4 fd4f 	bl	8002498 <ulSetInterruptMask>
 800d9fa:	e7fe      	b.n	800d9fa <xTaskRemoveFromEventList+0xce>
 800d9fc:	2000a4d4 	.word	0x2000a4d4
 800da00:	2000a774 	.word	0x2000a774
 800da04:	2000a1f8 	.word	0x2000a1f8
 800da08:	2000a814 	.word	0x2000a814
 800da0c:	2000a204 	.word	0x2000a204
 800da10:	2000a6dc 	.word	0x2000a6dc

0800da14 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da14:	4a03      	ldr	r2, [pc, #12]	; (800da24 <vTaskInternalSetTimeOutState+0x10>)
    pxTimeOut->xTimeOnEntering = xTickCount;
 800da16:	4b04      	ldr	r3, [pc, #16]	; (800da28 <vTaskInternalSetTimeOutState+0x14>)
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da18:	6812      	ldr	r2, [r2, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	e9c0 2300 	strd	r2, r3, [r0]
}
 800da20:	4770      	bx	lr
 800da22:	bf00      	nop
 800da24:	2000a76c 	.word	0x2000a76c
 800da28:	2000a7b4 	.word	0x2000a7b4

0800da2c <xTaskCheckForTimeOut>:
{
 800da2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da2e:	b083      	sub	sp, #12
    configASSERT( pxTimeOut );
 800da30:	b370      	cbz	r0, 800da90 <xTaskCheckForTimeOut+0x64>
    configASSERT( pxTicksToWait );
 800da32:	460d      	mov	r5, r1
 800da34:	b339      	cbz	r1, 800da86 <xTaskCheckForTimeOut+0x5a>
 800da36:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 800da38:	f7f4 fbd8 	bl	80021ec <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 800da3c:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 800da3e:	4a16      	ldr	r2, [pc, #88]	; (800da98 <xTaskCheckForTimeOut+0x6c>)
            if( *pxTicksToWait == portMAX_DELAY )
 800da40:	1c58      	adds	r0, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 800da42:	6811      	ldr	r1, [r2, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 800da44:	d022      	beq.n	800da8c <xTaskCheckForTimeOut+0x60>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800da46:	e9d4 6000 	ldrd	r6, r0, [r4]
 800da4a:	f8df c050 	ldr.w	ip, [pc, #80]	; 800da9c <xTaskCheckForTimeOut+0x70>
 800da4e:	f8dc 7000 	ldr.w	r7, [ip]
 800da52:	42be      	cmp	r6, r7
 800da54:	d00a      	beq.n	800da6c <xTaskCheckForTimeOut+0x40>
 800da56:	4288      	cmp	r0, r1
 800da58:	d808      	bhi.n	800da6c <xTaskCheckForTimeOut+0x40>
            *pxTicksToWait = ( TickType_t ) 0;
 800da5a:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 800da5c:	2001      	movs	r0, #1
            *pxTicksToWait = ( TickType_t ) 0;
 800da5e:	602b      	str	r3, [r5, #0]
 800da60:	9001      	str	r0, [sp, #4]
    taskEXIT_CRITICAL();
 800da62:	f7f4 fbd1 	bl	8002208 <vPortExitCritical>
}
 800da66:	9801      	ldr	r0, [sp, #4]
 800da68:	b003      	add	sp, #12
 800da6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da6c:	1a0f      	subs	r7, r1, r0
        else if( xElapsedTime < *pxTicksToWait )
 800da6e:	42bb      	cmp	r3, r7
 800da70:	d9f3      	bls.n	800da5a <xTaskCheckForTimeOut+0x2e>
            *pxTicksToWait -= xElapsedTime;
 800da72:	1a5b      	subs	r3, r3, r1
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800da74:	f8dc 1000 	ldr.w	r1, [ip]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800da78:	6812      	ldr	r2, [r2, #0]
            *pxTicksToWait -= xElapsedTime;
 800da7a:	4403      	add	r3, r0
 800da7c:	602b      	str	r3, [r5, #0]
            xReturn = pdFALSE;
 800da7e:	2000      	movs	r0, #0
    pxTimeOut->xTimeOnEntering = xTickCount;
 800da80:	e9c4 1200 	strd	r1, r2, [r4]
            xReturn = pdFALSE;
 800da84:	e7ec      	b.n	800da60 <xTaskCheckForTimeOut+0x34>
    configASSERT( pxTicksToWait );
 800da86:	f7f4 fd07 	bl	8002498 <ulSetInterruptMask>
 800da8a:	e7fe      	b.n	800da8a <xTaskCheckForTimeOut+0x5e>
                xReturn = pdFALSE;
 800da8c:	2000      	movs	r0, #0
 800da8e:	e7e7      	b.n	800da60 <xTaskCheckForTimeOut+0x34>
    configASSERT( pxTimeOut );
 800da90:	f7f4 fd02 	bl	8002498 <ulSetInterruptMask>
 800da94:	e7fe      	b.n	800da94 <xTaskCheckForTimeOut+0x68>
 800da96:	bf00      	nop
 800da98:	2000a7b4 	.word	0x2000a7b4
 800da9c:	2000a76c 	.word	0x2000a76c

0800daa0 <vTaskMissedYield>:
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800daa0:	2201      	movs	r2, #1
 800daa2:	4b01      	ldr	r3, [pc, #4]	; (800daa8 <vTaskMissedYield+0x8>)
 800daa4:	601a      	str	r2, [r3, #0]
}
 800daa6:	4770      	bx	lr
 800daa8:	2000a814 	.word	0x2000a814

0800daac <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 800daac:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <xTaskGetSchedulerState+0x18>)
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	b133      	cbz	r3, 800dac0 <xTaskGetSchedulerState+0x14>
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800dab2:	4b05      	ldr	r3, [pc, #20]	; (800dac8 <xTaskGetSchedulerState+0x1c>)
 800dab4:	681b      	ldr	r3, [r3, #0]
                    xReturn = taskSCHEDULER_SUSPENDED;
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	bf0c      	ite	eq
 800daba:	2002      	moveq	r0, #2
 800dabc:	2000      	movne	r0, #0
 800dabe:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 800dac0:	2001      	movs	r0, #1
    }
 800dac2:	4770      	bx	lr
 800dac4:	2000a788 	.word	0x2000a788
 800dac8:	2000a4d4 	.word	0x2000a4d4

0800dacc <xTaskPriorityInherit>:
    {
 800dacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if( pxMutexHolder != NULL )
 800dad0:	4604      	mov	r4, r0
 800dad2:	b1c8      	cbz	r0, 800db08 <xTaskPriorityInherit+0x3c>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dad4:	4d2b      	ldr	r5, [pc, #172]	; (800db84 <xTaskPriorityInherit+0xb8>)
 800dad6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800dad8:	682a      	ldr	r2, [r5, #0]
 800dada:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800dadc:	4293      	cmp	r3, r2
 800dade:	d215      	bcs.n	800db0c <xTaskPriorityInherit+0x40>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800dae0:	6982      	ldr	r2, [r0, #24]
 800dae2:	2a00      	cmp	r2, #0
 800dae4:	db04      	blt.n	800daf0 <xTaskPriorityInherit+0x24>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800dae6:	682a      	ldr	r2, [r5, #0]
 800dae8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800daea:	f1c2 020a 	rsb	r2, r2, #10
 800daee:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800daf0:	4e25      	ldr	r6, [pc, #148]	; (800db88 <xTaskPriorityInherit+0xbc>)
 800daf2:	6962      	ldr	r2, [r4, #20]
 800daf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800daf8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d00e      	beq.n	800db1e <xTaskPriorityInherit+0x52>
                xReturn = pdTRUE;
 800db00:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db02:	682b      	ldr	r3, [r5, #0]
 800db04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db06:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
 800db08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800db10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db12:	4298      	cmp	r0, r3
 800db14:	bf2c      	ite	cs
 800db16:	2000      	movcs	r0, #0
 800db18:	2001      	movcc	r0, #1
    }
 800db1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db1e:	1d27      	adds	r7, r4, #4
 800db20:	4638      	mov	r0, r7
 800db22:	f7f4 fa97 	bl	8002054 <uxListRemove>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800db26:	f8df c064 	ldr.w	ip, [pc, #100]	; 800db8c <xTaskPriorityInherit+0xc0>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db2a:	b948      	cbnz	r0, 800db40 <xTaskPriorityInherit+0x74>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800db2c:	2301      	movs	r3, #1
 800db2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800db30:	fa03 f202 	lsl.w	r2, r3, r2
 800db34:	f8dc 3000 	ldr.w	r3, [ip]
 800db38:	ea23 0302 	bic.w	r3, r3, r2
 800db3c:	f8cc 3000 	str.w	r3, [ip]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800db40:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db42:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800db44:	f8dc 8000 	ldr.w	r8, [ip]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800db4a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800db4e:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 800db52:	f8d5 e004 	ldr.w	lr, [r5, #4]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db56:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800db58:	f8de 1008 	ldr.w	r1, [lr, #8]
 800db5c:	0092      	lsls	r2, r2, #2
 800db5e:	fa00 f303 	lsl.w	r3, r0, r3
 800db62:	60e1      	str	r1, [r4, #12]
 800db64:	ea43 0308 	orr.w	r3, r3, r8
 800db68:	58b1      	ldr	r1, [r6, r2]
 800db6a:	f8cc 3000 	str.w	r3, [ip]
 800db6e:	f8de 3008 	ldr.w	r3, [lr, #8]
 800db72:	4401      	add	r1, r0
 800db74:	f8c4 e008 	str.w	lr, [r4, #8]
 800db78:	605f      	str	r7, [r3, #4]
 800db7a:	f8ce 7008 	str.w	r7, [lr, #8]
 800db7e:	6165      	str	r5, [r4, #20]
 800db80:	50b1      	str	r1, [r6, r2]
 800db82:	e7c1      	b.n	800db08 <xTaskPriorityInherit+0x3c>
 800db84:	2000a1f8 	.word	0x2000a1f8
 800db88:	2000a204 	.word	0x2000a204
 800db8c:	2000a6dc 	.word	0x2000a6dc

0800db90 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 800db90:	b1a8      	cbz	r0, 800dbbe <xTaskPriorityDisinherit+0x2e>
            configASSERT( pxTCB == pxCurrentTCB );
 800db92:	4b28      	ldr	r3, [pc, #160]	; (800dc34 <xTaskPriorityDisinherit+0xa4>)
    {
 800db94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            configASSERT( pxTCB == pxCurrentTCB );
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4604      	mov	r4, r0
 800db9c:	4283      	cmp	r3, r0
 800db9e:	d002      	beq.n	800dba6 <xTaskPriorityDisinherit+0x16>
 800dba0:	f7f4 fc7a 	bl	8002498 <ulSetInterruptMask>
 800dba4:	e7fe      	b.n	800dba4 <xTaskPriorityDisinherit+0x14>
            configASSERT( pxTCB->uxMutexesHeld );
 800dba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dba8:	b15b      	cbz	r3, 800dbc2 <xTaskPriorityDisinherit+0x32>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbaa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800dbac:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 800dbae:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbb0:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 800dbb2:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbb4:	d000      	beq.n	800dbb8 <xTaskPriorityDisinherit+0x28>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbb6:	b13b      	cbz	r3, 800dbc8 <xTaskPriorityDisinherit+0x38>
        BaseType_t xReturn = pdFALSE;
 800dbb8:	2000      	movs	r0, #0
    }
 800dbba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BaseType_t xReturn = pdFALSE;
 800dbbe:	2000      	movs	r0, #0
    }
 800dbc0:	4770      	bx	lr
            configASSERT( pxTCB->uxMutexesHeld );
 800dbc2:	f7f4 fc69 	bl	8002498 <ulSetInterruptMask>
 800dbc6:	e7fe      	b.n	800dbc6 <xTaskPriorityDisinherit+0x36>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbc8:	1d05      	adds	r5, r0, #4
 800dbca:	4628      	mov	r0, r5
 800dbcc:	f7f4 fa42 	bl	8002054 <uxListRemove>
 800dbd0:	b338      	cbz	r0, 800dc22 <xTaskPriorityDisinherit+0x92>
 800dbd2:	4919      	ldr	r1, [pc, #100]	; (800dc38 <xTaskPriorityDisinherit+0xa8>)
                    prvAddTaskToReadyList( pxTCB );
 800dbd4:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 800dbd8:	f8df e060 	ldr.w	lr, [pc, #96]	; 800dc3c <xTaskPriorityDisinherit+0xac>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800dbdc:	f1c3 020a 	rsb	r2, r3, #10
 800dbe0:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 800dbe2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800dbe6:	eb0e 0682 	add.w	r6, lr, r2, lsl #2
 800dbea:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800dbee:	f8d1 8000 	ldr.w	r8, [r1]
 800dbf2:	f8dc 7008 	ldr.w	r7, [ip, #8]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dbf6:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 800dbf8:	0092      	lsls	r2, r2, #2
 800dbfa:	fa00 f303 	lsl.w	r3, r0, r3
 800dbfe:	60e7      	str	r7, [r4, #12]
 800dc00:	ea43 0308 	orr.w	r3, r3, r8
 800dc04:	f85e 7002 	ldr.w	r7, [lr, r2]
 800dc08:	600b      	str	r3, [r1, #0]
 800dc0a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800dc0e:	4407      	add	r7, r0
 800dc10:	f8c4 c008 	str.w	ip, [r4, #8]
 800dc14:	605d      	str	r5, [r3, #4]
 800dc16:	f8cc 5008 	str.w	r5, [ip, #8]
 800dc1a:	6166      	str	r6, [r4, #20]
 800dc1c:	f84e 7002 	str.w	r7, [lr, r2]
        return xReturn;
 800dc20:	e7cb      	b.n	800dbba <xTaskPriorityDisinherit+0x2a>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dc22:	2201      	movs	r2, #1
 800dc24:	4904      	ldr	r1, [pc, #16]	; (800dc38 <xTaskPriorityDisinherit+0xa8>)
 800dc26:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800dc28:	680b      	ldr	r3, [r1, #0]
 800dc2a:	4082      	lsls	r2, r0
 800dc2c:	ea23 0302 	bic.w	r3, r3, r2
 800dc30:	600b      	str	r3, [r1, #0]
 800dc32:	e7cf      	b.n	800dbd4 <xTaskPriorityDisinherit+0x44>
 800dc34:	2000a1f8 	.word	0x2000a1f8
 800dc38:	2000a6dc 	.word	0x2000a6dc
 800dc3c:	2000a204 	.word	0x2000a204

0800dc40 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 800dc40:	b180      	cbz	r0, 800dc64 <vTaskPriorityDisinheritAfterTimeout+0x24>
    {
 800dc42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB->uxMutexesHeld );
 800dc44:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dc46:	4604      	mov	r4, r0
 800dc48:	b14b      	cbz	r3, 800dc5e <vTaskPriorityDisinheritAfterTimeout+0x1e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dc4a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
            if( pxTCB->uxPriority != uxPriorityToUse )
 800dc4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dc4e:	4281      	cmp	r1, r0
 800dc50:	bf38      	it	cc
 800dc52:	4601      	movcc	r1, r0
 800dc54:	428a      	cmp	r2, r1
 800dc56:	d001      	beq.n	800dc5c <vTaskPriorityDisinheritAfterTimeout+0x1c>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d004      	beq.n	800dc66 <vTaskPriorityDisinheritAfterTimeout+0x26>
    }
 800dc5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( pxTCB->uxMutexesHeld );
 800dc5e:	f7f4 fc1b 	bl	8002498 <ulSetInterruptMask>
 800dc62:	e7fe      	b.n	800dc62 <vTaskPriorityDisinheritAfterTimeout+0x22>
 800dc64:	4770      	bx	lr
                    configASSERT( pxTCB != pxCurrentTCB );
 800dc66:	4b20      	ldr	r3, [pc, #128]	; (800dce8 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	d031      	beq.n	800dcd2 <vTaskPriorityDisinheritAfterTimeout+0x92>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800dc6e:	69a3      	ldr	r3, [r4, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800dc70:	62e1      	str	r1, [r4, #44]	; 0x2c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800dc72:	2b00      	cmp	r3, #0
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800dc74:	bfa8      	it	ge
 800dc76:	f1c1 010a 	rsbge	r1, r1, #10
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc7a:	4d1c      	ldr	r5, [pc, #112]	; (800dcec <vTaskPriorityDisinheritAfterTimeout+0xac>)
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800dc7c:	bfa8      	it	ge
 800dc7e:	61a1      	strge	r1, [r4, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800dc84:	6961      	ldr	r1, [r4, #20]
 800dc86:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800dc8a:	4299      	cmp	r1, r3
 800dc8c:	d1e6      	bne.n	800dc5c <vTaskPriorityDisinheritAfterTimeout+0x1c>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc8e:	1d26      	adds	r6, r4, #4
 800dc90:	4630      	mov	r0, r6
 800dc92:	f7f4 f9df 	bl	8002054 <uxListRemove>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dc96:	2201      	movs	r2, #1
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc98:	b1f0      	cbz	r0, 800dcd8 <vTaskPriorityDisinheritAfterTimeout+0x98>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dc9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dc9c:	4914      	ldr	r1, [pc, #80]	; (800dcf0 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800dc9e:	409a      	lsls	r2, r3
                        prvAddTaskToReadyList( pxTCB );
 800dca0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dca4:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f8d1 c000 	ldr.w	ip, [r1]
 800dcae:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800dcb2:	6883      	ldr	r3, [r0, #8]
 800dcb4:	ea4c 0202 	orr.w	r2, ip, r2
 800dcb8:	60e3      	str	r3, [r4, #12]
 800dcba:	600a      	str	r2, [r1, #0]
 800dcbc:	f855 200e 	ldr.w	r2, [r5, lr]
 800dcc0:	6881      	ldr	r1, [r0, #8]
 800dcc2:	3201      	adds	r2, #1
 800dcc4:	60a0      	str	r0, [r4, #8]
 800dcc6:	604e      	str	r6, [r1, #4]
 800dcc8:	6086      	str	r6, [r0, #8]
 800dcca:	6167      	str	r7, [r4, #20]
 800dccc:	f845 200e 	str.w	r2, [r5, lr]
    }
 800dcd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    configASSERT( pxTCB != pxCurrentTCB );
 800dcd2:	f7f4 fbe1 	bl	8002498 <ulSetInterruptMask>
 800dcd6:	e7fe      	b.n	800dcd6 <vTaskPriorityDisinheritAfterTimeout+0x96>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800dcd8:	4905      	ldr	r1, [pc, #20]	; (800dcf0 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800dcda:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dcdc:	6808      	ldr	r0, [r1, #0]
 800dcde:	409a      	lsls	r2, r3
 800dce0:	ea20 0002 	bic.w	r0, r0, r2
 800dce4:	6008      	str	r0, [r1, #0]
 800dce6:	e7db      	b.n	800dca0 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800dce8:	2000a1f8 	.word	0x2000a1f8
 800dcec:	2000a204 	.word	0x2000a204
 800dcf0:	2000a6dc 	.word	0x2000a6dc

0800dcf4 <pvTaskIncrementMutexHeldCount>:
        pxTCB = pxCurrentTCB;
 800dcf4:	4b03      	ldr	r3, [pc, #12]	; (800dd04 <pvTaskIncrementMutexHeldCount+0x10>)
 800dcf6:	6818      	ldr	r0, [r3, #0]
        if( pxTCB != NULL )
 800dcf8:	b110      	cbz	r0, 800dd00 <pvTaskIncrementMutexHeldCount+0xc>
            ( pxTCB->uxMutexesHeld )++;
 800dcfa:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	6503      	str	r3, [r0, #80]	; 0x50
    }
 800dd00:	4770      	bx	lr
 800dd02:	bf00      	nop
 800dd04:	2000a1f8 	.word	0x2000a1f8

0800dd08 <vApplicationGetTimerTaskMemory>:
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800dd08:	2380      	movs	r3, #128	; 0x80
    {
 800dd0a:	b430      	push	{r4, r5}
        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 800dd0c:	4d03      	ldr	r5, [pc, #12]	; (800dd1c <vApplicationGetTimerTaskMemory+0x14>)
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 800dd0e:	4c04      	ldr	r4, [pc, #16]	; (800dd20 <vApplicationGetTimerTaskMemory+0x18>)
        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 800dd10:	6005      	str	r5, [r0, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 800dd12:	600c      	str	r4, [r1, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800dd14:	6013      	str	r3, [r2, #0]
    }
 800dd16:	bc30      	pop	{r4, r5}
 800dd18:	4770      	bx	lr
 800dd1a:	bf00      	nop
 800dd1c:	2000a7b8 	.word	0x2000a7b8
 800dd20:	2000a4dc 	.word	0x2000a4dc

0800dd24 <prvCheckForValidListAndQueue>:
        pxOverflowTimerList = pxTemp;
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800dd24:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 800dd26:	4c12      	ldr	r4, [pc, #72]	; (800dd70 <prvCheckForValidListAndQueue+0x4c>)
    {
 800dd28:	b083      	sub	sp, #12
        taskENTER_CRITICAL();
 800dd2a:	f7f4 fa5f 	bl	80021ec <vPortEnterCritical>
            if( xTimerQueue == NULL )
 800dd2e:	6825      	ldr	r5, [r4, #0]
 800dd30:	b125      	cbz	r5, 800dd3c <prvCheckForValidListAndQueue+0x18>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
 800dd32:	b003      	add	sp, #12
 800dd34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 800dd38:	f7f4 ba66 	b.w	8002208 <vPortExitCritical>
                vListInitialise( &xActiveTimerList1 );
 800dd3c:	4f0d      	ldr	r7, [pc, #52]	; (800dd74 <prvCheckForValidListAndQueue+0x50>)
                vListInitialise( &xActiveTimerList2 );
 800dd3e:	4e0e      	ldr	r6, [pc, #56]	; (800dd78 <prvCheckForValidListAndQueue+0x54>)
                vListInitialise( &xActiveTimerList1 );
 800dd40:	4638      	mov	r0, r7
 800dd42:	f7f4 f95f 	bl	8002004 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800dd46:	4630      	mov	r0, r6
 800dd48:	f7f4 f95c 	bl	8002004 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800dd4c:	4a0b      	ldr	r2, [pc, #44]	; (800dd7c <prvCheckForValidListAndQueue+0x58>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd4e:	9500      	str	r5, [sp, #0]
                pxCurrentTimerList = &xActiveTimerList1;
 800dd50:	6017      	str	r7, [r2, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800dd52:	4a0b      	ldr	r2, [pc, #44]	; (800dd80 <prvCheckForValidListAndQueue+0x5c>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd54:	2110      	movs	r1, #16
                pxOverflowTimerList = &xActiveTimerList2;
 800dd56:	6016      	str	r6, [r2, #0]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800dd58:	4b0a      	ldr	r3, [pc, #40]	; (800dd84 <prvCheckForValidListAndQueue+0x60>)
 800dd5a:	4a0b      	ldr	r2, [pc, #44]	; (800dd88 <prvCheckForValidListAndQueue+0x64>)
 800dd5c:	200a      	movs	r0, #10
 800dd5e:	f7f4 fca3 	bl	80026a8 <xQueueGenericCreateStatic>
 800dd62:	6020      	str	r0, [r4, #0]
    }
 800dd64:	b003      	add	sp, #12
 800dd66:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 800dd6a:	f7f4 ba4d 	b.w	8002208 <vPortExitCritical>
 800dd6e:	bf00      	nop
 800dd70:	2000a93c 	.word	0x2000a93c
 800dd74:	2000a8c0 	.word	0x2000a8c0
 800dd78:	2000a8d4 	.word	0x2000a8d4
 800dd7c:	2000a818 	.word	0x2000a818
 800dd80:	2000a81c 	.word	0x2000a81c
 800dd84:	2000a8ec 	.word	0x2000a8ec
 800dd88:	2000a820 	.word	0x2000a820

0800dd8c <prvReloadTimer>:
    {
 800dd8c:	b570      	push	{r4, r5, r6, lr}
 800dd8e:	4604      	mov	r4, r0
 800dd90:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800dd92:	e005      	b.n	800dda0 <prvReloadTimer+0x14>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d818      	bhi.n	800ddca <prvReloadTimer+0x3e>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd98:	4620      	mov	r0, r4
 800dd9a:	6a23      	ldr	r3, [r4, #32]
 800dd9c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800dd9e:	4629      	mov	r1, r5
 800dda0:	69a3      	ldr	r3, [r4, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800dda2:	1a72      	subs	r2, r6, r1
 800dda4:	185d      	adds	r5, r3, r1
 800dda6:	bf2c      	ite	cs
 800dda8:	2001      	movcs	r0, #1
 800ddaa:	2000      	movcc	r0, #0
        if( xNextExpiryTime <= xTimeNow )
 800ddac:	42b5      	cmp	r5, r6
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ddae:	6065      	str	r5, [r4, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ddb0:	6124      	str	r4, [r4, #16]
        if( xNextExpiryTime <= xTimeNow )
 800ddb2:	d9ef      	bls.n	800dd94 <prvReloadTimer+0x8>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ddb4:	42b1      	cmp	r1, r6
 800ddb6:	d901      	bls.n	800ddbc <prvReloadTimer+0x30>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d0ed      	beq.n	800dd98 <prvReloadTimer+0xc>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddbc:	4b06      	ldr	r3, [pc, #24]	; (800ddd8 <prvReloadTimer+0x4c>)
 800ddbe:	1d21      	adds	r1, r4, #4
 800ddc0:	6818      	ldr	r0, [r3, #0]
    }
 800ddc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ddc6:	f7f4 b92d 	b.w	8002024 <vListInsert>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ddca:	4b04      	ldr	r3, [pc, #16]	; (800dddc <prvReloadTimer+0x50>)
 800ddcc:	1d21      	adds	r1, r4, #4
 800ddce:	6818      	ldr	r0, [r3, #0]
    }
 800ddd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ddd4:	f7f4 b926 	b.w	8002024 <vListInsert>
 800ddd8:	2000a818 	.word	0x2000a818
 800dddc:	2000a81c 	.word	0x2000a81c

0800dde0 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dde0:	4a10      	ldr	r2, [pc, #64]	; (800de24 <prvProcessExpiredTimer+0x44>)
    {
 800dde2:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dde4:	6812      	ldr	r2, [r2, #0]
    {
 800dde6:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800dde8:	68d2      	ldr	r2, [r2, #12]
    {
 800ddea:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddec:	68d4      	ldr	r4, [r2, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ddee:	1d20      	adds	r0, r4, #4
 800ddf0:	f7f4 f930 	bl	8002054 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800ddf4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800ddf8:	075a      	lsls	r2, r3, #29
 800ddfa:	d408      	bmi.n	800de0e <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ddfc:	f023 0301 	bic.w	r3, r3, #1
 800de00:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de04:	4620      	mov	r0, r4
 800de06:	6a23      	ldr	r3, [r4, #32]
    }
 800de08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de0c:	4718      	bx	r3
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800de0e:	4620      	mov	r0, r4
 800de10:	4632      	mov	r2, r6
 800de12:	4629      	mov	r1, r5
 800de14:	f7ff ffba 	bl	800dd8c <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de18:	4620      	mov	r0, r4
 800de1a:	6a23      	ldr	r3, [r4, #32]
    }
 800de1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800de20:	4718      	bx	r3
 800de22:	bf00      	nop
 800de24:	2000a818 	.word	0x2000a818

0800de28 <prvTimerTask>:
    {
 800de28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de2c:	2600      	movs	r6, #0
 800de2e:	4d7f      	ldr	r5, [pc, #508]	; (800e02c <prvTimerTask+0x204>)
 800de30:	4f7f      	ldr	r7, [pc, #508]	; (800e030 <prvTimerTask+0x208>)
 800de32:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800e038 <prvTimerTask+0x210>
 800de36:	4c7f      	ldr	r4, [pc, #508]	; (800e034 <prvTimerTask+0x20c>)
 800de38:	b084      	sub	sp, #16
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de3a:	682b      	ldr	r3, [r5, #0]
 800de3c:	f8d3 a000 	ldr.w	sl, [r3]
 800de40:	f1ba 0f00 	cmp.w	sl, #0
 800de44:	f000 80bf 	beq.w	800dfc6 <prvTimerTask+0x19e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de48:	68db      	ldr	r3, [r3, #12]
 800de4a:	f8d3 a000 	ldr.w	sl, [r3]
        vTaskSuspendAll();
 800de4e:	f7ff fcef 	bl	800d830 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 800de52:	f7ff fd05 	bl	800d860 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800de56:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800de58:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 800de5a:	4283      	cmp	r3, r0
 800de5c:	d83f      	bhi.n	800dede <prvTimerTask+0xb6>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de5e:	4582      	cmp	sl, r0
        xLastTime = xTimeNow;
 800de60:	6038      	str	r0, [r7, #0]
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800de62:	f240 80cf 	bls.w	800e004 <prvTimerTask+0x1dc>
 800de66:	2200      	movs	r2, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800de68:	6820      	ldr	r0, [r4, #0]
 800de6a:	ebaa 0109 	sub.w	r1, sl, r9
 800de6e:	f7f4 ff35 	bl	8002cdc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800de72:	f7ff fce5 	bl	800d840 <xTaskResumeAll>
 800de76:	2800      	cmp	r0, #0
 800de78:	f000 80b6 	beq.w	800dfe8 <prvTimerTask+0x1c0>
        DaemonTaskMessage_t xMessage = { 0 };
 800de7c:	e9cd 6600 	strd	r6, r6, [sp]
 800de80:	e9cd 6602 	strd	r6, r6, [sp, #8]
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800de84:	2200      	movs	r2, #0
 800de86:	4669      	mov	r1, sp
 800de88:	6820      	ldr	r0, [r4, #0]
 800de8a:	f7f4 fdd7 	bl	8002a3c <xQueueReceive>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d0d3      	beq.n	800de3a <prvTimerTask+0x12>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800de92:	9b00      	ldr	r3, [sp, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	f2c0 808d 	blt.w	800dfb4 <prvTimerTask+0x18c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800de9a:	f8dd 9008 	ldr.w	r9, [sp, #8]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800de9e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dea2:	b11b      	cbz	r3, 800deac <prvTimerTask+0x84>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dea4:	f109 0004 	add.w	r0, r9, #4
 800dea8:	f7f4 f8d4 	bl	8002054 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
 800deac:	f7ff fcd8 	bl	800d860 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800deb0:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800deb2:	4682      	mov	sl, r0
        if( xTimeNow < xLastTime )
 800deb4:	4298      	cmp	r0, r3
 800deb6:	d326      	bcc.n	800df06 <prvTimerTask+0xde>
                switch( xMessage.xMessageID )
 800deb8:	9b00      	ldr	r3, [sp, #0]
        xLastTime = xTimeNow;
 800deba:	f8c7 a000 	str.w	sl, [r7]
                switch( xMessage.xMessageID )
 800debe:	3b01      	subs	r3, #1
 800dec0:	2b08      	cmp	r3, #8
 800dec2:	d8df      	bhi.n	800de84 <prvTimerTask+0x5c>
 800dec4:	e8df f003 	tbb	[pc, r3]
 800dec8:	4d662929 	.word	0x4d662929
 800decc:	6629296d 	.word	0x6629296d
 800ded0:	4d          	.byte	0x4d
 800ded1:	00          	.byte	0x00
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ded2:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800ded4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ded8:	6818      	ldr	r0, [r3, #0]
 800deda:	f7ff ff81 	bl	800dde0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800dede:	682b      	ldr	r3, [r5, #0]
 800dee0:	681a      	ldr	r2, [r3, #0]
 800dee2:	2a00      	cmp	r2, #0
 800dee4:	d1f5      	bne.n	800ded2 <prvTimerTask+0xaa>
        pxCurrentTimerList = pxOverflowTimerList;
 800dee6:	f8d8 2000 	ldr.w	r2, [r8]
        xLastTime = xTimeNow;
 800deea:	f8c7 9000 	str.w	r9, [r7]
        pxCurrentTimerList = pxOverflowTimerList;
 800deee:	602a      	str	r2, [r5, #0]
        pxOverflowTimerList = pxTemp;
 800def0:	f8c8 3000 	str.w	r3, [r8]
                ( void ) xTaskResumeAll();
 800def4:	f7ff fca4 	bl	800d840 <xTaskResumeAll>
 800def8:	e7c0      	b.n	800de7c <prvTimerTask+0x54>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800defa:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800defc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800df00:	6818      	ldr	r0, [r3, #0]
 800df02:	f7ff ff6d 	bl	800dde0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800df06:	682b      	ldr	r3, [r5, #0]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	2a00      	cmp	r2, #0
 800df0c:	d1f5      	bne.n	800defa <prvTimerTask+0xd2>
        pxCurrentTimerList = pxOverflowTimerList;
 800df0e:	f8d8 2000 	ldr.w	r2, [r8]
        pxOverflowTimerList = pxTemp;
 800df12:	f8c8 3000 	str.w	r3, [r8]
        pxCurrentTimerList = pxOverflowTimerList;
 800df16:	602a      	str	r2, [r5, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 800df18:	e7ce      	b.n	800deb8 <prvTimerTask+0x90>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800df1a:	f899 0028 	ldrb.w	r0, [r9, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800df1e:	9b01      	ldr	r3, [sp, #4]
 800df20:	f8d9 2018 	ldr.w	r2, [r9, #24]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800df24:	f040 0c01 	orr.w	ip, r0, #1
 800df28:	1899      	adds	r1, r3, r2
 800df2a:	f889 c028 	strb.w	ip, [r9, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800df2e:	bf2c      	ite	cs
 800df30:	f04f 0c01 	movcs.w	ip, #1
 800df34:	f04f 0c00 	movcc.w	ip, #0
        if( xNextExpiryTime <= xTimeNow )
 800df38:	4551      	cmp	r1, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df3a:	f8c9 1004 	str.w	r1, [r9, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df3e:	f8c9 9010 	str.w	r9, [r9, #16]
        if( xNextExpiryTime <= xTimeNow )
 800df42:	d854      	bhi.n	800dfee <prvTimerTask+0x1c6>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800df44:	ebaa 0303 	sub.w	r3, sl, r3
 800df48:	429a      	cmp	r2, r3
 800df4a:	d81c      	bhi.n	800df86 <prvTimerTask+0x15e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800df4c:	0743      	lsls	r3, r0, #29
 800df4e:	d464      	bmi.n	800e01a <prvTimerTask+0x1f2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800df50:	f020 0001 	bic.w	r0, r0, #1
 800df54:	f889 0028 	strb.w	r0, [r9, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800df58:	4648      	mov	r0, r9
 800df5a:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800df5e:	4798      	blx	r3
 800df60:	e790      	b.n	800de84 <prvTimerTask+0x5c>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800df62:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df66:	9b01      	ldr	r3, [sp, #4]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800df68:	f042 0201 	orr.w	r2, r2, #1
 800df6c:	f889 2028 	strb.w	r2, [r9, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800df70:	f8c9 3018 	str.w	r3, [r9, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800df74:	2b00      	cmp	r3, #0
 800df76:	d055      	beq.n	800e024 <prvTimerTask+0x1fc>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800df78:	4453      	add	r3, sl
        if( xNextExpiryTime <= xTimeNow )
 800df7a:	4553      	cmp	r3, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800df7c:	f8c9 3004 	str.w	r3, [r9, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800df80:	f8c9 9010 	str.w	r9, [r9, #16]
        if( xNextExpiryTime <= xTimeNow )
 800df84:	d838      	bhi.n	800dff8 <prvTimerTask+0x1d0>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800df86:	f8d8 0000 	ldr.w	r0, [r8]
 800df8a:	f109 0104 	add.w	r1, r9, #4
 800df8e:	f7f4 f849 	bl	8002024 <vListInsert>
        return xProcessTimerNow;
 800df92:	e777      	b.n	800de84 <prvTimerTask+0x5c>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800df94:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800df98:	f023 0301 	bic.w	r3, r3, #1
 800df9c:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
                        break;
 800dfa0:	e770      	b.n	800de84 <prvTimerTask+0x5c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800dfa2:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800dfa6:	079a      	lsls	r2, r3, #30
 800dfa8:	d533      	bpl.n	800e012 <prvTimerTask+0x1ea>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800dfaa:	f023 0301 	bic.w	r3, r3, #1
 800dfae:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
 800dfb2:	e767      	b.n	800de84 <prvTimerTask+0x5c>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800dfb4:	9b01      	ldr	r3, [sp, #4]
 800dfb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dfba:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800dfbc:	9b00      	ldr	r3, [sp, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f6ff af60 	blt.w	800de84 <prvTimerTask+0x5c>
 800dfc4:	e769      	b.n	800de9a <prvTimerTask+0x72>
        vTaskSuspendAll();
 800dfc6:	f7ff fc33 	bl	800d830 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 800dfca:	f7ff fc49 	bl	800d860 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800dfce:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800dfd0:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 800dfd2:	4298      	cmp	r0, r3
 800dfd4:	d383      	bcc.n	800dede <prvTimerTask+0xb6>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dfd6:	f8d8 3000 	ldr.w	r3, [r8]
        xLastTime = xTimeNow;
 800dfda:	f8c7 9000 	str.w	r9, [r7]
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dfde:	681a      	ldr	r2, [r3, #0]
 800dfe0:	fab2 f282 	clz	r2, r2
 800dfe4:	0952      	lsrs	r2, r2, #5
 800dfe6:	e73f      	b.n	800de68 <prvTimerTask+0x40>
                        taskYIELD_WITHIN_API();
 800dfe8:	f7f4 f8f4 	bl	80021d4 <vPortYield>
 800dfec:	e746      	b.n	800de7c <prvTimerTask+0x54>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dfee:	4553      	cmp	r3, sl
 800dff0:	d902      	bls.n	800dff8 <prvTimerTask+0x1d0>
 800dff2:	f1bc 0f00 	cmp.w	ip, #0
 800dff6:	d0a9      	beq.n	800df4c <prvTimerTask+0x124>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dff8:	6828      	ldr	r0, [r5, #0]
 800dffa:	f109 0104 	add.w	r1, r9, #4
 800dffe:	f7f4 f811 	bl	8002024 <vListInsert>
 800e002:	e73f      	b.n	800de84 <prvTimerTask+0x5c>
                    ( void ) xTaskResumeAll();
 800e004:	f7ff fc1c 	bl	800d840 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e008:	4649      	mov	r1, r9
 800e00a:	4650      	mov	r0, sl
 800e00c:	f7ff fee8 	bl	800dde0 <prvProcessExpiredTimer>
 800e010:	e734      	b.n	800de7c <prvTimerTask+0x54>
                                vPortFree( pxTimer );
 800e012:	4648      	mov	r0, r9
 800e014:	f7f3 ff6a 	bl	8001eec <vPortFree>
 800e018:	e734      	b.n	800de84 <prvTimerTask+0x5c>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800e01a:	4652      	mov	r2, sl
 800e01c:	4648      	mov	r0, r9
 800e01e:	f7ff feb5 	bl	800dd8c <prvReloadTimer>
 800e022:	e799      	b.n	800df58 <prvTimerTask+0x130>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e024:	f7f4 fa38 	bl	8002498 <ulSetInterruptMask>
 800e028:	e7fe      	b.n	800e028 <prvTimerTask+0x200>
 800e02a:	bf00      	nop
 800e02c:	2000a818 	.word	0x2000a818
 800e030:	2000a8e8 	.word	0x2000a8e8
 800e034:	2000a93c 	.word	0x2000a93c
 800e038:	2000a81c 	.word	0x2000a81c

0800e03c <xTimerCreateTimerTask>:
    {
 800e03c:	b530      	push	{r4, r5, lr}
 800e03e:	b089      	sub	sp, #36	; 0x24
        prvCheckForValidListAndQueue();
 800e040:	f7ff fe70 	bl	800dd24 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800e044:	4b0f      	ldr	r3, [pc, #60]	; (800e084 <xTimerCreateTimerTask+0x48>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	b1cb      	cbz	r3, 800e07e <xTimerCreateTimerTask+0x42>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800e04a:	2400      	movs	r4, #0
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e04c:	2509      	movs	r5, #9
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800e04e:	aa07      	add	r2, sp, #28
 800e050:	a906      	add	r1, sp, #24
 800e052:	a805      	add	r0, sp, #20
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800e054:	e9cd 4405 	strd	r4, r4, [sp, #20]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800e058:	f7ff fe56 	bl	800dd08 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800e05c:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800e060:	4623      	mov	r3, r4
 800e062:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800e066:	9a07      	ldr	r2, [sp, #28]
 800e068:	4907      	ldr	r1, [pc, #28]	; (800e088 <xTimerCreateTimerTask+0x4c>)
 800e06a:	4808      	ldr	r0, [pc, #32]	; (800e08c <xTimerCreateTimerTask+0x50>)
 800e06c:	9500      	str	r5, [sp, #0]
 800e06e:	f7ff fb07 	bl	800d680 <xTaskCreateStatic>
 800e072:	4b07      	ldr	r3, [pc, #28]	; (800e090 <xTimerCreateTimerTask+0x54>)
 800e074:	6018      	str	r0, [r3, #0]
                    if( xTimerTaskHandle != NULL )
 800e076:	b110      	cbz	r0, 800e07e <xTimerCreateTimerTask+0x42>
    }
 800e078:	2001      	movs	r0, #1
 800e07a:	b009      	add	sp, #36	; 0x24
 800e07c:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn );
 800e07e:	f7f4 fa0b 	bl	8002498 <ulSetInterruptMask>
 800e082:	e7fe      	b.n	800e082 <xTimerCreateTimerTask+0x46>
 800e084:	2000a93c 	.word	0x2000a93c
 800e088:	08011af8 	.word	0x08011af8
 800e08c:	0800de29 	.word	0x0800de29
 800e090:	2000a940 	.word	0x2000a940

0800e094 <_ux_dcd_stm32_setup_isr_pending>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
VOID     _ux_dcd_stm32_setup_isr_pending(UX_DCD_STM32 *dcd_stm32)
{
 800e094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e098:	4604      	mov	r4, r0

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800e09a:	6846      	ldr	r6, [r0, #4]

    UX_DISABLE
 800e09c:	f7f3 f864 	bl	8001168 <_ux_utility_interrupt_disable>

    /* Get the ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;
 800e0a0:	68a3      	ldr	r3, [r4, #8]

    /* Check if Task is pending to avoid re-entry.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TASK_PENDING)
 800e0a2:	f413 6780 	ands.w	r7, r3, #1024	; 0x400
 800e0a6:	d127      	bne.n	800e0f8 <_ux_dcd_stm32_setup_isr_pending+0x64>
        return;
    }

    /* Check if SETUP ISR is pending.  */
    ed_status &= UX_DCD_STM32_ED_STATUS_SETUP;
    if (ed_status == 0)
 800e0a8:	f413 7540 	ands.w	r5, r3, #768	; 0x300
 800e0ac:	d024      	beq.n	800e0f8 <_ux_dcd_stm32_setup_isr_pending+0x64>
    {
        UX_RESTORE
        return;
    }
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_SETUP;
 800e0ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 800e0b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e0b6:	60a3      	str	r3, [r4, #8]
    UX_RESTORE
 800e0b8:	f7f3 f85a 	bl	8001170 <_ux_utility_interrupt_restore>

    /* Handle different SETUP cases.  */
    switch(ed_status)
 800e0bc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800e0c0:	f106 0820 	add.w	r8, r6, #32
    switch(ed_status)
 800e0c4:	d02b      	beq.n	800e11e <_ux_dcd_stm32_setup_isr_pending+0x8a>
 800e0c6:	f5b5 7f40 	cmp.w	r5, #768	; 0x300
 800e0ca:	d019      	beq.n	800e100 <_ux_dcd_stm32_setup_isr_pending+0x6c>
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e0cc:	2380      	movs	r3, #128	; 0x80
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800e0ce:	4640      	mov	r0, r8
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e0d0:	73a3      	strb	r3, [r4, #14]
    case UX_DCD_STM32_ED_STATUS_SETUP_OUT:
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
        break;

    default: /* UX_DCD_STM32_ED_STATUS_SETUP_STATUS  */
        _ux_dcd_stm32_setup_status(ed, transfer_request, dcd_stm32 -> pcd_handle);
 800e0d2:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800e0d6:	f001 fba1 	bl	800f81c <_ux_device_stack_control_request_process>
 800e0da:	b9d0      	cbnz	r0, 800e112 <_ux_dcd_stm32_setup_isr_pending+0x7e>
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800e0dc:	2604      	movs	r6, #4
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800e0de:	4603      	mov	r3, r0
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800e0e0:	7326      	strb	r6, [r4, #12]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	f7f8 f8a6 	bl	8006238 <HAL_PCD_EP_Transmit>
        break;
    }

    /* Task is done.  */
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 800e0ec:	68a3      	ldr	r3, [r4, #8]
 800e0ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e0f2:	60a3      	str	r3, [r4, #8]
}
 800e0f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        UX_RESTORE
 800e0fc:	f7f3 b838 	b.w	8001170 <_ux_utility_interrupt_restore>
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e100:	2380      	movs	r3, #128	; 0x80
        _ux_dcd_stm32_setup_out(ed, transfer_request, dcd_stm32 -> pcd_handle);
 800e102:	f8d4 50dc 	ldr.w	r5, [r4, #220]	; 0xdc
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800e106:	4640      	mov	r0, r8
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e108:	6477      	str	r7, [r6, #68]	; 0x44
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e10a:	73a3      	strb	r3, [r4, #14]
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 800e10c:	f001 fb86 	bl	800f81c <_ux_device_stack_control_request_process>
 800e110:	b190      	cbz	r0, 800e138 <_ux_dcd_stm32_setup_isr_pending+0xa4>
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 800e112:	68a3      	ldr	r3, [r4, #8]
 800e114:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e118:	60a3      	str	r3, [r4, #8]
}
 800e11a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800e11e:	2301      	movs	r3, #1
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e120:	2280      	movs	r2, #128	; 0x80
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 800e122:	7323      	strb	r3, [r4, #12]
    _ux_device_stack_control_request_process(transfer_request);
 800e124:	4640      	mov	r0, r8
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 800e126:	73a2      	strb	r2, [r4, #14]
    _ux_device_stack_control_request_process(transfer_request);
 800e128:	f001 fb78 	bl	800f81c <_ux_device_stack_control_request_process>
    ed -> ux_dcd_stm32_ed_status &= ~UX_DCD_STM32_ED_STATUS_TASK_PENDING;
 800e12c:	68a3      	ldr	r3, [r4, #8]
 800e12e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e132:	60a3      	str	r3, [r4, #8]
}
 800e134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 800e138:	2603      	movs	r6, #3
 800e13a:	e7d0      	b.n	800e0de <_ux_dcd_stm32_setup_isr_pending+0x4a>

0800e13c <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800e13c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e13e:	4606      	mov	r6, r0

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e140:	4b23      	ldr	r3, [pc, #140]	; (800e1d0 <HAL_PCD_SetupStageCallback+0x94>)

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800e142:	2208      	movs	r2, #8
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e144:	681b      	ldr	r3, [r3, #0]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800e146:	f506 7127 	add.w	r1, r6, #668	; 0x29c
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e14a:	69dd      	ldr	r5, [r3, #28]
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 800e14c:	686c      	ldr	r4, [r5, #4]
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 800e14e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e152:	f002 faa3 	bl	801069c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e156:	2200      	movs	r2, #0

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800e158:	2101      	movs	r1, #1

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e15a:	68ab      	ldr	r3, [r5, #8]
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800e15c:	6261      	str	r1, [r4, #36]	; 0x24
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e15e:	f023 030e 	bic.w	r3, r3, #14
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e162:	63a2      	str	r2, [r4, #56]	; 0x38
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e164:	6462      	str	r2, [r4, #68]	; 0x44
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e166:	60ab      	str	r3, [r5, #8]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 800e168:	f994 105c 	ldrsb.w	r1, [r4, #92]	; 0x5c
 800e16c:	4291      	cmp	r1, r2
 800e16e:	db1b      	blt.n	800e1a8 <HAL_PCD_SetupStageCallback+0x6c>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 800e170:	73aa      	strb	r2, [r5, #14]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 800e172:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800e176:	b912      	cbnz	r2, 800e17e <HAL_PCD_SetupStageCallback+0x42>
 800e178:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 800e17c:	b1c2      	cbz	r2, 800e1b0 <HAL_PCD_SetupStageCallback+0x74>

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800e17e:	f104 0062 	add.w	r0, r4, #98	; 0x62
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e182:	6aa7      	ldr	r7, [r4, #40]	; 0x28
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800e184:	f002 fac0 	bl	8010708 <_ux_utility_short_get>

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e188:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 800e18c:	4603      	mov	r3, r0
 800e18e:	6360      	str	r0, [r4, #52]	; 0x34
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800e190:	d812      	bhi.n	800e1b8 <HAL_PCD_SetupStageCallback+0x7c>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e192:	2200      	movs	r2, #0
 800e194:	63a2      	str	r2, [r4, #56]	; 0x38

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800e196:	6ae2      	ldr	r2, [r4, #44]	; 0x2c

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
 800e198:	4630      	mov	r0, r6
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800e19a:	6322      	str	r2, [r4, #48]	; 0x30
                HAL_PCD_EP_Receive(hpcd,
 800e19c:	7bb9      	ldrb	r1, [r7, #14]
 800e19e:	f7f8 f825 	bl	80061ec <HAL_PCD_EP_Receive>
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 800e1a2:	2302      	movs	r3, #2
 800e1a4:	732b      	strb	r3, [r5, #12]
            }
        }
    }
}
 800e1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
 800e1a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1ac:	60ab      	str	r3, [r5, #8]
}
 800e1ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 800e1b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1b4:	60ab      	str	r3, [r5, #8]
}
 800e1b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 800e1b8:	4639      	mov	r1, r7
 800e1ba:	4628      	mov	r0, r5
 800e1bc:	f000 f960 	bl	800e480 <_ux_dcd_stm32_endpoint_stall>
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800e1c0:	2200      	movs	r2, #0
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 800e1c2:	68ab      	ldr	r3, [r5, #8]
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800e1c4:	732a      	strb	r2, [r5, #12]
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
 800e1c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1ca:	60ab      	str	r3, [r5, #8]
}
 800e1cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	2000ae38 	.word	0x2000ae38

0800e1d4 <HAL_PCD_DataInStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e1d4:	4b37      	ldr	r3, [pc, #220]	; (800e2b4 <HAL_PCD_DataInStageCallback+0xe0>)
{
 800e1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e1da:	681b      	ldr	r3, [r3, #0]
{
 800e1dc:	460c      	mov	r4, r1
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e1de:	69dd      	ldr	r5, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 800e1e0:	f011 030f 	ands.w	r3, r1, #15
{
 800e1e4:	4606      	mov	r6, r0
    if ((epnum & 0xF) != 0)
 800e1e6:	d019      	beq.n	800e21c <HAL_PCD_DataInStageCallback+0x48>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800e1e8:	210c      	movs	r1, #12
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800e1ea:	eb03 0243 	add.w	r2, r3, r3, lsl #1
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800e1ee:	fb01 5303 	mla	r3, r1, r3, r5
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800e1f2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800e1f6:	6f17      	ldr	r7, [r2, #112]	; 0x70
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 800e1f8:	3370      	adds	r3, #112	; 0x70
    }
    else
    {

        /* Check if a ZLP should be armed.  */
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800e1fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e1fc:	2a00      	cmp	r2, #0
 800e1fe:	d032      	beq.n	800e266 <HAL_PCD_DataInStageCallback+0x92>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800e200:	6b7a      	ldr	r2, [r7, #52]	; 0x34
        if (transfer_request -> ux_slave_transfer_request_force_zlp &&
 800e202:	2a00      	cmp	r2, #0
 800e204:	d131      	bne.n	800e26a <HAL_PCD_DataInStageCallback+0x96>
        }
        else
        {

            /* Set the completion code to no error.  */
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e206:	2000      	movs	r0, #0

            /* The transfer is completed.  */
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e208:	2102      	movs	r1, #2
            transfer_request -> ux_slave_transfer_request_actual_length =
 800e20a:	63ba      	str	r2, [r7, #56]	; 0x38
                transfer_request -> ux_slave_transfer_request_requested_length;

#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e20c:	685a      	ldr	r2, [r3, #4]
            transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e20e:	6478      	str	r0, [r7, #68]	; 0x44
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e210:	f042 0208 	orr.w	r2, r2, #8
            transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e214:	6239      	str	r1, [r7, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e216:	605a      	str	r2, [r3, #4]
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
        }
    }
}
 800e218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800e21c:	686f      	ldr	r7, [r5, #4]
    if (epnum == 0U)
 800e21e:	2900      	cmp	r1, #0
 800e220:	d146      	bne.n	800e2b0 <HAL_PCD_DataInStageCallback+0xdc>
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 800e222:	7b2b      	ldrb	r3, [r5, #12]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d1f7      	bne.n	800e218 <HAL_PCD_DataInStageCallback+0x44>
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e228:	f8d7 8028 	ldr.w	r8, [r7, #40]	; 0x28
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 800e22c:	460a      	mov	r2, r1
 800e22e:	460b      	mov	r3, r1
 800e230:	f7f7 ffdc 	bl	80061ec <HAL_PCD_EP_Receive>
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 800e234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e236:	f8b8 2010 	ldrh.w	r2, [r8, #16]
 800e23a:	4291      	cmp	r1, r2
 800e23c:	d81f      	bhi.n	800e27e <HAL_PCD_DataInStageCallback+0xaa>
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 800e23e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e240:	2b01      	cmp	r3, #1
 800e242:	d02c      	beq.n	800e29e <HAL_PCD_DataInStageCallback+0xca>
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e244:	2102      	movs	r1, #2
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800e246:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e248:	68ab      	ldr	r3, [r5, #8]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 800e24a:	63ba      	str	r2, [r7, #56]	; 0x38
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800e24c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e24e:	f043 0308 	orr.w	r3, r3, #8
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e252:	647c      	str	r4, [r7, #68]	; 0x44
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e254:	6239      	str	r1, [r7, #32]
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e256:	60ab      	str	r3, [r5, #8]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 800e258:	b112      	cbz	r2, 800e260 <HAL_PCD_DataInStageCallback+0x8c>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800e25a:	f107 0020 	add.w	r0, r7, #32
 800e25e:	4790      	blx	r2
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 800e260:	2304      	movs	r3, #4
 800e262:	732b      	strb	r3, [r5, #12]
 800e264:	e7d8      	b.n	800e218 <HAL_PCD_DataInStageCallback+0x44>
            transfer_request -> ux_slave_transfer_request_requested_length)
 800e266:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e268:	e7cd      	b.n	800e206 <HAL_PCD_DataInStageCallback+0x32>
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800e26a:	2300      	movs	r3, #0
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800e26c:	4621      	mov	r1, r4
 800e26e:	4630      	mov	r0, r6
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800e270:	65bb      	str	r3, [r7, #88]	; 0x58
            transfer_request -> ux_slave_transfer_request_in_transfer_length = 0;
 800e272:	63fb      	str	r3, [r7, #60]	; 0x3c
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800e274:	461a      	mov	r2, r3
}
 800e276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
            HAL_PCD_EP_Transmit(hpcd, epnum, 0, 0);
 800e27a:	f7f7 bfdd 	b.w	8006238 <HAL_PCD_EP_Transmit>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e27e:	1a8b      	subs	r3, r1, r2
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 800e280:	4293      	cmp	r3, r2
 800e282:	bf28      	it	cs
 800e284:	4613      	movcs	r3, r2
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e286:	6b3c      	ldr	r4, [r7, #48]	; 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800e288:	1ac9      	subs	r1, r1, r3
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e28a:	4422      	add	r2, r4
 800e28c:	633a      	str	r2, [r7, #48]	; 0x30
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 800e28e:	63f9      	str	r1, [r7, #60]	; 0x3c
                HAL_PCD_EP_Transmit(hpcd,
 800e290:	4630      	mov	r0, r6
 800e292:	f898 100e 	ldrb.w	r1, [r8, #14]
}
 800e296:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                HAL_PCD_EP_Transmit(hpcd,
 800e29a:	f7f7 bfcd 	b.w	8006238 <HAL_PCD_EP_Transmit>
                    HAL_PCD_EP_Transmit(hpcd,
 800e29e:	4623      	mov	r3, r4
 800e2a0:	4630      	mov	r0, r6
 800e2a2:	4622      	mov	r2, r4
 800e2a4:	f898 100e 	ldrb.w	r1, [r8, #14]
 800e2a8:	f7f7 ffc6 	bl	8006238 <HAL_PCD_EP_Transmit>
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 800e2ac:	65bc      	str	r4, [r7, #88]	; 0x58
 800e2ae:	e7b3      	b.n	800e218 <HAL_PCD_DataInStageCallback+0x44>
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800e2b0:	1d2b      	adds	r3, r5, #4
 800e2b2:	e7a2      	b.n	800e1fa <HAL_PCD_DataInStageCallback+0x26>
 800e2b4:	2000ae38 	.word	0x2000ae38

0800e2b8 <HAL_PCD_DataOutStageCallback>:

    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e2b8:	4b24      	ldr	r3, [pc, #144]	; (800e34c <HAL_PCD_DataOutStageCallback+0x94>)
{
 800e2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	f001 020f 	and.w	r2, r1, #15
 800e2c4:	69dd      	ldr	r5, [r3, #28]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 800e2c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e2ca:	eb05 0482 	add.w	r4, r5, r2, lsl #2

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 800e2ce:	6866      	ldr	r6, [r4, #4]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 800e2d0:	b921      	cbnz	r1, 800e2dc <HAL_PCD_DataOutStageCallback+0x24>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 800e2d2:	7b23      	ldrb	r3, [r4, #12]
 800e2d4:	2b02      	cmp	r3, #2
 800e2d6:	d00e      	beq.n	800e2f6 <HAL_PCD_DataOutStageCallback+0x3e>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 800e2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800e2dc:	f7f7 ffa2 	bl	8006224 <HAL_PCD_EP_GetRxCount>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e2e0:	2100      	movs	r1, #0
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e2e2:	2202      	movs	r2, #2
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e2e4:	68a3      	ldr	r3, [r4, #8]
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800e2e6:	63b0      	str	r0, [r6, #56]	; 0x38
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e2e8:	f043 0308 	orr.w	r3, r3, #8
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 800e2ec:	6471      	str	r1, [r6, #68]	; 0x44
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 800e2ee:	6232      	str	r2, [r6, #32]
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e2f0:	60a3      	str	r3, [r4, #8]
}
 800e2f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2f6:	4607      	mov	r7, r0
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 800e2f8:	6ab5      	ldr	r5, [r6, #40]	; 0x28
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 800e2fa:	f7f7 ff93 	bl	8006224 <HAL_PCD_EP_GetRxCount>
                transfer_request -> ux_slave_transfer_request_requested_length)
 800e2fe:	e9d6 230d 	ldrd	r2, r3, [r6, #52]	; 0x34
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800e302:	4403      	add	r3, r0
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800e304:	4293      	cmp	r3, r2
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 800e306:	63b3      	str	r3, [r6, #56]	; 0x38
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 800e308:	d811      	bhi.n	800e32e <HAL_PCD_DataOutStageCallback+0x76>
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 800e30a:	d00b      	beq.n	800e324 <HAL_PCD_DataOutStageCallback+0x6c>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 800e30c:	8a2b      	ldrh	r3, [r5, #16]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 800e30e:	4283      	cmp	r3, r0
 800e310:	d108      	bne.n	800e324 <HAL_PCD_DataOutStageCallback+0x6c>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e312:	6b32      	ldr	r2, [r6, #48]	; 0x30
                    HAL_PCD_EP_Receive(hpcd,
 800e314:	4638      	mov	r0, r7
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800e316:	441a      	add	r2, r3
 800e318:	6332      	str	r2, [r6, #48]	; 0x30
                    HAL_PCD_EP_Receive(hpcd,
 800e31a:	7ba9      	ldrb	r1, [r5, #14]
}
 800e31c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    HAL_PCD_EP_Receive(hpcd,
 800e320:	f7f7 bf64 	b.w	80061ec <HAL_PCD_EP_Receive>
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
 800e324:	68a3      	ldr	r3, [r4, #8]
 800e326:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e32a:	60a3      	str	r3, [r4, #8]
 800e32c:	e7d4      	b.n	800e2d8 <HAL_PCD_DataOutStageCallback+0x20>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800e32e:	2127      	movs	r1, #39	; 0x27
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e330:	68a3      	ldr	r3, [r4, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800e332:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e334:	f043 0308 	orr.w	r3, r3, #8
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 800e338:	6471      	str	r1, [r6, #68]	; 0x44
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_DONE;
 800e33a:	60a3      	str	r3, [r4, #8]
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 800e33c:	2a00      	cmp	r2, #0
 800e33e:	d0cb      	beq.n	800e2d8 <HAL_PCD_DataOutStageCallback+0x20>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800e340:	f106 0020 	add.w	r0, r6, #32
}
 800e344:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 800e348:	4710      	bx	r2
 800e34a:	bf00      	nop
 800e34c:	2000ae38 	.word	0x2000ae38

0800e350 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 800e350:	b538      	push	{r3, r4, r5, lr}
//	rt_kprintf("HAL_PCD_ResetCallback \r\n");

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800e352:	4d0c      	ldr	r5, [pc, #48]	; (800e384 <HAL_PCD_ResetCallback+0x34>)
{
 800e354:	4604      	mov	r4, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 800e356:	682b      	ldr	r3, [r5, #0]
 800e358:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e35a:	b972      	cbnz	r2, 800e37a <HAL_PCD_ResetCallback+0x2a>
        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 800e35c:	79e2      	ldrb	r2, [r4, #7]
 800e35e:	b142      	cbz	r2, 800e372 <HAL_PCD_ResetCallback+0x22>
        break;

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 800e360:	2201      	movs	r2, #1
 800e362:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        break;
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 800e366:	f000 f92d 	bl	800e5c4 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800e36a:	2201      	movs	r2, #1
 800e36c:	682b      	ldr	r3, [r5, #0]
 800e36e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800e370:	bd38      	pop	{r3, r4, r5, pc}
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 800e372:	2202      	movs	r2, #2
 800e374:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
        break;
 800e378:	e7f5      	b.n	800e366 <HAL_PCD_ResetCallback+0x16>
        _ux_device_stack_disconnect();
 800e37a:	f001 fc7f 	bl	800fc7c <_ux_device_stack_disconnect>
        _ux_system_slave -> ux_system_slave_speed =  UX_HIGH_SPEED_DEVICE;
 800e37e:	682b      	ldr	r3, [r5, #0]
 800e380:	e7ec      	b.n	800e35c <HAL_PCD_ResetCallback+0xc>
 800e382:	bf00      	nop
 800e384:	2000ae38 	.word	0x2000ae38

0800e388 <HAL_PCD_SuspendCallback>:
/**************************************************************************/
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e388:	4b03      	ldr	r3, [pc, #12]	; (800e398 <HAL_PCD_SuspendCallback+0x10>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800e390:	b10b      	cbz	r3, 800e396 <HAL_PCD_SuspendCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_SUSPENDED);
 800e392:	20f4      	movs	r0, #244	; 0xf4
 800e394:	4718      	bx	r3
    }
}
 800e396:	4770      	bx	lr
 800e398:	2000ae38 	.word	0x2000ae38

0800e39c <HAL_PCD_ResumeCallback>:
/**************************************************************************/
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e39c:	4b03      	ldr	r3, [pc, #12]	; (800e3ac <HAL_PCD_ResumeCallback+0x10>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800e3a4:	b10b      	cbz	r3, 800e3aa <HAL_PCD_ResumeCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_DEVICE_RESUMED);
 800e3a6:	20f3      	movs	r0, #243	; 0xf3
 800e3a8:	4718      	bx	r3
    }
}
 800e3aa:	4770      	bx	lr
 800e3ac:	2000ae38 	.word	0x2000ae38

0800e3b0 <HAL_PCD_SOFCallback>:
/**************************************************************************/
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{

    /* Check the status change callback.  */
    if (_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e3b0:	4b03      	ldr	r3, [pc, #12]	; (800e3c0 <HAL_PCD_SOFCallback+0x10>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800e3b8:	b10b      	cbz	r3, 800e3be <HAL_PCD_SOFCallback+0xe>
    {

       /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DCD_STM32_SOF_RECEIVED);
 800e3ba:	20f0      	movs	r0, #240	; 0xf0
 800e3bc:	4718      	bx	r3
    }
}
 800e3be:	4770      	bx	lr
 800e3c0:	2000ae38 	.word	0x2000ae38

0800e3c4 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e3c4:	460a      	mov	r2, r1
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 800e3c6:	7b89      	ldrb	r1, [r1, #14]
static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 800e3c8:	f001 037f 	and.w	r3, r1, #127	; 0x7f

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e3cc:	2b08      	cmp	r3, #8
 800e3ce:	d828      	bhi.n	800e422 <_ux_dcd_stm32_endpoint_create+0x5e>
{
 800e3d0:	b570      	push	{r4, r5, r6, lr}
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800e3d2:	f8d0 50dc 	ldr.w	r5, [r0, #220]	; 0xdc
 800e3d6:	792c      	ldrb	r4, [r5, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e3d8:	42a3      	cmp	r3, r4
 800e3da:	d20a      	bcs.n	800e3f2 <_ux_dcd_stm32_endpoint_create+0x2e>
        return(UX_NULL);

#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800e3dc:	240c      	movs	r4, #12
 800e3de:	fb04 0303 	mla	r3, r4, r3, r0
    if (ep_dir)
 800e3e2:	0608      	lsls	r0, r1, #24
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800e3e4:	bf4c      	ite	mi
 800e3e6:	3370      	addmi	r3, #112	; 0x70
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800e3e8:	3304      	addpl	r3, #4

    if (ed == UX_NULL)
        return(UX_NO_ED_AVAILABLE);

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800e3ea:	685c      	ldr	r4, [r3, #4]
 800e3ec:	f014 0601 	ands.w	r6, r4, #1
 800e3f0:	d001      	beq.n	800e3f6 <_ux_dcd_stm32_endpoint_create+0x32>
        return(UX_NO_ED_AVAILABLE);
 800e3f2:	2014      	movs	r0, #20
        return(UX_SUCCESS);
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
}
 800e3f4:	bd70      	pop	{r4, r5, r6, pc}
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 800e3f6:	f044 0401 	orr.w	r4, r4, #1
 800e3fa:	605c      	str	r4, [r3, #4]
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 800e3fc:	f021 0080 	bic.w	r0, r1, #128	; 0x80
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 800e400:	f021 047f 	bic.w	r4, r1, #127	; 0x7f
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 800e404:	6093      	str	r3, [r2, #8]
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 800e406:	601a      	str	r2, [r3, #0]
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 800e408:	7258      	strb	r0, [r3, #9]
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 800e40a:	729c      	strb	r4, [r3, #10]
        if (stm32_endpoint_index != 0)
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d0f1      	beq.n	800e3f4 <_ux_dcd_stm32_endpoint_create+0x30>
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 800e410:	7bd3      	ldrb	r3, [r2, #15]
 800e412:	4628      	mov	r0, r5
 800e414:	8a12      	ldrh	r2, [r2, #16]
 800e416:	f003 0303 	and.w	r3, r3, #3
 800e41a:	f7f7 fe75 	bl	8006108 <HAL_PCD_EP_Open>
        return(UX_SUCCESS);
 800e41e:	4630      	mov	r0, r6
}
 800e420:	bd70      	pop	{r4, r5, r6, pc}
        return(UX_NO_ED_AVAILABLE);
 800e422:	2014      	movs	r0, #20
}
 800e424:	4770      	bx	lr
 800e426:	bf00      	nop

0800e428 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e428:	b510      	push	{r4, lr}

    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 800e42a:	2400      	movs	r4, #0
 800e42c:	688b      	ldr	r3, [r1, #8]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e42e:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 800e432:	605c      	str	r4, [r3, #4]
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e434:	7b89      	ldrb	r1, [r1, #14]
 800e436:	f7f7 fea1 	bl	800617c <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 800e43a:	4620      	mov	r0, r4
 800e43c:	bd10      	pop	{r4, pc}
 800e43e:	bf00      	nop

0800e440 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e444:	688f      	ldr	r7, [r1, #8]
{
 800e446:	460c      	mov	r4, r1
 800e448:	4605      	mov	r5, r0

    UX_DISABLE
 800e44a:	f7f2 fe8d 	bl	8001168 <_ux_utility_interrupt_disable>
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800e44e:	f04f 0800 	mov.w	r8, #0
    UX_DISABLE
 800e452:	4606      	mov	r6, r0
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e454:	687b      	ldr	r3, [r7, #4]
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 800e456:	f887 8008 	strb.w	r8, [r7, #8]
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 800e45a:	f423 7343 	bic.w	r3, r3, #780	; 0x30c
 800e45e:	607b      	str	r3, [r7, #4]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 800e460:	7ba1      	ldrb	r1, [r4, #14]
 800e462:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800e466:	f7f7 ff43 	bl	80062f0 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e46a:	7ba1      	ldrb	r1, [r4, #14]
 800e46c:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800e470:	f7f7 ff8e 	bl	8006390 <HAL_PCD_EP_Flush>
    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
#endif

    UX_RESTORE
 800e474:	4630      	mov	r0, r6
 800e476:	f7f2 fe7b 	bl	8001170 <_ux_utility_interrupt_restore>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 800e47a:	4640      	mov	r0, r8
 800e47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e480 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 800e480:	b508      	push	{r3, lr}

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e482:	688b      	ldr	r3, [r1, #8]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800e484:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800e488:	685a      	ldr	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800e48a:	f893 c00a 	ldrb.w	ip, [r3, #10]
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 800e48e:	f042 0204 	orr.w	r2, r2, #4
 800e492:	605a      	str	r2, [r3, #4]
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 800e494:	7b89      	ldrb	r1, [r1, #14]
 800e496:	ea41 010c 	orr.w	r1, r1, ip
 800e49a:	f7f7 feeb 	bl	8006274 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
}
 800e49e:	2000      	movs	r0, #0
 800e4a0:	bd08      	pop	{r3, pc}
 800e4a2:	bf00      	nop

0800e4a4 <_ux_dcd_stm32_endpoint_status>:
ULONG ep_num = ep_addr & 0x7Fu;
 800e4a4:	f001 037f 	and.w	r3, r1, #127	; 0x7f
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e4a8:	2b08      	cmp	r3, #8
 800e4aa:	d813      	bhi.n	800e4d4 <_ux_dcd_stm32_endpoint_status+0x30>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 800e4ac:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800e4b0:	7912      	ldrb	r2, [r2, #4]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 800e4b2:	4293      	cmp	r3, r2
 800e4b4:	d20e      	bcs.n	800e4d4 <_ux_dcd_stm32_endpoint_status+0x30>
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800e4b6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e4ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    if (ep_dir)
 800e4be:	060a      	lsls	r2, r1, #24
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
 800e4c0:	bf4c      	ite	mi
 800e4c2:	3070      	addmi	r0, #112	; 0x70
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 800e4c4:	3004      	addpl	r0, #4

    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800e4c6:	6840      	ldr	r0, [r0, #4]
 800e4c8:	07c3      	lsls	r3, r0, #31
        return(UX_ERROR);

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 800e4ca:	bf4c      	ite	mi
 800e4cc:	f3c0 0080 	ubfxmi	r0, r0, #2, #1
        return(UX_ERROR);
 800e4d0:	20ff      	movpl	r0, #255	; 0xff
        return(UX_FALSE);
    else
        return(UX_TRUE);
}
 800e4d2:	4770      	bx	lr
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	685b      	ldr	r3, [r3, #4]
 800e4d8:	deff      	udf	#255	; 0xff
 800e4da:	bf00      	nop

0800e4dc <_ux_dcd_stm32_frame_number_get>:
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{

    /* This function never fails. */
    return(UX_SUCCESS);
}
 800e4dc:	2000      	movs	r0, #0
 800e4de:	4770      	bx	lr

0800e4e0 <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 800e4e0:	b508      	push	{r3, lr}
 800e4e2:	460b      	mov	r3, r1
 800e4e4:	4611      	mov	r1, r2
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 800e4e6:	6802      	ldr	r2, [r0, #0]
 800e4e8:	2a00      	cmp	r2, #0
 800e4ea:	d040      	beq.n	800e56e <_ux_dcd_stm32_function+0x8e>

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;

    /* Look at the function and route it.  */
    switch(function)
 800e4ec:	3b0a      	subs	r3, #10
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e4ee:	69c0      	ldr	r0, [r0, #28]
    switch(function)
 800e4f0:	2b0b      	cmp	r3, #11
 800e4f2:	d835      	bhi.n	800e560 <_ux_dcd_stm32_function+0x80>
 800e4f4:	e8df f003 	tbb	[pc, r3]
 800e4f8:	120e340a 	.word	0x120e340a
 800e4fc:	221e1a16 	.word	0x221e1a16
 800e500:	06302c28 	.word	0x06302c28
        break;
    }

    /* Return completion status.  */
    return(status);
}
 800e504:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 800e508:	f7ff bfcc 	b.w	800e4a4 <_ux_dcd_stm32_endpoint_status>
}
 800e50c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 800e510:	f7ff bfe4 	b.w	800e4dc <_ux_dcd_stm32_frame_number_get>
}
 800e514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 800e518:	f000 b8c4 	b.w	800e6a4 <_ux_dcd_stm32_transfer_run>
}
 800e51c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 800e520:	f000 b8b0 	b.w	800e684 <_ux_dcd_stm32_transfer_abort>
}
 800e524:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 800e528:	f7ff bf4c 	b.w	800e3c4 <_ux_dcd_stm32_endpoint_create>
}
 800e52c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 800e530:	f7ff bf7a 	b.w	800e428 <_ux_dcd_stm32_endpoint_destroy>
}
 800e534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 800e538:	f7ff bf82 	b.w	800e440 <_ux_dcd_stm32_endpoint_reset>
        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 800e53c:	b2c9      	uxtb	r1, r1
 800e53e:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 800e542:	f7f7 fdcd 	bl	80060e0 <HAL_PCD_SetAddress>
}
 800e546:	bd08      	pop	{r3, pc}
        _ux_dcd_stm32_setup_isr_pending(dcd_stm32);
 800e548:	f7ff fda4 	bl	800e094 <_ux_dcd_stm32_setup_isr_pending>
        status = UX_SUCCESS;
 800e54c:	2000      	movs	r0, #0
}
 800e54e:	bd08      	pop	{r3, pc}
        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 800e550:	290b      	cmp	r1, #11
 800e552:	d013      	beq.n	800e57c <_ux_dcd_stm32_function+0x9c>
          status = UX_SUCCESS;
 800e554:	2000      	movs	r0, #0
}
 800e556:	bd08      	pop	{r3, pc}
 800e558:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 800e55c:	f7ff bf90 	b.w	800e480 <_ux_dcd_stm32_endpoint_stall>
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 800e560:	2102      	movs	r1, #2
 800e562:	2254      	movs	r2, #84	; 0x54
 800e564:	4608      	mov	r0, r1
 800e566:	f001 fee9 	bl	801033c <_ux_system_error_handler>
        status =  UX_FUNCTION_NOT_SUPPORTED;
 800e56a:	2054      	movs	r0, #84	; 0x54
}
 800e56c:	bd08      	pop	{r3, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 800e56e:	2102      	movs	r1, #2
 800e570:	2255      	movs	r2, #85	; 0x55
 800e572:	4608      	mov	r0, r1
 800e574:	f001 fee2 	bl	801033c <_ux_system_error_handler>
        return(UX_CONTROLLER_UNKNOWN);
 800e578:	2055      	movs	r0, #85	; 0x55
}
 800e57a:	bd08      	pop	{r3, pc}
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 800e57c:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 800e580:	f7f6 ffe2 	bl	8005548 <HAL_PCD_Stop>
}
 800e584:	bd08      	pop	{r3, pc}
 800e586:	bf00      	nop

0800e588 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 800e588:	b538      	push	{r3, r4, r5, lr}

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 800e58a:	2080      	movs	r0, #128	; 0x80
{
 800e58c:	460d      	mov	r5, r1

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 800e58e:	2100      	movs	r1, #0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e590:	4c0a      	ldr	r4, [pc, #40]	; (800e5bc <_ux_dcd_stm32_initialize+0x34>)
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 800e592:	22e0      	movs	r2, #224	; 0xe0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e594:	6824      	ldr	r4, [r4, #0]
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 800e596:	6060      	str	r0, [r4, #4]
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 800e598:	4608      	mov	r0, r1
 800e59a:	f001 ff8b 	bl	80104b4 <_ux_utility_memory_allocate>

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 800e59e:	b150      	cbz	r0, 800e5b6 <_ux_dcd_stm32_initialize+0x2e>
 800e5a0:	4603      	mov	r3, r0
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 800e5a2:	2201      	movs	r2, #1
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 800e5a4:	4906      	ldr	r1, [pc, #24]	; (800e5c0 <_ux_dcd_stm32_initialize+0x38>)
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 800e5a6:	61e0      	str	r0, [r4, #28]
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 800e5a8:	6004      	str	r4, [r0, #0]
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 800e5aa:	61a1      	str	r1, [r4, #24]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 800e5ac:	2000      	movs	r0, #0
    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 800e5ae:	f8c3 50dc 	str.w	r5, [r3, #220]	; 0xdc
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 800e5b2:	6022      	str	r2, [r4, #0]
}
 800e5b4:	bd38      	pop	{r3, r4, r5, pc}
        return(UX_MEMORY_INSUFFICIENT);
 800e5b6:	2012      	movs	r0, #18
}
 800e5b8:	bd38      	pop	{r3, r4, r5, pc}
 800e5ba:	bf00      	nop
 800e5bc:	2000ae38 	.word	0x2000ae38
 800e5c0:	0800e4e1 	.word	0x0800e4e1

0800e5c4 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 800e5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800e5c6:	4e2d      	ldr	r6, [pc, #180]	; (800e67c <_ux_dcd_stm32_initialize_complete+0xb8>)
 800e5c8:	6834      	ldr	r4, [r6, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800e5ca:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 800e5ce:	69e5      	ldr	r5, [r4, #28]
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 800e5d0:	2b01      	cmp	r3, #1
 800e5d2:	d04e      	beq.n	800e672 <_ux_dcd_stm32_initialize_complete+0xae>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800e5d4:	2200      	movs	r2, #0

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800e5d6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 800e5da:	f8c4 2160 	str.w	r2, [r4, #352]	; 0x160
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 800e5de:	2b01      	cmp	r3, #1
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 800e5e0:	bf0c      	ite	eq
 800e5e2:	e9d4 0335 	ldrdeq	r0, r3, [r4, #212]	; 0xd4
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 800e5e6:	e9d4 0337 	ldrdne	r0, r3, [r4, #220]	; 0xdc
 800e5ea:	e9c4 0333 	strd	r0, r3, [r4, #204]	; 0xcc
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800e5ee:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    _ux_utility_descriptor_parse(device_framework,
 800e5f2:	220e      	movs	r2, #14
 800e5f4:	4922      	ldr	r1, [pc, #136]	; (800e680 <_ux_dcd_stm32_initialize_complete+0xbc>)
 800e5f6:	f104 0328 	add.w	r3, r4, #40	; 0x28
 800e5fa:	f001 ff1b 	bl	8010434 <_ux_utility_descriptor_parse>

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800e5fe:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800e600:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 800e604:	66e2      	str	r2, [r4, #108]	; 0x6c
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 800e606:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 800e60a:	6662      	str	r2, [r4, #100]	; 0x64

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800e60c:	210e      	movs	r1, #14
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800e60e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 800e612:	6723      	str	r3, [r4, #112]	; 0x70
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800e614:	4620      	mov	r0, r4
 800e616:	69a3      	ldr	r3, [r4, #24]
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 800e618:	f8c4 7090 	str.w	r7, [r4, #144]	; 0x90
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 800e61c:	4798      	blx	r3
                                    (VOID *) &device -> ux_slave_device_control_endpoint);

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 800e61e:	2100      	movs	r1, #0
 800e620:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800e624:	f7f7 feb4 	bl	8006390 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800e628:	2300      	movs	r3, #0
 800e62a:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 800e62e:	4619      	mov	r1, r3
 800e630:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800e634:	f7f7 fd68 	bl	8006108 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 800e638:	2180      	movs	r1, #128	; 0x80
 800e63a:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800e63e:	f7f7 fea7 	bl	8006390 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 800e642:	2300      	movs	r3, #0
 800e644:	2180      	movs	r1, #128	; 0x80
 800e646:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 800e64a:	f8d5 00dc 	ldr.w	r0, [r5, #220]	; 0xdc
 800e64e:	f7f7 fd5b 	bl	8006108 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800e652:	2300      	movs	r3, #0

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800e654:	2208      	movs	r2, #8
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 800e656:	2001      	movs	r0, #1

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e658:	6831      	ldr	r1, [r6, #0]
 800e65a:	f8d1 1168 	ldr.w	r1, [r1, #360]	; 0x168
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 800e65e:	e9c4 0017 	strd	r0, r0, [r4, #92]	; 0x5c
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 800e662:	e9c4 321d 	strd	r3, r2, [r4, #116]	; 0x74
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800e666:	6423      	str	r3, [r4, #64]	; 0x40
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 800e668:	6722      	str	r2, [r4, #112]	; 0x70
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800e66a:	b101      	cbz	r1, 800e66e <_ux_dcd_stm32_initialize_complete+0xaa>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 800e66c:	4788      	blx	r1
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
}
 800e66e:	2000      	movs	r0, #0
 800e670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 800e672:	e9d4 033d 	ldrd	r0, r3, [r4, #244]	; 0xf4
 800e676:	e9c4 0333 	strd	r0, r3, [r4, #204]	; 0xcc
 800e67a:	e7b8      	b.n	800e5ee <_ux_dcd_stm32_initialize_complete+0x2a>
 800e67c:	2000ae38 	.word	0x2000ae38
 800e680:	200001f4 	.word	0x200001f4

0800e684 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800e684:	b538      	push	{r3, r4, r5, lr}
 800e686:	4604      	mov	r4, r0

   UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e688:	688d      	ldr	r5, [r1, #8]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e68a:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
 800e68e:	7ba9      	ldrb	r1, [r5, #14]
 800e690:	f7f7 fe70 	bl	8006374 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 800e694:	7ba9      	ldrb	r1, [r5, #14]
 800e696:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 800e69a:	f7f7 fe79 	bl	8006390 <HAL_PCD_EP_Flush>
    /* No semaphore put here since it's already done in stack.  */
#endif /* USBD_HAL_TRANSFER_ABORT_NOT_SUPPORTED */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
}
 800e69e:	2000      	movs	r0, #0
 800e6a0:	bd38      	pop	{r3, r4, r5, pc}
 800e6a2:	bf00      	nop

0800e6a4 <_ux_dcd_stm32_transfer_run>:
/*                                            controller,                 */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_run(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 800e6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_DCD_STM32_ED         *ed;
ULONG                   ed_status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 800e6a8:	f8d1 8008 	ldr.w	r8, [r1, #8]
{
 800e6ac:	460c      	mov	r4, r1
 800e6ae:	4606      	mov	r6, r0

    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 800e6b0:	f8d8 7008 	ldr.w	r7, [r8, #8]

    UX_DISABLE
 800e6b4:	f7f2 fd58 	bl	8001168 <_ux_utility_interrupt_disable>

    /* Get current ED status.  */
    ed_status = ed -> ux_dcd_stm32_ed_status;

    /* Invalid state.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state == UX_DEVICE_RESET)
 800e6b8:	4b1c      	ldr	r3, [pc, #112]	; (800e72c <_ux_dcd_stm32_transfer_run+0x88>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6be:	b323      	cbz	r3, 800e70a <_ux_dcd_stm32_transfer_run+0x66>
    ed_status = ed -> ux_dcd_stm32_ed_status;
 800e6c0:	687b      	ldr	r3, [r7, #4]
        UX_RESTORE
        return(UX_STATE_EXIT);
    }

    /* ED stalled.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_STALLED)
 800e6c2:	075d      	lsls	r5, r3, #29
 800e6c4:	d42c      	bmi.n	800e720 <_ux_dcd_stm32_transfer_run+0x7c>
        UX_RESTORE
        return(UX_STATE_NEXT);
    }

    /* ED transfer in progress.  */
    if (ed_status & UX_DCD_STM32_ED_STATUS_TRANSFER)
 800e6c6:	0799      	lsls	r1, r3, #30
 800e6c8:	d50a      	bpl.n	800e6e0 <_ux_dcd_stm32_transfer_run+0x3c>
    {
        if (ed_status & UX_DCD_STM32_ED_STATUS_DONE)
 800e6ca:	071a      	lsls	r2, r3, #28
 800e6cc:	d518      	bpl.n	800e700 <_ux_dcd_stm32_transfer_run+0x5c>
        {

            /* Keep used, stall and task pending bits.  */
            ed -> ux_dcd_stm32_ed_status &= (UX_DCD_STM32_ED_STATUS_USED |
 800e6ce:	f240 4205 	movw	r2, #1029	; 0x405
 800e6d2:	4013      	ands	r3, r2
 800e6d4:	607b      	str	r3, [r7, #4]
                                        UX_DCD_STM32_ED_STATUS_STALLED |
                                        UX_DCD_STM32_ED_STATUS_TASK_PENDING);
            UX_RESTORE
 800e6d6:	f7f2 fd4b 	bl	8001170 <_ux_utility_interrupt_restore>
            return(UX_STATE_NEXT);
 800e6da:	2004      	movs	r0, #4
    }

    /* Return to caller with WAIT.  */
    UX_RESTORE
    return(UX_STATE_WAIT);
}
 800e6dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_TRANSFER;
 800e6e0:	f043 0302 	orr.w	r3, r3, #2
 800e6e4:	607b      	str	r3, [r7, #4]
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 800e6e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e6e8:	4605      	mov	r5, r0
 800e6ea:	2b03      	cmp	r3, #3
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800e6ec:	68e2      	ldr	r2, [r4, #12]
 800e6ee:	6963      	ldr	r3, [r4, #20]
 800e6f0:	f898 100e 	ldrb.w	r1, [r8, #14]
 800e6f4:	f8d6 00dc 	ldr.w	r0, [r6, #220]	; 0xdc
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 800e6f8:	d00e      	beq.n	800e718 <_ux_dcd_stm32_transfer_run+0x74>
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 800e6fa:	f7f7 fd77 	bl	80061ec <HAL_PCD_EP_Receive>
    UX_RESTORE
 800e6fe:	4628      	mov	r0, r5
 800e700:	f7f2 fd36 	bl	8001170 <_ux_utility_interrupt_restore>
    return(UX_STATE_WAIT);
 800e704:	2005      	movs	r0, #5
}
 800e706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_BUS_RESET;
 800e70a:	2326      	movs	r3, #38	; 0x26
 800e70c:	6263      	str	r3, [r4, #36]	; 0x24
        UX_RESTORE
 800e70e:	f7f2 fd2f 	bl	8001170 <_ux_utility_interrupt_restore>
        return(UX_STATE_EXIT);
 800e712:	2001      	movs	r0, #1
}
 800e714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 800e718:	f7f7 fd8e 	bl	8006238 <HAL_PCD_EP_Transmit>
    UX_RESTORE
 800e71c:	4628      	mov	r0, r5
 800e71e:	e7ef      	b.n	800e700 <_ux_dcd_stm32_transfer_run+0x5c>
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_STALLED;
 800e720:	2321      	movs	r3, #33	; 0x21
 800e722:	6263      	str	r3, [r4, #36]	; 0x24
        UX_RESTORE
 800e724:	f7f2 fd24 	bl	8001170 <_ux_utility_interrupt_restore>
        return(UX_STATE_NEXT);
 800e728:	2004      	movs	r0, #4
 800e72a:	e7d7      	b.n	800e6dc <_ux_dcd_stm32_transfer_run+0x38>
 800e72c:	2000ae38 	.word	0x2000ae38

0800e730 <ux_device_class_cdc_acm_read_callback>:
//        data_pointer[length] = '\0';
//        Draw_String(0, 0, (char *)data_pointer, 0x0000ff00, 0);
//    }
	  ULONG i = 0;

	  for ( i = 0; i < length; i++)
 800e730:	b173      	cbz	r3, 800e750 <ux_device_class_cdc_acm_read_callback+0x20>
{
 800e732:	b570      	push	{r4, r5, r6, lr}
 800e734:	4614      	mov	r4, r2
 800e736:	4e07      	ldr	r6, [pc, #28]	; (800e754 <ux_device_class_cdc_acm_read_callback+0x24>)
 800e738:	18d5      	adds	r5, r2, r3
		{
			xQueueSend(g_xUSBUART_RX_Queue, (const void *)&data_pointer[i], 0);
 800e73a:	2300      	movs	r3, #0
 800e73c:	4621      	mov	r1, r4
 800e73e:	461a      	mov	r2, r3
 800e740:	6830      	ldr	r0, [r6, #0]
	  for ( i = 0; i < length; i++)
 800e742:	3401      	adds	r4, #1
			xQueueSend(g_xUSBUART_RX_Queue, (const void *)&data_pointer[i], 0);
 800e744:	f7f4 f810 	bl	8002768 <xQueueGenericSend>
	  for ( i = 0; i < length; i++)
 800e748:	42ac      	cmp	r4, r5
 800e74a:	d1f6      	bne.n	800e73a <ux_device_class_cdc_acm_read_callback+0xa>
		}
		return 0;
}
 800e74c:	2000      	movs	r0, #0
 800e74e:	bd70      	pop	{r4, r5, r6, pc}
 800e750:	2000      	movs	r0, #0
 800e752:	4770      	bx	lr
 800e754:	2000a94c 	.word	0x2000a94c

0800e758 <ux_device_class_cdc_acm_write_callback>:
{
 800e758:	b508      	push	{r3, lr}
	xSemaphoreGive(g_xUSBUARTSend);
 800e75a:	2300      	movs	r3, #0
 800e75c:	4a03      	ldr	r2, [pc, #12]	; (800e76c <ux_device_class_cdc_acm_write_callback+0x14>)
 800e75e:	4619      	mov	r1, r3
 800e760:	6810      	ldr	r0, [r2, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	f7f4 f800 	bl	8002768 <xQueueGenericSend>
}
 800e768:	2000      	movs	r0, #0
 800e76a:	bd08      	pop	{r3, pc}
 800e76c:	2000a948 	.word	0x2000a948

0800e770 <USBD_CDC_ACM_Activate>:
  *         This function is called when insertion of a CDC ACM device.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_Activate(VOID *cdc_acm_instance)
{
 800e770:	b530      	push	{r4, r5, lr}
  UX_SLAVE_CLASS_CDC_ACM_CALLBACK_PARAMETER parameter;

  /* Save the CDC instance */
  cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*) cdc_acm_instance;

  parameter.ux_device_class_cdc_acm_parameter_write_callback = ux_device_class_cdc_acm_write_callback;
 800e772:	4910      	ldr	r1, [pc, #64]	; (800e7b4 <USBD_CDC_ACM_Activate+0x44>)
  parameter.ux_device_class_cdc_acm_parameter_read_callback = ux_device_class_cdc_acm_read_callback;
 800e774:	4a10      	ldr	r2, [pc, #64]	; (800e7b8 <USBD_CDC_ACM_Activate+0x48>)
{
 800e776:	b083      	sub	sp, #12
  cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*) cdc_acm_instance;
 800e778:	4b10      	ldr	r3, [pc, #64]	; (800e7bc <USBD_CDC_ACM_Activate+0x4c>)
  ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_START, (VOID *)&parameter);

	if (!g_xUSBUARTSend)
 800e77a:	4d11      	ldr	r5, [pc, #68]	; (800e7c0 <USBD_CDC_ACM_Activate+0x50>)
  parameter.ux_device_class_cdc_acm_parameter_read_callback = ux_device_class_cdc_acm_read_callback;
 800e77c:	e9cd 1200 	strd	r1, r2, [sp]
  ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_START, (VOID *)&parameter);
 800e780:	2106      	movs	r1, #6
 800e782:	466a      	mov	r2, sp
  cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*) cdc_acm_instance;
 800e784:	6018      	str	r0, [r3, #0]
  ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_START, (VOID *)&parameter);
 800e786:	f000 f929 	bl	800e9dc <_ux_device_class_cdc_acm_ioctl>
	if (!g_xUSBUARTSend)
 800e78a:	682c      	ldr	r4, [r5, #0]
 800e78c:	b10c      	cbz	r4, 800e792 <USBD_CDC_ACM_Activate+0x22>
//  }

  /* USER CODE END USBD_CDC_ACM_Activate */

  return;
}
 800e78e:	b003      	add	sp, #12
 800e790:	bd30      	pop	{r4, r5, pc}
		g_xUSBUARTSend = xSemaphoreCreateBinary( );
 800e792:	4621      	mov	r1, r4
 800e794:	2203      	movs	r2, #3
 800e796:	2001      	movs	r0, #1
 800e798:	f7f3 ffbc 	bl	8002714 <xQueueGenericCreate>
 800e79c:	4603      	mov	r3, r0
		g_xUSBUART_RX_Queue = xQueueCreate(200, 1);
 800e79e:	4622      	mov	r2, r4
 800e7a0:	2101      	movs	r1, #1
 800e7a2:	20c8      	movs	r0, #200	; 0xc8
		g_xUSBUARTSend = xSemaphoreCreateBinary( );
 800e7a4:	602b      	str	r3, [r5, #0]
		g_xUSBUART_RX_Queue = xQueueCreate(200, 1);
 800e7a6:	f7f3 ffb5 	bl	8002714 <xQueueGenericCreate>
 800e7aa:	4b06      	ldr	r3, [pc, #24]	; (800e7c4 <USBD_CDC_ACM_Activate+0x54>)
 800e7ac:	6018      	str	r0, [r3, #0]
}
 800e7ae:	b003      	add	sp, #12
 800e7b0:	bd30      	pop	{r4, r5, pc}
 800e7b2:	bf00      	nop
 800e7b4:	0800e759 	.word	0x0800e759
 800e7b8:	0800e731 	.word	0x0800e731
 800e7bc:	2000a944 	.word	0x2000a944
 800e7c0:	2000a948 	.word	0x2000a948
 800e7c4:	2000a94c 	.word	0x2000a94c

0800e7c8 <USBD_CDC_ACM_Deactivate>:
{
  /* USER CODE BEGIN USBD_CDC_ACM_Deactivate */
  UX_PARAMETER_NOT_USED(cdc_acm_instance);

  /* Reset the cdc acm instance */
  cdc_acm = UX_NULL;
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	4b01      	ldr	r3, [pc, #4]	; (800e7d0 <USBD_CDC_ACM_Deactivate+0x8>)
 800e7cc:	601a      	str	r2, [r3, #0]
//  HAL_UART_DeInit(uart_handler);

  /* USER CODE END USBD_CDC_ACM_Deactivate */

  return;
}
 800e7ce:	4770      	bx	lr
 800e7d0:	2000a944 	.word	0x2000a944

0800e7d4 <USBD_CDC_ACM_ParameterChange>:
  *         This function is invoked to manage the CDC ACM class requests.
  * @param  cdc_acm_instance: Pointer to the cdc acm class instance.
  * @retval none
  */
VOID USBD_CDC_ACM_ParameterChange(VOID *cdc_acm_instance)
{
 800e7d4:	b508      	push	{r3, lr}
  device = &_ux_system_slave -> ux_system_slave_device;

  /* Get the pointer to the transfer request associated with the control endpoint. */
  transfer_request = &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

  request = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800e7d6:	4b13      	ldr	r3, [pc, #76]	; (800e824 <USBD_CDC_ACM_ParameterChange+0x50>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99

  switch (request)
 800e7de:	2b20      	cmp	r3, #32
 800e7e0:	d009      	beq.n	800e7f6 <USBD_CDC_ACM_ParameterChange+0x22>
 800e7e2:	2b21      	cmp	r3, #33	; 0x21
 800e7e4:	d106      	bne.n	800e7f4 <USBD_CDC_ACM_ParameterChange+0x20>
      break;

    case UX_SLAVE_CLASS_CDC_ACM_GET_LINE_CODING :

      /* Set the Line Coding parameters */
      if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_LINE_CODING,
 800e7e6:	4b10      	ldr	r3, [pc, #64]	; (800e828 <USBD_CDC_ACM_ParameterChange+0x54>)
 800e7e8:	2101      	movs	r1, #1
 800e7ea:	4a10      	ldr	r2, [pc, #64]	; (800e82c <USBD_CDC_ACM_ParameterChange+0x58>)
 800e7ec:	6818      	ldr	r0, [r3, #0]
 800e7ee:	f000 f8f5 	bl	800e9dc <_ux_device_class_cdc_acm_ioctl>
 800e7f2:	b980      	cbnz	r0, 800e816 <USBD_CDC_ACM_ParameterChange+0x42>
  }

  /* USER CODE END USBD_CDC_ACM_ParameterChange */

  return;
}
 800e7f4:	bd08      	pop	{r3, pc}
      if (ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_GET_LINE_CODING,
 800e7f6:	4b0c      	ldr	r3, [pc, #48]	; (800e828 <USBD_CDC_ACM_ParameterChange+0x54>)
 800e7f8:	2102      	movs	r1, #2
 800e7fa:	4a0c      	ldr	r2, [pc, #48]	; (800e82c <USBD_CDC_ACM_ParameterChange+0x58>)
 800e7fc:	6818      	ldr	r0, [r3, #0]
 800e7fe:	f000 f8ed 	bl	800e9dc <_ux_device_class_cdc_acm_ioctl>
 800e802:	b960      	cbnz	r0, 800e81e <USBD_CDC_ACM_ParameterChange+0x4a>
      if (CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate < MIN_BAUDRATE)
 800e804:	4b09      	ldr	r3, [pc, #36]	; (800e82c <USBD_CDC_ACM_ParameterChange+0x58>)
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	f5b2 5f16 	cmp.w	r2, #9600	; 0x2580
 800e80c:	d2f2      	bcs.n	800e7f4 <USBD_CDC_ACM_ParameterChange+0x20>
        CDC_VCP_LineCoding.ux_slave_class_cdc_acm_parameter_baudrate = MIN_BAUDRATE;
 800e80e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800e812:	601a      	str	r2, [r3, #0]
}
 800e814:	bd08      	pop	{r3, pc}
 800e816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Error_Handler();
 800e81a:	f7f3 bca9 	b.w	8002170 <Error_Handler>
        Error_Handler();
 800e81e:	f7f3 fca7 	bl	8002170 <Error_Handler>
 800e822:	e7ef      	b.n	800e804 <USBD_CDC_ACM_ParameterChange+0x30>
 800e824:	2000ae38 	.word	0x2000ae38
 800e828:	2000a944 	.word	0x2000a944
 800e82c:	200001bc 	.word	0x200001bc

0800e830 <_ux_device_class_cdc_acm_activate>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800e830:	6a02      	ldr	r2, [r0, #32]
{
 800e832:	b508      	push	{r3, lr}

    /* Get the interface that owns this instance.  */
    interface_ptr =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 800e834:	6883      	ldr	r3, [r0, #8]
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800e836:	6c90      	ldr	r0, [r2, #72]	; 0x48
         
    /* Now the opposite, store the interface in the class instance.  */
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;

    /* If there is a activate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800e838:	6842      	ldr	r2, [r0, #4]
    interface_ptr -> ux_slave_interface_class_instance =  (VOID *)cdc_acm;
 800e83a:	6098      	str	r0, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_interface =  interface_ptr;
 800e83c:	6003      	str	r3, [r0, #0]
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate != UX_NULL)
 800e83e:	b102      	cbz	r2, 800e842 <_ux_device_class_cdc_acm_activate+0x12>
    {        
        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate(cdc_acm);
 800e840:	4790      	blx	r2
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, cdc_acm, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 800e842:	2000      	movs	r0, #0
 800e844:	bd08      	pop	{r3, pc}
 800e846:	bf00      	nop

0800e848 <_ux_device_class_cdc_acm_control_request>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 800e848:	4603      	mov	r3, r0
 800e84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e84e:	4a32      	ldr	r2, [pc, #200]	; (800e918 <_ux_device_class_cdc_acm_control_request+0xd0>)
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800e850:	6a1b      	ldr	r3, [r3, #32]
    device =  &_ux_system_slave -> ux_system_slave_device;
 800e852:	6814      	ldr	r4, [r2, #0]
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800e854:	6c9d      	ldr	r5, [r3, #72]	; 0x48

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);

    /* Extract all necessary fields of the value.  */
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800e856:	f104 009a 	add.w	r0, r4, #154	; 0x9a
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800e85a:	f894 6099 	ldrb.w	r6, [r4, #153]	; 0x99
    value =  _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800e85e:	f001 ff53 	bl	8010708 <_ux_utility_short_get>
 800e862:	4607      	mov	r7, r0

    /* Pickup the request length.  */
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800e864:	f104 009e 	add.w	r0, r4, #158	; 0x9e
 800e868:	f001 ff4e 	bl	8010708 <_ux_utility_short_get>

    transmit_length = request_length ;
    
    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 800e86c:	2e21      	cmp	r6, #33	; 0x21
 800e86e:	d006      	beq.n	800e87e <_ux_device_class_cdc_acm_control_request+0x36>
 800e870:	2e22      	cmp	r6, #34	; 0x22
 800e872:	d039      	beq.n	800e8e8 <_ux_device_class_cdc_acm_control_request+0xa0>
 800e874:	2e20      	cmp	r6, #32
 800e876:	d022      	beq.n	800e8be <_ux_device_class_cdc_acm_control_request+0x76>
 800e878:	20ff      	movs	r0, #255	; 0xff
            return(UX_ERROR);
    }

    /* It's handled.  */
    return(UX_SUCCESS);
}
 800e87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (request_length >  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_RESPONSE_SIZE) 
 800e87e:	4680      	mov	r8, r0
            _ux_utility_long_put(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT, 
 800e880:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800e882:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800e884:	f001 fe0c 	bl	80104a0 <_ux_utility_long_put>
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800e888:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800e88c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800e88e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800e892:	711a      	strb	r2, [r3, #4]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT)   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800e894:	f895 2049 	ldrb.w	r2, [r5, #73]	; 0x49
 800e898:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800e89a:	715a      	strb	r2, [r3, #5]
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800e89c:	f895 104a 	ldrb.w	r1, [r5, #74]	; 0x4a
 800e8a0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e8a2:	2303      	movs	r3, #3
            *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT) = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800e8a4:	7191      	strb	r1, [r2, #6]
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800e8a6:	4642      	mov	r2, r8
 800e8a8:	2a07      	cmp	r2, #7
 800e8aa:	4641      	mov	r1, r8
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800e8ac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
            _ux_device_stack_transfer_request(transfer_request, transmit_length, request_length);
 800e8b0:	bf28      	it	cs
 800e8b2:	2107      	movcs	r1, #7
 800e8b4:	f001 fcd0 	bl	8010258 <_ux_device_stack_transfer_request>
    return(UX_SUCCESS);
 800e8b8:	2000      	movs	r0, #0
}
 800e8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800e8be:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800e8c0:	f001 fdec 	bl	801049c <_ux_utility_long_get>
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800e8c4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  = _ux_utility_long_get(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE_STRUCT);
 800e8c6:	6468      	str	r0, [r5, #68]	; 0x44
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800e8c8:	7919      	ldrb	r1, [r3, #4]
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800e8ca:	68ea      	ldr	r2, [r5, #12]
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT_STRUCT);
 800e8cc:	f885 1048 	strb.w	r1, [r5, #72]	; 0x48
            cdc_acm -> ux_slave_class_cdc_acm_parity    = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY_STRUCT);
 800e8d0:	7959      	ldrb	r1, [r3, #5]
 800e8d2:	f885 1049 	strb.w	r1, [r5, #73]	; 0x49
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  = *(transfer_request -> ux_slave_transfer_request_data_pointer + UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT_STRUCT);
 800e8d6:	799b      	ldrb	r3, [r3, #6]
 800e8d8:	f885 304a 	strb.w	r3, [r5, #74]	; 0x4a
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800e8dc:	b10a      	cbz	r2, 800e8e2 <_ux_device_class_cdc_acm_control_request+0x9a>
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800e8de:	4628      	mov	r0, r5
 800e8e0:	4790      	blx	r2
    return(UX_SUCCESS);
 800e8e2:	2000      	movs	r0, #0
}
 800e8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800e8e8:	2300      	movs	r3, #0
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_DTR)
 800e8ea:	07fa      	lsls	r2, r7, #31
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = 0;
 800e8ec:	f885 304b 	strb.w	r3, [r5, #75]	; 0x4b
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = 0;
 800e8f0:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
                cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = UX_TRUE;               
 800e8f4:	bf44      	itt	mi
 800e8f6:	2301      	movmi	r3, #1
 800e8f8:	f885 304b 	strbmi.w	r3, [r5, #75]	; 0x4b
            if (value & UX_SLAVE_CLASS_CDC_ACM_LINE_STATE_RTS)
 800e8fc:	07bb      	lsls	r3, r7, #30
                cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = UX_TRUE;               
 800e8fe:	bf44      	itt	mi
 800e900:	2301      	movmi	r3, #1
 800e902:	f885 304c 	strbmi.w	r3, [r5, #76]	; 0x4c
            if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change != UX_NULL)
 800e906:	68eb      	ldr	r3, [r5, #12]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d0ea      	beq.n	800e8e2 <_ux_device_class_cdc_acm_control_request+0x9a>
                cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change(cdc_acm);
 800e90c:	4628      	mov	r0, r5
 800e90e:	4798      	blx	r3
    return(UX_SUCCESS);
 800e910:	2000      	movs	r0, #0
}
 800e912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e916:	bf00      	nop
 800e918:	2000ae38 	.word	0x2000ae38

0800e91c <_ux_device_class_cdc_acm_deactivate>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 800e91c:	b538      	push	{r3, r4, r5, lr}

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800e91e:	6a03      	ldr	r3, [r0, #32]
        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800e920:	2126      	movs	r1, #38	; 0x26
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800e922:	6c9c      	ldr	r4, [r3, #72]	; 0x48
    endpoint_in =  interface_ptr -> ux_slave_interface_first_endpoint;
 800e924:	6823      	ldr	r3, [r4, #0]
 800e926:	69dd      	ldr	r5, [r3, #28]
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800e928:	f995 300e 	ldrsb.w	r3, [r5, #14]
 800e92c:	2b00      	cmp	r3, #0
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 800e92e:	bfba      	itte	lt
 800e930:	4628      	movlt	r0, r5
 800e932:	696d      	ldrlt	r5, [r5, #20]
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 800e934:	6968      	ldrge	r0, [r5, #20]
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 800e936:	f001 fc89 	bl	801024c <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 800e93a:	2126      	movs	r1, #38	; 0x26
 800e93c:	4628      	mov	r0, r5
 800e93e:	f001 fc85 	bl	801024c <_ux_device_stack_transfer_all_request_abort>

    /* Terminate transmission and free resources.  */
    _ux_device_class_cdc_acm_ioctl(cdc_acm, UX_SLAVE_CLASS_CDC_ACM_IOCTL_TRANSMISSION_STOP, UX_NULL);
 800e942:	2200      	movs	r2, #0
 800e944:	2107      	movs	r1, #7
 800e946:	4620      	mov	r0, r4
 800e948:	f000 f848 	bl	800e9dc <_ux_device_class_cdc_acm_ioctl>

    /* If there is a deactivate function call it.  */
    if (cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate != UX_NULL)
 800e94c:	68a3      	ldr	r3, [r4, #8]
 800e94e:	b10b      	cbz	r3, 800e954 <_ux_device_class_cdc_acm_deactivate+0x38>
    {

        /* Invoke the application.  */
        cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate(cdc_acm);
 800e950:	4620      	mov	r0, r4
 800e952:	4798      	blx	r3
    }

    /* We need to reset the DTR and RTS values so they do not carry over to the 
       next connection.  */
    cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state =  0;
 800e954:	2000      	movs	r0, #0
 800e956:	f884 004b 	strb.w	r0, [r4, #75]	; 0x4b
    cdc_acm -> ux_slave_class_cdc_acm_data_rts_state =  0;
 800e95a:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(cdc_acm);

    /* Return completion status.  */
    return(UX_SUCCESS);
}
 800e95e:	bd38      	pop	{r3, r4, r5, pc}

0800e960 <_ux_device_class_cdc_acm_entry>:
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 800e960:	6803      	ldr	r3, [r0, #0]
 800e962:	3b01      	subs	r3, #1
 800e964:	2b06      	cmp	r3, #6
 800e966:	d815      	bhi.n	800e994 <_ux_device_class_cdc_acm_entry+0x34>
 800e968:	e8df f003 	tbb	[pc, r3]
 800e96c:	100e0c06 	.word	0x100e0c06
 800e970:	1412      	.short	0x1412
 800e972:	04          	.byte	0x04
 800e973:	00          	.byte	0x00
        return(status);

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the uninit function of the CDC ACM class.  */
        status =  _ux_device_class_cdc_acm_uninitialize(command);
 800e974:	f000 b97a 	b.w	800ec6c <_ux_device_class_cdc_acm_uninitialize>
        return(status);

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_CDC_ACM_CLASS)
 800e978:	6943      	ldr	r3, [r0, #20]
            return(UX_SUCCESS);
        else
            return(UX_NO_CLASS_MATCH);
 800e97a:	2b0a      	cmp	r3, #10
 800e97c:	bf0c      	ite	eq
 800e97e:	2000      	moveq	r0, #0
 800e980:	2057      	movne	r0, #87	; 0x57
 800e982:	4770      	bx	lr
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the cdc_acm thread needs to be activated.  */
        status =  _ux_device_class_cdc_acm_activate(command);
 800e984:	f7ff bf54 	b.w	800e830 <_ux_device_class_cdc_acm_activate>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the cdc_acm thread canceled.  */
        status =  _ux_device_class_cdc_acm_deactivate(command);
 800e988:	f7ff bfc8 	b.w	800e91c <_ux_device_class_cdc_acm_deactivate>
        return(status);

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_cdc_acm_control_request(command);
 800e98c:	f7ff bf5c 	b.w	800e848 <_ux_device_class_cdc_acm_control_request>
        status =  _ux_device_class_cdc_acm_initialize(command);
 800e990:	f000 b802 	b.w	800e998 <_ux_device_class_cdc_acm_initialize>
    switch (command -> ux_slave_class_command_request)
 800e994:	2054      	movs	r0, #84	; 0x54
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
    }
}
 800e996:	4770      	bx	lr

0800e998 <_ux_device_class_cdc_acm_initialize>:

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Create an instance of the device cdc_acm class.  */
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800e998:	2100      	movs	r1, #0
{
 800e99a:	b570      	push	{r4, r5, r6, lr}
 800e99c:	4604      	mov	r4, r0
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800e99e:	2260      	movs	r2, #96	; 0x60
 800e9a0:	4608      	mov	r0, r1
    class_ptr =  command -> ux_slave_class_command_class_ptr;
 800e9a2:	6a25      	ldr	r5, [r4, #32]
    cdc_acm =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_CDC_ACM));
 800e9a4:	f001 fd86 	bl	80104b4 <_ux_utility_memory_allocate>

    /* Check for successful allocation.  */
    if (cdc_acm == UX_NULL)
 800e9a8:	b1a0      	cbz	r0, 800e9d4 <_ux_device_class_cdc_acm_initialize+0x3c>

    /* Save the address of the CDC instance inside the CDC container.  */
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;

    /* Get the pointer to the application parameters for the cdc_acm class.  */
    cdc_acm_parameter =  command -> ux_slave_class_command_parameter;
 800e9aa:	6a63      	ldr	r3, [r4, #36]	; 0x24

#endif

    /* Update the line coding fields with default values.  */
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800e9ac:	2101      	movs	r1, #1
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800e9ae:	681a      	ldr	r2, [r3, #0]
    class_ptr -> ux_slave_class_instance = (VOID *) cdc_acm;
 800e9b0:	64a8      	str	r0, [r5, #72]	; 0x48
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_activate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_activate;
 800e9b2:	6042      	str	r2, [r0, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parity    =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_PARITY;
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800e9b4:	2208      	movs	r2, #8
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800e9b6:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800e9ba:	685c      	ldr	r4, [r3, #4]
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800e9bc:	689b      	ldr	r3, [r3, #8]
    cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_STOP_BIT;
 800e9be:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_parameter_change = cdc_acm_parameter -> ux_slave_class_cdc_acm_parameter_change;
 800e9c2:	60c3      	str	r3, [r0, #12]
#ifndef UX_DEVICE_CLASS_CDC_ACM_TRANSMISSION_DISABLE

#if defined(UX_DEVICE_STANDALONE)

    /* Set task function.  */
    class_ptr -> ux_slave_class_task_function = _ux_device_class_cdc_acm_tasks_run;
 800e9c4:	4b04      	ldr	r3, [pc, #16]	; (800e9d8 <_ux_device_class_cdc_acm_initialize+0x40>)
    cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_DATA_BIT;
 800e9c6:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
    cdc_acm -> ux_slave_class_cdc_acm_parameter.ux_slave_class_cdc_acm_instance_deactivate = cdc_acm_parameter -> ux_slave_class_cdc_acm_instance_deactivate;
 800e9ca:	6084      	str	r4, [r0, #8]
    cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  UX_SLAVE_CLASS_CDC_ACM_LINE_CODING_BAUDRATE;
 800e9cc:	6446      	str	r6, [r0, #68]	; 0x44

#endif
#endif

    /* Return completion status.  */
    return(UX_SUCCESS);
 800e9ce:	2000      	movs	r0, #0
    class_ptr -> ux_slave_class_task_function = _ux_device_class_cdc_acm_tasks_run;
 800e9d0:	652b      	str	r3, [r5, #80]	; 0x50
}
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
        return(UX_MEMORY_INSUFFICIENT);
 800e9d4:	2012      	movs	r0, #18
}
 800e9d6:	bd70      	pop	{r4, r5, r6, pc}
 800e9d8:	0800eb09 	.word	0x0800eb09

0800e9dc <_ux_device_class_cdc_acm_ioctl>:

    /* Let's be optimist ! */
    status = UX_SUCCESS;

    /* The command request will tell us what we need to do here.  */
    switch (ioctl_function)
 800e9dc:	1e4b      	subs	r3, r1, #1
{
 800e9de:	b570      	push	{r4, r5, r6, lr}
 800e9e0:	4604      	mov	r4, r0
 800e9e2:	4616      	mov	r6, r2
    switch (ioctl_function)
 800e9e4:	2b08      	cmp	r3, #8
 800e9e6:	f200 8088 	bhi.w	800eafa <_ux_device_class_cdc_acm_ioctl+0x11e>
 800e9ea:	e8df f003 	tbb	[pc, r3]
 800e9ee:	6418      	.short	0x6418
 800e9f0:	453c2672 	.word	0x453c2672
 800e9f4:	0550      	.short	0x0550
 800e9f6:	05          	.byte	0x05
 800e9f7:	00          	.byte	0x00
            /* Locate the endpoints.  */
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;

            /* If it's reading timeout but endpoint is OUT, it should be the next one.  */
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
                (ULONG)((ioctl_function == UX_SLAVE_CLASS_CDC_ACM_IOCTL_SET_READ_TIMEOUT) ? UX_ENDPOINT_OUT : UX_ENDPOINT_IN))
 800e9f8:	2908      	cmp	r1, #8
 800e9fa:	bf0c      	ite	eq
 800e9fc:	2000      	moveq	r0, #0
 800e9fe:	2080      	movne	r0, #128	; 0x80
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ea00:	6823      	ldr	r3, [r4, #0]
 800ea02:	69db      	ldr	r3, [r3, #28]
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) !=
 800ea04:	7b99      	ldrb	r1, [r3, #14]
 800ea06:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800ea0a:	4281      	cmp	r1, r0
                endpoint = endpoint -> ux_slave_endpoint_next_endpoint;
 800ea0c:	bf18      	it	ne
 800ea0e:	695b      	ldrne	r3, [r3, #20]

            /* Get the transfer request associated with the endpoint.  */
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

            /* Check the status of the transfer.  */ 
            if (transfer_request -> ux_slave_transfer_request_status ==  UX_TRANSFER_STATUS_PENDING)
 800ea10:	6a19      	ldr	r1, [r3, #32]
 800ea12:	2901      	cmp	r1, #1
 800ea14:	d066      	beq.n	800eae4 <_ux_device_class_cdc_acm_ioctl+0x108>
    status = UX_SUCCESS;
 800ea16:	2500      	movs	r5, #0
                status = UX_ERROR;
            else
                transfer_request -> ux_slave_transfer_request_timeout = (ULONG) (ALIGN_TYPE) parameter;
 800ea18:	655e      	str	r6, [r3, #84]	; 0x54
    }

    /* Return status to caller.  */
    return(status);

}
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	bd70      	pop	{r4, r5, r6, pc}
    status = UX_SUCCESS;
 800ea1e:	2500      	movs	r5, #0
            cdc_acm -> ux_slave_class_cdc_acm_baudrate  =  line_coding -> ux_slave_class_cdc_acm_parameter_baudrate;
 800ea20:	6833      	ldr	r3, [r6, #0]
 800ea22:	6443      	str	r3, [r0, #68]	; 0x44
            cdc_acm -> ux_slave_class_cdc_acm_stop_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit;
 800ea24:	7933      	ldrb	r3, [r6, #4]
 800ea26:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
            cdc_acm -> ux_slave_class_cdc_acm_parity    =  line_coding -> ux_slave_class_cdc_acm_parameter_parity;
 800ea2a:	7973      	ldrb	r3, [r6, #5]
 800ea2c:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
            cdc_acm -> ux_slave_class_cdc_acm_data_bit  =  line_coding -> ux_slave_class_cdc_acm_parameter_data_bit;
 800ea30:	79b3      	ldrb	r3, [r6, #6]
 800ea32:	f880 304a 	strb.w	r3, [r0, #74]	; 0x4a
}
 800ea36:	4628      	mov	r0, r5
 800ea38:	bd70      	pop	{r4, r5, r6, pc}
            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ea3a:	6803      	ldr	r3, [r0, #0]
 800ea3c:	2e01      	cmp	r6, #1
 800ea3e:	69d8      	ldr	r0, [r3, #28]
            switch( (ULONG) (ALIGN_TYPE) parameter)
 800ea40:	d054      	beq.n	800eaec <_ux_device_class_cdc_acm_ioctl+0x110>
 800ea42:	2e02      	cmp	r6, #2
 800ea44:	d150      	bne.n	800eae8 <_ux_device_class_cdc_acm_ioctl+0x10c>
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800ea46:	f990 300e 	ldrsb.w	r3, [r0, #14]
    status = UX_SUCCESS;
 800ea4a:	2500      	movs	r5, #0
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	db52      	blt.n	800eaf6 <_ux_device_class_cdc_acm_ioctl+0x11a>
            _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_STATUS_ABORT);
 800ea50:	2104      	movs	r1, #4
 800ea52:	3020      	adds	r0, #32
 800ea54:	f001 fbdc 	bl	8010210 <_ux_device_stack_transfer_abort>
                cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
 800ea58:	2300      	movs	r3, #0
            if ((ULONG) (ALIGN_TYPE) parameter == UX_SLAVE_CLASS_CDC_ACM_ENDPOINT_XMIT)
 800ea5a:	2e01      	cmp	r6, #1
}
 800ea5c:	4628      	mov	r0, r5
                cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
 800ea5e:	bf0c      	ite	eq
 800ea60:	6423      	streq	r3, [r4, #64]	; 0x40
                cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
 800ea62:	6223      	strne	r3, [r4, #32]
}
 800ea64:	bd70      	pop	{r4, r5, r6, pc}
    status = UX_SUCCESS;
 800ea66:	2500      	movs	r5, #0
            cdc_acm -> ux_slave_class_cdc_acm_data_rts_state = line_state -> ux_slave_class_cdc_acm_parameter_rts;
 800ea68:	7833      	ldrb	r3, [r6, #0]
 800ea6a:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state = line_state -> ux_slave_class_cdc_acm_parameter_dtr;
 800ea6e:	7873      	ldrb	r3, [r6, #1]
 800ea70:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
}
 800ea74:	4628      	mov	r0, r5
 800ea76:	bd70      	pop	{r4, r5, r6, pc}
            if (cdc_acm -> ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 800ea78:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ea7a:	2b01      	cmp	r3, #1
 800ea7c:	d032      	beq.n	800eae4 <_ux_device_class_cdc_acm_ioctl+0x108>
            cdc_acm -> ux_device_class_cdc_acm_read_callback = callback -> ux_device_class_cdc_acm_parameter_read_callback;
 800ea7e:	e9d6 1200 	ldrd	r1, r2, [r6]
            cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_TRUE;
 800ea82:	2301      	movs	r3, #1
            return(UX_SUCCESS);
 800ea84:	2500      	movs	r5, #0
            cdc_acm -> ux_device_class_cdc_acm_read_callback = callback -> ux_device_class_cdc_acm_parameter_read_callback;
 800ea86:	e9c0 1214 	strd	r1, r2, [r0, #80]	; 0x50
            cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_TRUE;
 800ea8a:	6583      	str	r3, [r0, #88]	; 0x58
            return(UX_SUCCESS);
 800ea8c:	e7c5      	b.n	800ea1a <_ux_device_class_cdc_acm_ioctl+0x3e>
            if (cdc_acm -> ux_slave_class_cdc_acm_transmission_status == UX_TRUE)
 800ea8e:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d127      	bne.n	800eae4 <_ux_device_class_cdc_acm_ioctl+0x108>
                endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ea94:	6803      	ldr	r3, [r0, #0]
                _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800ea96:	21f9      	movs	r1, #249	; 0xf9
                endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800ea98:	69dd      	ldr	r5, [r3, #28]
                _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800ea9a:	f105 0020 	add.w	r0, r5, #32
 800ea9e:	f001 fbb7 	bl	8010210 <_ux_device_stack_transfer_abort>
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800eaa2:	6968      	ldr	r0, [r5, #20]
                _ux_device_stack_transfer_abort(transfer_request, UX_ABORTED);
 800eaa4:	21f9      	movs	r1, #249	; 0xf9
 800eaa6:	3020      	adds	r0, #32
 800eaa8:	f001 fbb2 	bl	8010210 <_ux_device_stack_transfer_abort>
                cdc_acm -> ux_slave_class_cdc_acm_scheduled_write = UX_FALSE;
 800eaac:	2300      	movs	r3, #0
    status = UX_SUCCESS;
 800eaae:	461d      	mov	r5, r3
                cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;
 800eab0:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
            break;                
 800eab4:	e7b1      	b.n	800ea1a <_ux_device_class_cdc_acm_ioctl+0x3e>
    status = UX_SUCCESS;
 800eab6:	2500      	movs	r5, #0
            line_coding -> ux_slave_class_cdc_acm_parameter_baudrate = cdc_acm -> ux_slave_class_cdc_acm_baudrate;
 800eab8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800eaba:	6033      	str	r3, [r6, #0]
            line_coding -> ux_slave_class_cdc_acm_parameter_stop_bit = cdc_acm -> ux_slave_class_cdc_acm_stop_bit;
 800eabc:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800eac0:	7133      	strb	r3, [r6, #4]
            line_coding -> ux_slave_class_cdc_acm_parameter_parity   = cdc_acm -> ux_slave_class_cdc_acm_parity;
 800eac2:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 800eac6:	7173      	strb	r3, [r6, #5]
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800eac8:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
}
 800eacc:	4628      	mov	r0, r5
            line_coding -> ux_slave_class_cdc_acm_parameter_data_bit = cdc_acm -> ux_slave_class_cdc_acm_data_bit;
 800eace:	71b3      	strb	r3, [r6, #6]
}
 800ead0:	bd70      	pop	{r4, r5, r6, pc}
    status = UX_SUCCESS;
 800ead2:	2500      	movs	r5, #0
            line_state -> ux_slave_class_cdc_acm_parameter_rts = cdc_acm -> ux_slave_class_cdc_acm_data_rts_state;
 800ead4:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 800ead8:	7033      	strb	r3, [r6, #0]
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800eada:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
}
 800eade:	4628      	mov	r0, r5
            line_state -> ux_slave_class_cdc_acm_parameter_dtr = cdc_acm -> ux_slave_class_cdc_acm_data_dtr_state;
 800eae0:	7073      	strb	r3, [r6, #1]
}
 800eae2:	bd70      	pop	{r4, r5, r6, pc}
                status = UX_ERROR;
 800eae4:	25ff      	movs	r5, #255	; 0xff
 800eae6:	e798      	b.n	800ea1a <_ux_device_class_cdc_acm_ioctl+0x3e>
 800eae8:	2553      	movs	r5, #83	; 0x53
 800eaea:	e7b1      	b.n	800ea50 <_ux_device_class_cdc_acm_ioctl+0x74>
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800eaec:	f990 300e 	ldrsb.w	r3, [r0, #14]
    status = UX_SUCCESS;
 800eaf0:	2500      	movs	r5, #0
                if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	dbac      	blt.n	800ea50 <_ux_device_class_cdc_acm_ioctl+0x74>
                    endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800eaf6:	6940      	ldr	r0, [r0, #20]
 800eaf8:	e7aa      	b.n	800ea50 <_ux_device_class_cdc_acm_ioctl+0x74>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 800eafa:	2254      	movs	r2, #84	; 0x54
 800eafc:	2107      	movs	r1, #7
 800eafe:	2002      	movs	r0, #2
 800eb00:	f001 fc1c 	bl	801033c <_ux_system_error_handler>
            status =  UX_FUNCTION_NOT_SUPPORTED;
 800eb04:	2554      	movs	r5, #84	; 0x54
 800eb06:	e788      	b.n	800ea1a <_ux_device_class_cdc_acm_ioctl+0x3e>

0800eb08 <_ux_device_class_cdc_acm_tasks_run>:

    /* Get CDC ACM instance.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM*) instance;

    /* Check if transmission is started.  */
    if (!cdc_acm -> ux_slave_class_cdc_acm_transmission_status)
 800eb08:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d036      	beq.n	800eb7c <_ux_device_class_cdc_acm_tasks_run+0x74>
        return(status);

    /* Check if device state is good.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800eb0e:	4b56      	ldr	r3, [pc, #344]	; (800ec68 <_ux_device_class_cdc_acm_tasks_run+0x160>)
{
 800eb10:	b570      	push	{r4, r5, r6, lr}
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4604      	mov	r4, r0
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	2b03      	cmp	r3, #3
 800eb1a:	d008      	beq.n	800eb2e <_ux_device_class_cdc_acm_tasks_run+0x26>
    {
        cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;
 800eb1c:	2300      	movs	r3, #0
        cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
        cdc_acm -> ux_device_class_cdc_acm_read_status = UX_CONFIGURATION_HANDLE_UNKNOWN;
 800eb1e:	2251      	movs	r2, #81	; 0x51
        cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
        cdc_acm -> ux_device_class_cdc_acm_write_status = UX_CONFIGURATION_HANDLE_UNKNOWN;
        return(status);
 800eb20:	2002      	movs	r0, #2
        cdc_acm -> ux_device_class_cdc_acm_read_status = UX_CONFIGURATION_HANDLE_UNKNOWN;
 800eb22:	e9c4 3208 	strd	r3, r2, [r4, #32]
        cdc_acm -> ux_device_class_cdc_acm_write_status = UX_CONFIGURATION_HANDLE_UNKNOWN;
 800eb26:	e9c4 230f 	strd	r2, r3, [r4, #60]	; 0x3c
        cdc_acm -> ux_slave_class_cdc_acm_transmission_status = UX_FALSE;
 800eb2a:	65a3      	str	r3, [r4, #88]	; 0x58
#else
    UX_PARAMETER_NOT_USED(instance);
#endif

    return(status);
}
 800eb2c:	bd70      	pop	{r4, r5, r6, pc}

    /* Get the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;

    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800eb2e:	6803      	ldr	r3, [r0, #0]
 800eb30:	69dd      	ldr	r5, [r3, #28]

    /* Check the endpoint direction, if OUT we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_OUT)
 800eb32:	f995 300e 	ldrsb.w	r3, [r5, #14]
 800eb36:	2b00      	cmp	r3, #0
    return;

#else

    /* Handle state cases.  */
    switch(cdc_acm -> ux_device_class_cdc_acm_read_state)
 800eb38:	6a03      	ldr	r3, [r0, #32]
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800eb3a:	bfb8      	it	lt
 800eb3c:	696d      	ldrlt	r5, [r5, #20]
    switch(cdc_acm -> ux_device_class_cdc_acm_read_state)
 800eb3e:	b323      	cbz	r3, 800eb8a <_ux_device_class_cdc_acm_tasks_run+0x82>
 800eb40:	2b22      	cmp	r3, #34	; 0x22
 800eb42:	d11d      	bne.n	800eb80 <_ux_device_class_cdc_acm_tasks_run+0x78>

        /* Fall through.  */
    case UX_DEVICE_CLASS_CDC_ACM_READ_WAIT:

        /* Run the transfer state machine.  */
        status = _ux_device_stack_transfer_run(transfer_request,
 800eb44:	6982      	ldr	r2, [r0, #24]
 800eb46:	4611      	mov	r1, r2
 800eb48:	f105 0020 	add.w	r0, r5, #32
 800eb4c:	f001 fb94 	bl	8010278 <_ux_device_stack_transfer_run>
                    cdc_acm -> ux_device_class_cdc_acm_read_transfer_length,
                    cdc_acm -> ux_device_class_cdc_acm_read_transfer_length);

        /* Error case.  */
        if (status <= UX_STATE_NEXT)
 800eb50:	2804      	cmp	r0, #4
 800eb52:	d954      	bls.n	800ebfe <_ux_device_class_cdc_acm_tasks_run+0xf6>
UINT                        zlp = UX_FALSE;
#endif


    /* If write not started, return.  */
    if (!cdc_acm -> ux_slave_class_cdc_acm_scheduled_write)
 800eb54:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d03f      	beq.n	800ebda <_ux_device_class_cdc_acm_tasks_run+0xd2>

    /* We need the interface to the class.  */
    interface_ptr =  cdc_acm -> ux_slave_class_cdc_acm_interface;

    /* Locate the endpoints.  */
    endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800eb5a:	6823      	ldr	r3, [r4, #0]
 800eb5c:	69dd      	ldr	r5, [r3, #28]

    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 800eb5e:	f995 300e 	ldrsb.w	r3, [r5, #14]
 800eb62:	2b00      	cmp	r3, #0
        }
        return;
    }
#else
    /* Handle state cases.  */
    switch(cdc_acm -> ux_device_class_cdc_acm_write_state)
 800eb64:	6c23      	ldr	r3, [r4, #64]	; 0x40
        endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800eb66:	bfa8      	it	ge
 800eb68:	696d      	ldrge	r5, [r5, #20]
    switch(cdc_acm -> ux_device_class_cdc_acm_write_state)
 800eb6a:	2b21      	cmp	r3, #33	; 0x21
 800eb6c:	d05b      	beq.n	800ec26 <_ux_device_class_cdc_acm_tasks_run+0x11e>
 800eb6e:	2b22      	cmp	r3, #34	; 0x22
 800eb70:	d029      	beq.n	800ebc6 <_ux_device_class_cdc_acm_tasks_run+0xbe>
 800eb72:	b18b      	cbz	r3, 800eb98 <_ux_device_class_cdc_acm_tasks_run+0x90>

        /* Keep waiting.  */
        return;

    default: /* Error.  */
        cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
 800eb74:	2300      	movs	r3, #0
    return(status);
 800eb76:	2005      	movs	r0, #5
        cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
 800eb78:	6423      	str	r3, [r4, #64]	; 0x40
}
 800eb7a:	bd70      	pop	{r4, r5, r6, pc}
        return(status);
 800eb7c:	2002      	movs	r0, #2
}
 800eb7e:	4770      	bx	lr
        cdc_acm -> ux_device_class_cdc_acm_read_status = UX_INVALID_STATE;
 800eb80:	2200      	movs	r2, #0
 800eb82:	23fb      	movs	r3, #251	; 0xfb
 800eb84:	e9c0 2308 	strd	r2, r3, [r0, #32]
        break;
 800eb88:	e7e4      	b.n	800eb54 <_ux_device_class_cdc_acm_tasks_run+0x4c>
        cdc_acm -> ux_device_class_cdc_acm_read_state = UX_DEVICE_CLASS_CDC_ACM_READ_WAIT;
 800eb8a:	2122      	movs	r1, #34	; 0x22
        max_transfer_length = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 800eb8c:	8a2a      	ldrh	r2, [r5, #16]
        cdc_acm -> ux_device_class_cdc_acm_read_status = UX_TRANSFER_NO_ANSWER;
 800eb8e:	e9c0 1108 	strd	r1, r1, [r0, #32]
        cdc_acm -> ux_device_class_cdc_acm_read_transfer_length = max_transfer_length;
 800eb92:	6182      	str	r2, [r0, #24]
        UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800eb94:	652b      	str	r3, [r5, #80]	; 0x50
 800eb96:	e7d6      	b.n	800eb46 <_ux_device_class_cdc_acm_tasks_run+0x3e>
        cdc_acm -> ux_device_class_cdc_acm_write_state = UX_DEVICE_CLASS_CDC_ACM_WRITE_START;
 800eb98:	2021      	movs	r0, #33	; 0x21
        cdc_acm -> ux_device_class_cdc_acm_write_status = UX_TRANSFER_NO_ANSWER;
 800eb9a:	2122      	movs	r1, #34	; 0x22
        cdc_acm -> ux_device_class_cdc_acm_write_actual_length = 0;
 800eb9c:	6323      	str	r3, [r4, #48]	; 0x30
        cdc_acm -> ux_device_class_cdc_acm_write_host_length = UX_DEVICE_CLASS_CDC_ACM_WRITE_BUFFER_SIZE;
 800eb9e:	f44f 7300 	mov.w	r3, #512	; 0x200
        if (cdc_acm -> ux_device_class_cdc_acm_write_requested_length == 0)
 800eba2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        cdc_acm -> ux_device_class_cdc_acm_write_status = UX_TRANSFER_NO_ANSWER;
 800eba4:	e9c4 100f 	strd	r1, r0, [r4, #60]	; 0x3c
        cdc_acm -> ux_device_class_cdc_acm_write_host_length = UX_DEVICE_CLASS_CDC_ACM_WRITE_BUFFER_SIZE;
 800eba8:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (cdc_acm -> ux_device_class_cdc_acm_write_requested_length == 0)
 800ebaa:	2a00      	cmp	r2, #0
 800ebac:	d133      	bne.n	800ec16 <_ux_device_class_cdc_acm_tasks_run+0x10e>
            cdc_acm -> ux_device_class_cdc_acm_write_host_length = UX_DEVICE_CLASS_CDC_ACM_WRITE_BUFFER_SIZE + 1;
 800ebae:	f240 2301 	movw	r3, #513	; 0x201
 800ebb2:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 800ebb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebb8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800ebba:	f001 fd6f 	bl	801069c <_ux_utility_memory_copy>
        cdc_acm -> ux_device_class_cdc_acm_write_state = UX_DEVICE_CLASS_CDC_ACM_WRITE_WAIT;
 800ebbe:	2222      	movs	r2, #34	; 0x22
        UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800ebc0:	2300      	movs	r3, #0
        cdc_acm -> ux_device_class_cdc_acm_write_state = UX_DEVICE_CLASS_CDC_ACM_WRITE_WAIT;
 800ebc2:	6422      	str	r2, [r4, #64]	; 0x40
        UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 800ebc4:	652b      	str	r3, [r5, #80]	; 0x50
        status =  _ux_device_stack_transfer_run(transfer_request,
 800ebc6:	f105 0020 	add.w	r0, r5, #32
 800ebca:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 800ebce:	f001 fb53 	bl	8010278 <_ux_device_stack_transfer_run>
        if (status < UX_STATE_NEXT)
 800ebd2:	2803      	cmp	r0, #3
 800ebd4:	d935      	bls.n	800ec42 <_ux_device_class_cdc_acm_tasks_run+0x13a>
        if (status == UX_STATE_NEXT)
 800ebd6:	2804      	cmp	r0, #4
 800ebd8:	d001      	beq.n	800ebde <_ux_device_class_cdc_acm_tasks_run+0xd6>
    return(status);
 800ebda:	2005      	movs	r0, #5
}
 800ebdc:	bd70      	pop	{r4, r5, r6, pc}
                    transfer_request -> ux_slave_transfer_request_actual_length;
 800ebde:	6baa      	ldr	r2, [r5, #56]	; 0x38
            cdc_acm -> ux_device_class_cdc_acm_write_actual_length +=
 800ebe0:	e9d4 030c 	ldrd	r0, r3, [r4, #48]	; 0x30
                transfer_request -> ux_slave_transfer_request_completion_code;
 800ebe4:	6c69      	ldr	r1, [r5, #68]	; 0x44
            cdc_acm -> ux_device_class_cdc_acm_write_buffer +=
 800ebe6:	4413      	add	r3, r2
            cdc_acm -> ux_device_class_cdc_acm_write_actual_length +=
 800ebe8:	4402      	add	r2, r0
            if (cdc_acm -> ux_device_class_cdc_acm_write_requested_length == 0)
 800ebea:	6ba0      	ldr	r0, [r4, #56]	; 0x38
            cdc_acm -> ux_device_class_cdc_acm_write_actual_length +=
 800ebec:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
            cdc_acm -> ux_device_class_cdc_acm_write_status =
 800ebf0:	63e1      	str	r1, [r4, #60]	; 0x3c
            if (cdc_acm -> ux_device_class_cdc_acm_write_requested_length == 0)
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d032      	beq.n	800ec5c <_ux_device_class_cdc_acm_tasks_run+0x154>
            cdc_acm -> ux_device_class_cdc_acm_write_state = UX_DEVICE_CLASS_CDC_ACM_WRITE_START;
 800ebf6:	2321      	movs	r3, #33	; 0x21
    return(status);
 800ebf8:	2005      	movs	r0, #5
            cdc_acm -> ux_device_class_cdc_acm_write_state = UX_DEVICE_CLASS_CDC_ACM_WRITE_START;
 800ebfa:	6423      	str	r3, [r4, #64]	; 0x40
}
 800ebfc:	bd70      	pop	{r4, r5, r6, pc}
            cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
 800ebfe:	2300      	movs	r3, #0
                transfer_request -> ux_slave_transfer_request_completion_code;
 800ec00:	6c69      	ldr	r1, [r5, #68]	; 0x44
            if (cdc_acm -> ux_device_class_cdc_acm_read_callback)
 800ec02:	6d66      	ldr	r6, [r4, #84]	; 0x54
            cdc_acm -> ux_device_class_cdc_acm_read_state = UX_STATE_RESET;
 800ec04:	e9c4 3108 	strd	r3, r1, [r4, #32]
            if (cdc_acm -> ux_device_class_cdc_acm_read_callback)
 800ec08:	2e00      	cmp	r6, #0
 800ec0a:	d0a3      	beq.n	800eb54 <_ux_device_class_cdc_acm_tasks_run+0x4c>
                cdc_acm -> ux_device_class_cdc_acm_read_callback(cdc_acm,
 800ec0c:	4620      	mov	r0, r4
 800ec0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800ec10:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800ec12:	47b0      	blx	r6
 800ec14:	e79e      	b.n	800eb54 <_ux_device_class_cdc_acm_tasks_run+0x4c>
        if (requested_length > UX_DEVICE_CLASS_CDC_ACM_WRITE_BUFFER_SIZE)
 800ec16:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800ec1a:	d9c8      	bls.n	800ebae <_ux_device_class_cdc_acm_tasks_run+0xa6>
            cdc_acm -> ux_device_class_cdc_acm_write_transfer_length =
 800ec1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ec20:	461a      	mov	r2, r3
 800ec22:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec24:	e7c7      	b.n	800ebb6 <_ux_device_class_cdc_acm_tasks_run+0xae>
        requested_length = cdc_acm -> ux_device_class_cdc_acm_write_requested_length -
 800ec26:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ec28:	6b23      	ldr	r3, [r4, #48]	; 0x30
        if (requested_length == 0 && !zlp)
 800ec2a:	1ad2      	subs	r2, r2, r3
 800ec2c:	d1f3      	bne.n	800ec16 <_ux_device_class_cdc_acm_tasks_run+0x10e>
            if (cdc_acm -> ux_device_class_cdc_acm_write_callback)
 800ec2e:	6d23      	ldr	r3, [r4, #80]	; 0x50
            cdc_acm -> ux_device_class_cdc_acm_write_status = UX_SUCCESS;
 800ec30:	e9c4 220f 	strd	r2, r2, [r4, #60]	; 0x3c
            cdc_acm -> ux_slave_class_cdc_acm_scheduled_write = UX_FALSE;
 800ec34:	65e2      	str	r2, [r4, #92]	; 0x5c
            if (cdc_acm -> ux_device_class_cdc_acm_write_callback)
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d0cf      	beq.n	800ebda <_ux_device_class_cdc_acm_tasks_run+0xd2>
                cdc_acm -> ux_device_class_cdc_acm_write_callback(cdc_acm,
 800ec3a:	4611      	mov	r1, r2
 800ec3c:	4620      	mov	r0, r4
 800ec3e:	4798      	blx	r3
 800ec40:	e7cb      	b.n	800ebda <_ux_device_class_cdc_acm_tasks_run+0xd2>
            cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
 800ec42:	2300      	movs	r3, #0
                transfer_request -> ux_slave_transfer_request_completion_code;
 800ec44:	6c69      	ldr	r1, [r5, #68]	; 0x44
            if (cdc_acm -> ux_device_class_cdc_acm_write_callback)
 800ec46:	6d25      	ldr	r5, [r4, #80]	; 0x50
            cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
 800ec48:	e9c4 130f 	strd	r1, r3, [r4, #60]	; 0x3c
            cdc_acm -> ux_slave_class_cdc_acm_scheduled_write = UX_FALSE;
 800ec4c:	65e3      	str	r3, [r4, #92]	; 0x5c
            if (cdc_acm -> ux_device_class_cdc_acm_write_callback)
 800ec4e:	2d00      	cmp	r5, #0
 800ec50:	d0c3      	beq.n	800ebda <_ux_device_class_cdc_acm_tasks_run+0xd2>
                cdc_acm -> ux_device_class_cdc_acm_write_callback(cdc_acm,
 800ec52:	4620      	mov	r0, r4
 800ec54:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800ec56:	47a8      	blx	r5
    return(status);
 800ec58:	2005      	movs	r0, #5
}
 800ec5a:	bd70      	pop	{r4, r5, r6, pc}
                if (cdc_acm -> ux_device_class_cdc_acm_write_callback)
 800ec5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
                cdc_acm -> ux_device_class_cdc_acm_write_state = UX_STATE_RESET;
 800ec5e:	6420      	str	r0, [r4, #64]	; 0x40
                cdc_acm -> ux_slave_class_cdc_acm_scheduled_write = UX_FALSE;
 800ec60:	65e0      	str	r0, [r4, #92]	; 0x5c
                if (cdc_acm -> ux_device_class_cdc_acm_write_callback)
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d1ea      	bne.n	800ec3c <_ux_device_class_cdc_acm_tasks_run+0x134>
 800ec66:	e7b8      	b.n	800ebda <_ux_device_class_cdc_acm_tasks_run+0xd2>
 800ec68:	2000ae38 	.word	0x2000ae38

0800ec6c <_ux_device_class_cdc_acm_uninitialize>:
/*                                            endpoint buffer in classes, */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_cdc_acm_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 800ec6c:	b508      	push	{r3, lr}

    /* Get the class container.  */
    class_ptr =  command -> ux_slave_class_command_class_ptr;

    /* Get the class instance in the container.  */
    cdc_acm = (UX_SLAVE_CLASS_CDC_ACM *) class_ptr -> ux_slave_class_instance;
 800ec6e:	6a03      	ldr	r3, [r0, #32]
 800ec70:	6c98      	ldr	r0, [r3, #72]	; 0x48

    /* Sanity check.  */
    if (cdc_acm != UX_NULL)
 800ec72:	b108      	cbz	r0, 800ec78 <_ux_device_class_cdc_acm_uninitialize+0xc>
        /* Free the buffer for bulk endpoints.  */
        _ux_utility_memory_free(cdc_acm -> ux_device_class_cdc_acm_endpoint_buffer);
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(cdc_acm);
 800ec74:	f001 fd1c 	bl	80106b0 <_ux_utility_memory_free>

    }
            
    /* Return completion status.  */
    return(UX_SUCCESS);
}
 800ec78:	2000      	movs	r0, #0
 800ec7a:	bd08      	pop	{r3, pc}

0800ec7c <USBD_FrameWork_AssignEp>:
                                     uint8_t Add, uint8_t Type, uint32_t Sze)
{
  uint32_t idx = 0U;

  /* Find the first available endpoint slot */
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800ec7c:	f04f 0c5c 	mov.w	ip, #92	; 0x5c
{
 800ec80:	b570      	push	{r4, r5, r6, lr}
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800ec82:	6846      	ldr	r6, [r0, #4]
 800ec84:	fb0c 0c06 	mla	ip, ip, r6, r0
 800ec88:	f8dc 501c 	ldr.w	r5, [ip, #28]
 800ec8c:	b16d      	cbz	r5, 800ecaa <USBD_FrameWork_AssignEp+0x2e>
  uint32_t idx = 0U;
 800ec8e:	f04f 0e00 	mov.w	lr, #0
 800ec92:	e003      	b.n	800ec9c <USBD_FrameWork_AssignEp+0x20>
          ((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
  {
    /* Increment the index */
    idx++;
 800ec94:	f10e 0e01 	add.w	lr, lr, #1
  while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 800ec98:	45ae      	cmp	lr, r5
 800ec9a:	d006      	beq.n	800ecaa <USBD_FrameWork_AssignEp+0x2e>
 800ec9c:	f89c 4028 	ldrb.w	r4, [ip, #40]	; 0x28
 800eca0:	f10c 0c06 	add.w	ip, ip, #6
 800eca4:	2c00      	cmp	r4, #0
 800eca6:	d1f5      	bne.n	800ec94 <USBD_FrameWork_AssignEp+0x18>
 800eca8:	4675      	mov	r5, lr
  }

  /* Configure the endpoint */
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800ecaa:	245c      	movs	r4, #92	; 0x5c
 800ecac:	fb04 f606 	mul.w	r6, r4, r6
 800ecb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecb4:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 800ecb8:	4405      	add	r5, r0
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 800ecba:	2001      	movs	r0, #1
  pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 800ecbc:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
  pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 800ecc0:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
  pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 800ecc4:	f885 0028 	strb.w	r0, [r5, #40]	; 0x28
  pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 800ecc8:	84eb      	strh	r3, [r5, #38]	; 0x26
}
 800ecca:	bd70      	pop	{r4, r5, r6, pc}

0800eccc <USBD_Device_Framework_Builder.constprop.0.isra.0>:
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 800eccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 800ecd0:	2601      	movs	r6, #1
  pdev->CurrConfDescSz = 0U;
 800ecd2:	2300      	movs	r3, #0
  pDevDesc->bcdUSB = USB_BCDUSB;
 800ecd4:	2502      	movs	r5, #2
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800ecd6:	f04f 0c12 	mov.w	ip, #18
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 800ecda:	2740      	movs	r7, #64	; 0x40
  pDevDesc->idVendor = USBD_VID;
 800ecdc:	f06f 0b7c 	mvn.w	fp, #124	; 0x7c
 800ece0:	f04f 0a04 	mov.w	sl, #4
  pDevDesc->idProduct = USBD_PID;
 800ece4:	f04f 0957 	mov.w	r9, #87	; 0x57
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800ece8:	f04f 0803 	mov.w	r8, #3
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800ecec:	f8df e3a8 	ldr.w	lr, [pc, #936]	; 800f098 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x3cc>
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 800ecf0:	b08b      	sub	sp, #44	; 0x2c
  if (Speed == USBD_HIGH_SPEED)
 800ecf2:	42b2      	cmp	r2, r6
  pdev->CurrConfDescSz = 0U;
 800ecf4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 800ecf8:	460c      	mov	r4, r1
  pDevDesc->idVendor = USBD_VID;
 800ecfa:	f881 b008 	strb.w	fp, [r1, #8]
 800ecfe:	f881 a009 	strb.w	sl, [r1, #9]
  pDevDesc->idProduct = USBD_PID;
 800ed02:	f881 900b 	strb.w	r9, [r1, #11]
  pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 800ed06:	f881 8010 	strb.w	r8, [r1, #16]
  pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 800ed0a:	f881 c000 	strb.w	ip, [r1]
  pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 800ed0e:	704e      	strb	r6, [r1, #1]
  pDevDesc->bcdUSB = USB_BCDUSB;
 800ed10:	708b      	strb	r3, [r1, #2]
 800ed12:	70cd      	strb	r5, [r1, #3]
  pDevDesc->bDeviceClass = 0x00;
 800ed14:	710b      	strb	r3, [r1, #4]
  pDevDesc->bDeviceSubClass = 0x00;
 800ed16:	714b      	strb	r3, [r1, #5]
  pDevDesc->bDeviceProtocol = 0x00;
 800ed18:	718b      	strb	r3, [r1, #6]
  pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 800ed1a:	71cf      	strb	r7, [r1, #7]
  pDevDesc->idProduct = USBD_PID;
 800ed1c:	728f      	strb	r7, [r1, #10]
  pDevDesc->bcdDevice = 0x0200;
 800ed1e:	730b      	strb	r3, [r1, #12]
 800ed20:	734d      	strb	r5, [r1, #13]
  pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 800ed22:	738e      	strb	r6, [r1, #14]
  pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 800ed24:	744e      	strb	r6, [r1, #17]
  pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 800ed26:	73cd      	strb	r5, [r1, #15]
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
 800ed28:	9201      	str	r2, [sp, #4]
  pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 800ed2a:	f8c0 c120 	str.w	ip, [r0, #288]	; 0x120
  pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 800ed2e:	f8ce 1000 	str.w	r1, [lr]
  if (Speed == USBD_HIGH_SPEED)
 800ed32:	d10f      	bne.n	800ed54 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x88>
    pDevQualDesc->bcdDevice = 0x0200;
 800ed34:	750b      	strb	r3, [r1, #20]
    pDevQualDesc->Class = 0x00;
 800ed36:	758b      	strb	r3, [r1, #22]
    pDevQualDesc->SubClass = 0x00;
 800ed38:	75cb      	strb	r3, [r1, #23]
    pDevQualDesc->Protocol = 0x00;
 800ed3a:	760b      	strb	r3, [r1, #24]
    pDevQualDesc->bcdDevice = 0x0200;
 800ed3c:	754d      	strb	r5, [r1, #21]
    pDevQualDesc->bMaxPacketSize = 0x40;
 800ed3e:	764f      	strb	r7, [r1, #25]
    pDevQualDesc->bNumConfigurations = 0x01;
 800ed40:	9901      	ldr	r1, [sp, #4]
    pDevQualDesc->bReserved = 0x00;
 800ed42:	76e3      	strb	r3, [r4, #27]
    pDevQualDesc->bNumConfigurations = 0x01;
 800ed44:	76a1      	strb	r1, [r4, #26]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800ed46:	221c      	movs	r2, #28
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800ed48:	230a      	movs	r3, #10
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 800ed4a:	2106      	movs	r1, #6
    pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 800ed4c:	74a3      	strb	r3, [r4, #18]
    pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 800ed4e:	74e1      	strb	r1, [r4, #19]
    pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 800ed50:	f8c0 2120 	str.w	r2, [r0, #288]	; 0x120
 800ed54:	4ecf      	ldr	r6, [pc, #828]	; (800f094 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x3c8>)
      (pdev->tclasslist[pdev->classId].Active == 0U))
 800ed56:	f04f 095c 	mov.w	r9, #92	; 0x5c
 800ed5a:	4637      	mov	r7, r6
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 800ed5c:	f04f 0a02 	mov.w	sl, #2
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800ed60:	6882      	ldr	r2, [r0, #8]
 800ed62:	f106 0803 	add.w	r8, r6, #3
    if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800ed66:	6843      	ldr	r3, [r0, #4]
 800ed68:	2b02      	cmp	r3, #2
 800ed6a:	d806      	bhi.n	800ed7a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xae>
 800ed6c:	2a02      	cmp	r2, #2
 800ed6e:	d804      	bhi.n	800ed7a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xae>
        (UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 800ed70:	f897 e000 	ldrb.w	lr, [r7]
        (pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 800ed74:	f1be 0f00 	cmp.w	lr, #0
 800ed78:	d117      	bne.n	800edaa <USBD_Device_Framework_Builder.constprop.0.isra.0+0xde>
  while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 800ed7a:	3701      	adds	r7, #1
 800ed7c:	4547      	cmp	r7, r8
 800ed7e:	d1f2      	bne.n	800ed66 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x9a>
  if (pdev->NumClasses > 1)
 800ed80:	2a01      	cmp	r2, #1
 800ed82:	d908      	bls.n	800ed96 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xca>
    pDevDesc->bDeviceClass = 0xEF;
 800ed84:	21ef      	movs	r1, #239	; 0xef
    pDevDesc->bDeviceSubClass = 0x02;
 800ed86:	2202      	movs	r2, #2
    pDevDesc->bDeviceProtocol = 0x01;
 800ed88:	2301      	movs	r3, #1
    pDevDesc->bDeviceClass = 0xEF;
 800ed8a:	7121      	strb	r1, [r4, #4]
    pDevDesc->bDeviceSubClass = 0x02;
 800ed8c:	7162      	strb	r2, [r4, #5]
    pDevDesc->bDeviceProtocol = 0x01;
 800ed8e:	71a3      	strb	r3, [r4, #6]
}
 800ed90:	b00b      	add	sp, #44	; 0x2c
 800ed92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 800ed96:	7833      	ldrb	r3, [r6, #0]
 800ed98:	2b02      	cmp	r3, #2
 800ed9a:	d1f9      	bne.n	800ed90 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xc4>
      pDevDesc->bDeviceProtocol = 0x00;
 800ed9c:	2200      	movs	r2, #0
      pDevDesc->bDeviceClass = 0x02;
 800ed9e:	7123      	strb	r3, [r4, #4]
      pDevDesc->bDeviceSubClass = 0x02;
 800eda0:	7163      	strb	r3, [r4, #5]
      pDevDesc->bDeviceProtocol = 0x00;
 800eda2:	71a2      	strb	r2, [r4, #6]
}
 800eda4:	b00b      	add	sp, #44	; 0x2c
 800eda6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (pdev->tclasslist[pdev->classId].Active == 0U))
 800edaa:	fb09 0c03 	mla	ip, r9, r3, r0
  if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 800edae:	f8dc 1018 	ldr.w	r1, [ip, #24]
 800edb2:	b121      	cbz	r1, 800edbe <USBD_Device_Framework_Builder.constprop.0.isra.0+0xf2>
      pdev->classId ++;
 800edb4:	3301      	adds	r3, #1
      pdev->NumClasses ++;
 800edb6:	3201      	adds	r2, #1
      pdev->classId ++;
 800edb8:	6043      	str	r3, [r0, #4]
      pdev->NumClasses ++;
 800edba:	6082      	str	r2, [r0, #8]
 800edbc:	e7dd      	b.n	800ed7a <USBD_Device_Framework_Builder.constprop.0.isra.0+0xae>
    pdev->tclasslist[pdev->classId].Active = 1U;
 800edbe:	2501      	movs	r5, #1
      (void)USBD_FrameWork_AddClass(pdev,
 800edc0:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
    pdev->tclasslist[pdev->classId].Active = 1U;
 800edc4:	f8cc 5018 	str.w	r5, [ip, #24]
  pdev->Speed = Speed;
 800edc8:	9d01      	ldr	r5, [sp, #4]
    pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 800edca:	f8cc 3010 	str.w	r3, [ip, #16]
    pdev->tclasslist[pdev->classId].ClassType = class;
 800edce:	f88c e00c 	strb.w	lr, [ip, #12]
  pdev->Speed = Speed;
 800edd2:	7005      	strb	r5, [r0, #0]
      (void)USBD_FrameWork_AddClass(pdev,
 800edd4:	1865      	adds	r5, r4, r1
 800edd6:	9502      	str	r5, [sp, #8]
  if (pdev->classId == 0U)
 800edd8:	2b00      	cmp	r3, #0
 800edda:	f000 8135 	beq.w	800f048 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x37c>
  switch (pdev->tclasslist[pdev->classId].ClassType)
 800edde:	f1be 0f02 	cmp.w	lr, #2
 800ede2:	d1e7      	bne.n	800edb4 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xe8>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	f000 8152 	beq.w	800f08e <USBD_Device_Framework_Builder.constprop.0.isra.0+0x3c2>
 800edea:	2a02      	cmp	r2, #2
    for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 800edec:	6a01      	ldr	r1, [r0, #32]
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800edee:	d101      	bne.n	800edf4 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x128>
      idx++;
 800edf0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800edf2:	4411      	add	r1, r2
  return (uint8_t)idx;
 800edf4:	b2ca      	uxtb	r2, r1
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 800edf6:	1c51      	adds	r1, r2, #1
 800edf8:	b2c9      	uxtb	r1, r1
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 800edfa:	2503      	movs	r5, #3
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 800edfc:	fb09 0303 	mla	r3, r9, r3, r0
      pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 800ee00:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
      pdev->tclasslist[pdev->classId].Ifs[1] = (uint8_t)(interface + 1U);
 800ee04:	f883 105b 	strb.w	r1, [r3, #91]	; 0x5b
      pdev->tclasslist[pdev->classId].NumIf = 2U;
 800ee08:	f8c3 a020 	str.w	sl, [r3, #32]
      pdev->tclasslist[pdev->classId].NumEps = 3U;  /* EP_IN, EP_OUT, CMD_EP */
 800ee0c:	61dd      	str	r5, [r3, #28]
      if (Speed == USBD_HIGH_SPEED)
 800ee0e:	9b01      	ldr	r3, [sp, #4]
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	f000 8132 	beq.w	800f07a <USBD_Device_Framework_Builder.constprop.0.isra.0+0x3ae>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800ee16:	2101      	movs	r1, #1
 800ee18:	2340      	movs	r3, #64	; 0x40
 800ee1a:	2202      	movs	r2, #2
 800ee1c:	9003      	str	r0, [sp, #12]
 800ee1e:	f7ff ff2d 	bl	800ec7c <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800ee22:	2182      	movs	r1, #130	; 0x82
 800ee24:	9803      	ldr	r0, [sp, #12]
 800ee26:	f7ff ff29 	bl	800ec7c <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800ee2a:	462a      	mov	r2, r5
 800ee2c:	2308      	movs	r3, #8
 800ee2e:	2181      	movs	r1, #129	; 0x81
 800ee30:	9803      	ldr	r0, [sp, #12]
 800ee32:	f7ff ff23 	bl	800ec7c <USBD_FrameWork_AssignEp>
  static USBD_IadDescTypedef              *pIadDesc;
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

#if USBD_COMPOSITE_USE_IAD == 1
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 800ee36:	2208      	movs	r2, #8
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 800ee38:	230b      	movs	r3, #11
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPINCMD_ADDR,
 800ee3a:	9803      	ldr	r0, [sp, #12]
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 800ee3c:	9902      	ldr	r1, [sp, #8]
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 800ee3e:	f8d0 c124 	ldr.w	ip, [r0, #292]	; 0x124
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
  pIadDesc->bFunctionClass = 0x02U;
  pIadDesc->bFunctionSubClass = 0x02U;
  pIadDesc->bFunctionProtocol = 0x01U;
  pIadDesc->iFunction = 0; /* String Index */
 800ee42:	f04f 0e00 	mov.w	lr, #0
  pIadDesc->bLength = (uint8_t)sizeof(USBD_IadDescTypedef);
 800ee46:	f801 200c 	strb.w	r2, [r1, ip]
  pIadDesc = ((USBD_IadDescTypedef *)(pConf + *Sze));
 800ee4a:	460a      	mov	r2, r1
 800ee4c:	eb01 050c 	add.w	r5, r1, ip
  pIadDesc->bDescriptorType = USB_DESC_TYPE_IAD; /* IAD descriptor */
 800ee50:	706b      	strb	r3, [r5, #1]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800ee52:	6843      	ldr	r3, [r0, #4]
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 800ee54:	f10c 0108 	add.w	r1, ip, #8
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800ee58:	fb09 0b03 	mla	fp, r9, r3, r0
  *Sze += (uint32_t)sizeof(USBD_IadDescTypedef);
 800ee5c:	9105      	str	r1, [sp, #20]
#endif /* USBD_COMPOSITE_USE_IAD == 1 */

  /* Control Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 800ee5e:	f10c 0111 	add.w	r1, ip, #17
 800ee62:	9106      	str	r1, [sp, #24]
 800ee64:	9905      	ldr	r1, [sp, #20]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800ee66:	f8cd b00c 	str.w	fp, [sp, #12]
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 800ee6a:	188a      	adds	r2, r1, r2
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800ee6c:	9903      	ldr	r1, [sp, #12]
  /* Header Functional Descriptor*/
  pHeadDesc->bLength = 0x05U;
  pHeadDesc->bDescriptorType = 0x24U;
  pHeadDesc->bDescriptorSubtype = 0x00U;
  pHeadDesc->bcdCDC = 0x0110;
  *Sze += (uint32_t)sizeof(USBD_CDCHeaderFuncDescTypedef);
 800ee6e:	f10c 0b16 	add.w	fp, ip, #22
 800ee72:	f8cd b01c 	str.w	fp, [sp, #28]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800ee76:	f891 b05a 	ldrb.w	fp, [r1, #90]	; 0x5a
  pIadDesc->bInterfaceCount = 2U;    /* 2 interfaces */
 800ee7a:	f885 a003 	strb.w	sl, [r5, #3]
  pIadDesc->bFirstInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800ee7e:	f885 b002 	strb.w	fp, [r5, #2]
 800ee82:	f8cd b010 	str.w	fp, [sp, #16]
  pIadDesc->bFunctionProtocol = 0x01U;
 800ee86:	f04f 0b01 	mov.w	fp, #1
 800ee8a:	f885 b006 	strb.w	fp, [r5, #6]
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 800ee8e:	f04f 0b09 	mov.w	fp, #9
  pIadDesc->bFunctionClass = 0x02U;
 800ee92:	f885 a004 	strb.w	sl, [r5, #4]
  pIadDesc->bFunctionSubClass = 0x02U;
 800ee96:	f885 a005 	strb.w	sl, [r5, #5]
  pIadDesc->iFunction = 0; /* String Index */
 800ee9a:	f885 e007 	strb.w	lr, [r5, #7]
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U, 1U, 0x02,
 800ee9e:	9905      	ldr	r1, [sp, #20]
 800eea0:	9d02      	ldr	r5, [sp, #8]
 800eea2:	f801 b005 	strb.w	fp, [r1, r5]
 800eea6:	f04f 0104 	mov.w	r1, #4
 800eeaa:	f04f 0b01 	mov.w	fp, #1
 800eeae:	7051      	strb	r1, [r2, #1]
 800eeb0:	9904      	ldr	r1, [sp, #16]
 800eeb2:	f882 b004 	strb.w	fp, [r2, #4]
 800eeb6:	f882 b007 	strb.w	fp, [r2, #7]
 800eeba:	7091      	strb	r1, [r2, #2]
 800eebc:	f882 e003 	strb.w	lr, [r2, #3]
 800eec0:	f882 a005 	strb.w	sl, [r2, #5]
 800eec4:	f882 a006 	strb.w	sl, [r2, #6]
 800eec8:	f882 e008 	strb.w	lr, [r2, #8]
  pHeadDesc->bLength = 0x05U;
 800eecc:	f04f 0205 	mov.w	r2, #5
 800eed0:	9906      	ldr	r1, [sp, #24]
  pHeadDesc->bcdCDC = 0x0110;
 800eed2:	f04f 0b10 	mov.w	fp, #16
  pHeadDesc->bLength = 0x05U;
 800eed6:	554a      	strb	r2, [r1, r5]
  pHeadDesc->bDescriptorType = 0x24U;
 800eed8:	f04f 0224 	mov.w	r2, #36	; 0x24
  pHeadDesc = ((USBD_CDCHeaderFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800eedc:	4429      	add	r1, r5
  pHeadDesc->bcdCDC = 0x0110;
 800eede:	f881 b003 	strb.w	fp, [r1, #3]
  pHeadDesc->bDescriptorType = 0x24U;
 800eee2:	704a      	strb	r2, [r1, #1]
 800eee4:	4693      	mov	fp, r2
  pHeadDesc->bcdCDC = 0x0110;
 800eee6:	f04f 0201 	mov.w	r2, #1
  pHeadDesc->bDescriptorSubtype = 0x00U;
 800eeea:	f881 e002 	strb.w	lr, [r1, #2]
  pHeadDesc->bcdCDC = 0x0110;
 800eeee:	710a      	strb	r2, [r1, #4]

  /* Call Management Functional Descriptor*/
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
  pCallMgmDesc->bLength = 0x05U;
 800eef0:	f04f 0105 	mov.w	r1, #5
 800eef4:	9a07      	ldr	r2, [sp, #28]
 800eef6:	5551      	strb	r1, [r2, r5]
  pCallMgmDesc->bDescriptorType = 0x24U;
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 800eef8:	f04f 0101 	mov.w	r1, #1
  pCallMgmDesc = ((USBD_CDCCallMgmFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800eefc:	442a      	add	r2, r5
  pCallMgmDesc->bDescriptorSubtype = 0x01U;
 800eefe:	7091      	strb	r1, [r2, #2]
  pCallMgmDesc->bmCapabilities = 0x00U;
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800ef00:	9903      	ldr	r1, [sp, #12]
  pCallMgmDesc->bDescriptorType = 0x24U;
 800ef02:	f882 b001 	strb.w	fp, [r2, #1]
  pCallMgmDesc->bmCapabilities = 0x00U;
 800ef06:	f882 e003 	strb.w	lr, [r2, #3]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800ef0a:	f891 b05b 	ldrb.w	fp, [r1, #91]	; 0x5b
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);

  /* ACM Functional Descriptor*/
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
  pACMDesc->bLength = 0x04U;
 800ef0e:	f04f 0104 	mov.w	r1, #4
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800ef12:	f882 b004 	strb.w	fp, [r2, #4]
  *Sze += (uint32_t)sizeof(USBD_CDCCallMgmFuncDescTypedef);
 800ef16:	f10c 021b 	add.w	r2, ip, #27
  pACMDesc->bLength = 0x04U;
 800ef1a:	5551      	strb	r1, [r2, r5]
  pACMDesc->bDescriptorType = 0x24U;
 800ef1c:	f04f 0124 	mov.w	r1, #36	; 0x24
  pACMDesc = ((USBD_CDCACMFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800ef20:	442a      	add	r2, r5
  pACMDesc->bDescriptorType = 0x24U;
 800ef22:	7051      	strb	r1, [r2, #1]
  pCallMgmDesc->bDataInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800ef24:	f8cd b014 	str.w	fp, [sp, #20]
  pACMDesc->bDescriptorType = 0x24U;
 800ef28:	468b      	mov	fp, r1
  pACMDesc->bmCapabilities = 0x02;
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);

  /* Union Functional Descriptor*/
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
  pUnionDesc->bLength = 0x05U;
 800ef2a:	f04f 0105 	mov.w	r1, #5
  pACMDesc->bDescriptorSubtype = 0x02U;
 800ef2e:	f882 a002 	strb.w	sl, [r2, #2]
  pACMDesc->bmCapabilities = 0x02;
 800ef32:	f882 a003 	strb.w	sl, [r2, #3]
  *Sze += (uint32_t)sizeof(USBD_CDCACMFuncDescTypedef);
 800ef36:	f10c 021f 	add.w	r2, ip, #31
  pUnionDesc->bLength = 0x05U;
 800ef3a:	5551      	strb	r1, [r2, r5]
  pUnionDesc = ((USBD_CDCUnionFuncDescTypedef *)((uint32_t)pConf + *Sze));
 800ef3c:	442a      	add	r2, r5
  pUnionDesc->bDescriptorType = 0x24U;
 800ef3e:	f882 b001 	strb.w	fp, [r2, #1]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 800ef42:	f04f 0b06 	mov.w	fp, #6
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800ef46:	9904      	ldr	r1, [sp, #16]
  pUnionDesc->bDescriptorSubtype = 0x06U;
 800ef48:	f882 b002 	strb.w	fp, [r2, #2]
  pUnionDesc->bMasterInterface = pdev->tclasslist[pdev->classId].Ifs[0];
 800ef4c:	70d1      	strb	r1, [r2, #3]
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800ef4e:	9905      	ldr	r1, [sp, #20]
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800ef50:	f04f 0b03 	mov.w	fp, #3
  pUnionDesc->bSlaveInterface = pdev->tclasslist[pdev->classId].Ifs[1];
 800ef54:	7111      	strb	r1, [r2, #4]
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800ef56:	f04f 0207 	mov.w	r2, #7
  *Sze += (uint32_t)sizeof(USBD_CDCUnionFuncDescTypedef);
 800ef5a:	f10c 0124 	add.w	r1, ip, #36	; 0x24
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800ef5e:	554a      	strb	r2, [r1, r5]
 800ef60:	f04f 0205 	mov.w	r2, #5
 800ef64:	4429      	add	r1, r5
 800ef66:	704a      	strb	r2, [r1, #1]
 800ef68:	9a03      	ldr	r2, [sp, #12]
 800ef6a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800ef6e:	f881 b003 	strb.w	fp, [r1, #3]
 800ef72:	708a      	strb	r2, [r1, #2]
 800ef74:	9a03      	ldr	r2, [sp, #12]
                          (uint16_t)pdev->tclasslist[pdev->classId].Eps[2].size,
                          USBD_CDCACM_EPINCMD_HS_BINTERVAL,
                          USBD_CDCACM_EPINCMD_FS_BINTERVAL);

  /* Data Interface Descriptor */
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800ef76:	f10c 0b34 	add.w	fp, ip, #52	; 0x34
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800ef7a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800ef7c:	f8cd b010 	str.w	fp, [sp, #16]
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800ef80:	f10c 0b2b 	add.w	fp, ip, #43	; 0x2b
 800ef84:	808a      	strh	r2, [r1, #4]
 800ef86:	465a      	mov	r2, fp
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800ef88:	442a      	add	r2, r5
 800ef8a:	9208      	str	r2, [sp, #32]
                          0U, 0U, 0U);

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800ef8c:	9a04      	ldr	r2, [sp, #16]
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800ef8e:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800ef92:	4415      	add	r5, r2
  __USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[2].add, \
 800ef94:	f890 b000 	ldrb.w	fp, [r0]
 800ef98:	f04f 0205 	mov.w	r2, #5
 800ef9c:	f8cd b01c 	str.w	fp, [sp, #28]
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800efa0:	f04f 0b09 	mov.w	fp, #9
 800efa4:	718a      	strb	r2, [r1, #6]
 800efa6:	9902      	ldr	r1, [sp, #8]
 800efa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800efaa:	9506      	str	r5, [sp, #24]
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800efac:	f802 b001 	strb.w	fp, [r2, r1]
 800efb0:	f04f 0504 	mov.w	r5, #4
 800efb4:	f04f 0b0a 	mov.w	fp, #10
 800efb8:	9a08      	ldr	r2, [sp, #32]
 800efba:	7055      	strb	r5, [r2, #1]
 800efbc:	f882 b005 	strb.w	fp, [r2, #5]
 800efc0:	9d05      	ldr	r5, [sp, #20]
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800efc2:	f04f 0b07 	mov.w	fp, #7
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800efc6:	7095      	strb	r5, [r2, #2]
 800efc8:	f882 e003 	strb.w	lr, [r2, #3]
 800efcc:	f882 a004 	strb.w	sl, [r2, #4]
 800efd0:	f882 e006 	strb.w	lr, [r2, #6]
 800efd4:	f882 e007 	strb.w	lr, [r2, #7]
 800efd8:	f882 e008 	strb.w	lr, [r2, #8]
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800efdc:	f04f 0205 	mov.w	r2, #5
  __USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[1], 0U, 2U, 0x0A,
 800efe0:	9d04      	ldr	r5, [sp, #16]
 800efe2:	f8c0 5124 	str.w	r5, [r0, #292]	; 0x124
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800efe6:	f801 b005 	strb.w	fp, [r1, r5]
 800efea:	9d06      	ldr	r5, [sp, #24]
 800efec:	9903      	ldr	r1, [sp, #12]
 800efee:	706a      	strb	r2, [r5, #1]
 800eff0:	f891 2024 	ldrb.w	r2, [r1, #36]	; 0x24
 800eff4:	70aa      	strb	r2, [r5, #2]
 800eff6:	f885 a003 	strb.w	sl, [r5, #3]
 800effa:	8cca      	ldrh	r2, [r1, #38]	; 0x26
                          (USBD_EP_TYPE_BULK),
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[0].size),
                          (0x00U), (0x00U));

  /* Append Endpoint descriptor to Configuration descriptor */
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800effc:	9902      	ldr	r1, [sp, #8]
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800effe:	80aa      	strh	r2, [r5, #4]
 800f000:	e9dd 2506 	ldrd	r2, r5, [sp, #24]
 800f004:	2d01      	cmp	r5, #1
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800f006:	bf0c      	ite	eq
 800f008:	465d      	moveq	r5, fp
 800f00a:	2507      	movne	r5, #7
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[0].add), \
 800f00c:	f882 e006 	strb.w	lr, [r2, #6]
 800f010:	f10c 023b 	add.w	r2, ip, #59	; 0x3b
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800f014:	5455      	strb	r5, [r2, r1]
 800f016:	440a      	add	r2, r1
 800f018:	f04f 0105 	mov.w	r1, #5
 800f01c:	7051      	strb	r1, [r2, #1]
 800f01e:	9d03      	ldr	r5, [sp, #12]
 800f020:	f895 102a 	ldrb.w	r1, [r5, #42]	; 0x2a
 800f024:	f882 a003 	strb.w	sl, [r2, #3]
 800f028:	7091      	strb	r1, [r2, #2]
 800f02a:	8da9      	ldrh	r1, [r5, #44]	; 0x2c
 800f02c:	f882 e006 	strb.w	lr, [r2, #6]
 800f030:	8091      	strh	r1, [r2, #4]
                          (uint16_t)(pdev->tclasslist[pdev->classId].Eps[1].size),
                          (0x00U), (0x00U));

  /* Update Config Descriptor and IAD descriptor */
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 800f032:	9902      	ldr	r1, [sp, #8]
  __USBD_FRAMEWORK_SET_EP((pdev->tclasslist[pdev->classId].Eps[1].add), \
 800f034:	f10c 0242 	add.w	r2, ip, #66	; 0x42
 800f038:	f8c0 2124 	str.w	r2, [r0, #292]	; 0x124
  ((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 800f03c:	804a      	strh	r2, [r1, #2]
  ((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 2U;
 800f03e:	790a      	ldrb	r2, [r1, #4]
 800f040:	3202      	adds	r2, #2
 800f042:	710a      	strb	r2, [r1, #4]
      pdev->NumClasses ++;
 800f044:	6882      	ldr	r2, [r0, #8]
}
 800f046:	e6b5      	b.n	800edb4 <USBD_Device_Framework_Builder.constprop.0.isra.0+0xe8>
  ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 800f048:	f04f 0c09 	mov.w	ip, #9
 800f04c:	f804 c001 	strb.w	ip, [r4, r1]
  ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 800f050:	4629      	mov	r1, r5
 800f052:	f885 a001 	strb.w	sl, [r5, #1]
  ptr->bNumInterfaces = 0U;
 800f056:	712b      	strb	r3, [r5, #4]
  ptr->bConfigurationValue = 1U;
 800f058:	f04f 0501 	mov.w	r5, #1
  ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 800f05c:	718b      	strb	r3, [r1, #6]
  ptr->bConfigurationValue = 1U;
 800f05e:	714d      	strb	r5, [r1, #5]
  ptr->wDescriptorLength = 0U;
 800f060:	708b      	strb	r3, [r1, #2]
 800f062:	70cb      	strb	r3, [r1, #3]
 800f064:	460d      	mov	r5, r1
  ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 800f066:	21c0      	movs	r1, #192	; 0xc0
 800f068:	71e9      	strb	r1, [r5, #7]
  ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 800f06a:	2119      	movs	r1, #25
 800f06c:	7229      	strb	r1, [r5, #8]
  *pSze += sizeof(USBD_ConfigDescTypedef);
 800f06e:	f8d0 1124 	ldr.w	r1, [r0, #292]	; 0x124
 800f072:	4461      	add	r1, ip
 800f074:	f8c0 1124 	str.w	r1, [r0, #292]	; 0x124
}
 800f078:	e6b1      	b.n	800edde <USBD_Device_Framework_Builder.constprop.0.isra.0+0x112>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPOUT_ADDR,
 800f07a:	9901      	ldr	r1, [sp, #4]
 800f07c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f080:	2202      	movs	r2, #2
 800f082:	9003      	str	r0, [sp, #12]
 800f084:	f7ff fdfa 	bl	800ec7c <USBD_FrameWork_AssignEp>
        USBD_FrameWork_AssignEp(pdev, USBD_CDCACM_EPIN_ADDR,
 800f088:	2182      	movs	r1, #130	; 0x82
 800f08a:	9803      	ldr	r0, [sp, #12]
 800f08c:	e6cb      	b.n	800ee26 <USBD_Device_Framework_Builder.constprop.0.isra.0+0x15a>
  for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 800f08e:	2101      	movs	r1, #1
 800f090:	e6b3      	b.n	800edfa <USBD_Device_Framework_Builder.constprop.0.isra.0+0x12e>
 800f092:	bf00      	nop
 800f094:	200001c4 	.word	0x200001c4
 800f098:	2000ae34 	.word	0x2000ae34

0800f09c <USBD_Get_Device_Framework_Speed>:
{
 800f09c:	b538      	push	{r3, r4, r5, lr}
  if (USBD_FULL_SPEED == Speed)
 800f09e:	4602      	mov	r2, r0
{
 800f0a0:	460c      	mov	r4, r1
  if (USBD_FULL_SPEED == Speed)
 800f0a2:	b950      	cbnz	r0, 800f0ba <USBD_Get_Device_Framework_Speed+0x1e>
    USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 800f0a4:	4d0a      	ldr	r5, [pc, #40]	; (800f0d0 <USBD_Get_Device_Framework_Speed+0x34>)
 800f0a6:	490b      	ldr	r1, [pc, #44]	; (800f0d4 <USBD_Get_Device_Framework_Speed+0x38>)
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	f7ff fe0f 	bl	800eccc <USBD_Device_Framework_Builder.constprop.0.isra.0>
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 800f0ae:	e9d5 3248 	ldrd	r3, r2, [r5, #288]	; 0x120
 800f0b2:	4413      	add	r3, r2
    pFrameWork = pDevFrameWorkDesc_FS;
 800f0b4:	4807      	ldr	r0, [pc, #28]	; (800f0d4 <USBD_Get_Device_Framework_Speed+0x38>)
    *Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 800f0b6:	6023      	str	r3, [r4, #0]
}
 800f0b8:	bd38      	pop	{r3, r4, r5, pc}
    USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 800f0ba:	4d07      	ldr	r5, [pc, #28]	; (800f0d8 <USBD_Get_Device_Framework_Speed+0x3c>)
 800f0bc:	4907      	ldr	r1, [pc, #28]	; (800f0dc <USBD_Get_Device_Framework_Speed+0x40>)
 800f0be:	4628      	mov	r0, r5
 800f0c0:	f7ff fe04 	bl	800eccc <USBD_Device_Framework_Builder.constprop.0.isra.0>
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 800f0c4:	e9d5 3248 	ldrd	r3, r2, [r5, #288]	; 0x120
 800f0c8:	4413      	add	r3, r2
    pFrameWork = pDevFrameWorkDesc_HS;
 800f0ca:	4804      	ldr	r0, [pc, #16]	; (800f0dc <USBD_Get_Device_Framework_Speed+0x40>)
    *Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 800f0cc:	6023      	str	r3, [r4, #0]
}
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	2000aae0 	.word	0x2000aae0
 800f0d4:	2000a950 	.word	0x2000a950
 800f0d8:	2000ac08 	.word	0x2000ac08
 800f0dc:	2000aa18 	.word	0x2000aa18

0800f0e0 <USBD_Get_String_Framework>:
{
 800f0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f0e2:	f240 4409 	movw	r4, #1033	; 0x409
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800f0e6:	2301      	movs	r3, #1
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f0e8:	4d43      	ldr	r5, [pc, #268]	; (800f1f8 <USBD_Get_String_Framework+0x118>)
 800f0ea:	4944      	ldr	r1, [pc, #272]	; (800f1fc <USBD_Get_String_Framework+0x11c>)
 800f0ec:	802c      	strh	r4, [r5, #0]
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800f0ee:	460a      	mov	r2, r1
{
 800f0f0:	4604      	mov	r4, r0
  uint8_t  len = 0U;
 800f0f2:	f04f 0c00 	mov.w	ip, #0
  USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 800f0f6:	2054      	movs	r0, #84	; 0x54
 800f0f8:	70ab      	strb	r3, [r5, #2]
  while (*pbuff != (uint8_t)'\0')
 800f0fa:	e002      	b.n	800f102 <USBD_Get_String_Framework+0x22>
    len++;
 800f0fc:	469c      	mov	ip, r3
  while (*pbuff != (uint8_t)'\0')
 800f0fe:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    len++;
 800f102:	f10c 0301 	add.w	r3, ip, #1
 800f106:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 800f108:	2800      	cmp	r0, #0
 800f10a:	d1f7      	bne.n	800f0fc <USBD_Get_String_Framework+0x1c>
  unicode[idx++] = *(uint8_t *)len;
 800f10c:	70eb      	strb	r3, [r5, #3]
  while (*pdesc != (uint8_t)'\0')
 800f10e:	2053      	movs	r0, #83	; 0x53
  unicode[idx++] = *(uint8_t *)len;
 800f110:	2354      	movs	r3, #84	; 0x54
 800f112:	2201      	movs	r2, #1
 800f114:	e002      	b.n	800f11c <USBD_Get_String_Framework+0x3c>
  while (*pdesc != (uint8_t)'\0')
 800f116:	4618      	mov	r0, r3
 800f118:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    unicode[idx++] = *pdesc;
 800f11c:	eb05 0e02 	add.w	lr, r5, r2
 800f120:	1c56      	adds	r6, r2, #1
 800f122:	b2f2      	uxtb	r2, r6
 800f124:	f88e 0003 	strb.w	r0, [lr, #3]
  while (*pdesc != (uint8_t)'\0')
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d1f4      	bne.n	800f116 <USBD_Get_String_Framework+0x36>
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f12c:	2109      	movs	r1, #9
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f12e:	f04f 0e04 	mov.w	lr, #4
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 800f132:	2702      	movs	r7, #2
  count += len + 1;
 800f134:	f10c 0205 	add.w	r2, ip, #5
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f138:	b2d2      	uxtb	r2, r2
 800f13a:	54a9      	strb	r1, [r5, r2]
 800f13c:	f10c 0206 	add.w	r2, ip, #6
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f140:	b2d2      	uxtb	r2, r2
 800f142:	f805 e002 	strb.w	lr, [r5, r2]
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 800f146:	4e2e      	ldr	r6, [pc, #184]	; (800f200 <USBD_Get_String_Framework+0x120>)
 800f148:	f10c 0e08 	add.w	lr, ip, #8
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f14c:	f10c 0207 	add.w	r2, ip, #7
  USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 800f150:	fa5f fe8e 	uxtb.w	lr, lr
 800f154:	b2d2      	uxtb	r2, r2
 800f156:	54af      	strb	r7, [r5, r2]
  USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 800f158:	4630      	mov	r0, r6
 800f15a:	2154      	movs	r1, #84	; 0x54
 800f15c:	eb05 070e 	add.w	r7, r5, lr
  while (*pbuff != (uint8_t)'\0')
 800f160:	e001      	b.n	800f166 <USBD_Get_String_Framework+0x86>
 800f162:	f810 1f01 	ldrb.w	r1, [r0, #1]!
    len++;
 800f166:	3301      	adds	r3, #1
 800f168:	b2db      	uxtb	r3, r3
  while (*pbuff != (uint8_t)'\0')
 800f16a:	2900      	cmp	r1, #0
 800f16c:	d1f9      	bne.n	800f162 <USBD_Get_String_Framework+0x82>
  unicode[idx++] = *(uint8_t *)len;
 800f16e:	2254      	movs	r2, #84	; 0x54
  while (*pdesc != (uint8_t)'\0')
 800f170:	2053      	movs	r0, #83	; 0x53
  unicode[idx++] = *(uint8_t *)len;
 800f172:	2101      	movs	r1, #1
 800f174:	f805 300e 	strb.w	r3, [r5, lr]
  while (*pdesc != (uint8_t)'\0')
 800f178:	e002      	b.n	800f180 <USBD_Get_String_Framework+0xa0>
 800f17a:	4610      	mov	r0, r2
 800f17c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    unicode[idx++] = *pdesc;
 800f180:	f101 0c01 	add.w	ip, r1, #1
 800f184:	5478      	strb	r0, [r7, r1]
 800f186:	fa5f f18c 	uxtb.w	r1, ip
  while (*pdesc != (uint8_t)'\0')
 800f18a:	2a00      	cmp	r2, #0
 800f18c:	d1f5      	bne.n	800f17a <USBD_Get_String_Framework+0x9a>
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f18e:	2609      	movs	r6, #9
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800f190:	f04f 0c03 	mov.w	ip, #3
  count += len + 1;
 800f194:	4473      	add	r3, lr
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f196:	f04f 0e04 	mov.w	lr, #4
  count += len + 1;
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	1c58      	adds	r0, r3, #1
  USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f19e:	b2c0      	uxtb	r0, r0
 800f1a0:	542e      	strb	r6, [r5, r0]
 800f1a2:	1c9e      	adds	r6, r3, #2
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f1a4:	b2f6      	uxtb	r6, r6
 800f1a6:	f805 e006 	strb.w	lr, [r5, r6]
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800f1aa:	4916      	ldr	r1, [pc, #88]	; (800f204 <USBD_Get_String_Framework+0x124>)
  USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 800f1ac:	eb03 060c 	add.w	r6, r3, ip
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800f1b0:	4473      	add	r3, lr
 800f1b2:	b2f6      	uxtb	r6, r6
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 800f1b4:	b2db      	uxtb	r3, r3
  USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 800f1b6:	f805 c006 	strb.w	ip, [r5, r6]
  USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 800f1ba:	460f      	mov	r7, r1
 800f1bc:	2044      	movs	r0, #68	; 0x44
 800f1be:	18ee      	adds	r6, r5, r3
  while (*pbuff != (uint8_t)'\0')
 800f1c0:	e001      	b.n	800f1c6 <USBD_Get_String_Framework+0xe6>
 800f1c2:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    len++;
 800f1c6:	3201      	adds	r2, #1
 800f1c8:	b2d2      	uxtb	r2, r2
  while (*pbuff != (uint8_t)'\0')
 800f1ca:	2800      	cmp	r0, #0
 800f1cc:	d1f9      	bne.n	800f1c2 <USBD_Get_String_Framework+0xe2>
  unicode[idx++] = *(uint8_t *)len;
 800f1ce:	54ea      	strb	r2, [r5, r3]
  while (*pdesc != (uint8_t)'\0')
 800f1d0:	2043      	movs	r0, #67	; 0x43
  unicode[idx++] = *(uint8_t *)len;
 800f1d2:	2244      	movs	r2, #68	; 0x44
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e002      	b.n	800f1de <USBD_Get_String_Framework+0xfe>
  while (*pdesc != (uint8_t)'\0')
 800f1d8:	4610      	mov	r0, r2
 800f1da:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    unicode[idx++] = *pdesc;
 800f1de:	1c5d      	adds	r5, r3, #1
 800f1e0:	54f0      	strb	r0, [r6, r3]
 800f1e2:	b2eb      	uxtb	r3, r5
  while (*pdesc != (uint8_t)'\0')
 800f1e4:	2a00      	cmp	r2, #0
 800f1e6:	d1f7      	bne.n	800f1d8 <USBD_Get_String_Framework+0xf8>
  *Length = strlen((const char *)USBD_string_framework);
 800f1e8:	4803      	ldr	r0, [pc, #12]	; (800f1f8 <USBD_Get_String_Framework+0x118>)
 800f1ea:	f001 fb21 	bl	8010830 <strlen>
 800f1ee:	4603      	mov	r3, r0
}
 800f1f0:	4801      	ldr	r0, [pc, #4]	; (800f1f8 <USBD_Get_String_Framework+0x118>)
  *Length = strlen((const char *)USBD_string_framework);
 800f1f2:	6023      	str	r3, [r4, #0]
}
 800f1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f1f6:	bf00      	nop
 800f1f8:	2000ad34 	.word	0x2000ad34
 800f1fc:	08011b01 	.word	0x08011b01
 800f200:	08011b15 	.word	0x08011b15
 800f204:	08011b2d 	.word	0x08011b2d

0800f208 <USBD_Get_Language_Id_Framework>:
{
 800f208:	b538      	push	{r3, r4, r5, lr}
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f20a:	f240 4309 	movw	r3, #1033	; 0x409
 800f20e:	4d05      	ldr	r5, [pc, #20]	; (800f224 <USBD_Get_Language_Id_Framework+0x1c>)
{
 800f210:	4604      	mov	r4, r0
  *Length = strlen((const char *)USBD_language_id_framework);
 800f212:	4628      	mov	r0, r5
  USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 800f214:	802b      	strh	r3, [r5, #0]
  *Length = strlen((const char *)USBD_language_id_framework);
 800f216:	f001 fb0b 	bl	8010830 <strlen>
 800f21a:	4603      	mov	r3, r0
}
 800f21c:	4628      	mov	r0, r5
  *Length = strlen((const char *)USBD_language_id_framework);
 800f21e:	6023      	str	r3, [r4, #0]
}
 800f220:	bd38      	pop	{r3, r4, r5, pc}
 800f222:	bf00      	nop
 800f224:	2000ad30 	.word	0x2000ad30

0800f228 <USBD_Get_Interface_Number>:
{
 800f228:	b500      	push	{lr}
  uint8_t itf_num = 0U;
 800f22a:	f04f 0e00 	mov.w	lr, #0
 800f22e:	4b08      	ldr	r3, [pc, #32]	; (800f250 <USBD_Get_Interface_Number+0x28>)
 800f230:	f503 7c8a 	add.w	ip, r3, #276	; 0x114
    if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 800f234:	7b1a      	ldrb	r2, [r3, #12]
 800f236:	4282      	cmp	r2, r0
 800f238:	d104      	bne.n	800f244 <USBD_Get_Interface_Number+0x1c>
 800f23a:	7d1a      	ldrb	r2, [r3, #20]
 800f23c:	428a      	cmp	r2, r1
      itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 800f23e:	bf08      	it	eq
 800f240:	f893 e05a 	ldrbeq.w	lr, [r3, #90]	; 0x5a
  for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 800f244:	335c      	adds	r3, #92	; 0x5c
 800f246:	4563      	cmp	r3, ip
 800f248:	d1f4      	bne.n	800f234 <USBD_Get_Interface_Number+0xc>
}
 800f24a:	4670      	mov	r0, lr
 800f24c:	f85d fb04 	ldr.w	pc, [sp], #4
 800f250:	2000aae0 	.word	0x2000aae0

0800f254 <USBD_Get_Configuration_Number>:
}
 800f254:	2001      	movs	r0, #1
 800f256:	4770      	bx	lr

0800f258 <_ux_device_stack_alternate_setting_get>:
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f258:	4b10      	ldr	r3, [pc, #64]	; (800f29c <_ux_device_stack_alternate_setting_get+0x44>)
{
 800f25a:	b430      	push	{r4, r5}
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f25c:	681c      	ldr	r4, [r3, #0]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800f25e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f260:	2b03      	cmp	r3, #3
 800f262:	d002      	beq.n	800f26a <_ux_device_stack_alternate_setting_get+0x12>
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
}
 800f264:	bc30      	pop	{r4, r5}
 800f266:	20ff      	movs	r0, #255	; 0xff
 800f268:	4770      	bx	lr
        interface_ptr =  device -> ux_slave_device_first_interface;
 800f26a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
        while (interface_ptr != UX_NULL)
 800f26e:	b91b      	cbnz	r3, 800f278 <_ux_device_stack_alternate_setting_get+0x20>
 800f270:	e7f8      	b.n	800f264 <_ux_device_stack_alternate_setting_get+0xc>
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800f272:	699b      	ldr	r3, [r3, #24]
        while (interface_ptr != UX_NULL)
 800f274:	2b00      	cmp	r3, #0
 800f276:	d0f5      	beq.n	800f264 <_ux_device_stack_alternate_setting_get+0xc>
            if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800f278:	7b9a      	ldrb	r2, [r3, #14]
 800f27a:	4282      	cmp	r2, r0
 800f27c:	d1f9      	bne.n	800f272 <_ux_device_stack_alternate_setting_get+0x1a>
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800f27e:	2201      	movs	r2, #1
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f280:	2503      	movs	r5, #3
                            (UCHAR) interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting;
 800f282:	7bd9      	ldrb	r1, [r3, #15]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800f284:	6ea3      	ldr	r3, [r4, #104]	; 0x68
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800f286:	f104 005c 	add.w	r0, r4, #92	; 0x5c
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 800f28a:	7019      	strb	r1, [r3, #0]
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 800f28c:	6722      	str	r2, [r4, #112]	; 0x70
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f28e:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800f292:	4611      	mov	r1, r2
}
 800f294:	bc30      	pop	{r4, r5}
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800f296:	f000 bfdf 	b.w	8010258 <_ux_device_stack_transfer_request>
 800f29a:	bf00      	nop
 800f29c:	2000ae38 	.word	0x2000ae38

0800f2a0 <_ux_device_stack_alternate_setting_set>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f2a4:	f8df 8218 	ldr.w	r8, [pc, #536]	; 800f4c0 <_ux_device_stack_alternate_setting_set+0x220>
{
 800f2a8:	b095      	sub	sp, #84	; 0x54
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f2aa:	f8d8 6000 	ldr.w	r6, [r8]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 800f2ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	f040 80c0 	bne.w	800f436 <_ux_device_stack_alternate_setting_set+0x196>
        return(UX_FUNCTION_NOT_SUPPORTED);

    /* Find the current interface.  */
    interface_ptr =  device -> ux_slave_device_first_interface;
 800f2b6:	f8d6 50b4 	ldr.w	r5, [r6, #180]	; 0xb4

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface_ptr != UX_NULL)
 800f2ba:	4682      	mov	sl, r0
 800f2bc:	468b      	mov	fp, r1
 800f2be:	b925      	cbnz	r5, 800f2ca <_ux_device_stack_alternate_setting_set+0x2a>
 800f2c0:	e0c1      	b.n	800f446 <_ux_device_stack_alternate_setting_set+0x1a6>
    {

        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
            break;
        else
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800f2c2:	69ad      	ldr	r5, [r5, #24]
    while (interface_ptr != UX_NULL)
 800f2c4:	2d00      	cmp	r5, #0
 800f2c6:	f000 80be 	beq.w	800f446 <_ux_device_stack_alternate_setting_set+0x1a6>
        if (interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 800f2ca:	7bab      	ldrb	r3, [r5, #14]
 800f2cc:	4553      	cmp	r3, sl
 800f2ce:	d1f8      	bne.n	800f2c2 <_ux_device_stack_alternate_setting_set+0x22>
        return(UX_INTERFACE_HANDLE_UNKNOWN);
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface_ptr -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 800f2d0:	7beb      	ldrb	r3, [r5, #15]
 800f2d2:	455b      	cmp	r3, fp
 800f2d4:	f000 80b3 	beq.w	800f43e <_ux_device_stack_alternate_setting_set+0x19e>

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 800f2d8:	e9d6 4933 	ldrd	r4, r9, [r6, #204]	; 0xcc
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 800f2dc:	f1b9 0f00 	cmp.w	r9, #0
 800f2e0:	f000 80a5 	beq.w	800f42e <_ux_device_stack_alternate_setting_set+0x18e>
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 800f2e4:	4974      	ldr	r1, [pc, #464]	; (800f4b8 <_ux_device_stack_alternate_setting_set+0x218>)
 800f2e6:	e004      	b.n	800f2f2 <_ux_device_stack_alternate_setting_set+0x52>
    while (device_framework_length != 0)
 800f2e8:	ebb9 0907 	subs.w	r9, r9, r7

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800f2ec:	443c      	add	r4, r7
    while (device_framework_length != 0)
 800f2ee:	f000 809e 	beq.w	800f42e <_ux_device_stack_alternate_setting_set+0x18e>
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800f2f2:	7863      	ldrb	r3, [r4, #1]
        descriptor_length =  (ULONG) *device_framework;
 800f2f4:	7827      	ldrb	r7, [r4, #0]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800f2f6:	2b02      	cmp	r3, #2
 800f2f8:	d1f6      	bne.n	800f2e8 <_ux_device_stack_alternate_setting_set+0x48>
            _ux_utility_descriptor_parse(device_framework,
 800f2fa:	2208      	movs	r2, #8
 800f2fc:	ab03      	add	r3, sp, #12
 800f2fe:	4620      	mov	r0, r4
 800f300:	f001 f898 	bl	8010434 <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 800f304:	f89d 2011 	ldrb.w	r2, [sp, #17]
 800f308:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
 800f30c:	496a      	ldr	r1, [pc, #424]	; (800f4b8 <_ux_device_stack_alternate_setting_set+0x218>)
 800f30e:	429a      	cmp	r2, r3
 800f310:	d1ea      	bne.n	800f2e8 <_ux_device_stack_alternate_setting_set+0x48>
                device_framework_length = configuration_descriptor.wTotalLength;
 800f312:	f8bd 700e 	ldrh.w	r7, [sp, #14]
                while (device_framework_length != 0)
 800f316:	2f00      	cmp	r7, #0
 800f318:	f000 8089 	beq.w	800f42e <_ux_device_stack_alternate_setting_set+0x18e>
                        _ux_utility_descriptor_parse(device_framework,
 800f31c:	4967      	ldr	r1, [pc, #412]	; (800f4bc <_ux_device_stack_alternate_setting_set+0x21c>)
 800f31e:	e004      	b.n	800f32a <_ux_device_stack_alternate_setting_set+0x8a>
                while (device_framework_length != 0)
 800f320:	ebb7 0709 	subs.w	r7, r7, r9
                    device_framework +=  descriptor_length;
 800f324:	444c      	add	r4, r9
                while (device_framework_length != 0)
 800f326:	f000 8082 	beq.w	800f42e <_ux_device_stack_alternate_setting_set+0x18e>
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800f32a:	7863      	ldrb	r3, [r4, #1]
                    descriptor_length =  (ULONG) *device_framework;
 800f32c:	f894 9000 	ldrb.w	r9, [r4]
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800f330:	2b04      	cmp	r3, #4
 800f332:	d1f5      	bne.n	800f320 <_ux_device_stack_alternate_setting_set+0x80>
                        _ux_utility_descriptor_parse(device_framework,
 800f334:	ab06      	add	r3, sp, #24
 800f336:	4620      	mov	r0, r4
 800f338:	2209      	movs	r2, #9
 800f33a:	f001 f87b 	bl	8010434 <_ux_utility_descriptor_parse>
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800f33e:	f89d 301a 	ldrb.w	r3, [sp, #26]
 800f342:	495e      	ldr	r1, [pc, #376]	; (800f4bc <_ux_device_stack_alternate_setting_set+0x21c>)
 800f344:	4553      	cmp	r3, sl
 800f346:	d1eb      	bne.n	800f320 <_ux_device_stack_alternate_setting_set+0x80>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 800f348:	f89d 301b 	ldrb.w	r3, [sp, #27]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 800f34c:	455b      	cmp	r3, fp
 800f34e:	d1e7      	bne.n	800f320 <_ux_device_stack_alternate_setting_set+0x80>
                            endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;
 800f350:	f8d5 901c 	ldr.w	r9, [r5, #28]
                            while (endpoint != UX_NULL)
 800f354:	f1b9 0f00 	cmp.w	r9, #0
 800f358:	d018      	beq.n	800f38c <_ux_device_stack_alternate_setting_set+0xec>
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800f35a:	464b      	mov	r3, r9
 800f35c:	f04f 0a00 	mov.w	sl, #0
 800f360:	46a1      	mov	r9, r4
 800f362:	461c      	mov	r4, r3
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 800f364:	2126      	movs	r1, #38	; 0x26
 800f366:	4620      	mov	r0, r4
 800f368:	f000 ff70 	bl	801024c <_ux_device_stack_transfer_all_request_abort>
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 800f36c:	4622      	mov	r2, r4
 800f36e:	69b3      	ldr	r3, [r6, #24]
 800f370:	210f      	movs	r1, #15
 800f372:	4630      	mov	r0, r6
 800f374:	4798      	blx	r3
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800f376:	4623      	mov	r3, r4
 800f378:	6964      	ldr	r4, [r4, #20]
                                endpoint -> ux_slave_endpoint_state =  0;
 800f37a:	e9c3 aa00 	strd	sl, sl, [r3]
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800f37e:	e9c3 aa05 	strd	sl, sl, [r3, #20]
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800f382:	f8c3 a01c 	str.w	sl, [r3, #28]
                            while (endpoint != UX_NULL)
 800f386:	2c00      	cmp	r4, #0
 800f388:	d1ec      	bne.n	800f364 <_ux_device_stack_alternate_setting_set+0xc4>
 800f38a:	464c      	mov	r4, r9
                            interface_ptr -> ux_slave_interface_first_endpoint = UX_NULL;
 800f38c:	2300      	movs	r3, #0
 800f38e:	61eb      	str	r3, [r5, #28]
                            device_framework_length -=  (ULONG) *device_framework;
 800f390:	7823      	ldrb	r3, [r4, #0]
                            while (device_framework_length != 0)
 800f392:	1aff      	subs	r7, r7, r3
                            device_framework +=  (ULONG) *device_framework;
 800f394:	441c      	add	r4, r3
                            while (device_framework_length != 0)
 800f396:	d071      	beq.n	800f47c <_ux_device_stack_alternate_setting_set+0x1dc>
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f398:	f106 0324 	add.w	r3, r6, #36	; 0x24
 800f39c:	46a1      	mov	r9, r4
 800f39e:	e9cd 7300 	strd	r7, r3, [sp]
                                    _ux_utility_descriptor_parse(device_framework,
 800f3a2:	f8df b120 	ldr.w	fp, [pc, #288]	; 800f4c4 <_ux_device_stack_alternate_setting_set+0x224>
 800f3a6:	e007      	b.n	800f3b8 <_ux_device_stack_alternate_setting_set+0x118>
                                switch(descriptor_type)
 800f3a8:	2b02      	cmp	r3, #2
 800f3aa:	d067      	beq.n	800f47c <_ux_device_stack_alternate_setting_set+0x1dc>
                            while (device_framework_length != 0)
 800f3ac:	9b00      	ldr	r3, [sp, #0]
                                device_framework +=  descriptor_length;
 800f3ae:	44d1      	add	r9, sl
                            while (device_framework_length != 0)
 800f3b0:	ebb3 030a 	subs.w	r3, r3, sl
 800f3b4:	9300      	str	r3, [sp, #0]
 800f3b6:	d061      	beq.n	800f47c <_ux_device_stack_alternate_setting_set+0x1dc>
                                descriptor_type =  *(device_framework + 1);
 800f3b8:	f899 3001 	ldrb.w	r3, [r9, #1]
                                descriptor_length =  (ULONG) *device_framework;
 800f3bc:	f899 a000 	ldrb.w	sl, [r9]
                                switch(descriptor_type)
 800f3c0:	2b04      	cmp	r3, #4
 800f3c2:	d05b      	beq.n	800f47c <_ux_device_stack_alternate_setting_set+0x1dc>
 800f3c4:	2b05      	cmp	r3, #5
 800f3c6:	d1ef      	bne.n	800f3a8 <_ux_device_stack_alternate_setting_set+0x108>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 800f3c8:	e9d6 4330 	ldrd	r4, r3, [r6, #192]	; 0xc0
                                    while (endpoints_pool_number != 0)
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d041      	beq.n	800f454 <_ux_device_stack_alternate_setting_set+0x1b4>
 800f3d0:	9f00      	ldr	r7, [sp, #0]
 800f3d2:	e003      	b.n	800f3dc <_ux_device_stack_alternate_setting_set+0x13c>
 800f3d4:	3b01      	subs	r3, #1
                                        endpoint++;
 800f3d6:	f104 0468 	add.w	r4, r4, #104	; 0x68
                                    while (endpoints_pool_number != 0)
 800f3da:	d03b      	beq.n	800f454 <_ux_device_stack_alternate_setting_set+0x1b4>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 800f3dc:	6822      	ldr	r2, [r4, #0]
 800f3de:	2a00      	cmp	r2, #0
 800f3e0:	d1f8      	bne.n	800f3d4 <_ux_device_stack_alternate_setting_set+0x134>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800f3e2:	4623      	mov	r3, r4
 800f3e4:	9700      	str	r7, [sp, #0]
 800f3e6:	2701      	movs	r7, #1
                                    _ux_utility_descriptor_parse(device_framework,
 800f3e8:	2206      	movs	r2, #6
 800f3ea:	4659      	mov	r1, fp
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 800f3ec:	f843 7b0c 	str.w	r7, [r3], #12
                                    _ux_utility_descriptor_parse(device_framework,
 800f3f0:	4648      	mov	r0, r9
 800f3f2:	f001 f81f 	bl	8010434 <_ux_utility_descriptor_parse>
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800f3f6:	f8d8 3000 	ldr.w	r3, [r8]
 800f3fa:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 800f3fe:	8a23      	ldrh	r3, [r4, #16]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800f400:	2902      	cmp	r1, #2
                                    max_transfer_length =
 800f402:	f3c3 020a 	ubfx	r2, r3, #0, #11
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800f406:	d02f      	beq.n	800f468 <_ux_device_stack_alternate_setting_set+0x1c8>
                                    endpoint -> ux_slave_endpoint_device =  device;
 800f408:	9b01      	ldr	r3, [sp, #4]
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 800f40a:	6422      	str	r2, [r4, #64]	; 0x40
                                    endpoint -> ux_slave_endpoint_device =  device;
 800f40c:	61e3      	str	r3, [r4, #28]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800f40e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800f412:	4622      	mov	r2, r4
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 800f414:	6563      	str	r3, [r4, #84]	; 0x54
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800f416:	210e      	movs	r1, #14
 800f418:	4630      	mov	r0, r6
 800f41a:	69b3      	ldr	r3, [r6, #24]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 800f41c:	62a4      	str	r4, [r4, #40]	; 0x28
                                    endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 800f41e:	61a5      	str	r5, [r4, #24]
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 800f420:	4798      	blx	r3
                                    if (status != UX_SUCCESS)
 800f422:	2800      	cmp	r0, #0
 800f424:	d144      	bne.n	800f4b0 <_ux_device_stack_alternate_setting_set+0x210>
                                    if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 800f426:	69eb      	ldr	r3, [r5, #28]
 800f428:	b9b3      	cbnz	r3, 800f458 <_ux_device_stack_alternate_setting_set+0x1b8>
                                        interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 800f42a:	61ec      	str	r4, [r5, #28]
 800f42c:	e7be      	b.n	800f3ac <_ux_device_stack_alternate_setting_set+0x10c>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 800f42e:	20ff      	movs	r0, #255	; 0xff
#endif
}
 800f430:	b015      	add	sp, #84	; 0x54
 800f432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(UX_FUNCTION_NOT_SUPPORTED);
 800f436:	2054      	movs	r0, #84	; 0x54
}
 800f438:	b015      	add	sp, #84	; 0x54
 800f43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return(UX_SUCCESS);       
 800f43e:	2000      	movs	r0, #0
}
 800f440:	b015      	add	sp, #84	; 0x54
 800f442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 800f446:	2002      	movs	r0, #2
 800f448:	2252      	movs	r2, #82	; 0x52
 800f44a:	2107      	movs	r1, #7
 800f44c:	f000 ff76 	bl	801033c <_ux_system_error_handler>
        return(UX_INTERFACE_HANDLE_UNKNOWN);
 800f450:	2052      	movs	r0, #82	; 0x52
 800f452:	e7ed      	b.n	800f430 <_ux_device_stack_alternate_setting_set+0x190>
                                        return(UX_MEMORY_INSUFFICIENT);
 800f454:	2012      	movs	r0, #18
 800f456:	e7eb      	b.n	800f430 <_ux_device_stack_alternate_setting_set+0x190>
 800f458:	9f00      	ldr	r7, [sp, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 800f45a:	461a      	mov	r2, r3
 800f45c:	695b      	ldr	r3, [r3, #20]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1fb      	bne.n	800f45a <_ux_device_stack_alternate_setting_set+0x1ba>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 800f462:	9700      	str	r7, [sp, #0]
 800f464:	6154      	str	r4, [r2, #20]
 800f466:	e7a1      	b.n	800f3ac <_ux_device_stack_alternate_setting_set+0x10c>
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 800f468:	7be1      	ldrb	r1, [r4, #15]
 800f46a:	07c9      	lsls	r1, r1, #31
 800f46c:	d5cc      	bpl.n	800f408 <_ux_device_stack_alternate_setting_set+0x168>
                                        if (n_trans)
 800f46e:	f413 53c0 	ands.w	r3, r3, #6144	; 0x1800
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 800f472:	bf1c      	itt	ne
 800f474:	0adb      	lsrne	r3, r3, #11
                                            max_transfer_length *= n_trans;
 800f476:	fb03 2202 	mlane	r2, r3, r2, r2
 800f47a:	e7c5      	b.n	800f408 <_ux_device_stack_alternate_setting_set+0x168>
                            _ux_utility_memory_copy(&interface_ptr -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 800f47c:	220c      	movs	r2, #12
 800f47e:	a906      	add	r1, sp, #24
 800f480:	18a8      	adds	r0, r5, r2
 800f482:	f001 f90b 	bl	801069c <_ux_utility_memory_copy>
                            class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 800f486:	f8d8 3000 	ldr.w	r3, [r8]
 800f48a:	7baa      	ldrb	r2, [r5, #14]
 800f48c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f490:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
                            if (class_ptr == UX_NULL || class_ptr -> ux_slave_class_status == UX_UNUSED)
 800f494:	b153      	cbz	r3, 800f4ac <_ux_device_stack_alternate_setting_set+0x20c>
 800f496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f498:	b142      	cbz	r2, 800f4ac <_ux_device_stack_alternate_setting_set+0x20c>
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800f49a:	2106      	movs	r1, #6
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800f49c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
                            class_command.ux_slave_class_command_interface =   (VOID *) interface_ptr;
 800f49e:	950b      	str	r5, [sp, #44]	; 0x2c
                            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800f4a0:	9311      	str	r3, [sp, #68]	; 0x44
                            class_ptr -> ux_slave_class_interface = interface_ptr;
 800f4a2:	661d      	str	r5, [r3, #96]	; 0x60
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800f4a4:	a809      	add	r0, sp, #36	; 0x24
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 800f4a6:	9109      	str	r1, [sp, #36]	; 0x24
                            status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800f4a8:	4790      	blx	r2
                            return(status); 
 800f4aa:	e7c1      	b.n	800f430 <_ux_device_stack_alternate_setting_set+0x190>
                                return (UX_NO_CLASS_MATCH);
 800f4ac:	2057      	movs	r0, #87	; 0x57
 800f4ae:	e7bf      	b.n	800f430 <_ux_device_stack_alternate_setting_set+0x190>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	6023      	str	r3, [r4, #0]
                                        return(status);
 800f4b4:	e7bc      	b.n	800f430 <_ux_device_stack_alternate_setting_set+0x190>
 800f4b6:	bf00      	nop
 800f4b8:	200001ec 	.word	0x200001ec
 800f4bc:	2000020c 	.word	0x2000020c
 800f4c0:	2000ae38 	.word	0x2000ae38
 800f4c4:	20000204 	.word	0x20000204

0800f4c8 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 800f4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 800f4cc:	2400      	movs	r4, #0
{
 800f4ce:	b08c      	sub	sp, #48	; 0x30
 800f4d0:	460d      	mov	r5, r1
 800f4d2:	4617      	mov	r7, r2
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800f4d4:	4669      	mov	r1, sp
 800f4d6:	223f      	movs	r2, #63	; 0x3f
{
 800f4d8:	4680      	mov	r8, r0
 800f4da:	461e      	mov	r6, r3
UINT                        class_name_length =  0;
 800f4dc:	9400      	str	r4, [sp, #0]
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 800f4de:	f001 f915 	bl	801070c <_ux_utility_string_length_check>
    if (status)
 800f4e2:	b9f8      	cbnz	r0, 800f524 <_ux_device_stack_class_register+0x5c>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800f4e4:	4b15      	ldr	r3, [pc, #84]	; (800f53c <_ux_device_stack_class_register+0x74>)
 800f4e6:	681a      	ldr	r2, [r3, #0]
 800f4e8:	e9d2 343f 	ldrd	r3, r4, [r2, #252]	; 0xfc

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f4ec:	b923      	cbnz	r3, 800f4f8 <_ux_device_stack_class_register+0x30>
 800f4ee:	e01c      	b.n	800f52a <_ux_device_stack_class_register+0x62>
 800f4f0:	4298      	cmp	r0, r3
            return(UX_SUCCESS);
        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
        /* Move to the next class.  */
        class_inst ++;
 800f4f2:	f104 0464 	add.w	r4, r4, #100	; 0x64
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f4f6:	d018      	beq.n	800f52a <_ux_device_stack_class_register+0x62>
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800f4f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f4fa:	3001      	adds	r0, #1
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 800f4fc:	2a00      	cmp	r2, #0
 800f4fe:	d1f7      	bne.n	800f4f0 <_ux_device_stack_class_register+0x28>
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 800f500:	9a00      	ldr	r2, [sp, #0]
 800f502:	4620      	mov	r0, r4
 800f504:	3201      	adds	r2, #1
 800f506:	4641      	mov	r1, r8
 800f508:	f001 f8c8 	bl	801069c <_ux_utility_memory_copy>
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800f50c:	2305      	movs	r3, #5
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800f50e:	9a12      	ldr	r2, [sp, #72]	; 0x48
            class_inst -> ux_slave_class_interface_number =  interface_number;
 800f510:	e9c4 6716 	strd	r6, r7, [r4, #88]	; 0x58
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 800f514:	6465      	str	r5, [r4, #68]	; 0x44
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 800f516:	6562      	str	r2, [r4, #84]	; 0x54
            status = class_entry_function(&command);
 800f518:	a801      	add	r0, sp, #4
            command.ux_slave_class_command_class_ptr  =  class_inst;
 800f51a:	e9cd 4209 	strd	r4, r2, [sp, #36]	; 0x24
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 800f51e:	9301      	str	r3, [sp, #4]
            status = class_entry_function(&command);
 800f520:	47a8      	blx	r5
            if (status != UX_SUCCESS)
 800f522:	b130      	cbz	r0, 800f532 <_ux_device_stack_class_register+0x6a>
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
}
 800f524:	b00c      	add	sp, #48	; 0x30
 800f526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return(UX_MEMORY_INSUFFICIENT);
 800f52a:	2012      	movs	r0, #18
}
 800f52c:	b00c      	add	sp, #48	; 0x30
 800f52e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            class_inst -> ux_slave_class_status = UX_USED;
 800f532:	2301      	movs	r3, #1
 800f534:	6423      	str	r3, [r4, #64]	; 0x40
}
 800f536:	b00c      	add	sp, #48	; 0x30
 800f538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f53c:	2000ae38 	.word	0x2000ae38

0800f540 <_ux_device_stack_clear_feature>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 800f540:	b538      	push	{r3, r4, r5, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f542:	4b19      	ldr	r3, [pc, #100]	; (800f5a8 <_ux_device_stack_clear_feature+0x68>)

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800f544:	f010 0003 	ands.w	r0, r0, #3
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f548:	681d      	ldr	r5, [r3, #0]
    switch (request_type & UX_REQUEST_TARGET)
 800f54a:	d009      	beq.n	800f560 <_ux_device_stack_clear_feature+0x20>
 800f54c:	2802      	cmp	r0, #2
 800f54e:	d00f      	beq.n	800f570 <_ux_device_stack_clear_feature+0x30>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800f550:	2114      	movs	r1, #20
 800f552:	4628      	mov	r0, r5
 800f554:	69ab      	ldr	r3, [r5, #24]
 800f556:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 800f55a:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 800f55c:	2000      	movs	r0, #0
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
}
 800f55e:	bd38      	pop	{r3, r4, r5, pc}
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 800f560:	2901      	cmp	r1, #1
 800f562:	d1fc      	bne.n	800f55e <_ux_device_stack_clear_feature+0x1e>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 800f564:	f8d5 314c 	ldr.w	r3, [r5, #332]	; 0x14c
 800f568:	b1db      	cbz	r3, 800f5a2 <_ux_device_stack_clear_feature+0x62>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 800f56a:	f8c5 0150 	str.w	r0, [r5, #336]	; 0x150
}
 800f56e:	bd38      	pop	{r3, r4, r5, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 800f570:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
        while (interface_ptr != UX_NULL)
 800f574:	2900      	cmp	r1, #0
 800f576:	d0eb      	beq.n	800f550 <_ux_device_stack_clear_feature+0x10>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 800f578:	69cc      	ldr	r4, [r1, #28]
            while (endpoint_target != UX_NULL)
 800f57a:	b914      	cbnz	r4, 800f582 <_ux_device_stack_clear_feature+0x42>
 800f57c:	e00d      	b.n	800f59a <_ux_device_stack_clear_feature+0x5a>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 800f57e:	6964      	ldr	r4, [r4, #20]
            while (endpoint_target != UX_NULL)
 800f580:	b15c      	cbz	r4, 800f59a <_ux_device_stack_clear_feature+0x5a>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 800f582:	7ba3      	ldrb	r3, [r4, #14]
 800f584:	4293      	cmp	r3, r2
 800f586:	d1fa      	bne.n	800f57e <_ux_device_stack_clear_feature+0x3e>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 800f588:	69ab      	ldr	r3, [r5, #24]
 800f58a:	4622      	mov	r2, r4
 800f58c:	2110      	movs	r1, #16
 800f58e:	4628      	mov	r0, r5
 800f590:	4798      	blx	r3
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800f592:	2300      	movs	r3, #0
                    return(UX_SUCCESS);
 800f594:	4618      	mov	r0, r3
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 800f596:	6063      	str	r3, [r4, #4]
}
 800f598:	bd38      	pop	{r3, r4, r5, pc}
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 800f59a:	6989      	ldr	r1, [r1, #24]
        while (interface_ptr != UX_NULL)
 800f59c:	2900      	cmp	r1, #0
 800f59e:	d1eb      	bne.n	800f578 <_ux_device_stack_clear_feature+0x38>
 800f5a0:	e7d6      	b.n	800f550 <_ux_device_stack_clear_feature+0x10>
                return (UX_FUNCTION_NOT_SUPPORTED);
 800f5a2:	2054      	movs	r0, #84	; 0x54
}
 800f5a4:	bd38      	pop	{r3, r4, r5, pc}
 800f5a6:	bf00      	nop
 800f5a8:	2000ae38 	.word	0x2000ae38

0800f5ac <_ux_device_stack_configuration_get>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f5ac:	2103      	movs	r1, #3

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800f5ae:	2201      	movs	r2, #1
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f5b0:	4b07      	ldr	r3, [pc, #28]	; (800f5d0 <_ux_device_stack_configuration_get+0x24>)
{
 800f5b2:	b410      	push	{r4}
    device =  &_ux_system_slave -> ux_system_slave_device;
 800f5b4:	681b      	ldr	r3, [r3, #0]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 800f5b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
                (UCHAR) device -> ux_slave_device_configuration_selected;
 800f5b8:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 800f5bc:	7004      	strb	r4, [r0, #0]

    /* Return the function status.  */
    return(status);
}
 800f5be:	f85d 4b04 	ldr.w	r4, [sp], #4
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f5c2:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 800f5c6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800f5ca:	4611      	mov	r1, r2
 800f5cc:	f000 be44 	b.w	8010258 <_ux_device_stack_transfer_request>
 800f5d0:	2000ae38 	.word	0x2000ae38

0800f5d4 <_ux_device_stack_configuration_set>:
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800f5d4:	2300      	movs	r3, #0
{
 800f5d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f5da:	f8df a23c 	ldr.w	sl, [pc, #572]	; 800f818 <_ux_device_stack_configuration_set+0x244>
{
 800f5de:	b097      	sub	sp, #92	; 0x5c
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f5e0:	f8da 7000 	ldr.w	r7, [sl]
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800f5e4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800f5e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 800f5ec:	9307      	str	r3, [sp, #28]
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 800f5ee:	4282      	cmp	r2, r0
 800f5f0:	f000 809d 	beq.w	800f72e <_ux_device_stack_configuration_set+0x15a>
        return(UX_SUCCESS);

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 800f5f4:	e9d7 4633 	ldrd	r4, r6, [r7, #204]	; 0xcc

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 800f5f8:	4680      	mov	r8, r0
 800f5fa:	2e00      	cmp	r6, #0
 800f5fc:	f000 8086 	beq.w	800f70c <_ux_device_stack_configuration_set+0x138>

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 800f600:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800f810 <_ux_device_stack_configuration_set+0x23c>
 800f604:	e002      	b.n	800f60c <_ux_device_stack_configuration_set+0x38>
    while (device_framework_length != 0)
 800f606:	1b76      	subs	r6, r6, r5
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 800f608:	442c      	add	r4, r5
    while (device_framework_length != 0)
 800f60a:	d07f      	beq.n	800f70c <_ux_device_stack_configuration_set+0x138>
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800f60c:	7863      	ldrb	r3, [r4, #1]
        descriptor_length =  (ULONG) *device_framework;
 800f60e:	7825      	ldrb	r5, [r4, #0]
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800f610:	2b02      	cmp	r3, #2
 800f612:	d1f8      	bne.n	800f606 <_ux_device_stack_configuration_set+0x32>
            _ux_utility_descriptor_parse(device_framework,
 800f614:	ab05      	add	r3, sp, #20
 800f616:	4620      	mov	r0, r4
 800f618:	2208      	movs	r2, #8
 800f61a:	4649      	mov	r1, r9
 800f61c:	f000 ff0a 	bl	8010434 <_ux_utility_descriptor_parse>
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 800f620:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f624:	4543      	cmp	r3, r8
 800f626:	d1ee      	bne.n	800f606 <_ux_device_stack_configuration_set+0x32>
    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
        return(UX_ERROR);

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 800f628:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f040 8083 	bne.w	800f738 <_ux_device_stack_configuration_set+0x164>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 800f632:	2500      	movs	r5, #0

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800f634:	2201      	movs	r2, #1

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800f636:	2113      	movs	r1, #19
 800f638:	4638      	mov	r0, r7
 800f63a:	69bb      	ldr	r3, [r7, #24]
    device -> ux_slave_device_configuration_selected =  0;
 800f63c:	f8c7 50a4 	str.w	r5, [r7, #164]	; 0xa4
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800f640:	627a      	str	r2, [r7, #36]	; 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800f642:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 800f644:	f1b8 0f00 	cmp.w	r8, #0
 800f648:	d071      	beq.n	800f72e <_ux_device_stack_configuration_set+0x15a>
    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;

    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
 800f64a:	4971      	ldr	r1, [pc, #452]	; (800f810 <_ux_device_stack_configuration_set+0x23c>)
 800f64c:	2208      	movs	r2, #8
 800f64e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800f652:	4620      	mov	r0, r4
    device -> ux_slave_device_configuration_selected =  configuration_value;
 800f654:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
    _ux_utility_descriptor_parse(device_framework,
 800f658:	f000 feec 	bl	8010434 <_ux_utility_descriptor_parse>
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800f65c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800f660:	f8da 2000 	ldr.w	r2, [sl]
 800f664:	f013 0f40 	tst.w	r3, #64	; 0x40
 800f668:	bf14      	ite	ne
 800f66a:	2102      	movne	r1, #2
 800f66c:	2101      	moveq	r1, #1

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 800f66e:	f8bd 6016 	ldrh.w	r6, [sp, #22]
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 800f672:	f3c3 1340 	ubfx	r3, r3, #5, #1
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 800f676:	e9c2 1352 	strd	r1, r3, [r2, #328]	; 0x148

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 800f67a:	b1be      	cbz	r6, 800f6ac <_ux_device_stack_configuration_set+0xd8>
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800f67c:	e9cd 8501 	strd	r8, r5, [sp, #4]
ULONG                           iad_number_interfaces =  0;
 800f680:	46ab      	mov	fp, r5
    iad_flag =  UX_FALSE;
 800f682:	46a9      	mov	r9, r5
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 800f684:	46a8      	mov	r8, r5
 800f686:	e004      	b.n	800f692 <_ux_device_stack_configuration_set+0xbe>
            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 800f688:	2b04      	cmp	r3, #4
 800f68a:	d01a      	beq.n	800f6c2 <_ux_device_stack_configuration_set+0xee>
    while (device_framework_length != 0)
 800f68c:	1b76      	subs	r6, r6, r5

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 800f68e:	442c      	add	r4, r5
    while (device_framework_length != 0)
 800f690:	d00c      	beq.n	800f6ac <_ux_device_stack_configuration_set+0xd8>
        descriptor_type =  *(device_framework + 1);
 800f692:	7863      	ldrb	r3, [r4, #1]
        descriptor_length =  (ULONG) *device_framework;
 800f694:	7825      	ldrb	r5, [r4, #0]
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 800f696:	2b0b      	cmp	r3, #11
 800f698:	d1f6      	bne.n	800f688 <_ux_device_stack_configuration_set+0xb4>
    while (device_framework_length != 0)
 800f69a:	1b76      	subs	r6, r6, r5
            iad_first_interface = (ULONG)  *(device_framework + 2);
 800f69c:	f894 8002 	ldrb.w	r8, [r4, #2]
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 800f6a0:	f894 b003 	ldrb.w	fp, [r4, #3]
            iad_flag = UX_TRUE;
 800f6a4:	f04f 0901 	mov.w	r9, #1
        device_framework +=  descriptor_length;
 800f6a8:	442c      	add	r4, r5
    while (device_framework_length != 0)
 800f6aa:	d1f2      	bne.n	800f692 <_ux_device_stack_configuration_set+0xbe>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800f6ac:	2203      	movs	r2, #3

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);

    /* Configuration mounted. */
    return(UX_SUCCESS);
 800f6ae:	2500      	movs	r5, #0
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800f6b0:	2113      	movs	r1, #19
 800f6b2:	4638      	mov	r0, r7
 800f6b4:	69bb      	ldr	r3, [r7, #24]
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 800f6b6:	627a      	str	r2, [r7, #36]	; 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 800f6b8:	4798      	blx	r3
}
 800f6ba:	4628      	mov	r0, r5
 800f6bc:	b017      	add	sp, #92	; 0x5c
 800f6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            _ux_utility_descriptor_parse(device_framework,
 800f6c2:	ab08      	add	r3, sp, #32
 800f6c4:	2209      	movs	r2, #9
 800f6c6:	4620      	mov	r0, r4
 800f6c8:	4952      	ldr	r1, [pc, #328]	; (800f814 <_ux_device_stack_configuration_set+0x240>)
 800f6ca:	f000 feb3 	bl	8010434 <_ux_utility_descriptor_parse>
            if (interface_descriptor.bAlternateSetting == 0)
 800f6ce:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1da      	bne.n	800f68c <_ux_device_stack_configuration_set+0xb8>
                if (iad_flag == UX_TRUE)
 800f6d6:	f1b9 0f00 	cmp.w	r9, #0
 800f6da:	d050      	beq.n	800f77e <_ux_device_stack_configuration_set+0x1aa>
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 800f6dc:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
 800f6e0:	4540      	cmp	r0, r8
 800f6e2:	d071      	beq.n	800f7c8 <_ux_device_stack_configuration_set+0x1f4>
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 800f6e4:	f8da 3000 	ldr.w	r3, [sl]
 800f6e8:	9a02      	ldr	r2, [sp, #8]
 800f6ea:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800f6ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
                    if (iad_number_interfaces == 0)
 800f6f2:	f1bb 0b01 	subs.w	fp, fp, #1
 800f6f6:	bf14      	ite	ne
 800f6f8:	f04f 0901 	movne.w	r9, #1
 800f6fc:	f04f 0900 	moveq.w	r9, #0
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 800f700:	2200      	movs	r2, #0
 800f702:	4631      	mov	r1, r6
 800f704:	4620      	mov	r0, r4
 800f706:	f000 fc65 	bl	800ffd4 <_ux_device_stack_interface_set>
 800f70a:	e7bf      	b.n	800f68c <_ux_device_stack_configuration_set+0xb8>
    if (device_framework_length == 0 && configuration_value != 0)
 800f70c:	f1b8 0f00 	cmp.w	r8, #0
 800f710:	d158      	bne.n	800f7c4 <_ux_device_stack_configuration_set+0x1f0>
    if (device -> ux_slave_device_configuration_selected)
 800f712:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
 800f716:	b345      	cbz	r5, 800f76a <_ux_device_stack_configuration_set+0x196>
        interface_ptr =  device -> ux_slave_device_first_interface;
 800f718:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
        while (interface_ptr != UX_NULL)
 800f71c:	b98d      	cbnz	r5, 800f742 <_ux_device_stack_configuration_set+0x16e>
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800f71e:	2201      	movs	r2, #1
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800f720:	2113      	movs	r1, #19
 800f722:	4638      	mov	r0, r7
 800f724:	69bb      	ldr	r3, [r7, #24]
    device -> ux_slave_device_configuration_selected =  0;
 800f726:	f8c7 80a4 	str.w	r8, [r7, #164]	; 0xa4
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800f72a:	627a      	str	r2, [r7, #36]	; 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800f72c:	4798      	blx	r3
        return(UX_SUCCESS);
 800f72e:	2500      	movs	r5, #0
}
 800f730:	4628      	mov	r0, r5
 800f732:	b017      	add	sp, #92	; 0x5c
 800f734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 800f738:	f8d7 50b4 	ldr.w	r5, [r7, #180]	; 0xb4
        while (interface_ptr != UX_NULL)
 800f73c:	2d00      	cmp	r5, #0
 800f73e:	f43f af78 	beq.w	800f632 <_ux_device_stack_configuration_set+0x5e>
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800f742:	f04f 0903 	mov.w	r9, #3
 800f746:	e000      	b.n	800f74a <_ux_device_stack_configuration_set+0x176>
 800f748:	4635      	mov	r5, r6
            class_inst =  interface_ptr -> ux_slave_interface_class;
 800f74a:	686b      	ldr	r3, [r5, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800f74c:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800f750:	950d      	str	r5, [sp, #52]	; 0x34
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 800f752:	9313      	str	r3, [sp, #76]	; 0x4c
            if (class_inst != UX_NULL)
 800f754:	b113      	cbz	r3, 800f75c <_ux_device_stack_configuration_set+0x188>
                class_inst -> ux_slave_class_entry_function(&class_command);
 800f756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f758:	a80b      	add	r0, sp, #44	; 0x2c
 800f75a:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800f75c:	69ae      	ldr	r6, [r5, #24]
            _ux_device_stack_interface_delete(interface_ptr);
 800f75e:	4628      	mov	r0, r5
 800f760:	f000 fc10 	bl	800ff84 <_ux_device_stack_interface_delete>
        while (interface_ptr != UX_NULL)
 800f764:	2e00      	cmp	r6, #0
 800f766:	d1ef      	bne.n	800f748 <_ux_device_stack_configuration_set+0x174>
 800f768:	e763      	b.n	800f632 <_ux_device_stack_configuration_set+0x5e>
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800f76a:	2201      	movs	r2, #1
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800f76c:	2113      	movs	r1, #19
 800f76e:	4638      	mov	r0, r7
 800f770:	69bb      	ldr	r3, [r7, #24]
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800f772:	627a      	str	r2, [r7, #36]	; 0x24
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 800f774:	4798      	blx	r3
}
 800f776:	4628      	mov	r0, r5
 800f778:	b017      	add	sp, #92	; 0x5c
 800f77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800f77e:	f8da 1000 	ldr.w	r1, [sl]
 800f782:	e9d1 033f 	ldrd	r0, r3, [r1, #252]	; 0xfc
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f786:	2800      	cmp	r0, #0
 800f788:	d040      	beq.n	800f80c <_ux_device_stack_configuration_set+0x238>
 800f78a:	464a      	mov	r2, r9
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800f78c:	468e      	mov	lr, r1
 800f78e:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
 800f792:	9403      	str	r4, [sp, #12]
 800f794:	e003      	b.n	800f79e <_ux_device_stack_configuration_set+0x1ca>
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f796:	4282      	cmp	r2, r0
                        class_inst ++;
 800f798:	f103 0364 	add.w	r3, r3, #100	; 0x64
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f79c:	d010      	beq.n	800f7c0 <_ux_device_stack_configuration_set+0x1ec>
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800f79e:	6c19      	ldr	r1, [r3, #64]	; 0x40
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f7a0:	3201      	adds	r2, #1
                        if (class_inst -> ux_slave_class_status == UX_USED)
 800f7a2:	2901      	cmp	r1, #1
 800f7a4:	d1f7      	bne.n	800f796 <_ux_device_stack_configuration_set+0x1c2>
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800f7a6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800f7a8:	458c      	cmp	ip, r1
 800f7aa:	d1f4      	bne.n	800f796 <_ux_device_stack_configuration_set+0x1c2>
 800f7ac:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800f7ae:	9c01      	ldr	r4, [sp, #4]
 800f7b0:	42a1      	cmp	r1, r4
 800f7b2:	d1f0      	bne.n	800f796 <_ux_device_stack_configuration_set+0x1c2>
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800f7b4:	eb0e 0c8c 	add.w	ip, lr, ip, lsl #2
 800f7b8:	9c03      	ldr	r4, [sp, #12]
 800f7ba:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
                                break;
 800f7be:	e79f      	b.n	800f700 <_ux_device_stack_configuration_set+0x12c>
 800f7c0:	9c03      	ldr	r4, [sp, #12]
 800f7c2:	e79d      	b.n	800f700 <_ux_device_stack_configuration_set+0x12c>
        return(UX_ERROR);
 800f7c4:	25ff      	movs	r5, #255	; 0xff
 800f7c6:	e7b3      	b.n	800f730 <_ux_device_stack_configuration_set+0x15c>
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 800f7c8:	f8da 1000 	ldr.w	r1, [sl]
 800f7cc:	e9d1 c23f 	ldrd	ip, r2, [r1, #252]	; 0xfc
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f7d0:	f1bc 0f00 	cmp.w	ip, #0
 800f7d4:	d08d      	beq.n	800f6f2 <_ux_device_stack_configuration_set+0x11e>
 800f7d6:	468e      	mov	lr, r1
 800f7d8:	46a1      	mov	r9, r4
 800f7da:	e003      	b.n	800f7e4 <_ux_device_stack_configuration_set+0x210>
 800f7dc:	4563      	cmp	r3, ip
                            class_inst ++;
 800f7de:	f102 0264 	add.w	r2, r2, #100	; 0x64
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f7e2:	d011      	beq.n	800f808 <_ux_device_stack_configuration_set+0x234>
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800f7e4:	6c11      	ldr	r1, [r2, #64]	; 0x40
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f7e6:	3301      	adds	r3, #1
                            if (class_inst -> ux_slave_class_status == UX_USED)
 800f7e8:	2901      	cmp	r1, #1
 800f7ea:	d1f7      	bne.n	800f7dc <_ux_device_stack_configuration_set+0x208>
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 800f7ec:	6d91      	ldr	r1, [r2, #88]	; 0x58
 800f7ee:	4288      	cmp	r0, r1
 800f7f0:	d1f4      	bne.n	800f7dc <_ux_device_stack_configuration_set+0x208>
 800f7f2:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 800f7f4:	9c01      	ldr	r4, [sp, #4]
 800f7f6:	42a1      	cmp	r1, r4
 800f7f8:	d1f0      	bne.n	800f7dc <_ux_device_stack_configuration_set+0x208>
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 800f7fa:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 800f7fe:	464c      	mov	r4, r9
 800f800:	f8c0 2104 	str.w	r2, [r0, #260]	; 0x104
                                    break;
 800f804:	9202      	str	r2, [sp, #8]
 800f806:	e774      	b.n	800f6f2 <_ux_device_stack_configuration_set+0x11e>
 800f808:	464c      	mov	r4, r9
 800f80a:	e772      	b.n	800f6f2 <_ux_device_stack_configuration_set+0x11e>
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 800f80c:	4681      	mov	r9, r0
 800f80e:	e777      	b.n	800f700 <_ux_device_stack_configuration_set+0x12c>
 800f810:	200001ec 	.word	0x200001ec
 800f814:	2000020c 	.word	0x2000020c
 800f818:	2000ae38 	.word	0x2000ae38

0800f81c <_ux_device_stack_control_request_process>:
/*                                            process with print class,   */
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 800f81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800f820:	6a45      	ldr	r5, [r0, #36]	; 0x24
{
 800f822:	b091      	sub	sp, #68	; 0x44
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 800f824:	b125      	cbz	r5, 800f830 <_ux_device_stack_control_request_process+0x14>
UINT                        status =  UX_ERROR;
 800f826:	25ff      	movs	r5, #255	; 0xff
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
    }

    /* Return the function status.  */
    return(status);
}
 800f828:	4628      	mov	r0, r5
 800f82a:	b011      	add	sp, #68	; 0x44
 800f82c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f830:	4e84      	ldr	r6, [pc, #528]	; (800fa44 <_ux_device_stack_control_request_process+0x228>)
 800f832:	4604      	mov	r4, r0
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 800f834:	f890 a03d 	ldrb.w	sl, [r0, #61]	; 0x3d
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 800f838:	f890 803c 	ldrb.w	r8, [r0, #60]	; 0x3c
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800f83c:	303e      	adds	r0, #62	; 0x3e
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800f83e:	f8d6 b000 	ldr.w	fp, [r6]
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 800f842:	f000 ff61 	bl	8010708 <_ux_utility_short_get>
 800f846:	4681      	mov	r9, r0
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 800f848:	f104 0040 	add.w	r0, r4, #64	; 0x40
 800f84c:	f000 ff5c 	bl	8010708 <_ux_utility_short_get>
 800f850:	4607      	mov	r7, r0
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800f852:	f104 0042 	add.w	r0, r4, #66	; 0x42
 800f856:	f000 ff57 	bl	8010708 <_ux_utility_short_get>
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800f85a:	f1aa 0206 	sub.w	r2, sl, #6
 800f85e:	2a01      	cmp	r2, #1
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 800f860:	4603      	mov	r3, r0
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800f862:	d927      	bls.n	800f8b4 <_ux_device_stack_control_request_process+0x98>
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 800f864:	f008 0260 	and.w	r2, r8, #96	; 0x60
 800f868:	2a40      	cmp	r2, #64	; 0x40
 800f86a:	d05b      	beq.n	800f924 <_ux_device_stack_control_request_process+0x108>
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 800f86c:	2a20      	cmp	r2, #32
 800f86e:	d02a      	beq.n	800f8c6 <_ux_device_stack_control_request_process+0xaa>
        switch (request)
 800f870:	f1ba 0f0c 	cmp.w	sl, #12
 800f874:	f200 8088 	bhi.w	800f988 <_ux_device_stack_control_request_process+0x16c>
 800f878:	a201      	add	r2, pc, #4	; (adr r2, 800f880 <_ux_device_stack_control_request_process+0x64>)
 800f87a:	f852 f02a 	ldr.w	pc, [r2, sl, lsl #2]
 800f87e:	bf00      	nop
 800f880:	0800f9c7 	.word	0x0800f9c7
 800f884:	0800f99d 	.word	0x0800f99d
 800f888:	0800f989 	.word	0x0800f989
 800f88c:	0800f9b5 	.word	0x0800f9b5
 800f890:	0800f989 	.word	0x0800f989
 800f894:	0800f9f7 	.word	0x0800f9f7
 800f898:	0800fa0f 	.word	0x0800fa0f
 800f89c:	0800f989 	.word	0x0800f989
 800f8a0:	0800fa21 	.word	0x0800fa21
 800f8a4:	0800fa2d 	.word	0x0800fa2d
 800f8a8:	0800f9d9 	.word	0x0800f9d9
 800f8ac:	0800f9e7 	.word	0x0800f9e7
 800f8b0:	0800f829 	.word	0x0800f829
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 800f8b4:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800f8b8:	f012 0f60 	tst.w	r2, #96	; 0x60
 800f8bc:	d0d2      	beq.n	800f864 <_ux_device_stack_control_request_process+0x48>
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 800f8be:	f028 0860 	bic.w	r8, r8, #96	; 0x60
            request_type |= UX_REQUEST_TYPE_CLASS;
 800f8c2:	f048 0820 	orr.w	r8, r8, #32
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800f8c6:	6832      	ldr	r2, [r6, #0]
                        if ((request_index & 0xFF) != class_index)
 800f8c8:	b2fb      	uxtb	r3, r7
 800f8ca:	9303      	str	r3, [sp, #12]
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800f8cc:	2304      	movs	r3, #4
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800f8ce:	2700      	movs	r7, #0
UINT                        status =  UX_ERROR;
 800f8d0:	21ff      	movs	r1, #255	; 0xff
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 800f8d2:	9305      	str	r3, [sp, #20]
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800f8d4:	f008 0903 	and.w	r9, r8, #3
 800f8d8:	e00a      	b.n	800f8f0 <_ux_device_stack_control_request_process+0xd4>
                class_command.ux_slave_class_command_class_ptr = class_ptr;
 800f8da:	920d      	str	r2, [sp, #52]	; 0x34
                status = class_ptr -> ux_slave_class_entry_function(&class_command);
 800f8dc:	a805      	add	r0, sp, #20
 800f8de:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800f8e0:	4790      	blx	r2
                if (status == UX_SUCCESS)
 800f8e2:	4601      	mov	r1, r0
 800f8e4:	2800      	cmp	r0, #0
 800f8e6:	d09f      	beq.n	800f828 <_ux_device_stack_control_request_process+0xc>
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800f8e8:	3701      	adds	r7, #1
 800f8ea:	2f10      	cmp	r7, #16
 800f8ec:	d012      	beq.n	800f914 <_ux_device_stack_control_request_process+0xf8>
                class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 800f8ee:	6832      	ldr	r2, [r6, #0]
 800f8f0:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 800f8f4:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
                if (class_ptr == UX_NULL)
 800f8f8:	2a00      	cmp	r2, #0
 800f8fa:	d0f5      	beq.n	800f8e8 <_ux_device_stack_control_request_process+0xcc>
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 800f8fc:	f1b9 0f01 	cmp.w	r9, #1
 800f900:	d1eb      	bne.n	800f8da <_ux_device_stack_control_request_process+0xbe>
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800f902:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 800f906:	d033      	beq.n	800f970 <_ux_device_stack_control_request_process+0x154>
                        if ((request_index & 0xFF) != class_index)
 800f908:	9b03      	ldr	r3, [sp, #12]
 800f90a:	42bb      	cmp	r3, r7
 800f90c:	d0e5      	beq.n	800f8da <_ux_device_stack_control_request_process+0xbe>
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 800f90e:	3701      	adds	r7, #1
 800f910:	2f10      	cmp	r7, #16
 800f912:	d1ec      	bne.n	800f8ee <_ux_device_stack_control_request_process+0xd2>
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800f914:	f10b 003c 	add.w	r0, fp, #60	; 0x3c
 800f918:	9103      	str	r1, [sp, #12]
 800f91a:	f000 f9eb 	bl	800fcf4 <_ux_device_stack_endpoint_stall>
 800f91e:	9903      	ldr	r1, [sp, #12]
 800f920:	460d      	mov	r5, r1
 800f922:	e781      	b.n	800f828 <_ux_device_stack_control_request_process+0xc>
            if (_ux_system_slave -> ux_system_slave_device_vendor_request_function != UX_NULL &&
 800f924:	6832      	ldr	r2, [r6, #0]
 800f926:	f8d2 1170 	ldr.w	r1, [r2, #368]	; 0x170
 800f92a:	468c      	mov	ip, r1
 800f92c:	2900      	cmp	r1, #0
 800f92e:	d0cb      	beq.n	800f8c8 <_ux_device_stack_control_request_process+0xac>
 800f930:	f8d2 116c 	ldr.w	r1, [r2, #364]	; 0x16c
 800f934:	4551      	cmp	r1, sl
 800f936:	d1c7      	bne.n	800f8c8 <_ux_device_stack_control_request_process+0xac>
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800f938:	68e2      	ldr	r2, [r4, #12]
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 800f93a:	f44f 7480 	mov.w	r4, #256	; 0x100
 800f93e:	9405      	str	r4, [sp, #20]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 800f940:	ac05      	add	r4, sp, #20
 800f942:	4649      	mov	r1, r9
 800f944:	9200      	str	r2, [sp, #0]
 800f946:	9401      	str	r4, [sp, #4]
 800f948:	463a      	mov	r2, r7
 800f94a:	4650      	mov	r0, sl
 800f94c:	4664      	mov	r4, ip
 800f94e:	9303      	str	r3, [sp, #12]
 800f950:	47a0      	blx	r4
                if (status == UX_SUCCESS)
 800f952:	4601      	mov	r1, r0
 800f954:	2800      	cmp	r0, #0
 800f956:	d170      	bne.n	800fa3a <_ux_device_stack_control_request_process+0x21e>
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f958:	2403      	movs	r4, #3
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800f95a:	9b03      	ldr	r3, [sp, #12]
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800f95c:	f8cb 4084 	str.w	r4, [fp, #132]	; 0x84
                    return(UX_SUCCESS);
 800f960:	460d      	mov	r5, r1
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 800f962:	461a      	mov	r2, r3
 800f964:	9905      	ldr	r1, [sp, #20]
 800f966:	f10b 005c 	add.w	r0, fp, #92	; 0x5c
 800f96a:	f000 fc75 	bl	8010258 <_ux_device_stack_transfer_request>
                    return(UX_SUCCESS);
 800f96e:	e75b      	b.n	800f828 <_ux_device_stack_control_request_process+0xc>
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800f970:	f1ba 0f00 	cmp.w	sl, #0
 800f974:	d1c8      	bne.n	800f908 <_ux_device_stack_control_request_process+0xec>
                        (class_ptr -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07))
 800f976:	6e10      	ldr	r0, [r2, #96]	; 0x60
                    if ((request_type == 0xA1) && (request == 0x00) &&
 800f978:	7c40      	ldrb	r0, [r0, #17]
 800f97a:	2807      	cmp	r0, #7
 800f97c:	d1c4      	bne.n	800f908 <_ux_device_stack_control_request_process+0xec>
                        if(*(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index)
 800f97e:	f894 0041 	ldrb.w	r0, [r4, #65]	; 0x41
 800f982:	42b8      	cmp	r0, r7
 800f984:	d0a9      	beq.n	800f8da <_ux_device_stack_control_request_process+0xbe>
 800f986:	e7af      	b.n	800f8e8 <_ux_device_stack_control_request_process+0xcc>
        switch (request)
 800f988:	2454      	movs	r4, #84	; 0x54
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800f98a:	4625      	mov	r5, r4
 800f98c:	f10b 003c 	add.w	r0, fp, #60	; 0x3c
 800f990:	f000 f9b0 	bl	800fcf4 <_ux_device_stack_endpoint_stall>
}
 800f994:	4628      	mov	r0, r5
 800f996:	b011      	add	sp, #68	; 0x44
 800f998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 800f99c:	463a      	mov	r2, r7
 800f99e:	4649      	mov	r1, r9
 800f9a0:	4640      	mov	r0, r8
 800f9a2:	f7ff fdcd 	bl	800f540 <_ux_device_stack_clear_feature>
 800f9a6:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800f9a8:	2c00      	cmp	r4, #0
 800f9aa:	d1ee      	bne.n	800f98a <_ux_device_stack_control_request_process+0x16e>
}
 800f9ac:	4628      	mov	r0, r5
 800f9ae:	b011      	add	sp, #68	; 0x44
 800f9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 800f9b4:	463a      	mov	r2, r7
 800f9b6:	4649      	mov	r1, r9
 800f9b8:	4640      	mov	r0, r8
 800f9ba:	f000 fbd5 	bl	8010168 <_ux_device_stack_set_feature>
 800f9be:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800f9c0:	2c00      	cmp	r4, #0
 800f9c2:	d0f3      	beq.n	800f9ac <_ux_device_stack_control_request_process+0x190>
 800f9c4:	e7e1      	b.n	800f98a <_ux_device_stack_control_request_process+0x16e>
            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	4639      	mov	r1, r7
 800f9ca:	4640      	mov	r0, r8
 800f9cc:	f000 f9b8 	bl	800fd40 <_ux_device_stack_get_status>
 800f9d0:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800f9d2:	2c00      	cmp	r4, #0
 800f9d4:	d0ea      	beq.n	800f9ac <_ux_device_stack_control_request_process+0x190>
 800f9d6:	e7d8      	b.n	800f98a <_ux_device_stack_control_request_process+0x16e>
            status =  _ux_device_stack_alternate_setting_get(request_index);
 800f9d8:	4638      	mov	r0, r7
 800f9da:	f7ff fc3d 	bl	800f258 <_ux_device_stack_alternate_setting_get>
 800f9de:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800f9e0:	2c00      	cmp	r4, #0
 800f9e2:	d0e3      	beq.n	800f9ac <_ux_device_stack_control_request_process+0x190>
 800f9e4:	e7d1      	b.n	800f98a <_ux_device_stack_control_request_process+0x16e>
            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	4638      	mov	r0, r7
 800f9ea:	f7ff fc59 	bl	800f2a0 <_ux_device_stack_alternate_setting_set>
 800f9ee:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800f9f0:	2c00      	cmp	r4, #0
 800f9f2:	d0db      	beq.n	800f9ac <_ux_device_stack_control_request_process+0x190>
 800f9f4:	e7c9      	b.n	800f98a <_ux_device_stack_control_request_process+0x16e>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800f9f6:	464a      	mov	r2, r9
 800f9f8:	2111      	movs	r1, #17
 800f9fa:	4658      	mov	r0, fp
 800f9fc:	f8db 3018 	ldr.w	r3, [fp, #24]
            dcd -> ux_slave_dcd_device_address =  request_value;
 800fa00:	f8cb 9014 	str.w	r9, [fp, #20]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 800fa04:	4798      	blx	r3
 800fa06:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800fa08:	2c00      	cmp	r4, #0
 800fa0a:	d0cf      	beq.n	800f9ac <_ux_device_stack_control_request_process+0x190>
 800fa0c:	e7bd      	b.n	800f98a <_ux_device_stack_control_request_process+0x16e>
            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 800fa0e:	461a      	mov	r2, r3
 800fa10:	4639      	mov	r1, r7
 800fa12:	4648      	mov	r0, r9
 800fa14:	f000 f818 	bl	800fa48 <_ux_device_stack_descriptor_send>
 800fa18:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800fa1a:	2c00      	cmp	r4, #0
 800fa1c:	d0c6      	beq.n	800f9ac <_ux_device_stack_control_request_process+0x190>
 800fa1e:	e7b4      	b.n	800f98a <_ux_device_stack_control_request_process+0x16e>
            status =  _ux_device_stack_configuration_get();
 800fa20:	f7ff fdc4 	bl	800f5ac <_ux_device_stack_configuration_get>
 800fa24:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800fa26:	2c00      	cmp	r4, #0
 800fa28:	d0c0      	beq.n	800f9ac <_ux_device_stack_control_request_process+0x190>
 800fa2a:	e7ae      	b.n	800f98a <_ux_device_stack_control_request_process+0x16e>
            status =  _ux_device_stack_configuration_set(request_value);
 800fa2c:	4648      	mov	r0, r9
 800fa2e:	f7ff fdd1 	bl	800f5d4 <_ux_device_stack_configuration_set>
 800fa32:	4604      	mov	r4, r0
        if (status != UX_SUCCESS)
 800fa34:	2c00      	cmp	r4, #0
 800fa36:	d0b9      	beq.n	800f9ac <_ux_device_stack_control_request_process+0x190>
 800fa38:	e7a7      	b.n	800f98a <_ux_device_stack_control_request_process+0x16e>
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 800fa3a:	f10b 003c 	add.w	r0, fp, #60	; 0x3c
 800fa3e:	f000 f959 	bl	800fcf4 <_ux_device_stack_endpoint_stall>
                    return(UX_SUCCESS);
 800fa42:	e6f1      	b.n	800f828 <_ux_device_stack_control_request_process+0xc>
 800fa44:	2000ae38 	.word	0x2000ae38

0800fa48 <_ux_device_stack_descriptor_send>:

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800fa48:	2303      	movs	r3, #3
{
 800fa4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fa4e:	f8df a228 	ldr.w	sl, [pc, #552]	; 800fc78 <_ux_device_stack_descriptor_send+0x230>
{
 800fa52:	4616      	mov	r6, r2
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fa54:	f8da 5000 	ldr.w	r5, [sl]
{
 800fa58:	460c      	mov	r4, r1
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800fa5a:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
 800fa5e:	f3c0 2307 	ubfx	r3, r0, #8, #8

    /* Default descriptor length is host length.  */
    length =  host_length;

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 800fa62:	1e5a      	subs	r2, r3, #1
{
 800fa64:	b087      	sub	sp, #28
    endpoint =  &device -> ux_slave_device_control_endpoint;
 800fa66:	f105 093c 	add.w	r9, r5, #60	; 0x3c
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 800fa6a:	f105 075c 	add.w	r7, r5, #92	; 0x5c
    descriptor_index =  descriptor_type & 0xff;
 800fa6e:	fa5f fb80 	uxtb.w	fp, r0
    switch (descriptor_type)
 800fa72:	2a0e      	cmp	r2, #14
 800fa74:	d809      	bhi.n	800fa8a <_ux_device_stack_descriptor_send+0x42>
 800fa76:	e8df f002 	tbb	[pc, r2]
 800fa7a:	2f11      	.short	0x2f11
 800fa7c:	8008086a 	.word	0x8008086a
 800fa80:	0864082f 	.word	0x0864082f
 800fa84:	08080808 	.word	0x08080808
 800fa88:	2f          	.byte	0x2f
 800fa89:	00          	.byte	0x00
            /* Have we exhausted all the string descriptors?  */
            if (string_framework_length == 0)
            {

                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800fa8a:	464a      	mov	r2, r9
 800fa8c:	2114      	movs	r1, #20
 800fa8e:	4628      	mov	r0, r5
 800fa90:	69ab      	ldr	r3, [r5, #24]
 800fa92:	4798      	blx	r3
                return(UX_ERROR);
 800fa94:	20ff      	movs	r0, #255	; 0xff
        return(UX_ERROR);
    }

    /* Return the status to the caller.  */
    return(status);
}
 800fa96:	b007      	add	sp, #28
 800fa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 800fa9c:	2e12      	cmp	r6, #18
 800fa9e:	46b0      	mov	r8, r6
 800faa0:	bf28      	it	cs
 800faa2:	f04f 0812 	movcs.w	r8, #18
        device_framework_end = device_framework + device_framework_length;
 800faa6:	e9d5 1233 	ldrd	r1, r2, [r5, #204]	; 0xcc
 800faaa:	440a      	add	r2, r1
        while (device_framework < device_framework_end)
 800faac:	4291      	cmp	r1, r2
 800faae:	d303      	bcc.n	800fab8 <_ux_device_stack_descriptor_send+0x70>
 800fab0:	e7f0      	b.n	800fa94 <_ux_device_stack_descriptor_send+0x4c>
            device_framework +=  descriptor_length;
 800fab2:	4421      	add	r1, r4
        while (device_framework < device_framework_end)
 800fab4:	428a      	cmp	r2, r1
 800fab6:	d9ed      	bls.n	800fa94 <_ux_device_stack_descriptor_send+0x4c>
            if (*(device_framework + 1) == descriptor_type)
 800fab8:	7848      	ldrb	r0, [r1, #1]
            descriptor_length =  (ULONG) *device_framework;
 800faba:	780c      	ldrb	r4, [r1, #0]
            if (*(device_framework + 1) == descriptor_type)
 800fabc:	4298      	cmp	r0, r3
 800fabe:	d1f8      	bne.n	800fab2 <_ux_device_stack_descriptor_send+0x6a>
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800fac0:	4642      	mov	r2, r8
 800fac2:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800fac4:	f000 fdea 	bl	801069c <_ux_utility_memory_copy>
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800fac8:	4632      	mov	r2, r6
 800faca:	4641      	mov	r1, r8
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800facc:	4638      	mov	r0, r7
}
 800face:	b007      	add	sp, #28
 800fad0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800fad4:	f000 bbc0 	b.w	8010258 <_ux_device_stack_transfer_request>
        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 800fad8:	2b07      	cmp	r3, #7
 800fada:	ea4f 2810 	mov.w	r8, r0, lsr #8
            device_framework_end = device_framework + device_framework_length;
 800fade:	bf0c      	ite	eq
 800fae0:	e9d5 4035 	ldrdeq	r4, r0, [r5, #212]	; 0xd4
            device_framework_end = device_framework + device_framework_length;
 800fae4:	e9d5 4033 	ldrdne	r4, r0, [r5, #204]	; 0xcc
 800fae8:	4420      	add	r0, r4
        while (device_framework < device_framework_end)
 800faea:	4284      	cmp	r4, r0
 800faec:	bf38      	it	cc
 800faee:	f04f 0c00 	movcc.w	ip, #0
 800faf2:	d305      	bcc.n	800fb00 <_ux_device_stack_descriptor_send+0xb8>
 800faf4:	e7ce      	b.n	800fa94 <_ux_device_stack_descriptor_send+0x4c>
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 800faf6:	2902      	cmp	r1, #2
 800faf8:	d045      	beq.n	800fb86 <_ux_device_stack_descriptor_send+0x13e>
            device_framework +=  descriptor_length;
 800fafa:	4414      	add	r4, r2
        while (device_framework < device_framework_end)
 800fafc:	4284      	cmp	r4, r0
 800fafe:	d2c9      	bcs.n	800fa94 <_ux_device_stack_descriptor_send+0x4c>
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800fb00:	2b0f      	cmp	r3, #15
            descriptor_length =  (ULONG) *device_framework;
 800fb02:	7822      	ldrb	r2, [r4, #0]
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800fb04:	7861      	ldrb	r1, [r4, #1]
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 800fb06:	d1f6      	bne.n	800faf6 <_ux_device_stack_descriptor_send+0xae>
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 800fb08:	290f      	cmp	r1, #15
 800fb0a:	d1f6      	bne.n	800fafa <_ux_device_stack_descriptor_send+0xb2>
                    _ux_utility_descriptor_parse(device_framework,
 800fb0c:	2204      	movs	r2, #4
 800fb0e:	4620      	mov	r0, r4
 800fb10:	4957      	ldr	r1, [pc, #348]	; (800fc70 <_ux_device_stack_descriptor_send+0x228>)
 800fb12:	eb0d 0302 	add.w	r3, sp, r2
 800fb16:	f000 fc8d 	bl	8010434 <_ux_utility_descriptor_parse>
                    target_descriptor_length = bos_descriptor.wTotalLength;
 800fb1a:	f8bd a006 	ldrh.w	sl, [sp, #6]
            if (target_descriptor_length < host_length)
 800fb1e:	45b2      	cmp	sl, r6
 800fb20:	bf28      	it	cs
 800fb22:	46b2      	movcs	sl, r6
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800fb24:	f5ba 7f80 	cmp.w	sl, #256	; 0x100
 800fb28:	f240 8089 	bls.w	800fc3e <_ux_device_stack_descriptor_send+0x1f6>
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800fb2c:	2212      	movs	r2, #18
 800fb2e:	2109      	movs	r1, #9
 800fb30:	2002      	movs	r0, #2
 800fb32:	f000 fc03 	bl	801033c <_ux_system_error_handler>
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800fb36:	464a      	mov	r2, r9
 800fb38:	2114      	movs	r1, #20
 800fb3a:	4628      	mov	r0, r5
 800fb3c:	69ab      	ldr	r3, [r5, #24]
 800fb3e:	4798      	blx	r3
                break;
 800fb40:	e7a9      	b.n	800fa96 <_ux_device_stack_descriptor_send+0x4e>
 800fb42:	2e05      	cmp	r6, #5
 800fb44:	46b0      	mov	r8, r6
 800fb46:	bf28      	it	cs
 800fb48:	f04f 0805 	movcs.w	r8, #5
 800fb4c:	e7ab      	b.n	800faa6 <_ux_device_stack_descriptor_send+0x5e>
        if (descriptor_index == 0)
 800fb4e:	f1bb 0f00 	cmp.w	fp, #0
 800fb52:	d11d      	bne.n	800fb90 <_ux_device_stack_descriptor_send+0x148>
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800fb54:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
 800fb58:	3302      	adds	r3, #2
 800fb5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb5e:	d958      	bls.n	800fc12 <_ux_device_stack_descriptor_send+0x1ca>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 800fb60:	2212      	movs	r2, #18
 800fb62:	2109      	movs	r1, #9
 800fb64:	2002      	movs	r0, #2
 800fb66:	f000 fbe9 	bl	801033c <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800fb6a:	464a      	mov	r2, r9
 800fb6c:	2114      	movs	r1, #20
 800fb6e:	4628      	mov	r0, r5
 800fb70:	69ab      	ldr	r3, [r5, #24]
}
 800fb72:	b007      	add	sp, #28
 800fb74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800fb78:	4718      	bx	r3
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 800fb7a:	2e0a      	cmp	r6, #10
 800fb7c:	46b0      	mov	r8, r6
 800fb7e:	bf28      	it	cs
 800fb80:	f04f 080a 	movcs.w	r8, #10
 800fb84:	e78f      	b.n	800faa6 <_ux_device_stack_descriptor_send+0x5e>
                    if (parsed_descriptor_index == descriptor_index)
 800fb86:	45e3      	cmp	fp, ip
 800fb88:	d067      	beq.n	800fc5a <_ux_device_stack_descriptor_send+0x212>
                        parsed_descriptor_index++;
 800fb8a:	f10c 0c01 	add.w	ip, ip, #1
 800fb8e:	e7b4      	b.n	800fafa <_ux_device_stack_descriptor_send+0xb2>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 800fb90:	e9d5 a839 	ldrd	sl, r8, [r5, #228]	; 0xe4
            while (string_framework_length != 0)
 800fb94:	f1b8 0f00 	cmp.w	r8, #0
 800fb98:	d10c      	bne.n	800fbb4 <_ux_device_stack_descriptor_send+0x16c>
 800fb9a:	e776      	b.n	800fa8a <_ux_device_stack_descriptor_send+0x42>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 800fb9c:	f06f 0103 	mvn.w	r1, #3
 800fba0:	f89a 3003 	ldrb.w	r3, [sl, #3]
 800fba4:	1ac9      	subs	r1, r1, r3
            while (string_framework_length != 0)
 800fba6:	eb18 0801 	adds.w	r8, r8, r1
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 800fbaa:	f103 0304 	add.w	r3, r3, #4
 800fbae:	449a      	add	sl, r3
            while (string_framework_length != 0)
 800fbb0:	f43f af6b 	beq.w	800fa8a <_ux_device_stack_descriptor_send+0x42>
                if (_ux_utility_short_get(string_framework) == request_index)
 800fbb4:	4650      	mov	r0, sl
 800fbb6:	f000 fda7 	bl	8010708 <_ux_utility_short_get>
 800fbba:	42a0      	cmp	r0, r4
 800fbbc:	d1ee      	bne.n	800fb9c <_ux_device_stack_descriptor_send+0x154>
                    if (*(string_framework + 2) == descriptor_index)
 800fbbe:	f89a 3002 	ldrb.w	r3, [sl, #2]
 800fbc2:	455b      	cmp	r3, fp
 800fbc4:	d1ea      	bne.n	800fb9c <_ux_device_stack_descriptor_send+0x154>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 800fbc6:	f89a 3003 	ldrb.w	r3, [sl, #3]
 800fbca:	3301      	adds	r3, #1
 800fbcc:	2b80      	cmp	r3, #128	; 0x80
 800fbce:	ea4f 0243 	mov.w	r2, r3, lsl #1
 800fbd2:	dcc5      	bgt.n	800fb60 <_ux_device_stack_descriptor_send+0x118>
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800fbd4:	2303      	movs	r3, #3
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800fbd6:	6ea8      	ldr	r0, [r5, #104]	; 0x68
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 800fbd8:	7002      	strb	r2, [r0, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 800fbda:	7043      	strb	r3, [r0, #1]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800fbdc:	f89a 3003 	ldrb.w	r3, [sl, #3]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d043      	beq.n	800fc6c <_ux_device_stack_descriptor_send+0x224>
 800fbe4:	2300      	movs	r3, #0
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800fbe6:	461c      	mov	r4, r3
 800fbe8:	f10a 0103 	add.w	r1, sl, #3
 800fbec:	1c45      	adds	r5, r0, #1
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 800fbee:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800fbf2:	3301      	adds	r3, #1
 800fbf4:	f800 2013 	strb.w	r2, [r0, r3, lsl #1]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 800fbf8:	f805 4013 	strb.w	r4, [r5, r3, lsl #1]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800fbfc:	f89a 2003 	ldrb.w	r2, [sl, #3]
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d3f4      	bcc.n	800fbee <_ux_device_stack_descriptor_send+0x1a6>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 800fc04:	3201      	adds	r2, #1
 800fc06:	0051      	lsls	r1, r2, #1
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800fc08:	42b1      	cmp	r1, r6
 800fc0a:	4632      	mov	r2, r6
 800fc0c:	bf28      	it	cs
 800fc0e:	4631      	movcs	r1, r6
 800fc10:	e75c      	b.n	800facc <_ux_device_stack_descriptor_send+0x84>
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 800fc12:	6eaa      	ldr	r2, [r5, #104]	; 0x68
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 800fc14:	7013      	strb	r3, [r2, #0]
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 800fc16:	2303      	movs	r3, #3
 800fc18:	7053      	strb	r3, [r2, #1]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 800fc1a:	f8da 3000 	ldr.w	r3, [sl]
 800fc1e:	1c90      	adds	r0, r2, #2
 800fc20:	e9d3 123b 	ldrd	r1, r2, [r3, #236]	; 0xec
 800fc24:	f000 fd3a 	bl	801069c <_ux_utility_memory_copy>
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800fc28:	f8da 3000 	ldr.w	r3, [sl]
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800fc2c:	4632      	mov	r2, r6
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800fc2e:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800fc32:	4638      	mov	r0, r7
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 800fc34:	3102      	adds	r1, #2
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800fc36:	42b1      	cmp	r1, r6
 800fc38:	bf28      	it	cs
 800fc3a:	4631      	movcs	r1, r6
 800fc3c:	e747      	b.n	800face <_ux_device_stack_descriptor_send+0x86>
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 800fc3e:	4621      	mov	r1, r4
 800fc40:	4652      	mov	r2, sl
 800fc42:	6ea8      	ldr	r0, [r5, #104]	; 0x68
 800fc44:	f000 fd2a 	bl	801069c <_ux_utility_memory_copy>
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 800fc48:	6eab      	ldr	r3, [r5, #104]	; 0x68
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800fc4a:	4632      	mov	r2, r6
 800fc4c:	4651      	mov	r1, sl
 800fc4e:	4638      	mov	r0, r7
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 800fc50:	f883 8001 	strb.w	r8, [r3, #1]
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 800fc54:	f000 fb00 	bl	8010258 <_ux_device_stack_transfer_request>
 800fc58:	e71d      	b.n	800fa96 <_ux_device_stack_descriptor_send+0x4e>
                        _ux_utility_descriptor_parse(device_framework,
 800fc5a:	2208      	movs	r2, #8
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	4905      	ldr	r1, [pc, #20]	; (800fc74 <_ux_device_stack_descriptor_send+0x22c>)
 800fc60:	ab03      	add	r3, sp, #12
 800fc62:	f000 fbe7 	bl	8010434 <_ux_utility_descriptor_parse>
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 800fc66:	f8bd a00e 	ldrh.w	sl, [sp, #14]
        if (status == UX_SUCCESS)
 800fc6a:	e758      	b.n	800fb1e <_ux_device_stack_descriptor_send+0xd6>
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 800fc6c:	2102      	movs	r1, #2
 800fc6e:	e7cb      	b.n	800fc08 <_ux_device_stack_descriptor_send+0x1c0>
 800fc70:	200001e8 	.word	0x200001e8
 800fc74:	200001ec 	.word	0x200001ec
 800fc78:	2000ae38 	.word	0x2000ae38

0800fc7c <_ux_device_stack_disconnect>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 800fc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
UX_SLAVE_CLASS              *class_ptr;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fc80:	f8df 806c 	ldr.w	r8, [pc, #108]	; 800fcf0 <_ux_device_stack_disconnect+0x74>
{
 800fc84:	b08c      	sub	sp, #48	; 0x30
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fc86:	f8d8 6000 	ldr.w	r6, [r8]
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 800fc8a:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800fc8c:	2f03      	cmp	r7, #3
 800fc8e:	d010      	beq.n	800fcb2 <_ux_device_stack_disconnect+0x36>
        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 800fc90:	2f01      	cmp	r7, #1
 800fc92:	d023      	beq.n	800fcdc <_ux_device_stack_disconnect+0x60>
 800fc94:	4632      	mov	r2, r6
UINT                        status = UX_ERROR;
 800fc96:	24ff      	movs	r4, #255	; 0xff
        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
                                (VOID *) &device -> ux_slave_device_control_endpoint);

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 800fc98:	2300      	movs	r3, #0

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800fc9a:	f8d2 2168 	ldr.w	r2, [r2, #360]	; 0x168
    device -> ux_slave_device_configuration_selected =  0;
 800fc9e:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 800fca2:	6273      	str	r3, [r6, #36]	; 0x24
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800fca4:	b10a      	cbz	r2, 800fcaa <_ux_device_stack_disconnect+0x2e>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 800fca6:	200a      	movs	r0, #10
 800fca8:	4790      	blx	r2
    }

    /* Return the status to the caller.  */
    return(status);
}
 800fcaa:	4620      	mov	r0, r4
 800fcac:	b00c      	add	sp, #48	; 0x30
 800fcae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 800fcb2:	f8d6 40b4 	ldr.w	r4, [r6, #180]	; 0xb4
        while (interface_ptr != UX_NULL)
 800fcb6:	b90c      	cbnz	r4, 800fcbc <_ux_device_stack_disconnect+0x40>
 800fcb8:	e00e      	b.n	800fcd8 <_ux_device_stack_disconnect+0x5c>
 800fcba:	462c      	mov	r4, r5
            class_ptr =  interface_ptr -> ux_slave_interface_class;
 800fcbc:	6863      	ldr	r3, [r4, #4]
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 800fcbe:	9701      	str	r7, [sp, #4]
            class_command.ux_slave_class_command_interface =  (VOID *) interface_ptr;
 800fcc0:	9403      	str	r4, [sp, #12]
            class_command.ux_slave_class_command_class_ptr =  class_ptr;
 800fcc2:	9309      	str	r3, [sp, #36]	; 0x24
            if (class_ptr != UX_NULL)
 800fcc4:	b113      	cbz	r3, 800fccc <_ux_device_stack_disconnect+0x50>
                class_ptr -> ux_slave_class_entry_function(&class_command);
 800fcc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcc8:	a801      	add	r0, sp, #4
 800fcca:	4798      	blx	r3
            next_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800fccc:	69a5      	ldr	r5, [r4, #24]
            _ux_device_stack_interface_delete(interface_ptr);
 800fcce:	4620      	mov	r0, r4
 800fcd0:	f000 f958 	bl	800ff84 <_ux_device_stack_interface_delete>
        while (interface_ptr != UX_NULL)
 800fcd4:	2d00      	cmp	r5, #0
 800fcd6:	d1f0      	bne.n	800fcba <_ux_device_stack_disconnect+0x3e>
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 800fcd8:	2301      	movs	r3, #1
 800fcda:	6273      	str	r3, [r6, #36]	; 0x24
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800fcdc:	f106 023c 	add.w	r2, r6, #60	; 0x3c
 800fce0:	210f      	movs	r1, #15
 800fce2:	4630      	mov	r0, r6
 800fce4:	69b3      	ldr	r3, [r6, #24]
 800fce6:	4798      	blx	r3
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 800fce8:	f8d8 2000 	ldr.w	r2, [r8]
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 800fcec:	4604      	mov	r4, r0
 800fcee:	e7d3      	b.n	800fc98 <_ux_device_stack_disconnect+0x1c>
 800fcf0:	2000ae38 	.word	0x2000ae38

0800fcf4 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 800fcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fcf6:	4e11      	ldr	r6, [pc, #68]	; (800fd3c <_ux_device_stack_endpoint_stall+0x48>)
{
 800fcf8:	4604      	mov	r4, r0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fcfa:	6837      	ldr	r7, [r6, #0]
       section where interrupts are disabled.  */
    status =  UX_ERROR;

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 800fcfc:	f7f1 fa34 	bl	8001168 <_ux_utility_interrupt_disable>

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800fd00:	6833      	ldr	r3, [r6, #0]
    UX_DISABLE
 800fd02:	4605      	mov	r5, r0
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 800fd04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd06:	b193      	cbz	r3, 800fd2e <_ux_device_stack_endpoint_stall+0x3a>
 800fd08:	6863      	ldr	r3, [r4, #4]
 800fd0a:	2b02      	cmp	r3, #2
 800fd0c:	d00f      	beq.n	800fd2e <_ux_device_stack_endpoint_stall+0x3a>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	4622      	mov	r2, r4
 800fd12:	2114      	movs	r1, #20
 800fd14:	4638      	mov	r0, r7
 800fd16:	4798      	blx	r3

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800fd18:	7be3      	ldrb	r3, [r4, #15]
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800fd1a:	4606      	mov	r6, r0
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 800fd1c:	079b      	lsls	r3, r3, #30
 800fd1e:	d001      	beq.n	800fd24 <_ux_device_stack_endpoint_stall+0x30>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 800fd20:	2302      	movs	r3, #2
 800fd22:	6063      	str	r3, [r4, #4]
    }

    /* Restore interrupts.  */
    UX_RESTORE
 800fd24:	4628      	mov	r0, r5
 800fd26:	f7f1 fa23 	bl	8001170 <_ux_utility_interrupt_restore>

    /* Return completion status.  */
    return(status);       
}
 800fd2a:	4630      	mov	r0, r6
 800fd2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status =  UX_ERROR;
 800fd2e:	26ff      	movs	r6, #255	; 0xff
    UX_RESTORE
 800fd30:	4628      	mov	r0, r5
 800fd32:	f7f1 fa1d 	bl	8001170 <_ux_utility_interrupt_restore>
}
 800fd36:	4630      	mov	r0, r6
 800fd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	2000ae38 	.word	0x2000ae38

0800fd40 <_ux_device_stack_get_status>:

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800fd40:	2300      	movs	r3, #0
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fd42:	4a23      	ldr	r2, [pc, #140]	; (800fdd0 <_ux_device_stack_get_status+0x90>)
{
 800fd44:	b570      	push	{r4, r5, r6, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800fd46:	6814      	ldr	r4, [r2, #0]
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 800fd48:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800fd4a:	702b      	strb	r3, [r5, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 800fd4c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
 800fd4e:	706b      	strb	r3, [r5, #1]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 800fd50:	f010 0503 	ands.w	r5, r0, #3
 800fd54:	d01f      	beq.n	800fd96 <_ux_device_stack_get_status+0x56>
 800fd56:	2d02      	cmp	r5, #2
 800fd58:	f104 063c 	add.w	r6, r4, #60	; 0x3c
 800fd5c:	d114      	bne.n	800fd88 <_ux_device_stack_get_status+0x48>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 800fd5e:	460a      	mov	r2, r1
 800fd60:	4620      	mov	r0, r4
 800fd62:	2115      	movs	r1, #21
 800fd64:	69a3      	ldr	r3, [r4, #24]
 800fd66:	4798      	blx	r3
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 800fd68:	28ff      	cmp	r0, #255	; 0xff
 800fd6a:	d00d      	beq.n	800fd88 <_ux_device_stack_get_status+0x48>
        {

            if (status == UX_TRUE)
 800fd6c:	2801      	cmp	r0, #1
 800fd6e:	d024      	beq.n	800fdba <_ux_device_stack_get_status+0x7a>
    data_length = 2;
 800fd70:	2502      	movs	r5, #2
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800fd72:	2303      	movs	r3, #3

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800fd74:	462a      	mov	r2, r5
 800fd76:	4629      	mov	r1, r5
 800fd78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 800fd7c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84

    /* Return the function status.  */
    return(status);
}
 800fd80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 800fd84:	f000 ba68 	b.w	8010258 <_ux_device_stack_transfer_request>
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 800fd88:	4632      	mov	r2, r6
 800fd8a:	2114      	movs	r1, #20
 800fd8c:	4620      	mov	r0, r4
 800fd8e:	69a3      	ldr	r3, [r4, #24]
 800fd90:	4798      	blx	r3
}
 800fd92:	2000      	movs	r0, #0
 800fd94:	bd70      	pop	{r4, r5, r6, pc}
        if (request_index == UX_OTG_STATUS_SELECTOR)
 800fd96:	f5b1 4f70 	cmp.w	r1, #61440	; 0xf000
 800fd9a:	d016      	beq.n	800fdca <_ux_device_stack_get_status+0x8a>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 800fd9c:	6813      	ldr	r3, [r2, #0]
 800fd9e:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
 800fda2:	2902      	cmp	r1, #2
 800fda4:	d00c      	beq.n	800fdc0 <_ux_device_stack_get_status+0x80>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800fda6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d0e0      	beq.n	800fd70 <_ux_device_stack_get_status+0x30>
    data_length = 2;
 800fdae:	2502      	movs	r5, #2
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 800fdb0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800fdb2:	7813      	ldrb	r3, [r2, #0]
 800fdb4:	432b      	orrs	r3, r5
 800fdb6:	7013      	strb	r3, [r2, #0]
 800fdb8:	e7db      	b.n	800fd72 <_ux_device_stack_get_status+0x32>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800fdba:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fdbc:	7018      	strb	r0, [r3, #0]
 800fdbe:	e7d8      	b.n	800fd72 <_ux_device_stack_get_status+0x32>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 800fdc0:	2101      	movs	r1, #1
 800fdc2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800fdc4:	7019      	strb	r1, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 800fdc6:	6813      	ldr	r3, [r2, #0]
 800fdc8:	e7ed      	b.n	800fda6 <_ux_device_stack_get_status+0x66>
            data_length = 1;
 800fdca:	2501      	movs	r5, #1
 800fdcc:	e7d1      	b.n	800fd72 <_ux_device_stack_get_status+0x32>
 800fdce:	bf00      	nop
 800fdd0:	2000ae38 	.word	0x2000ae38

0800fdd4 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 800fdd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 800fdd8:	f04f 0c02 	mov.w	ip, #2
{
 800fddc:	460d      	mov	r5, r1

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800fdde:	2100      	movs	r1, #0
    device =  &_ux_system_slave -> ux_system_slave_device;
 800fde0:	4f67      	ldr	r7, [pc, #412]	; (800ff80 <_ux_device_stack_initialize+0x1ac>)
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800fde2:	9c08      	ldr	r4, [sp, #32]
    device =  &_ux_system_slave -> ux_system_slave_device;
 800fde4:	683e      	ldr	r6, [r7, #0]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 800fde6:	e9c6 2335 	strd	r2, r3, [r6, #212]	; 0xd4
{
 800fdea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 800fdec:	f8c6 40e4 	str.w	r4, [r6, #228]	; 0xe4
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 800fdf0:	f8c6 30ec 	str.w	r3, [r6, #236]	; 0xec
{
 800fdf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800fdf6:	9c09      	ldr	r4, [sp, #36]	; 0x24
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 800fdf8:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
{
 800fdfc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 800fdfe:	e9c6 0537 	strd	r0, r5, [r6, #220]	; 0xdc
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800fe02:	22c8      	movs	r2, #200	; 0xc8
 800fe04:	4608      	mov	r0, r1
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 800fe06:	f8c6 40e8 	str.w	r4, [r6, #232]	; 0xe8
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 800fe0a:	f8c6 c0fc 	str.w	ip, [r6, #252]	; 0xfc
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 800fe0e:	f8c6 3168 	str.w	r3, [r6, #360]	; 0x168
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 800fe12:	f000 fb4f 	bl	80104b4 <_ux_utility_memory_allocate>
    if (memory == UX_NULL)
 800fe16:	2800      	cmp	r0, #0
 800fe18:	f000 80a7 	beq.w	800ff6a <_ux_device_stack_initialize+0x196>
        return(UX_MEMORY_INSUFFICIENT);
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800fe1c:	683b      	ldr	r3, [r7, #0]
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800fe1e:	f44f 7280 	mov.w	r2, #256	; 0x100
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 800fe22:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 800fe26:	2101      	movs	r1, #1
 800fe28:	2000      	movs	r0, #0
 800fe2a:	f000 fb43 	bl	80104b4 <_ux_utility_memory_allocate>
    transfer_request -> ux_slave_transfer_request_data_pointer =
 800fe2e:	66b0      	str	r0, [r6, #104]	; 0x68

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 800fe30:	2800      	cmp	r0, #0
 800fe32:	d07c      	beq.n	800ff2e <_ux_device_stack_initialize+0x15a>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 800fe34:	683b      	ldr	r3, [r7, #0]
 800fe36:	e9d3 3435 	ldrd	r3, r4, [r3, #212]	; 0xd4
        local_interfaces_found             =  0;
        local_endpoints_found              =  0;
        endpoints_in_interface_found       =  0;

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 800fe3a:	2c00      	cmp	r4, #0
 800fe3c:	f000 808e 	beq.w	800ff5c <_ux_device_stack_initialize+0x188>
        endpoints_in_interface_found       =  0;
 800fe40:	2500      	movs	r5, #0
        local_endpoints_found              =  0;
 800fe42:	46ac      	mov	ip, r5
        local_interfaces_found             =  0;
 800fe44:	46ae      	mov	lr, r5
    max_interface_number               =  0;
 800fe46:	46a8      	mov	r8, r5
    endpoints_found                    =  0;
 800fe48:	46a9      	mov	r9, r5
    interfaces_found                   =  0;
 800fe4a:	462a      	mov	r2, r5
 800fe4c:	e00f      	b.n	800fe6e <_ux_device_stack_initialize+0x9a>
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 800fe4e:	2804      	cmp	r0, #4
 800fe50:	d10a      	bne.n	800fe68 <_ux_device_stack_initialize+0x94>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 800fe52:	78d8      	ldrb	r0, [r3, #3]
 800fe54:	2800      	cmp	r0, #0
 800fe56:	d17c      	bne.n	800ff52 <_ux_device_stack_initialize+0x17e>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 800fe58:	44ac      	add	ip, r5

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 800fe5a:	791d      	ldrb	r5, [r3, #4]
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 800fe5c:	f10e 0e01 	add.w	lr, lr, #1
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 800fe60:	7898      	ldrb	r0, [r3, #2]
 800fe62:	4580      	cmp	r8, r0
 800fe64:	bf38      	it	cc
 800fe66:	4680      	movcc	r8, r0
        while (device_framework_length != 0)
 800fe68:	1a64      	subs	r4, r4, r1

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 800fe6a:	440b      	add	r3, r1
        while (device_framework_length != 0)
 800fe6c:	d010      	beq.n	800fe90 <_ux_device_stack_initialize+0xbc>
            descriptor_type =  *(device_framework + 1);
 800fe6e:	7858      	ldrb	r0, [r3, #1]
            descriptor_length =  (ULONG) *device_framework;
 800fe70:	7819      	ldrb	r1, [r3, #0]
            switch(descriptor_type)
 800fe72:	2802      	cmp	r0, #2
 800fe74:	d1eb      	bne.n	800fe4e <_ux_device_stack_initialize+0x7a>
                local_endpoints_found += endpoints_in_interface_found;
 800fe76:	44ac      	add	ip, r5
                endpoints_in_interface_found  =  0;
 800fe78:	2500      	movs	r5, #0
 800fe7a:	4572      	cmp	r2, lr
 800fe7c:	bf38      	it	cc
 800fe7e:	4672      	movcc	r2, lr
                if (local_endpoints_found > endpoints_found)
 800fe80:	45e1      	cmp	r9, ip
 800fe82:	bf38      	it	cc
 800fe84:	46e1      	movcc	r9, ip
        while (device_framework_length != 0)
 800fe86:	1a64      	subs	r4, r4, r1
                local_endpoints_found         =  0;
 800fe88:	46ac      	mov	ip, r5
                local_interfaces_found =  0;
 800fe8a:	46ae      	mov	lr, r5
            device_framework +=  descriptor_length;
 800fe8c:	440b      	add	r3, r1
        while (device_framework_length != 0)
 800fe8e:	d1ee      	bne.n	800fe6e <_ux_device_stack_initialize+0x9a>
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 800fe90:	4572      	cmp	r2, lr
 800fe92:	bf38      	it	cc
 800fe94:	4672      	movcc	r2, lr
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 800fe96:	2a00      	cmp	r2, #0
 800fe98:	d060      	beq.n	800ff5c <_ux_device_stack_initialize+0x188>

            status = UX_DESCRIPTOR_CORRUPTED;
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 800fe9a:	f1b8 0f0f 	cmp.w	r8, #15
 800fe9e:	d868      	bhi.n	800ff72 <_ux_device_stack_initialize+0x19e>
        local_endpoints_found += endpoints_in_interface_found;
 800fea0:	eb0c 0805 	add.w	r8, ip, r5
 800fea4:	45c8      	cmp	r8, r9
 800fea6:	bf38      	it	cc
 800fea8:	46c8      	movcc	r8, r9
        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800feaa:	2320      	movs	r3, #32
 800feac:	4621      	mov	r1, r4
 800feae:	4620      	mov	r0, r4
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 800feb0:	f8c6 20bc 	str.w	r2, [r6, #188]	; 0xbc
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 800feb4:	f8c6 80c4 	str.w	r8, [r6, #196]	; 0xc4
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 800feb8:	f000 fb78 	bl	80105ac <_ux_utility_memory_allocate_mulc_safe>
        if (interfaces_pool == UX_NULL)
 800febc:	b3b8      	cbz	r0, 800ff2e <_ux_device_stack_initialize+0x15a>
            status = UX_MEMORY_INSUFFICIENT;
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 800febe:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 800fec2:	f1b8 0f00 	cmp.w	r8, #0
 800fec6:	d041      	beq.n	800ff4c <_ux_device_stack_initialize+0x178>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 800fec8:	2368      	movs	r3, #104	; 0x68
 800feca:	4642      	mov	r2, r8
 800fecc:	4621      	mov	r1, r4
 800fece:	4620      	mov	r0, r4
 800fed0:	f000 fb6c 	bl	80105ac <_ux_utility_memory_allocate_mulc_safe>
        if (endpoints_pool == UX_NULL)
 800fed4:	4605      	mov	r5, r0
 800fed6:	b350      	cbz	r0, 800ff2e <_ux_device_stack_initialize+0x15a>
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800fed8:	2368      	movs	r3, #104	; 0x68
 800feda:	fb03 f808 	mul.w	r8, r3, r8
 800fede:	eb00 0308 	add.w	r3, r0, r8
 800fee2:	4298      	cmp	r0, r3
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 800fee4:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800fee8:	d304      	bcc.n	800fef4 <_ux_device_stack_initialize+0x120>
 800feea:	e02f      	b.n	800ff4c <_ux_device_stack_initialize+0x178>
                    status = UX_SEMAPHORE_ERROR;
                    break;
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 800feec:	3568      	adds	r5, #104	; 0x68
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 800feee:	4443      	add	r3, r8
 800fef0:	429d      	cmp	r5, r3
 800fef2:	d22b      	bcs.n	800ff4c <_ux_device_stack_initialize+0x178>
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 800fef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fef8:	2101      	movs	r1, #1
 800fefa:	2000      	movs	r0, #0
 800fefc:	f000 fada 	bl	80104b4 <_ux_utility_memory_allocate>
    if (endpoints_pool)
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800ff00:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 800ff04:	62e8      	str	r0, [r5, #44]	; 0x2c
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 800ff06:	2800      	cmp	r0, #0
 800ff08:	d1f0      	bne.n	800feec <_ux_device_stack_initialize+0x118>
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800ff0a:	429d      	cmp	r5, r3
 800ff0c:	d30c      	bcc.n	800ff28 <_ux_device_stack_initialize+0x154>
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
#endif

            /* Move to previous endpoint.  */
            endpoints_pool --;
 800ff0e:	3d68      	subs	r5, #104	; 0x68
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800ff10:	429d      	cmp	r5, r3
 800ff12:	d309      	bcc.n	800ff28 <_ux_device_stack_initialize+0x154>
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800ff14:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800ff16:	2800      	cmp	r0, #0
 800ff18:	d0f9      	beq.n	800ff0e <_ux_device_stack_initialize+0x13a>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800ff1a:	f000 fbc9 	bl	80106b0 <_ux_utility_memory_free>
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800ff1e:	f8d6 30c0 	ldr.w	r3, [r6, #192]	; 0xc0
            endpoints_pool --;
 800ff22:	3d68      	subs	r5, #104	; 0x68
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 800ff24:	429d      	cmp	r5, r3
 800ff26:	d2f5      	bcs.n	800ff14 <_ux_device_stack_initialize+0x140>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f000 fbc1 	bl	80106b0 <_ux_utility_memory_free>
 800ff2e:	2412      	movs	r4, #18
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 800ff30:	f8d6 00b8 	ldr.w	r0, [r6, #184]	; 0xb8
 800ff34:	b108      	cbz	r0, 800ff3a <_ux_device_stack_initialize+0x166>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 800ff36:	f000 fbbb 	bl	80106b0 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 800ff3a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
 800ff3c:	b108      	cbz	r0, 800ff42 <_ux_device_stack_initialize+0x16e>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 800ff3e:	f000 fbb7 	bl	80106b0 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
 800ff48:	f000 fbb2 	bl	80106b0 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
}
 800ff4c:	4620      	mov	r0, r4
 800ff4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 800ff52:	7918      	ldrb	r0, [r3, #4]
 800ff54:	4285      	cmp	r5, r0
 800ff56:	bf38      	it	cc
 800ff58:	4605      	movcc	r5, r0
 800ff5a:	e781      	b.n	800fe60 <_ux_device_stack_initialize+0x8c>
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 800ff5c:	2242      	movs	r2, #66	; 0x42
 800ff5e:	2103      	movs	r1, #3
 800ff60:	2002      	movs	r0, #2
 800ff62:	f000 f9eb 	bl	801033c <_ux_system_error_handler>
            status = UX_DESCRIPTOR_CORRUPTED;
 800ff66:	2442      	movs	r4, #66	; 0x42
 800ff68:	e7e2      	b.n	800ff30 <_ux_device_stack_initialize+0x15c>
        return(UX_MEMORY_INSUFFICIENT);
 800ff6a:	2412      	movs	r4, #18
}
 800ff6c:	4620      	mov	r0, r4
 800ff6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 800ff72:	2212      	movs	r2, #18
 800ff74:	2103      	movs	r1, #3
 800ff76:	2002      	movs	r0, #2
 800ff78:	f000 f9e0 	bl	801033c <_ux_system_error_handler>
            status = UX_MEMORY_INSUFFICIENT;
 800ff7c:	2412      	movs	r4, #18
 800ff7e:	e7d7      	b.n	800ff30 <_ux_device_stack_initialize+0x15c>
 800ff80:	2000ae38 	.word	0x2000ae38

0800ff84 <_ux_device_stack_interface_delete>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface_ptr)
{
 800ff84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface_ptr, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ff88:	f8df 8044 	ldr.w	r8, [pc, #68]	; 800ffd0 <_ux_device_stack_interface_delete+0x4c>

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface_ptr -> ux_slave_interface_first_endpoint;        
 800ff8c:	69c4      	ldr	r4, [r0, #28]
{
 800ff8e:	4607      	mov	r7, r0
    device =  &_ux_system_slave -> ux_system_slave_device;
 800ff90:	f8d8 9000 	ldr.w	r9, [r8]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 800ff94:	b18c      	cbz	r4, 800ffba <_ux_device_stack_interface_delete+0x36>
 800ff96:	4648      	mov	r0, r9

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 800ff98:	2500      	movs	r5, #0
 800ff9a:	e002      	b.n	800ffa2 <_ux_device_stack_interface_delete+0x1e>
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 800ff9c:	4634      	mov	r4, r6
 800ff9e:	f8d8 0000 	ldr.w	r0, [r8]
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 800ffa2:	6966      	ldr	r6, [r4, #20]
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 800ffa4:	4622      	mov	r2, r4
 800ffa6:	210f      	movs	r1, #15
 800ffa8:	6983      	ldr	r3, [r0, #24]
 800ffaa:	4798      	blx	r3

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 800ffac:	e9c4 5500 	strd	r5, r5, [r4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 800ffb0:	e9c4 5505 	strd	r5, r5, [r4, #20]
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 800ffb4:	61e5      	str	r5, [r4, #28]
    while (next_endpoint != UX_NULL)
 800ffb6:	2e00      	cmp	r6, #0
 800ffb8:	d1f0      	bne.n	800ff9c <_ux_device_stack_interface_delete+0x18>
    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface_ptr -> ux_slave_interface_class          =  UX_NULL;
 800ffba:	2000      	movs	r0, #0
    device -> ux_slave_device_first_interface =  interface_ptr -> ux_slave_interface_next_interface;
 800ffbc:	69bb      	ldr	r3, [r7, #24]
 800ffbe:	f8c9 30b4 	str.w	r3, [r9, #180]	; 0xb4
    interface_ptr -> ux_slave_interface_class_instance =  UX_NULL;
 800ffc2:	e9c7 0001 	strd	r0, r0, [r7, #4]
    interface_ptr -> ux_slave_interface_next_interface =  UX_NULL;
    interface_ptr -> ux_slave_interface_first_endpoint =  UX_NULL;
 800ffc6:	e9c7 0006 	strd	r0, r0, [r7, #24]
    interface_ptr -> ux_slave_interface_status         =  UX_UNUSED;
 800ffca:	6038      	str	r0, [r7, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
}
 800ffcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffd0:	2000ae38 	.word	0x2000ae38

0800ffd4 <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 800ffd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ffd8:	f8df a128 	ldr.w	sl, [pc, #296]	; 8010104 <_ux_device_stack_interface_set+0x130>
{
 800ffdc:	b083      	sub	sp, #12
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 800ffde:	f8da 8000 	ldr.w	r8, [sl]
    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface_ptr = device -> ux_slave_device_interfaces_pool;

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 800ffe2:	e9d8 432e 	ldrd	r4, r3, [r8, #184]	; 0xb8
    while (interfaces_pool_number != 0)
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d03a      	beq.n	8010060 <_ux_device_stack_interface_set+0x8c>
 800ffea:	4606      	mov	r6, r0
 800ffec:	460f      	mov	r7, r1
 800ffee:	e003      	b.n	800fff8 <_ux_device_stack_interface_set+0x24>
 800fff0:	3b01      	subs	r3, #1
        /* Check if this interface is free.  */
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
            break;
    
        /* Try the next interface.  */
        interface_ptr++;
 800fff2:	f104 0420 	add.w	r4, r4, #32
    while (interfaces_pool_number != 0)
 800fff6:	d033      	beq.n	8010060 <_ux_device_stack_interface_set+0x8c>
        if (interface_ptr -> ux_slave_interface_status == UX_UNUSED)
 800fff8:	6822      	ldr	r2, [r4, #0]
 800fffa:	2a00      	cmp	r2, #0
 800fffc:	d1f8      	bne.n	800fff0 <_ux_device_stack_interface_set+0x1c>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface_ptr -> ux_slave_interface_status = UX_USED;
 800fffe:	4623      	mov	r3, r4
 8010000:	2201      	movs	r2, #1

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, interface_ptr, 0, 0, 0)

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
 8010002:	4630      	mov	r0, r6
    interface_ptr -> ux_slave_interface_status = UX_USED;
 8010004:	f843 2b0c 	str.w	r2, [r3], #12
    _ux_utility_descriptor_parse(device_framework,
 8010008:	493d      	ldr	r1, [pc, #244]	; (8010100 <_ux_device_stack_interface_set+0x12c>)
 801000a:	2209      	movs	r2, #9
 801000c:	f000 fa12 	bl	8010434 <_ux_utility_descriptor_parse>
                (UCHAR *) &interface_ptr -> ux_slave_interface_descriptor);

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 8010010:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8010014:	2b00      	cmp	r3, #0
 8010016:	d062      	beq.n	80100de <_ux_device_stack_interface_set+0x10a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8010018:	461a      	mov	r2, r3
 801001a:	699b      	ldr	r3, [r3, #24]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d1fb      	bne.n	8010018 <_ux_device_stack_interface_set+0x44>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
        interface_link -> ux_slave_interface_next_interface =  interface_ptr;
 8010020:	6194      	str	r4, [r2, #24]
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface_ptr;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 8010022:	7831      	ldrb	r1, [r6, #0]
    device_framework +=  (ULONG) *device_framework;

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 8010024:	1a7f      	subs	r7, r7, r1
    device_framework +=  (ULONG) *device_framework;
 8010026:	440e      	add	r6, r1
    while (device_framework_length != 0)
 8010028:	d014      	beq.n	8010054 <_ux_device_stack_interface_set+0x80>
    device =  &_ux_system_slave -> ux_system_slave_device;
 801002a:	f108 0324 	add.w	r3, r8, #36	; 0x24
 801002e:	e9cd 7300 	strd	r7, r3, [sp]
            /* Did we find a free endpoint ?  */
            if (endpoints_pool_number == 0)
                return(UX_MEMORY_INSUFFICIENT);

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8010032:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8010108 <_ux_device_stack_interface_set+0x134>
        descriptor_type =  *(device_framework + 1);
 8010036:	7873      	ldrb	r3, [r6, #1]
        descriptor_length =  (ULONG) *device_framework;
 8010038:	f896 9000 	ldrb.w	r9, [r6]
        switch(descriptor_type)
 801003c:	2b04      	cmp	r3, #4
 801003e:	d009      	beq.n	8010054 <_ux_device_stack_interface_set+0x80>
 8010040:	2b05      	cmp	r3, #5
 8010042:	d011      	beq.n	8010068 <_ux_device_stack_interface_set+0x94>
 8010044:	2b02      	cmp	r3, #2
 8010046:	d005      	beq.n	8010054 <_ux_device_stack_interface_set+0x80>
    while (device_framework_length != 0)
 8010048:	9b00      	ldr	r3, [sp, #0]

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 801004a:	444e      	add	r6, r9
    while (device_framework_length != 0)
 801004c:	ebb3 0309 	subs.w	r3, r3, r9
 8010050:	9300      	str	r3, [sp, #0]
 8010052:	d1f0      	bne.n	8010036 <_ux_device_stack_interface_set+0x62>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface_ptr);
 8010054:	4620      	mov	r0, r4

    /* Return the status to the caller.  */
    return(status);
}
 8010056:	b003      	add	sp, #12
 8010058:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    status =  _ux_device_stack_interface_start(interface_ptr);
 801005c:	f000 b856 	b.w	801010c <_ux_device_stack_interface_start>
        return(UX_MEMORY_INSUFFICIENT);
 8010060:	2012      	movs	r0, #18
}
 8010062:	b003      	add	sp, #12
 8010064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            endpoint = device -> ux_slave_device_endpoints_pool;
 8010068:	e9d8 5330 	ldrd	r5, r3, [r8, #192]	; 0xc0
            while (endpoints_pool_number != 0)
 801006c:	2b00      	cmp	r3, #0
 801006e:	d0f7      	beq.n	8010060 <_ux_device_stack_interface_set+0x8c>
 8010070:	9f00      	ldr	r7, [sp, #0]
 8010072:	e003      	b.n	801007c <_ux_device_stack_interface_set+0xa8>
 8010074:	3b01      	subs	r3, #1
                endpoint++;
 8010076:	f105 0568 	add.w	r5, r5, #104	; 0x68
            while (endpoints_pool_number != 0)
 801007a:	d0f1      	beq.n	8010060 <_ux_device_stack_interface_set+0x8c>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 801007c:	682a      	ldr	r2, [r5, #0]
 801007e:	2a00      	cmp	r2, #0
 8010080:	d1f8      	bne.n	8010074 <_ux_device_stack_interface_set+0xa0>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 8010082:	462b      	mov	r3, r5
 8010084:	9700      	str	r7, [sp, #0]
 8010086:	2701      	movs	r7, #1
            _ux_utility_descriptor_parse(device_framework,
 8010088:	2206      	movs	r2, #6
 801008a:	4659      	mov	r1, fp
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 801008c:	f843 7b0c 	str.w	r7, [r3], #12
            _ux_utility_descriptor_parse(device_framework,
 8010090:	4630      	mov	r0, r6
 8010092:	f000 f9cf 	bl	8010434 <_ux_utility_descriptor_parse>
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8010096:	f8da 3000 	ldr.w	r3, [sl]
 801009a:	f8d3 1144 	ldr.w	r1, [r3, #324]	; 0x144
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801009e:	8a2b      	ldrh	r3, [r5, #16]
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80100a0:	2902      	cmp	r1, #2
            max_transfer_length =
 80100a2:	f3c3 020a 	ubfx	r2, r3, #0, #11
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80100a6:	d01d      	beq.n	80100e4 <_ux_device_stack_interface_set+0x110>
            endpoint -> ux_slave_endpoint_device =  device;
 80100a8:	9b01      	ldr	r3, [sp, #4]
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 80100aa:	642a      	str	r2, [r5, #64]	; 0x40
            endpoint -> ux_slave_endpoint_device =  device;
 80100ac:	61eb      	str	r3, [r5, #28]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 80100ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80100b2:	462a      	mov	r2, r5
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 80100b4:	656b      	str	r3, [r5, #84]	; 0x54
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80100b6:	210e      	movs	r1, #14
 80100b8:	4640      	mov	r0, r8
 80100ba:	f8d8 3018 	ldr.w	r3, [r8, #24]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 80100be:	62ad      	str	r5, [r5, #40]	; 0x28
            endpoint -> ux_slave_endpoint_interface =  interface_ptr;
 80100c0:	61ac      	str	r4, [r5, #24]
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 80100c2:	4798      	blx	r3
            if (status != UX_SUCCESS)
 80100c4:	b9c0      	cbnz	r0, 80100f8 <_ux_device_stack_interface_set+0x124>
            if (interface_ptr -> ux_slave_interface_first_endpoint == UX_NULL)
 80100c6:	69e3      	ldr	r3, [r4, #28]
 80100c8:	b90b      	cbnz	r3, 80100ce <_ux_device_stack_interface_set+0xfa>
                interface_ptr -> ux_slave_interface_first_endpoint =  endpoint;
 80100ca:	61e5      	str	r5, [r4, #28]
 80100cc:	e7bc      	b.n	8010048 <_ux_device_stack_interface_set+0x74>
 80100ce:	9f00      	ldr	r7, [sp, #0]
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 80100d0:	461a      	mov	r2, r3
 80100d2:	695b      	ldr	r3, [r3, #20]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d1fb      	bne.n	80100d0 <_ux_device_stack_interface_set+0xfc>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 80100d8:	9700      	str	r7, [sp, #0]
 80100da:	6155      	str	r5, [r2, #20]
 80100dc:	e7b4      	b.n	8010048 <_ux_device_stack_interface_set+0x74>
        device -> ux_slave_device_first_interface =  interface_ptr;
 80100de:	f8c8 40b4 	str.w	r4, [r8, #180]	; 0xb4
 80100e2:	e79e      	b.n	8010022 <_ux_device_stack_interface_set+0x4e>
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 80100e4:	7be9      	ldrb	r1, [r5, #15]
 80100e6:	07c9      	lsls	r1, r1, #31
 80100e8:	d5de      	bpl.n	80100a8 <_ux_device_stack_interface_set+0xd4>
                if (n_trans)
 80100ea:	f413 53c0 	ands.w	r3, r3, #6144	; 0x1800
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 80100ee:	bf1c      	itt	ne
 80100f0:	0adb      	lsrne	r3, r3, #11
                    max_transfer_length *= n_trans;
 80100f2:	fb03 2202 	mlane	r2, r3, r2, r2
 80100f6:	e7d7      	b.n	80100a8 <_ux_device_stack_interface_set+0xd4>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 80100f8:	2300      	movs	r3, #0
 80100fa:	602b      	str	r3, [r5, #0]
                return(status);
 80100fc:	e7b1      	b.n	8010062 <_ux_device_stack_interface_set+0x8e>
 80100fe:	bf00      	nop
 8010100:	2000020c 	.word	0x2000020c
 8010104:	2000ae38 	.word	0x2000ae38
 8010108:	20000204 	.word	0x20000204

0801010c <_ux_device_stack_interface_start>:
/*                                            names conflict C++ keyword, */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface_ptr)
{
 801010c:	b530      	push	{r4, r5, lr}
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 801010e:	4b15      	ldr	r3, [pc, #84]	; (8010164 <_ux_device_stack_interface_start+0x58>)
{
 8010110:	b08d      	sub	sp, #52	; 0x34
    class_ptr =  _ux_system_slave -> ux_system_slave_interface_class_array[interface_ptr -> ux_slave_interface_descriptor.bInterfaceNumber];
 8010112:	681a      	ldr	r2, [r3, #0]
 8010114:	7b83      	ldrb	r3, [r0, #14]
 8010116:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801011a:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104

    /* Check if class driver is available. */
    if (class_ptr == UX_NULL)
 801011e:	b195      	cbz	r5, 8010146 <_ux_device_stack_interface_start+0x3a>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 8010120:	2301      	movs	r3, #1
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
    class_command.ux_slave_class_command_class     =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceClass;
 8010122:	7c41      	ldrb	r1, [r0, #17]
 8010124:	4604      	mov	r4, r0
 8010126:	9106      	str	r1, [sp, #24]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8010128:	7c81      	ldrb	r1, [r0, #18]
    class_command.ux_slave_class_command_interface =   (VOID *)interface_ptr;
 801012a:	9003      	str	r0, [sp, #12]
    class_command.ux_slave_class_command_subclass  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceSubClass;
 801012c:	9107      	str	r1, [sp, #28]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 801012e:	7cc1      	ldrb	r1, [r0, #19]
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 8010130:	9301      	str	r3, [sp, #4]
    class_command.ux_slave_class_command_protocol  =   interface_ptr -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8010132:	9108      	str	r1, [sp, #32]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 8010134:	8e11      	ldrh	r1, [r2, #48]	; 0x30
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8010136:	8e52      	ldrh	r2, [r2, #50]	; 0x32

    /* We can now memorize the interface pointer associated with this class.  */
    class_ptr -> ux_slave_class_interface = interface_ptr;
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8010138:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    class_ptr -> ux_slave_class_interface = interface_ptr;
 801013a:	6628      	str	r0, [r5, #96]	; 0x60
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 801013c:	e9cd 2104 	strd	r2, r1, [sp, #16]
    status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8010140:	a801      	add	r0, sp, #4
 8010142:	4798      	blx	r3

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 8010144:	b110      	cbz	r0, 801014c <_ux_device_stack_interface_start+0x40>
        return (UX_NO_CLASS_MATCH);
 8010146:	2057      	movs	r0, #87	; 0x57
        return(status); 
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
}
 8010148:	b00d      	add	sp, #52	; 0x34
 801014a:	bd30      	pop	{r4, r5, pc}
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 801014c:	2202      	movs	r2, #2
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 801014e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8010150:	a801      	add	r0, sp, #4
        class_command.ux_slave_class_command_class_ptr =  class_ptr;
 8010152:	9509      	str	r5, [sp, #36]	; 0x24
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8010154:	9201      	str	r2, [sp, #4]
        status = class_ptr -> ux_slave_class_entry_function(&class_command);
 8010156:	4798      	blx	r3
        if(status == UX_SUCCESS)
 8010158:	2800      	cmp	r0, #0
 801015a:	d1f5      	bne.n	8010148 <_ux_device_stack_interface_start+0x3c>
            interface_ptr -> ux_slave_interface_class =  class_ptr;
 801015c:	6065      	str	r5, [r4, #4]
}
 801015e:	b00d      	add	sp, #52	; 0x34
 8010160:	bd30      	pop	{r4, r5, pc}
 8010162:	bf00      	nop
 8010164:	2000ae38 	.word	0x2000ae38

08010168 <_ux_device_stack_set_feature>:

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010168:	4b18      	ldr	r3, [pc, #96]	; (80101cc <_ux_device_stack_set_feature+0x64>)

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801016a:	f010 0003 	ands.w	r0, r0, #3
{
 801016e:	b510      	push	{r4, lr}
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010170:	681c      	ldr	r4, [r3, #0]
    switch (request_type & UX_REQUEST_TARGET)
 8010172:	d009      	beq.n	8010188 <_ux_device_stack_set_feature+0x20>
 8010174:	2802      	cmp	r0, #2
 8010176:	d00b      	beq.n	8010190 <_ux_device_stack_set_feature+0x28>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8010178:	2114      	movs	r1, #20
 801017a:	4620      	mov	r0, r4
 801017c:	69a3      	ldr	r3, [r4, #24]
 801017e:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 8010182:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8010184:	2000      	movs	r0, #0
    }
}
 8010186:	bd10      	pop	{r4, pc}
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8010188:	2901      	cmp	r1, #1
 801018a:	d018      	beq.n	80101be <_ux_device_stack_set_feature+0x56>
        return(UX_FUNCTION_NOT_SUPPORTED);
 801018c:	2054      	movs	r0, #84	; 0x54
}
 801018e:	bd10      	pop	{r4, pc}
        interface_ptr =  device -> ux_slave_device_first_interface;
 8010190:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
        while (interface_ptr != UX_NULL)
 8010194:	2800      	cmp	r0, #0
 8010196:	d0ef      	beq.n	8010178 <_ux_device_stack_set_feature+0x10>
            endpoint_target =  interface_ptr -> ux_slave_interface_first_endpoint;
 8010198:	69c3      	ldr	r3, [r0, #28]
            while (endpoint_target != UX_NULL)
 801019a:	b913      	cbnz	r3, 80101a2 <_ux_device_stack_set_feature+0x3a>
 801019c:	e00b      	b.n	80101b6 <_ux_device_stack_set_feature+0x4e>
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801019e:	695b      	ldr	r3, [r3, #20]
            while (endpoint_target != UX_NULL)
 80101a0:	b14b      	cbz	r3, 80101b6 <_ux_device_stack_set_feature+0x4e>
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 80101a2:	7b99      	ldrb	r1, [r3, #14]
 80101a4:	4291      	cmp	r1, r2
 80101a6:	d1fa      	bne.n	801019e <_ux_device_stack_set_feature+0x36>
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 80101a8:	461a      	mov	r2, r3
 80101aa:	2114      	movs	r1, #20
 80101ac:	4620      	mov	r0, r4
 80101ae:	69a3      	ldr	r3, [r4, #24]
 80101b0:	4798      	blx	r3
                    return(UX_SUCCESS);
 80101b2:	2000      	movs	r0, #0
}
 80101b4:	bd10      	pop	{r4, pc}
            interface_ptr =  interface_ptr -> ux_slave_interface_next_interface;
 80101b6:	6980      	ldr	r0, [r0, #24]
        while (interface_ptr != UX_NULL)
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d1ed      	bne.n	8010198 <_ux_device_stack_set_feature+0x30>
 80101bc:	e7dc      	b.n	8010178 <_ux_device_stack_set_feature+0x10>
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 80101be:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d0e2      	beq.n	801018c <_ux_device_stack_set_feature+0x24>
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 80101c6:	f8c4 1150 	str.w	r1, [r4, #336]	; 0x150
}
 80101ca:	bd10      	pop	{r4, pc}
 80101cc:	2000ae38 	.word	0x2000ae38

080101d0 <_ux_device_stack_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_tasks_run(VOID)
{
 80101d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}


    status = UX_STATE_RESET;

    /* Run all DCD tasks (pending ISR handle).  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 80101d2:	4f0e      	ldr	r7, [pc, #56]	; (801020c <_ux_device_stack_tasks_run+0x3c>)
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 80101d4:	2200      	movs	r2, #0
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 80101d6:	6838      	ldr	r0, [r7, #0]
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_TASKS_RUN, UX_NULL);
 80101d8:	2112      	movs	r1, #18
 80101da:	6983      	ldr	r3, [r0, #24]
 80101dc:	4798      	blx	r3

    /* Run all Class instance tasks.  */
    class_instance =  _ux_system_slave -> ux_system_slave_class_array;
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	e9d3 643f 	ldrd	r6, r4, [r3, #252]	; 0xfc
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 80101e4:	b17e      	cbz	r6, 8010206 <_ux_device_stack_tasks_run+0x36>
    status = UX_STATE_RESET;
 80101e6:	2600      	movs	r6, #0
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 80101e8:	4635      	mov	r5, r6
    {

        /* Skip classes not used.  */
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
 80101ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 80101ec:	3501      	adds	r5, #1
        if (class_instance -> ux_slave_class_status == UX_UNUSED)
 80101ee:	b12b      	cbz	r3, 80101fc <_ux_device_stack_tasks_run+0x2c>
            continue;

        /* Skip classes has no task function.  */
        if (class_instance -> ux_slave_class_task_function == UX_NULL)
 80101f0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80101f2:	b11b      	cbz	r3, 80101fc <_ux_device_stack_tasks_run+0x2c>
            continue;

        /* Invoke task function.  */
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 80101f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80101f6:	4798      	blx	r3

        /* Move to the next class.  */
        class_instance ++;
 80101f8:	3464      	adds	r4, #100	; 0x64
        status |= class_instance -> ux_slave_class_task_function(class_instance -> ux_slave_class_instance);
 80101fa:	4306      	orrs	r6, r0
    for (class_index = 0; class_index < UX_SYSTEM_DEVICE_MAX_CLASS_GET(); class_index++)
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8010202:	42ab      	cmp	r3, r5
 8010204:	d8f1      	bhi.n	80101ea <_ux_device_stack_tasks_run+0x1a>
    }

    /* Return overall status.  */
    return(status);
}
 8010206:	4630      	mov	r0, r6
 8010208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801020a:	bf00      	nop
 801020c:	2000ae38 	.word	0x2000ae38

08010210 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8010210:	b570      	push	{r4, r5, r6, lr}
 8010212:	4604      	mov	r4, r0

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010214:	4b0c      	ldr	r3, [pc, #48]	; (8010248 <_ux_device_stack_transfer_abort+0x38>)

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8010216:	6241      	str	r1, [r0, #36]	; 0x24
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8010218:	681e      	ldr	r6, [r3, #0]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 801021a:	f7f0 ffa5 	bl	8001168 <_ux_utility_interrupt_disable>

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 801021e:	6823      	ldr	r3, [r4, #0]
 8010220:	2b01      	cmp	r3, #1
 8010222:	d10c      	bne.n	801023e <_ux_device_stack_transfer_abort+0x2e>
 8010224:	4605      	mov	r5, r0
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 8010226:	69b3      	ldr	r3, [r6, #24]
 8010228:	4622      	mov	r2, r4
 801022a:	210d      	movs	r1, #13
 801022c:	4630      	mov	r0, r6
 801022e:	4798      	blx	r3

        /* Restore interrupts. Note that the transfer request should not be modified now.  */
        UX_RESTORE
 8010230:	4628      	mov	r0, r5
 8010232:	f7f0 ff9d 	bl	8001170 <_ux_utility_interrupt_restore>

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8010236:	2304      	movs	r3, #4
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
}
 8010238:	2000      	movs	r0, #0
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 801023a:	6023      	str	r3, [r4, #0]
}
 801023c:	bd70      	pop	{r4, r5, r6, pc}
        UX_RESTORE
 801023e:	f7f0 ff97 	bl	8001170 <_ux_utility_interrupt_restore>
}
 8010242:	2000      	movs	r0, #0
 8010244:	bd70      	pop	{r4, r5, r6, pc}
 8010246:	bf00      	nop
 8010248:	2000ae38 	.word	0x2000ae38

0801024c <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 801024c:	b508      	push	{r3, lr}

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 801024e:	3020      	adds	r0, #32
 8010250:	f7ff ffde 	bl	8010210 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
}
 8010254:	2000      	movs	r0, #0
 8010256:	bd08      	pop	{r3, pc}

08010258 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8010258:	b538      	push	{r3, r4, r5, lr}
#if defined(UX_DEVICE_STANDALONE)
UINT            status;

    /* Start a transfer request without waiting it end.  */
    UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 801025a:	2400      	movs	r4, #0
 801025c:	6304      	str	r4, [r0, #48]	; 0x30
{
 801025e:	4605      	mov	r5, r0
    status = _ux_device_stack_transfer_run(transfer_request, slave_length, host_length);
 8010260:	f000 f80a 	bl	8010278 <_ux_device_stack_transfer_run>
    if (status == UX_STATE_LOCK)
 8010264:	2806      	cmp	r0, #6
 8010266:	d005      	beq.n	8010274 <_ux_device_stack_transfer_request+0x1c>
        return(UX_BUSY);
    if (status < UX_STATE_NEXT)
 8010268:	2803      	cmp	r0, #3
 801026a:	d901      	bls.n	8010270 <_ux_device_stack_transfer_request+0x18>
        return(transfer_request -> ux_slave_transfer_request_completion_code);

    /* Started/done, things will be done in BG  */
    return(UX_SUCCESS);
 801026c:	4620      	mov	r0, r4

    /* And return the status.  */
    return(status);

#endif
}
 801026e:	bd38      	pop	{r3, r4, r5, pc}
        return(transfer_request -> ux_slave_transfer_request_completion_code);
 8010270:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
 8010272:	bd38      	pop	{r3, r4, r5, pc}
        return(UX_BUSY);
 8010274:	20fe      	movs	r0, #254	; 0xfe
}
 8010276:	bd38      	pop	{r3, r4, r5, pc}

08010278 <_ux_device_stack_transfer_run>:
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8010278:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 801027a:	b570      	push	{r4, r5, r6, lr}
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 801027c:	2b01      	cmp	r3, #1
{
 801027e:	4604      	mov	r4, r0
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8010280:	d044      	beq.n	801030c <_ux_device_stack_transfer_run+0x94>
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
        return(UX_STATE_NEXT);
    }

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 8010282:	4b2d      	ldr	r3, [pc, #180]	; (8010338 <_ux_device_stack_transfer_run+0xc0>)
 8010284:	6818      	ldr	r0, [r3, #0]

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if (!(device_state == UX_DEVICE_ATTACHED) &&
        !(device_state == UX_DEVICE_ADDRESSED) &&
 8010286:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010288:	3b01      	subs	r3, #1
    if (!(device_state == UX_DEVICE_ATTACHED) &&
 801028a:	2b02      	cmp	r3, #2
 801028c:	d826      	bhi.n	80102dc <_ux_device_stack_transfer_run+0x64>

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;

    /* Process states.  */
    state = transfer_request -> ux_slave_transfer_request_state;
 801028e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8010290:	68a5      	ldr	r5, [r4, #8]
    switch(state)
 8010292:	2b20      	cmp	r3, #32
 8010294:	d014      	beq.n	80102c0 <_ux_device_stack_transfer_run+0x48>
 8010296:	2b21      	cmp	r3, #33	; 0x21
 8010298:	d017      	beq.n	80102ca <_ux_device_stack_transfer_run+0x52>
 801029a:	b32b      	cbz	r3, 80102e8 <_ux_device_stack_transfer_run+0x70>
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
        }
        break;

    default: /* Error case, return EXIT.  */
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 801029c:	2300      	movs	r3, #0
        return(UX_STATE_EXIT);
 801029e:	2001      	movs	r0, #1
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 80102a0:	6323      	str	r3, [r4, #48]	; 0x30
    }

    /* And return the status.  */
    return(status);
}
 80102a2:	bd70      	pop	{r4, r5, r6, pc}
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 80102a4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80102a6:	2e03      	cmp	r6, #3
 80102a8:	d038      	beq.n	801031c <_ux_device_stack_transfer_run+0xa4>
 80102aa:	63a3      	str	r3, [r4, #56]	; 0x38
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80102ac:	68e3      	ldr	r3, [r4, #12]
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80102ae:	2200      	movs	r2, #0
        transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 80102b0:	6161      	str	r1, [r4, #20]
        transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 80102b2:	61e1      	str	r1, [r4, #28]
        transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80102b4:	6123      	str	r3, [r4, #16]
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 80102b6:	2120      	movs	r1, #32
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 80102b8:	2301      	movs	r3, #1
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_HALT_WAIT;
 80102ba:	6321      	str	r1, [r4, #48]	; 0x30
        transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80102bc:	61a2      	str	r2, [r4, #24]
        transfer_request -> ux_slave_transfer_request_status = UX_TRANSFER_STATUS_PENDING;
 80102be:	6023      	str	r3, [r4, #0]
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 80102c0:	7beb      	ldrb	r3, [r5, #15]
 80102c2:	079b      	lsls	r3, r3, #30
 80102c4:	d11d      	bne.n	8010302 <_ux_device_stack_transfer_run+0x8a>
        transfer_request -> ux_slave_transfer_request_state = UX_DEVICE_STACK_TRANSFER_STATE_TRAN_WAIT;
 80102c6:	2321      	movs	r3, #33	; 0x21
 80102c8:	6323      	str	r3, [r4, #48]	; 0x30
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_RUN, transfer_request);
 80102ca:	4622      	mov	r2, r4
 80102cc:	210c      	movs	r1, #12
 80102ce:	6983      	ldr	r3, [r0, #24]
 80102d0:	4798      	blx	r3
        if (status < UX_STATE_WAIT)
 80102d2:	2804      	cmp	r0, #4
 80102d4:	d8e5      	bhi.n	80102a2 <_ux_device_stack_transfer_run+0x2a>
            UX_SLAVE_TRANSFER_STATE_RESET(transfer_request);
 80102d6:	2300      	movs	r3, #0
 80102d8:	6323      	str	r3, [r4, #48]	; 0x30
}
 80102da:	bd70      	pop	{r4, r5, r6, pc}
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 80102dc:	2225      	movs	r2, #37	; 0x25
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 80102de:	2300      	movs	r3, #0
        return(UX_STATE_EXIT);
 80102e0:	2001      	movs	r0, #1
        transfer_request -> ux_slave_transfer_request_completion_code = UX_TRANSFER_NOT_READY;
 80102e2:	6262      	str	r2, [r4, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_RESET;
 80102e4:	6323      	str	r3, [r4, #48]	; 0x30
}
 80102e6:	bd70      	pop	{r4, r5, r6, pc}
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 80102e8:	f895 c00f 	ldrb.w	ip, [r5, #15]
 80102ec:	f01c 0f03 	tst.w	ip, #3
 80102f0:	d0d8      	beq.n	80102a4 <_ux_device_stack_transfer_run+0x2c>
            if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 80102f2:	f995 c00e 	ldrsb.w	ip, [r5, #14]
 80102f6:	f1bc 0f00 	cmp.w	ip, #0
 80102fa:	db0d      	blt.n	8010318 <_ux_device_stack_transfer_run+0xa0>
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 80102fc:	2202      	movs	r2, #2
 80102fe:	62a2      	str	r2, [r4, #40]	; 0x28
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 8010300:	e7d3      	b.n	80102aa <_ux_device_stack_transfer_run+0x32>
            if (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8010302:	686b      	ldr	r3, [r5, #4]
 8010304:	2b02      	cmp	r3, #2
 8010306:	d1de      	bne.n	80102c6 <_ux_device_stack_transfer_run+0x4e>
                return(UX_STATE_WAIT);
 8010308:	2005      	movs	r0, #5
}
 801030a:	bd70      	pop	{r4, r5, r6, pc}
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 801030c:	2304      	movs	r3, #4
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 801030e:	2200      	movs	r2, #0
        return(UX_STATE_NEXT);
 8010310:	4618      	mov	r0, r3
        transfer_request -> ux_slave_transfer_request_completion_code = UX_SUCCESS;
 8010312:	6262      	str	r2, [r4, #36]	; 0x24
        transfer_request -> ux_slave_transfer_request_state = UX_STATE_NEXT;
 8010314:	6323      	str	r3, [r4, #48]	; 0x30
}
 8010316:	bd70      	pop	{r4, r5, r6, pc}
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8010318:	2603      	movs	r6, #3
 801031a:	62a6      	str	r6, [r4, #40]	; 0x28
        if ((transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT) &&
 801031c:	2900      	cmp	r1, #0
 801031e:	d0c4      	beq.n	80102aa <_ux_device_stack_transfer_run+0x32>
            (slave_length != 0) && (host_length != slave_length) &&
 8010320:	4291      	cmp	r1, r2
 8010322:	d0c2      	beq.n	80102aa <_ux_device_stack_transfer_run+0x32>
            (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 8010324:	8a2e      	ldrh	r6, [r5, #16]
 8010326:	fbb1 f2f6 	udiv	r2, r1, r6
 801032a:	fb06 1212 	mls	r2, r6, r2, r1
            transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 801032e:	2a00      	cmp	r2, #0
 8010330:	bf08      	it	eq
 8010332:	2301      	moveq	r3, #1
 8010334:	e7b9      	b.n	80102aa <_ux_device_stack_transfer_run+0x32>
 8010336:	bf00      	nop
 8010338:	2000ae38 	.word	0x2000ae38

0801033c <_ux_system_error_handler>:
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 801033c:	4b07      	ldr	r3, [pc, #28]	; (801035c <_ux_system_error_handler+0x20>)
{
 801033e:	b410      	push	{r4}
    _ux_system -> ux_system_last_error =  error_code;
 8010340:	681b      	ldr	r3, [r3, #0]
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8010342:	691c      	ldr	r4, [r3, #16]
    _ux_system -> ux_system_last_error =  error_code;
 8010344:	60da      	str	r2, [r3, #12]
    _ux_system -> ux_system_error_count++;
 8010346:	3401      	adds	r4, #1
 8010348:	611c      	str	r4, [r3, #16]

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 801034a:	695c      	ldr	r4, [r3, #20]
 801034c:	b11c      	cbz	r4, 8010356 <_ux_system_error_handler+0x1a>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 801034e:	4623      	mov	r3, r4
    }
}
 8010350:	f85d 4b04 	ldr.w	r4, [sp], #4
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8010354:	4718      	bx	r3
}
 8010356:	f85d 4b04 	ldr.w	r4, [sp], #4
 801035a:	4770      	bx	lr
 801035c:	2000ae3c 	.word	0x2000ae3c

08010360 <_ux_system_initialize>:
UINT                status;
#endif
ULONG               pool_size;

    /* Check if the regular memory pool is valid.  */
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 8010360:	2800      	cmp	r0, #0
 8010362:	d05a      	beq.n	801041a <_ux_system_initialize+0xba>
{
 8010364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010368:	460e      	mov	r6, r1
    if ((regular_memory_pool_start == UX_NULL) || (regular_memory_size == 0))
 801036a:	2900      	cmp	r1, #0
 801036c:	d03e      	beq.n	80103ec <_ux_system_initialize+0x8c>
 801036e:	4604      	mov	r4, r0
 8010370:	4615      	mov	r5, r2
        return(UX_INVALID_PARAMETER);

    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 8010372:	460a      	mov	r2, r1
 8010374:	2100      	movs	r1, #0
 8010376:	461f      	mov	r7, r3

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 8010378:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8010424 <_ux_system_initialize+0xc4>
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 801037c:	f000 f9c0 	bl	8010700 <_ux_utility_memory_set>
#endif

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8010380:	4b27      	ldr	r3, [pc, #156]	; (8010420 <_ux_system_initialize+0xc0>)
 8010382:	f104 0218 	add.w	r2, r4, #24
    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif

    /* Set the regular memory pool structure.  */
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8010386:	f504 70c6 	add.w	r0, r4, #396	; 0x18c
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 801038a:	f8c8 4000 	str.w	r4, [r8]
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 801038e:	601a      	str	r2, [r3, #0]
    _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 8010390:	6020      	str	r0, [r4, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_MEMORY_BYTE_POOL);

    /* Check if the cache save memory pool is valid.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
 8010392:	b375      	cbz	r5, 80103f2 <_ux_system_initialize+0x92>
 8010394:	b1ff      	cbz	r7, 80103d6 <_ux_system_initialize+0x76>
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
    }

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start = (ALIGN_TYPE) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
    int_memory_pool_start += UX_ALIGN_MIN;
 8010396:	f204 11bb 	addw	r1, r4, #443	; 0x1bb
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);

    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 801039a:	4426      	add	r6, r4
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 801039c:	f021 0107 	bic.w	r1, r1, #7
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 80103a0:	f504 73d0 	add.w	r3, r4, #416	; 0x1a0

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 80103a4:	42b1      	cmp	r1, r6
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = (UX_MEMORY_BYTE_POOL *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 80103a6:	6063      	str	r3, [r4, #4]
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 80103a8:	d21d      	bcs.n	80103e6 <_ux_system_initialize+0x86>

    /* get the regular memory pool size.  */
    pool_size = (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);

    /* Create the regular memory pool.  */
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 80103aa:	1a72      	subs	r2, r6, r1
 80103ac:	f000 f912 	bl	80105d4 <_ux_utility_memory_byte_pool_create>
       define the cached safe memory region as the regular memory region.  */
    if ((cache_safe_memory_pool_start != UX_NULL) && (cache_safe_memory_size != 0))
    {

        /* Reset this memory block */
        _ux_utility_memory_set(cache_safe_memory_pool_start, 0, cache_safe_memory_size); /* Use case of memset is verified. */
 80103b0:	2100      	movs	r1, #0
 80103b2:	4628      	mov	r0, r5
 80103b4:	463a      	mov	r2, r7
 80103b6:	f000 f9a3 	bl	8010700 <_ux_utility_memory_set>

        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
        int_memory_pool_start +=  UX_ALIGN_MIN;
 80103ba:	1de9      	adds	r1, r5, #7
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80103bc:	f021 0107 	bic.w	r1, r1, #7

        cache_safe_memory_pool_end =  (void *) (((UCHAR *) cache_safe_memory_pool_start) + cache_safe_memory_size);
 80103c0:	443d      	add	r5, r7

        /* Check if we have memory available.  */
        if (int_memory_pool_start >= (ALIGN_TYPE) cache_safe_memory_pool_end)
 80103c2:	42a9      	cmp	r1, r5
 80103c4:	d20f      	bcs.n	80103e6 <_ux_system_initialize+0x86>
            return(UX_MEMORY_INSUFFICIENT);
        }

        pool_size = (ULONG) (((ALIGN_TYPE) cache_safe_memory_pool_end) - int_memory_pool_start);

        _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE],
 80103c6:	f8d8 3000 	ldr.w	r3, [r8]
 80103ca:	1a6a      	subs	r2, r5, r1
 80103cc:	6858      	ldr	r0, [r3, #4]
 80103ce:	f000 f901 	bl	80105d4 <_ux_utility_memory_byte_pool_create>
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
    if(status != UX_SUCCESS)
        return(UX_MUTEX_ERROR);
#endif

    return(UX_SUCCESS);
 80103d2:	2000      	movs	r0, #0
 80103d4:	e008      	b.n	80103e8 <_ux_system_initialize+0x88>
    int_memory_pool_start += UX_ALIGN_MIN;
 80103d6:	f204 11a7 	addw	r1, r4, #423	; 0x1a7
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80103da:	f021 0107 	bic.w	r1, r1, #7
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 80103de:	4426      	add	r6, r4
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 80103e0:	428e      	cmp	r6, r1
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 80103e2:	6060      	str	r0, [r4, #4]
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 80103e4:	d813      	bhi.n	801040e <_ux_system_initialize+0xae>
        return(UX_MEMORY_INSUFFICIENT);
 80103e6:	2012      	movs	r0, #18
}
 80103e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return(UX_INVALID_PARAMETER);
 80103ec:	20fa      	movs	r0, #250	; 0xfa
}
 80103ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    int_memory_pool_start += UX_ALIGN_MIN;
 80103f2:	f204 11a7 	addw	r1, r4, #423	; 0x1a7
    int_memory_pool_start &= ~((ALIGN_TYPE)UX_ALIGN_MIN);
 80103f6:	f021 0107 	bic.w	r1, r1, #7
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 80103fa:	4426      	add	r6, r4
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 80103fc:	42b1      	cmp	r1, r6
        _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE] = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 80103fe:	6060      	str	r0, [r4, #4]
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8010400:	d2f1      	bcs.n	80103e6 <_ux_system_initialize+0x86>
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 8010402:	1a72      	subs	r2, r6, r1
 8010404:	f000 f8e6 	bl	80105d4 <_ux_utility_memory_byte_pool_create>
    return(UX_SUCCESS);
 8010408:	4628      	mov	r0, r5
}
 801040a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _ux_utility_memory_byte_pool_create(_ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR],
 801040e:	1a72      	subs	r2, r6, r1
 8010410:	f000 f8e0 	bl	80105d4 <_ux_utility_memory_byte_pool_create>
    return(UX_SUCCESS);
 8010414:	4638      	mov	r0, r7
}
 8010416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return(UX_INVALID_PARAMETER);
 801041a:	20fa      	movs	r0, #250	; 0xfa
}
 801041c:	4770      	bx	lr
 801041e:	bf00      	nop
 8010420:	2000ae38 	.word	0x2000ae38
 8010424:	2000ae3c 	.word	0x2000ae3c

08010428 <_ux_system_tasks_run>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT _ux_system_tasks_run(VOID)
{
 8010428:	b508      	push	{r3, lr}
#if defined(UX_DEVICE_STANDALONE) && !defined(UX_HOST_SIDE_ONLY)
    _ux_device_stack_tasks_run();
 801042a:	f7ff fed1 	bl	80101d0 <_ux_device_stack_tasks_run>
    _ux_otg_tasks_run();
#endif

   /* Return code not used now.  */
   return(0);
}
 801042e:	2000      	movs	r0, #0
 8010430:	bd08      	pop	{r3, pc}
 8010432:	bf00      	nop

08010434 <_ux_utility_descriptor_parse>:
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8010434:	b382      	cbz	r2, 8010498 <_ux_utility_descriptor_parse+0x64>
{
 8010436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801043a:	4607      	mov	r7, r0
 801043c:	460e      	mov	r6, r1
 801043e:	461c      	mov	r4, r3

        case 2:

            /* Padding zeros so address is aligned.  */
            while((ALIGN_TYPE) descriptor & 1u)
                *descriptor++ =  0;
 8010440:	2500      	movs	r5, #0
 8010442:	eb01 0802 	add.w	r8, r1, r2
 8010446:	e005      	b.n	8010454 <_ux_utility_descriptor_parse+0x20>
            break;

        default:

            /* Save the byte.  */
            *((UCHAR *) descriptor) =  (UCHAR) *raw_descriptor;
 8010448:	f817 3b01 	ldrb.w	r3, [r7], #1
 801044c:	f804 3b01 	strb.w	r3, [r4], #1
    while(descriptor_entries--)
 8010450:	4546      	cmp	r6, r8
 8010452:	d014      	beq.n	801047e <_ux_utility_descriptor_parse+0x4a>
        switch(*descriptor_structure++)
 8010454:	f816 3b01 	ldrb.w	r3, [r6], #1
 8010458:	2b02      	cmp	r3, #2
 801045a:	d014      	beq.n	8010486 <_ux_utility_descriptor_parse+0x52>
 801045c:	2b04      	cmp	r3, #4
 801045e:	d1f3      	bne.n	8010448 <_ux_utility_descriptor_parse+0x14>
            while((ALIGN_TYPE) descriptor & 3u)
 8010460:	07a2      	lsls	r2, r4, #30
 8010462:	d003      	beq.n	801046c <_ux_utility_descriptor_parse+0x38>
                *descriptor++ =  0;
 8010464:	f804 5b01 	strb.w	r5, [r4], #1
            while((ALIGN_TYPE) descriptor & 3u)
 8010468:	07a2      	lsls	r2, r4, #30
 801046a:	d1fb      	bne.n	8010464 <_ux_utility_descriptor_parse+0x30>
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 801046c:	4638      	mov	r0, r7
 801046e:	f000 f815 	bl	801049c <_ux_utility_long_get>
    while(descriptor_entries--)
 8010472:	4546      	cmp	r6, r8
            raw_descriptor +=  4;
 8010474:	f107 0704 	add.w	r7, r7, #4
            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 8010478:	f844 0b04 	str.w	r0, [r4], #4
    while(descriptor_entries--)
 801047c:	d1ea      	bne.n	8010454 <_ux_utility_descriptor_parse+0x20>
        }
    }

    /* Return to caller.  */
    return;
}
 801047e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                *descriptor++ =  0;
 8010482:	f804 5b01 	strb.w	r5, [r4], #1
            while((ALIGN_TYPE) descriptor & 1u)
 8010486:	07e3      	lsls	r3, r4, #31
 8010488:	d4fb      	bmi.n	8010482 <_ux_utility_descriptor_parse+0x4e>
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 801048a:	4638      	mov	r0, r7
 801048c:	f000 f93c 	bl	8010708 <_ux_utility_short_get>
            raw_descriptor += 2;
 8010490:	3702      	adds	r7, #2
            *((USHORT *) descriptor) = (USHORT) _ux_utility_short_get(raw_descriptor);
 8010492:	f824 0b02 	strh.w	r0, [r4], #2
            break;
 8010496:	e7db      	b.n	8010450 <_ux_utility_descriptor_parse+0x1c>
 8010498:	4770      	bx	lr
 801049a:	bf00      	nop

0801049c <_ux_utility_long_get>:
    value |=  (ULONG)*address++ << 16;
    value |=  (ULONG)*address << 24;

    /* Return 32-bit value.  */
    return(value);
}
 801049c:	6800      	ldr	r0, [r0, #0]
 801049e:	4770      	bx	lr

080104a0 <_ux_utility_long_put>:
{

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 80104a0:	ea4f 2c11 	mov.w	ip, r1, lsr #8
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 80104a4:	0c0a      	lsrs	r2, r1, #16
    *address =    (UCHAR) ((value >> 24) & 0xff);
 80104a6:	0e0b      	lsrs	r3, r1, #24
    *address++ =  (UCHAR) (value & 0xff);
 80104a8:	7001      	strb	r1, [r0, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 80104aa:	f880 c001 	strb.w	ip, [r0, #1]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 80104ae:	7082      	strb	r2, [r0, #2]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 80104b0:	70c3      	strb	r3, [r0, #3]

    /* Return to caller.  */
    return;
}
 80104b2:	4770      	bx	lr

080104b4 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.3.0  */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 80104b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104b8:	4607      	mov	r7, r0
#ifdef UX_ENABLE_MEMORY_STATISTICS
UINT                index;
#endif

    /* Get the pool ptr */
    if (memory_cache_flag == UX_REGULAR_MEMORY)
 80104ba:	2900      	cmp	r1, #0
 80104bc:	d152      	bne.n	8010564 <_ux_utility_memory_allocate+0xb0>
    {
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR];
 80104be:	4b39      	ldr	r3, [pc, #228]	; (80105a4 <_ux_utility_memory_allocate+0xf0>)
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	681e      	ldr	r6, [r3, #0]
    {
        return(UX_NULL);
    }

    /* Check if pool_ptr is NX_NULL */
    if (pool_ptr == UX_NULL)
 80104c4:	2e00      	cmp	r6, #0
 80104c6:	d05e      	beq.n	8010586 <_ux_utility_memory_allocate+0xd2>
    {
        return(UX_NULL);
    }

    /* Check if the memory size requested is 0.  */
    if (memory_size_requested == 0)
 80104c8:	2a00      	cmp	r2, #0
 80104ca:	d060      	beq.n	801058e <_ux_utility_memory_allocate+0xda>
        memory_alignment = UX_NO_ALIGN;

#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 80104cc:	1ffb      	subs	r3, r7, #7
 80104ce:	3309      	adds	r3, #9
 80104d0:	f102 0207 	add.w	r2, r2, #7
 80104d4:	d94c      	bls.n	8010570 <_ux_utility_memory_allocate+0xbc>
       now is that the memory block might not be a size that is a multiple of 8, so we need
       to add the amount of memory required such that the memory buffer after the block has
       the correct alignment. For example, if the memory block has a size of 12, then we need
       to make sure it is placed on an 8-byte alignment that is after a 8-byte alignment so
       that the memory right after the memory block is 8-byte aligned (16).  */
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 80104d6:	f022 0807 	bic.w	r8, r2, #7
    memory_size_requested += (((ULONG)(UX_MEMORY_BLOCK_HEADER_SIZE + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN)) - (ULONG)UX_MEMORY_BLOCK_HEADER_SIZE);

    if (memory_alignment <= UX_ALIGN_MIN)
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested);
 80104da:	4641      	mov	r1, r8
 80104dc:	4630      	mov	r0, r6
 80104de:	f000 f897 	bl	8010610 <_ux_utility_memory_byte_pool_search>
 80104e2:	2707      	movs	r7, #7
 80104e4:	4605      	mov	r5, r0
    else
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);

    /* Check if we found a memory block.  */
    if (current_ptr == UX_NULL)
 80104e6:	2d00      	cmp	r5, #0
 80104e8:	d055      	beq.n	8010596 <_ux_utility_memory_allocate+0xe2>
        return(UX_NULL);
    }

    /* Pickup the next block's pointer.  */
    this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
    next_ptr =             *this_block_link_ptr;
 80104ea:	6829      	ldr	r1, [r5, #0]
    /* Calculate the number of bytes available in this block.  */
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) (UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE));
 80104ec:	f105 0408 	add.w	r4, r5, #8
    available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80104f0:	1b4a      	subs	r2, r1, r5

    /* In case we are not aligned  */
    if ((int_memory_buffer & memory_alignment) != 0)
 80104f2:	423c      	tst	r4, r7
    available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 80104f4:	f1a2 0208 	sub.w	r2, r2, #8
    if ((int_memory_buffer & memory_alignment) != 0)
 80104f8:	d012      	beq.n	8010520 <_ux_utility_memory_allocate+0x6c>
    {

        /* No, we need to align the memory buffer.  */
        int_memory_buffer += (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
        int_memory_buffer += memory_alignment;
 80104fa:	f107 0308 	add.w	r3, r7, #8
 80104fe:	441c      	add	r4, r3
        int_memory_buffer &=  ~((ALIGN_TYPE) memory_alignment);
 8010500:	ea24 0407 	bic.w	r4, r4, r7
        work_ptr =              UX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
        free_ptr =              UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
        *free_ptr =             UX_BYTE_BLOCK_FREE;

        /* Increase the total fragment counter.  */
        pool_ptr -> ux_byte_pool_fragments++;
 8010504:	6873      	ldr	r3, [r6, #4]
        *next_block_link_ptr =  *this_block_link_ptr;
 8010506:	f844 1c08 	str.w	r1, [r4, #-8]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 801050a:	4927      	ldr	r1, [pc, #156]	; (80105a8 <_ux_utility_memory_allocate+0xf4>)
        pool_ptr -> ux_byte_pool_fragments++;
 801050c:	3301      	adds	r3, #1
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 801050e:	f844 1c04 	str.w	r1, [r4, #-4]
        pool_ptr -> ux_byte_pool_fragments++;
 8010512:	6073      	str	r3, [r6, #4]
        int_memory_buffer -= (ALIGN_TYPE)UX_MEMORY_BLOCK_HEADER_SIZE;
 8010514:	f1a4 0308 	sub.w	r3, r4, #8

        /* Update the current pointer to point at the newly created block.  */
        *this_block_link_ptr =  next_ptr;
 8010518:	602b      	str	r3, [r5, #0]

        /* Calculate the available bytes.  */
        available_bytes -=  UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 801051a:	1b5d      	subs	r5, r3, r5
 801051c:	1b52      	subs	r2, r2, r5
        this_block_link_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
    }

    /* Adjust the pointer for the application.  */
    work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 801051e:	461d      	mov	r5, r3
    if ((available_bytes - memory_size_requested) >= ((ULONG) UX_BYTE_BLOCK_MIN))
 8010520:	eba2 0308 	sub.w	r3, r2, r8
 8010524:	2b13      	cmp	r3, #19
 8010526:	d90b      	bls.n	8010540 <_ux_utility_memory_allocate+0x8c>
        *this_block_link_ptr =  next_ptr;
 8010528:	4642      	mov	r2, r8
        *next_block_link_ptr =  *this_block_link_ptr;
 801052a:	6828      	ldr	r0, [r5, #0]
        pool_ptr -> ux_byte_pool_fragments++;
 801052c:	6871      	ldr	r1, [r6, #4]
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 801052e:	f108 0308 	add.w	r3, r8, #8
        *next_block_link_ptr =  *this_block_link_ptr;
 8010532:	50e8      	str	r0, [r5, r3]
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 8010534:	481c      	ldr	r0, [pc, #112]	; (80105a8 <_ux_utility_memory_allocate+0xf4>)
        next_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (memory_size_requested + UX_MEMORY_BLOCK_HEADER_SIZE));
 8010536:	442b      	add	r3, r5
        pool_ptr -> ux_byte_pool_fragments++;
 8010538:	3101      	adds	r1, #1
        *free_ptr =             UX_BYTE_BLOCK_FREE;
 801053a:	6058      	str	r0, [r3, #4]
        pool_ptr -> ux_byte_pool_fragments++;
 801053c:	6071      	str	r1, [r6, #4]
        *this_block_link_ptr =  next_ptr;
 801053e:	602b      	str	r3, [r5, #0]
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 8010540:	6833      	ldr	r3, [r6, #0]
    *this_block_link_ptr =  UX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8010542:	606e      	str	r6, [r5, #4]
    pool_ptr -> ux_byte_pool_available =  pool_ptr -> ux_byte_pool_available - (available_bytes + UX_MEMORY_BLOCK_HEADER_SIZE);
 8010544:	3b08      	subs	r3, #8
 8010546:	1a9b      	subs	r3, r3, r2
 8010548:	6033      	str	r3, [r6, #0]
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 801054a:	68b3      	ldr	r3, [r6, #8]

    /* Clear the memory block.  */
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 801054c:	2100      	movs	r1, #0
    if (current_ptr == pool_ptr -> ux_byte_pool_search)
 801054e:	42ab      	cmp	r3, r5
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 8010550:	bf08      	it	eq
 8010552:	682b      	ldreq	r3, [r5, #0]
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 8010554:	4620      	mov	r0, r4
        pool_ptr -> ux_byte_pool_search =  *this_block_link_ptr;
 8010556:	bf08      	it	eq
 8010558:	60b3      	streq	r3, [r6, #8]
    _ux_utility_memory_set(work_ptr, 0, available_bytes); /* Use case of memset is verified. */
 801055a:	f000 f8d1 	bl	8010700 <_ux_utility_memory_set>

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    return(work_ptr);
}
 801055e:	4620      	mov	r0, r4
 8010560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (memory_cache_flag == UX_CACHE_SAFE_MEMORY)
 8010564:	2901      	cmp	r1, #1
 8010566:	d10e      	bne.n	8010586 <_ux_utility_memory_allocate+0xd2>
        pool_ptr = _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_CACHE_SAFE];
 8010568:	4b0e      	ldr	r3, [pc, #56]	; (80105a4 <_ux_utility_memory_allocate+0xf0>)
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	685e      	ldr	r6, [r3, #4]
 801056e:	e7a9      	b.n	80104c4 <_ux_utility_memory_allocate+0x10>
    if (memory_alignment <= UX_ALIGN_MIN)
 8010570:	2f07      	cmp	r7, #7
    memory_size_requested =  (memory_size_requested + UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 8010572:	f022 0807 	bic.w	r8, r2, #7
    if (memory_alignment <= UX_ALIGN_MIN)
 8010576:	d0ae      	beq.n	80104d6 <_ux_utility_memory_allocate+0x22>
        current_ptr = _ux_utility_memory_byte_pool_search(pool_ptr, memory_size_requested + memory_alignment);
 8010578:	4630      	mov	r0, r6
 801057a:	eb07 0108 	add.w	r1, r7, r8
 801057e:	f000 f847 	bl	8010610 <_ux_utility_memory_byte_pool_search>
 8010582:	4605      	mov	r5, r0
 8010584:	e7af      	b.n	80104e6 <_ux_utility_memory_allocate+0x32>
        return(UX_NULL);
 8010586:	2400      	movs	r4, #0
}
 8010588:	4620      	mov	r0, r4
 801058a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return(UX_NULL);
 801058e:	4614      	mov	r4, r2
}
 8010590:	4620      	mov	r0, r4
 8010592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 8010596:	2212      	movs	r2, #18
 8010598:	2108      	movs	r1, #8
 801059a:	2002      	movs	r0, #2
 801059c:	f7ff fece 	bl	801033c <_ux_system_error_handler>
        return(UX_NULL);
 80105a0:	462c      	mov	r4, r5
 80105a2:	e7dc      	b.n	801055e <_ux_utility_memory_allocate+0xaa>
 80105a4:	2000ae3c 	.word	0x2000ae3c
 80105a8:	ffffeeee 	.word	0xffffeeee

080105ac <_ux_utility_memory_allocate_mulc_safe>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80105ac:	b14b      	cbz	r3, 80105c2 <_ux_utility_memory_allocate_mulc_safe+0x16>
{
 80105ae:	b410      	push	{r4}
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80105b0:	fba3 c402 	umull	ip, r4, r3, r2
 80105b4:	b94c      	cbnz	r4, 80105ca <_ux_utility_memory_allocate_mulc_safe+0x1e>
 80105b6:	fb03 f202 	mul.w	r2, r3, r2
}
 80105ba:	f85d 4b04 	ldr.w	r4, [sp], #4
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80105be:	f7ff bf79 	b.w	80104b4 <_ux_utility_memory_allocate>
 80105c2:	fb03 f202 	mul.w	r2, r3, r2
 80105c6:	f7ff bf75 	b.w	80104b4 <_ux_utility_memory_allocate>
}
 80105ca:	2000      	movs	r0, #0
 80105cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105d0:	4770      	bx	lr
 80105d2:	bf00      	nop

080105d4 <_ux_utility_memory_byte_pool_create>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_memory_byte_pool_create(UX_MEMORY_BYTE_POOL *pool_ptr, VOID *pool_start, ULONG pool_size)
{
 80105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d6:	4616      	mov	r6, r2
 80105d8:	460c      	mov	r4, r1
 80105da:	4605      	mov	r5, r0
    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 80105dc:	2702      	movs	r7, #2
    _ux_utility_memory_set((UCHAR *)pool_ptr, 0, sizeof(UX_MEMORY_BYTE_POOL)); /* Use case of memset is verified. */
 80105de:	2214      	movs	r2, #20
 80105e0:	2100      	movs	r1, #0
 80105e2:	f000 f88d 	bl	8010700 <_ux_utility_memory_set>
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80105e6:	f026 0203 	bic.w	r2, r6, #3
       field that contains either the constant UX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =  UX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80105ea:	18a3      	adds	r3, r4, r2
    block_indirect_ptr =   UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
    *block_indirect_ptr =  block_ptr;
    block_ptr =            UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
    block_ptr =            UX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
    free_ptr =             UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 80105ec:	4907      	ldr	r1, [pc, #28]	; (801060c <_ux_utility_memory_byte_pool_create+0x38>)
    pool_ptr -> ux_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80105ee:	f1a2 0608 	sub.w	r6, r2, #8
    pool_ptr -> ux_byte_pool_fragments =   ((UINT) 2);
 80105f2:	e9c5 6700 	strd	r6, r7, [r5]
    pool_ptr -> ux_byte_pool_size =    pool_size;
 80105f6:	e9c5 4203 	strd	r4, r2, [r5, #12]
    pool_ptr -> ux_byte_pool_search =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80105fa:	60ac      	str	r4, [r5, #8]
    *block_indirect_ptr =  temp_ptr;
 80105fc:	f843 5c04 	str.w	r5, [r3, #-4]
    *block_indirect_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8010600:	f843 4d08 	str.w	r4, [r3, #-8]!

    /* Return UX_SUCCESS.  */
    return(UX_SUCCESS);
}
 8010604:	2000      	movs	r0, #0
    *free_ptr =            UX_BYTE_BLOCK_FREE;
 8010606:	e9c4 3100 	strd	r3, r1, [r4]
}
 801060a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801060c:	ffffeeee 	.word	0xffffeeee

08010610 <_ux_utility_memory_byte_pool_search>:
/*                                                                        */
/*  10-31-2023     Yajun Xia                Initial Version 6.3.0         */
/*                                                                        */
/**************************************************************************/
UCHAR  *_ux_utility_memory_byte_pool_search(UX_MEMORY_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8010610:	b470      	push	{r4, r5, r6}
UCHAR               *work_ptr;
ULONG               total_theoretical_available;

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> ux_byte_pool_available + ((pool_ptr -> ux_byte_pool_fragments - 2) * UX_MEMORY_BLOCK_HEADER_SIZE);
 8010612:	e9d0 3600 	ldrd	r3, r6, [r0]
 8010616:	1eb2      	subs	r2, r6, #2
 8010618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    if (memory_size >= total_theoretical_available)
 801061c:	428b      	cmp	r3, r1
 801061e:	d913      	bls.n	8010648 <_ux_utility_memory_byte_pool_search+0x38>
 8010620:	4684      	mov	ip, r0
        /* Not enough memory, return a NULL pointer.  */
        return(UX_NULL);
    }

    /* Check if the search pointer is valid.  */
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8010622:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 8010626:	4298      	cmp	r0, r3
 8010628:	d30e      	bcc.n	8010648 <_ux_utility_memory_byte_pool_search+0x38>
        (pool_ptr -> ux_byte_pool_search > pool_ptr -> ux_byte_pool_start + pool_ptr -> ux_byte_pool_size))
 801062a:	f8dc 2010 	ldr.w	r2, [ip, #16]
 801062e:	4413      	add	r3, r2
    if ((pool_ptr -> ux_byte_pool_search < pool_ptr -> ux_byte_pool_start) ||
 8010630:	4298      	cmp	r0, r3
 8010632:	d809      	bhi.n	8010648 <_ux_utility_memory_byte_pool_search+0x38>
UINT                first_free_block_found =  UX_FALSE;
 8010634:	2500      	movs	r5, #0
    do
    {
        /* Check to see if this block is free.  */
        work_ptr =  UX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 8010636:	4c18      	ldr	r4, [pc, #96]	; (8010698 <_ux_utility_memory_byte_pool_search+0x88>)
    examine_blocks =   pool_ptr -> ux_byte_pool_fragments + ((UINT) 1);
 8010638:	1c73      	adds	r3, r6, #1
        if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 801063a:	6842      	ldr	r2, [r0, #4]
 801063c:	42a2      	cmp	r2, r4
 801063e:	d006      	beq.n	801064e <_ux_utility_memory_byte_pool_search+0x3e>
        else
        {

            /* Block is not free, move to next block.  */
            this_block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
            current_ptr =  *this_block_link_ptr;
 8010640:	6800      	ldr	r0, [r0, #0]
        }

        /* Another block has been searched... decrement counter.  */
        if (examine_blocks != ((UINT) 0))
 8010642:	b10b      	cbz	r3, 8010648 <_ux_utility_memory_byte_pool_search+0x38>
        {

            examine_blocks--;
        }

    } while(examine_blocks != ((UINT) 0));
 8010644:	3b01      	subs	r3, #1
 8010646:	d1f8      	bne.n	801063a <_ux_utility_memory_byte_pool_search+0x2a>

    /* If a block was found, just return. */
    if (available_bytes == ((ULONG) 0))
    {
        return(UX_NULL);
 8010648:	2000      	movs	r0, #0
    }

    /* Return the search pointer.  */
    return(current_ptr);
}
 801064a:	bc70      	pop	{r4, r5, r6}
 801064c:	4770      	bx	lr
            if (first_free_block_found == UX_FALSE)
 801064e:	b90d      	cbnz	r5, 8010654 <_ux_utility_memory_byte_pool_search+0x44>
                pool_ptr->ux_byte_pool_search =  current_ptr;
 8010650:	f8cc 0008 	str.w	r0, [ip, #8]
            next_ptr =             *this_block_link_ptr;
 8010654:	6805      	ldr	r5, [r0, #0]
            available_bytes =   UX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8010656:	1a2a      	subs	r2, r5, r0
            available_bytes =   available_bytes - UX_MEMORY_BLOCK_HEADER_SIZE;
 8010658:	3a08      	subs	r2, #8
            if (available_bytes >= memory_size)
 801065a:	4291      	cmp	r1, r2
 801065c:	d913      	bls.n	8010686 <_ux_utility_memory_byte_pool_search+0x76>
                if ((*free_ptr) == UX_BYTE_BLOCK_FREE)
 801065e:	686a      	ldr	r2, [r5, #4]
 8010660:	42a2      	cmp	r2, r4
 8010662:	d005      	beq.n	8010670 <_ux_utility_memory_byte_pool_search+0x60>
                    if (examine_blocks != ((UINT) 0))
 8010664:	2b00      	cmp	r3, #0
 8010666:	d0ef      	beq.n	8010648 <_ux_utility_memory_byte_pool_search+0x38>
                    current_ptr =  *next_block_link_ptr;
 8010668:	6828      	ldr	r0, [r5, #0]
                        examine_blocks--;
 801066a:	3b01      	subs	r3, #1
 801066c:	2501      	movs	r5, #1
 801066e:	e7e8      	b.n	8010642 <_ux_utility_memory_byte_pool_search+0x32>
                    *this_block_link_ptr =  *next_block_link_ptr;
 8010670:	682a      	ldr	r2, [r5, #0]
                    pool_ptr -> ux_byte_pool_fragments--;
 8010672:	3e01      	subs	r6, #1
                    *this_block_link_ptr =  *next_block_link_ptr;
 8010674:	6002      	str	r2, [r0, #0]
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 8010676:	f8dc 2008 	ldr.w	r2, [ip, #8]
                    pool_ptr -> ux_byte_pool_fragments--;
 801067a:	f8cc 6004 	str.w	r6, [ip, #4]
                    if (pool_ptr -> ux_byte_pool_search ==  next_ptr)
 801067e:	42aa      	cmp	r2, r5
 8010680:	d005      	beq.n	801068e <_ux_utility_memory_byte_pool_search+0x7e>
 8010682:	2501      	movs	r5, #1
 8010684:	e7dd      	b.n	8010642 <_ux_utility_memory_byte_pool_search+0x32>
    if (available_bytes == ((ULONG) 0))
 8010686:	2a00      	cmp	r2, #0
 8010688:	d0de      	beq.n	8010648 <_ux_utility_memory_byte_pool_search+0x38>
}
 801068a:	bc70      	pop	{r4, r5, r6}
 801068c:	4770      	bx	lr
                        pool_ptr -> ux_byte_pool_search =  current_ptr;
 801068e:	2501      	movs	r5, #1
 8010690:	f8cc 0008 	str.w	r0, [ip, #8]
 8010694:	e7d5      	b.n	8010642 <_ux_utility_memory_byte_pool_search+0x32>
 8010696:	bf00      	nop
 8010698:	ffffeeee 	.word	0xffffeeee

0801069c <_ux_utility_memory_copy>:
    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
    destination =  (UCHAR *) memory_destination;

    /* Loop to perform the copy.  */
    while(length--)
 801069c:	b13a      	cbz	r2, 80106ae <_ux_utility_memory_copy+0x12>
 801069e:	3801      	subs	r0, #1
 80106a0:	440a      	add	r2, r1
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 80106a2:	f811 3b01 	ldrb.w	r3, [r1], #1
    while(length--)
 80106a6:	4291      	cmp	r1, r2
        *destination++ =  *source++;
 80106a8:	f800 3f01 	strb.w	r3, [r0, #1]!
    while(length--)
 80106ac:	d1f9      	bne.n	80106a2 <_ux_utility_memory_copy+0x6>
    }

    /* Return to caller.  */
    return; 
}
 80106ae:	4770      	bx	lr

080106b0 <_ux_utility_memory_free>:
    /* Set the pool pointer to NULL.  */
    pool_ptr =  UX_NULL;

    /* Determine if the memory pointer is valid.  */
    work_ptr =  UX_VOID_TO_UCHAR_POINTER_CONVERT(memory);
    if (work_ptr != UX_NULL)
 80106b0:	b168      	cbz	r0, 80106ce <_ux_utility_memory_free+0x1e>
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);

        /* There is a pointer, pickup the pool pointer address.  */
        temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
        free_ptr =  UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
        if ((*free_ptr) != UX_BYTE_BLOCK_FREE)
 80106b2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80106b6:	4a10      	ldr	r2, [pc, #64]	; (80106f8 <_ux_utility_memory_free+0x48>)
 80106b8:	4293      	cmp	r3, r2
 80106ba:	d008      	beq.n	80106ce <_ux_utility_memory_free+0x1e>
            temp_ptr =  UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
            byte_pool_ptr = UX_UCHAR_TO_INDIRECT_BYTE_POOL_POINTER(temp_ptr);
            pool_ptr = *byte_pool_ptr;

            /* See if we have a valid pool pointer.  */
            if ((pool_ptr == UX_NULL) ||
 80106bc:	b13b      	cbz	r3, 80106ce <_ux_utility_memory_free+0x1e>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 80106be:	4a0f      	ldr	r2, [pc, #60]	; (80106fc <_ux_utility_memory_free+0x4c>)
 80106c0:	6812      	ldr	r2, [r2, #0]
            if ((pool_ptr == UX_NULL) ||
 80106c2:	6811      	ldr	r1, [r2, #0]
 80106c4:	4299      	cmp	r1, r3
 80106c6:	d007      	beq.n	80106d8 <_ux_utility_memory_free+0x28>
                ((pool_ptr != _ux_system -> ux_system_memory_byte_pool[UX_MEMORY_BYTE_POOL_REGULAR]) &&
 80106c8:	6852      	ldr	r2, [r2, #4]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d004      	beq.n	80106d8 <_ux_utility_memory_free+0x28>

                /* Release the protection.  */
                _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

                /* Error trap: maybe double free/memory issue here!  */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD,
 80106ce:	2219      	movs	r2, #25
 80106d0:	2108      	movs	r1, #8
 80106d2:	2002      	movs	r0, #2
 80106d4:	f7ff be32 	b.w	801033c <_ux_system_error_handler>
    /* At this point, we know that the pool pointer is valid.  */

    /* Release the memory.  */
    temp_ptr =   UX_UCHAR_POINTER_ADD(work_ptr, (sizeof(UCHAR *)));
    free_ptr =   UX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(temp_ptr);
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 80106d8:	4a07      	ldr	r2, [pc, #28]	; (80106f8 <_ux_utility_memory_free+0x48>)

    /* Update the number of available bytes in the pool.  */
    block_link_ptr =  UX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
    next_block_ptr =  *block_link_ptr;
    pool_ptr -> ux_byte_pool_available =
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 80106da:	f850 1c08 	ldr.w	r1, [r0, #-8]
    *free_ptr =  UX_BYTE_BLOCK_FREE;
 80106de:	f840 2c04 	str.w	r2, [r0, #-4]
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 80106e2:	681a      	ldr	r2, [r3, #0]
        work_ptr =  UX_UCHAR_POINTER_SUB(work_ptr, UX_MEMORY_BLOCK_HEADER_SIZE);
 80106e4:	3808      	subs	r0, #8
        pool_ptr -> ux_byte_pool_available + UX_UCHAR_POINTER_DIF(next_block_ptr, work_ptr);
 80106e6:	1a09      	subs	r1, r1, r0
 80106e8:	440a      	add	r2, r1
    pool_ptr -> ux_byte_pool_available =
 80106ea:	601a      	str	r2, [r3, #0]

    /* Determine if the free block is prior to current search pointer.  */
    if (work_ptr < (pool_ptr -> ux_byte_pool_search))
 80106ec:	689a      	ldr	r2, [r3, #8]
 80106ee:	4282      	cmp	r2, r0
    {

        /* Yes, update the search pointer to the released block.  */
        pool_ptr -> ux_byte_pool_search =  work_ptr;
 80106f0:	bf88      	it	hi
 80106f2:	6098      	strhi	r0, [r3, #8]
    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);

    /* Return to caller.  */
    return;
}
 80106f4:	4770      	bx	lr
 80106f6:	bf00      	nop
 80106f8:	ffffeeee 	.word	0xffffeeee
 80106fc:	2000ae3c 	.word	0x2000ae3c

08010700 <_ux_utility_memory_set>:

    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;

    /* Loop to set the memory.  */
    while(length--)
 8010700:	b10a      	cbz	r2, 8010706 <_ux_utility_memory_set+0x6>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8010702:	f000 b843 	b.w	801078c <memset>
    }

    /* Return to caller.  */
    return; 
}
 8010706:	4770      	bx	lr

08010708 <_ux_utility_short_get>:
    value =  (USHORT) *address++;
    value |=  (USHORT)(*address << 8);

    /* Return to caller.  */
    return((ULONG) value);
}
 8010708:	8800      	ldrh	r0, [r0, #0]
 801070a:	4770      	bx	lr

0801070c <_ux_utility_string_length_check>:
{

UINT    string_length;


    if (string == UX_NULL)
 801070c:	b1b8      	cbz	r0, 801073e <_ux_utility_string_length_check+0x32>
{
 801070e:	b508      	push	{r3, lr}
 8010710:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        return(UX_ERROR);

    string_length = 0;
 8010714:	2300      	movs	r3, #0
 8010716:	e002      	b.n	801071e <_ux_utility_string_length_check+0x12>
    {

        if (string[string_length] == '\0')
            break;

        string_length++;
 8010718:	3301      	adds	r3, #1
        if (string_length > max_string_length)
 801071a:	4293      	cmp	r3, r2
 801071c:	d806      	bhi.n	801072c <_ux_utility_string_length_check+0x20>
        if (string[string_length] == '\0')
 801071e:	f81c 0f01 	ldrb.w	r0, [ip, #1]!
 8010722:	2800      	cmp	r0, #0
 8010724:	d1f8      	bne.n	8010718 <_ux_utility_string_length_check+0xc>

            return(UX_ERROR);
        }
    }

    if (string_length_ptr)
 8010726:	b141      	cbz	r1, 801073a <_ux_utility_string_length_check+0x2e>
        *string_length_ptr = string_length;
 8010728:	600b      	str	r3, [r1, #0]

    return(UX_SUCCESS); 
}
 801072a:	bd08      	pop	{r3, pc}
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 801072c:	22ff      	movs	r2, #255	; 0xff
 801072e:	2108      	movs	r1, #8
 8010730:	2002      	movs	r0, #2
 8010732:	f7ff fe03 	bl	801033c <_ux_system_error_handler>
            return(UX_ERROR);
 8010736:	20ff      	movs	r0, #255	; 0xff
}
 8010738:	bd08      	pop	{r3, pc}
    return(UX_SUCCESS); 
 801073a:	4608      	mov	r0, r1
}
 801073c:	bd08      	pop	{r3, pc}
        return(UX_ERROR);
 801073e:	20ff      	movs	r0, #255	; 0xff
}
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop

08010744 <__libc_init_array>:
 8010744:	b570      	push	{r4, r5, r6, lr}
 8010746:	4e0d      	ldr	r6, [pc, #52]	; (801077c <__libc_init_array+0x38>)
 8010748:	4d0d      	ldr	r5, [pc, #52]	; (8010780 <__libc_init_array+0x3c>)
 801074a:	1b76      	subs	r6, r6, r5
 801074c:	10b6      	asrs	r6, r6, #2
 801074e:	d006      	beq.n	801075e <__libc_init_array+0x1a>
 8010750:	2400      	movs	r4, #0
 8010752:	3401      	adds	r4, #1
 8010754:	f855 3b04 	ldr.w	r3, [r5], #4
 8010758:	4798      	blx	r3
 801075a:	42a6      	cmp	r6, r4
 801075c:	d1f9      	bne.n	8010752 <__libc_init_array+0xe>
 801075e:	4e09      	ldr	r6, [pc, #36]	; (8010784 <__libc_init_array+0x40>)
 8010760:	f000 f906 	bl	8010970 <_init>
 8010764:	4d08      	ldr	r5, [pc, #32]	; (8010788 <__libc_init_array+0x44>)
 8010766:	1b76      	subs	r6, r6, r5
 8010768:	10b6      	asrs	r6, r6, #2
 801076a:	d006      	beq.n	801077a <__libc_init_array+0x36>
 801076c:	2400      	movs	r4, #0
 801076e:	3401      	adds	r4, #1
 8010770:	f855 3b04 	ldr.w	r3, [r5], #4
 8010774:	4798      	blx	r3
 8010776:	42a6      	cmp	r6, r4
 8010778:	d1f9      	bne.n	801076e <__libc_init_array+0x2a>
 801077a:	bd70      	pop	{r4, r5, r6, pc}
 801077c:	08011b48 	.word	0x08011b48
 8010780:	08011b48 	.word	0x08011b48
 8010784:	08011b50 	.word	0x08011b50
 8010788:	08011b48 	.word	0x08011b48

0801078c <memset>:
 801078c:	b570      	push	{r4, r5, r6, lr}
 801078e:	0786      	lsls	r6, r0, #30
 8010790:	d048      	beq.n	8010824 <memset+0x98>
 8010792:	1e54      	subs	r4, r2, #1
 8010794:	2a00      	cmp	r2, #0
 8010796:	d03f      	beq.n	8010818 <memset+0x8c>
 8010798:	b2ca      	uxtb	r2, r1
 801079a:	4603      	mov	r3, r0
 801079c:	e001      	b.n	80107a2 <memset+0x16>
 801079e:	3c01      	subs	r4, #1
 80107a0:	d33a      	bcc.n	8010818 <memset+0x8c>
 80107a2:	f803 2b01 	strb.w	r2, [r3], #1
 80107a6:	079d      	lsls	r5, r3, #30
 80107a8:	d1f9      	bne.n	801079e <memset+0x12>
 80107aa:	2c03      	cmp	r4, #3
 80107ac:	d92d      	bls.n	801080a <memset+0x7e>
 80107ae:	b2cd      	uxtb	r5, r1
 80107b0:	2c0f      	cmp	r4, #15
 80107b2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80107b6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80107ba:	d936      	bls.n	801082a <memset+0x9e>
 80107bc:	f1a4 0c10 	sub.w	ip, r4, #16
 80107c0:	f103 0e20 	add.w	lr, r3, #32
 80107c4:	f103 0210 	add.w	r2, r3, #16
 80107c8:	f02c 060f 	bic.w	r6, ip, #15
 80107cc:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 80107d0:	44b6      	add	lr, r6
 80107d2:	e942 5504 	strd	r5, r5, [r2, #-16]
 80107d6:	e942 5502 	strd	r5, r5, [r2, #-8]
 80107da:	3210      	adds	r2, #16
 80107dc:	4572      	cmp	r2, lr
 80107de:	d1f8      	bne.n	80107d2 <memset+0x46>
 80107e0:	f10c 0201 	add.w	r2, ip, #1
 80107e4:	f014 0f0c 	tst.w	r4, #12
 80107e8:	f004 0c0f 	and.w	ip, r4, #15
 80107ec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80107f0:	d013      	beq.n	801081a <memset+0x8e>
 80107f2:	f1ac 0304 	sub.w	r3, ip, #4
 80107f6:	f023 0303 	bic.w	r3, r3, #3
 80107fa:	3304      	adds	r3, #4
 80107fc:	4413      	add	r3, r2
 80107fe:	f842 5b04 	str.w	r5, [r2], #4
 8010802:	4293      	cmp	r3, r2
 8010804:	d1fb      	bne.n	80107fe <memset+0x72>
 8010806:	f00c 0403 	and.w	r4, ip, #3
 801080a:	b12c      	cbz	r4, 8010818 <memset+0x8c>
 801080c:	b2ca      	uxtb	r2, r1
 801080e:	441c      	add	r4, r3
 8010810:	f803 2b01 	strb.w	r2, [r3], #1
 8010814:	429c      	cmp	r4, r3
 8010816:	d1fb      	bne.n	8010810 <memset+0x84>
 8010818:	bd70      	pop	{r4, r5, r6, pc}
 801081a:	4664      	mov	r4, ip
 801081c:	4613      	mov	r3, r2
 801081e:	2c00      	cmp	r4, #0
 8010820:	d1f4      	bne.n	801080c <memset+0x80>
 8010822:	e7f9      	b.n	8010818 <memset+0x8c>
 8010824:	4603      	mov	r3, r0
 8010826:	4614      	mov	r4, r2
 8010828:	e7bf      	b.n	80107aa <memset+0x1e>
 801082a:	461a      	mov	r2, r3
 801082c:	46a4      	mov	ip, r4
 801082e:	e7e0      	b.n	80107f2 <memset+0x66>

08010830 <strlen>:
 8010830:	f020 0103 	bic.w	r1, r0, #3
 8010834:	f010 0003 	ands.w	r0, r0, #3
 8010838:	f1c0 0000 	rsb	r0, r0, #0
 801083c:	f851 3b04 	ldr.w	r3, [r1], #4
 8010840:	f100 0c04 	add.w	ip, r0, #4
 8010844:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8010848:	f06f 0200 	mvn.w	r2, #0
 801084c:	bf1c      	itt	ne
 801084e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8010852:	4313      	orrne	r3, r2
 8010854:	f04f 0c01 	mov.w	ip, #1
 8010858:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 801085c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8010860:	eba3 020c 	sub.w	r2, r3, ip
 8010864:	ea22 0203 	bic.w	r2, r2, r3
 8010868:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 801086c:	bf04      	itt	eq
 801086e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8010872:	3004      	addeq	r0, #4
 8010874:	d0f4      	beq.n	8010860 <strlen+0x30>
 8010876:	f1c2 0100 	rsb	r1, r2, #0
 801087a:	ea02 0201 	and.w	r2, r2, r1
 801087e:	fab2 f282 	clz	r2, r2
 8010882:	f1c2 021f 	rsb	r2, r2, #31
 8010886:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 801088a:	4770      	bx	lr

0801088c <register_fini>:
 801088c:	4b02      	ldr	r3, [pc, #8]	; (8010898 <register_fini+0xc>)
 801088e:	b113      	cbz	r3, 8010896 <register_fini+0xa>
 8010890:	4802      	ldr	r0, [pc, #8]	; (801089c <register_fini+0x10>)
 8010892:	f000 b805 	b.w	80108a0 <atexit>
 8010896:	4770      	bx	lr
 8010898:	00000000 	.word	0x00000000
 801089c:	080108ad 	.word	0x080108ad

080108a0 <atexit>:
 80108a0:	2300      	movs	r3, #0
 80108a2:	4601      	mov	r1, r0
 80108a4:	461a      	mov	r2, r3
 80108a6:	4618      	mov	r0, r3
 80108a8:	f000 b81a 	b.w	80108e0 <__register_exitproc>

080108ac <__libc_fini_array>:
 80108ac:	b538      	push	{r3, r4, r5, lr}
 80108ae:	4b08      	ldr	r3, [pc, #32]	; (80108d0 <__libc_fini_array+0x24>)
 80108b0:	4d08      	ldr	r5, [pc, #32]	; (80108d4 <__libc_fini_array+0x28>)
 80108b2:	1b5b      	subs	r3, r3, r5
 80108b4:	109c      	asrs	r4, r3, #2
 80108b6:	d007      	beq.n	80108c8 <__libc_fini_array+0x1c>
 80108b8:	3b04      	subs	r3, #4
 80108ba:	441d      	add	r5, r3
 80108bc:	3c01      	subs	r4, #1
 80108be:	f855 3904 	ldr.w	r3, [r5], #-4
 80108c2:	4798      	blx	r3
 80108c4:	2c00      	cmp	r4, #0
 80108c6:	d1f9      	bne.n	80108bc <__libc_fini_array+0x10>
 80108c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108cc:	f000 b856 	b.w	801097c <_fini>
 80108d0:	08011b54 	.word	0x08011b54
 80108d4:	08011b50 	.word	0x08011b50

080108d8 <__retarget_lock_acquire_recursive>:
 80108d8:	4770      	bx	lr
 80108da:	bf00      	nop

080108dc <__retarget_lock_release_recursive>:
 80108dc:	4770      	bx	lr
 80108de:	bf00      	nop

080108e0 <__register_exitproc>:
 80108e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108e4:	f8df a084 	ldr.w	sl, [pc, #132]	; 801096c <__register_exitproc+0x8c>
 80108e8:	4606      	mov	r6, r0
 80108ea:	4698      	mov	r8, r3
 80108ec:	460f      	mov	r7, r1
 80108ee:	f8da 0000 	ldr.w	r0, [sl]
 80108f2:	4691      	mov	r9, r2
 80108f4:	f7ff fff0 	bl	80108d8 <__retarget_lock_acquire_recursive>
 80108f8:	4b1b      	ldr	r3, [pc, #108]	; (8010968 <__register_exitproc+0x88>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8010900:	b334      	cbz	r4, 8010950 <__register_exitproc+0x70>
 8010902:	6865      	ldr	r5, [r4, #4]
 8010904:	2d1f      	cmp	r5, #31
 8010906:	dc28      	bgt.n	801095a <__register_exitproc+0x7a>
 8010908:	b95e      	cbnz	r6, 8010922 <__register_exitproc+0x42>
 801090a:	1c6b      	adds	r3, r5, #1
 801090c:	3502      	adds	r5, #2
 801090e:	f8da 0000 	ldr.w	r0, [sl]
 8010912:	6063      	str	r3, [r4, #4]
 8010914:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010918:	f7ff ffe0 	bl	80108dc <__retarget_lock_release_recursive>
 801091c:	2000      	movs	r0, #0
 801091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010922:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8010926:	2301      	movs	r3, #1
 8010928:	2e02      	cmp	r6, #2
 801092a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 801092e:	fa03 f305 	lsl.w	r3, r3, r5
 8010932:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8010936:	ea42 0203 	orr.w	r2, r2, r3
 801093a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 801093e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8010942:	d1e2      	bne.n	801090a <__register_exitproc+0x2a>
 8010944:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8010948:	4313      	orrs	r3, r2
 801094a:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 801094e:	e7dc      	b.n	801090a <__register_exitproc+0x2a>
 8010950:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8010954:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8010958:	e7d3      	b.n	8010902 <__register_exitproc+0x22>
 801095a:	f8da 0000 	ldr.w	r0, [sl]
 801095e:	f7ff ffbd 	bl	80108dc <__retarget_lock_release_recursive>
 8010962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010966:	e7da      	b.n	801091e <__register_exitproc+0x3e>
 8010968:	08011b3c 	.word	0x08011b3c
 801096c:	20000640 	.word	0x20000640

08010970 <_init>:
 8010970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010972:	bf00      	nop
 8010974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010976:	bc08      	pop	{r3}
 8010978:	469e      	mov	lr, r3
 801097a:	4770      	bx	lr

0801097c <_fini>:
 801097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801097e:	bf00      	nop
 8010980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010982:	bc08      	pop	{r3}
 8010984:	469e      	mov	lr, r3
 8010986:	4770      	bx	lr
