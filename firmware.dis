
firmware.elf:     file format elf32-littlearm


Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	e000      	b.n	8000262 <__do_global_dtors_aux+0x12>
 8000260:	bf00      	nop
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000b98 	.word	0x20000b98
 800026c:	00000000 	.word	0x00000000
 8000270:	080129e0 	.word	0x080129e0

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	e000      	b.n	8000282 <frame_dummy+0xe>
 8000280:	bf00      	nop
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000b9c 	.word	0x20000b9c
 800028c:	080129e0 	.word	0x080129e0

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_ldivmod>:
 8000b8c:	b97b      	cbnz	r3, 8000bae <__aeabi_ldivmod+0x22>
 8000b8e:	b972      	cbnz	r2, 8000bae <__aeabi_ldivmod+0x22>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bfbe      	ittt	lt
 8000b94:	2000      	movlt	r0, #0
 8000b96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b9a:	e006      	blt.n	8000baa <__aeabi_ldivmod+0x1e>
 8000b9c:	bf08      	it	eq
 8000b9e:	2800      	cmpeq	r0, #0
 8000ba0:	bf1c      	itt	ne
 8000ba2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000baa:	f000 ba03 	b.w	8000fb4 <__aeabi_idiv0>
 8000bae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	db09      	blt.n	8000bce <__aeabi_ldivmod+0x42>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db1a      	blt.n	8000bf4 <__aeabi_ldivmod+0x68>
 8000bbe:	f000 f883 	bl	8000cc8 <__udivmoddi4>
 8000bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bca:	b004      	add	sp, #16
 8000bcc:	4770      	bx	lr
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db1b      	blt.n	8000c10 <__aeabi_ldivmod+0x84>
 8000bd8:	f000 f876 	bl	8000cc8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	4252      	negs	r2, r2
 8000bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf2:	4770      	bx	lr
 8000bf4:	4252      	negs	r2, r2
 8000bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfa:	f000 f865 	bl	8000cc8 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4240      	negs	r0, r0
 8000c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f857 	bl	8000cc8 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4252      	negs	r2, r2
 8000c26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 b9b8 	b.w	8000fb4 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff41 	bl	8000aec <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcb7 	bl	8000608 <__aeabi_dmul>
 8000c9a:	f000 f98d 	bl	8000fb8 <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc38 	bl	8000514 <__aeabi_ui2d>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca8:	f7ff fcae 	bl	8000608 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf0 	bl	8000298 <__aeabi_dsub>
 8000cb8:	f000 f97e 	bl	8000fb8 <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d148      	bne.n	8000d68 <__udivmoddi4+0xa0>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d961      	bls.n	8000da0 <__udivmoddi4+0xd8>
 8000cdc:	fab2 f382 	clz	r3, r2
 8000ce0:	b143      	cbz	r3, 8000cf4 <__udivmoddi4+0x2c>
 8000ce2:	f1c3 0120 	rsb	r1, r3, #32
 8000ce6:	409f      	lsls	r7, r3
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	409c      	lsls	r4, r3
 8000cee:	fa20 f101 	lsr.w	r1, r0, r1
 8000cf2:	430f      	orrs	r7, r1
 8000cf4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d02:	fb01 7716 	mls	r7, r1, r6, r7
 8000d06:	fb06 f00e 	mul.w	r0, r6, lr
 8000d0a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x5c>
 8000d12:	eb1c 0202 	adds.w	r2, ip, r2
 8000d16:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x5a>
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f200 8137 	bhi.w	8000f90 <__udivmoddi4+0x2c8>
 8000d22:	463e      	mov	r6, r7
 8000d24:	1a12      	subs	r2, r2, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d2c:	fb01 2210 	mls	r2, r1, r0, r2
 8000d30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x86>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x84>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 811c 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	2600      	movs	r6, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0x9a>
 8000d5a:	40dc      	lsrs	r4, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e9c5 4300 	strd	r4, r3, [r5]
 8000d62:	4631      	mov	r1, r6
 8000d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0xb8>
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	f000 80fd 	beq.w	8000f6c <__udivmoddi4+0x2a4>
 8000d72:	2600      	movs	r6, #0
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	4630      	mov	r0, r6
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d80:	fab3 f683 	clz	r6, r3
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d14b      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	f0c0 80f2 	bcc.w	8000f72 <__udivmoddi4+0x2aa>
 8000d8e:	4282      	cmp	r2, r0
 8000d90:	f240 80ef 	bls.w	8000f72 <__udivmoddi4+0x2aa>
 8000d94:	4630      	mov	r0, r6
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e3      	beq.n	8000d62 <__udivmoddi4+0x9a>
 8000d9a:	e9c5 4700 	strd	r4, r7, [r5]
 8000d9e:	e7e0      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xdc>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f382 	clz	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 809d 	bne.w	8000ee8 <__udivmoddi4+0x220>
 8000dae:	1a89      	subs	r1, r1, r2
 8000db0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000db4:	b297      	uxth	r7, r2
 8000db6:	2601      	movs	r6, #1
 8000db8:	0c20      	lsrs	r0, r4, #16
 8000dba:	fbb1 f2fe 	udiv	r2, r1, lr
 8000dbe:	fb0e 1112 	mls	r1, lr, r2, r1
 8000dc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc6:	fb07 f002 	mul.w	r0, r7, r2
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d90f      	bls.n	8000dee <__udivmoddi4+0x126>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000dd6:	bf2c      	ite	cs
 8000dd8:	f04f 0901 	movcs.w	r9, #1
 8000ddc:	f04f 0900 	movcc.w	r9, #0
 8000de0:	4288      	cmp	r0, r1
 8000de2:	d903      	bls.n	8000dec <__udivmoddi4+0x124>
 8000de4:	f1b9 0f00 	cmp.w	r9, #0
 8000de8:	f000 80cf 	beq.w	8000f8a <__udivmoddi4+0x2c2>
 8000dec:	4642      	mov	r2, r8
 8000dee:	1a09      	subs	r1, r1, r0
 8000df0:	b2a4      	uxth	r4, r4
 8000df2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfa:	fb00 f707 	mul.w	r7, r0, r7
 8000dfe:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e02:	42a7      	cmp	r7, r4
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x150>
 8000e06:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14e>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f200 80b4 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e16:	4608      	mov	r0, r1
 8000e18:	1be4      	subs	r4, r4, r7
 8000e1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e1e:	e79b      	b.n	8000d58 <__udivmoddi4+0x90>
 8000e20:	f1c6 0720 	rsb	r7, r6, #32
 8000e24:	40b3      	lsls	r3, r6
 8000e26:	fa01 f406 	lsl.w	r4, r1, r6
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	40f9      	lsrs	r1, r7
 8000e30:	40b2      	lsls	r2, r6
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	fb09 1118 	mls	r1, r9, r8, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb08 f00e 	mul.w	r0, r8, lr
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d90f      	bls.n	8000e7e <__udivmoddi4+0x1b6>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0b01 	movcs.w	fp, #1
 8000e6c:	f04f 0b00 	movcc.w	fp, #0
 8000e70:	4288      	cmp	r0, r1
 8000e72:	d903      	bls.n	8000e7c <__udivmoddi4+0x1b4>
 8000e74:	f1bb 0f00 	cmp.w	fp, #0
 8000e78:	f000 808d 	beq.w	8000f96 <__udivmoddi4+0x2ce>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	1a09      	subs	r1, r1, r0
 8000e80:	b2a4      	uxth	r4, r4
 8000e82:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e86:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e8e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1de>
 8000e96:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e9e:	d201      	bcs.n	8000ea4 <__udivmoddi4+0x1dc>
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d87f      	bhi.n	8000fa4 <__udivmoddi4+0x2dc>
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eaa:	eba1 010e 	sub.w	r1, r1, lr
 8000eae:	fba0 9802 	umull	r9, r8, r0, r2
 8000eb2:	4541      	cmp	r1, r8
 8000eb4:	464c      	mov	r4, r9
 8000eb6:	46c6      	mov	lr, r8
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0x1f8>
 8000eba:	d106      	bne.n	8000eca <__udivmoddi4+0x202>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d204      	bcs.n	8000eca <__udivmoddi4+0x202>
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	ebb9 0402 	subs.w	r4, r9, r2
 8000ec6:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d070      	beq.n	8000fb0 <__udivmoddi4+0x2e8>
 8000ece:	1b1a      	subs	r2, r3, r4
 8000ed0:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed4:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed8:	fa01 f707 	lsl.w	r7, r1, r7
 8000edc:	40f1      	lsrs	r1, r6
 8000ede:	2600      	movs	r6, #0
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	e73c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	f1c3 0020 	rsb	r0, r3, #32
 8000ef0:	fa01 f203 	lsl.w	r2, r1, r3
 8000ef4:	fa21 f600 	lsr.w	r6, r1, r0
 8000ef8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000efc:	fa24 f100 	lsr.w	r1, r4, r0
 8000f00:	fa1f f78c 	uxth.w	r7, ip
 8000f04:	409c      	lsls	r4, r3
 8000f06:	4311      	orrs	r1, r2
 8000f08:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f0c:	0c0a      	lsrs	r2, r1, #16
 8000f0e:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f12:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f16:	fb00 f607 	mul.w	r6, r0, r7
 8000f1a:	4296      	cmp	r6, r2
 8000f1c:	d90e      	bls.n	8000f3c <__udivmoddi4+0x274>
 8000f1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f26:	bf2c      	ite	cs
 8000f28:	f04f 0901 	movcs.w	r9, #1
 8000f2c:	f04f 0900 	movcc.w	r9, #0
 8000f30:	4296      	cmp	r6, r2
 8000f32:	d902      	bls.n	8000f3a <__udivmoddi4+0x272>
 8000f34:	f1b9 0f00 	cmp.w	r9, #0
 8000f38:	d031      	beq.n	8000f9e <__udivmoddi4+0x2d6>
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	1b92      	subs	r2, r2, r6
 8000f3e:	b289      	uxth	r1, r1
 8000f40:	fbb2 f6fe 	udiv	r6, r2, lr
 8000f44:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f4c:	fb06 f207 	mul.w	r2, r6, r7
 8000f50:	428a      	cmp	r2, r1
 8000f52:	d907      	bls.n	8000f64 <__udivmoddi4+0x29c>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f5c:	d201      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000f5e:	428a      	cmp	r2, r1
 8000f60:	d823      	bhi.n	8000faa <__udivmoddi4+0x2e2>
 8000f62:	4646      	mov	r6, r8
 8000f64:	1a89      	subs	r1, r1, r2
 8000f66:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f6a:	e725      	b.n	8000db8 <__udivmoddi4+0xf0>
 8000f6c:	462e      	mov	r6, r5
 8000f6e:	4628      	mov	r0, r5
 8000f70:	e6f7      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000f72:	1a84      	subs	r4, r0, r2
 8000f74:	eb61 0303 	sbc.w	r3, r1, r3
 8000f78:	2001      	movs	r0, #1
 8000f7a:	461f      	mov	r7, r3
 8000f7c:	e70b      	b.n	8000d96 <__udivmoddi4+0xce>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e749      	b.n	8000e18 <__udivmoddi4+0x150>
 8000f84:	4464      	add	r4, ip
 8000f86:	3802      	subs	r0, #2
 8000f88:	e6e1      	b.n	8000d4e <__udivmoddi4+0x86>
 8000f8a:	3a02      	subs	r2, #2
 8000f8c:	4461      	add	r1, ip
 8000f8e:	e72e      	b.n	8000dee <__udivmoddi4+0x126>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e6c6      	b.n	8000d24 <__udivmoddi4+0x5c>
 8000f96:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e76f      	b.n	8000e7e <__udivmoddi4+0x1b6>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4462      	add	r2, ip
 8000fa2:	e7cb      	b.n	8000f3c <__udivmoddi4+0x274>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e77d      	b.n	8000ea6 <__udivmoddi4+0x1de>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	e7d9      	b.n	8000f64 <__udivmoddi4+0x29c>
 8000fb0:	462e      	mov	r6, r5
 8000fb2:	e6d6      	b.n	8000d62 <__udivmoddi4+0x9a>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <memcpy>:
 8000ff8:	4684      	mov	ip, r0
 8000ffa:	ea41 0300 	orr.w	r3, r1, r0
 8000ffe:	f013 0303 	ands.w	r3, r3, #3
 8001002:	d149      	bne.n	8001098 <memcpy+0xa0>
 8001004:	3a40      	subs	r2, #64	; 0x40
 8001006:	d323      	bcc.n	8001050 <memcpy+0x58>
 8001008:	680b      	ldr	r3, [r1, #0]
 800100a:	6003      	str	r3, [r0, #0]
 800100c:	684b      	ldr	r3, [r1, #4]
 800100e:	6043      	str	r3, [r0, #4]
 8001010:	688b      	ldr	r3, [r1, #8]
 8001012:	6083      	str	r3, [r0, #8]
 8001014:	68cb      	ldr	r3, [r1, #12]
 8001016:	60c3      	str	r3, [r0, #12]
 8001018:	690b      	ldr	r3, [r1, #16]
 800101a:	6103      	str	r3, [r0, #16]
 800101c:	694b      	ldr	r3, [r1, #20]
 800101e:	6143      	str	r3, [r0, #20]
 8001020:	698b      	ldr	r3, [r1, #24]
 8001022:	6183      	str	r3, [r0, #24]
 8001024:	69cb      	ldr	r3, [r1, #28]
 8001026:	61c3      	str	r3, [r0, #28]
 8001028:	6a0b      	ldr	r3, [r1, #32]
 800102a:	6203      	str	r3, [r0, #32]
 800102c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800102e:	6243      	str	r3, [r0, #36]	; 0x24
 8001030:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001032:	6283      	str	r3, [r0, #40]	; 0x28
 8001034:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001036:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001038:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800103a:	6303      	str	r3, [r0, #48]	; 0x30
 800103c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800103e:	6343      	str	r3, [r0, #52]	; 0x34
 8001040:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001042:	6383      	str	r3, [r0, #56]	; 0x38
 8001044:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001046:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001048:	3040      	adds	r0, #64	; 0x40
 800104a:	3140      	adds	r1, #64	; 0x40
 800104c:	3a40      	subs	r2, #64	; 0x40
 800104e:	d2db      	bcs.n	8001008 <memcpy+0x10>
 8001050:	3230      	adds	r2, #48	; 0x30
 8001052:	d30b      	bcc.n	800106c <memcpy+0x74>
 8001054:	680b      	ldr	r3, [r1, #0]
 8001056:	6003      	str	r3, [r0, #0]
 8001058:	684b      	ldr	r3, [r1, #4]
 800105a:	6043      	str	r3, [r0, #4]
 800105c:	688b      	ldr	r3, [r1, #8]
 800105e:	6083      	str	r3, [r0, #8]
 8001060:	68cb      	ldr	r3, [r1, #12]
 8001062:	60c3      	str	r3, [r0, #12]
 8001064:	3010      	adds	r0, #16
 8001066:	3110      	adds	r1, #16
 8001068:	3a10      	subs	r2, #16
 800106a:	d2f3      	bcs.n	8001054 <memcpy+0x5c>
 800106c:	320c      	adds	r2, #12
 800106e:	d305      	bcc.n	800107c <memcpy+0x84>
 8001070:	f851 3b04 	ldr.w	r3, [r1], #4
 8001074:	f840 3b04 	str.w	r3, [r0], #4
 8001078:	3a04      	subs	r2, #4
 800107a:	d2f9      	bcs.n	8001070 <memcpy+0x78>
 800107c:	3204      	adds	r2, #4
 800107e:	d008      	beq.n	8001092 <memcpy+0x9a>
 8001080:	07d2      	lsls	r2, r2, #31
 8001082:	bf1c      	itt	ne
 8001084:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001088:	f800 3b01 	strbne.w	r3, [r0], #1
 800108c:	d301      	bcc.n	8001092 <memcpy+0x9a>
 800108e:	880b      	ldrh	r3, [r1, #0]
 8001090:	8003      	strh	r3, [r0, #0]
 8001092:	4660      	mov	r0, ip
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2a08      	cmp	r2, #8
 800109a:	d313      	bcc.n	80010c4 <memcpy+0xcc>
 800109c:	078b      	lsls	r3, r1, #30
 800109e:	d0b1      	beq.n	8001004 <memcpy+0xc>
 80010a0:	f010 0303 	ands.w	r3, r0, #3
 80010a4:	d0ae      	beq.n	8001004 <memcpy+0xc>
 80010a6:	f1c3 0304 	rsb	r3, r3, #4
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	07db      	lsls	r3, r3, #31
 80010ae:	bf1c      	itt	ne
 80010b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80010b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80010b8:	d3a4      	bcc.n	8001004 <memcpy+0xc>
 80010ba:	f831 3b02 	ldrh.w	r3, [r1], #2
 80010be:	f820 3b02 	strh.w	r3, [r0], #2
 80010c2:	e79f      	b.n	8001004 <memcpy+0xc>
 80010c4:	3a04      	subs	r2, #4
 80010c6:	d3d9      	bcc.n	800107c <memcpy+0x84>
 80010c8:	3a01      	subs	r2, #1
 80010ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010ce:	f800 3b01 	strb.w	r3, [r0], #1
 80010d2:	d2f9      	bcs.n	80010c8 <memcpy+0xd0>
 80010d4:	780b      	ldrb	r3, [r1, #0]
 80010d6:	7003      	strb	r3, [r0, #0]
 80010d8:	784b      	ldrb	r3, [r1, #1]
 80010da:	7043      	strb	r3, [r0, #1]
 80010dc:	788b      	ldrb	r3, [r1, #2]
 80010de:	7083      	strb	r3, [r0, #2]
 80010e0:	4660      	mov	r0, ip
 80010e2:	4770      	bx	lr

080010e4 <strcmp>:
 80010e4:	ea80 0c01 	eor.w	ip, r0, r1
 80010e8:	f01c 0f03 	tst.w	ip, #3
 80010ec:	d137      	bne.n	800115e <strcmp+0x7a>
 80010ee:	f010 0c03 	ands.w	ip, r0, #3
 80010f2:	f020 0003 	bic.w	r0, r0, #3
 80010f6:	f021 0103 	bic.w	r1, r1, #3
 80010fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80010fe:	bf08      	it	eq
 8001100:	f851 3b04 	ldreq.w	r3, [r1], #4
 8001104:	d00e      	beq.n	8001124 <strcmp+0x40>
 8001106:	f08c 0c03 	eor.w	ip, ip, #3
 800110a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800110e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8001112:	fa23 fc0c 	lsr.w	ip, r3, ip
 8001116:	f851 3b04 	ldr.w	r3, [r1], #4
 800111a:	ea42 020c 	orr.w	r2, r2, ip
 800111e:	ea43 030c 	orr.w	r3, r3, ip
 8001122:	bf00      	nop
 8001124:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 8001128:	429a      	cmp	r2, r3
 800112a:	bf01      	itttt	eq
 800112c:	ea2c 0c02 	biceq.w	ip, ip, r2
 8001130:	f01c 3f80 	tsteq.w	ip, #2155905152	; 0x80808080
 8001134:	f850 2b04 	ldreq.w	r2, [r0], #4
 8001138:	f851 3b04 	ldreq.w	r3, [r1], #4
 800113c:	d0f2      	beq.n	8001124 <strcmp+0x40>
 800113e:	ea4f 6002 	mov.w	r0, r2, lsl #24
 8001142:	ea4f 2212 	mov.w	r2, r2, lsr #8
 8001146:	2801      	cmp	r0, #1
 8001148:	bf28      	it	cs
 800114a:	ebb0 6f03 	cmpcs.w	r0, r3, lsl #24
 800114e:	bf08      	it	eq
 8001150:	0a1b      	lsreq	r3, r3, #8
 8001152:	d0f4      	beq.n	800113e <strcmp+0x5a>
 8001154:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8001158:	0e00      	lsrs	r0, r0, #24
 800115a:	1ac0      	subs	r0, r0, r3
 800115c:	4770      	bx	lr
 800115e:	f010 0f03 	tst.w	r0, #3
 8001162:	d00a      	beq.n	800117a <strcmp+0x96>
 8001164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800116c:	2a01      	cmp	r2, #1
 800116e:	bf28      	it	cs
 8001170:	429a      	cmpcs	r2, r3
 8001172:	d0f4      	beq.n	800115e <strcmp+0x7a>
 8001174:	eba2 0003 	sub.w	r0, r2, r3
 8001178:	4770      	bx	lr
 800117a:	f84d 5d04 	str.w	r5, [sp, #-4]!
 800117e:	f850 2b04 	ldr.w	r2, [r0], #4
 8001182:	f001 0503 	and.w	r5, r1, #3
 8001186:	f021 0103 	bic.w	r1, r1, #3
 800118a:	f851 3b04 	ldr.w	r3, [r1], #4
 800118e:	2d02      	cmp	r5, #2
 8001190:	d026      	beq.n	80011e0 <strcmp+0xfc>
 8001192:	d84d      	bhi.n	8001230 <strcmp+0x14c>
 8001194:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
 8001198:	ebb5 2f13 	cmp.w	r5, r3, lsr #8
 800119c:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80011a0:	ea2c 0c02 	bic.w	ip, ip, r2
 80011a4:	d10d      	bne.n	80011c2 <strcmp+0xde>
 80011a6:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80011aa:	bf08      	it	eq
 80011ac:	f851 3b04 	ldreq.w	r3, [r1], #4
 80011b0:	d10a      	bne.n	80011c8 <strcmp+0xe4>
 80011b2:	ea85 0502 	eor.w	r5, r5, r2
 80011b6:	ebb5 6f03 	cmp.w	r5, r3, lsl #24
 80011ba:	d10c      	bne.n	80011d6 <strcmp+0xf2>
 80011bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80011c0:	e7e8      	b.n	8001194 <strcmp+0xb0>
 80011c2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80011c6:	e05b      	b.n	8001280 <strcmp+0x19c>
 80011c8:	f03c 4c7f 	bics.w	ip, ip, #4278190080	; 0xff000000
 80011cc:	d154      	bne.n	8001278 <strcmp+0x194>
 80011ce:	780b      	ldrb	r3, [r1, #0]
 80011d0:	ea4f 6512 	mov.w	r5, r2, lsr #24
 80011d4:	e054      	b.n	8001280 <strcmp+0x19c>
 80011d6:	ea4f 6512 	mov.w	r5, r2, lsr #24
 80011da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 80011de:	e04f      	b.n	8001280 <strcmp+0x19c>
 80011e0:	ea4f 4502 	mov.w	r5, r2, lsl #16
 80011e4:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 80011e8:	ea4f 4515 	mov.w	r5, r5, lsr #16
 80011ec:	ea2c 0c02 	bic.w	ip, ip, r2
 80011f0:	ebb5 4f13 	cmp.w	r5, r3, lsr #16
 80011f4:	d118      	bne.n	8001228 <strcmp+0x144>
 80011f6:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 80011fa:	bf08      	it	eq
 80011fc:	f851 3b04 	ldreq.w	r3, [r1], #4
 8001200:	d107      	bne.n	8001212 <strcmp+0x12e>
 8001202:	ea85 0502 	eor.w	r5, r5, r2
 8001206:	ebb5 4f03 	cmp.w	r5, r3, lsl #16
 800120a:	d109      	bne.n	8001220 <strcmp+0x13c>
 800120c:	f850 2b04 	ldr.w	r2, [r0], #4
 8001210:	e7e6      	b.n	80011e0 <strcmp+0xfc>
 8001212:	ea5f 4c0c 	movs.w	ip, ip, lsl #16
 8001216:	d12f      	bne.n	8001278 <strcmp+0x194>
 8001218:	880b      	ldrh	r3, [r1, #0]
 800121a:	ea4f 4512 	mov.w	r5, r2, lsr #16
 800121e:	e02f      	b.n	8001280 <strcmp+0x19c>
 8001220:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8001224:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8001228:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800122c:	e028      	b.n	8001280 <strcmp+0x19c>
 800122e:	bf00      	nop
 8001230:	f002 05ff 	and.w	r5, r2, #255	; 0xff
 8001234:	ebb5 6f13 	cmp.w	r5, r3, lsr #24
 8001238:	f1a2 3c01 	sub.w	ip, r2, #16843009	; 0x1010101
 800123c:	ea2c 0c02 	bic.w	ip, ip, r2
 8001240:	d10d      	bne.n	800125e <strcmp+0x17a>
 8001242:	f01c 3c80 	ands.w	ip, ip, #2155905152	; 0x80808080
 8001246:	bf08      	it	eq
 8001248:	f851 3b04 	ldreq.w	r3, [r1], #4
 800124c:	d10a      	bne.n	8001264 <strcmp+0x180>
 800124e:	ea85 0502 	eor.w	r5, r5, r2
 8001252:	ebb5 2f03 	cmp.w	r5, r3, lsl #8
 8001256:	d10a      	bne.n	800126e <strcmp+0x18a>
 8001258:	f850 2b04 	ldr.w	r2, [r0], #4
 800125c:	e7e8      	b.n	8001230 <strcmp+0x14c>
 800125e:	ea4f 6313 	mov.w	r3, r3, lsr #24
 8001262:	e00d      	b.n	8001280 <strcmp+0x19c>
 8001264:	f012 0fff 	tst.w	r2, #255	; 0xff
 8001268:	d006      	beq.n	8001278 <strcmp+0x194>
 800126a:	f851 3b04 	ldr.w	r3, [r1], #4
 800126e:	ea4f 2512 	mov.w	r5, r2, lsr #8
 8001272:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001276:	e003      	b.n	8001280 <strcmp+0x19c>
 8001278:	f04f 0000 	mov.w	r0, #0
 800127c:	bc20      	pop	{r5}
 800127e:	4770      	bx	lr
 8001280:	f005 02ff 	and.w	r2, r5, #255	; 0xff
 8001284:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8001288:	2801      	cmp	r0, #1
 800128a:	bf28      	it	cs
 800128c:	4290      	cmpcs	r0, r2
 800128e:	bf04      	itt	eq
 8001290:	0a2d      	lsreq	r5, r5, #8
 8001292:	0a1b      	lsreq	r3, r3, #8
 8001294:	d0f4      	beq.n	8001280 <strcmp+0x19c>
 8001296:	eba2 0000 	sub.w	r0, r2, r0
 800129a:	bc20      	pop	{r5}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop

080012a0 <__aeabi_dcmpun>:
 80012a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80012a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012a8:	d102      	bne.n	80012b0 <__aeabi_dcmpun+0x10>
 80012aa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80012ae:	d10a      	bne.n	80012c6 <__aeabi_dcmpun+0x26>
 80012b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80012b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80012b8:	d102      	bne.n	80012c0 <__aeabi_dcmpun+0x20>
 80012ba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80012be:	d102      	bne.n	80012c6 <__aeabi_dcmpun+0x26>
 80012c0:	f04f 0000 	mov.w	r0, #0
 80012c4:	4770      	bx	lr
 80012c6:	f04f 0001 	mov.w	r0, #1
 80012ca:	4770      	bx	lr

080012cc <CH2_UART4_RxTaskFunction>:
			c++;
		}
}

static void CH2_UART4_RxTaskFunction( void *pvParameters )	
{
 80012cc:	b5f0      	push	{r4, r5, r6, r7, lr}
		uint8_t c = 0;
 80012ce:	2600      	movs	r6, #0
{
 80012d0:	b091      	sub	sp, #68	; 0x44
		int cnt = 0;
		char buf[50];
		int err;

		struct Dev_Mgmt *pdev = GetUARTDevice("uart4");
 80012d2:	4814      	ldr	r0, [pc, #80]	; (8001324 <CH2_UART4_RxTaskFunction+0x58>)
		uint8_t c = 0;
 80012d4:	f88d 600b 	strb.w	r6, [sp, #11]
		struct Dev_Mgmt *pdev = GetUARTDevice("uart4");
 80012d8:	f000 fd02 	bl	8001ce0 <GetUARTDevice>

		pdev->Init(pdev, 115200, 'N', 8, 1);
 80012dc:	2301      	movs	r3, #1
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	224e      	movs	r2, #78	; 0x4e
 80012e2:	2308      	movs	r3, #8
 80012e4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80012e8:	6844      	ldr	r4, [r0, #4]
		struct Dev_Mgmt *pdev = GetUARTDevice("uart4");
 80012ea:	4605      	mov	r5, r0
			/* 接收数据 */
			err = pdev->RecvByte(pdev, &c, 200);
			
			if (err == 0)		
			{
				sprintf(buf, "Recv : 0x%02x, Cnt : %d", c, cnt++);
 80012ec:	4f0e      	ldr	r7, [pc, #56]	; (8001328 <CH2_UART4_RxTaskFunction+0x5c>)
		pdev->Init(pdev, 115200, 'N', 8, 1);
 80012ee:	47a0      	blx	r4
			err = pdev->RecvByte(pdev, &c, 200);
 80012f0:	68ec      	ldr	r4, [r5, #12]
 80012f2:	22c8      	movs	r2, #200	; 0xc8
 80012f4:	4628      	mov	r0, r5
 80012f6:	f10d 010b 	add.w	r1, sp, #11
 80012fa:	47a0      	blx	r4
			if (err == 0)		
 80012fc:	4604      	mov	r4, r0
 80012fe:	2800      	cmp	r0, #0
 8001300:	d1f6      	bne.n	80012f0 <CH2_UART4_RxTaskFunction+0x24>
				sprintf(buf, "Recv : 0x%02x, Cnt : %d", c, cnt++);
 8001302:	4633      	mov	r3, r6
 8001304:	4639      	mov	r1, r7
 8001306:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800130a:	a803      	add	r0, sp, #12
 800130c:	f00b fe68 	bl	800cfe0 <sprintf>
				Draw_String(0, 0, buf, 0x0000ff00, 0);
 8001310:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001314:	4621      	mov	r1, r4
 8001316:	4620      	mov	r0, r4
 8001318:	aa03      	add	r2, sp, #12
 800131a:	9400      	str	r4, [sp, #0]
				sprintf(buf, "Recv : 0x%02x, Cnt : %d", c, cnt++);
 800131c:	3601      	adds	r6, #1
				Draw_String(0, 0, buf, 0x0000ff00, 0);
 800131e:	f000 fdb1 	bl	8001e84 <Draw_String>
 8001322:	e7e5      	b.n	80012f0 <CH2_UART4_RxTaskFunction+0x24>
 8001324:	080129f8 	.word	0x080129f8
 8001328:	08012a00 	.word	0x08012a00

0800132c <CH1_UART2_TxTaskFunction>:
		uint8_t c = 0;
 800132c:	2300      	movs	r3, #0
{	
 800132e:	b530      	push	{r4, r5, lr}
		struct Dev_Mgmt *pdev = GetUARTDevice("uart2");
 8001330:	480f      	ldr	r0, [pc, #60]	; (8001370 <CH1_UART2_TxTaskFunction+0x44>)
{	
 8001332:	b085      	sub	sp, #20
		pdev->Init(pdev, 115200, 'N', 8, 1);
 8001334:	2501      	movs	r5, #1
		uint8_t c = 0;
 8001336:	f88d 300f 	strb.w	r3, [sp, #15]
		struct Dev_Mgmt *pdev = GetUARTDevice("uart2");
 800133a:	f000 fcd1 	bl	8001ce0 <GetUARTDevice>
		pdev->Init(pdev, 115200, 'N', 8, 1);
 800133e:	9500      	str	r5, [sp, #0]
 8001340:	2308      	movs	r3, #8
 8001342:	224e      	movs	r2, #78	; 0x4e
 8001344:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8001348:	6845      	ldr	r5, [r0, #4]
		struct Dev_Mgmt *pdev = GetUARTDevice("uart2");
 800134a:	4604      	mov	r4, r0
		pdev->Init(pdev, 115200, 'N', 8, 1);
 800134c:	47a8      	blx	r5
			pdev->Send(pdev, &c, 1, 100);
 800134e:	2364      	movs	r3, #100	; 0x64
 8001350:	2201      	movs	r2, #1
 8001352:	f10d 010f 	add.w	r1, sp, #15
 8001356:	4620      	mov	r0, r4
 8001358:	68a5      	ldr	r5, [r4, #8]
 800135a:	47a8      	blx	r5
			vTaskDelay(500);
 800135c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001360:	f00a fdd8 	bl	800bf14 <vTaskDelay>
			c++;
 8001364:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8001368:	3301      	adds	r3, #1
 800136a:	f88d 300f 	strb.w	r3, [sp, #15]
		while (1)
 800136e:	e7ee      	b.n	800134e <CH1_UART2_TxTaskFunction+0x22>
 8001370:	08012a18 	.word	0x08012a18

08001374 <SPILCDTask>:
		vTaskDelay(500);
	}
}

void SPILCDTask(void *argument)
{
 8001374:	b508      	push	{r3, lr}

	while(1)
	{
		vTaskDelay(500);
 8001376:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800137a:	f00a fdcb 	bl	800bf14 <vTaskDelay>
	while(1)
 800137e:	e7fa      	b.n	8001376 <SPILCDTask+0x2>

08001380 <StartDefaultTask>:
{
 8001380:	b508      	push	{r3, lr}
		bsp_led_toggle();
 8001382:	f000 f9ad 	bl	80016e0 <bsp_led_toggle>
		vTaskDelay(500);
 8001386:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800138a:	f00a fdc3 	bl	800bf14 <vTaskDelay>
	while(1)
 800138e:	e7f8      	b.n	8001382 <StartDefaultTask+0x2>

08001390 <vApplicationStackOverflowHook>:
    while(1);
 8001390:	e7fe      	b.n	8001390 <vApplicationStackOverflowHook>
 8001392:	bf00      	nop

08001394 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001394:	b530      	push	{r4, r5, lr}
	ret = xTaskCreate(
 8001396:	2400      	movs	r4, #0
 8001398:	2509      	movs	r5, #9
void MX_FREERTOS_Init(void) {
 800139a:	b083      	sub	sp, #12
	ret = xTaskCreate(
 800139c:	22c8      	movs	r2, #200	; 0xc8
 800139e:	4623      	mov	r3, r4
 80013a0:	e9cd 5400 	strd	r5, r4, [sp]
 80013a4:	4931      	ldr	r1, [pc, #196]	; (800146c <MX_FREERTOS_Init+0xd8>)
 80013a6:	4832      	ldr	r0, [pc, #200]	; (8001470 <MX_FREERTOS_Init+0xdc>)
 80013a8:	f00a fd7e 	bl	800bea8 <xTaskCreate>
	if (ret != pdPASS)
 80013ac:	2801      	cmp	r0, #1
 80013ae:	d00c      	beq.n	80013ca <MX_FREERTOS_Init+0x36>
		rt_kprintf("StartDefaultTask failed! \r\n");
 80013b0:	4830      	ldr	r0, [pc, #192]	; (8001474 <MX_FREERTOS_Init+0xe0>)
 80013b2:	f000 ff0b 	bl	80021cc <rt_kprintf>
	    Draw_String(0, 0, "StartDefaultTask failed!", 0x0000ff00, 0);
 80013b6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80013ba:	4621      	mov	r1, r4
 80013bc:	4a2e      	ldr	r2, [pc, #184]	; (8001478 <MX_FREERTOS_Init+0xe4>)
 80013be:	4620      	mov	r0, r4
 80013c0:	9400      	str	r4, [sp, #0]
 80013c2:	f000 fd5f 	bl	8001e84 <Draw_String>
		Error_Handler();
 80013c6:	f000 fffd 	bl	80023c4 <Error_Handler>
	ret = xTaskCreate(
 80013ca:	2400      	movs	r4, #0
 80013cc:	2509      	movs	r5, #9
 80013ce:	22c8      	movs	r2, #200	; 0xc8
 80013d0:	4623      	mov	r3, r4
 80013d2:	e9cd 5400 	strd	r5, r4, [sp]
 80013d6:	4929      	ldr	r1, [pc, #164]	; (800147c <MX_FREERTOS_Init+0xe8>)
 80013d8:	4829      	ldr	r0, [pc, #164]	; (8001480 <MX_FREERTOS_Init+0xec>)
 80013da:	f00a fd65 	bl	800bea8 <xTaskCreate>
	if (ret != pdPASS)
 80013de:	2801      	cmp	r0, #1
 80013e0:	d00c      	beq.n	80013fc <MX_FREERTOS_Init+0x68>
		rt_kprintf("SPILCDTask failed! \r\n");
 80013e2:	4828      	ldr	r0, [pc, #160]	; (8001484 <MX_FREERTOS_Init+0xf0>)
 80013e4:	f000 fef2 	bl	80021cc <rt_kprintf>
		Draw_String(0, 0, "SPILCDTask failed!", 0x0000ff00, 0);
 80013e8:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80013ec:	4621      	mov	r1, r4
 80013ee:	4a26      	ldr	r2, [pc, #152]	; (8001488 <MX_FREERTOS_Init+0xf4>)
 80013f0:	4620      	mov	r0, r4
 80013f2:	9400      	str	r4, [sp, #0]
 80013f4:	f000 fd46 	bl	8001e84 <Draw_String>
		Error_Handler();
 80013f8:	f000 ffe4 	bl	80023c4 <Error_Handler>
	ret = xTaskCreate(
 80013fc:	2400      	movs	r4, #0
 80013fe:	2509      	movs	r5, #9
 8001400:	22c8      	movs	r2, #200	; 0xc8
 8001402:	4623      	mov	r3, r4
 8001404:	e9cd 5400 	strd	r5, r4, [sp]
 8001408:	4920      	ldr	r1, [pc, #128]	; (800148c <MX_FREERTOS_Init+0xf8>)
 800140a:	4821      	ldr	r0, [pc, #132]	; (8001490 <MX_FREERTOS_Init+0xfc>)
 800140c:	f00a fd4c 	bl	800bea8 <xTaskCreate>
	if (ret != pdPASS)
 8001410:	2801      	cmp	r0, #1
 8001412:	d00c      	beq.n	800142e <MX_FREERTOS_Init+0x9a>
		rt_kprintf("CH1_UART2_TxTaskFunction failed! \r\n");
 8001414:	481f      	ldr	r0, [pc, #124]	; (8001494 <MX_FREERTOS_Init+0x100>)
 8001416:	f000 fed9 	bl	80021cc <rt_kprintf>
		Draw_String(0, 0, "CH1_UART2_TxTaskFunction failed!", 0x0000ff00, 0);
 800141a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800141e:	4621      	mov	r1, r4
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <MX_FREERTOS_Init+0x104>)
 8001422:	4620      	mov	r0, r4
 8001424:	9400      	str	r4, [sp, #0]
 8001426:	f000 fd2d 	bl	8001e84 <Draw_String>
		Error_Handler();
 800142a:	f000 ffcb 	bl	80023c4 <Error_Handler>
	ret = xTaskCreate(
 800142e:	2400      	movs	r4, #0
 8001430:	2509      	movs	r5, #9
 8001432:	22c8      	movs	r2, #200	; 0xc8
 8001434:	4623      	mov	r3, r4
 8001436:	e9cd 5400 	strd	r5, r4, [sp]
 800143a:	4918      	ldr	r1, [pc, #96]	; (800149c <MX_FREERTOS_Init+0x108>)
 800143c:	4818      	ldr	r0, [pc, #96]	; (80014a0 <MX_FREERTOS_Init+0x10c>)
 800143e:	f00a fd33 	bl	800bea8 <xTaskCreate>
	if (ret != pdPASS)
 8001442:	2801      	cmp	r0, #1
 8001444:	d101      	bne.n	800144a <MX_FREERTOS_Init+0xb6>
}
 8001446:	b003      	add	sp, #12
 8001448:	bd30      	pop	{r4, r5, pc}
		rt_kprintf("CH2_UART4_RxTaskFunction failed! \r\n");
 800144a:	4816      	ldr	r0, [pc, #88]	; (80014a4 <MX_FREERTOS_Init+0x110>)
 800144c:	f000 febe 	bl	80021cc <rt_kprintf>
		Draw_String(0, 0, "CH2_UART4_RxTaskFunction failed!", 0x0000ff00, 0);
 8001450:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001454:	4621      	mov	r1, r4
 8001456:	4620      	mov	r0, r4
 8001458:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_FREERTOS_Init+0x114>)
 800145a:	9400      	str	r4, [sp, #0]
 800145c:	f000 fd12 	bl	8001e84 <Draw_String>
}
 8001460:	b003      	add	sp, #12
 8001462:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		Error_Handler();
 8001466:	f000 bfad 	b.w	80023c4 <Error_Handler>
 800146a:	bf00      	nop
 800146c:	08012a20 	.word	0x08012a20
 8001470:	08001381 	.word	0x08001381
 8001474:	08012a34 	.word	0x08012a34
 8001478:	08012a50 	.word	0x08012a50
 800147c:	08012a6c 	.word	0x08012a6c
 8001480:	08001375 	.word	0x08001375
 8001484:	08012a78 	.word	0x08012a78
 8001488:	08012a90 	.word	0x08012a90
 800148c:	08012aa4 	.word	0x08012aa4
 8001490:	0800132d 	.word	0x0800132d
 8001494:	08012ab8 	.word	0x08012ab8
 8001498:	08012adc 	.word	0x08012adc
 800149c:	08012b00 	.word	0x08012b00
 80014a0:	080012cd 	.word	0x080012cd
 80014a4:	08012b14 	.word	0x08012b14
 80014a8:	08012b38 	.word	0x08012b38

080014ac <MX_SPI2_Init>:
#include "draw.h"

SPI_HandleTypeDef hspi2;

void MX_SPI2_Init(void)
{
 80014ac:	b538      	push	{r3, r4, r5, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014ae:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014b2:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <MX_SPI2_Init+0x58>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b6:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014b8:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014bc:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014c0:	e9c0 3105 	strd	r3, r1, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x7;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014c4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c8:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014cc:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d0:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014d8:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014dc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014e0:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80014e4:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80014e8:	6603      	str	r3, [r0, #96]	; 0x60
  hspi2.Instance = SPI2;
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <MX_SPI2_Init+0x5c>)
  hspi2.Init.CRCPolynomial = 0x7;
 80014ec:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014ee:	6341      	str	r1, [r0, #52]	; 0x34
  hspi2.Instance = SPI2;
 80014f0:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014f2:	f008 fc91 	bl	8009e18 <HAL_SPI_Init>
 80014f6:	b900      	cbnz	r0, 80014fa <MX_SPI2_Init+0x4e>
  {
    Error_Handler();
  }
}
 80014f8:	bd38      	pop	{r3, r4, r5, pc}
 80014fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80014fe:	f000 bf61 	b.w	80023c4 <Error_Handler>
 8001502:	bf00      	nop
 8001504:	20000bb4 	.word	0x20000bb4
 8001508:	40003800 	.word	0x40003800

0800150c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	2100      	movs	r1, #0
{
 8001510:	4604      	mov	r4, r0
 8001512:	b0cb      	sub	sp, #300	; 0x12c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001514:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001518:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151a:	e9cd 1103 	strd	r1, r1, [sp, #12]
 800151e:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8001522:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001524:	f00b fcec 	bl	800cf00 <memset>
  if(spiHandle->Instance==SPI2)
 8001528:	4b28      	ldr	r3, [pc, #160]	; (80015cc <HAL_SPI_MspInit+0xc0>)
 800152a:	6822      	ldr	r2, [r4, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d001      	beq.n	8001534 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001530:	b04b      	add	sp, #300	; 0x12c
 8001532:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001538:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800153c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001540:	f004 ff06 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	2800      	cmp	r0, #0
 8001546:	d13d      	bne.n	80015c4 <HAL_SPI_MspInit+0xb8>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800154a:	2106      	movs	r1, #6
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001550:	2405      	movs	r4, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001552:	4b1f      	ldr	r3, [pc, #124]	; (80015d0 <HAL_SPI_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	481f      	ldr	r0, [pc, #124]	; (80015d4 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001556:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800155a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800155e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001562:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001566:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800156a:	9200      	str	r2, [sp, #0]
 800156c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001572:	f042 0204 	orr.w	r2, r2, #4
 8001576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800157a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800157e:	f002 0204 	and.w	r2, r2, #4
 8001582:	9201      	str	r2, [sp, #4]
 8001584:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800158a:	433a      	orrs	r2, r7
 800158c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001594:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001596:	403b      	ands	r3, r7
 8001598:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	e9cd 7604 	strd	r7, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015a4:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a6:	f003 ff0b 	bl	80053c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	480a      	ldr	r0, [pc, #40]	; (80015d8 <HAL_SPI_MspInit+0xcc>)
 80015b0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015b8:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015ba:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f003 ff00 	bl	80053c0 <HAL_GPIO_Init>
}
 80015c0:	b04b      	add	sp, #300	; 0x12c
 80015c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80015c4:	f000 fefe 	bl	80023c4 <Error_Handler>
 80015c8:	e7be      	b.n	8001548 <HAL_SPI_MspInit+0x3c>
 80015ca:	bf00      	nop
 80015cc:	40003800 	.word	0x40003800
 80015d0:	44020c00 	.word	0x44020c00
 80015d4:	42020800 	.word	0x42020800
 80015d8:	42020400 	.word	0x42020400

080015dc <bsp_lcd_init>:
  }
}


void bsp_lcd_init(void)
{
 80015dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	2400      	movs	r4, #0
{
 80015e0:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80015e6:	e9cd 4405 	strd	r4, r4, [sp, #20]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	4b20      	ldr	r3, [pc, #128]	; (800166c <bsp_lcd_init+0x90>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_GPIOD_CLK_ENABLE();
	
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80015f2:	4f1f      	ldr	r7, [pc, #124]	; (8001670 <bsp_lcd_init+0x94>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80015f4:	f042 0202 	orr.w	r2, r2, #2
 80015f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80015fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001600:	4e1c      	ldr	r6, [pc, #112]	; (8001674 <bsp_lcd_init+0x98>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	f002 0202 	and.w	r2, r2, #2
 8001606:	9201      	str	r2, [sp, #4]
 8001608:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 800160e:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001610:	f042 0208 	orr.w	r2, r2, #8
 8001614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 800161c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 8001624:	f44f 6101 	mov.w	r1, #2064	; 0x810
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001628:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 800162a:	f004 f80b 	bl	8005644 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800162e:	4622      	mov	r2, r4
 8001630:	4630      	mov	r0, r6
 8001632:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001636:	f004 f805 	bl	8005644 <HAL_GPIO_WritePin>
	
	/*Configure GPIO pins : PB11 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 800163c:	f44f 6301 	mov.w	r3, #2064	; 0x810
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	4638      	mov	r0, r7
 8001642:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 8001644:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f003 feb8 	bl	80053c0 <HAL_GPIO_Init>
	
	/*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001650:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 8001656:	4630      	mov	r0, r6
 8001658:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800165e:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 8001662:	f003 fead 	bl	80053c0 <HAL_GPIO_Init>
  
  
}
 8001666:	b009      	add	sp, #36	; 0x24
 8001668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800166a:	bf00      	nop
 800166c:	44020c00 	.word	0x44020c00
 8001670:	42020400 	.word	0x42020400
 8001674:	42020c00 	.word	0x42020c00

08001678 <bsp_led_init>:
#include "bsp_led.h"

//PC12
void bsp_led_init()
{
 8001678:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 800167a:	2400      	movs	r4, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();	
	__HAL_RCC_GPIOC_CLK_ENABLE();

	
	/*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800167c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2601      	movs	r6, #1
{
 8001682:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8001684:	e9cd 4405 	strd	r4, r4, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <bsp_led_init+0x60>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 800168a:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 800168c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001690:	a903      	add	r1, sp, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800169a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169e:	480f      	ldr	r0, [pc, #60]	; (80016dc <bsp_led_init+0x64>)
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 80016a0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80016a4:	9201      	str	r2, [sp, #4]
 80016a6:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016a8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80016ac:	f042 0204 	orr.w	r2, r2, #4
 80016b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80016b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b8:	9604      	str	r6, [sp, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	9302      	str	r3, [sp, #8]
 80016c0:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80016c2:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c4:	f003 fe7c 	bl	80053c0 <HAL_GPIO_Init>
	
	/*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);	
 80016c8:	4622      	mov	r2, r4
 80016ca:	4629      	mov	r1, r5
 80016cc:	4803      	ldr	r0, [pc, #12]	; (80016dc <bsp_led_init+0x64>)
 80016ce:	f003 ffb9 	bl	8005644 <HAL_GPIO_WritePin>
}
 80016d2:	b008      	add	sp, #32
 80016d4:	bd70      	pop	{r4, r5, r6, pc}
 80016d6:	bf00      	nop
 80016d8:	44020c00 	.word	0x44020c00
 80016dc:	42020800 	.word	0x42020800

080016e0 <bsp_led_toggle>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}

void bsp_led_toggle()
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 80016e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016e4:	4801      	ldr	r0, [pc, #4]	; (80016ec <bsp_led_toggle+0xc>)
 80016e6:	f003 bfb3 	b.w	8005650 <HAL_GPIO_TogglePin>
 80016ea:	bf00      	nop
 80016ec:	42020800 	.word	0x42020800

080016f0 <UART_Rx_Start>:
/*******************************************************************************************/
//下面是封装串口的代码,需要和FreeRTOS做结合
/*******************************************************************************************/

int UART_Rx_Start(struct Dev_Mgmt *pDev, int baud, char parity, int data_bit, int stop_bit)
{
 80016f0:	b538      	push	{r3, r4, r5, lr}
	PUART_Data pdata = pDev->priv_data;
 80016f2:	6944      	ldr	r4, [r0, #20]
	if(!pdata->rxQueue) {
 80016f4:	6865      	ldr	r5, [r4, #4]
 80016f6:	b10d      	cbz	r5, 80016fc <UART_Rx_Start+0xc>
		pdata->rxQueue = xQueueCreate(UART_RX_BUF_LEN, 1);
		pdata->txSemaphore = xSemaphoreCreateBinary();
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
	}
	return 0;
}
 80016f8:	2000      	movs	r0, #0
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
		pdata->rxQueue = xQueueCreate(UART_RX_BUF_LEN, 1);
 80016fc:	462a      	mov	r2, r5
 80016fe:	2101      	movs	r1, #1
 8001700:	20c8      	movs	r0, #200	; 0xc8
 8001702:	f001 f931 	bl	8002968 <xQueueGenericCreate>
 8001706:	4603      	mov	r3, r0
		pdata->txSemaphore = xSemaphoreCreateBinary();
 8001708:	4629      	mov	r1, r5
		pdata->rxQueue = xQueueCreate(UART_RX_BUF_LEN, 1);
 800170a:	6063      	str	r3, [r4, #4]
		pdata->txSemaphore = xSemaphoreCreateBinary();
 800170c:	2203      	movs	r2, #3
 800170e:	2001      	movs	r0, #1
 8001710:	f001 f92a 	bl	8002968 <xQueueGenericCreate>
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001714:	4621      	mov	r1, r4
		pdata->txSemaphore = xSemaphoreCreateBinary();
 8001716:	60a0      	str	r0, [r4, #8]
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001718:	22c8      	movs	r2, #200	; 0xc8
 800171a:	f851 0b0c 	ldr.w	r0, [r1], #12
 800171e:	f009 ff8d 	bl	800b63c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001722:	2000      	movs	r0, #0
 8001724:	bd38      	pop	{r3, r4, r5, pc}
 8001726:	bf00      	nop

08001728 <UART_Send>:
int UART_Send(struct Dev_Mgmt *pDev, uint8_t *datas, uint32_t len, int timeout)
{
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	461c      	mov	r4, r3
	PUART_Data pdata = pDev->priv_data;
 800172c:	6945      	ldr	r5, [r0, #20]
	HAL_UART_Transmit_DMA(pdata->huart, datas, len);
 800172e:	b292      	uxth	r2, r2
 8001730:	6828      	ldr	r0, [r5, #0]
 8001732:	f009 f961 	bl	800a9f8 <HAL_UART_Transmit_DMA>
	
	if (pdTRUE == xSemaphoreTake(pdata->txSemaphore, timeout))
 8001736:	4621      	mov	r1, r4
 8001738:	68a8      	ldr	r0, [r5, #8]
 800173a:	f001 fb45 	bl	8002dc8 <xQueueSemaphoreTake>
		return 0;
	else
		return -1;
}
 800173e:	3801      	subs	r0, #1
 8001740:	bf18      	it	ne
 8001742:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001746:	bd38      	pop	{r3, r4, r5, pc}

08001748 <UART_GetData>:
int UART_GetData(struct Dev_Mgmt *pDev, uint8_t *data, int timeout)
{
 8001748:	b508      	push	{r3, lr}
	PUART_Data pdata = pDev->priv_data;
		
	if (pdPASS == xQueueReceive(pdata->rxQueue, data, timeout))
 800174a:	6943      	ldr	r3, [r0, #20]
 800174c:	6858      	ldr	r0, [r3, #4]
 800174e:	f001 fa9f 	bl	8002c90 <xQueueReceive>
		return 0;
	else
		return -1;

}
 8001752:	3801      	subs	r0, #1
 8001754:	bf18      	it	ne
 8001756:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800175a:	bd08      	pop	{r3, pc}

0800175c <UART_Flush>:
int UART_Flush(struct Dev_Mgmt *pDev)
{
 800175c:	b530      	push	{r4, r5, lr}
	PUART_Data pdata = pDev->priv_data;
		
	int cnt = 0;
 800175e:	2400      	movs	r4, #0
	PUART_Data pdata = pDev->priv_data;
 8001760:	6945      	ldr	r5, [r0, #20]
{
 8001762:	b083      	sub	sp, #12
 8001764:	e000      	b.n	8001768 <UART_Flush+0xc>
	
	while (1)
	{
		if (pdPASS != xQueueReceive(pdata->rxQueue, &data, 0))
			break;
		cnt++;
 8001766:	3401      	adds	r4, #1
		if (pdPASS != xQueueReceive(pdata->rxQueue, &data, 0))
 8001768:	2200      	movs	r2, #0
 800176a:	6868      	ldr	r0, [r5, #4]
 800176c:	f10d 0107 	add.w	r1, sp, #7
 8001770:	f001 fa8e 	bl	8002c90 <xQueueReceive>
 8001774:	2801      	cmp	r0, #1
 8001776:	d0f6      	beq.n	8001766 <UART_Flush+0xa>
	}
	return cnt;
}
 8001778:	4620      	mov	r0, r4
 800177a:	b003      	add	sp, #12
 800177c:	bd30      	pop	{r4, r5, pc}
 800177e:	bf00      	nop

08001780 <MX_UART4_Init>:
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001780:	2300      	movs	r3, #0
  huart4.Init.BaudRate = 115200;
 8001782:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001786:	220c      	movs	r2, #12
{
 8001788:	b510      	push	{r4, lr}
  huart4.Instance = UART4;
 800178a:	481d      	ldr	r0, [pc, #116]	; (8001800 <MX_UART4_Init+0x80>)
 800178c:	4c1d      	ldr	r4, [pc, #116]	; (8001804 <MX_UART4_Init+0x84>)
  huart4.Init.BaudRate = 115200;
 800178e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001792:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001796:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800179e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart4.Instance = UART4;
 80017a2:	6004      	str	r4, [r0, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017a4:	f009 fe08 	bl	800b3b8 <HAL_UART_Init>
 80017a8:	b970      	cbnz	r0, 80017c8 <MX_UART4_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017aa:	2100      	movs	r1, #0
 80017ac:	4814      	ldr	r0, [pc, #80]	; (8001800 <MX_UART4_Init+0x80>)
 80017ae:	f009 fef1 	bl	800b594 <HAL_UARTEx_SetTxFifoThreshold>
 80017b2:	b988      	cbnz	r0, 80017d8 <MX_UART4_Init+0x58>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b4:	2100      	movs	r1, #0
 80017b6:	4812      	ldr	r0, [pc, #72]	; (8001800 <MX_UART4_Init+0x80>)
 80017b8:	f009 ff16 	bl	800b5e8 <HAL_UARTEx_SetRxFifoThreshold>
 80017bc:	b9a0      	cbnz	r0, 80017e8 <MX_UART4_Init+0x68>
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80017be:	4810      	ldr	r0, [pc, #64]	; (8001800 <MX_UART4_Init+0x80>)
 80017c0:	f009 fec4 	bl	800b54c <HAL_UARTEx_EnableFifoMode>
 80017c4:	b9b8      	cbnz	r0, 80017f6 <MX_UART4_Init+0x76>
}
 80017c6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80017c8:	f000 fdfc 	bl	80023c4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017cc:	2100      	movs	r1, #0
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_UART4_Init+0x80>)
 80017d0:	f009 fee0 	bl	800b594 <HAL_UARTEx_SetTxFifoThreshold>
 80017d4:	2800      	cmp	r0, #0
 80017d6:	d0ed      	beq.n	80017b4 <MX_UART4_Init+0x34>
    Error_Handler();
 80017d8:	f000 fdf4 	bl	80023c4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017dc:	2100      	movs	r1, #0
 80017de:	4808      	ldr	r0, [pc, #32]	; (8001800 <MX_UART4_Init+0x80>)
 80017e0:	f009 ff02 	bl	800b5e8 <HAL_UARTEx_SetRxFifoThreshold>
 80017e4:	2800      	cmp	r0, #0
 80017e6:	d0ea      	beq.n	80017be <MX_UART4_Init+0x3e>
    Error_Handler();
 80017e8:	f000 fdec 	bl	80023c4 <Error_Handler>
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80017ec:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_UART4_Init+0x80>)
 80017ee:	f009 fead 	bl	800b54c <HAL_UARTEx_EnableFifoMode>
 80017f2:	2800      	cmp	r0, #0
 80017f4:	d0e7      	beq.n	80017c6 <MX_UART4_Init+0x46>
}
 80017f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80017fa:	f000 bde3 	b.w	80023c4 <Error_Handler>
 80017fe:	bf00      	nop
 8001800:	20000eb8 	.word	0x20000eb8
 8001804:	40004c00 	.word	0x40004c00

08001808 <MX_USART2_UART_Init>:
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001808:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 800180a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 800180e:	220c      	movs	r2, #12
{
 8001810:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001812:	481d      	ldr	r0, [pc, #116]	; (8001888 <MX_USART2_UART_Init+0x80>)
 8001814:	4c1d      	ldr	r4, [pc, #116]	; (800188c <MX_USART2_UART_Init+0x84>)
  huart2.Init.BaudRate = 115200;
 8001816:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 800181a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001826:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart2.Instance = USART2;
 800182a:	6004      	str	r4, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800182c:	f009 fdc4 	bl	800b3b8 <HAL_UART_Init>
 8001830:	b970      	cbnz	r0, 8001850 <MX_USART2_UART_Init+0x48>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001832:	2100      	movs	r1, #0
 8001834:	4814      	ldr	r0, [pc, #80]	; (8001888 <MX_USART2_UART_Init+0x80>)
 8001836:	f009 fead 	bl	800b594 <HAL_UARTEx_SetTxFifoThreshold>
 800183a:	b988      	cbnz	r0, 8001860 <MX_USART2_UART_Init+0x58>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183c:	2100      	movs	r1, #0
 800183e:	4812      	ldr	r0, [pc, #72]	; (8001888 <MX_USART2_UART_Init+0x80>)
 8001840:	f009 fed2 	bl	800b5e8 <HAL_UARTEx_SetRxFifoThreshold>
 8001844:	b9a0      	cbnz	r0, 8001870 <MX_USART2_UART_Init+0x68>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001846:	4810      	ldr	r0, [pc, #64]	; (8001888 <MX_USART2_UART_Init+0x80>)
 8001848:	f009 fe80 	bl	800b54c <HAL_UARTEx_EnableFifoMode>
 800184c:	b9b8      	cbnz	r0, 800187e <MX_USART2_UART_Init+0x76>
}
 800184e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001850:	f000 fdb8 	bl	80023c4 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001854:	2100      	movs	r1, #0
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <MX_USART2_UART_Init+0x80>)
 8001858:	f009 fe9c 	bl	800b594 <HAL_UARTEx_SetTxFifoThreshold>
 800185c:	2800      	cmp	r0, #0
 800185e:	d0ed      	beq.n	800183c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001860:	f000 fdb0 	bl	80023c4 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001864:	2100      	movs	r1, #0
 8001866:	4808      	ldr	r0, [pc, #32]	; (8001888 <MX_USART2_UART_Init+0x80>)
 8001868:	f009 febe 	bl	800b5e8 <HAL_UARTEx_SetRxFifoThreshold>
 800186c:	2800      	cmp	r0, #0
 800186e:	d0ea      	beq.n	8001846 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001870:	f000 fda8 	bl	80023c4 <Error_Handler>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001874:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_USART2_UART_Init+0x80>)
 8001876:	f009 fe69 	bl	800b54c <HAL_UARTEx_EnableFifoMode>
 800187a:	2800      	cmp	r0, #0
 800187c:	d0e7      	beq.n	800184e <MX_USART2_UART_Init+0x46>
}
 800187e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001882:	f000 bd9f 	b.w	80023c4 <Error_Handler>
 8001886:	bf00      	nop
 8001888:	20000e24 	.word	0x20000e24
 800188c:	40004400 	.word	0x40004400

08001890 <HAL_UART_MspInit>:
{
 8001890:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001892:	2100      	movs	r1, #0
{
 8001894:	4604      	mov	r4, r0
 8001896:	b0cd      	sub	sp, #308	; 0x134
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001898:	f44f 7284 	mov.w	r2, #264	; 0x108
 800189c:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189e:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80018a2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80018a6:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a8:	f00b fb2a 	bl	800cf00 <memset>
  if(uartHandle->Instance==UART4)
 80018ac:	4a93      	ldr	r2, [pc, #588]	; (8001afc <HAL_UART_MspInit+0x26c>)
 80018ae:	6823      	ldr	r3, [r4, #0]
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d005      	beq.n	80018c0 <HAL_UART_MspInit+0x30>
  else if(uartHandle->Instance==USART2)
 80018b4:	4a92      	ldr	r2, [pc, #584]	; (8001b00 <HAL_UART_MspInit+0x270>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	f000 8084 	beq.w	80019c4 <HAL_UART_MspInit+0x134>
}
 80018bc:	b04d      	add	sp, #308	; 0x134
 80018be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018c0:	2208      	movs	r2, #8
 80018c2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018c4:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80018c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ca:	f004 fd41 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	2800      	cmp	r0, #0
 80018d0:	f040 8101 	bne.w	8001ad6 <HAL_UART_MspInit+0x246>
    __HAL_RCC_UART4_CLK_ENABLE();
 80018d4:	4b8b      	ldr	r3, [pc, #556]	; (8001b04 <HAL_UART_MspInit+0x274>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2600      	movs	r6, #0
    __HAL_RCC_UART4_CLK_ENABLE();
 80018d8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018dc:	2708      	movs	r7, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 80018de:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80018e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80018e6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	4887      	ldr	r0, [pc, #540]	; (8001b08 <HAL_UART_MspInit+0x278>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80018ec:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80018f0:	9201      	str	r2, [sp, #4]
 80018f2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fa:	f042 0201 	orr.w	r2, r2, #1
 80018fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001902:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001906:	4d81      	ldr	r5, [pc, #516]	; (8001b0c <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	9302      	str	r3, [sp, #8]
 800190e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001910:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	e9cd 6607 	strd	r6, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001918:	e9cd 3205 	strd	r3, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800191c:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f003 fd4f 	bl	80053c0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 8001922:	4b7b      	ldr	r3, [pc, #492]	; (8001b10 <HAL_UART_MspInit+0x280>)
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART4_TX;
 8001924:	221c      	movs	r2, #28
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001926:	f44f 6180 	mov.w	r1, #1024	; 0x400
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 800192a:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 800192c:	2301      	movs	r3, #1
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 800192e:	4628      	mov	r0, r5
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001930:	e9c5 6605 	strd	r6, r6, [r5, #20]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001934:	e9c5 6607 	strd	r6, r6, [r5, #28]
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001938:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 800193c:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001940:	60ae      	str	r6, [r5, #8]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001942:	612f      	str	r7, [r5, #16]
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001944:	636e      	str	r6, [r5, #52]	; 0x34
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001946:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART4_TX;
 8001948:	606a      	str	r2, [r5, #4]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 800194a:	f003 f8cd 	bl	8004ae8 <HAL_DMA_Init>
 800194e:	2800      	cmp	r0, #0
 8001950:	f040 80be 	bne.w	8001ad0 <HAL_UART_MspInit+0x240>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001954:	2110      	movs	r1, #16
 8001956:	486d      	ldr	r0, [pc, #436]	; (8001b0c <HAL_UART_MspInit+0x27c>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel3);
 8001958:	67e5      	str	r5, [r4, #124]	; 0x7c
 800195a:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 800195c:	f003 fcac 	bl	80052b8 <HAL_DMA_ConfigChannelAttributes>
 8001960:	2800      	cmp	r0, #0
 8001962:	f040 80b2 	bne.w	8001aca <HAL_UART_MspInit+0x23a>
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001966:	2300      	movs	r3, #0
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001968:	2201      	movs	r2, #1
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_UART4_RX;
 800196a:	201b      	movs	r0, #27
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 800196c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001970:	4d68      	ldr	r5, [pc, #416]	; (8001b14 <HAL_UART_MspInit+0x284>)
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001972:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 8001976:	e9c5 3303 	strd	r3, r3, [r5, #12]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800197a:	e9c5 3306 	strd	r3, r3, [r5, #24]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 800197e:	e9c5 3208 	strd	r3, r2, [r5, #32]
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001982:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8001986:	e9c5 330c 	strd	r3, r3, [r5, #48]	; 0x30
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800198a:	4b63      	ldr	r3, [pc, #396]	; (8001b18 <HAL_UART_MspInit+0x288>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800198c:	4628      	mov	r0, r5
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 800198e:	6169      	str	r1, [r5, #20]
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001990:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001992:	f003 f8a9 	bl	8004ae8 <HAL_DMA_Init>
 8001996:	2800      	cmp	r0, #0
 8001998:	f040 8094 	bne.w	8001ac4 <HAL_UART_MspInit+0x234>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800199c:	2110      	movs	r1, #16
 800199e:	485d      	ldr	r0, [pc, #372]	; (8001b14 <HAL_UART_MspInit+0x284>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel1);
 80019a0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80019a4:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80019a6:	f003 fc87 	bl	80052b8 <HAL_DMA_ConfigChannelAttributes>
 80019aa:	2800      	cmp	r0, #0
 80019ac:	f040 8087 	bne.w	8001abe <HAL_UART_MspInit+0x22e>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2105      	movs	r1, #5
 80019b4:	203d      	movs	r0, #61	; 0x3d
 80019b6:	f002 ffe7 	bl	8004988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80019ba:	203d      	movs	r0, #61	; 0x3d
 80019bc:	f003 f822 	bl	8004a04 <HAL_NVIC_EnableIRQ>
}
 80019c0:	b04d      	add	sp, #308	; 0x134
 80019c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019c4:	2202      	movs	r2, #2
 80019c6:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019c8:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019ca:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019ce:	f004 fcbf 	bl	8006350 <HAL_RCCEx_PeriphCLKConfig>
 80019d2:	2800      	cmp	r0, #0
 80019d4:	f040 8082 	bne.w	8001adc <HAL_UART_MspInit+0x24c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d8:	4b4a      	ldr	r3, [pc, #296]	; (8001b04 <HAL_UART_MspInit+0x274>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019da:	2107      	movs	r1, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 80019dc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019e6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80019ea:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	4846      	ldr	r0, [pc, #280]	; (8001b08 <HAL_UART_MspInit+0x278>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80019f0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80019f4:	9203      	str	r2, [sp, #12]
 80019f6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80019fc:	4d47      	ldr	r5, [pc, #284]	; (8001b1c <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	f042 0201 	orr.w	r2, r2, #1
 8001a02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a0a:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	9304      	str	r3, [sp, #16]
 8001a12:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a14:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a16:	9109      	str	r1, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a18:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	e9cd 6607 	strd	r6, r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a22:	f003 fccd 	bl	80053c0 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 8001a26:	2301      	movs	r3, #1
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8001a28:	2117      	movs	r1, #23
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001a2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 8001a2e:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001a32:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_UART_MspInit+0x290>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001a34:	4628      	mov	r0, r5
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a36:	e9c5 6602 	strd	r6, r6, [r5, #8]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001a3a:	e9c5 6606 	strd	r6, r6, [r5, #24]
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a3e:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001a42:	612e      	str	r6, [r5, #16]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a44:	622e      	str	r6, [r5, #32]
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001a46:	636e      	str	r6, [r5, #52]	; 0x34
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8001a48:	6069      	str	r1, [r5, #4]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 8001a4a:	616a      	str	r2, [r5, #20]
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001a4c:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001a4e:	f003 f84b 	bl	8004ae8 <HAL_DMA_Init>
 8001a52:	2800      	cmp	r0, #0
 8001a54:	d14e      	bne.n	8001af4 <HAL_UART_MspInit+0x264>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a56:	2110      	movs	r1, #16
 8001a58:	4830      	ldr	r0, [pc, #192]	; (8001b1c <HAL_UART_MspInit+0x28c>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel2);
 8001a5a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8001a5e:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a60:	f003 fc2a 	bl	80052b8 <HAL_DMA_ConfigChannelAttributes>
 8001a64:	2800      	cmp	r0, #0
 8001a66:	d142      	bne.n	8001aee <HAL_UART_MspInit+0x25e>
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001a6c:	4d2d      	ldr	r5, [pc, #180]	; (8001b24 <HAL_UART_MspInit+0x294>)
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001a6e:	2300      	movs	r3, #0
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART2_TX;
 8001a70:	2018      	movs	r0, #24
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001a72:	2201      	movs	r2, #1
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a74:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001a76:	2108      	movs	r1, #8
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001a78:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001a7c:	e9c5 3305 	strd	r3, r3, [r5, #20]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001a80:	e9c5 3307 	strd	r3, r3, [r5, #28]
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001a84:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001a88:	636b      	str	r3, [r5, #52]	; 0x34
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001a8a:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <HAL_UART_MspInit+0x298>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a8c:	4628      	mov	r0, r5
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 8001a8e:	e9c5 2209 	strd	r2, r2, [r5, #36]	; 0x24
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001a92:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001a94:	6129      	str	r1, [r5, #16]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001a96:	f003 f827 	bl	8004ae8 <HAL_DMA_Init>
 8001a9a:	bb28      	cbnz	r0, 8001ae8 <HAL_UART_MspInit+0x258>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a9c:	2110      	movs	r1, #16
 8001a9e:	4821      	ldr	r0, [pc, #132]	; (8001b24 <HAL_UART_MspInit+0x294>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel0);
 8001aa0:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001aa2:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001aa4:	f003 fc08 	bl	80052b8 <HAL_DMA_ConfigChannelAttributes>
 8001aa8:	b9d8      	cbnz	r0, 8001ae2 <HAL_UART_MspInit+0x252>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2105      	movs	r1, #5
 8001aae:	203b      	movs	r0, #59	; 0x3b
 8001ab0:	f002 ff6a 	bl	8004988 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ab4:	203b      	movs	r0, #59	; 0x3b
 8001ab6:	f002 ffa5 	bl	8004a04 <HAL_NVIC_EnableIRQ>
}
 8001aba:	b04d      	add	sp, #308	; 0x134
 8001abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001abe:	f000 fc81 	bl	80023c4 <Error_Handler>
 8001ac2:	e775      	b.n	80019b0 <HAL_UART_MspInit+0x120>
      Error_Handler();
 8001ac4:	f000 fc7e 	bl	80023c4 <Error_Handler>
 8001ac8:	e768      	b.n	800199c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8001aca:	f000 fc7b 	bl	80023c4 <Error_Handler>
 8001ace:	e74a      	b.n	8001966 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001ad0:	f000 fc78 	bl	80023c4 <Error_Handler>
 8001ad4:	e73e      	b.n	8001954 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001ad6:	f000 fc75 	bl	80023c4 <Error_Handler>
 8001ada:	e6fb      	b.n	80018d4 <HAL_UART_MspInit+0x44>
      Error_Handler();
 8001adc:	f000 fc72 	bl	80023c4 <Error_Handler>
 8001ae0:	e77a      	b.n	80019d8 <HAL_UART_MspInit+0x148>
      Error_Handler();
 8001ae2:	f000 fc6f 	bl	80023c4 <Error_Handler>
 8001ae6:	e7e0      	b.n	8001aaa <HAL_UART_MspInit+0x21a>
      Error_Handler();
 8001ae8:	f000 fc6c 	bl	80023c4 <Error_Handler>
 8001aec:	e7d6      	b.n	8001a9c <HAL_UART_MspInit+0x20c>
      Error_Handler();
 8001aee:	f000 fc69 	bl	80023c4 <Error_Handler>
 8001af2:	e7b9      	b.n	8001a68 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 8001af4:	f000 fc66 	bl	80023c4 <Error_Handler>
 8001af8:	e7ad      	b.n	8001a56 <HAL_UART_MspInit+0x1c6>
 8001afa:	bf00      	nop
 8001afc:	40004c00 	.word	0x40004c00
 8001b00:	40004400 	.word	0x40004400
 8001b04:	44020c00 	.word	0x44020c00
 8001b08:	42020000 	.word	0x42020000
 8001b0c:	20000dac 	.word	0x20000dac
 8001b10:	400201d0 	.word	0x400201d0
 8001b14:	20000cbc 	.word	0x20000cbc
 8001b18:	400200d0 	.word	0x400200d0
 8001b1c:	20000d34 	.word	0x20000d34
 8001b20:	40020150 	.word	0x40020150
 8001b24:	20000c44 	.word	0x20000c44
 8001b28:	40020050 	.word	0x40020050

08001b2c <HAL_UART_MspDeInit>:
  if(uartHandle->Instance==UART4)
 8001b2c:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_UART_MspDeInit+0x70>)
 8001b2e:	6803      	ldr	r3, [r0, #0]
{
 8001b30:	b510      	push	{r4, lr}
  if(uartHandle->Instance==UART4)
 8001b32:	4293      	cmp	r3, r2
{
 8001b34:	4604      	mov	r4, r0
  if(uartHandle->Instance==UART4)
 8001b36:	d003      	beq.n	8001b40 <HAL_UART_MspDeInit+0x14>
  else if(uartHandle->Instance==USART2)
 8001b38:	4a19      	ldr	r2, [pc, #100]	; (8001ba0 <HAL_UART_MspDeInit+0x74>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d017      	beq.n	8001b6e <HAL_UART_MspDeInit+0x42>
}
 8001b3e:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART4_CLK_DISABLE();
 8001b40:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_UART_MspDeInit+0x78>)
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001b42:	2103      	movs	r1, #3
    __HAL_RCC_UART4_CLK_DISABLE();
 8001b44:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001b48:	4817      	ldr	r0, [pc, #92]	; (8001ba8 <HAL_UART_MspDeInit+0x7c>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8001b4a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001b4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001b52:	f003 fd0b 	bl	800556c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001b56:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001b58:	f003 f9c4 	bl	8004ee4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001b5c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001b60:	f003 f9c0 	bl	8004ee4 <HAL_DMA_DeInit>
}
 8001b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART4_IRQn);
 8001b68:	203d      	movs	r0, #61	; 0x3d
 8001b6a:	f002 bf59 	b.w	8004a20 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b6e:	4a0d      	ldr	r2, [pc, #52]	; (8001ba4 <HAL_UART_MspDeInit+0x78>)
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001b70:	210c      	movs	r1, #12
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b72:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <HAL_UART_MspDeInit+0x7c>)
    __HAL_RCC_USART2_CLK_DISABLE();
 8001b78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001b80:	f003 fcf4 	bl	800556c <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8001b84:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001b88:	f003 f9ac 	bl	8004ee4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001b8c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001b8e:	f003 f9a9 	bl	8004ee4 <HAL_DMA_DeInit>
}
 8001b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001b96:	203b      	movs	r0, #59	; 0x3b
 8001b98:	f002 bf42 	b.w	8004a20 <HAL_NVIC_DisableIRQ>
 8001b9c:	40004c00 	.word	0x40004c00
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	44020c00 	.word	0x44020c00
 8001ba8:	42020000 	.word	0x42020000

08001bac <HAL_UART_TxCpltCallback>:
{
 8001bac:	b410      	push	{r4}
		pdata = &g_uart4_data;
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_UART_TxCpltCallback+0x1c>)
	if(&huart4 == huart) {
 8001bb0:	4c06      	ldr	r4, [pc, #24]	; (8001bcc <HAL_UART_TxCpltCallback+0x20>)
		pdata = &g_uart4_data;
 8001bb2:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <HAL_UART_TxCpltCallback+0x24>)
	xSemaphoreGiveFromISR(pdata->txSemaphore, NULL);
 8001bb4:	2100      	movs	r1, #0
		pdata = &g_uart4_data;
 8001bb6:	4284      	cmp	r4, r0
 8001bb8:	bf08      	it	eq
 8001bba:	4613      	moveq	r3, r2
}
 8001bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
	xSemaphoreGiveFromISR(pdata->txSemaphore, NULL);
 8001bc0:	6898      	ldr	r0, [r3, #8]
 8001bc2:	f001 b817 	b.w	8002bf4 <xQueueGiveFromISR>
 8001bc6:	bf00      	nop
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000eb8 	.word	0x20000eb8
 8001bd0:	200000ec 	.word	0x200000ec

08001bd4 <HAL_UART_RxCpltCallback>:
{
 8001bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart == &huart4)
 8001bd6:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_UART_RxCpltCallback+0x38>)
        pdata = &g_uart4_data;
 8001bd8:	4d0d      	ldr	r5, [pc, #52]	; (8001c10 <HAL_UART_RxCpltCallback+0x3c>)
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_UART_RxCpltCallback+0x40>)
 8001bdc:	4282      	cmp	r2, r0
 8001bde:	bf08      	it	eq
 8001be0:	461d      	moveq	r5, r3
	for (int i = 0; i < UART_RX_BUF_LEN; i++)
 8001be2:	f105 070c 	add.w	r7, r5, #12
 8001be6:	463c      	mov	r4, r7
 8001be8:	f105 06d4 	add.w	r6, r5, #212	; 0xd4
		xQueueSendFromISR(pdata->rxQueue, (const void *)&pdata->rx_buf[i], NULL);
 8001bec:	2300      	movs	r3, #0
 8001bee:	4621      	mov	r1, r4
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	6868      	ldr	r0, [r5, #4]
	for (int i = 0; i < UART_RX_BUF_LEN; i++)
 8001bf4:	3401      	adds	r4, #1
		xQueueSendFromISR(pdata->rxQueue, (const void *)&pdata->rx_buf[i], NULL);
 8001bf6:	f000 ff9d 	bl	8002b34 <xQueueGenericSendFromISR>
	for (int i = 0; i < UART_RX_BUF_LEN; i++)
 8001bfa:	42b4      	cmp	r4, r6
 8001bfc:	d1f6      	bne.n	8001bec <HAL_UART_RxCpltCallback+0x18>
	HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001bfe:	4639      	mov	r1, r7
 8001c00:	6828      	ldr	r0, [r5, #0]
 8001c02:	22c8      	movs	r2, #200	; 0xc8
}
 8001c04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001c08:	f009 bd18 	b.w	800b63c <HAL_UARTEx_ReceiveToIdle_DMA>
 8001c0c:	20000eb8 	.word	0x20000eb8
 8001c10:	20000000 	.word	0x20000000
 8001c14:	200000ec 	.word	0x200000ec

08001c18 <HAL_UARTEx_RxEventCallback>:
{
 8001c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int i = old_pos; i < Size; i++)
 8001c1c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8001c88 <HAL_UARTEx_RxEventCallback+0x70>
	if (huart == &huart4)
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_UARTEx_RxEventCallback+0x64>)
		pdata = &g_uart4_data;
 8001c22:	4d17      	ldr	r5, [pc, #92]	; (8001c80 <HAL_UARTEx_RxEventCallback+0x68>)
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_UARTEx_RxEventCallback+0x6c>)
	for (int i = old_pos; i < Size; i++)
 8001c26:	f8b8 4000 	ldrh.w	r4, [r8]
		pdata = &g_uart4_data;
 8001c2a:	4290      	cmp	r0, r2
 8001c2c:	bf08      	it	eq
 8001c2e:	461d      	moveq	r5, r3
	for (int i = old_pos; i < Size; i++)
 8001c30:	428c      	cmp	r4, r1
{
 8001c32:	4681      	mov	r9, r0
 8001c34:	460f      	mov	r7, r1
	for (int i = old_pos; i < Size; i++)
 8001c36:	d20d      	bcs.n	8001c54 <HAL_UARTEx_RxEventCallback+0x3c>
 8001c38:	340c      	adds	r4, #12
 8001c3a:	f101 060c 	add.w	r6, r1, #12
 8001c3e:	442c      	add	r4, r5
 8001c40:	442e      	add	r6, r5
		xQueueSendFromISR(pdata->rxQueue, (const void *)&pdata->rx_buf[i], NULL);
 8001c42:	2300      	movs	r3, #0
 8001c44:	4621      	mov	r1, r4
 8001c46:	461a      	mov	r2, r3
 8001c48:	6868      	ldr	r0, [r5, #4]
	for (int i = old_pos; i < Size; i++)
 8001c4a:	3401      	adds	r4, #1
		xQueueSendFromISR(pdata->rxQueue, (const void *)&pdata->rx_buf[i], NULL);
 8001c4c:	f000 ff72 	bl	8002b34 <xQueueGenericSendFromISR>
	for (int i = old_pos; i < Size; i++)
 8001c50:	42b4      	cmp	r4, r6
 8001c52:	d1f6      	bne.n	8001c42 <HAL_UARTEx_RxEventCallback+0x2a>
	if (HAL_UART_RXEVENT_HT != huart->RxEventType)
 8001c54:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
	old_pos = Size;
 8001c58:	f8a8 7000 	strh.w	r7, [r8]
	if (HAL_UART_RXEVENT_HT != huart->RxEventType)
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_UARTEx_RxEventCallback+0x4c>
}
 8001c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001c64:	4629      	mov	r1, r5
		old_pos = 0;
 8001c66:	2300      	movs	r3, #0
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001c68:	22c8      	movs	r2, #200	; 0xc8
		old_pos = 0;
 8001c6a:	f8a8 3000 	strh.w	r3, [r8]
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001c6e:	f851 0b0c 	ldr.w	r0, [r1], #12
}
 8001c72:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001c76:	f009 bce1 	b.w	800b63c <HAL_UARTEx_ReceiveToIdle_DMA>
 8001c7a:	bf00      	nop
 8001c7c:	20000eb8 	.word	0x20000eb8
 8001c80:	20000000 	.word	0x20000000
 8001c84:	200000ec 	.word	0x200000ec
 8001c88:	20000f4c 	.word	0x20000f4c

08001c8c <HAL_UART_ErrorCallback>:
{
 8001c8c:	b510      	push	{r4, lr}
		pdata = &g_uart4_data;
 8001c8e:	490a      	ldr	r1, [pc, #40]	; (8001cb8 <HAL_UART_ErrorCallback+0x2c>)
	if (huart == &huart4)
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <HAL_UART_ErrorCallback+0x30>)
		pdata = &g_uart4_data;
 8001c92:	4c0b      	ldr	r4, [pc, #44]	; (8001cc0 <HAL_UART_ErrorCallback+0x34>)
 8001c94:	4283      	cmp	r3, r0
 8001c96:	bf08      	it	eq
 8001c98:	460c      	moveq	r4, r1
	HAL_UART_DeInit(pdata->huart);
 8001c9a:	6820      	ldr	r0, [r4, #0]
 8001c9c:	f008 fe8c 	bl	800a9b8 <HAL_UART_DeInit>
	HAL_UART_Init(pdata->huart);
 8001ca0:	6820      	ldr	r0, [r4, #0]
 8001ca2:	f009 fb89 	bl	800b3b8 <HAL_UART_Init>
	HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001ca6:	4621      	mov	r1, r4
}
 8001ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UARTEx_ReceiveToIdle_DMA(pdata->huart, pdata->rx_buf, UART_RX_BUF_LEN);
 8001cac:	22c8      	movs	r2, #200	; 0xc8
 8001cae:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001cb2:	f009 bcc3 	b.w	800b63c <HAL_UARTEx_ReceiveToIdle_DMA>
 8001cb6:	bf00      	nop
 8001cb8:	200000ec 	.word	0x200000ec
 8001cbc:	20000eb8 	.word	0x20000eb8
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <myputstr>:
	while(*str) {
 8001cc4:	7801      	ldrb	r1, [r0, #0]
 8001cc6:	b141      	cbz	r1, 8001cda <myputstr+0x16>
	while((USART2->ISR&0X40)==0);//循环发送,直到发送完毕   
 8001cc8:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <myputstr+0x18>)
 8001cca:	69d3      	ldr	r3, [r2, #28]
 8001ccc:	065b      	lsls	r3, r3, #25
 8001cce:	d5fc      	bpl.n	8001cca <myputstr+0x6>
	USART2->TDR = (uint8_t) ch;      
 8001cd0:	6291      	str	r1, [r2, #40]	; 0x28
	while(*str) {
 8001cd2:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8001cd6:	2900      	cmp	r1, #0
 8001cd8:	d1f7      	bne.n	8001cca <myputstr+0x6>
}
 8001cda:	4770      	bx	lr
 8001cdc:	40004400 	.word	0x40004400

08001ce0 <GetUARTDevice>:
extern struct Dev_Mgmt g_uart4_dev;

static struct Dev_Mgmt *g_uart_devices[] = {&g_uart2_dev, &g_uart4_dev};

struct Dev_Mgmt *GetUARTDevice(char *name)
{
 8001ce0:	b538      	push	{r3, r4, r5, lr}
	unsigned int i = 0;
	for (i = 0; i < sizeof(g_uart_devices)/sizeof(g_uart_devices[0]); i++)
	{
		if (!strcmp(name, g_uart_devices[i]->name))
 8001ce2:	4c09      	ldr	r4, [pc, #36]	; (8001d08 <GetUARTDevice+0x28>)
{
 8001ce4:	4605      	mov	r5, r0
		if (!strcmp(name, g_uart_devices[i]->name))
 8001ce6:	6821      	ldr	r1, [r4, #0]
 8001ce8:	f7ff f9fc 	bl	80010e4 <strcmp>
 8001cec:	b148      	cbz	r0, 8001d02 <GetUARTDevice+0x22>
 8001cee:	4c07      	ldr	r4, [pc, #28]	; (8001d0c <GetUARTDevice+0x2c>)
 8001cf0:	4628      	mov	r0, r5
 8001cf2:	6821      	ldr	r1, [r4, #0]
 8001cf4:	f7ff f9f6 	bl	80010e4 <strcmp>
			return g_uart_devices[i];
	}
	
	return NULL;
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	bf0c      	ite	eq
 8001cfc:	4620      	moveq	r0, r4
 8001cfe:	2000      	movne	r0, #0
}
 8001d00:	bd38      	pop	{r3, r4, r5, pc}
		if (!strcmp(name, g_uart_devices[i]->name))
 8001d02:	4620      	mov	r0, r4
}
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
 8001d06:	bf00      	nop
 8001d08:	200000d4 	.word	0x200000d4
 8001d0c:	200001c0 	.word	0x200001c0

08001d10 <Draw_Region>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
static void Draw_Region(uint32_t x, uint32_t y, P_BitMap ptBitMap)
{ 
 8001d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d14:	4614      	mov	r4, r2
 8001d16:	460e      	mov	r6, r1
 8001d18:	4605      	mov	r5, r0
#ifdef FERRRTOS_FLAG
	/* 获得mutex */
	xSemaphoreTake(g_spi_lcd_lock, portMAX_DELAY);
 8001d1a:	4f11      	ldr	r7, [pc, #68]	; (8001d60 <Draw_Region+0x50>)
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d20:	6838      	ldr	r0, [r7, #0]
 8001d22:	f001 f851 	bl	8002dc8 <xQueueSemaphoreTake>
#endif
    /* 设置要显示的区域 */
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001d26:	6863      	ldr	r3, [r4, #4]
 8001d28:	1e72      	subs	r2, r6, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	6822      	ldr	r2, [r4, #0]
 8001d2e:	1e68      	subs	r0, r5, #1
 8001d30:	4402      	add	r2, r0
 8001d32:	4631      	mov	r1, r6
 8001d34:	4628      	mov	r0, r5
 8001d36:	f002 fd87 	bl	8004848 <LCD_SetWindows>

    /* 设置D/C引脚表示后面要发送数据 */
    LCD_SetDataLine();
 8001d3a:	f002 fc21 	bl	8004580 <LCD_SetDataLine>
    
    /* 发送数据 */
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001d3e:	e9d4 3100 	ldrd	r3, r1, [r4]
 8001d42:	fb03 f101 	mul.w	r1, r3, r1
 8001d46:	68a0      	ldr	r0, [r4, #8]
 8001d48:	0049      	lsls	r1, r1, #1
 8001d4a:	f002 fc21 	bl	8004590 <LCD_WriteDatas>
#ifdef FERRRTOS_FLAG
	/* 释放mutex */
    xSemaphoreGive(g_spi_lcd_lock);    
 8001d4e:	2300      	movs	r3, #0
 8001d50:	6838      	ldr	r0, [r7, #0]
 8001d52:	461a      	mov	r2, r3
#endif
}
 8001d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    xSemaphoreGive(g_spi_lcd_lock);    
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f000 be2f 	b.w	80029bc <xQueueGenericSend>
 8001d5e:	bf00      	nop
 8001d60:	20000f58 	.word	0x20000f58

08001d64 <Draw_Init>:
{
 8001d64:	b508      	push	{r3, lr}
	g_spi_lcd_lock = xSemaphoreCreateMutex();
 8001d66:	2001      	movs	r0, #1
 8001d68:	f000 fec6 	bl	8002af8 <xQueueCreateMutex>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <Draw_Init+0x1c>)
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 8001d70:	4904      	ldr	r1, [pc, #16]	; (8001d84 <Draw_Init+0x20>)
	g_spi_lcd_lock = xSemaphoreCreateMutex();
 8001d72:	601a      	str	r2, [r3, #0]
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 8001d74:	4804      	ldr	r0, [pc, #16]	; (8001d88 <Draw_Init+0x24>)
}
 8001d76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 8001d7a:	f002 bd59 	b.w	8004830 <LCD_GetInfo>
 8001d7e:	bf00      	nop
 8001d80:	20000f58 	.word	0x20000f58
 8001d84:	20000f50 	.word	0x20000f50
 8001d88:	20000f54 	.word	0x20000f54

08001d8c <Draw_Clear>:
{
 8001d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d8e:	4606      	mov	r6, r0
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001d90:	2100      	movs	r1, #0
 8001d92:	4f17      	ldr	r7, [pc, #92]	; (8001df0 <Draw_Clear+0x64>)
    g = g >> 2;
 8001d94:	f3c6 2485 	ubfx	r4, r6, #10, #6
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001d98:	4d16      	ldr	r5, [pc, #88]	; (8001df4 <Draw_Clear+0x68>)
    r = r >> 3;
 8001d9a:	f3c6 4cc4 	ubfx	ip, r6, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001d9e:	0164      	lsls	r4, r4, #5
 8001da0:	ea44 24cc 	orr.w	r4, r4, ip, lsl #11
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	683a      	ldr	r2, [r7, #0]
    b = b >> 2;
 8001da8:	f3c6 0685 	ubfx	r6, r6, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001dac:	4334      	orrs	r4, r6
{
 8001dae:	b083      	sub	sp, #12
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001db0:	3b01      	subs	r3, #1
 8001db2:	4608      	mov	r0, r1
 8001db4:	3a01      	subs	r2, #1
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 8001db6:	ba64      	rev16	r4, r4
 8001db8:	f8ad 4006 	strh.w	r4, [sp, #6]
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001dbc:	f002 fd44 	bl	8004848 <LCD_SetWindows>
    LCD_SetDataLine();
 8001dc0:	f002 fbde 	bl	8004580 <LCD_SetDataLine>
    for(uint32_t x = 0; x < g_lcd_width; x++)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2600      	movs	r6, #0
 8001dc8:	b17b      	cbz	r3, 8001dea <Draw_Clear+0x5e>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 8001dca:	682b      	ldr	r3, [r5, #0]
 8001dcc:	2400      	movs	r4, #0
 8001dce:	b143      	cbz	r3, 8001de2 <Draw_Clear+0x56>
            LCD_WriteDatas((uint8_t *)&wColor, 2);
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	f10d 0006 	add.w	r0, sp, #6
 8001dd6:	f002 fbdb 	bl	8004590 <LCD_WriteDatas>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 8001dda:	682b      	ldr	r3, [r5, #0]
 8001ddc:	3401      	adds	r4, #1
 8001dde:	42a3      	cmp	r3, r4
 8001de0:	d8f6      	bhi.n	8001dd0 <Draw_Clear+0x44>
    for(uint32_t x = 0; x < g_lcd_width; x++)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	3601      	adds	r6, #1
 8001de6:	42b3      	cmp	r3, r6
 8001de8:	d8ef      	bhi.n	8001dca <Draw_Clear+0x3e>
}
 8001dea:	b003      	add	sp, #12
 8001dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000f54 	.word	0x20000f54
 8001df4:	20000f50 	.word	0x20000f50

08001df8 <Draw_ASCII>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_ASCII(uint32_t x, uint32_t y, char c, uint32_t front_color, uint32_t back_color)
{
 8001df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dfc:	b0c5      	sub	sp, #276	; 0x114
 8001dfe:	f10d 0910 	add.w	r9, sp, #16
 8001e02:	464e      	mov	r6, r9
 8001e04:	9c4c      	ldr	r4, [sp, #304]	; 0x130
 8001e06:	f50d 7888 	add.w	r8, sp, #272	; 0x110
    g = g >> 2;
 8001e0a:	f3c4 2585 	ubfx	r5, r4, #10, #6
    r = r >> 3;
 8001e0e:	f3c4 47c4 	ubfx	r7, r4, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001e12:	016d      	lsls	r5, r5, #5
 8001e14:	ea45 25c7 	orr.w	r5, r5, r7, lsl #11
    b = b >> 2;
 8001e18:	f3c4 0485 	ubfx	r4, r4, #2, #6
 8001e1c:	4f18      	ldr	r7, [pc, #96]	; (8001e80 <Draw_ASCII+0x88>)
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001e1e:	4325      	orrs	r5, r4
    g = g >> 2;
 8001e20:	f3c3 2485 	ubfx	r4, r3, #10, #6
 8001e24:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001e28:	0164      	lsls	r4, r4, #5
    r = r >> 3;
 8001e2a:	f3c3 42c4 	ubfx	r2, r3, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001e2e:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
    b = b >> 2;
 8001e32:	f3c3 0385 	ubfx	r3, r3, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001e36:	431c      	orrs	r4, r3
 8001e38:	ba6d      	rev16	r5, r5
 8001e3a:	ba64      	rev16	r4, r4
 8001e3c:	b2ad      	uxth	r5, r5
    wColor = (wColor >> 8) | (wColor << 8);
 8001e3e:	b2a4      	uxth	r4, r4
    for (i = 0; i < 16; i++)
    {
        data = fontdata_8x16[c*16+i];
        for (bit = 7; bit >= 0; bit--)
        {
            if (data & (1<<bit))
 8001e40:	46b4      	mov	ip, r6
        for (bit = 7; bit >= 0; bit--)
 8001e42:	2307      	movs	r3, #7
        data = fontdata_8x16[c*16+i];
 8001e44:	f817 2b01 	ldrb.w	r2, [r7], #1
            if (data & (1<<bit))
 8001e48:	fa42 fe03 	asr.w	lr, r2, r3
 8001e4c:	f01e 0f01 	tst.w	lr, #1
 8001e50:	bf14      	ite	ne
 8001e52:	46a6      	movne	lr, r4
 8001e54:	46ae      	moveq	lr, r5
        for (bit = 7; bit >= 0; bit--)
 8001e56:	3b01      	subs	r3, #1
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
            else
            {
                color = back_color;
            }
            
            buf[i * 8 + (7-bit)] = color;
 8001e5c:	f82c eb02 	strh.w	lr, [ip], #2
        for (bit = 7; bit >= 0; bit--)
 8001e60:	d1f2      	bne.n	8001e48 <Draw_ASCII+0x50>
    for (i = 0; i < 16; i++)
 8001e62:	3610      	adds	r6, #16
 8001e64:	4546      	cmp	r6, r8
 8001e66:	d1eb      	bne.n	8001e40 <Draw_ASCII+0x48>
        }
    }

    bitmap.width = 8;
 8001e68:	2408      	movs	r4, #8
    bitmap.height = 16;    
 8001e6a:	2310      	movs	r3, #16
    bitmap.datas = (uint8_t *)buf;
    
    Draw_Region(x, y, &bitmap);
 8001e6c:	aa01      	add	r2, sp, #4
    bitmap.height = 16;    
 8001e6e:	e9cd 3902 	strd	r3, r9, [sp, #8]
    bitmap.width = 8;
 8001e72:	9401      	str	r4, [sp, #4]
    Draw_Region(x, y, &bitmap);
 8001e74:	f7ff ff4c 	bl	8001d10 <Draw_Region>

    return 8; /* 这个字符宽度为8 */
}
 8001e78:	4620      	mov	r0, r4
 8001e7a:	b045      	add	sp, #276	; 0x114
 8001e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e80:	08012b5c 	.word	0x08012b5c

08001e84 <Draw_String>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_String(uint32_t x, uint32_t y, char *str, uint32_t front_color, uint32_t back_color)
{
 8001e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e88:	468b      	mov	fp, r1
 8001e8a:	469a      	mov	sl, r3
    size_t i;
    int line_width = 0;
 8001e8c:	2700      	movs	r7, #0
{
 8001e8e:	b085      	sub	sp, #20
 8001e90:	4605      	mov	r5, r0
    for (i = 0; i < strlen(str); i++)
 8001e92:	4610      	mov	r0, r2
{
 8001e94:	4616      	mov	r6, r2
    for (i = 0; i < strlen(str); i++)
 8001e96:	463c      	mov	r4, r7
 8001e98:	f00b f8c4 	bl	800d024 <strlen>
            if (x >= 8)
                x -= 8;
        }
        else
        {
            if (x + 8 >= g_lcd_width)
 8001e9c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001f18 <Draw_String+0x94>
 8001ea0:	4653      	mov	r3, sl
            {
                x = 0;
                y += 16;
            }

            if (y + 16 >= g_lcd_height)
 8001ea2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001f1c <Draw_String+0x98>
 8001ea6:	46da      	mov	sl, fp
 8001ea8:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    for (i = 0; i < strlen(str); i++)
 8001eac:	e022      	b.n	8001ef4 <Draw_String+0x70>
        else if (str[i] == '\n')
 8001eae:	2a0a      	cmp	r2, #10
 8001eb0:	d027      	beq.n	8001f02 <Draw_String+0x7e>
        else if (str[i] == '\b')
 8001eb2:	2a08      	cmp	r2, #8
 8001eb4:	d028      	beq.n	8001f08 <Draw_String+0x84>
            if (x + 8 >= g_lcd_width)
 8001eb6:	f8d9 1000 	ldr.w	r1, [r9]
 8001eba:	f105 0008 	add.w	r0, r5, #8
 8001ebe:	4288      	cmp	r0, r1
                y += 16;
 8001ec0:	bf28      	it	cs
 8001ec2:	f10a 0a10 	addcs.w	sl, sl, #16
            if (y + 16 >= g_lcd_height)
 8001ec6:	f8d8 1000 	ldr.w	r1, [r8]
 8001eca:	f10a 0010 	add.w	r0, sl, #16
                x = 0;
 8001ece:	bf28      	it	cs
 8001ed0:	2500      	movcs	r5, #0
            if (y + 16 >= g_lcd_height)
 8001ed2:	4288      	cmp	r0, r1
 8001ed4:	d21c      	bcs.n	8001f10 <Draw_String+0x8c>
                return line_width;

            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 8001ed6:	4651      	mov	r1, sl
 8001ed8:	4628      	mov	r0, r5
 8001eda:	f8cd b000 	str.w	fp, [sp]
 8001ede:	9303      	str	r3, [sp, #12]
 8001ee0:	f7ff ff8a 	bl	8001df8 <Draw_ASCII>
 8001ee4:	4602      	mov	r2, r0
    for (i = 0; i < strlen(str); i++)
 8001ee6:	4630      	mov	r0, r6
            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 8001ee8:	4417      	add	r7, r2
    for (i = 0; i < strlen(str); i++)
 8001eea:	f00b f89b 	bl	800d024 <strlen>
 8001eee:	9b03      	ldr	r3, [sp, #12]
            x += 8;
 8001ef0:	3508      	adds	r5, #8
    for (i = 0; i < strlen(str); i++)
 8001ef2:	3401      	adds	r4, #1
 8001ef4:	4284      	cmp	r4, r0
 8001ef6:	d20b      	bcs.n	8001f10 <Draw_String+0x8c>
        if (str[i] == '\r')
 8001ef8:	5d32      	ldrb	r2, [r6, r4]
 8001efa:	2a0d      	cmp	r2, #13
 8001efc:	d1d7      	bne.n	8001eae <Draw_String+0x2a>
            x = 0;
 8001efe:	2500      	movs	r5, #0
 8001f00:	e7f7      	b.n	8001ef2 <Draw_String+0x6e>
            y += 16;
 8001f02:	f10a 0a10 	add.w	sl, sl, #16
 8001f06:	e7f4      	b.n	8001ef2 <Draw_String+0x6e>
            if (x >= 8)
 8001f08:	2d07      	cmp	r5, #7
 8001f0a:	d9f2      	bls.n	8001ef2 <Draw_String+0x6e>
                x -= 8;
 8001f0c:	3d08      	subs	r5, #8
 8001f0e:	e7f0      	b.n	8001ef2 <Draw_String+0x6e>
        }
    }

    return line_width;
}
 8001f10:	4638      	mov	r0, r7
 8001f12:	b005      	add	sp, #20
 8001f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f18:	20000f54 	.word	0x20000f54
 8001f1c:	20000f50 	.word	0x20000f50

08001f20 <MX_GPDMA1_Init>:
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001f20:	4b18      	ldr	r3, [pc, #96]	; (8001f84 <MX_GPDMA1_Init+0x64>)
{
 8001f22:	b500      	push	{lr}
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001f24:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
{
 8001f28:	b083      	sub	sp, #12
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001f2a:	f040 0001 	orr.w	r0, r0, #1
 8001f2e:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8001f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

  /* GPDMA1 interrupt Init */
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001f36:	2200      	movs	r2, #0
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001f38:	f003 0301 	and.w	r3, r3, #1
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001f3c:	2105      	movs	r1, #5
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001f3e:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001f40:	201b      	movs	r0, #27
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001f42:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001f44:	f002 fd20 	bl	8004988 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001f48:	201b      	movs	r0, #27
 8001f4a:	f002 fd5b 	bl	8004a04 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 5, 0);
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2105      	movs	r1, #5
 8001f52:	201c      	movs	r0, #28
 8001f54:	f002 fd18 	bl	8004988 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001f58:	201c      	movs	r0, #28
 8001f5a:	f002 fd53 	bl	8004a04 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 5, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2105      	movs	r1, #5
 8001f62:	201d      	movs	r0, #29
 8001f64:	f002 fd10 	bl	8004988 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001f68:	201d      	movs	r0, #29
 8001f6a:	f002 fd4b 	bl	8004a04 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 5, 0);
 8001f6e:	201e      	movs	r0, #30
 8001f70:	2200      	movs	r2, #0
 8001f72:	2105      	movs	r1, #5
 8001f74:	f002 fd08 	bl	8004988 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001f78:	201e      	movs	r0, #30
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001f7a:	b003      	add	sp, #12
 8001f7c:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001f80:	f002 bd40 	b.w	8004a04 <HAL_NVIC_EnableIRQ>
 8001f84:	44020c00 	.word	0x44020c00

08001f88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8001f8a:	1e43      	subs	r3, r0, #1
 8001f8c:	330a      	adds	r3, #10
 8001f8e:	d85c      	bhi.n	800204a <pvPortMalloc+0xc2>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
        {
            xWantedSize += xHeapStructSize;
 8001f90:	f100 0408 	add.w	r4, r0, #8

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001f94:	f010 0007 	ands.w	r0, r0, #7
 8001f98:	d161      	bne.n	800205e <pvPortMalloc+0xd6>

    vTaskSuspendAll();
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001f9a:	4e4d      	ldr	r6, [pc, #308]	; (80020d0 <pvPortMalloc+0x148>)
    vTaskSuspendAll();
 8001f9c:	f00a f824 	bl	800bfe8 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001fa0:	6833      	ldr	r3, [r6, #0]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 808c 	beq.w	80020c0 <pvPortMalloc+0x138>
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001fa8:	4623      	mov	r3, r4
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	dd52      	ble.n	8002054 <pvPortMalloc+0xcc>
 8001fae:	f8df e138 	ldr.w	lr, [pc, #312]	; 80020e8 <pvPortMalloc+0x160>
 8001fb2:	f8de 7000 	ldr.w	r7, [lr]
 8001fb6:	42a7      	cmp	r7, r4
 8001fb8:	d34c      	bcc.n	8002054 <pvPortMalloc+0xcc>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001fba:	4946      	ldr	r1, [pc, #280]	; (80020d4 <pvPortMalloc+0x14c>)
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001fbc:	4846      	ldr	r0, [pc, #280]	; (80020d8 <pvPortMalloc+0x150>)
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001fbe:	680b      	ldr	r3, [r1, #0]
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001fc0:	4283      	cmp	r3, r0
 8001fc2:	d353      	bcc.n	800206c <pvPortMalloc+0xe4>
 8001fc4:	4d45      	ldr	r5, [pc, #276]	; (80020dc <pvPortMalloc+0x154>)
 8001fc6:	42ab      	cmp	r3, r5
 8001fc8:	d850      	bhi.n	800206c <pvPortMalloc+0xe4>
 8001fca:	468c      	mov	ip, r1
 8001fcc:	e007      	b.n	8001fde <pvPortMalloc+0x56>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	b142      	cbz	r2, 8001fe4 <pvPortMalloc+0x5c>
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001fd2:	4282      	cmp	r2, r0
 8001fd4:	d36e      	bcc.n	80020b4 <pvPortMalloc+0x12c>
 8001fd6:	42aa      	cmp	r2, r5
 8001fd8:	469c      	mov	ip, r3
 8001fda:	d86b      	bhi.n	80020b4 <pvPortMalloc+0x12c>
 8001fdc:	4613      	mov	r3, r2
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001fde:	6859      	ldr	r1, [r3, #4]
 8001fe0:	42a1      	cmp	r1, r4
 8001fe2:	d3f4      	bcc.n	8001fce <pvPortMalloc+0x46>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001fe4:	6832      	ldr	r2, [r6, #0]
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d034      	beq.n	8002054 <pvPortMalloc+0xcc>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8001fea:	f8dc 6000 	ldr.w	r6, [ip]
 8001fee:	3608      	adds	r6, #8
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8001ff0:	4286      	cmp	r6, r0
 8001ff2:	d362      	bcc.n	80020ba <pvPortMalloc+0x132>
 8001ff4:	42ae      	cmp	r6, r5
 8001ff6:	d860      	bhi.n	80020ba <pvPortMalloc+0x132>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001ff8:	6818      	ldr	r0, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8001ffa:	42a1      	cmp	r1, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001ffc:	f8cc 0000 	str.w	r0, [ip]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8002000:	d360      	bcc.n	80020c4 <pvPortMalloc+0x13c>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002002:	1b0d      	subs	r5, r1, r4
 8002004:	2d10      	cmp	r5, #16
 8002006:	d907      	bls.n	8002018 <pvPortMalloc+0x90>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002008:	191a      	adds	r2, r3, r4
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800200a:	0751      	lsls	r1, r2, #29
 800200c:	d15d      	bne.n	80020ca <pvPortMalloc+0x142>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800200e:	4621      	mov	r1, r4
 8002010:	6055      	str	r5, [r2, #4]
                        pxBlock->xBlockSize = xWantedSize;

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8002012:	5118      	str	r0, [r3, r4]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8002014:	f8cc 2000 	str.w	r2, [ip]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002018:	4831      	ldr	r0, [pc, #196]	; (80020e0 <pvPortMalloc+0x158>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800201a:	1a7f      	subs	r7, r7, r1
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800201c:	6804      	ldr	r4, [r0, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800201e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002022:	42a7      	cmp	r7, r4
                    pxBlock->pxNextFreeBlock = NULL;
 8002024:	f04f 0400 	mov.w	r4, #0
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002028:	bf38      	it	cc
 800202a:	6007      	strcc	r7, [r0, #0]
                    xNumberOfSuccessfulAllocations++;
 800202c:	482d      	ldr	r0, [pc, #180]	; (80020e4 <pvPortMalloc+0x15c>)
                    heapALLOCATE_BLOCK( pxBlock );
 800202e:	6059      	str	r1, [r3, #4]
                    xNumberOfSuccessfulAllocations++;
 8002030:	6802      	ldr	r2, [r0, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 8002032:	601c      	str	r4, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002034:	3201      	adds	r2, #1
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002036:	f8ce 7000 	str.w	r7, [lr]
                    xNumberOfSuccessfulAllocations++;
 800203a:	6002      	str	r2, [r0, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800203c:	f009 ffdc 	bl	800bff8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002040:	0773      	lsls	r3, r6, #29
 8002042:	d00a      	beq.n	800205a <pvPortMalloc+0xd2>
 8002044:	f000 fb52 	bl	80026ec <ulSetInterruptMask>
 8002048:	e7fe      	b.n	8002048 <pvPortMalloc+0xc0>
        if( pxEnd == NULL )
 800204a:	4e21      	ldr	r6, [pc, #132]	; (80020d0 <pvPortMalloc+0x148>)
    vTaskSuspendAll();
 800204c:	f009 ffcc 	bl	800bfe8 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8002050:	6833      	ldr	r3, [r6, #0]
 8002052:	b173      	cbz	r3, 8002072 <pvPortMalloc+0xea>
    ( void ) xTaskResumeAll();
 8002054:	f009 ffd0 	bl	800bff8 <xTaskResumeAll>
 8002058:	2600      	movs	r6, #0
    return pvReturn;
}
 800205a:	4630      	mov	r0, r6
 800205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800205e:	f1c0 0008 	rsb	r0, r0, #8
                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002062:	43c3      	mvns	r3, r0
 8002064:	42a3      	cmp	r3, r4
 8002066:	d3f0      	bcc.n	800204a <pvPortMalloc+0xc2>
                    xWantedSize += xAdditionalRequiredSize;
 8002068:	4404      	add	r4, r0
 800206a:	e796      	b.n	8001f9a <pvPortMalloc+0x12>
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800206c:	f000 fb3e 	bl	80026ec <ulSetInterruptMask>
 8002070:	e7fe      	b.n	8002070 <pvPortMalloc+0xe8>
        if( pxEnd == NULL )
 8002072:	461c      	mov	r4, r3
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002074:	4818      	ldr	r0, [pc, #96]	; (80020d8 <pvPortMalloc+0x150>)

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002076:	0745      	lsls	r5, r0, #29
 8002078:	d115      	bne.n	80020a6 <pvPortMalloc+0x11e>
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
    xStart.xBlockSize = ( size_t ) 0;

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800207a:	4601      	mov	r1, r0
 800207c:	4605      	mov	r5, r0
 800207e:	f500 42a0 	add.w	r2, r0, #20480	; 0x5000
    xStart.xBlockSize = ( size_t ) 0;
 8002082:	2000      	movs	r0, #0
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8002084:	3a08      	subs	r2, #8
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002086:	f022 0207 	bic.w	r2, r2, #7
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800208a:	4f12      	ldr	r7, [pc, #72]	; (80020d4 <pvPortMalloc+0x14c>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800208c:	1a51      	subs	r1, r2, r1
    xStart.xBlockSize = ( size_t ) 0;
 800208e:	e9c7 5000 	strd	r5, r0, [r7]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8002092:	6032      	str	r2, [r6, #0]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8002094:	e9c2 0000 	strd	r0, r0, [r2]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002098:	e9c5 2100 	strd	r2, r1, [r5]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800209c:	4a10      	ldr	r2, [pc, #64]	; (80020e0 <pvPortMalloc+0x158>)
 800209e:	6011      	str	r1, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80020a0:	4a11      	ldr	r2, [pc, #68]	; (80020e8 <pvPortMalloc+0x160>)
 80020a2:	6011      	str	r1, [r2, #0]
}
 80020a4:	e781      	b.n	8001faa <pvPortMalloc+0x22>
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80020a6:	1dc1      	adds	r1, r0, #7
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80020a8:	f021 0107 	bic.w	r1, r1, #7
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80020ac:	460d      	mov	r5, r1
 80020ae:	f500 42a0 	add.w	r2, r0, #20480	; 0x5000
 80020b2:	e7e6      	b.n	8002082 <pvPortMalloc+0xfa>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80020b4:	f000 fb1a 	bl	80026ec <ulSetInterruptMask>
 80020b8:	e7fe      	b.n	80020b8 <pvPortMalloc+0x130>
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80020ba:	f000 fb17 	bl	80026ec <ulSetInterruptMask>
 80020be:	e7fe      	b.n	80020be <pvPortMalloc+0x136>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80020c0:	4623      	mov	r3, r4
 80020c2:	e7d7      	b.n	8002074 <pvPortMalloc+0xec>
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80020c4:	f000 fb12 	bl	80026ec <ulSetInterruptMask>
 80020c8:	e7fe      	b.n	80020c8 <pvPortMalloc+0x140>
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80020ca:	f000 fb0f 	bl	80026ec <ulSetInterruptMask>
 80020ce:	e7fe      	b.n	80020ce <pvPortMalloc+0x146>
 80020d0:	20000f5c 	.word	0x20000f5c
 80020d4:	20005f70 	.word	0x20005f70
 80020d8:	20000f60 	.word	0x20000f60
 80020dc:	20005f5f 	.word	0x20005f5f
 80020e0:	20005f64 	.word	0x20005f64
 80020e4:	20005f68 	.word	0x20005f68
 80020e8:	20005f60 	.word	0x20005f60

080020ec <vPortFree>:
    if( pv != NULL )
 80020ec:	b1b0      	cbz	r0, 800211c <vPortFree+0x30>
{
 80020ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        heapVALIDATE_BLOCK_POINTER( pxLink );
 80020f0:	4e2f      	ldr	r6, [pc, #188]	; (80021b0 <vPortFree+0xc4>)
        puc -= xHeapStructSize;
 80020f2:	f1a0 0508 	sub.w	r5, r0, #8
        heapVALIDATE_BLOCK_POINTER( pxLink );
 80020f6:	42b5      	cmp	r5, r6
 80020f8:	4604      	mov	r4, r0
 80020fa:	d30c      	bcc.n	8002116 <vPortFree+0x2a>
 80020fc:	4f2d      	ldr	r7, [pc, #180]	; (80021b4 <vPortFree+0xc8>)
 80020fe:	42bd      	cmp	r5, r7
 8002100:	d809      	bhi.n	8002116 <vPortFree+0x2a>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002102:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002106:	2b00      	cmp	r3, #0
 8002108:	da09      	bge.n	800211e <vPortFree+0x32>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800210a:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800210e:	b149      	cbz	r1, 8002124 <vPortFree+0x38>
 8002110:	f000 faec 	bl	80026ec <ulSetInterruptMask>
 8002114:	e7fe      	b.n	8002114 <vPortFree+0x28>
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8002116:	f000 fae9 	bl	80026ec <ulSetInterruptMask>
 800211a:	e7fe      	b.n	800211a <vPortFree+0x2e>
 800211c:	4770      	bx	lr
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800211e:	f000 fae5 	bl	80026ec <ulSetInterruptMask>
 8002122:	e7fe      	b.n	8002122 <vPortFree+0x36>
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8002124:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
                heapFREE_BLOCK( pxLink );
 8002128:	4613      	mov	r3, r2
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 800212a:	f022 0207 	bic.w	r2, r2, #7
                heapFREE_BLOCK( pxLink );
 800212e:	f840 3c04 	str.w	r3, [r0, #-4]
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8002132:	bb4a      	cbnz	r2, 8002188 <vPortFree+0x9c>
                vTaskSuspendAll();
 8002134:	f009 ff58 	bl	800bfe8 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002138:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <vPortFree+0xcc>)
 800213a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800213e:	6813      	ldr	r3, [r2, #0]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002140:	481e      	ldr	r0, [pc, #120]	; (80021bc <vPortFree+0xd0>)
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002142:	440b      	add	r3, r1
 8002144:	6013      	str	r3, [r2, #0]
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002146:	4603      	mov	r3, r0
 8002148:	461a      	mov	r2, r3
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	429d      	cmp	r5, r3
 800214e:	d8fb      	bhi.n	8002148 <vPortFree+0x5c>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8002150:	4282      	cmp	r2, r0
 8002152:	d006      	beq.n	8002162 <vPortFree+0x76>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8002154:	42b2      	cmp	r2, r6
 8002156:	d301      	bcc.n	800215c <vPortFree+0x70>
 8002158:	42ba      	cmp	r2, r7
 800215a:	d902      	bls.n	8002162 <vPortFree+0x76>
 800215c:	f000 fac6 	bl	80026ec <ulSetInterruptMask>
 8002160:	e7fe      	b.n	8002160 <vPortFree+0x74>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002162:	6850      	ldr	r0, [r2, #4]
 8002164:	1814      	adds	r4, r2, r0
 8002166:	42a5      	cmp	r5, r4
 8002168:	d01d      	beq.n	80021a6 <vPortFree+0xba>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800216a:	1868      	adds	r0, r5, r1
 800216c:	4283      	cmp	r3, r0
 800216e:	d010      	beq.n	8002192 <vPortFree+0xa6>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002170:	602b      	str	r3, [r5, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002172:	42aa      	cmp	r2, r5
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8002174:	bf18      	it	ne
 8002176:	6015      	strne	r5, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <vPortFree+0xd4>)
 800217a:	6813      	ldr	r3, [r2, #0]
 800217c:	3301      	adds	r3, #1
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                ( void ) xTaskResumeAll();
 8002184:	f009 bf38 	b.w	800bff8 <xTaskResumeAll>
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 8002188:	f1a3 0208 	sub.w	r2, r3, #8
 800218c:	f00a feb8 	bl	800cf00 <memset>
 8002190:	e7d0      	b.n	8002134 <vPortFree+0x48>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8002192:	480c      	ldr	r0, [pc, #48]	; (80021c4 <vPortFree+0xd8>)
 8002194:	6800      	ldr	r0, [r0, #0]
 8002196:	4283      	cmp	r3, r0
 8002198:	d0ea      	beq.n	8002170 <vPortFree+0x84>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 800219a:	e9d3 3000 	ldrd	r3, r0, [r3]
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800219e:	4401      	add	r1, r0
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80021a0:	e9c5 3100 	strd	r3, r1, [r5]
 80021a4:	e7e5      	b.n	8002172 <vPortFree+0x86>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80021a6:	4401      	add	r1, r0
 80021a8:	4615      	mov	r5, r2
 80021aa:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 80021ac:	e7dd      	b.n	800216a <vPortFree+0x7e>
 80021ae:	bf00      	nop
 80021b0:	20000f60 	.word	0x20000f60
 80021b4:	20005f5f 	.word	0x20005f5f
 80021b8:	20005f60 	.word	0x20005f60
 80021bc:	20005f70 	.word	0x20005f70
 80021c0:	20005f6c 	.word	0x20005f6c
 80021c4:	20000f5c 	.word	0x20000f5c

080021c8 <rt_hw_console_output>:

rt_weak void rt_hw_console_output(const char *str)
{
    /* empty console output */

    myputstr(str);
 80021c8:	f7ff bd7c 	b.w	8001cc4 <myputstr>

080021cc <rt_kprintf>:
 * @param fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
rt_weak int rt_kprintf(const char *fmt, ...)
{
 80021cc:	b40f      	push	{r0, r1, r2, r3}
 80021ce:	b530      	push	{r4, r5, lr}
 80021d0:	b083      	sub	sp, #12
 80021d2:	ab06      	add	r3, sp, #24
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 80021d4:	4d0a      	ldr	r5, [pc, #40]	; (8002200 <rt_kprintf+0x34>)
{
 80021d6:	f853 2b04 	ldr.w	r2, [r3], #4
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 80021da:	217f      	movs	r1, #127	; 0x7f
 80021dc:	4628      	mov	r0, r5
    va_start(args, fmt);
 80021de:	9301      	str	r3, [sp, #4]
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 80021e0:	f001 fe4c 	bl	8003e7c <rt_vsnprintf>
 80021e4:	4604      	mov	r4, r0
    if (length > RT_CONSOLEBUF_SIZE - 1)
    {
        length = RT_CONSOLEBUF_SIZE - 1;
    }

    rt_hw_console_output(rt_log_buf);
 80021e6:	4628      	mov	r0, r5
 80021e8:	f7ff ffee 	bl	80021c8 <rt_hw_console_output>

    va_end(args);

    return length;
}
 80021ec:	2c7f      	cmp	r4, #127	; 0x7f
 80021ee:	4620      	mov	r0, r4
 80021f0:	bf28      	it	cs
 80021f2:	207f      	movcs	r0, #127	; 0x7f
 80021f4:	b003      	add	sp, #12
 80021f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80021fa:	b004      	add	sp, #16
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20005f78 	.word	0x20005f78

08002204 <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002204:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002208:	2200      	movs	r2, #0
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800220a:	f100 0308 	add.w	r3, r0, #8
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800220e:	e9c0 3101 	strd	r3, r1, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002212:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002216:	6002      	str	r2, [r0, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop

0800221c <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800221c:	2300      	movs	r3, #0
 800221e:	6103      	str	r3, [r0, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop

08002224 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002224:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002226:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002228:	1c6b      	adds	r3, r5, #1
 800222a:	d010      	beq.n	800224e <vListInsert+0x2a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800222c:	f100 0308 	add.w	r3, r0, #8
 8002230:	461c      	mov	r4, r3
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	42aa      	cmp	r2, r5
 8002238:	d9fa      	bls.n	8002230 <vListInsert+0xc>

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800223a:	6802      	ldr	r2, [r0, #0]
    pxNewListItem->pxNext = pxIterator->pxNext;
 800223c:	604b      	str	r3, [r1, #4]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800223e:	3201      	adds	r2, #1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002240:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002242:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8002244:	6061      	str	r1, [r4, #4]
    pxNewListItem->pxContainer = pxList;
 8002246:	6108      	str	r0, [r1, #16]

    traceRETURN_vListInsert();
}
 8002248:	bc30      	pop	{r4, r5}
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800224a:	6002      	str	r2, [r0, #0]
}
 800224c:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 800224e:	6904      	ldr	r4, [r0, #16]
    pxNewListItem->pxNext = pxIterator->pxNext;
 8002250:	6863      	ldr	r3, [r4, #4]
 8002252:	e7f2      	b.n	800223a <vListInsert+0x16>

08002254 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002254:	4603      	mov	r3, r0
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002256:	6902      	ldr	r2, [r0, #16]
{
 8002258:	b410      	push	{r4}

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800225a:	6854      	ldr	r4, [r2, #4]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800225c:	6840      	ldr	r0, [r0, #4]
 800225e:	6899      	ldr	r1, [r3, #8]
    if( pxList->pxIndex == pxItemToRemove )
 8002260:	429c      	cmp	r4, r3
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002262:	6081      	str	r1, [r0, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002264:	6048      	str	r0, [r1, #4]
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002266:	bf08      	it	eq
 8002268:	6051      	streq	r1, [r2, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800226a:	2100      	movs	r1, #0
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800226c:	6810      	ldr	r0, [r2, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
 800226e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002272:	3801      	subs	r0, #1
    pxItemToRemove->pxContainer = NULL;
 8002274:	6119      	str	r1, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002276:	6010      	str	r0, [r2, #0]
}
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	0000      	movs	r0, r0
	...

08002280 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002280:	b5d0      	push	{r4, r6, r7, lr}

	uint8_t c = 0;
 8002282:	2400      	movs	r4, #0
{
 8002284:	b09c      	sub	sp, #112	; 0x70
	uint8_t c = 0;
 8002286:	f88d 4003 	strb.w	r4, [sp, #3]
	float sum = 3.141592654;

  HAL_Init();
 800228a:	f002 fb33 	bl	80048f4 <HAL_Init>
}

static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800228e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002292:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002296:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800229a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800229e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 80022a2:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80022a6:	4a42      	ldr	r2, [pc, #264]	; (80023b0 <main+0x130>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022a8:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80022aa:	6913      	ldr	r3, [r2, #16]
 80022ac:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80022b0:	6113      	str	r3, [r2, #16]
 80022b2:	6913      	ldr	r3, [r2, #16]
 80022b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80022bc:	6953      	ldr	r3, [r2, #20]
 80022be:	071b      	lsls	r3, r3, #28
 80022c0:	d5fc      	bpl.n	80022bc <main+0x3c>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022c2:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80022c4:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022c6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80022ca:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80022ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 80022d2:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 40;
 80022d4:	2128      	movs	r1, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022d6:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80022da:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022dc:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 80022de:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 80022e0:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80022e2:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80022e4:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022e6:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 80022e8:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80022ea:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 80022ee:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80022f0:	9115      	str	r1, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f2:	f003 fbd7 	bl	8005aa4 <HAL_RCC_OscConfig>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b100      	cbz	r0, 80022fc <main+0x7c>
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 80022fa:	e7fe      	b.n	80022fa <main+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022fc:	221f      	movs	r2, #31
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80022fe:	2105      	movs	r1, #5
 8002300:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002302:	e9cd 4303 	strd	r4, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002306:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800230a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800230c:	9202      	str	r2, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800230e:	f003 fa69 	bl	80057e4 <HAL_RCC_ClockConfig>
 8002312:	2800      	cmp	r0, #0
 8002314:	d145      	bne.n	80023a2 <main+0x122>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8002316:	4a27      	ldr	r2, [pc, #156]	; (80023b4 <main+0x134>)
 8002318:	6813      	ldr	r3, [r2, #0]
 800231a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800231e:	f043 0320 	orr.w	r3, r3, #32
 8002322:	6013      	str	r3, [r2, #0]
  bsp_led_init();
 8002324:	f7ff f9a8 	bl	8001678 <bsp_led_init>
  bsp_lcd_init();
 8002328:	f7ff f958 	bl	80015dc <bsp_lcd_init>
  MX_SPI2_Init();
 800232c:	f7ff f8be 	bl	80014ac <MX_SPI2_Init>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8002330:	f003 f998 	bl	8005664 <HAL_ICACHE_Enable>
 8002334:	4604      	mov	r4, r0
 8002336:	bba8      	cbnz	r0, 80023a4 <main+0x124>
	rt_kprintf("UART CNT:%d %lf\r\n",c,sum);
 8002338:	a71b      	add	r7, pc, #108	; (adr r7, 80023a8 <main+0x128>)
 800233a:	e9d7 6700 	ldrd	r6, r7, [r7]
  MX_GPDMA1_Init();
 800233e:	f7ff fdef 	bl	8001f20 <MX_GPDMA1_Init>
  MX_USART2_UART_Init();
 8002342:	f7ff fa61 	bl	8001808 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8002346:	f7ff fa1b 	bl	8001780 <MX_UART4_Init>
  LCD_Init(1);
 800234a:	2001      	movs	r0, #1
 800234c:	f002 f93e 	bl	80045cc <LCD_Init>
  Draw_Init();
 8002350:	f7ff fd08 	bl	8001d64 <Draw_Init>
  Draw_Clear(0);
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff fd19 	bl	8001d8c <Draw_Clear>
  MX_FREERTOS_Init();
 800235a:	f7ff f81b 	bl	8001394 <MX_FREERTOS_Init>
  vTaskStartScheduler();
 800235e:	f009 fdfb 	bl	800bf58 <vTaskStartScheduler>
	HAL_UART_Transmit_DMA(&huart2, &c, 1);
 8002362:	4c15      	ldr	r4, [pc, #84]	; (80023b8 <main+0x138>)
	bsp_led_toggle();
 8002364:	f7ff f9bc 	bl	80016e0 <bsp_led_toggle>
	HAL_UART_Transmit_DMA(&huart2, &c, 1);
 8002368:	2201      	movs	r2, #1
 800236a:	f10d 0103 	add.w	r1, sp, #3
 800236e:	4620      	mov	r0, r4
 8002370:	f008 fb42 	bl	800a9f8 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart4, &c, 1);
 8002374:	2201      	movs	r2, #1
 8002376:	f10d 0103 	add.w	r1, sp, #3
 800237a:	4810      	ldr	r0, [pc, #64]	; (80023bc <main+0x13c>)
 800237c:	f008 fb3c 	bl	800a9f8 <HAL_UART_Transmit_DMA>
	rt_kprintf("UART CNT:%d %lf\r\n",c,sum);
 8002380:	463b      	mov	r3, r7
 8002382:	4632      	mov	r2, r6
 8002384:	f89d 1003 	ldrb.w	r1, [sp, #3]
 8002388:	480d      	ldr	r0, [pc, #52]	; (80023c0 <main+0x140>)
 800238a:	f7ff ff1f 	bl	80021cc <rt_kprintf>
    HAL_Delay(500);
 800238e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002392:	f002 fb97 	bl	8004ac4 <HAL_Delay>
	c++;
 8002396:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800239a:	3301      	adds	r3, #1
 800239c:	f88d 3003 	strb.w	r3, [sp, #3]
  while (1)
 80023a0:	e7e0      	b.n	8002364 <main+0xe4>
  while(1)
 80023a2:	e7fe      	b.n	80023a2 <main+0x122>
 80023a4:	e7fe      	b.n	80023a4 <main+0x124>
 80023a6:	bf00      	nop
 80023a8:	60000000 	.word	0x60000000
 80023ac:	400921fb 	.word	0x400921fb
 80023b0:	44020800 	.word	0x44020800
 80023b4:	40022000 	.word	0x40022000
 80023b8:	20000e24 	.word	0x20000e24
 80023bc:	20000eb8 	.word	0x20000eb8
 80023c0:	08013b5c 	.word	0x08013b5c

080023c4 <Error_Handler>:
 80023c4:	e7fe      	b.n	80023c4 <Error_Handler>
 80023c6:	bf00      	nop

080023c8 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80023ca:	6802      	ldr	r2, [r0, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d000      	beq.n	80023d2 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80023d0:	4770      	bx	lr
    HAL_IncTick();
 80023d2:	f002 bab5 	b.w	8004940 <HAL_IncTick>
 80023d6:	bf00      	nop
 80023d8:	40001000 	.word	0x40001000

080023dc <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 80023dc:	2200      	movs	r2, #0
{
 80023de:	b500      	push	{lr}
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <prvTaskExitError+0x28>)
{
 80023e2:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0UL;
 80023e4:	9201      	str	r2, [sp, #4]
    configASSERT( ulCriticalNesting == ~0UL );
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	3301      	adds	r3, #1
 80023ea:	d002      	beq.n	80023f2 <prvTaskExitError+0x16>
 80023ec:	f000 f97e 	bl	80026ec <ulSetInterruptMask>
 80023f0:	e7fe      	b.n	80023f0 <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 80023f2:	f000 f97b 	bl	80026ec <ulSetInterruptMask>

    while( ulDummy == 0 )
 80023f6:	9b01      	ldr	r3, [sp, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d0fc      	beq.n	80023f6 <prvTaskExitError+0x1a>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 80023fc:	b003      	add	sp, #12
 80023fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8002402:	bf00      	nop
 8002404:	200001d8 	.word	0x200001d8

08002408 <vPortSetupTimerInterrupt>:
{
 8002408:	b410      	push	{r4}
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 800240a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800240e:	2404      	movs	r4, #4
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002410:	2000      	movs	r0, #0
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002412:	2207      	movs	r2, #7
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002414:	4903      	ldr	r1, [pc, #12]	; (8002424 <vPortSetupTimerInterrupt+0x1c>)
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 8002416:	611c      	str	r4, [r3, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002418:	6198      	str	r0, [r3, #24]
}
 800241a:	f85d 4b04 	ldr.w	r4, [sp], #4
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800241e:	6159      	str	r1, [r3, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8002420:	611a      	str	r2, [r3, #16]
}
 8002422:	4770      	bx	lr
 8002424:	0003d08f 	.word	0x0003d08f

08002428 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002428:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800242c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002430:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 8002434:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002438:	f3bf 8f6f 	isb	sy
}
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop

08002440 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002440:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
 8002442:	f000 f953 	bl	80026ec <ulSetInterruptMask>
    ulCriticalNesting++;
 8002446:	4a04      	ldr	r2, [pc, #16]	; (8002458 <vPortEnterCritical+0x18>)
 8002448:	6813      	ldr	r3, [r2, #0]
 800244a:	3301      	adds	r3, #1
 800244c:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 800244e:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8002452:	f3bf 8f6f 	isb	sy
}
 8002456:	bd08      	pop	{r3, pc}
 8002458:	200001d8 	.word	0x200001d8

0800245c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800245c:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
 800245e:	4b08      	ldr	r3, [pc, #32]	; (8002480 <vPortExitCritical+0x24>)
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	b14a      	cbz	r2, 8002478 <vPortExitCritical+0x1c>
    ulCriticalNesting--;
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	3a01      	subs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	b100      	cbz	r0, 8002470 <vPortExitCritical+0x14>
    {
        portENABLE_INTERRUPTS();
    }
}
 800246e:	bd08      	pop	{r3, pc}
 8002470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
 8002474:	f000 b946 	b.w	8002704 <vClearInterruptMask>
    configASSERT( ulCriticalNesting );
 8002478:	f000 f938 	bl	80026ec <ulSetInterruptMask>
 800247c:	e7fe      	b.n	800247c <vPortExitCritical+0x20>
 800247e:	bf00      	nop
 8002480:	200001d8 	.word	0x200001d8

08002484 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8002484:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002486:	f000 f931 	bl	80026ec <ulSetInterruptMask>
 800248a:	4604      	mov	r4, r0
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800248c:	f009 fdd0 	bl	800c030 <xTaskIncrementTick>
 8002490:	b128      	cbz	r0, 800249e <SysTick_Handler+0x1a>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002492:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800249a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        else
        {
            traceISR_EXIT();
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800249e:	4620      	mov	r0, r4
}
 80024a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80024a4:	f000 b92e 	b.w	8002704 <vClearInterruptMask>

080024a8 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 80024a8:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 80024aa:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
 80024ac:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80024b0:	2b66      	cmp	r3, #102	; 0x66
 80024b2:	d002      	beq.n	80024ba <vPortSVCHandler_C+0x12>
                    break;
            #endif /* configENABLE_MPU == 1 */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 80024b4:	f000 f91a 	bl	80026ec <ulSetInterruptMask>
 80024b8:	e7fe      	b.n	80024b8 <vPortSVCHandler_C+0x10>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 80024ba:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80024be:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	; 0xd88
 80024c2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80024c6:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 80024ca:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	; 0xf34
 80024ce:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 80024d2:	f8c3 2f34 	str.w	r2, [r3, #3892]	; 0xf34
    }
}
 80024d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
 80024da:	f000 b8e1 	b.w	80026a0 <vRestoreContextOfFirstTask>
 80024de:	bf00      	nop

080024e0 <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 80024e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 80024e4:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 80024e8:	f04f 3710 	mov.w	r7, #269488144	; 0x10101010
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 80024ec:	f04f 3509 	mov.w	r5, #151587081	; 0x9090909
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 80024f0:	f840 4c04 	str.w	r4, [r0, #-4]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 80024f4:	f04f 3407 	mov.w	r4, #117901063	; 0x7070707
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 80024f8:	e940 570b 	strd	r5, r7, [r0, #-44]	; 0x2c
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 80024fc:	4d16      	ldr	r5, [pc, #88]	; (8002558 <pxPortInitialiseStack+0x78>)
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 80024fe:	f840 4c34 	str.w	r4, [r0, #-52]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 8002502:	e940 5203 	strd	r5, r2, [r0, #-12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8002506:	f04f 3c11 	mov.w	ip, #286331153	; 0x11111111
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 800250a:	f04f 3406 	mov.w	r4, #101058054	; 0x6060606
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 800250e:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 8002512:	e940 c309 	strd	ip, r3, [r0, #-36]	; 0x24
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 8002516:	e940 240f 	strd	r2, r4, [r0, #-60]	; 0x3c
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 800251a:	4603      	mov	r3, r0
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 800251c:	f04f 3a12 	mov.w	sl, #303174162	; 0x12121212
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8002520:	f04f 3903 	mov.w	r9, #50529027	; 0x3030303
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 8002524:	f04f 3802 	mov.w	r8, #33686018	; 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 8002528:	f04f 3e01 	mov.w	lr, #16843009	; 0x1010101
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 800252c:	f04f 3608 	mov.w	r6, #134744072	; 0x8080808
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8002530:	f04f 3504 	mov.w	r5, #67372036	; 0x4040404
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8002534:	f06f 0202 	mvn.w	r2, #2
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 8002538:	e940 9a05 	strd	r9, sl, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 800253c:	e940 e807 	strd	lr, r8, [r0, #-28]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 8002540:	f840 6c30 	str.w	r6, [r0, #-48]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 8002544:	f840 5c40 	str.w	r5, [r0, #-64]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 8002548:	f840 2c44 	str.w	r2, [r0, #-68]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 800254c:	f843 1d48 	str.w	r1, [r3, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
 8002550:	4618      	mov	r0, r3
 8002552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002556:	bf00      	nop
 8002558:	080023dd 	.word	0x080023dd

0800255c <xPortStartScheduler>:
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800255c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8002560:	b530      	push	{r4, r5, lr}
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002562:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8002566:	4938      	ldr	r1, [pc, #224]	; (8002648 <xPortStartScheduler+0xec>)
 8002568:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
{
 800256a:	b085      	sub	sp, #20
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 800256c:	4288      	cmp	r0, r1
 800256e:	d002      	beq.n	8002576 <xPortStartScheduler+0x1a>
 8002570:	f000 f8bc 	bl	80026ec <ulSetInterruptMask>
 8002574:	e7fe      	b.n	8002574 <xPortStartScheduler+0x18>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == PendSV_Handler );
 8002576:	4935      	ldr	r1, [pc, #212]	; (800264c <xPortStartScheduler+0xf0>)
 8002578:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800257a:	428a      	cmp	r2, r1
 800257c:	d002      	beq.n	8002584 <xPortStartScheduler+0x28>
 800257e:	f000 f8b5 	bl	80026ec <ulSetInterruptMask>
 8002582:	e7fe      	b.n	8002582 <xPortStartScheduler+0x26>
    }
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )
    {
        volatile uint32_t ulImplementedPrioBits = 0;
 8002584:	2000      	movs	r0, #0
         * "FromISR". FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * First, determine the number of priority bits available. Write to all
         * possible bits in the priority setting for SVCall. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8002586:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        volatile uint32_t ulImplementedPrioBits = 0;
 800258a:	9002      	str	r0, [sp, #8]
        portNVIC_SHPR2_REG = 0xFF000000;
 800258c:	f8c3 1d1c 	str.w	r1, [r3, #3356]	; 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8002590:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002594:	4a2e      	ldr	r2, [pc, #184]	; (8002650 <xPortStartScheduler+0xf4>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8002596:	0e1b      	lsrs	r3, r3, #24
 8002598:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800259c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025a4:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03e      	beq.n	8002628 <xPortStartScheduler+0xcc>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 80025aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025ae:	43db      	mvns	r3, r3
 80025b0:	f013 0f50 	tst.w	r3, #80	; 0x50
 80025b4:	d009      	beq.n	80025ca <xPortStartScheduler+0x6e>
 80025b6:	e03a      	b.n	800262e <xPortStartScheduler+0xd2>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80025b8:	9b02      	ldr	r3, [sp, #8]
 80025ba:	3301      	adds	r3, #1
 80025bc:	9302      	str	r3, [sp, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80025be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80025ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	d4f2      	bmi.n	80025b8 <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
 80025d2:	9b02      	ldr	r3, [sp, #8]
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d035      	beq.n	8002644 <xPortStartScheduler+0xe8>
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80025d8:	9b02      	ldr	r3, [sp, #8]
 80025da:	f1c3 0307 	rsb	r3, r3, #7
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80025de:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) ) */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80025e4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
    portNVIC_SHPR2_REG = 0;
 80025e8:	2400      	movs	r4, #0
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025ea:	491a      	ldr	r1, [pc, #104]	; (8002654 <xPortStartScheduler+0xf8>)
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 80025ec:	4d1a      	ldr	r5, [pc, #104]	; (8002658 <xPortStartScheduler+0xfc>)
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80025ee:	600b      	str	r3, [r1, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80025f0:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
 80025f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025f8:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80025fc:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
 8002600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002604:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    portNVIC_SHPR2_REG = 0;
 8002608:	f8c2 4d1c 	str.w	r4, [r2, #3356]	; 0xd1c
    vPortSetupTimerInterrupt();
 800260c:	f7ff fefc 	bl	8002408 <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
 8002610:	602c      	str	r4, [r5, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif /* ( ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) ) */

    /* Start the first task. */
    vStartFirstTask();
 8002612:	f000 f85b 	bl	80026cc <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002616:	f009 fd1b 	bl	800c050 <vTaskSwitchContext>
    volatile uint32_t ulDummy = 0UL;
 800261a:	9403      	str	r4, [sp, #12]
    configASSERT( ulCriticalNesting == ~0UL );
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	3301      	adds	r3, #1
 8002620:	d008      	beq.n	8002634 <xPortStartScheduler+0xd8>
 8002622:	f000 f863 	bl	80026ec <ulSetInterruptMask>
 8002626:	e7fe      	b.n	8002626 <xPortStartScheduler+0xca>
        configASSERT( ucMaxSysCallPriority );
 8002628:	f000 f860 	bl	80026ec <ulSetInterruptMask>
 800262c:	e7fe      	b.n	800262c <xPortStartScheduler+0xd0>
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 800262e:	f000 f85d 	bl	80026ec <ulSetInterruptMask>
 8002632:	e7fe      	b.n	8002632 <xPortStartScheduler+0xd6>
    portDISABLE_INTERRUPTS();
 8002634:	f000 f85a 	bl	80026ec <ulSetInterruptMask>
    while( ulDummy == 0 )
 8002638:	9b03      	ldr	r3, [sp, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0fc      	beq.n	8002638 <xPortStartScheduler+0xdc>
    prvTaskExitError();

    /* Should not get here. */
    return 0;
}
 800263e:	2000      	movs	r0, #0
 8002640:	b005      	add	sp, #20
 8002642:	bd30      	pop	{r4, r5, pc}
 8002644:	2300      	movs	r3, #0
 8002646:	e7cd      	b.n	80025e4 <xPortStartScheduler+0x88>
 8002648:	08002771 	.word	0x08002771
 800264c:	08002715 	.word	0x08002715
 8002650:	20005ff8 	.word	0x20005ff8
 8002654:	20005ffc 	.word	0x20005ffc
 8002658:	200001d8 	.word	0x200001d8

0800265c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )

    void vPortValidateInterruptPriority( void )
    {
 800265c:	b508      	push	{r3, lr}
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800265e:	f3ef 8305 	mrs	r3, IPSR

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002662:	2b0f      	cmp	r3, #15
 8002664:	d905      	bls.n	8002672 <vPortValidateInterruptPriority+0x16>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002666:	490b      	ldr	r1, [pc, #44]	; (8002694 <vPortValidateInterruptPriority+0x38>)
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002668:	4a0b      	ldr	r2, [pc, #44]	; (8002698 <vPortValidateInterruptPriority+0x3c>)
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800266a:	5c5b      	ldrb	r3, [r3, r1]
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d80d      	bhi.n	800268e <vPortValidateInterruptPriority+0x32>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002672:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <vPortValidateInterruptPriority+0x40>)
 8002678:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002682:	4293      	cmp	r3, r2
 8002684:	d800      	bhi.n	8002688 <vPortValidateInterruptPriority+0x2c>
    }
 8002686:	bd08      	pop	{r3, pc}
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002688:	f000 f830 	bl	80026ec <ulSetInterruptMask>
 800268c:	e7fe      	b.n	800268c <vPortValidateInterruptPriority+0x30>
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800268e:	f000 f82d 	bl	80026ec <ulSetInterruptMask>
 8002692:	e7fe      	b.n	8002692 <vPortValidateInterruptPriority+0x36>
 8002694:	e000e3f0 	.word	0xe000e3f0
 8002698:	20005ff8 	.word	0x20005ff8
 800269c:	20005ffc 	.word	0x20005ffc

080026a0 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80026a0:	4a09      	ldr	r2, [pc, #36]	; (80026c8 <vRestoreContextOfFirstTask+0x28>)
 80026a2:	6811      	ldr	r1, [r2, #0]
 80026a4:	6808      	ldr	r0, [r1, #0]
 80026a6:	c806      	ldmia	r0!, {r1, r2}
 80026a8:	f381 880b 	msr	PSPLIM, r1
 80026ac:	2102      	movs	r1, #2
 80026ae:	f381 8814 	msr	CONTROL, r1
 80026b2:	3020      	adds	r0, #32
 80026b4:	f380 8809 	msr	PSP, r0
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	f380 8811 	msr	BASEPRI, r0
 80026c4:	4710      	bx	r2
            "   isb                                             \n"
            "   mov  r0, #0                                     \n"
            "   msr  basepri, r0                                \n" /* Ensure that interrupts are enabled when the first task starts. */
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
        );
    }
 80026c6:	0000      	.short	0x0000
 80026c8:	20006058 	.word	0x20006058

080026cc <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80026cc:	4806      	ldr	r0, [pc, #24]	; (80026e8 <vStartFirstTask+0x1c>)
 80026ce:	6800      	ldr	r0, [r0, #0]
 80026d0:	6800      	ldr	r0, [r0, #0]
 80026d2:	f380 8808 	msr	MSP, r0
 80026d6:	b662      	cpsie	i
 80026d8:	b661      	cpsie	f
 80026da:	f3bf 8f4f 	dsb	sy
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	df66      	svc	102	; 0x66
 80026e4:	bf00      	nop
        "   isb                                             \n"
        "   svc %0                                          \n" /* System call to start the first task. */
        "   nop                                             \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 80026e6:	0000      	.short	0x0000
 80026e8:	e000ed08 	.word	0xe000ed08

080026ec <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 80026ec:	f3ef 8011 	mrs	r0, BASEPRI
 80026f0:	f04f 0150 	mov.w	r1, #80	; 0x50
 80026f4:	f381 8811 	msr	BASEPRI, r1
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop

08002704 <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8002704:	f380 8811 	msr	BASEPRI, r0
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop

08002714 <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8002714:	f3ef 8009 	mrs	r0, PSP
 8002718:	f01e 0f10 	tst.w	lr, #16
 800271c:	bf08      	it	eq
 800271e:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002722:	f3ef 820b 	mrs	r2, PSPLIM
 8002726:	4673      	mov	r3, lr
 8002728:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <PendSV_Handler+0x58>)
 800272e:	6811      	ldr	r1, [r2, #0]
 8002730:	6008      	str	r0, [r1, #0]
 8002732:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002736:	f380 8811 	msr	BASEPRI, r0
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f009 fc85 	bl	800c050 <vTaskSwitchContext>
 8002746:	f04f 0000 	mov.w	r0, #0
 800274a:	f380 8811 	msr	BASEPRI, r0
 800274e:	4a07      	ldr	r2, [pc, #28]	; (800276c <PendSV_Handler+0x58>)
 8002750:	6811      	ldr	r1, [r2, #0]
 8002752:	6808      	ldr	r0, [r1, #0]
 8002754:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002758:	f013 0f10 	tst.w	r3, #16
 800275c:	bf08      	it	eq
 800275e:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002762:	f382 880b 	msr	PSPLIM, r2
 8002766:	f380 8809 	msr	PSP, r0
 800276a:	4718      	bx	r3
            "   msr psplim, r2                                  \n" /* Restore the PSPLIM register value for the task. */
            "   msr psp, r0                                     \n" /* Remember the new top of stack for the task. */
            "   bx r3                                           \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 800276c:	20006058 	.word	0x20006058

08002770 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8002770:	f01e 0f04 	tst.w	lr, #4
 8002774:	bf0c      	ite	eq
 8002776:	f3ef 8008 	mrseq	r0, MSP
 800277a:	f3ef 8009 	mrsne	r0, PSP
 800277e:	4901      	ldr	r1, [pc, #4]	; (8002784 <SVC_Handler+0x14>)
 8002780:	4708      	bx	r1
            "   mrseq r0, msp                                   \n"
            "   mrsne r0, psp                                   \n"
            "   ldr r1, =vPortSVCHandler_C                      \n"
            "   bx r1                                           \n"
        );
    }
 8002782:	0000      	.short	0x0000
 8002784:	080024a9 	.word	0x080024a9

08002788 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	4615      	mov	r5, r2

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800278c:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800278e:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002790:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002792:	b92a      	cbnz	r2, 80027a0 <prvCopyDataToQueue+0x18>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002794:	6805      	ldr	r5, [r0, #0]
 8002796:	b34d      	cbz	r5, 80027ec <prvCopyDataToQueue+0x64>
    BaseType_t xReturn = pdFALSE;
 8002798:	2000      	movs	r0, #0
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800279a:	3601      	adds	r6, #1
 800279c:	63a6      	str	r6, [r4, #56]	; 0x38

    return xReturn;
}
 800279e:	bd70      	pop	{r4, r5, r6, pc}
    else if( xPosition == queueSEND_TO_BACK )
 80027a0:	b97d      	cbnz	r5, 80027c2 <prvCopyDataToQueue+0x3a>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80027a2:	6840      	ldr	r0, [r0, #4]
 80027a4:	f7fe fc28 	bl	8000ff8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80027a8:	6863      	ldr	r3, [r4, #4]
 80027aa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027ac:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80027ae:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80027b0:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d3f0      	bcc.n	8002798 <prvCopyDataToQueue+0x10>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027b6:	6823      	ldr	r3, [r4, #0]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80027b8:	3601      	adds	r6, #1
    BaseType_t xReturn = pdFALSE;
 80027ba:	4628      	mov	r0, r5
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80027bc:	6063      	str	r3, [r4, #4]
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80027be:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80027c0:	bd70      	pop	{r4, r5, r6, pc}
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80027c2:	68c0      	ldr	r0, [r0, #12]
 80027c4:	f7fe fc18 	bl	8000ff8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80027ca:	68e3      	ldr	r3, [r4, #12]
 80027cc:	4251      	negs	r1, r2
 80027ce:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80027d0:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80027d2:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d202      	bcs.n	80027de <prvCopyDataToQueue+0x56>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80027d8:	68a3      	ldr	r3, [r4, #8]
 80027da:	440b      	add	r3, r1
 80027dc:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 80027de:	2d02      	cmp	r5, #2
 80027e0:	d1da      	bne.n	8002798 <prvCopyDataToQueue+0x10>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027e2:	2e01      	cmp	r6, #1
 80027e4:	bf38      	it	cc
 80027e6:	2601      	movcc	r6, #1
    BaseType_t xReturn = pdFALSE;
 80027e8:	2000      	movs	r0, #0
 80027ea:	e7d7      	b.n	800279c <prvCopyDataToQueue+0x14>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80027ec:	6880      	ldr	r0, [r0, #8]
 80027ee:	f009 fdab 	bl	800c348 <xTaskPriorityDisinherit>
    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 80027f2:	3601      	adds	r6, #1
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80027f4:	60a5      	str	r5, [r4, #8]
 80027f6:	e7d1      	b.n	800279c <prvCopyDataToQueue+0x14>

080027f8 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027f8:	b570      	push	{r4, r5, r6, lr}
 80027fa:	4605      	mov	r5, r0

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027fc:	f7ff fe20 	bl	8002440 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002800:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8002804:	b25c      	sxtb	r4, r3

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002806:	2c00      	cmp	r4, #0
 8002808:	dd14      	ble.n	8002834 <prvUnlockQueue+0x3c>
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800280a:	f105 0624 	add.w	r6, r5, #36	; 0x24
 800280e:	e003      	b.n	8002818 <prvUnlockQueue+0x20>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002810:	1e63      	subs	r3, r4, #1
 8002812:	b2da      	uxtb	r2, r3
 8002814:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002816:	b16a      	cbz	r2, 8002834 <prvUnlockQueue+0x3c>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002818:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800281a:	b15b      	cbz	r3, 8002834 <prvUnlockQueue+0x3c>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800281c:	4630      	mov	r0, r6
 800281e:	f009 fc61 	bl	800c0e4 <xTaskRemoveFromEventList>
 8002822:	2800      	cmp	r0, #0
 8002824:	d0f4      	beq.n	8002810 <prvUnlockQueue+0x18>
                        vTaskMissedYield();
 8002826:	f009 fd17 	bl	800c258 <vTaskMissedYield>
            --cTxLock;
 800282a:	1e63      	subs	r3, r4, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002830:	2a00      	cmp	r2, #0
 8002832:	d1f1      	bne.n	8002818 <prvUnlockQueue+0x20>
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002834:	23ff      	movs	r3, #255	; 0xff
 8002836:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800283a:	f7ff fe0f 	bl	800245c <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800283e:	f7ff fdff 	bl	8002440 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002842:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8002846:	b25c      	sxtb	r4, r3

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002848:	2c00      	cmp	r4, #0
 800284a:	dd14      	ble.n	8002876 <prvUnlockQueue+0x7e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800284c:	f105 0610 	add.w	r6, r5, #16
 8002850:	e003      	b.n	800285a <prvUnlockQueue+0x62>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002852:	1e63      	subs	r3, r4, #1
 8002854:	b2da      	uxtb	r2, r3
 8002856:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002858:	b16a      	cbz	r2, 8002876 <prvUnlockQueue+0x7e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800285a:	692b      	ldr	r3, [r5, #16]
 800285c:	b15b      	cbz	r3, 8002876 <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800285e:	4630      	mov	r0, r6
 8002860:	f009 fc40 	bl	800c0e4 <xTaskRemoveFromEventList>
 8002864:	2800      	cmp	r0, #0
 8002866:	d0f4      	beq.n	8002852 <prvUnlockQueue+0x5a>
                    vTaskMissedYield();
 8002868:	f009 fcf6 	bl	800c258 <vTaskMissedYield>
                --cRxLock;
 800286c:	1e63      	subs	r3, r4, #1
 800286e:	b2da      	uxtb	r2, r3
 8002870:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002872:	2a00      	cmp	r2, #0
 8002874:	d1f1      	bne.n	800285a <prvUnlockQueue+0x62>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002876:	23ff      	movs	r3, #255	; 0xff
 8002878:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
}
 800287c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8002880:	f7ff bdec 	b.w	800245c <vPortExitCritical>

08002884 <xQueueGenericReset>:
{
 8002884:	b570      	push	{r4, r5, r6, lr}
    configASSERT( pxQueue );
 8002886:	b368      	cbz	r0, 80028e4 <xQueueGenericReset+0x60>
        ( pxQueue->uxLength >= 1U ) &&
 8002888:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800288a:	4604      	mov	r4, r0
    if( ( pxQueue != NULL ) &&
 800288c:	b1f3      	cbz	r3, 80028cc <xQueueGenericReset+0x48>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800288e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002890:	fba5 3503 	umull	r3, r5, r5, r3
 8002894:	b9d5      	cbnz	r5, 80028cc <xQueueGenericReset+0x48>
 8002896:	460e      	mov	r6, r1
        taskENTER_CRITICAL();
 8002898:	f7ff fdd2 	bl	8002440 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800289c:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
            pxQueue->cRxLock = queueUNLOCKED;
 80028a0:	21ff      	movs	r1, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028a2:	fb00 f303 	mul.w	r3, r0, r3
 80028a6:	6822      	ldr	r2, [r4, #0]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80028a8:	1a18      	subs	r0, r3, r0
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028aa:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028ac:	4413      	add	r3, r2
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80028ae:	4402      	add	r2, r0
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028b0:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80028b2:	e9c4 3202 	strd	r3, r2, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 80028b6:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80028ba:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 80028be:	b946      	cbnz	r6, 80028d2 <xQueueGenericReset+0x4e>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c0:	6923      	ldr	r3, [r4, #16]
 80028c2:	b993      	cbnz	r3, 80028ea <xQueueGenericReset+0x66>
        taskEXIT_CRITICAL();
 80028c4:	f7ff fdca 	bl	800245c <vPortExitCritical>
}
 80028c8:	2001      	movs	r0, #1
 80028ca:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( xReturn != pdFAIL );
 80028cc:	f7ff ff0e 	bl	80026ec <ulSetInterruptMask>
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericReset+0x4c>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028d2:	f104 0010 	add.w	r0, r4, #16
 80028d6:	f7ff fc95 	bl	8002204 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028de:	f7ff fc91 	bl	8002204 <vListInitialise>
 80028e2:	e7ef      	b.n	80028c4 <xQueueGenericReset+0x40>
    configASSERT( pxQueue );
 80028e4:	f7ff ff02 	bl	80026ec <ulSetInterruptMask>
 80028e8:	e7fe      	b.n	80028e8 <xQueueGenericReset+0x64>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ea:	f104 0010 	add.w	r0, r4, #16
 80028ee:	f009 fbf9 	bl	800c0e4 <xTaskRemoveFromEventList>
 80028f2:	2800      	cmp	r0, #0
 80028f4:	d0e6      	beq.n	80028c4 <xQueueGenericReset+0x40>
                        queueYIELD_IF_USING_PREEMPTION();
 80028f6:	f7ff fd97 	bl	8002428 <vPortYield>
 80028fa:	e7e3      	b.n	80028c4 <xQueueGenericReset+0x40>

080028fc <xQueueGenericCreateStatic>:
    {
 80028fc:	b570      	push	{r4, r5, r6, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	f89d 5018 	ldrb.w	r5, [sp, #24]
        configASSERT( pxStaticQueue );
 8002904:	b363      	cbz	r3, 8002960 <xQueueGenericCreateStatic+0x64>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002906:	b1c0      	cbz	r0, 800293a <xQueueGenericCreateStatic+0x3e>
 8002908:	460c      	mov	r4, r1
 800290a:	461e      	mov	r6, r3
            ( pxStaticQueue != NULL ) &&
 800290c:	b1c2      	cbz	r2, 8002940 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 800290e:	b1a1      	cbz	r1, 800293a <xQueueGenericCreateStatic+0x3e>
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002910:	2150      	movs	r1, #80	; 0x50
 8002912:	9101      	str	r1, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002914:	9901      	ldr	r1, [sp, #4]
 8002916:	2950      	cmp	r1, #80	; 0x50
 8002918:	d11f      	bne.n	800295a <xQueueGenericCreateStatic+0x5e>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 800291a:	9901      	ldr	r1, [sp, #4]
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800291c:	2101      	movs	r1, #1
 800291e:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
    pxNewQueue->uxItemSize = uxItemSize;
 8002922:	e9c6 040f 	strd	r0, r4, [r6, #60]	; 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002926:	2101      	movs	r1, #1
 8002928:	4630      	mov	r0, r6
 800292a:	6032      	str	r2, [r6, #0]
 800292c:	f7ff ffaa 	bl	8002884 <xQueueGenericReset>
    }
 8002930:	4630      	mov	r0, r6
        pxNewQueue->ucQueueType = ucQueueType;
 8002932:	f886 504c 	strb.w	r5, [r6, #76]	; 0x4c
    }
 8002936:	b002      	add	sp, #8
 8002938:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxNewQueue );
 800293a:	f7ff fed7 	bl	80026ec <ulSetInterruptMask>
 800293e:	e7fe      	b.n	800293e <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8002940:	2900      	cmp	r1, #0
 8002942:	d1fa      	bne.n	800293a <xQueueGenericCreateStatic+0x3e>
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002944:	2250      	movs	r2, #80	; 0x50
 8002946:	9201      	str	r2, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002948:	9a01      	ldr	r2, [sp, #4]
 800294a:	2a50      	cmp	r2, #80	; 0x50
 800294c:	d105      	bne.n	800295a <xQueueGenericCreateStatic+0x5e>
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800294e:	2101      	movs	r1, #1
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8002950:	9a01      	ldr	r2, [sp, #4]
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002952:	f886 1046 	strb.w	r1, [r6, #70]	; 0x46
 8002956:	4632      	mov	r2, r6
 8002958:	e7e3      	b.n	8002922 <xQueueGenericCreateStatic+0x26>
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800295a:	f7ff fec7 	bl	80026ec <ulSetInterruptMask>
 800295e:	e7fe      	b.n	800295e <xQueueGenericCreateStatic+0x62>
        configASSERT( pxStaticQueue );
 8002960:	f7ff fec4 	bl	80026ec <ulSetInterruptMask>
 8002964:	e7fe      	b.n	8002964 <xQueueGenericCreateStatic+0x68>
 8002966:	bf00      	nop

08002968 <xQueueGenericCreate>:
    {
 8002968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800296c:	b148      	cbz	r0, 8002982 <xQueueGenericCreate+0x1a>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800296e:	fba0 3601 	umull	r3, r6, r0, r1
 8002972:	4604      	mov	r4, r0
 8002974:	460d      	mov	r5, r1
 8002976:	b926      	cbnz	r6, 8002982 <xQueueGenericCreate+0x1a>
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002978:	fb01 f000 	mul.w	r0, r1, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800297c:	f110 0f51 	cmn.w	r0, #81	; 0x51
 8002980:	d902      	bls.n	8002988 <xQueueGenericCreate+0x20>
            configASSERT( pxNewQueue );
 8002982:	f7ff feb3 	bl	80026ec <ulSetInterruptMask>
 8002986:	e7fe      	b.n	8002986 <xQueueGenericCreate+0x1e>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002988:	3050      	adds	r0, #80	; 0x50
 800298a:	4690      	mov	r8, r2
 800298c:	f7ff fafc 	bl	8001f88 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8002990:	4607      	mov	r7, r0
 8002992:	b168      	cbz	r0, 80029b0 <xQueueGenericCreate+0x48>
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002994:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
    if( uxItemSize == ( UBaseType_t ) 0 )
 8002998:	b16d      	cbz	r5, 80029b6 <xQueueGenericCreate+0x4e>
                pucQueueStorage += sizeof( Queue_t );
 800299a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800299e:	2101      	movs	r1, #1
 80029a0:	4638      	mov	r0, r7
    pxNewQueue->uxItemSize = uxItemSize;
 80029a2:	e9c7 450f 	strd	r4, r5, [r7, #60]	; 0x3c
 80029a6:	603b      	str	r3, [r7, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029a8:	f7ff ff6c 	bl	8002884 <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 80029ac:	f887 804c 	strb.w	r8, [r7, #76]	; 0x4c
    }
 80029b0:	4638      	mov	r0, r7
 80029b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029b6:	4603      	mov	r3, r0
 80029b8:	e7f1      	b.n	800299e <xQueueGenericCreate+0x36>
 80029ba:	bf00      	nop

080029bc <xQueueGenericSend>:
{
 80029bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029c0:	b085      	sub	sp, #20
 80029c2:	9201      	str	r2, [sp, #4]
    configASSERT( pxQueue );
 80029c4:	2800      	cmp	r0, #0
 80029c6:	f000 8084 	beq.w	8002ad2 <xQueueGenericSend+0x116>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ca:	4604      	mov	r4, r0
 80029cc:	4688      	mov	r8, r1
 80029ce:	461f      	mov	r7, r3
 80029d0:	2900      	cmp	r1, #0
 80029d2:	d05d      	beq.n	8002a90 <xQueueGenericSend+0xd4>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029d4:	2f02      	cmp	r7, #2
 80029d6:	d102      	bne.n	80029de <xQueueGenericSend+0x22>
 80029d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d16c      	bne.n	8002ab8 <xQueueGenericSend+0xfc>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029de:	f009 fc41 	bl	800c264 <xTaskGetSchedulerState>
 80029e2:	4605      	mov	r5, r0
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d049      	beq.n	8002a7c <xQueueGenericSend+0xc0>
 80029e8:	2500      	movs	r5, #0
        prvLockQueue( pxQueue );
 80029ea:	f04f 0900 	mov.w	r9, #0
 80029ee:	e007      	b.n	8002a00 <xQueueGenericSend+0x44>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80029f0:	f7ff fd34 	bl	800245c <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7ff feff 	bl	80027f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029fa:	f009 fafd 	bl	800bff8 <xTaskResumeAll>
 80029fe:	2501      	movs	r5, #1
        taskENTER_CRITICAL();
 8002a00:	f7ff fd1e 	bl	8002440 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a04:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002a06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002a08:	4290      	cmp	r0, r2
 8002a0a:	d347      	bcc.n	8002a9c <xQueueGenericSend+0xe0>
 8002a0c:	2f02      	cmp	r7, #2
 8002a0e:	d045      	beq.n	8002a9c <xQueueGenericSend+0xe0>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002a10:	9e01      	ldr	r6, [sp, #4]
 8002a12:	2e00      	cmp	r6, #0
 8002a14:	d060      	beq.n	8002ad8 <xQueueGenericSend+0x11c>
                else if( xEntryTimeSet == pdFALSE )
 8002a16:	2d00      	cmp	r5, #0
 8002a18:	d036      	beq.n	8002a88 <xQueueGenericSend+0xcc>
        taskEXIT_CRITICAL();
 8002a1a:	f7ff fd1f 	bl	800245c <vPortExitCritical>
        vTaskSuspendAll();
 8002a1e:	f009 fae3 	bl	800bfe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002a22:	f7ff fd0d 	bl	8002440 <vPortEnterCritical>
 8002a26:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002a2a:	2bff      	cmp	r3, #255	; 0xff
 8002a2c:	bf08      	it	eq
 8002a2e:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8002a32:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002a36:	2bff      	cmp	r3, #255	; 0xff
 8002a38:	bf08      	it	eq
 8002a3a:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8002a3e:	f7ff fd0d 	bl	800245c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a42:	a901      	add	r1, sp, #4
 8002a44:	a802      	add	r0, sp, #8
 8002a46:	f009 fbcd 	bl	800c1e4 <xTaskCheckForTimeOut>
 8002a4a:	2800      	cmp	r0, #0
 8002a4c:	d14a      	bne.n	8002ae4 <xQueueGenericSend+0x128>
    taskENTER_CRITICAL();
 8002a4e:	f7ff fcf7 	bl	8002440 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002a52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002a54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d1ca      	bne.n	80029f0 <xQueueGenericSend+0x34>
    taskEXIT_CRITICAL();
 8002a5a:	f7ff fcff 	bl	800245c <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a5e:	9901      	ldr	r1, [sp, #4]
 8002a60:	f104 0010 	add.w	r0, r4, #16
 8002a64:	f009 fb02 	bl	800c06c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff fec5 	bl	80027f8 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8002a6e:	f009 fac3 	bl	800bff8 <xTaskResumeAll>
 8002a72:	2800      	cmp	r0, #0
 8002a74:	d1c3      	bne.n	80029fe <xQueueGenericSend+0x42>
                    taskYIELD_WITHIN_API();
 8002a76:	f7ff fcd7 	bl	8002428 <vPortYield>
 8002a7a:	e7c0      	b.n	80029fe <xQueueGenericSend+0x42>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a7c:	9b01      	ldr	r3, [sp, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0b3      	beq.n	80029ea <xQueueGenericSend+0x2e>
 8002a82:	f7ff fe33 	bl	80026ec <ulSetInterruptMask>
 8002a86:	e7fe      	b.n	8002a86 <xQueueGenericSend+0xca>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002a88:	a802      	add	r0, sp, #8
 8002a8a:	f009 fb9f 	bl	800c1cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002a8e:	e7c4      	b.n	8002a1a <xQueueGenericSend+0x5e>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a90:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d09e      	beq.n	80029d4 <xQueueGenericSend+0x18>
 8002a96:	f7ff fe29 	bl	80026ec <ulSetInterruptMask>
 8002a9a:	e7fe      	b.n	8002a9a <xQueueGenericSend+0xde>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a9c:	463a      	mov	r2, r7
 8002a9e:	4641      	mov	r1, r8
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7ff fe71 	bl	8002788 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002aa8:	b963      	cbnz	r3, 8002ac4 <xQueueGenericSend+0x108>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aaa:	b940      	cbnz	r0, 8002abe <xQueueGenericSend+0x102>
                taskEXIT_CRITICAL();
 8002aac:	f7ff fcd6 	bl	800245c <vPortExitCritical>
                return pdPASS;
 8002ab0:	2001      	movs	r0, #1
}
 8002ab2:	b005      	add	sp, #20
 8002ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ab8:	f7ff fe18 	bl	80026ec <ulSetInterruptMask>
 8002abc:	e7fe      	b.n	8002abc <xQueueGenericSend+0x100>
                            queueYIELD_IF_USING_PREEMPTION();
 8002abe:	f7ff fcb3 	bl	8002428 <vPortYield>
 8002ac2:	e7f3      	b.n	8002aac <xQueueGenericSend+0xf0>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ac4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ac8:	f009 fb0c 	bl	800c0e4 <xTaskRemoveFromEventList>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d0ed      	beq.n	8002aac <xQueueGenericSend+0xf0>
 8002ad0:	e7f5      	b.n	8002abe <xQueueGenericSend+0x102>
    configASSERT( pxQueue );
 8002ad2:	f7ff fe0b 	bl	80026ec <ulSetInterruptMask>
 8002ad6:	e7fe      	b.n	8002ad6 <xQueueGenericSend+0x11a>
                    taskEXIT_CRITICAL();
 8002ad8:	f7ff fcc0 	bl	800245c <vPortExitCritical>
                    return errQUEUE_FULL;
 8002adc:	4630      	mov	r0, r6
}
 8002ade:	b005      	add	sp, #20
 8002ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            prvUnlockQueue( pxQueue );
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f7ff fe87 	bl	80027f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002aea:	f009 fa85 	bl	800bff8 <xTaskResumeAll>
            return errQUEUE_FULL;
 8002aee:	2000      	movs	r0, #0
}
 8002af0:	b005      	add	sp, #20
 8002af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002af6:	bf00      	nop

08002af8 <xQueueCreateMutex>:
    {
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	4605      	mov	r5, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002afc:	2050      	movs	r0, #80	; 0x50
 8002afe:	f7ff fa43 	bl	8001f88 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8002b02:	4604      	mov	r4, r0
 8002b04:	b198      	cbz	r0, 8002b2e <xQueueCreateMutex+0x36>
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b06:	2600      	movs	r6, #0
    pxNewQueue->uxLength = uxQueueLength;
 8002b08:	2101      	movs	r1, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b0a:	6020      	str	r0, [r4, #0]
    pxNewQueue->uxItemSize = uxItemSize;
 8002b0c:	e9c0 160f 	strd	r1, r6, [r0, #60]	; 0x3c
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b10:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b14:	f7ff feb6 	bl	8002884 <xQueueGenericReset>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002b18:	4633      	mov	r3, r6
 8002b1a:	4632      	mov	r2, r6
 8002b1c:	4631      	mov	r1, r6
 8002b1e:	4620      	mov	r0, r4
        pxNewQueue->ucQueueType = ucQueueType;
 8002b20:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002b24:	60a6      	str	r6, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002b26:	6026      	str	r6, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002b28:	60e6      	str	r6, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002b2a:	f7ff ff47 	bl	80029bc <xQueueGenericSend>
    }
 8002b2e:	4620      	mov	r0, r4
 8002b30:	bd70      	pop	{r4, r5, r6, pc}
 8002b32:	bf00      	nop

08002b34 <xQueueGenericSendFromISR>:
{
 8002b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    configASSERT( pxQueue );
 8002b38:	2800      	cmp	r0, #0
 8002b3a:	d048      	beq.n	8002bce <xQueueGenericSendFromISR+0x9a>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
 8002b40:	4617      	mov	r7, r2
 8002b42:	461e      	mov	r6, r3
 8002b44:	b371      	cbz	r1, 8002ba4 <xQueueGenericSendFromISR+0x70>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b46:	2e02      	cmp	r6, #2
 8002b48:	d11c      	bne.n	8002b84 <xQueueGenericSendFromISR+0x50>
 8002b4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d12f      	bne.n	8002bb0 <xQueueGenericSendFromISR+0x7c>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b50:	f7ff fd84 	bl	800265c <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8002b54:	f7ff fdca 	bl	80026ec <ulSetInterruptMask>
 8002b58:	4680      	mov	r8, r0
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b5c:	4629      	mov	r1, r5
            const int8_t cTxLock = pxQueue->cTxLock;
 8002b5e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b62:	4632      	mov	r2, r6
 8002b64:	4620      	mov	r0, r4
            const int8_t cTxLock = pxQueue->cTxLock;
 8002b66:	b26d      	sxtb	r5, r5
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b68:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b6a:	f7ff fe0d 	bl	8002788 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 8002b6e:	1c6b      	adds	r3, r5, #1
 8002b70:	d121      	bne.n	8002bb6 <xQueueGenericSendFromISR+0x82>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b74:	bb73      	cbnz	r3, 8002bd4 <xQueueGenericSendFromISR+0xa0>
            xReturn = pdPASS;
 8002b76:	2501      	movs	r5, #1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8002b78:	4640      	mov	r0, r8
 8002b7a:	f7ff fdc3 	bl	8002704 <vClearInterruptMask>
}
 8002b7e:	4628      	mov	r0, r5
 8002b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b84:	f7ff fd6a 	bl	800265c <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8002b88:	f7ff fdb0 	bl	80026ec <ulSetInterruptMask>
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8002b90:	4680      	mov	r8, r0
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d3e2      	bcc.n	8002b5c <xQueueGenericSendFromISR+0x28>
            xReturn = errQUEUE_FULL;
 8002b96:	2500      	movs	r5, #0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8002b98:	4640      	mov	r0, r8
 8002b9a:	f7ff fdb3 	bl	8002704 <vClearInterruptMask>
}
 8002b9e:	4628      	mov	r0, r5
 8002ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ba4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d0cd      	beq.n	8002b46 <xQueueGenericSendFromISR+0x12>
 8002baa:	f7ff fd9f 	bl	80026ec <ulSetInterruptMask>
 8002bae:	e7fe      	b.n	8002bae <xQueueGenericSendFromISR+0x7a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb0:	f7ff fd9c 	bl	80026ec <ulSetInterruptMask>
 8002bb4:	e7fe      	b.n	8002bb4 <xQueueGenericSendFromISR+0x80>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002bb6:	f009 fa35 	bl	800c024 <uxTaskGetNumberOfTasks>
 8002bba:	4285      	cmp	r5, r0
 8002bbc:	d2db      	bcs.n	8002b76 <xQueueGenericSendFromISR+0x42>
 8002bbe:	2d7f      	cmp	r5, #127	; 0x7f
 8002bc0:	d014      	beq.n	8002bec <xQueueGenericSendFromISR+0xb8>
 8002bc2:	1c6b      	adds	r3, r5, #1
 8002bc4:	b25b      	sxtb	r3, r3
            xReturn = pdPASS;
 8002bc6:	2501      	movs	r5, #1
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002bc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bcc:	e7e4      	b.n	8002b98 <xQueueGenericSendFromISR+0x64>
    configASSERT( pxQueue );
 8002bce:	f7ff fd8d 	bl	80026ec <ulSetInterruptMask>
 8002bd2:	e7fe      	b.n	8002bd2 <xQueueGenericSendFromISR+0x9e>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002bd8:	f009 fa84 	bl	800c0e4 <xTaskRemoveFromEventList>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d0ca      	beq.n	8002b76 <xQueueGenericSendFromISR+0x42>
                            if( pxHigherPriorityTaskWoken != NULL )
 8002be0:	2f00      	cmp	r7, #0
 8002be2:	d0c8      	beq.n	8002b76 <xQueueGenericSendFromISR+0x42>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002be4:	2301      	movs	r3, #1
            xReturn = pdPASS;
 8002be6:	461d      	mov	r5, r3
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	e7d5      	b.n	8002b98 <xQueueGenericSendFromISR+0x64>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002bec:	f7ff fd7e 	bl	80026ec <ulSetInterruptMask>
 8002bf0:	e7fe      	b.n	8002bf0 <xQueueGenericSendFromISR+0xbc>
 8002bf2:	bf00      	nop

08002bf4 <xQueueGiveFromISR>:
{
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    configASSERT( pxQueue );
 8002bf6:	b390      	cbz	r0, 8002c5e <xQueueGiveFromISR+0x6a>
    configASSERT( pxQueue->uxItemSize == 0 );
 8002bf8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	bb03      	cbnz	r3, 8002c40 <xQueueGiveFromISR+0x4c>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002bfe:	6803      	ldr	r3, [r0, #0]
 8002c00:	460d      	mov	r5, r1
 8002c02:	b1bb      	cbz	r3, 8002c34 <xQueueGiveFromISR+0x40>
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c04:	f7ff fd2a 	bl	800265c <vPortValidateInterruptPriority>
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8002c08:	f7ff fd70 	bl	80026ec <ulSetInterruptMask>
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 8002c0e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8002c10:	4606      	mov	r6, r0
        if( uxMessagesWaiting < pxQueue->uxLength )
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d926      	bls.n	8002c64 <xQueueGiveFromISR+0x70>
            const int8_t cTxLock = pxQueue->cTxLock;
 8002c16:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002c1a:	3301      	adds	r3, #1
            if( cTxLock == queueUNLOCKED )
 8002c1c:	2aff      	cmp	r2, #255	; 0xff
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002c1e:	63a3      	str	r3, [r4, #56]	; 0x38
            const int8_t cTxLock = pxQueue->cTxLock;
 8002c20:	b257      	sxtb	r7, r2
            if( cTxLock == queueUNLOCKED )
 8002c22:	d110      	bne.n	8002c46 <xQueueGiveFromISR+0x52>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c26:	bb1b      	cbnz	r3, 8002c70 <xQueueGiveFromISR+0x7c>
            xReturn = pdPASS;
 8002c28:	2701      	movs	r7, #1
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8002c2a:	4630      	mov	r0, r6
 8002c2c:	f7ff fd6a 	bl	8002704 <vClearInterruptMask>
}
 8002c30:	4638      	mov	r0, r7
 8002c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002c34:	6883      	ldr	r3, [r0, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0e4      	beq.n	8002c04 <xQueueGiveFromISR+0x10>
 8002c3a:	f7ff fd57 	bl	80026ec <ulSetInterruptMask>
 8002c3e:	e7fe      	b.n	8002c3e <xQueueGiveFromISR+0x4a>
    configASSERT( pxQueue->uxItemSize == 0 );
 8002c40:	f7ff fd54 	bl	80026ec <ulSetInterruptMask>
 8002c44:	e7fe      	b.n	8002c44 <xQueueGiveFromISR+0x50>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002c46:	f009 f9ed 	bl	800c024 <uxTaskGetNumberOfTasks>
 8002c4a:	4287      	cmp	r7, r0
 8002c4c:	d2ec      	bcs.n	8002c28 <xQueueGiveFromISR+0x34>
 8002c4e:	2f7f      	cmp	r7, #127	; 0x7f
 8002c50:	d01a      	beq.n	8002c88 <xQueueGiveFromISR+0x94>
 8002c52:	1c7b      	adds	r3, r7, #1
 8002c54:	b25b      	sxtb	r3, r3
            xReturn = pdPASS;
 8002c56:	2701      	movs	r7, #1
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002c58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002c5c:	e7e5      	b.n	8002c2a <xQueueGiveFromISR+0x36>
    configASSERT( pxQueue );
 8002c5e:	f7ff fd45 	bl	80026ec <ulSetInterruptMask>
 8002c62:	e7fe      	b.n	8002c62 <xQueueGiveFromISR+0x6e>
            xReturn = errQUEUE_FULL;
 8002c64:	2700      	movs	r7, #0
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );
 8002c66:	4630      	mov	r0, r6
 8002c68:	f7ff fd4c 	bl	8002704 <vClearInterruptMask>
}
 8002c6c:	4638      	mov	r0, r7
 8002c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c70:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002c74:	f009 fa36 	bl	800c0e4 <xTaskRemoveFromEventList>
 8002c78:	2800      	cmp	r0, #0
 8002c7a:	d0d5      	beq.n	8002c28 <xQueueGiveFromISR+0x34>
                            if( pxHigherPriorityTaskWoken != NULL )
 8002c7c:	2d00      	cmp	r5, #0
 8002c7e:	d0d3      	beq.n	8002c28 <xQueueGiveFromISR+0x34>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002c80:	2301      	movs	r3, #1
            xReturn = pdPASS;
 8002c82:	461f      	mov	r7, r3
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8002c84:	602b      	str	r3, [r5, #0]
 8002c86:	e7d0      	b.n	8002c2a <xQueueGiveFromISR+0x36>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8002c88:	f7ff fd30 	bl	80026ec <ulSetInterruptMask>
 8002c8c:	e7fe      	b.n	8002c8c <xQueueGiveFromISR+0x98>
 8002c8e:	bf00      	nop

08002c90 <xQueueReceive>:
{
 8002c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8002c98:	2800      	cmp	r0, #0
 8002c9a:	f000 8088 	beq.w	8002dae <xQueueReceive+0x11e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460e      	mov	r6, r1
 8002ca2:	2900      	cmp	r1, #0
 8002ca4:	d077      	beq.n	8002d96 <xQueueReceive+0x106>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ca6:	f009 fadd 	bl	800c264 <xTaskGetSchedulerState>
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d079      	beq.n	8002da2 <xQueueReceive+0x112>
        taskENTER_CRITICAL();
 8002cae:	f7ff fbc7 	bl	8002440 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cb2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cb4:	2d00      	cmp	r5, #0
 8002cb6:	d158      	bne.n	8002d6a <xQueueReceive+0xda>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002cb8:	9b01      	ldr	r3, [sp, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d043      	beq.n	8002d46 <xQueueReceive+0xb6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cbe:	a802      	add	r0, sp, #8
 8002cc0:	f009 fa84 	bl	800c1cc <vTaskInternalSetTimeOutState>
        prvLockQueue( pxQueue );
 8002cc4:	462f      	mov	r7, r5
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002cc6:	f104 0824 	add.w	r8, r4, #36	; 0x24
        taskEXIT_CRITICAL();
 8002cca:	f7ff fbc7 	bl	800245c <vPortExitCritical>
        vTaskSuspendAll();
 8002cce:	f009 f98b 	bl	800bfe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cd2:	f7ff fbb5 	bl	8002440 <vPortEnterCritical>
 8002cd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002cda:	2bff      	cmp	r3, #255	; 0xff
 8002cdc:	bf08      	it	eq
 8002cde:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002ce2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	bf08      	it	eq
 8002cea:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002cee:	f7ff fbb5 	bl	800245c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cf2:	a901      	add	r1, sp, #4
 8002cf4:	a802      	add	r0, sp, #8
 8002cf6:	f009 fa75 	bl	800c1e4 <xTaskCheckForTimeOut>
 8002cfa:	b990      	cbnz	r0, 8002d22 <xQueueReceive+0x92>
    taskENTER_CRITICAL();
 8002cfc:	f7ff fba0 	bl	8002440 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d02:	bb33      	cbnz	r3, 8002d52 <xQueueReceive+0xc2>
    taskEXIT_CRITICAL();
 8002d04:	f7ff fbaa 	bl	800245c <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d08:	4640      	mov	r0, r8
 8002d0a:	9901      	ldr	r1, [sp, #4]
 8002d0c:	f009 f9ae 	bl	800c06c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d10:	4620      	mov	r0, r4
 8002d12:	f7ff fd71 	bl	80027f8 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8002d16:	f009 f96f 	bl	800bff8 <xTaskResumeAll>
 8002d1a:	b968      	cbnz	r0, 8002d38 <xQueueReceive+0xa8>
                    taskYIELD_WITHIN_API();
 8002d1c:	f7ff fb84 	bl	8002428 <vPortYield>
        taskENTER_CRITICAL();
 8002d20:	e00a      	b.n	8002d38 <xQueueReceive+0xa8>
            prvUnlockQueue( pxQueue );
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7ff fd68 	bl	80027f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d28:	f009 f966 	bl	800bff8 <xTaskResumeAll>
    taskENTER_CRITICAL();
 8002d2c:	f7ff fb88 	bl	8002440 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002d32:	b143      	cbz	r3, 8002d46 <xQueueReceive+0xb6>
    taskEXIT_CRITICAL();
 8002d34:	f7ff fb92 	bl	800245c <vPortExitCritical>
        taskENTER_CRITICAL();
 8002d38:	f7ff fb82 	bl	8002440 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d3c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d3e:	b9a5      	cbnz	r5, 8002d6a <xQueueReceive+0xda>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002d40:	9b01      	ldr	r3, [sp, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1c1      	bne.n	8002cca <xQueueReceive+0x3a>
                    taskEXIT_CRITICAL();
 8002d46:	f7ff fb89 	bl	800245c <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8002d4a:	2000      	movs	r0, #0
}
 8002d4c:	b004      	add	sp, #16
 8002d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    taskEXIT_CRITICAL();
 8002d52:	f7ff fb83 	bl	800245c <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8002d56:	4620      	mov	r0, r4
 8002d58:	f7ff fd4e 	bl	80027f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d5c:	f009 f94c 	bl	800bff8 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8002d60:	f7ff fb6e 	bl	8002440 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d64:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d66:	2d00      	cmp	r5, #0
 8002d68:	d0ea      	beq.n	8002d40 <xQueueReceive+0xb0>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002d6a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002d6c:	b15a      	cbz	r2, 8002d86 <xQueueReceive+0xf6>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002d6e:	68e1      	ldr	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002d70:	68a3      	ldr	r3, [r4, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002d72:	4411      	add	r1, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002d74:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002d76:	60e1      	str	r1, [r4, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d78:	bf28      	it	cs
 8002d7a:	6821      	ldrcs	r1, [r4, #0]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002d7c:	4630      	mov	r0, r6
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d7e:	bf28      	it	cs
 8002d80:	60e1      	strcs	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002d82:	f7fe f939 	bl	8000ff8 <memcpy>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d86:	6923      	ldr	r3, [r4, #16]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002d88:	3d01      	subs	r5, #1
 8002d8a:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d8c:	b993      	cbnz	r3, 8002db4 <xQueueReceive+0x124>
                taskEXIT_CRITICAL();
 8002d8e:	f7ff fb65 	bl	800245c <vPortExitCritical>
                return pdPASS;
 8002d92:	2001      	movs	r0, #1
 8002d94:	e7da      	b.n	8002d4c <xQueueReceive+0xbc>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d084      	beq.n	8002ca6 <xQueueReceive+0x16>
 8002d9c:	f7ff fca6 	bl	80026ec <ulSetInterruptMask>
 8002da0:	e7fe      	b.n	8002da0 <xQueueReceive+0x110>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da2:	9b01      	ldr	r3, [sp, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d082      	beq.n	8002cae <xQueueReceive+0x1e>
 8002da8:	f7ff fca0 	bl	80026ec <ulSetInterruptMask>
 8002dac:	e7fe      	b.n	8002dac <xQueueReceive+0x11c>
    configASSERT( ( pxQueue ) );
 8002dae:	f7ff fc9d 	bl	80026ec <ulSetInterruptMask>
 8002db2:	e7fe      	b.n	8002db2 <xQueueReceive+0x122>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002db4:	f104 0010 	add.w	r0, r4, #16
 8002db8:	f009 f994 	bl	800c0e4 <xTaskRemoveFromEventList>
 8002dbc:	2800      	cmp	r0, #0
 8002dbe:	d0e6      	beq.n	8002d8e <xQueueReceive+0xfe>
                        queueYIELD_IF_USING_PREEMPTION();
 8002dc0:	f7ff fb32 	bl	8002428 <vPortYield>
 8002dc4:	e7e3      	b.n	8002d8e <xQueueReceive+0xfe>
 8002dc6:	bf00      	nop

08002dc8 <xQueueSemaphoreTake>:
{
 8002dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dcc:	b084      	sub	sp, #16
 8002dce:	9101      	str	r1, [sp, #4]
    configASSERT( ( pxQueue ) );
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	f000 8090 	beq.w	8002ef6 <xQueueSemaphoreTake+0x12e>
    configASSERT( pxQueue->uxItemSize == 0 );
 8002dd6:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002dd8:	4604      	mov	r4, r0
 8002dda:	b94e      	cbnz	r6, 8002df0 <xQueueSemaphoreTake+0x28>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ddc:	f009 fa42 	bl	800c264 <xTaskGetSchedulerState>
 8002de0:	4605      	mov	r5, r0
 8002de2:	b940      	cbnz	r0, 8002df6 <xQueueSemaphoreTake+0x2e>
 8002de4:	9b01      	ldr	r3, [sp, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	f040 8082 	bne.w	8002ef0 <xQueueSemaphoreTake+0x128>
 8002dec:	4606      	mov	r6, r0
 8002dee:	e003      	b.n	8002df8 <xQueueSemaphoreTake+0x30>
    configASSERT( pxQueue->uxItemSize == 0 );
 8002df0:	f7ff fc7c 	bl	80026ec <ulSetInterruptMask>
 8002df4:	e7fe      	b.n	8002df4 <xQueueSemaphoreTake+0x2c>
 8002df6:	4635      	mov	r5, r6
        taskENTER_CRITICAL();
 8002df8:	f7ff fb22 	bl	8002440 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002dfc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
        prvLockQueue( pxQueue );
 8002dfe:	f04f 0800 	mov.w	r8, #0
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e02:	bb83      	cbnz	r3, 8002e66 <xQueueSemaphoreTake+0x9e>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e04:	9f01      	ldr	r7, [sp, #4]
 8002e06:	2f00      	cmp	r7, #0
 8002e08:	f000 8081 	beq.w	8002f0e <xQueueSemaphoreTake+0x146>
                else if( xEntryTimeSet == pdFALSE )
 8002e0c:	2d00      	cmp	r5, #0
 8002e0e:	d045      	beq.n	8002e9c <xQueueSemaphoreTake+0xd4>
        taskEXIT_CRITICAL();
 8002e10:	f7ff fb24 	bl	800245c <vPortExitCritical>
        vTaskSuspendAll();
 8002e14:	f009 f8e8 	bl	800bfe8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e18:	f7ff fb12 	bl	8002440 <vPortEnterCritical>
 8002e1c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002e20:	2bff      	cmp	r3, #255	; 0xff
 8002e22:	bf08      	it	eq
 8002e24:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002e28:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002e2c:	2bff      	cmp	r3, #255	; 0xff
 8002e2e:	bf08      	it	eq
 8002e30:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8002e34:	f7ff fb12 	bl	800245c <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e38:	a901      	add	r1, sp, #4
 8002e3a:	a802      	add	r0, sp, #8
 8002e3c:	f009 f9d2 	bl	800c1e4 <xTaskCheckForTimeOut>
 8002e40:	bb00      	cbnz	r0, 8002e84 <xQueueSemaphoreTake+0xbc>
    taskENTER_CRITICAL();
 8002e42:	f7ff fafd 	bl	8002440 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d03e      	beq.n	8002eca <xQueueSemaphoreTake+0x102>
    taskEXIT_CRITICAL();
 8002e4c:	f7ff fb06 	bl	800245c <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8002e50:	4620      	mov	r0, r4
 8002e52:	f7ff fcd1 	bl	80027f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e56:	f009 f8cf 	bl	800bff8 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8002e5a:	f7ff faf1 	bl	8002440 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002e5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e60:	2501      	movs	r5, #1
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ce      	beq.n	8002e04 <xQueueSemaphoreTake+0x3c>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e66:	6822      	ldr	r2, [r4, #0]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	63a3      	str	r3, [r4, #56]	; 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e6c:	2a00      	cmp	r2, #0
 8002e6e:	d05b      	beq.n	8002f28 <xQueueSemaphoreTake+0x160>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e70:	6923      	ldr	r3, [r4, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d14f      	bne.n	8002f16 <xQueueSemaphoreTake+0x14e>
                taskEXIT_CRITICAL();
 8002e76:	f7ff faf1 	bl	800245c <vPortExitCritical>
                return pdPASS;
 8002e7a:	2601      	movs	r6, #1
}
 8002e7c:	4630      	mov	r0, r6
 8002e7e:	b004      	add	sp, #16
 8002e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            prvUnlockQueue( pxQueue );
 8002e84:	4620      	mov	r0, r4
 8002e86:	f7ff fcb7 	bl	80027f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e8a:	f009 f8b5 	bl	800bff8 <xTaskResumeAll>
    taskENTER_CRITICAL();
 8002e8e:	f7ff fad7 	bl	8002440 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002e92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e94:	b133      	cbz	r3, 8002ea4 <xQueueSemaphoreTake+0xdc>
    taskEXIT_CRITICAL();
 8002e96:	f7ff fae1 	bl	800245c <vPortExitCritical>
    return xReturn;
 8002e9a:	e7de      	b.n	8002e5a <xQueueSemaphoreTake+0x92>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e9c:	a802      	add	r0, sp, #8
 8002e9e:	f009 f995 	bl	800c1cc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ea2:	e7b5      	b.n	8002e10 <xQueueSemaphoreTake+0x48>
    taskEXIT_CRITICAL();
 8002ea4:	f7ff fada 	bl	800245c <vPortExitCritical>
                    if( xInheritanceOccurred != pdFALSE )
 8002ea8:	2e00      	cmp	r6, #0
 8002eaa:	d0e7      	beq.n	8002e7c <xQueueSemaphoreTake+0xb4>
                        taskENTER_CRITICAL();
 8002eac:	f7ff fac8 	bl	8002440 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002eb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002eb2:	b119      	cbz	r1, 8002ebc <xQueueSemaphoreTake+0xf4>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8002eb4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eb6:	6819      	ldr	r1, [r3, #0]
 8002eb8:	f1c1 010a 	rsb	r1, r1, #10
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002ebc:	68a0      	ldr	r0, [r4, #8]
 8002ebe:	f009 fa9b 	bl	800c3f8 <vTaskPriorityDisinheritAfterTimeout>
                return errQUEUE_EMPTY;
 8002ec2:	2600      	movs	r6, #0
                        taskEXIT_CRITICAL();
 8002ec4:	f7ff faca 	bl	800245c <vPortExitCritical>
 8002ec8:	e7d8      	b.n	8002e7c <xQueueSemaphoreTake+0xb4>
    taskEXIT_CRITICAL();
 8002eca:	f7ff fac7 	bl	800245c <vPortExitCritical>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ece:	6823      	ldr	r3, [r4, #0]
 8002ed0:	b1a3      	cbz	r3, 8002efc <xQueueSemaphoreTake+0x134>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ed2:	9901      	ldr	r1, [sp, #4]
 8002ed4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002ed8:	f009 f8c8 	bl	800c06c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002edc:	4620      	mov	r0, r4
 8002ede:	f7ff fc8b 	bl	80027f8 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8002ee2:	f009 f889 	bl	800bff8 <xTaskResumeAll>
 8002ee6:	2800      	cmp	r0, #0
 8002ee8:	d1b7      	bne.n	8002e5a <xQueueSemaphoreTake+0x92>
                    taskYIELD_WITHIN_API();
 8002eea:	f7ff fa9d 	bl	8002428 <vPortYield>
 8002eee:	e7b4      	b.n	8002e5a <xQueueSemaphoreTake+0x92>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ef0:	f7ff fbfc 	bl	80026ec <ulSetInterruptMask>
 8002ef4:	e7fe      	b.n	8002ef4 <xQueueSemaphoreTake+0x12c>
    configASSERT( ( pxQueue ) );
 8002ef6:	f7ff fbf9 	bl	80026ec <ulSetInterruptMask>
 8002efa:	e7fe      	b.n	8002efa <xQueueSemaphoreTake+0x132>
                        taskENTER_CRITICAL();
 8002efc:	f7ff faa0 	bl	8002440 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f00:	68a0      	ldr	r0, [r4, #8]
 8002f02:	f009 f9bf 	bl	800c284 <xTaskPriorityInherit>
 8002f06:	4606      	mov	r6, r0
                        taskEXIT_CRITICAL();
 8002f08:	f7ff faa8 	bl	800245c <vPortExitCritical>
 8002f0c:	e7e1      	b.n	8002ed2 <xQueueSemaphoreTake+0x10a>
                    taskEXIT_CRITICAL();
 8002f0e:	f7ff faa5 	bl	800245c <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8002f12:	463e      	mov	r6, r7
 8002f14:	e7b2      	b.n	8002e7c <xQueueSemaphoreTake+0xb4>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f16:	f104 0010 	add.w	r0, r4, #16
 8002f1a:	f009 f8e3 	bl	800c0e4 <xTaskRemoveFromEventList>
 8002f1e:	2800      	cmp	r0, #0
 8002f20:	d0a9      	beq.n	8002e76 <xQueueSemaphoreTake+0xae>
                        queueYIELD_IF_USING_PREEMPTION();
 8002f22:	f7ff fa81 	bl	8002428 <vPortYield>
 8002f26:	e7a6      	b.n	8002e76 <xQueueSemaphoreTake+0xae>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002f28:	f009 fac0 	bl	800c4ac <pvTaskIncrementMutexHeldCount>
 8002f2c:	60a0      	str	r0, [r4, #8]
 8002f2e:	e79f      	b.n	8002e70 <xQueueSemaphoreTake+0xa8>

08002f30 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002f30:	b570      	push	{r4, r5, r6, lr}
 8002f32:	4604      	mov	r4, r0
 8002f34:	460e      	mov	r6, r1
 8002f36:	4615      	mov	r5, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002f38:	f7ff fa82 	bl	8002440 <vPortEnterCritical>
 8002f3c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002f40:	2bff      	cmp	r3, #255	; 0xff
 8002f42:	bf04      	itt	eq
 8002f44:	2300      	moveq	r3, #0
 8002f46:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002f4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002f4e:	2bff      	cmp	r3, #255	; 0xff
 8002f50:	bf04      	itt	eq
 8002f52:	2300      	moveq	r3, #0
 8002f54:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002f58:	f7ff fa80 	bl	800245c <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002f5e:	b123      	cbz	r3, 8002f6a <vQueueWaitForMessageRestricted+0x3a>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002f60:	4620      	mov	r0, r4

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 8002f62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 8002f66:	f7ff bc47 	b.w	80027f8 <prvUnlockQueue>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f6a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f6e:	462a      	mov	r2, r5
 8002f70:	4631      	mov	r1, r6
 8002f72:	f009 f88f 	bl	800c094 <vTaskPlaceOnEventListRestricted>
        prvUnlockQueue( pxQueue );
 8002f76:	4620      	mov	r0, r4
    }
 8002f78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 8002f7c:	f7ff bc3c 	b.w	80027f8 <prvUnlockQueue>

08002f80 <out_buffer>:


// internal buffer output
static inline void out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8002f80:	429a      	cmp	r2, r3
    ((char*)buffer)[idx] = character;
 8002f82:	bf38      	it	cc
 8002f84:	5488      	strbcc	r0, [r1, r2]
  }
}
 8002f86:	4770      	bx	lr

08002f88 <out_discard>:

// internal null output
static inline void out_discard(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop

08002f8c <out_rev_>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t out_rev_(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f90:	469a      	mov	sl, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 8002f94:	4617      	mov	r7, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002f96:	079a      	lsls	r2, r3, #30
{
 8002f98:	4606      	mov	r6, r0
 8002f9a:	468b      	mov	fp, r1
 8002f9c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002fa0:	d111      	bne.n	8002fc6 <out_rev_+0x3a>
    for (size_t i = len; i < width; i++) {
 8002fa2:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d20d      	bcs.n	8002fc6 <out_rev_+0x3a>
 8002faa:	4613      	mov	r3, r2
 8002fac:	463c      	mov	r4, r7
 8002fae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002fb0:	1a9d      	subs	r5, r3, r2
 8002fb2:	443d      	add	r5, r7
      out(' ', buffer, idx++, maxlen);
 8002fb4:	4622      	mov	r2, r4
 8002fb6:	4653      	mov	r3, sl
 8002fb8:	4659      	mov	r1, fp
 8002fba:	2020      	movs	r0, #32
 8002fbc:	3401      	adds	r4, #1
 8002fbe:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8002fc0:	42ac      	cmp	r4, r5
 8002fc2:	d1f7      	bne.n	8002fb4 <out_rev_+0x28>
 8002fc4:	e000      	b.n	8002fc8 <out_rev_+0x3c>
 8002fc6:	463d      	mov	r5, r7
    }
  }

  // reverse string
  while (len) {
 8002fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fca:	b173      	cbz	r3, 8002fea <out_rev_+0x5e>
 8002fcc:	eb08 0403 	add.w	r4, r8, r3
 8002fd0:	eb04 0905 	add.w	r9, r4, r5
 8002fd4:	eba9 0204 	sub.w	r2, r9, r4
    out(buf[--len], buffer, idx++, maxlen);
 8002fd8:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8002fdc:	4653      	mov	r3, sl
 8002fde:	4659      	mov	r1, fp
 8002fe0:	47b0      	blx	r6
  while (len) {
 8002fe2:	4544      	cmp	r4, r8
 8002fe4:	d1f6      	bne.n	8002fd4 <out_rev_+0x48>
    out(buf[--len], buffer, idx++, maxlen);
 8002fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fe8:	441d      	add	r5, r3
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002fea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fec:	079b      	lsls	r3, r3, #30
 8002fee:	d50e      	bpl.n	800300e <out_rev_+0x82>
    while (idx - start_idx < width) {
 8002ff0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002ff2:	1bef      	subs	r7, r5, r7
 8002ff4:	42bb      	cmp	r3, r7
 8002ff6:	d90a      	bls.n	800300e <out_rev_+0x82>
 8002ff8:	461c      	mov	r4, r3
      out(' ', buffer, idx++, maxlen);
 8002ffa:	462a      	mov	r2, r5
 8002ffc:	4653      	mov	r3, sl
 8002ffe:	4659      	mov	r1, fp
 8003000:	2020      	movs	r0, #32
    while (idx - start_idx < width) {
 8003002:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 8003004:	47b0      	blx	r6
    while (idx - start_idx < width) {
 8003006:	42a7      	cmp	r7, r4
      out(' ', buffer, idx++, maxlen);
 8003008:	f105 0501 	add.w	r5, r5, #1
    while (idx - start_idx < width) {
 800300c:	d3f5      	bcc.n	8002ffa <out_rev_+0x6e>
    }
  }

  return idx;
}
 800300e:	4628      	mov	r0, r5
 8003010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003014 <print_integer>:
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
}

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 8003014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003018:	ed2d 8b04 	vpush	{d8-d9}
 800301c:	b08f      	sub	sp, #60	; 0x3c
 800301e:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
 8003022:	ee09 3a90 	vmov	s19, r3
 8003026:	e9dd 561c 	ldrd	r5, r6, [sp, #112]	; 0x70
 800302a:	e9dd 9a20 	ldrd	r9, sl, [sp, #128]	; 0x80
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;

  if (!value) {
 800302e:	ea55 0306 	orrs.w	r3, r5, r6
{
 8003032:	ee08 0a10 	vmov	s16, r0
 8003036:	ee08 1a90 	vmov	s17, r1
 800303a:	ee09 2a10 	vmov	s18, r2
 800303e:	f89d 707c 	ldrb.w	r7, [sp, #124]	; 0x7c
 8003042:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 8003046:	9405      	str	r4, [sp, #20]
  if (!value) {
 8003048:	d15d      	bne.n	8003106 <print_integer+0xf2>
    if ( !(flags & FLAGS_PRECISION) ) {
 800304a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 800304e:	f040 80b2 	bne.w	80031b6 <print_integer+0x1a2>
      buf[len++] = '0';
 8003052:	2330      	movs	r3, #48	; 0x30
      flags &= ~FLAGS_HASH;
 8003054:	f02b 0b10 	bic.w	fp, fp, #16
      buf[len++] = '0';
 8003058:	f88d 3018 	strb.w	r3, [sp, #24]
    if (!(flags & FLAGS_LEFT)) {
 800305c:	f01b 0f02 	tst.w	fp, #2
 8003060:	ab06      	add	r3, sp, #24
      buf[len++] = '0';
 8003062:	f04f 0401 	mov.w	r4, #1
 8003066:	9304      	str	r3, [sp, #16]
    if (!(flags & FLAGS_LEFT)) {
 8003068:	d07a      	beq.n	8003160 <print_integer+0x14c>
 800306a:	4623      	mov	r3, r4
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800306c:	4599      	cmp	r9, r3
 800306e:	d90d      	bls.n	800308c <print_integer+0x78>
 8003070:	2b20      	cmp	r3, #32
 8003072:	d00b      	beq.n	800308c <print_integer+0x78>
 8003074:	9804      	ldr	r0, [sp, #16]
 8003076:	1e5a      	subs	r2, r3, #1
      buf[len++] = '0';
 8003078:	2130      	movs	r1, #48	; 0x30
 800307a:	4402      	add	r2, r0
 800307c:	e001      	b.n	8003082 <print_integer+0x6e>
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800307e:	2b20      	cmp	r3, #32
 8003080:	d004      	beq.n	800308c <print_integer+0x78>
      buf[len++] = '0';
 8003082:	3301      	adds	r3, #1
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003084:	4599      	cmp	r9, r3
      buf[len++] = '0';
 8003086:	f802 1f01 	strb.w	r1, [r2, #1]!
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800308a:	d1f8      	bne.n	800307e <print_integer+0x6a>
    if (base == BASE_OCTAL && (len > unpadded_len)) {
 800308c:	2f08      	cmp	r7, #8
 800308e:	d103      	bne.n	8003098 <print_integer+0x84>
 8003090:	429c      	cmp	r4, r3
      flags &= ~FLAGS_HASH;
 8003092:	bf38      	it	cc
 8003094:	f02b 0b10 	biccc.w	fp, fp, #16
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8003098:	f241 0210 	movw	r2, #4112	; 0x1010
 800309c:	ea1b 0f02 	tst.w	fp, r2
 80030a0:	d011      	beq.n	80030c6 <print_integer+0xb2>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 80030a2:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80030a6:	d07c      	beq.n	80031a2 <print_integer+0x18e>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80030a8:	2f10      	cmp	r7, #16
 80030aa:	f000 80bb 	beq.w	8003224 <print_integer+0x210>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80030ae:	2f02      	cmp	r7, #2
 80030b0:	f000 80a1 	beq.w	80031f6 <print_integer+0x1e2>
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d012      	beq.n	80030de <print_integer+0xca>
      buf[len++] = '0';
 80030b8:	2130      	movs	r1, #48	; 0x30
 80030ba:	185a      	adds	r2, r3, r1
 80030bc:	3208      	adds	r2, #8
 80030be:	446a      	add	r2, sp
 80030c0:	f802 1c20 	strb.w	r1, [r2, #-32]
 80030c4:	3301      	adds	r3, #1
  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d009      	beq.n	80030de <print_integer+0xca>
    if (negative) {
 80030ca:	9a05      	ldr	r2, [sp, #20]
 80030cc:	2a00      	cmp	r2, #0
 80030ce:	d078      	beq.n	80031c2 <print_integer+0x1ae>
      buf[len++] = '-';
 80030d0:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
 80030d2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80030d6:	446a      	add	r2, sp
 80030d8:	f802 1c20 	strb.w	r1, [r2, #-32]
 80030dc:	3301      	adds	r3, #1
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 80030de:	9c04      	ldr	r4, [sp, #16]
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	ee19 2a10 	vmov	r2, s18
 80030e6:	ee19 3a90 	vmov	r3, s19
 80030ea:	ee18 1a90 	vmov	r1, s17
 80030ee:	ee18 0a10 	vmov	r0, s16
 80030f2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80030f6:	9400      	str	r4, [sp, #0]
 80030f8:	f7ff ff48 	bl	8002f8c <out_rev_>
      value /= base;
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
  }

  return print_integer_finalization(out, buffer, idx, maxlen, buf, len, negative, base, precision, width, flags);
}
 80030fc:	b00f      	add	sp, #60	; 0x3c
 80030fe:	ecbd 8b04 	vpop	{d8-d9}
 8003102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003106:	f01b 0f20 	tst.w	fp, #32
 800310a:	bf14      	ite	ne
 800310c:	2341      	movne	r3, #65	; 0x41
 800310e:	2361      	moveq	r3, #97	; 0x61
 8003110:	aa06      	add	r2, sp, #24
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8003112:	3b0a      	subs	r3, #10
 8003114:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 8003118:	4690      	mov	r8, r2
  size_t len = 0U;
 800311a:	2400      	movs	r4, #0
 800311c:	4699      	mov	r9, r3
 800311e:	9204      	str	r2, [sp, #16]
 8003120:	e003      	b.n	800312a <print_integer+0x116>
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8003122:	2c20      	cmp	r4, #32
 8003124:	d017      	beq.n	8003156 <print_integer+0x142>
      value /= base;
 8003126:	4605      	mov	r5, r0
 8003128:	460e      	mov	r6, r1
      const char digit = (char)(value % base);
 800312a:	4628      	mov	r0, r5
 800312c:	4631      	mov	r1, r6
 800312e:	463a      	mov	r2, r7
 8003130:	2300      	movs	r3, #0
 8003132:	f7fd fd7b 	bl	8000c2c <__aeabi_uldivmod>
 8003136:	b2d2      	uxtb	r2, r2
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8003138:	2a09      	cmp	r2, #9
 800313a:	f102 0330 	add.w	r3, r2, #48	; 0x30
 800313e:	bf8a      	itet	hi
 8003140:	444a      	addhi	r2, r9
 8003142:	b2da      	uxtbls	r2, r3
 8003144:	b2d2      	uxtbhi	r2, r2
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8003146:	42bd      	cmp	r5, r7
 8003148:	f176 0300 	sbcs.w	r3, r6, #0
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 800314c:	f808 2b01 	strb.w	r2, [r8], #1
 8003150:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8003154:	d2e5      	bcs.n	8003122 <print_integer+0x10e>
 8003156:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
    if (!(flags & FLAGS_LEFT)) {
 800315a:	f01b 0f02 	tst.w	fp, #2
 800315e:	d184      	bne.n	800306a <print_integer+0x56>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003160:	f1ba 0f00 	cmp.w	sl, #0
 8003164:	d081      	beq.n	800306a <print_integer+0x56>
 8003166:	f01b 0f01 	tst.w	fp, #1
 800316a:	f43f af7e 	beq.w	800306a <print_integer+0x56>
 800316e:	9b05      	ldr	r3, [sp, #20]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d152      	bne.n	800321a <print_integer+0x206>
 8003174:	f01b 0f0c 	tst.w	fp, #12
 8003178:	d14f      	bne.n	800321a <print_integer+0x206>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800317a:	4554      	cmp	r4, sl
 800317c:	f4bf af75 	bcs.w	800306a <print_integer+0x56>
 8003180:	2c1f      	cmp	r4, #31
 8003182:	d84d      	bhi.n	8003220 <print_integer+0x20c>
 8003184:	9804      	ldr	r0, [sp, #16]
 8003186:	1e62      	subs	r2, r4, #1
 8003188:	4623      	mov	r3, r4
        buf[len++] = '0';
 800318a:	2130      	movs	r1, #48	; 0x30
 800318c:	4402      	add	r2, r0
 800318e:	e001      	b.n	8003194 <print_integer+0x180>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003190:	2b20      	cmp	r3, #32
 8003192:	d045      	beq.n	8003220 <print_integer+0x20c>
        buf[len++] = '0';
 8003194:	3301      	adds	r3, #1
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003196:	4553      	cmp	r3, sl
        buf[len++] = '0';
 8003198:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800319c:	d1f8      	bne.n	8003190 <print_integer+0x17c>
 800319e:	4653      	mov	r3, sl
 80031a0:	e764      	b.n	800306c <print_integer+0x58>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 80031a2:	b9c3      	cbnz	r3, 80031d6 <print_integer+0x1c2>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80031a4:	2f10      	cmp	r7, #16
 80031a6:	d055      	beq.n	8003254 <print_integer+0x240>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80031a8:	2f02      	cmp	r7, #2
 80031aa:	d060      	beq.n	800326e <print_integer+0x25a>
      buf[len++] = '0';
 80031ac:	2330      	movs	r3, #48	; 0x30
 80031ae:	f88d 3018 	strb.w	r3, [sp, #24]
 80031b2:	2301      	movs	r3, #1
 80031b4:	e789      	b.n	80030ca <print_integer+0xb6>
    else if (base == BASE_HEX) {
 80031b6:	2f10      	cmp	r7, #16
 80031b8:	d029      	beq.n	800320e <print_integer+0x1fa>
 80031ba:	ab06      	add	r3, sp, #24
  size_t len = 0U;
 80031bc:	2400      	movs	r4, #0
 80031be:	9304      	str	r3, [sp, #16]
 80031c0:	e7cb      	b.n	800315a <print_integer+0x146>
    else if (flags & FLAGS_PLUS) {
 80031c2:	f01b 0f04 	tst.w	fp, #4
 80031c6:	d104      	bne.n	80031d2 <print_integer+0x1be>
    else if (flags & FLAGS_SPACE) {
 80031c8:	f01b 0f08 	tst.w	fp, #8
 80031cc:	d087      	beq.n	80030de <print_integer+0xca>
      buf[len++] = ' ';
 80031ce:	2120      	movs	r1, #32
 80031d0:	e77f      	b.n	80030d2 <print_integer+0xbe>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80031d2:	212b      	movs	r1, #43	; 0x2b
 80031d4:	e77d      	b.n	80030d2 <print_integer+0xbe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 80031d6:	4599      	cmp	r9, r3
 80031d8:	d002      	beq.n	80031e0 <print_integer+0x1cc>
 80031da:	459a      	cmp	sl, r3
 80031dc:	f47f af64 	bne.w	80030a8 <print_integer+0x94>
      if (unpadded_len < len) {
 80031e0:	429c      	cmp	r4, r3
 80031e2:	f4bf af61 	bcs.w	80030a8 <print_integer+0x94>
      if (len && (base == BASE_HEX)) {
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	d0dc      	beq.n	80031a4 <print_integer+0x190>
 80031ea:	2f10      	cmp	r7, #16
 80031ec:	d044      	beq.n	8003278 <print_integer+0x264>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80031ee:	2f02      	cmp	r7, #2
 80031f0:	d005      	beq.n	80031fe <print_integer+0x1ea>
        len--;
 80031f2:	4613      	mov	r3, r2
 80031f4:	e760      	b.n	80030b8 <print_integer+0xa4>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	f43f af71 	beq.w	80030de <print_integer+0xca>
 80031fc:	461a      	mov	r2, r3
      buf[len++] = 'b';
 80031fe:	2162      	movs	r1, #98	; 0x62
 8003200:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8003204:	446b      	add	r3, sp
 8003206:	f803 1c20 	strb.w	r1, [r3, #-32]
 800320a:	1c53      	adds	r3, r2, #1
 800320c:	e752      	b.n	80030b4 <print_integer+0xa0>
      flags &= ~FLAGS_HASH;
 800320e:	ab06      	add	r3, sp, #24
  size_t len = 0U;
 8003210:	2400      	movs	r4, #0
      flags &= ~FLAGS_HASH;
 8003212:	f02b 0b10 	bic.w	fp, fp, #16
 8003216:	9304      	str	r3, [sp, #16]
 8003218:	e79f      	b.n	800315a <print_integer+0x146>
        width--;
 800321a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800321e:	e7ac      	b.n	800317a <print_integer+0x166>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003220:	2320      	movs	r3, #32
 8003222:	e733      	b.n	800308c <print_integer+0x78>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003224:	f01b 0f20 	tst.w	fp, #32
 8003228:	d00b      	beq.n	8003242 <print_integer+0x22e>
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800322a:	2b20      	cmp	r3, #32
 800322c:	f43f af57 	beq.w	80030de <print_integer+0xca>
        len--;
 8003230:	4619      	mov	r1, r3
      buf[len++] = 'X';
 8003232:	2258      	movs	r2, #88	; 0x58
 8003234:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8003238:	446b      	add	r3, sp
 800323a:	f803 2c20 	strb.w	r2, [r3, #-32]
 800323e:	1c4b      	adds	r3, r1, #1
 8003240:	e738      	b.n	80030b4 <print_integer+0xa0>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003242:	2b20      	cmp	r3, #32
 8003244:	f43f af4b 	beq.w	80030de <print_integer+0xca>
      buf[len++] = 'x';
 8003248:	9a04      	ldr	r2, [sp, #16]
 800324a:	18d1      	adds	r1, r2, r3
 800324c:	3301      	adds	r3, #1
 800324e:	2278      	movs	r2, #120	; 0x78
 8003250:	700a      	strb	r2, [r1, #0]
 8003252:	e72f      	b.n	80030b4 <print_integer+0xa0>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003254:	f01b 0f20 	tst.w	fp, #32
 8003258:	d104      	bne.n	8003264 <print_integer+0x250>
      buf[len++] = 'x';
 800325a:	2378      	movs	r3, #120	; 0x78
 800325c:	f88d 3018 	strb.w	r3, [sp, #24]
 8003260:	2301      	movs	r3, #1
 8003262:	e729      	b.n	80030b8 <print_integer+0xa4>
      buf[len++] = 'X';
 8003264:	2358      	movs	r3, #88	; 0x58
 8003266:	f88d 3018 	strb.w	r3, [sp, #24]
 800326a:	2301      	movs	r3, #1
 800326c:	e724      	b.n	80030b8 <print_integer+0xa4>
      buf[len++] = 'b';
 800326e:	2362      	movs	r3, #98	; 0x62
 8003270:	f88d 3018 	strb.w	r3, [sp, #24]
 8003274:	2301      	movs	r3, #1
 8003276:	e71f      	b.n	80030b8 <print_integer+0xa4>
        if (unpadded_len < len) {
 8003278:	4294      	cmp	r4, r2
 800327a:	d208      	bcs.n	800328e <print_integer+0x27a>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800327c:	f01b 0f20 	tst.w	fp, #32
          len--;
 8003280:	f1a3 0102 	sub.w	r1, r3, #2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003284:	d1d5      	bne.n	8003232 <print_integer+0x21e>
      buf[len++] = 'x';
 8003286:	4613      	mov	r3, r2
 8003288:	9a04      	ldr	r2, [sp, #16]
 800328a:	4411      	add	r1, r2
 800328c:	e7df      	b.n	800324e <print_integer+0x23a>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 800328e:	f01b 0f20 	tst.w	fp, #32
        len--;
 8003292:	4613      	mov	r3, r2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8003294:	d0d8      	beq.n	8003248 <print_integer+0x234>
 8003296:	e7cb      	b.n	8003230 <print_integer+0x21c>

08003298 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
 8003298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800329c:	ed2d 8b02 	vpush	{d8}
 80032a0:	469b      	mov	fp, r3
 80032a2:	b083      	sub	sp, #12
  struct double_components number_;
  number_.is_negative = get_sign(number);
  double abs_number = (number_.is_negative) ? -number : number;
 80032a4:	0fdb      	lsrs	r3, r3, #31
{
 80032a6:	4692      	mov	sl, r2
 80032a8:	4605      	mov	r5, r0
  double abs_number = (number_.is_negative) ? -number : number;
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	d002      	beq.n	80032b4 <get_components+0x1c>
 80032ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80032b2:	469b      	mov	fp, r3
  number_.integral = (int_fast64_t)abs_number;
 80032b4:	4650      	mov	r0, sl
 80032b6:	4659      	mov	r1, fp
 80032b8:	f7fd fcd0 	bl	8000c5c <__aeabi_d2lz>
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 80032bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <get_components+0x128>)
  number_.integral = (int_fast64_t)abs_number;
 80032c0:	4606      	mov	r6, r0
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 80032c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80032c6:	ed93 8b00 	vldr	d8, [r3]
  number_.integral = (int_fast64_t)abs_number;
 80032ca:	9100      	str	r1, [sp, #0]
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 80032cc:	f7fd f96e 	bl	80005ac <__aeabi_l2d>
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	4650      	mov	r0, sl
 80032d6:	4659      	mov	r1, fp
 80032d8:	f7fc ffde 	bl	8000298 <__aeabi_dsub>
 80032dc:	ec53 2b18 	vmov	r2, r3, d8
 80032e0:	f7fd f992 	bl	8000608 <__aeabi_dmul>
 80032e4:	4680      	mov	r8, r0
 80032e6:	4689      	mov	r9, r1
  number_.fractional = (int_fast64_t)remainder;
 80032e8:	f7fd fcb8 	bl	8000c5c <__aeabi_d2lz>
 80032ec:	4604      	mov	r4, r0
 80032ee:	460f      	mov	r7, r1

  remainder -= (double) number_.fractional;
 80032f0:	f7fd f95c 	bl	80005ac <__aeabi_l2d>
 80032f4:	4602      	mov	r2, r0
 80032f6:	460b      	mov	r3, r1
 80032f8:	4640      	mov	r0, r8
 80032fa:	4649      	mov	r1, r9
 80032fc:	f7fc ffcc 	bl	8000298 <__aeabi_dsub>

  if (remainder > 0.5) {
 8003300:	2200      	movs	r2, #0
 8003302:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <get_components+0x12c>)
  remainder -= (double) number_.fractional;
 8003304:	4680      	mov	r8, r0
 8003306:	4689      	mov	r9, r1
  if (remainder > 0.5) {
 8003308:	f7fd fc0e 	bl	8000b28 <__aeabi_dcmpgt>
 800330c:	2800      	cmp	r0, #0
 800330e:	d03c      	beq.n	800338a <get_components+0xf2>
    ++number_.fractional;
 8003310:	3401      	adds	r4, #1
 8003312:	f147 0700 	adc.w	r7, r7, #0
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 8003316:	4639      	mov	r1, r7
 8003318:	4620      	mov	r0, r4
 800331a:	f7fd f947 	bl	80005ac <__aeabi_l2d>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	ec51 0b18 	vmov	r0, r1, d8
 8003326:	f7fd fbeb 	bl	8000b00 <__aeabi_dcmple>
 800332a:	2800      	cmp	r0, #0
 800332c:	d13c      	bne.n	80033a8 <get_components+0x110>
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
    }
  }

  if (precision == 0U) {
 800332e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003330:	b9f3      	cbnz	r3, 8003370 <get_components+0xd8>
    remainder = abs_number - (double) number_.integral;
 8003332:	4630      	mov	r0, r6
 8003334:	9900      	ldr	r1, [sp, #0]
 8003336:	f7fd f939 	bl	80005ac <__aeabi_l2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4650      	mov	r0, sl
 8003340:	4659      	mov	r1, fp
 8003342:	f7fc ffa9 	bl	8000298 <__aeabi_dsub>
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 8003346:	2200      	movs	r2, #0
 8003348:	4b1e      	ldr	r3, [pc, #120]	; (80033c4 <get_components+0x12c>)
    remainder = abs_number - (double) number_.integral;
 800334a:	4680      	mov	r8, r0
 800334c:	4689      	mov	r9, r1
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 800334e:	f7fd fbcd 	bl	8000aec <__aeabi_dcmplt>
 8003352:	b130      	cbz	r0, 8003362 <get_components+0xca>
 8003354:	4640      	mov	r0, r8
 8003356:	4649      	mov	r1, r9
 8003358:	2200      	movs	r2, #0
 800335a:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <get_components+0x12c>)
 800335c:	f7fd fbe4 	bl	8000b28 <__aeabi_dcmpgt>
 8003360:	b130      	cbz	r0, 8003370 <get_components+0xd8>
 8003362:	07f3      	lsls	r3, r6, #31
 8003364:	d504      	bpl.n	8003370 <get_components+0xd8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8003366:	9b00      	ldr	r3, [sp, #0]
 8003368:	3601      	adds	r6, #1
 800336a:	f143 0300 	adc.w	r3, r3, #0
 800336e:	9300      	str	r3, [sp, #0]
    }
  }
  return number_;
}
 8003370:	4628      	mov	r0, r5
  return number_;
 8003372:	9b00      	ldr	r3, [sp, #0]
 8003374:	602e      	str	r6, [r5, #0]
 8003376:	e9c5 3401 	strd	r3, r4, [r5, #4]
 800337a:	9b01      	ldr	r3, [sp, #4]
 800337c:	60ef      	str	r7, [r5, #12]
 800337e:	742b      	strb	r3, [r5, #16]
}
 8003380:	b003      	add	sp, #12
 8003382:	ecbd 8b02 	vpop	{d8}
 8003386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (remainder == 0.5) {
 800338a:	4640      	mov	r0, r8
 800338c:	4649      	mov	r1, r9
 800338e:	2200      	movs	r2, #0
 8003390:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <get_components+0x12c>)
 8003392:	f7fd fba1 	bl	8000ad8 <__aeabi_dcmpeq>
 8003396:	2800      	cmp	r0, #0
 8003398:	d0c9      	beq.n	800332e <get_components+0x96>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 800339a:	ea54 0307 	orrs.w	r3, r4, r7
 800339e:	d10b      	bne.n	80033b8 <get_components+0x120>
      ++number_.fractional;
 80033a0:	3401      	adds	r4, #1
 80033a2:	f147 0700 	adc.w	r7, r7, #0
 80033a6:	e7c2      	b.n	800332e <get_components+0x96>
      number_.fractional = 0;
 80033a8:	2400      	movs	r4, #0
      ++number_.integral;
 80033aa:	9b00      	ldr	r3, [sp, #0]
 80033ac:	3601      	adds	r6, #1
 80033ae:	f143 0300 	adc.w	r3, r3, #0
      number_.fractional = 0;
 80033b2:	4627      	mov	r7, r4
      ++number_.integral;
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	e7ba      	b.n	800332e <get_components+0x96>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 80033b8:	07e2      	lsls	r2, r4, #31
 80033ba:	d5b8      	bpl.n	800332e <get_components+0x96>
 80033bc:	e7f0      	b.n	80033a0 <get_components+0x108>
 80033be:	bf00      	nop
 80033c0:	08013b98 	.word	0x08013b98
 80033c4:	3fe00000 	.word	0x3fe00000

080033c8 <print_broken_up_decimal.isra.0>:
  }
  return components;
}
#endif

static size_t print_broken_up_decimal(
 80033c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033cc:	ed2d 8b04 	vpush	{d8-d9}
 80033d0:	b087      	sub	sp, #28
 80033d2:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 80033d6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80033d8:	9404      	str	r4, [sp, #16]
 80033da:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80033dc:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 80033e0:	ee08 4a10 	vmov	s16, r4
 80033e4:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80033e6:	9502      	str	r5, [sp, #8]
 80033e8:	ee08 4a90 	vmov	s17, r4
 80033ec:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80033ee:	460d      	mov	r5, r1
 80033f0:	ee09 4a10 	vmov	s18, r4
 80033f4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 80033f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80033f8:	ee09 4a90 	vmov	s19, r4
 80033fc:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 80033fe:	9403      	str	r4, [sp, #12]
 8003400:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8003402:	9401      	str	r4, [sp, #4]
 8003404:	4604      	mov	r4, r0
  struct double_components number_, out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned int precision,
  unsigned int width, unsigned int flags, char *buf, size_t len)
{
  if (precision != 0U) {
 8003406:	f1b9 0f00 	cmp.w	r9, #0
 800340a:	d049      	beq.n	80034a0 <print_broken_up_decimal.isra.0+0xd8>
 800340c:	4698      	mov	r8, r3
    // do fractional part, as an unsigned number

    unsigned int count = precision;

    if (flags & FLAGS_ADAPT_EXP && !(flags & FLAGS_HASH)) {
 800340e:	9b01      	ldr	r3, [sp, #4]
 8003410:	4617      	mov	r7, r2
 8003412:	f403 6301 	and.w	r3, r3, #2064	; 0x810
 8003416:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800341a:	f000 8099 	beq.w	8003550 <print_broken_up_decimal.isra.0+0x188>
 800341e:	9a02      	ldr	r2, [sp, #8]
 8003420:	1e73      	subs	r3, r6, #1
 8003422:	eb02 0b03 	add.w	fp, r2, r3
 8003426:	9405      	str	r4, [sp, #20]
 8003428:	e017      	b.n	800345a <print_broken_up_decimal.isra.0+0x92>
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
        --count;
        buf[len++] = (char)('0' + number_.fractional % 10U);
 800342a:	4638      	mov	r0, r7
 800342c:	4641      	mov	r1, r8
 800342e:	220a      	movs	r2, #10
 8003430:	2300      	movs	r3, #0
 8003432:	f7fd fbab 	bl	8000b8c <__aeabi_ldivmod>
 8003436:	4694      	mov	ip, r2
        if (!(number_.fractional /= 10U)) {
 8003438:	4638      	mov	r0, r7
        buf[len++] = (char)('0' + number_.fractional % 10U);
 800343a:	f10c 0730 	add.w	r7, ip, #48	; 0x30
        if (!(number_.fractional /= 10U)) {
 800343e:	4641      	mov	r1, r8
 8003440:	2300      	movs	r3, #0
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8003442:	f80b 7f01 	strb.w	r7, [fp, #1]!
        if (!(number_.fractional /= 10U)) {
 8003446:	220a      	movs	r2, #10
 8003448:	f7fd fba0 	bl	8000b8c <__aeabi_ldivmod>
 800344c:	ea51 0300 	orrs.w	r3, r1, r0
 8003450:	4607      	mov	r7, r0
 8003452:	4688      	mov	r8, r1
 8003454:	d066      	beq.n	8003524 <print_broken_up_decimal.isra.0+0x15c>
        --count;
 8003456:	46a1      	mov	r9, r4
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8003458:	4656      	mov	r6, sl
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800345a:	2e20      	cmp	r6, #32
        --count;
 800345c:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8003460:	f106 0a01 	add.w	sl, r6, #1
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003464:	d1e1      	bne.n	800342a <print_broken_up_decimal.isra.0+0x62>
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003466:	9b01      	ldr	r3, [sp, #4]
 8003468:	f003 0303 	and.w	r3, r3, #3
 800346c:	2b01      	cmp	r3, #1
 800346e:	f000 809a 	beq.w	80035a6 <print_broken_up_decimal.isra.0+0x1de>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8003472:	2720      	movs	r7, #32
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8003474:	9b01      	ldr	r3, [sp, #4]
 8003476:	ee19 2a10 	vmov	r2, s18
 800347a:	9317      	str	r3, [sp, #92]	; 0x5c
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	ee18 1a90 	vmov	r1, s17
 8003482:	e9cd 7315 	strd	r7, r3, [sp, #84]	; 0x54
 8003486:	ee18 0a10 	vmov	r0, s16
 800348a:	ee19 3a90 	vmov	r3, s19
 800348e:	9c02      	ldr	r4, [sp, #8]
 8003490:	9414      	str	r4, [sp, #80]	; 0x50
}
 8003492:	b007      	add	sp, #28
 8003494:	ecbd 8b04 	vpop	{d8-d9}
 8003498:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 800349c:	f7ff bd76 	b.w	8002f8c <out_rev_>
    if (flags & FLAGS_HASH) {
 80034a0:	9b01      	ldr	r3, [sp, #4]
 80034a2:	06d9      	lsls	r1, r3, #27
 80034a4:	d505      	bpl.n	80034b2 <print_broken_up_decimal.isra.0+0xea>
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80034a6:	2e20      	cmp	r6, #32
 80034a8:	d0dd      	beq.n	8003466 <print_broken_up_decimal.isra.0+0x9e>
        buf[len++] = '.';
 80034aa:	232e      	movs	r3, #46	; 0x2e
 80034ac:	9a02      	ldr	r2, [sp, #8]
 80034ae:	5593      	strb	r3, [r2, r6]
 80034b0:	3601      	adds	r6, #1
 80034b2:	9b02      	ldr	r3, [sp, #8]
 80034b4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80034b8:	4498      	add	r8, r3
 80034ba:	e000      	b.n	80034be <print_broken_up_decimal.isra.0+0xf6>
    buf[len++] = (char)('0' + (number_.integral % 10));
 80034bc:	463e      	mov	r6, r7
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80034be:	2e20      	cmp	r6, #32
    buf[len++] = (char)('0' + (number_.integral % 10));
 80034c0:	f106 0701 	add.w	r7, r6, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80034c4:	d0cf      	beq.n	8003466 <print_broken_up_decimal.isra.0+0x9e>
    buf[len++] = (char)('0' + (number_.integral % 10));
 80034c6:	4620      	mov	r0, r4
 80034c8:	4629      	mov	r1, r5
 80034ca:	220a      	movs	r2, #10
 80034cc:	2300      	movs	r3, #0
 80034ce:	f7fd fb5d 	bl	8000b8c <__aeabi_ldivmod>
 80034d2:	4694      	mov	ip, r2
    if (!(number_.integral /= 10)) {
 80034d4:	4620      	mov	r0, r4
    buf[len++] = (char)('0' + (number_.integral % 10));
 80034d6:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    if (!(number_.integral /= 10)) {
 80034da:	2300      	movs	r3, #0
 80034dc:	4629      	mov	r1, r5
    buf[len++] = (char)('0' + (number_.integral % 10));
 80034de:	f808 4f01 	strb.w	r4, [r8, #1]!
    if (!(number_.integral /= 10)) {
 80034e2:	220a      	movs	r2, #10
 80034e4:	f7fd fb52 	bl	8000b8c <__aeabi_ldivmod>
 80034e8:	ea51 0300 	orrs.w	r3, r1, r0
 80034ec:	4604      	mov	r4, r0
 80034ee:	460d      	mov	r5, r1
 80034f0:	d1e4      	bne.n	80034bc <print_broken_up_decimal.isra.0+0xf4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80034f2:	9b01      	ldr	r3, [sp, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d062      	beq.n	80035c2 <print_broken_up_decimal.isra.0+0x1fa>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80034fc:	2f20      	cmp	r7, #32
 80034fe:	d0b8      	beq.n	8003472 <print_broken_up_decimal.isra.0+0xaa>
    if (number_.is_negative) {
 8003500:	9b04      	ldr	r3, [sp, #16]
 8003502:	b123      	cbz	r3, 800350e <print_broken_up_decimal.isra.0+0x146>
      buf[len++] = '-';
 8003504:	232d      	movs	r3, #45	; 0x2d
 8003506:	9a02      	ldr	r2, [sp, #8]
 8003508:	55d3      	strb	r3, [r2, r7]
 800350a:	3701      	adds	r7, #1
 800350c:	e7b2      	b.n	8003474 <print_broken_up_decimal.isra.0+0xac>
    else if (flags & FLAGS_PLUS) {
 800350e:	9b01      	ldr	r3, [sp, #4]
 8003510:	075a      	lsls	r2, r3, #29
 8003512:	d443      	bmi.n	800359c <print_broken_up_decimal.isra.0+0x1d4>
    else if (flags & FLAGS_SPACE) {
 8003514:	9b01      	ldr	r3, [sp, #4]
 8003516:	071b      	lsls	r3, r3, #28
 8003518:	d5ac      	bpl.n	8003474 <print_broken_up_decimal.isra.0+0xac>
      buf[len++] = ' ';
 800351a:	2320      	movs	r3, #32
 800351c:	9a02      	ldr	r2, [sp, #8]
 800351e:	55d3      	strb	r3, [r2, r7]
 8003520:	3701      	adds	r7, #1
 8003522:	e7a7      	b.n	8003474 <print_broken_up_decimal.isra.0+0xac>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003524:	f1ba 0f20 	cmp.w	sl, #32
 8003528:	4623      	mov	r3, r4
 800352a:	9c05      	ldr	r4, [sp, #20]
 800352c:	d09b      	beq.n	8003466 <print_broken_up_decimal.isra.0+0x9e>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d068      	beq.n	8003604 <print_broken_up_decimal.isra.0+0x23c>
 8003532:	9b02      	ldr	r3, [sp, #8]
        buf[len++] = '0';
 8003534:	2130      	movs	r1, #48	; 0x30
 8003536:	199a      	adds	r2, r3, r6
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003538:	4656      	mov	r6, sl
        buf[len++] = '0';
 800353a:	3601      	adds	r6, #1
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800353c:	2e20      	cmp	r6, #32
        buf[len++] = '0';
 800353e:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003542:	d090      	beq.n	8003466 <print_broken_up_decimal.isra.0+0x9e>
 8003544:	43f3      	mvns	r3, r6
 8003546:	444b      	add	r3, r9
 8003548:	eb1a 0f03 	cmn.w	sl, r3
 800354c:	d1f5      	bne.n	800353a <print_broken_up_decimal.isra.0+0x172>
 800354e:	e7ac      	b.n	80034aa <print_broken_up_decimal.isra.0+0xe2>
      if (number_.fractional > 0) {
 8003550:	2a01      	cmp	r2, #1
 8003552:	f178 0300 	sbcs.w	r3, r8, #0
 8003556:	dbac      	blt.n	80034b2 <print_broken_up_decimal.isra.0+0xea>
          if (digit != 0) {
 8003558:	4610      	mov	r0, r2
 800355a:	4641      	mov	r1, r8
 800355c:	220a      	movs	r2, #10
 800355e:	2300      	movs	r3, #0
 8003560:	f7fd fb14 	bl	8000b8c <__aeabi_ldivmod>
 8003564:	4313      	orrs	r3, r2
 8003566:	f47f af5a 	bne.w	800341e <print_broken_up_decimal.isra.0+0x56>
          number_.fractional /= 10U;
 800356a:	4638      	mov	r0, r7
 800356c:	4641      	mov	r1, r8
 800356e:	220a      	movs	r2, #10
 8003570:	2300      	movs	r3, #0
 8003572:	f7fd fb0b 	bl	8000b8c <__aeabi_ldivmod>
 8003576:	220a      	movs	r2, #10
 8003578:	2300      	movs	r3, #0
 800357a:	46bb      	mov	fp, r7
 800357c:	46c2      	mov	sl, r8
 800357e:	4607      	mov	r7, r0
 8003580:	4688      	mov	r8, r1
 8003582:	f7fd fb03 	bl	8000b8c <__aeabi_ldivmod>
          if (digit != 0) {
 8003586:	4313      	orrs	r3, r2
          --count;
 8003588:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
          if (digit != 0) {
 800358c:	d0ed      	beq.n	800356a <print_broken_up_decimal.isra.0+0x1a2>
    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 800358e:	f1bb 0f0a 	cmp.w	fp, #10
 8003592:	f17a 0300 	sbcs.w	r3, sl, #0
 8003596:	f6bf af42 	bge.w	800341e <print_broken_up_decimal.isra.0+0x56>
 800359a:	e78a      	b.n	80034b2 <print_broken_up_decimal.isra.0+0xea>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800359c:	232b      	movs	r3, #43	; 0x2b
 800359e:	9a02      	ldr	r2, [sp, #8]
 80035a0:	55d3      	strb	r3, [r2, r7]
 80035a2:	3701      	adds	r7, #1
 80035a4:	e766      	b.n	8003474 <print_broken_up_decimal.isra.0+0xac>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80035a6:	9b03      	ldr	r3, [sp, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f43f af62 	beq.w	8003472 <print_broken_up_decimal.isra.0+0xaa>
 80035ae:	9a04      	ldr	r2, [sp, #16]
 80035b0:	bb0a      	cbnz	r2, 80035f6 <print_broken_up_decimal.isra.0+0x22e>
 80035b2:	9a01      	ldr	r2, [sp, #4]
 80035b4:	f012 0f0c 	tst.w	r2, #12
 80035b8:	f43f af5b 	beq.w	8003472 <print_broken_up_decimal.isra.0+0xaa>
      width--;
 80035bc:	3b01      	subs	r3, #1
 80035be:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80035c0:	e757      	b.n	8003472 <print_broken_up_decimal.isra.0+0xaa>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80035c2:	9b03      	ldr	r3, [sp, #12]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d099      	beq.n	80034fc <print_broken_up_decimal.isra.0+0x134>
 80035c8:	9b04      	ldr	r3, [sp, #16]
 80035ca:	b1b3      	cbz	r3, 80035fa <print_broken_up_decimal.isra.0+0x232>
      width--;
 80035cc:	9b03      	ldr	r3, [sp, #12]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80035d2:	9b03      	ldr	r3, [sp, #12]
 80035d4:	429f      	cmp	r7, r3
 80035d6:	d291      	bcs.n	80034fc <print_broken_up_decimal.isra.0+0x134>
 80035d8:	2f1f      	cmp	r7, #31
 80035da:	f63f af4a 	bhi.w	8003472 <print_broken_up_decimal.isra.0+0xaa>
 80035de:	9b02      	ldr	r3, [sp, #8]
      buf[len++] = '0';
 80035e0:	9a03      	ldr	r2, [sp, #12]
 80035e2:	441e      	add	r6, r3
 80035e4:	2330      	movs	r3, #48	; 0x30
 80035e6:	3701      	adds	r7, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80035e8:	4297      	cmp	r7, r2
      buf[len++] = '0';
 80035ea:	f806 3f01 	strb.w	r3, [r6, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80035ee:	d085      	beq.n	80034fc <print_broken_up_decimal.isra.0+0x134>
 80035f0:	2f20      	cmp	r7, #32
 80035f2:	d1f8      	bne.n	80035e6 <print_broken_up_decimal.isra.0+0x21e>
 80035f4:	e73d      	b.n	8003472 <print_broken_up_decimal.isra.0+0xaa>
      width--;
 80035f6:	9b03      	ldr	r3, [sp, #12]
 80035f8:	e7e0      	b.n	80035bc <print_broken_up_decimal.isra.0+0x1f4>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80035fa:	9b01      	ldr	r3, [sp, #4]
 80035fc:	f013 0f0c 	tst.w	r3, #12
 8003600:	d0e7      	beq.n	80035d2 <print_broken_up_decimal.isra.0+0x20a>
 8003602:	e7e3      	b.n	80035cc <print_broken_up_decimal.isra.0+0x204>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8003604:	4656      	mov	r6, sl
 8003606:	e750      	b.n	80034aa <print_broken_up_decimal.isra.0+0xe2>

08003608 <print_exponential_number>:
}

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
 8003608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800360c:	ed2d 8b04 	vpush	{d8-d9}
 8003610:	b097      	sub	sp, #92	; 0x5c
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 8003612:	9c25      	ldr	r4, [sp, #148]	; 0x94
{
 8003614:	2700      	movs	r7, #0
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 8003616:	0fe4      	lsrs	r4, r4, #31
{
 8003618:	4689      	mov	r9, r1
 800361a:	4698      	mov	r8, r3
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 800361c:	940d      	str	r4, [sp, #52]	; 0x34
  const bool negative = get_sign(number);
 800361e:	940f      	str	r4, [sp, #60]	; 0x3c
{
 8003620:	900b      	str	r0, [sp, #44]	; 0x2c
 8003622:	920c      	str	r2, [sp, #48]	; 0x30
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
 8003624:	b12c      	cbz	r4, 8003632 <print_exponential_number+0x2a>
 8003626:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 800362a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800362e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
 8003632:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8003636:	2200      	movs	r2, #0
 8003638:	2300      	movs	r3, #0
 800363a:	f7fd fa4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800363e:	900e      	str	r0, [sp, #56]	; 0x38
 8003640:	2800      	cmp	r0, #0
 8003642:	d055      	beq.n	80036f0 <print_exponential_number+0xe8>
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
  if (flags & FLAGS_ADAPT_EXP) {
 8003644:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003646:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800364a:	f040 81c3 	bne.w	80039d4 <print_exponential_number+0x3cc>
 800364e:	461f      	mov	r7, r3
  bool fall_back_to_decimal_only_mode = false;
 8003650:	469b      	mov	fp, r3

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
 8003652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003654:	b12b      	cbz	r3, 8003662 <print_exponential_number+0x5a>
 8003656:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 800365a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800365e:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8003662:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8003666:	9926      	ldr	r1, [sp, #152]	; 0x98
 8003668:	a810      	add	r0, sp, #64	; 0x40
 800366a:	9100      	str	r1, [sp, #0]
 800366c:	f7ff fe14 	bl	8003298 <get_components>
 8003670:	e9dd 6a12 	ldrd	r6, sl, [sp, #72]	; 0x48
 8003674:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8003678:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 800367c:	930d      	str	r3, [sp, #52]	; 0x34
    get_normalized_components(negative, precision, abs_number, normalization);

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
 800367e:	2f00      	cmp	r7, #0
 8003680:	f000 8189 	beq.w	8003996 <print_exponential_number+0x38e>
    if ( (flags & FLAGS_ADAPT_EXP) && exp10 >= -1 && decimal_part_components.integral == powers_of_10[exp10 + 1]) {
 8003684:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003686:	051f      	lsls	r7, r3, #20
 8003688:	d511      	bpl.n	80036ae <print_exponential_number+0xa6>
 800368a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 800368e:	db0e      	blt.n	80036ae <print_exponential_number+0xa6>
 8003690:	4620      	mov	r0, r4
 8003692:	4629      	mov	r1, r5
 8003694:	f7fc ff8a 	bl	80005ac <__aeabi_l2d>
 8003698:	4b14      	ldr	r3, [pc, #80]	; (80036ec <print_exponential_number+0xe4>)
 800369a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800369e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80036a2:	f7fd fa19 	bl	8000ad8 <__aeabi_dcmpeq>
 80036a6:	b110      	cbz	r0, 80036ae <print_exponential_number+0xa6>
      exp10++; // Not strictly necessary, since exp10 is no longer really used
      precision--;
 80036a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80036aa:	3b01      	subs	r3, #1
 80036ac:	9326      	str	r3, [sp, #152]	; 0x98
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const size_t start_idx = idx;
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 80036ae:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80036b0:	4620      	mov	r0, r4
 80036b2:	9309      	str	r3, [sp, #36]	; 0x24
 80036b4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80036b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80036b8:	9308      	str	r3, [sp, #32]
 80036ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80036bc:	9400      	str	r4, [sp, #0]
 80036be:	9307      	str	r3, [sp, #28]
 80036c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80036c2:	4632      	mov	r2, r6
 80036c4:	9306      	str	r3, [sp, #24]
 80036c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80036c8:	4629      	mov	r1, r5
 80036ca:	e9cd 8304 	strd	r8, r3, [sp, #16]
 80036ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036d0:	e9cd 9302 	strd	r9, r3, [sp, #8]
 80036d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80036d6:	9301      	str	r3, [sp, #4]
 80036d8:	4653      	mov	r3, sl
 80036da:	f7ff fe75 	bl	80033c8 <print_broken_up_decimal.isra.0>
 80036de:	4604      	mov	r4, r0
      // We need to right-pad with spaces to meet the width requirement
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 80036e0:	4620      	mov	r0, r4
 80036e2:	b017      	add	sp, #92	; 0x5c
 80036e4:	ecbd 8b04 	vpop	{d8-d9}
 80036e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036ec:	08013b98 	.word	0x08013b98
  return dwba;
 80036f0:	e9dd 6524 	ldrd	r6, r5, [sp, #144]	; 0x90
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 80036f4:	f3c5 500a 	ubfx	r0, r5, #20, #11
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80036f8:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80036fc:	f7fc ff1a 	bl	8000534 <__aeabi_i2d>
 8003700:	a3ce      	add	r3, pc, #824	; (adr r3, 8003a3c <print_exponential_number+0x434>)
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	f7fc ff7f 	bl	8000608 <__aeabi_dmul>
 800370a:	a3ce      	add	r3, pc, #824	; (adr r3, 8003a44 <print_exponential_number+0x43c>)
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f7fc fdc4 	bl	800029c <__adddf3>
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 8003714:	f3c5 0313 	ubfx	r3, r5, #0, #20
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003718:	460d      	mov	r5, r1
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 800371a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800371e:	4604      	mov	r4, r0
 8003720:	2200      	movs	r2, #0
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 8003722:	4630      	mov	r0, r6
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003724:	4bbe      	ldr	r3, [pc, #760]	; (8003a20 <print_exponential_number+0x418>)
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 8003726:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800372a:	f7fc fdb5 	bl	8000298 <__aeabi_dsub>
 800372e:	a3b4      	add	r3, pc, #720	; (adr r3, 8003a00 <print_exponential_number+0x3f8>)
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f7fc ff68 	bl	8000608 <__aeabi_dmul>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4620      	mov	r0, r4
 800373e:	4629      	mov	r1, r5
 8003740:	f7fc fdac 	bl	800029c <__adddf3>
 8003744:	f7fd f9fa 	bl	8000b3c <__aeabi_d2iz>
 8003748:	4683      	mov	fp, r0
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 800374a:	f7fc fef3 	bl	8000534 <__aeabi_i2d>
 800374e:	a3ae      	add	r3, pc, #696	; (adr r3, 8003a08 <print_exponential_number+0x400>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	4604      	mov	r4, r0
 8003756:	460d      	mov	r5, r1
 8003758:	f7fc ff56 	bl	8000608 <__aeabi_dmul>
 800375c:	2200      	movs	r2, #0
 800375e:	4bb1      	ldr	r3, [pc, #708]	; (8003a24 <print_exponential_number+0x41c>)
 8003760:	f7fc fd9c 	bl	800029c <__adddf3>
 8003764:	f7fd f9ea 	bl	8000b3c <__aeabi_d2iz>
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003768:	a3a9      	add	r3, pc, #676	; (adr r3, 8003a10 <print_exponential_number+0x408>)
 800376a:	e9d3 2300 	ldrd	r2, r3, [r3]
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 800376e:	4682      	mov	sl, r0
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003770:	4629      	mov	r1, r5
 8003772:	4620      	mov	r0, r4
 8003774:	f7fc ff48 	bl	8000608 <__aeabi_dmul>
 8003778:	4604      	mov	r4, r0
 800377a:	4650      	mov	r0, sl
 800377c:	460d      	mov	r5, r1
 800377e:	f7fc fed9 	bl	8000534 <__aeabi_i2d>
 8003782:	a3a5      	add	r3, pc, #660	; (adr r3, 8003a18 <print_exponential_number+0x410>)
 8003784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003788:	f7fc ff3e 	bl	8000608 <__aeabi_dmul>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4620      	mov	r0, r4
 8003792:	4629      	mov	r1, r5
 8003794:	f7fc fd80 	bl	8000298 <__aeabi_dsub>
      const double z2 = z * z;
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 800379c:	4604      	mov	r4, r0
 800379e:	460d      	mov	r5, r1
      const double z2 = z * z;
 80037a0:	f7fc ff32 	bl	8000608 <__aeabi_dmul>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80037a4:	4622      	mov	r2, r4
      const double z2 = z * z;
 80037a6:	4606      	mov	r6, r0
 80037a8:	460f      	mov	r7, r1
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80037aa:	462b      	mov	r3, r5
 80037ac:	4620      	mov	r0, r4
 80037ae:	4629      	mov	r1, r5
 80037b0:	f7fc fd74 	bl	800029c <__adddf3>
 80037b4:	2200      	movs	r2, #0
 80037b6:	ec41 0b18 	vmov	d8, r0, r1
 80037ba:	4b9b      	ldr	r3, [pc, #620]	; (8003a28 <print_exponential_number+0x420>)
 80037bc:	4630      	mov	r0, r6
 80037be:	4639      	mov	r1, r7
 80037c0:	f7fd f84c 	bl	800085c <__aeabi_ddiv>
 80037c4:	2200      	movs	r2, #0
 80037c6:	4b99      	ldr	r3, [pc, #612]	; (8003a2c <print_exponential_number+0x424>)
 80037c8:	f7fc fd68 	bl	800029c <__adddf3>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4630      	mov	r0, r6
 80037d2:	4639      	mov	r1, r7
 80037d4:	f7fd f842 	bl	800085c <__aeabi_ddiv>
 80037d8:	2200      	movs	r2, #0
 80037da:	4b95      	ldr	r3, [pc, #596]	; (8003a30 <print_exponential_number+0x428>)
 80037dc:	f7fc fd5e 	bl	800029c <__adddf3>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4630      	mov	r0, r6
 80037e6:	4639      	mov	r1, r7
 80037e8:	f7fd f838 	bl	800085c <__aeabi_ddiv>
 80037ec:	4622      	mov	r2, r4
 80037ee:	462b      	mov	r3, r5
 80037f0:	4604      	mov	r4, r0
 80037f2:	460d      	mov	r5, r1
 80037f4:	2000      	movs	r0, #0
 80037f6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037fa:	f7fc fd4d 	bl	8000298 <__aeabi_dsub>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4620      	mov	r0, r4
 8003804:	4629      	mov	r1, r5
 8003806:	f7fc fd49 	bl	800029c <__adddf3>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	ec51 0b18 	vmov	r0, r1, d8
 8003812:	f7fd f823 	bl	800085c <__aeabi_ddiv>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 8003816:	f20a 3aff 	addw	sl, sl, #1023	; 0x3ff
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800381a:	2200      	movs	r2, #0
 800381c:	4b85      	ldr	r3, [pc, #532]	; (8003a34 <print_exponential_number+0x42c>)
 800381e:	f7fc fd3d 	bl	800029c <__adddf3>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 8003822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003824:	ea4f 530a 	mov.w	r3, sl, lsl #20
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003828:	f7fc feee 	bl	8000608 <__aeabi_dmul>
      if (abs_number < conv.F) {
 800382c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003830:	4604      	mov	r4, r0
 8003832:	460d      	mov	r5, r1
      if (abs_number < conv.F) {
 8003834:	f7fd f978 	bl	8000b28 <__aeabi_dcmpgt>
 8003838:	2800      	cmp	r0, #0
 800383a:	f040 80c2 	bne.w	80039c2 <print_exponential_number+0x3ba>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800383e:	4620      	mov	r0, r4
 8003840:	4629      	mov	r1, r5
    abs_exp10_covered_by_powers_table = PRINTF_ABS(exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
 8003842:	f10b 0311 	add.w	r3, fp, #17
 8003846:	2b22      	cmp	r3, #34	; 0x22
 8003848:	bf94      	ite	ls
 800384a:	2701      	movls	r7, #1
 800384c:	2700      	movhi	r7, #0
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 800384e:	f200 8159 	bhi.w	8003b04 <print_exponential_number+0x4fc>
 8003852:	4a79      	ldr	r2, [pc, #484]	; (8003a38 <print_exponential_number+0x430>)
 8003854:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 8003858:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 800385c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003860:	ed92 7b00 	vldr	d7, [r2]
 8003864:	eeb0 8a47 	vmov.f32	s16, s14
 8003868:	eef0 8a67 	vmov.f32	s17, s15
  if (flags & FLAGS_ADAPT_EXP) {
 800386c:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 800386e:	0512      	lsls	r2, r2, #20
 8003870:	f140 80ec 	bpl.w	8003a4c <print_exponential_number+0x444>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8003874:	f11b 0f04 	cmn.w	fp, #4
 8003878:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800387a:	f280 81f8 	bge.w	8003c6e <print_exponential_number+0x666>
        (int) precision - 1 - exp10 :
 800387e:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8003880:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003884:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8003886:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800388c:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 800388e:	2f00      	cmp	r7, #0
 8003890:	f040 80e3 	bne.w	8003a5a <print_exponential_number+0x452>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003894:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8003898:	ec57 6b18 	vmov	r6, r7, d8
  components.is_negative = negative;
 800389c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800389e:	ee18 2a10 	vmov	r2, s16
  components.is_negative = negative;
 80038a2:	930d      	str	r3, [sp, #52]	; 0x34
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 80038a4:	463b      	mov	r3, r7
 80038a6:	f7fc ffd9 	bl	800085c <__aeabi_ddiv>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 80038aa:	f7fd f9d7 	bl	8000c5c <__aeabi_d2lz>
 80038ae:	4604      	mov	r4, r0
 80038b0:	460d      	mov	r5, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 80038b2:	f7fc fe7b 	bl	80005ac <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 80038b6:	463b      	mov	r3, r7
 80038b8:	ee18 2a10 	vmov	r2, s16
 80038bc:	f7fc fea4 	bl	8000608 <__aeabi_dmul>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 80038c4:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80038c8:	f7fc fce6 	bl	8000298 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 80038cc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80038ce:	4b5a      	ldr	r3, [pc, #360]	; (8003a38 <print_exponential_number+0x430>)
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 80038d0:	4606      	mov	r6, r0
  double prec_power_of_10 = powers_of_10[precision];
 80038d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80038d6:	ed93 7b00 	vldr	d7, [r3]
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 80038da:	ee17 3a90 	vmov	r3, s15
 80038de:	f3c7 520a 	ubfx	r2, r7, #20, #11
 80038e2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80038e6:	f3c3 530a 	ubfx	r3, r3, #20, #11
 80038ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 80038ee:	2a00      	cmp	r2, #0
 80038f0:	bfb8      	it	lt
 80038f2:	4252      	neglt	r2, r2
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bfb8      	it	lt
 80038f8:	425b      	neglt	r3, r3
 80038fa:	429a      	cmp	r2, r3
  double prec_power_of_10 = powers_of_10[precision];
 80038fc:	eeb0 9a47 	vmov.f32	s18, s14
 8003900:	eef0 9a67 	vmov.f32	s19, s15
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003904:	460f      	mov	r7, r1
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 8003906:	f340 819c 	ble.w	8003c42 <print_exponential_number+0x63a>
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 800390a:	ec53 2b17 	vmov	r2, r3, d7
 800390e:	ec51 0b18 	vmov	r0, r1, d8
 8003912:	f7fc ffa3 	bl	800085c <__aeabi_ddiv>
 8003916:	460b      	mov	r3, r1
 8003918:	4602      	mov	r2, r0
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800391a:	4639      	mov	r1, r7
 800391c:	4630      	mov	r0, r6
 800391e:	f7fc ff9d 	bl	800085c <__aeabi_ddiv>
 8003922:	4606      	mov	r6, r0
 8003924:	460f      	mov	r7, r1
  if (precision == 0U) {
 8003926:	9b26      	ldr	r3, [sp, #152]	; 0x98
    components.integral += (scaled_remainder >= rounding_threshold);
 8003928:	4630      	mov	r0, r6
 800392a:	4639      	mov	r1, r7
  if (precision == 0U) {
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 80cf 	beq.w	8003ad0 <print_exponential_number+0x4c8>
    components.fractional = (int_fast64_t) scaled_remainder;
 8003932:	f7fd f993 	bl	8000c5c <__aeabi_d2lz>
 8003936:	468a      	mov	sl, r1
 8003938:	900e      	str	r0, [sp, #56]	; 0x38
    scaled_remainder -= components.fractional;
 800393a:	f7fc fe37 	bl	80005ac <__aeabi_l2d>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4630      	mov	r0, r6
 8003944:	4639      	mov	r1, r7
 8003946:	f7fc fca7 	bl	8000298 <__aeabi_dsub>
    components.fractional += (scaled_remainder >= rounding_threshold);
 800394a:	2200      	movs	r2, #0
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <print_exponential_number+0x41c>)
    scaled_remainder -= components.fractional;
 800394e:	4606      	mov	r6, r0
 8003950:	460f      	mov	r7, r1
    components.fractional += (scaled_remainder >= rounding_threshold);
 8003952:	f7fd f8df 	bl	8000b14 <__aeabi_dcmpge>
 8003956:	4603      	mov	r3, r0
    if (scaled_remainder == rounding_threshold) {
 8003958:	4630      	mov	r0, r6
    components.fractional += (scaled_remainder >= rounding_threshold);
 800395a:	1e1e      	subs	r6, r3, #0
 800395c:	bf18      	it	ne
 800395e:	2601      	movne	r6, #1
 8003960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (scaled_remainder == rounding_threshold) {
 8003962:	4639      	mov	r1, r7
    components.fractional += (scaled_remainder >= rounding_threshold);
 8003964:	18f6      	adds	r6, r6, r3
    if (scaled_remainder == rounding_threshold) {
 8003966:	f04f 0200 	mov.w	r2, #0
 800396a:	4b2e      	ldr	r3, [pc, #184]	; (8003a24 <print_exponential_number+0x41c>)
    components.fractional += (scaled_remainder >= rounding_threshold);
 800396c:	f14a 0a00 	adc.w	sl, sl, #0
    if (scaled_remainder == rounding_threshold) {
 8003970:	f7fd f8b2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003974:	b108      	cbz	r0, 800397a <print_exponential_number+0x372>
      components.fractional &= ~((int_fast64_t) 0x1);
 8003976:	f026 0601 	bic.w	r6, r6, #1
    if ((double) components.fractional >= prec_power_of_10) {
 800397a:	4630      	mov	r0, r6
 800397c:	4651      	mov	r1, sl
 800397e:	f7fc fe15 	bl	80005ac <__aeabi_l2d>
 8003982:	ec53 2b19 	vmov	r2, r3, d9
 8003986:	f7fd f8c5 	bl	8000b14 <__aeabi_dcmpge>
 800398a:	b120      	cbz	r0, 8003996 <print_exponential_number+0x38e>
      ++components.integral;
 800398c:	3401      	adds	r4, #1
 800398e:	f145 0500 	adc.w	r5, r5, #0
      components.fractional = 0;
 8003992:	2600      	movs	r6, #0
 8003994:	46b2      	mov	sl, r6
    if (decimal_part_components.integral >= 10) {
 8003996:	2c0a      	cmp	r4, #10
 8003998:	f175 0300 	sbcs.w	r3, r5, #0
 800399c:	db05      	blt.n	80039aa <print_exponential_number+0x3a2>
      decimal_part_components.fractional = 0;
 800399e:	2600      	movs	r6, #0
      decimal_part_components.integral = 1;
 80039a0:	2401      	movs	r4, #1
      decimal_part_components.fractional = 0;
 80039a2:	46b2      	mov	sl, r6
      decimal_part_components.integral = 1;
 80039a4:	4635      	mov	r5, r6
      exp10++;
 80039a6:	f10b 0b01 	add.w	fp, fp, #1
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 80039aa:	f10b 0363 	add.w	r3, fp, #99	; 0x63
 80039ae:	2bc6      	cmp	r3, #198	; 0xc6
 80039b0:	f200 80ab 	bhi.w	8003b0a <print_exponential_number+0x502>
      0U :
 80039b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80039b6:	f013 0702 	ands.w	r7, r3, #2
 80039ba:	f040 8129 	bne.w	8003c10 <print_exponential_number+0x608>
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 80039be:	2704      	movs	r7, #4
 80039c0:	e104      	b.n	8003bcc <print_exponential_number+0x5c4>
        conv.F /= 10;
 80039c2:	4620      	mov	r0, r4
 80039c4:	4629      	mov	r1, r5
 80039c6:	2200      	movs	r2, #0
 80039c8:	4b18      	ldr	r3, [pc, #96]	; (8003a2c <print_exponential_number+0x424>)
        exp10--;
 80039ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        conv.F /= 10;
 80039ce:	f7fc ff45 	bl	800085c <__aeabi_ddiv>
 80039d2:	e736      	b.n	8003842 <print_exponential_number+0x23a>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 80039d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	bf38      	it	cc
 80039da:	2301      	movcc	r3, #1
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f340 811a 	ble.w	8003c16 <print_exponential_number+0x60e>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 80039e2:	f04f 0b00 	mov.w	fp, #0
        (int) precision - 1 - exp10 :
 80039e6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80039e8:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 80039ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80039ee:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 80039f0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80039f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039f6:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 80039f8:	2701      	movs	r7, #1
 80039fa:	e62a      	b.n	8003652 <print_exponential_number+0x4a>
 80039fc:	f3af 8000 	nop.w
 8003a00:	636f4361 	.word	0x636f4361
 8003a04:	3fd287a7 	.word	0x3fd287a7
 8003a08:	0979a371 	.word	0x0979a371
 8003a0c:	400a934f 	.word	0x400a934f
 8003a10:	bbb55516 	.word	0xbbb55516
 8003a14:	40026bb1 	.word	0x40026bb1
 8003a18:	fefa39ef 	.word	0xfefa39ef
 8003a1c:	3fe62e42 	.word	0x3fe62e42
 8003a20:	3ff80000 	.word	0x3ff80000
 8003a24:	3fe00000 	.word	0x3fe00000
 8003a28:	402c0000 	.word	0x402c0000
 8003a2c:	40240000 	.word	0x40240000
 8003a30:	40180000 	.word	0x40180000
 8003a34:	3ff00000 	.word	0x3ff00000
 8003a38:	08013b98 	.word	0x08013b98
 8003a3c:	509f79fb 	.word	0x509f79fb
 8003a40:	3fd34413 	.word	0x3fd34413
 8003a44:	8b60c8b3 	.word	0x8b60c8b3
 8003a48:	3fc68a28 	.word	0x3fc68a28
 8003a4c:	f1bb 0f00 	cmp.w	fp, #0
 8003a50:	f280 80f1 	bge.w	8003c36 <print_exponential_number+0x62e>
 8003a54:	2b22      	cmp	r3, #34	; 0x22
 8003a56:	f63f af1d 	bhi.w	8003894 <print_exponential_number+0x28c>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003a5a:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8003a5e:	ec57 6b18 	vmov	r6, r7, d8
  components.is_negative = negative;
 8003a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003a64:	ee18 2a10 	vmov	r2, s16
  components.is_negative = negative;
 8003a68:	930d      	str	r3, [sp, #52]	; 0x34
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003a6a:	463b      	mov	r3, r7
 8003a6c:	f7fc fdcc 	bl	8000608 <__aeabi_dmul>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 8003a70:	f7fd f8f4 	bl	8000c5c <__aeabi_d2lz>
 8003a74:	4604      	mov	r4, r0
 8003a76:	460d      	mov	r5, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003a78:	f7fc fd98 	bl	80005ac <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 8003a7c:	463b      	mov	r3, r7
 8003a7e:	ee18 2a10 	vmov	r2, s16
 8003a82:	f7fc feeb 	bl	800085c <__aeabi_ddiv>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003a8a:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8003a8e:	f7fc fc03 	bl	8000298 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 8003a92:	4e7f      	ldr	r6, [pc, #508]	; (8003c90 <print_exponential_number+0x688>)
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003a94:	463b      	mov	r3, r7
  double prec_power_of_10 = powers_of_10[precision];
 8003a96:	9f26      	ldr	r7, [sp, #152]	; 0x98
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003a98:	ee18 2a10 	vmov	r2, s16
  double prec_power_of_10 = powers_of_10[precision];
 8003a9c:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8003aa0:	ed96 7b00 	vldr	d7, [r6]
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003aa4:	460f      	mov	r7, r1
 8003aa6:	4606      	mov	r6, r0
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003aa8:	ec51 0b17 	vmov	r0, r1, d7
  double prec_power_of_10 = powers_of_10[precision];
 8003aac:	eeb0 9a47 	vmov.f32	s18, s14
 8003ab0:	eef0 9a67 	vmov.f32	s19, s15
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003ab4:	f7fc fda8 	bl	8000608 <__aeabi_dmul>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003ab8:	463b      	mov	r3, r7
 8003aba:	4632      	mov	r2, r6
 8003abc:	f7fc fda4 	bl	8000608 <__aeabi_dmul>
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	460f      	mov	r7, r1
  if (precision == 0U) {
 8003ac4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    components.integral += (scaled_remainder >= rounding_threshold);
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	4639      	mov	r1, r7
  if (precision == 0U) {
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f47f af31 	bne.w	8003932 <print_exponential_number+0x32a>
    components.integral += (scaled_remainder >= rounding_threshold);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	4b70      	ldr	r3, [pc, #448]	; (8003c94 <print_exponential_number+0x68c>)
 8003ad4:	f7fd f81e 	bl	8000b14 <__aeabi_dcmpge>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	3b00      	subs	r3, #0
 8003adc:	bf18      	it	ne
 8003ade:	2301      	movne	r3, #1
    if (scaled_remainder == rounding_threshold) {
 8003ae0:	4630      	mov	r0, r6
    components.integral += (scaled_remainder >= rounding_threshold);
 8003ae2:	191c      	adds	r4, r3, r4
    if (scaled_remainder == rounding_threshold) {
 8003ae4:	4639      	mov	r1, r7
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	4b6a      	ldr	r3, [pc, #424]	; (8003c94 <print_exponential_number+0x68c>)
    components.integral += (scaled_remainder >= rounding_threshold);
 8003aec:	f145 0500 	adc.w	r5, r5, #0
    if (scaled_remainder == rounding_threshold) {
 8003af0:	f7fc fff2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003af4:	2800      	cmp	r0, #0
 8003af6:	f43f af4c 	beq.w	8003992 <print_exponential_number+0x38a>
    components.fractional = 0;
 8003afa:	9e26      	ldr	r6, [sp, #152]	; 0x98
      components.integral &= ~((int_fast64_t) 0x1);
 8003afc:	f024 0401 	bic.w	r4, r4, #1
    components.fractional = 0;
 8003b00:	46b2      	mov	sl, r6
 8003b02:	e748      	b.n	8003996 <print_exponential_number+0x38e>
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 8003b04:	ec41 0b18 	vmov	d8, r0, r1
 8003b08:	e6b0      	b.n	800386c <print_exponential_number+0x264>
      0U :
 8003b0a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003b0c:	f013 0702 	ands.w	r7, r3, #2
 8003b10:	d05b      	beq.n	8003bca <print_exponential_number+0x5c2>
 8003b12:	2304      	movs	r3, #4
 8003b14:	930e      	str	r3, [sp, #56]	; 0x38
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003b16:	4620      	mov	r0, r4
 8003b18:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003b1a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003b1c:	9407      	str	r4, [sp, #28]
 8003b1e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003b20:	9309      	str	r3, [sp, #36]	; 0x24
 8003b22:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8003b26:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003b28:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003b2a:	9401      	str	r4, [sp, #4]
 8003b2c:	2400      	movs	r4, #0
 8003b2e:	9308      	str	r3, [sp, #32]
 8003b30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003b32:	4632      	mov	r2, r6
 8003b34:	9305      	str	r3, [sp, #20]
 8003b36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b38:	4629      	mov	r1, r5
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	f8cd 8010 	str.w	r8, [sp, #16]
 8003b40:	4653      	mov	r3, sl
 8003b42:	9406      	str	r4, [sp, #24]
 8003b44:	f7ff fc40 	bl	80033c8 <print_broken_up_decimal.isra.0>
 8003b48:	4602      	mov	r2, r0
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003b4a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	f013 0f20 	tst.w	r3, #32
 8003b52:	bf14      	ite	ne
 8003b54:	2045      	movne	r0, #69	; 0x45
 8003b56:	2065      	moveq	r0, #101	; 0x65
 8003b58:	4643      	mov	r3, r8
 8003b5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003b5c:	1c54      	adds	r4, r2, #1
 8003b5e:	47a8      	blx	r5
    idx = print_integer(out, buffer, idx, maxlen,
 8003b60:	f1bb 0f00 	cmp.w	fp, #0
 8003b64:	dd74      	ble.n	8003c50 <print_exponential_number+0x648>
 8003b66:	465a      	mov	r2, fp
 8003b68:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8003b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8003b70:	2305      	movs	r3, #5
 8003b72:	ea4f 70db 	mov.w	r0, fp, lsr #31
 8003b76:	9002      	str	r0, [sp, #8]
 8003b78:	9306      	str	r3, [sp, #24]
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	230a      	movs	r3, #10
 8003b7e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8003b80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003b82:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8003b86:	4622      	mov	r2, r4
 8003b88:	9105      	str	r1, [sp, #20]
 8003b8a:	4643      	mov	r3, r8
 8003b8c:	4649      	mov	r1, r9
 8003b8e:	4630      	mov	r0, r6
 8003b90:	f7ff fa40 	bl	8003014 <print_integer>
 8003b94:	4604      	mov	r4, r0
    if (flags & FLAGS_LEFT) {
 8003b96:	2f00      	cmp	r7, #0
 8003b98:	f43f ada2 	beq.w	80036e0 <print_exponential_number+0xd8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003b9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b9e:	1ac5      	subs	r5, r0, r3
 8003ba0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8003ba2:	42ab      	cmp	r3, r5
 8003ba4:	f67f ad9c 	bls.w	80036e0 <print_exponential_number+0xd8>
 8003ba8:	461f      	mov	r7, r3
 8003baa:	4622      	mov	r2, r4
 8003bac:	4643      	mov	r3, r8
 8003bae:	4649      	mov	r1, r9
 8003bb0:	2020      	movs	r0, #32
 8003bb2:	3501      	adds	r5, #1
 8003bb4:	47b0      	blx	r6
 8003bb6:	42af      	cmp	r7, r5
 8003bb8:	f104 0401 	add.w	r4, r4, #1
 8003bbc:	d8f5      	bhi.n	8003baa <print_exponential_number+0x5a2>
}
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	b017      	add	sp, #92	; 0x5c
 8003bc2:	ecbd 8b04 	vpop	{d8-d9}
 8003bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 8003bca:	2705      	movs	r7, #5
        width - exp10_part_width :
 8003bcc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003bce:	4620      	mov	r0, r4
        width - exp10_part_width :
 8003bd0:	429f      	cmp	r7, r3
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003bd2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003bd4:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8003bd8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003bda:	9407      	str	r4, [sp, #28]
 8003bdc:	9308      	str	r3, [sp, #32]
 8003bde:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003be0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003be2:	e9cd 9402 	strd	r9, r4, [sp, #8]
 8003be6:	9305      	str	r3, [sp, #20]
 8003be8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003bec:	4632      	mov	r2, r6
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	4629      	mov	r1, r5
 8003bf2:	4653      	mov	r3, sl
 8003bf4:	f8cd 8010 	str.w	r8, [sp, #16]
 8003bf8:	9401      	str	r4, [sp, #4]
        width - exp10_part_width :
 8003bfa:	d230      	bcs.n	8003c5e <print_exponential_number+0x656>
 8003bfc:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003bfe:	1be4      	subs	r4, r4, r7
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003c00:	9406      	str	r4, [sp, #24]
 8003c02:	f7ff fbe1 	bl	80033c8 <print_broken_up_decimal.isra.0>
    idx = print_integer(out, buffer, idx, maxlen,
 8003c06:	1e7b      	subs	r3, r7, #1
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003c08:	4602      	mov	r2, r0
    idx = print_integer(out, buffer, idx, maxlen,
 8003c0a:	2700      	movs	r7, #0
 8003c0c:	930e      	str	r3, [sp, #56]	; 0x38
 8003c0e:	e79c      	b.n	8003b4a <print_exponential_number+0x542>
      0U :
 8003c10:	2303      	movs	r3, #3
 8003c12:	930e      	str	r3, [sp, #56]	; 0x38
 8003c14:	e77f      	b.n	8003b16 <print_exponential_number+0x50e>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 8003c16:	f04f 0b00 	mov.w	fp, #0
        (int) precision - 1 - exp10 :
 8003c1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8003c1c:	f1bb 0f00 	cmp.w	fp, #0
        (int) precision - 1 - exp10 :
 8003c20:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8003c24:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003c28:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8003c2a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003c2c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c30:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8003c32:	f6ff ae2c 	blt.w	800388e <print_exponential_number+0x286>
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
 8003c36:	f1bb 0f00 	cmp.w	fp, #0
 8003c3a:	f47f ae2b 	bne.w	8003894 <print_exponential_number+0x28c>
 8003c3e:	465f      	mov	r7, fp
 8003c40:	e507      	b.n	8003652 <print_exponential_number+0x4a>
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 8003c42:	ec53 2b18 	vmov	r2, r3, d8
 8003c46:	ec51 0b17 	vmov	r0, r1, d7
 8003c4a:	f7fc fe07 	bl	800085c <__aeabi_ddiv>
 8003c4e:	e733      	b.n	8003ab8 <print_exponential_number+0x4b0>
                ABS_FOR_PRINTING(exp10),
 8003c50:	ea4f 73eb 	mov.w	r3, fp, asr #31
 8003c54:	f1db 0200 	rsbs	r2, fp, #0
 8003c58:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003c5c:	e786      	b.n	8003b6c <print_exponential_number+0x564>
    idx = print_integer(out, buffer, idx, maxlen,
 8003c5e:	1e7c      	subs	r4, r7, #1
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003c60:	2700      	movs	r7, #0
 8003c62:	9706      	str	r7, [sp, #24]
    idx = print_integer(out, buffer, idx, maxlen,
 8003c64:	940e      	str	r4, [sp, #56]	; 0x38
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003c66:	f7ff fbaf 	bl	80033c8 <print_broken_up_decimal.isra.0>
 8003c6a:	4602      	mov	r2, r0
  if (! fall_back_to_decimal_only_mode) {
 8003c6c:	e76d      	b.n	8003b4a <print_exponential_number+0x542>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	bf38      	it	cc
 8003c72:	2301      	movcc	r3, #1
 8003c74:	459b      	cmp	fp, r3
 8003c76:	dad0      	bge.n	8003c1a <print_exponential_number+0x612>
        (int) precision - 1 - exp10 :
 8003c78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	eba3 030b 	sub.w	r3, r3, fp
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8003c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003c84:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8003c86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c8c:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8003c8e:	e6b3      	b.n	80039f8 <print_exponential_number+0x3f0>
 8003c90:	08013b98 	.word	0x08013b98
 8003c94:	3fe00000 	.word	0x3fe00000

08003c98 <print_floating_point>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS


static size_t print_floating_point(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int precision, unsigned int width, unsigned int flags, bool prefer_exponential)
{
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	b09d      	sub	sp, #116	; 0x74
 8003c9e:	e9dd 5428 	ldrd	r5, r4, [sp, #160]	; 0xa0
 8003ca2:	940c      	str	r4, [sp, #48]	; 0x30
 8003ca4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8003ca6:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 8003caa:	940b      	str	r4, [sp, #44]	; 0x2c
 8003cac:	f89d 40ac 	ldrb.w	r4, [sp, #172]	; 0xac
 8003cb0:	4680      	mov	r8, r0
 8003cb2:	4689      	mov	r9, r1
 8003cb4:	4692      	mov	sl, r2
 8003cb6:	469b      	mov	fp, r3
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;

  // test for special values
  if (value != value)
 8003cb8:	4632      	mov	r2, r6
 8003cba:	463b      	mov	r3, r7
 8003cbc:	4630      	mov	r0, r6
 8003cbe:	4639      	mov	r1, r7
{
 8003cc0:	940d      	str	r4, [sp, #52]	; 0x34
  if (value != value)
 8003cc2:	f7fc ff09 	bl	8000ad8 <__aeabi_dcmpeq>
 8003cc6:	2800      	cmp	r0, #0
 8003cc8:	d07c      	beq.n	8003dc4 <print_floating_point+0x12c>
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 8003cca:	4630      	mov	r0, r6
 8003ccc:	4639      	mov	r1, r7
 8003cce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cd2:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8003cd6:	f7fc ff09 	bl	8000aec <__aeabi_dcmplt>
 8003cda:	2800      	cmp	r0, #0
 8003cdc:	f040 80a3 	bne.w	8003e26 <print_floating_point+0x18e>
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 8003ce0:	4630      	mov	r0, r6
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ce8:	4b5f      	ldr	r3, [pc, #380]	; (8003e68 <print_floating_point+0x1d0>)
 8003cea:	f7fc ff1d 	bl	8000b28 <__aeabi_dcmpgt>
 8003cee:	bb38      	cbnz	r0, 8003d40 <print_floating_point+0xa8>
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  if (!prefer_exponential && ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8003cf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d13d      	bne.n	8003d72 <print_floating_point+0xda>
 8003cf6:	a358      	add	r3, pc, #352	; (adr r3, 8003e58 <print_floating_point+0x1c0>)
 8003cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	4639      	mov	r1, r7
 8003d00:	f7fc ff12 	bl	8000b28 <__aeabi_dcmpgt>
 8003d04:	b940      	cbnz	r0, 8003d18 <print_floating_point+0x80>
 8003d06:	a356      	add	r3, pc, #344	; (adr r3, 8003e60 <print_floating_point+0x1c8>)
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	4630      	mov	r0, r6
 8003d0e:	4639      	mov	r1, r7
 8003d10:	f7fc feec 	bl	8000aec <__aeabi_dcmplt>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	d02c      	beq.n	8003d72 <print_floating_point+0xda>
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    return print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
 8003d18:	2400      	movs	r4, #0
 8003d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003d1c:	9502      	str	r5, [sp, #8]
 8003d1e:	9304      	str	r3, [sp, #16]
 8003d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d22:	ad14      	add	r5, sp, #80	; 0x50
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	4652      	mov	r2, sl
 8003d28:	465b      	mov	r3, fp
 8003d2a:	4649      	mov	r1, r9
 8003d2c:	4640      	mov	r0, r8
 8003d2e:	e9cd 6700 	strd	r6, r7, [sp]
 8003d32:	e9cd 5405 	strd	r5, r4, [sp, #20]
 8003d36:	f7ff fc67 	bl	8003608 <print_exponential_number>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
#endif
      print_decimal_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
}
 8003d3a:	b01d      	add	sp, #116	; 0x74
 8003d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003d40:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003d42:	4d4a      	ldr	r5, [pc, #296]	; (8003e6c <print_floating_point+0x1d4>)
 8003d44:	9429      	str	r4, [sp, #164]	; 0xa4
 8003d46:	f004 0404 	and.w	r4, r4, #4
 8003d4a:	2c00      	cmp	r4, #0
 8003d4c:	4c48      	ldr	r4, [pc, #288]	; (8003e70 <print_floating_point+0x1d8>)
 8003d4e:	bf18      	it	ne
 8003d50:	462c      	movne	r4, r5
 8003d52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003d54:	9426      	str	r4, [sp, #152]	; 0x98
 8003d56:	9328      	str	r3, [sp, #160]	; 0xa0
 8003d58:	bf0c      	ite	eq
 8003d5a:	2403      	moveq	r4, #3
 8003d5c:	2404      	movne	r4, #4
 8003d5e:	465b      	mov	r3, fp
 8003d60:	4652      	mov	r2, sl
 8003d62:	4649      	mov	r1, r9
 8003d64:	4640      	mov	r0, r8
 8003d66:	9427      	str	r4, [sp, #156]	; 0x9c
}
 8003d68:	b01d      	add	sp, #116	; 0x74
 8003d6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003d6e:	f7ff b90d 	b.w	8002f8c <out_rev_>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003d72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8003d74:	2030      	movs	r0, #48	; 0x30
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003d76:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003d7a:	bf08      	it	eq
 8003d7c:	2506      	moveq	r5, #6
 8003d7e:	ab14      	add	r3, sp, #80	; 0x50
 8003d80:	462c      	mov	r4, r5
 8003d82:	f1a5 0220 	sub.w	r2, r5, #32
 8003d86:	e004      	b.n	8003d92 <print_floating_point+0xfa>
    precision--;
 8003d88:	3c01      	subs	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8003d8a:	4294      	cmp	r4, r2
    buf[len++] = '0'; // This respects the precision in terms of result length only
 8003d8c:	f803 0b01 	strb.w	r0, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 8003d90:	d05a      	beq.n	8003e48 <print_floating_point+0x1b0>
 8003d92:	2c11      	cmp	r4, #17
 8003d94:	eba5 0104 	sub.w	r1, r5, r4
 8003d98:	d8f6      	bhi.n	8003d88 <print_floating_point+0xf0>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 8003d9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d9c:	b31b      	cbz	r3, 8003de6 <print_floating_point+0x14e>
 8003d9e:	ab14      	add	r3, sp, #80	; 0x50
 8003da0:	9305      	str	r3, [sp, #20]
 8003da2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003da4:	9106      	str	r1, [sp, #24]
 8003da6:	9304      	str	r3, [sp, #16]
 8003da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003daa:	4652      	mov	r2, sl
 8003dac:	9303      	str	r3, [sp, #12]
 8003dae:	4649      	mov	r1, r9
 8003db0:	465b      	mov	r3, fp
 8003db2:	4640      	mov	r0, r8
 8003db4:	e9cd 6700 	strd	r6, r7, [sp]
 8003db8:	9402      	str	r4, [sp, #8]
 8003dba:	f7ff fc25 	bl	8003608 <print_exponential_number>
}
 8003dbe:	b01d      	add	sp, #116	; 0x74
 8003dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dc6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003dc8:	9329      	str	r3, [sp, #164]	; 0xa4
 8003dca:	9428      	str	r4, [sp, #160]	; 0xa0
 8003dcc:	465b      	mov	r3, fp
 8003dce:	2403      	movs	r4, #3
 8003dd0:	4652      	mov	r2, sl
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	4640      	mov	r0, r8
 8003dd6:	4d27      	ldr	r5, [pc, #156]	; (8003e74 <print_floating_point+0x1dc>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003dd8:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003dda:	9526      	str	r5, [sp, #152]	; 0x98
}
 8003ddc:	b01d      	add	sp, #116	; 0x74
 8003dde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003de2:	f7ff b8d3 	b.w	8002f8c <out_rev_>
  struct double_components value_ = get_components(number, precision);
 8003de6:	4632      	mov	r2, r6
 8003de8:	463b      	mov	r3, r7
 8003dea:	a80e      	add	r0, sp, #56	; 0x38
 8003dec:	9400      	str	r4, [sp, #0]
 8003dee:	910d      	str	r1, [sp, #52]	; 0x34
 8003df0:	f7ff fa52 	bl	8003298 <get_components>
  return print_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
 8003df4:	ab14      	add	r3, sp, #80	; 0x50
 8003df6:	9308      	str	r3, [sp, #32]
 8003df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003dfa:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003dfc:	9307      	str	r3, [sp, #28]
 8003dfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003e00:	9109      	str	r1, [sp, #36]	; 0x24
 8003e02:	e9cd 4305 	strd	r4, r3, [sp, #20]
 8003e06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003e0a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8003e0e:	e9cd ab03 	strd	sl, fp, [sp, #12]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8003e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003e1c:	f7ff fad4 	bl	80033c8 <print_broken_up_decimal.isra.0>
}
 8003e20:	b01d      	add	sp, #116	; 0x74
 8003e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e28:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003e2a:	9329      	str	r3, [sp, #164]	; 0xa4
 8003e2c:	9428      	str	r4, [sp, #160]	; 0xa0
 8003e2e:	465b      	mov	r3, fp
 8003e30:	2404      	movs	r4, #4
 8003e32:	4652      	mov	r2, sl
 8003e34:	4649      	mov	r1, r9
 8003e36:	4640      	mov	r0, r8
 8003e38:	4d0f      	ldr	r5, [pc, #60]	; (8003e78 <print_floating_point+0x1e0>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003e3a:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8003e3c:	9526      	str	r5, [sp, #152]	; 0x98
}
 8003e3e:	b01d      	add	sp, #116	; 0x74
 8003e40:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003e44:	f7ff b8a2 	b.w	8002f8c <out_rev_>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 8003e48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003e4a:	2120      	movs	r1, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0ca      	beq.n	8003de6 <print_floating_point+0x14e>
 8003e50:	e7a5      	b.n	8003d9e <print_floating_point+0x106>
 8003e52:	bf00      	nop
 8003e54:	f3af 8000 	nop.w
 8003e58:	00000000 	.word	0x00000000
 8003e5c:	41cdcd65 	.word	0x41cdcd65
 8003e60:	00000000 	.word	0x00000000
 8003e64:	c1cdcd65 	.word	0xc1cdcd65
 8003e68:	7fefffff 	.word	0x7fefffff
 8003e6c:	08013b74 	.word	0x08013b74
 8003e70:	08013b70 	.word	0x08013b70
 8003e74:	08013b7c 	.word	0x08013b7c
 8003e78:	08013b80 	.word	0x08013b80

08003e7c <rt_vsnprintf>:
#if (RTTHREAD_VERSION >= 40100) || (RTTHREAD_VERSION < 40000 && RTTHREAD_VERSION >= 30106)
int rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#else
rt_int32_t rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#endif
{
 8003e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e80:	460d      	mov	r5, r1
 8003e82:	461f      	mov	r7, r3
    out = out_discard;
 8003e84:	1e01      	subs	r1, r0, #0
 8003e86:	4b9b      	ldr	r3, [pc, #620]	; (80040f4 <rt_vsnprintf+0x278>)
 8003e88:	4e9b      	ldr	r6, [pc, #620]	; (80040f8 <rt_vsnprintf+0x27c>)
  while (*format)
 8003e8a:	7810      	ldrb	r0, [r2, #0]
    out = out_discard;
 8003e8c:	bf0c      	ite	eq
 8003e8e:	469b      	moveq	fp, r3
 8003e90:	46b3      	movne	fp, r6
{
 8003e92:	462b      	mov	r3, r5
 8003e94:	b08f      	sub	sp, #60	; 0x3c
  while (*format)
 8003e96:	2800      	cmp	r0, #0
 8003e98:	f000 827a 	beq.w	8004390 <rt_vsnprintf+0x514>
 8003e9c:	4614      	mov	r4, r2
 8003e9e:	2500      	movs	r5, #0
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 8003ea0:	46ba      	mov	sl, r7
 8003ea2:	4688      	mov	r8, r1
 8003ea4:	4699      	mov	r9, r3
 8003ea6:	e009      	b.n	8003ebc <rt_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	464b      	mov	r3, r9
 8003eac:	4641      	mov	r1, r8
 8003eae:	47d8      	blx	fp
 8003eb0:	3501      	adds	r5, #1
      format++;
 8003eb2:	3401      	adds	r4, #1
  while (*format)
 8003eb4:	7820      	ldrb	r0, [r4, #0]
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	f000 80aa 	beq.w	8004010 <rt_vsnprintf+0x194>
    if (*format != '%') {
 8003ebc:	2825      	cmp	r0, #37	; 0x25
 8003ebe:	d1f3      	bne.n	8003ea8 <rt_vsnprintf+0x2c>
    flags = 0U;
 8003ec0:	2100      	movs	r1, #0
      format++;
 8003ec2:	1c63      	adds	r3, r4, #1
 8003ec4:	461c      	mov	r4, r3
      switch (*format) {
 8003ec6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003eca:	f1a0 0220 	sub.w	r2, r0, #32
 8003ece:	2a10      	cmp	r2, #16
 8003ed0:	d80a      	bhi.n	8003ee8 <rt_vsnprintf+0x6c>
 8003ed2:	e8df f002 	tbb	[pc, r2]
 8003ed6:	099a      	.short	0x099a
 8003ed8:	09099709 	.word	0x09099709
 8003edc:	09090909 	.word	0x09090909
 8003ee0:	91099409 	.word	0x91099409
 8003ee4:	0909      	.short	0x0909
 8003ee6:	8e          	.byte	0x8e
 8003ee7:	00          	.byte	0x00
    if (is_digit_(*format)) {
 8003ee8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003eec:	2b09      	cmp	r3, #9
 8003eee:	f240 80ab 	bls.w	8004048 <rt_vsnprintf+0x1cc>
    else if (*format == '*') {
 8003ef2:	282a      	cmp	r0, #42	; 0x2a
 8003ef4:	f000 80b5 	beq.w	8004062 <rt_vsnprintf+0x1e6>
    width = 0U;
 8003ef8:	2600      	movs	r6, #0
    if (*format == '.') {
 8003efa:	282e      	cmp	r0, #46	; 0x2e
 8003efc:	f000 8095 	beq.w	800402a <rt_vsnprintf+0x1ae>
    precision = 0U;
 8003f00:	2700      	movs	r7, #0
    switch (*format) {
 8003f02:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8003f06:	2b12      	cmp	r3, #18
 8003f08:	d818      	bhi.n	8003f3c <rt_vsnprintf+0xc0>
 8003f0a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f0e:	00fc      	.short	0x00fc
 8003f10:	00f70017 	.word	0x00f70017
 8003f14:	01040017 	.word	0x01040017
 8003f18:	00170017 	.word	0x00170017
 8003f1c:	00170017 	.word	0x00170017
 8003f20:	00170017 	.word	0x00170017
 8003f24:	00130017 	.word	0x00130017
 8003f28:	00170017 	.word	0x00170017
 8003f2c:	00170017 	.word	0x00170017
 8003f30:	00130017 	.word	0x00130017
    switch (*format) {
 8003f34:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003f36:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 8003f3a:	3401      	adds	r4, #1
    switch (*format) {
 8003f3c:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8003f40:	2b53      	cmp	r3, #83	; 0x53
 8003f42:	f200 8098 	bhi.w	8004076 <rt_vsnprintf+0x1fa>
 8003f46:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f4a:	0185      	.short	0x0185
 8003f4c:	00960096 	.word	0x00960096
 8003f50:	00960096 	.word	0x00960096
 8003f54:	00960096 	.word	0x00960096
 8003f58:	00960096 	.word	0x00960096
 8003f5c:	00960096 	.word	0x00960096
 8003f60:	00960096 	.word	0x00960096
 8003f64:	00960096 	.word	0x00960096
 8003f68:	00960096 	.word	0x00960096
 8003f6c:	00960096 	.word	0x00960096
 8003f70:	00960096 	.word	0x00960096
 8003f74:	00960096 	.word	0x00960096
 8003f78:	00960096 	.word	0x00960096
 8003f7c:	00960096 	.word	0x00960096
 8003f80:	00960096 	.word	0x00960096
 8003f84:	00960096 	.word	0x00960096
 8003f88:	019c0096 	.word	0x019c0096
 8003f8c:	019c00ee 	.word	0x019c00ee
 8003f90:	00960096 	.word	0x00960096
 8003f94:	00960096 	.word	0x00960096
 8003f98:	00960096 	.word	0x00960096
 8003f9c:	00960096 	.word	0x00960096
 8003fa0:	00960096 	.word	0x00960096
 8003fa4:	00960096 	.word	0x00960096
 8003fa8:	00960096 	.word	0x00960096
 8003fac:	00960096 	.word	0x00960096
 8003fb0:	0096009d 	.word	0x0096009d
 8003fb4:	00960096 	.word	0x00960096
 8003fb8:	00960096 	.word	0x00960096
 8003fbc:	00960096 	.word	0x00960096
 8003fc0:	00960096 	.word	0x00960096
 8003fc4:	0124009d 	.word	0x0124009d
 8003fc8:	019c009d 	.word	0x019c009d
 8003fcc:	019c00ee 	.word	0x019c00ee
 8003fd0:	009d0096 	.word	0x009d0096
 8003fd4:	00960096 	.word	0x00960096
 8003fd8:	00960096 	.word	0x00960096
 8003fdc:	009d0096 	.word	0x009d0096
 8003fe0:	00960108 	.word	0x00960108
 8003fe4:	013d0096 	.word	0x013d0096
 8003fe8:	009d0096 	.word	0x009d0096
 8003fec:	00960096 	.word	0x00960096
 8003ff0:	009d      	.short	0x009d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8003ff2:	f041 0101 	orr.w	r1, r1, #1
    } while (n);
 8003ff6:	e765      	b.n	8003ec4 <rt_vsnprintf+0x48>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003ff8:	f041 0102 	orr.w	r1, r1, #2
    } while (n);
 8003ffc:	e762      	b.n	8003ec4 <rt_vsnprintf+0x48>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003ffe:	f041 0104 	orr.w	r1, r1, #4
    } while (n);
 8004002:	e75f      	b.n	8003ec4 <rt_vsnprintf+0x48>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8004004:	f041 0110 	orr.w	r1, r1, #16
    } while (n);
 8004008:	e75c      	b.n	8003ec4 <rt_vsnprintf+0x48>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800400a:	f041 0108 	orr.w	r1, r1, #8
    } while (n);
 800400e:	e759      	b.n	8003ec4 <rt_vsnprintf+0x48>
  return (int)idx;
 8004010:	4641      	mov	r1, r8
 8004012:	464b      	mov	r3, r9
 8004014:	462c      	mov	r4, r5
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004016:	42ab      	cmp	r3, r5
 8004018:	d800      	bhi.n	800401c <rt_vsnprintf+0x1a0>
 800401a:	1e5d      	subs	r5, r3, #1
 800401c:	462a      	mov	r2, r5
 800401e:	2000      	movs	r0, #0
 8004020:	47d8      	blx	fp
  return __vsnprintf(out_buffer, buf, size, fmt, args);
}
 8004022:	4620      	mov	r0, r4
 8004024:	b00f      	add	sp, #60	; 0x3c
 8004026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (is_digit_(*format)) {
 800402a:	7860      	ldrb	r0, [r4, #1]
      flags |= FLAGS_PRECISION;
 800402c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      if (is_digit_(*format)) {
 8004030:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8004034:	2a09      	cmp	r2, #9
      format++;
 8004036:	f104 0301 	add.w	r3, r4, #1
      if (is_digit_(*format)) {
 800403a:	f240 8114 	bls.w	8004266 <rt_vsnprintf+0x3ea>
      else if (*format == '*') {
 800403e:	282a      	cmp	r0, #42	; 0x2a
 8004040:	f000 8136 	beq.w	80042b0 <rt_vsnprintf+0x434>
      format++;
 8004044:	461c      	mov	r4, r3
 8004046:	e75b      	b.n	8003f00 <rt_vsnprintf+0x84>
  unsigned int i = 0U;
 8004048:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800404a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800404e:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  while (is_digit_(**str)) {
 8004052:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004056:	3e30      	subs	r6, #48	; 0x30
  while (is_digit_(**str)) {
 8004058:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800405c:	2b09      	cmp	r3, #9
 800405e:	d9f4      	bls.n	800404a <rt_vsnprintf+0x1ce>
 8004060:	e74b      	b.n	8003efa <rt_vsnprintf+0x7e>
      const int w = va_arg(va, int);
 8004062:	f85a 6b04 	ldr.w	r6, [sl], #4
    if (*format == '.') {
 8004066:	7860      	ldrb	r0, [r4, #1]
      if (w < 0) {
 8004068:	2e00      	cmp	r6, #0
        flags |= FLAGS_LEFT;    // reverse padding
 800406a:	bfbc      	itt	lt
 800406c:	f041 0102 	orrlt.w	r1, r1, #2
        width = (unsigned int)-w;
 8004070:	4276      	neglt	r6, r6
      format++;
 8004072:	3401      	adds	r4, #1
 8004074:	e741      	b.n	8003efa <rt_vsnprintf+0x7e>
        out(*format, buffer, idx++, maxlen);
 8004076:	462a      	mov	r2, r5
 8004078:	464b      	mov	r3, r9
 800407a:	4641      	mov	r1, r8
        format++;
 800407c:	3401      	adds	r4, #1
        out(*format, buffer, idx++, maxlen);
 800407e:	3501      	adds	r5, #1
 8004080:	47d8      	blx	fp
        break;
 8004082:	e717      	b.n	8003eb4 <rt_vsnprintf+0x38>
        if (*format == 'x' || *format == 'X') {
 8004084:	2878      	cmp	r0, #120	; 0x78
 8004086:	f000 812b 	beq.w	80042e0 <rt_vsnprintf+0x464>
 800408a:	2858      	cmp	r0, #88	; 0x58
 800408c:	f000 8183 	beq.w	8004396 <rt_vsnprintf+0x51a>
        else if (*format == 'o') {
 8004090:	286f      	cmp	r0, #111	; 0x6f
 8004092:	f000 81a4 	beq.w	80043de <rt_vsnprintf+0x562>
        else if (*format == 'b') {
 8004096:	2862      	cmp	r0, #98	; 0x62
 8004098:	f000 8202 	beq.w	80044a0 <rt_vsnprintf+0x624>
        if ((*format != 'i') && (*format != 'd')) {
 800409c:	2869      	cmp	r0, #105	; 0x69
          base = BASE_DECIMAL;
 800409e:	f04f 020a 	mov.w	r2, #10
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80040a2:	f021 0310 	bic.w	r3, r1, #16
        if ((*format != 'i') && (*format != 'd')) {
 80040a6:	f040 819c 	bne.w	80043e2 <rt_vsnprintf+0x566>
        if (flags & FLAGS_PRECISION) {
 80040aa:	0549      	lsls	r1, r1, #21
 80040ac:	f100 811d 	bmi.w	80042ea <rt_vsnprintf+0x46e>
          if (flags & FLAGS_LONG_LONG) {
 80040b0:	0599      	lsls	r1, r3, #22
 80040b2:	f100 819f 	bmi.w	80043f4 <rt_vsnprintf+0x578>
          else if (flags & FLAGS_LONG) {
 80040b6:	05d8      	lsls	r0, r3, #23
            const long value = va_arg(va, long);
 80040b8:	f85a 1b04 	ldr.w	r1, [sl], #4
          else if (flags & FLAGS_LONG) {
 80040bc:	d403      	bmi.n	80040c6 <rt_vsnprintf+0x24a>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80040be:	0658      	lsls	r0, r3, #25
 80040c0:	f140 81b0 	bpl.w	8004424 <rt_vsnprintf+0x5a8>
 80040c4:	b249      	sxtb	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80040c6:	2900      	cmp	r1, #0
 80040c8:	f340 81ce 	ble.w	8004468 <rt_vsnprintf+0x5ec>
 80040cc:	468c      	mov	ip, r1
 80040ce:	17c8      	asrs	r0, r1, #31
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 80040d0:	e9cd 2703 	strd	r2, r7, [sp, #12]
 80040d4:	462a      	mov	r2, r5
 80040d6:	e9cd 6305 	strd	r6, r3, [sp, #20]
 80040da:	e9cd c000 	strd	ip, r0, [sp]
 80040de:	0fc9      	lsrs	r1, r1, #31
 80040e0:	9102      	str	r1, [sp, #8]
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 80040e2:	464b      	mov	r3, r9
 80040e4:	4641      	mov	r1, r8
 80040e6:	4658      	mov	r0, fp
 80040e8:	f7fe ff94 	bl	8003014 <print_integer>
 80040ec:	4605      	mov	r5, r0
        format++;
 80040ee:	3401      	adds	r4, #1
        break;
 80040f0:	e6e0      	b.n	8003eb4 <rt_vsnprintf+0x38>
 80040f2:	bf00      	nop
 80040f4:	08002f89 	.word	0x08002f89
 80040f8:	08002f81 	.word	0x08002f81
    switch (*format) {
 80040fc:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80040fe:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        format++;
 8004102:	3401      	adds	r4, #1
        break;
 8004104:	e71a      	b.n	8003f3c <rt_vsnprintf+0xc0>
        if (*format == 'h') {
 8004106:	7860      	ldrb	r0, [r4, #1]
 8004108:	2868      	cmp	r0, #104	; 0x68
 800410a:	f000 8137 	beq.w	800437c <rt_vsnprintf+0x500>
        flags |= FLAGS_SHORT;
 800410e:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        format++;
 8004112:	3401      	adds	r4, #1
 8004114:	e712      	b.n	8003f3c <rt_vsnprintf+0xc0>
        if (*format == 'l') {
 8004116:	7860      	ldrb	r0, [r4, #1]
 8004118:	286c      	cmp	r0, #108	; 0x6c
 800411a:	f000 8134 	beq.w	8004386 <rt_vsnprintf+0x50a>
        flags |= FLAGS_LONG;
 800411e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 8004122:	3401      	adds	r4, #1
 8004124:	e70a      	b.n	8003f3c <rt_vsnprintf+0xc0>
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8004126:	462a      	mov	r2, r5
 8004128:	2300      	movs	r3, #0
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800412a:	2846      	cmp	r0, #70	; 0x46
 800412c:	bf08      	it	eq
 800412e:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8004132:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8004136:	f10a 0a07 	add.w	sl, sl, #7
 800413a:	9702      	str	r7, [sp, #8]
 800413c:	f02a 0a07 	bic.w	sl, sl, #7
        format++;
 8004140:	3401      	adds	r4, #1
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8004142:	9305      	str	r3, [sp, #20]
 8004144:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 8004148:	464b      	mov	r3, r9
 800414a:	4641      	mov	r1, r8
 800414c:	4658      	mov	r0, fp
 800414e:	e9cd 6700 	strd	r6, r7, [sp]
 8004152:	f7ff fda1 	bl	8003c98 <print_floating_point>
 8004156:	4605      	mov	r5, r0
        break;
 8004158:	e6ac      	b.n	8003eb4 <rt_vsnprintf+0x38>
        uintptr_t value = (uintptr_t)va_arg(va, void*);
 800415a:	f85a 3b04 	ldr.w	r3, [sl], #4
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 800415e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004162:	f041 0101 	orr.w	r1, r1, #1
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 80e6 	beq.w	8004338 <rt_vsnprintf+0x4bc>
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	2300      	movs	r3, #0
 8004170:	9106      	str	r1, [sp, #24]
 8004172:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004176:	210a      	movs	r1, #10
 8004178:	2310      	movs	r3, #16
 800417a:	462a      	mov	r2, r5
 800417c:	9105      	str	r1, [sp, #20]
 800417e:	9303      	str	r3, [sp, #12]
 8004180:	4641      	mov	r1, r8
 8004182:	464b      	mov	r3, r9
 8004184:	4658      	mov	r0, fp
 8004186:	9704      	str	r7, [sp, #16]
 8004188:	f7fe ff44 	bl	8003014 <print_integer>
        format++;
 800418c:	3401      	adds	r4, #1
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 800418e:	4605      	mov	r5, r0
        break;
 8004190:	e690      	b.n	8003eb4 <rt_vsnprintf+0x38>
        if (!(flags & FLAGS_LEFT)) {
 8004192:	078f      	lsls	r7, r1, #30
 8004194:	f140 810d 	bpl.w	80043b2 <rt_vsnprintf+0x536>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004198:	f85a 0b04 	ldr.w	r0, [sl], #4
 800419c:	462a      	mov	r2, r5
 800419e:	464b      	mov	r3, r9
 80041a0:	4641      	mov	r1, r8
 80041a2:	b2c0      	uxtb	r0, r0
 80041a4:	47d8      	blx	fp
 80041a6:	1c6f      	adds	r7, r5, #1
          while (l++ < width) {
 80041a8:	2e01      	cmp	r6, #1
 80041aa:	bf98      	it	ls
 80041ac:	463d      	movls	r5, r7
 80041ae:	d99e      	bls.n	80040ee <rt_vsnprintf+0x272>
 80041b0:	4435      	add	r5, r6
            out(' ', buffer, idx++, maxlen);
 80041b2:	463a      	mov	r2, r7
 80041b4:	464b      	mov	r3, r9
 80041b6:	4641      	mov	r1, r8
 80041b8:	2020      	movs	r0, #32
 80041ba:	3701      	adds	r7, #1
 80041bc:	47d8      	blx	fp
          while (l++ < width) {
 80041be:	42af      	cmp	r7, r5
 80041c0:	d1f7      	bne.n	80041b2 <rt_vsnprintf+0x336>
 80041c2:	e794      	b.n	80040ee <rt_vsnprintf+0x272>
        const char* p = va_arg(va, char*);
 80041c4:	4653      	mov	r3, sl
 80041c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ca:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
        if (p == NULL) {
 80041ce:	2a00      	cmp	r2, #0
 80041d0:	d075      	beq.n	80042be <rt_vsnprintf+0x442>
  for (s = str; *s && maxsize--; ++s);
 80041d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d4:	7818      	ldrb	r0, [r3, #0]
          unsigned int l = strnlen_s_(p, precision ? precision : (size_t)-1);
 80041d6:	2f00      	cmp	r7, #0
 80041d8:	f040 80e6 	bne.w	80043a8 <rt_vsnprintf+0x52c>
  for (s = str; *s && maxsize--; ++s);
 80041dc:	f06f 0301 	mvn.w	r3, #1
 80041e0:	2800      	cmp	r0, #0
 80041e2:	f000 8174 	beq.w	80044ce <rt_vsnprintf+0x652>
 80041e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80041e8:	3301      	adds	r3, #1
 80041ea:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80041ee:	441a      	add	r2, r3
 80041f0:	e001      	b.n	80041f6 <rt_vsnprintf+0x37a>
 80041f2:	4592      	cmp	sl, r2
 80041f4:	d003      	beq.n	80041fe <rt_vsnprintf+0x382>
 80041f6:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f9      	bne.n	80041f2 <rt_vsnprintf+0x376>
  return (unsigned int)(s - str);
 80041fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004200:	ebaa 0303 	sub.w	r3, sl, r3
 8004204:	930b      	str	r3, [sp, #44]	; 0x2c
          if (flags & FLAGS_PRECISION) {
 8004206:	f411 6380 	ands.w	r3, r1, #1024	; 0x400
 800420a:	930c      	str	r3, [sp, #48]	; 0x30
 800420c:	d004      	beq.n	8004218 <rt_vsnprintf+0x39c>
            l = (l < precision ? l : precision);
 800420e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004210:	42bb      	cmp	r3, r7
 8004212:	bf28      	it	cs
 8004214:	463b      	movcs	r3, r7
 8004216:	930b      	str	r3, [sp, #44]	; 0x2c
          if (!(flags & FLAGS_LEFT)) {
 8004218:	f011 0302 	ands.w	r3, r1, #2
 800421c:	930d      	str	r3, [sp, #52]	; 0x34
 800421e:	f000 810a 	beq.w	8004436 <rt_vsnprintf+0x5ba>
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004222:	2800      	cmp	r0, #0
 8004224:	f000 809b 	beq.w	800435e <rt_vsnprintf+0x4e2>
 8004228:	462a      	mov	r2, r5
 800422a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800422e:	9409      	str	r4, [sp, #36]	; 0x24
 8004230:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004232:	b124      	cbz	r4, 800423e <rt_vsnprintf+0x3c2>
 8004234:	1e7b      	subs	r3, r7, #1
 8004236:	2f00      	cmp	r7, #0
 8004238:	f000 808d 	beq.w	8004356 <rt_vsnprintf+0x4da>
 800423c:	461f      	mov	r7, r3
            out(*(p++), buffer, idx++, maxlen);
 800423e:	464b      	mov	r3, r9
 8004240:	4641      	mov	r1, r8
 8004242:	47d8      	blx	fp
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004244:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
            out(*(p++), buffer, idx++, maxlen);
 8004248:	3501      	adds	r5, #1
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800424a:	2800      	cmp	r0, #0
 800424c:	f000 8083 	beq.w	8004356 <rt_vsnprintf+0x4da>
            out(*(p++), buffer, idx++, maxlen);
 8004250:	462a      	mov	r2, r5
 8004252:	e7ee      	b.n	8004232 <rt_vsnprintf+0x3b6>
        out('%', buffer, idx++, maxlen);
 8004254:	1c68      	adds	r0, r5, #1
 8004256:	462a      	mov	r2, r5
 8004258:	464b      	mov	r3, r9
 800425a:	4605      	mov	r5, r0
 800425c:	4641      	mov	r1, r8
 800425e:	2025      	movs	r0, #37	; 0x25
        format++;
 8004260:	3401      	adds	r4, #1
        out('%', buffer, idx++, maxlen);
 8004262:	47d8      	blx	fp
        break;
 8004264:	e626      	b.n	8003eb4 <rt_vsnprintf+0x38>
  unsigned int i = 0U;
 8004266:	2700      	movs	r7, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004268:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800426c:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  while (is_digit_(**str)) {
 8004270:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004274:	3f30      	subs	r7, #48	; 0x30
  while (is_digit_(**str)) {
 8004276:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800427a:	2a09      	cmp	r2, #9
 800427c:	d9f4      	bls.n	8004268 <rt_vsnprintf+0x3ec>
 800427e:	461c      	mov	r4, r3
 8004280:	e63f      	b.n	8003f02 <rt_vsnprintf+0x86>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8004282:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8004286:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004288:	bf04      	itt	eq
 800428a:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800428e:	f441 6100 	orreq.w	r1, r1, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8004292:	2845      	cmp	r0, #69	; 0x45
 8004294:	bf08      	it	eq
 8004296:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 800429a:	f10a 0a07 	add.w	sl, sl, #7
 800429e:	462a      	mov	r2, r5
 80042a0:	2301      	movs	r3, #1
 80042a2:	e9cd 6103 	strd	r6, r1, [sp, #12]
 80042a6:	9702      	str	r7, [sp, #8]
 80042a8:	f02a 0a07 	bic.w	sl, sl, #7
        format++;
 80042ac:	3401      	adds	r4, #1
 80042ae:	e748      	b.n	8004142 <rt_vsnprintf+0x2c6>
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 80042b0:	f85a 7b04 	ldr.w	r7, [sl], #4
    switch (*format) {
 80042b4:	78a0      	ldrb	r0, [r4, #2]
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 80042b6:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
        format++;
 80042ba:	3402      	adds	r4, #2
 80042bc:	e621      	b.n	8003f02 <rt_vsnprintf+0x86>
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 80042be:	4b88      	ldr	r3, [pc, #544]	; (80044e0 <rt_vsnprintf+0x664>)
 80042c0:	462a      	mov	r2, r5
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2306      	movs	r3, #6
 80042c6:	e9cd 6102 	strd	r6, r1, [sp, #8]
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	4641      	mov	r1, r8
 80042ce:	464b      	mov	r3, r9
 80042d0:	4658      	mov	r0, fp
 80042d2:	f7fe fe5b 	bl	8002f8c <out_rev_>
 80042d6:	4605      	mov	r5, r0
        const char* p = va_arg(va, char*);
 80042d8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        format++;
 80042dc:	3401      	adds	r4, #1
        break;
 80042de:	e5e9      	b.n	8003eb4 <rt_vsnprintf+0x38>
          base = BASE_HEX;
 80042e0:	2210      	movs	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80042e2:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 80042e6:	0549      	lsls	r1, r1, #21
 80042e8:	d501      	bpl.n	80042ee <rt_vsnprintf+0x472>
          flags &= ~FLAGS_ZEROPAD;
 80042ea:	f023 0301 	bic.w	r3, r3, #1
        if ((*format == 'i') || (*format == 'd')) {
 80042ee:	2869      	cmp	r0, #105	; 0x69
 80042f0:	f43f aede 	beq.w	80040b0 <rt_vsnprintf+0x234>
 80042f4:	2864      	cmp	r0, #100	; 0x64
 80042f6:	f43f aedb 	beq.w	80040b0 <rt_vsnprintf+0x234>
          if (flags & FLAGS_LONG_LONG) {
 80042fa:	f413 7c00 	ands.w	ip, r3, #512	; 0x200
 80042fe:	f040 80b9 	bne.w	8004474 <rt_vsnprintf+0x5f8>
          else if (flags & FLAGS_LONG) {
 8004302:	05d9      	lsls	r1, r3, #23
 8004304:	f100 80cf 	bmi.w	80044a6 <rt_vsnprintf+0x62a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004308:	0658      	lsls	r0, r3, #25
 800430a:	f85a 1b04 	ldr.w	r1, [sl], #4
 800430e:	f100 8087 	bmi.w	8004420 <rt_vsnprintf+0x5a4>
 8004312:	0618      	lsls	r0, r3, #24
 8004314:	bf48      	it	mi
 8004316:	b289      	uxthmi	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 8004318:	e9cd 2703 	strd	r2, r7, [sp, #12]
 800431c:	462a      	mov	r2, r5
 800431e:	2500      	movs	r5, #0
 8004320:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8004324:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8004328:	9100      	str	r1, [sp, #0]
 800432a:	464b      	mov	r3, r9
 800432c:	4641      	mov	r1, r8
 800432e:	4658      	mov	r0, fp
 8004330:	f7fe fe70 	bl	8003014 <print_integer>
 8004334:	4605      	mov	r5, r0
        format++;
 8004336:	e6da      	b.n	80040ee <rt_vsnprintf+0x272>
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8004338:	4b6a      	ldr	r3, [pc, #424]	; (80044e4 <rt_vsnprintf+0x668>)
 800433a:	200a      	movs	r0, #10
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	2305      	movs	r3, #5
 8004340:	462a      	mov	r2, r5
 8004342:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8004346:	9103      	str	r1, [sp, #12]
 8004348:	464b      	mov	r3, r9
 800434a:	4641      	mov	r1, r8
 800434c:	4658      	mov	r0, fp
 800434e:	f7fe fe1d 	bl	8002f8c <out_rev_>
 8004352:	4605      	mov	r5, r0
 8004354:	e6cb      	b.n	80040ee <rt_vsnprintf+0x272>
          if (flags & FLAGS_LEFT) {
 8004356:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004358:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0bc      	beq.n	80042d8 <rt_vsnprintf+0x45c>
            while (l++ < width) {
 800435e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004360:	462f      	mov	r7, r5
 8004362:	429e      	cmp	r6, r3
 8004364:	d9b8      	bls.n	80042d8 <rt_vsnprintf+0x45c>
 8004366:	1970      	adds	r0, r6, r5
 8004368:	1ac5      	subs	r5, r0, r3
              out(' ', buffer, idx++, maxlen);
 800436a:	463a      	mov	r2, r7
 800436c:	464b      	mov	r3, r9
 800436e:	4641      	mov	r1, r8
 8004370:	2020      	movs	r0, #32
 8004372:	3701      	adds	r7, #1
 8004374:	47d8      	blx	fp
            while (l++ < width) {
 8004376:	42af      	cmp	r7, r5
 8004378:	d1f7      	bne.n	800436a <rt_vsnprintf+0x4ee>
 800437a:	e7ad      	b.n	80042d8 <rt_vsnprintf+0x45c>
    switch (*format) {
 800437c:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_CHAR;
 800437e:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
          format++;
 8004382:	3402      	adds	r4, #2
 8004384:	e5da      	b.n	8003f3c <rt_vsnprintf+0xc0>
    switch (*format) {
 8004386:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_LONG_LONG;
 8004388:	f441 7140 	orr.w	r1, r1, #768	; 0x300
          format++;
 800438c:	3402      	adds	r4, #2
 800438e:	e5d5      	b.n	8003f3c <rt_vsnprintf+0xc0>
  while (*format)
 8004390:	4604      	mov	r4, r0
 8004392:	4605      	mov	r5, r0
 8004394:	e63f      	b.n	8004016 <rt_vsnprintf+0x19a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004396:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 800439a:	0549      	lsls	r1, r1, #21
          base = BASE_HEX;
 800439c:	f04f 0210 	mov.w	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80043a0:	f043 0320 	orr.w	r3, r3, #32
        if (flags & FLAGS_PRECISION) {
 80043a4:	d4a1      	bmi.n	80042ea <rt_vsnprintf+0x46e>
 80043a6:	e7a8      	b.n	80042fa <rt_vsnprintf+0x47e>
  for (s = str; *s && maxsize--; ++s);
 80043a8:	2800      	cmp	r0, #0
 80043aa:	f000 8097 	beq.w	80044dc <rt_vsnprintf+0x660>
 80043ae:	1e7b      	subs	r3, r7, #1
 80043b0:	e719      	b.n	80041e6 <rt_vsnprintf+0x36a>
          while (l++ < width) {
 80043b2:	2e01      	cmp	r6, #1
 80043b4:	f240 8089 	bls.w	80044ca <rt_vsnprintf+0x64e>
 80043b8:	1e6b      	subs	r3, r5, #1
 80043ba:	441e      	add	r6, r3
            out(' ', buffer, idx++, maxlen);
 80043bc:	462a      	mov	r2, r5
 80043be:	464b      	mov	r3, r9
 80043c0:	4641      	mov	r1, r8
 80043c2:	2020      	movs	r0, #32
 80043c4:	3501      	adds	r5, #1
 80043c6:	47d8      	blx	fp
          while (l++ < width) {
 80043c8:	42b5      	cmp	r5, r6
 80043ca:	d1f7      	bne.n	80043bc <rt_vsnprintf+0x540>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80043cc:	f85a 0b04 	ldr.w	r0, [sl], #4
 80043d0:	464b      	mov	r3, r9
 80043d2:	4632      	mov	r2, r6
 80043d4:	4641      	mov	r1, r8
 80043d6:	b2c0      	uxtb	r0, r0
 80043d8:	1c75      	adds	r5, r6, #1
 80043da:	47d8      	blx	fp
        if (flags & FLAGS_LEFT) {
 80043dc:	e687      	b.n	80040ee <rt_vsnprintf+0x272>
          base =  BASE_OCTAL;
 80043de:	2208      	movs	r2, #8
          format++;
 80043e0:	460b      	mov	r3, r1
        if ((*format != 'i') && (*format != 'd')) {
 80043e2:	2864      	cmp	r0, #100	; 0x64
 80043e4:	bf18      	it	ne
 80043e6:	4619      	movne	r1, r3
 80043e8:	f47f af7b 	bne.w	80042e2 <rt_vsnprintf+0x466>
        if (flags & FLAGS_PRECISION) {
 80043ec:	0559      	lsls	r1, r3, #21
 80043ee:	f53f af7c 	bmi.w	80042ea <rt_vsnprintf+0x46e>
 80043f2:	e65d      	b.n	80040b0 <rt_vsnprintf+0x234>
            const long long value = va_arg(va, long long);
 80043f4:	f10a 0a07 	add.w	sl, sl, #7
 80043f8:	f02a 0a07 	bic.w	sl, sl, #7
 80043fc:	f8da 1004 	ldr.w	r1, [sl, #4]
 8004400:	f85a 0b08 	ldr.w	r0, [sl], #8
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004404:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 8004408:	2900      	cmp	r1, #0
 800440a:	e9cd 6305 	strd	r6, r3, [sp, #20]
 800440e:	e9cd 2703 	strd	r2, r7, [sp, #12]
 8004412:	f8cd c008 	str.w	ip, [sp, #8]
 8004416:	db09      	blt.n	800442c <rt_vsnprintf+0x5b0>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004418:	462a      	mov	r2, r5
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800441a:	e9cd 0100 	strd	r0, r1, [sp]
 800441e:	e660      	b.n	80040e2 <rt_vsnprintf+0x266>
 8004420:	b2c9      	uxtb	r1, r1
 8004422:	e779      	b.n	8004318 <rt_vsnprintf+0x49c>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004424:	0618      	lsls	r0, r3, #24
 8004426:	bf48      	it	mi
 8004428:	b209      	sxthmi	r1, r1
 800442a:	e64c      	b.n	80040c6 <rt_vsnprintf+0x24a>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 800442c:	4243      	negs	r3, r0
 800442e:	4618      	mov	r0, r3
 8004430:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004434:	e7f0      	b.n	8004418 <rt_vsnprintf+0x59c>
            while (l++ < width) {
 8004436:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004438:	4296      	cmp	r6, r2
 800443a:	f102 0301 	add.w	r3, r2, #1
 800443e:	d948      	bls.n	80044d2 <rt_vsnprintf+0x656>
 8004440:	eb06 0a05 	add.w	sl, r6, r5
 8004444:	ebaa 0a02 	sub.w	sl, sl, r2
              out(' ', buffer, idx++, maxlen);
 8004448:	462a      	mov	r2, r5
 800444a:	464b      	mov	r3, r9
 800444c:	4641      	mov	r1, r8
 800444e:	2020      	movs	r0, #32
 8004450:	3501      	adds	r5, #1
 8004452:	47d8      	blx	fp
            while (l++ < width) {
 8004454:	4555      	cmp	r5, sl
 8004456:	d1f7      	bne.n	8004448 <rt_vsnprintf+0x5cc>
 8004458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800445a:	7818      	ldrb	r0, [r3, #0]
 800445c:	1c73      	adds	r3, r6, #1
 800445e:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004460:	2800      	cmp	r0, #0
 8004462:	f47f aee1 	bne.w	8004228 <rt_vsnprintf+0x3ac>
 8004466:	e737      	b.n	80042d8 <rt_vsnprintf+0x45c>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8004468:	17c8      	asrs	r0, r1, #31
 800446a:	f1d1 0c00 	rsbs	ip, r1, #0
 800446e:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8004472:	e62d      	b.n	80040d0 <rt_vsnprintf+0x254>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
 8004474:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8004478:	2300      	movs	r3, #0
 800447a:	e9cd 2703 	strd	r2, r7, [sp, #12]
 800447e:	f10a 0a07 	add.w	sl, sl, #7
 8004482:	9302      	str	r3, [sp, #8]
 8004484:	f02a 0a07 	bic.w	sl, sl, #7
 8004488:	462a      	mov	r2, r5
 800448a:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 800448e:	464b      	mov	r3, r9
 8004490:	4641      	mov	r1, r8
 8004492:	4658      	mov	r0, fp
 8004494:	e9cd 6700 	strd	r6, r7, [sp]
 8004498:	f7fe fdbc 	bl	8003014 <print_integer>
 800449c:	4605      	mov	r5, r0
 800449e:	e626      	b.n	80040ee <rt_vsnprintf+0x272>
          base =  BASE_BINARY;
 80044a0:	2202      	movs	r2, #2
          format++;
 80044a2:	460b      	mov	r3, r1
 80044a4:	e79d      	b.n	80043e2 <rt_vsnprintf+0x566>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
 80044a6:	e9cd 6305 	strd	r6, r3, [sp, #20]
 80044aa:	e9cd 2703 	strd	r2, r7, [sp, #12]
 80044ae:	f8cd c008 	str.w	ip, [sp, #8]
 80044b2:	462a      	mov	r2, r5
 80044b4:	f85a 5b04 	ldr.w	r5, [sl], #4
 80044b8:	464b      	mov	r3, r9
 80044ba:	e9cd 5c00 	strd	r5, ip, [sp]
 80044be:	4641      	mov	r1, r8
 80044c0:	4658      	mov	r0, fp
 80044c2:	f7fe fda7 	bl	8003014 <print_integer>
 80044c6:	4605      	mov	r5, r0
 80044c8:	e611      	b.n	80040ee <rt_vsnprintf+0x272>
          while (l++ < width) {
 80044ca:	462e      	mov	r6, r5
 80044cc:	e77e      	b.n	80043cc <rt_vsnprintf+0x550>
  for (s = str; *s && maxsize--; ++s);
 80044ce:	970b      	str	r7, [sp, #44]	; 0x2c
 80044d0:	e699      	b.n	8004206 <rt_vsnprintf+0x38a>
            while (l++ < width) {
 80044d2:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80044d4:	2800      	cmp	r0, #0
 80044d6:	f47f aea7 	bne.w	8004228 <rt_vsnprintf+0x3ac>
 80044da:	e6fd      	b.n	80042d8 <rt_vsnprintf+0x45c>
  for (s = str; *s && maxsize--; ++s);
 80044dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80044de:	e692      	b.n	8004206 <rt_vsnprintf+0x38a>
 80044e0:	08013b88 	.word	0x08013b88
 80044e4:	08013b90 	.word	0x08013b90

080044e8 <LCD_WritePara.isra.0>:
    LCD_SetCmdLine();
    return SPI_WriteDatas(&cmd, 1);
}

/* 给SPI LCD发送1个参数,通常是先调用LCD_WriteCmd,再调用LCD_WritePara */
static int LCD_WritePara(uint8_t data)
 80044e8:	4603      	mov	r3, r0
 80044ea:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 80044ec:	4c0f      	ldr	r4, [pc, #60]	; (800452c <LCD_WritePara.isra.0+0x44>)
static int LCD_WritePara(uint8_t data)
 80044ee:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 80044f0:	4620      	mov	r0, r4
 80044f2:	2201      	movs	r2, #1
 80044f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WritePara(uint8_t data)
 80044f8:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 80044fc:	f001 f8a2 	bl	8005644 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8004500:	4620      	mov	r0, r4
 8004502:	2200      	movs	r2, #0
 8004504:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004508:	f001 f89c 	bl	8005644 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 800450c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004510:	f10d 0107 	add.w	r1, sp, #7
 8004514:	2201      	movs	r2, #1
 8004516:	4806      	ldr	r0, [pc, #24]	; (8004530 <LCD_WritePara.isra.0+0x48>)
 8004518:	f005 fe0c 	bl	800a134 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 800451c:	2201      	movs	r2, #1
 800451e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004522:	4620      	mov	r0, r4
 8004524:	f001 f88e 	bl	8005644 <HAL_GPIO_WritePin>
{
    LCD_SetDataLine();
    return SPI_WriteDatas(&data, 1);
}
 8004528:	b002      	add	sp, #8
 800452a:	bd10      	pop	{r4, pc}
 800452c:	42020c00 	.word	0x42020c00
 8004530:	20000bb4 	.word	0x20000bb4

08004534 <LCD_WriteCmd.isra.0>:
static int LCD_WriteCmd(uint8_t cmd)
 8004534:	4603      	mov	r3, r0
 8004536:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8004538:	4c0f      	ldr	r4, [pc, #60]	; (8004578 <LCD_WriteCmd.isra.0+0x44>)
static int LCD_WriteCmd(uint8_t cmd)
 800453a:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 800453c:	4620      	mov	r0, r4
 800453e:	2200      	movs	r2, #0
 8004540:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WriteCmd(uint8_t cmd)
 8004544:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8004548:	f001 f87c 	bl	8005644 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 800454c:	4620      	mov	r0, r4
 800454e:	2200      	movs	r2, #0
 8004550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004554:	f001 f876 	bl	8005644 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8004558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800455c:	f10d 0107 	add.w	r1, sp, #7
 8004560:	2201      	movs	r2, #1
 8004562:	4806      	ldr	r0, [pc, #24]	; (800457c <LCD_WriteCmd.isra.0+0x48>)
 8004564:	f005 fde6 	bl	800a134 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8004568:	2201      	movs	r2, #1
 800456a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800456e:	4620      	mov	r0, r4
 8004570:	f001 f868 	bl	8005644 <HAL_GPIO_WritePin>
}
 8004574:	b002      	add	sp, #8
 8004576:	bd10      	pop	{r4, pc}
 8004578:	42020c00 	.word	0x42020c00
 800457c:	20000bb4 	.word	0x20000bb4

08004580 <LCD_SetDataLine>:
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8004580:	2201      	movs	r2, #1
 8004582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004586:	4801      	ldr	r0, [pc, #4]	; (800458c <LCD_SetDataLine+0xc>)
 8004588:	f001 b85c 	b.w	8005644 <HAL_GPIO_WritePin>
 800458c:	42020c00 	.word	0x42020c00

08004590 <LCD_WriteDatas>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int LCD_WriteDatas(uint8_t *datas, uint32_t count)
{
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4605      	mov	r5, r0
 8004594:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8004596:	4e0b      	ldr	r6, [pc, #44]	; (80045c4 <LCD_WriteDatas+0x34>)
 8004598:	2200      	movs	r2, #0
 800459a:	4630      	mov	r0, r6
 800459c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045a0:	f001 f850 	bl	8005644 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 80045a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045a8:	4629      	mov	r1, r5
 80045aa:	b2a2      	uxth	r2, r4
 80045ac:	4806      	ldr	r0, [pc, #24]	; (80045c8 <LCD_WriteDatas+0x38>)
 80045ae:	f005 fdc1 	bl	800a134 <HAL_SPI_Transmit>
 80045b2:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 80045b4:	2201      	movs	r2, #1
 80045b6:	4630      	mov	r0, r6
 80045b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045bc:	f001 f842 	bl	8005644 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);  /* 由调用者设置RS引脚 */
    return SPI_WriteDatas(datas, count);
}
 80045c0:	4260      	negs	r0, r4
 80045c2:	bd70      	pop	{r4, r5, r6, pc}
 80045c4:	42020c00 	.word	0x42020c00
 80045c8:	20000bb4 	.word	0x20000bb4

080045cc <LCD_Init>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_Init(lcd_display_rotation_t rotation)
{       
 80045cc:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 80045ce:	2200      	movs	r2, #0
 80045d0:	2110      	movs	r1, #16
{       
 80045d2:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 80045d4:	4893      	ldr	r0, [pc, #588]	; (8004824 <LCD_Init+0x258>)
 80045d6:	f001 f835 	bl	8005644 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80045da:	2064      	movs	r0, #100	; 0x64
 80045dc:	f000 fa72 	bl	8004ac4 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_SET);
 80045e0:	2201      	movs	r2, #1
 80045e2:	2110      	movs	r1, #16
 80045e4:	488f      	ldr	r0, [pc, #572]	; (8004824 <LCD_Init+0x258>)
 80045e6:	f001 f82d 	bl	8005644 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80045ea:	2064      	movs	r0, #100	; 0x64
 80045ec:	f000 fa6a 	bl	8004ac4 <HAL_Delay>
        HAL_GPIO_WritePin(PWM_GPIO_Port,PWM_Pin,GPIO_PIN_SET);
 80045f0:	2201      	movs	r2, #1
 80045f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045f6:	488b      	ldr	r0, [pc, #556]	; (8004824 <LCD_Init+0x258>)
 80045f8:	f001 f824 	bl	8005644 <HAL_GPIO_WritePin>
    LCD_Reset();    
    LCD_BackLightControl(1);
    
#if 1   
    // Positive Gamma Control
    LCD_WriteCmd( 0xe0);
 80045fc:	20e0      	movs	r0, #224	; 0xe0
 80045fe:	f7ff ff99 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xf0);
 8004602:	20f0      	movs	r0, #240	; 0xf0
 8004604:	f7ff ff70 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3e);
 8004608:	203e      	movs	r0, #62	; 0x3e
 800460a:	f7ff ff6d 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x30);
 800460e:	2030      	movs	r0, #48	; 0x30
 8004610:	f7ff ff6a 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8004614:	2006      	movs	r0, #6
 8004616:	f7ff ff67 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0a);
 800461a:	200a      	movs	r0, #10
 800461c:	f7ff ff64 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x03);
 8004620:	2003      	movs	r0, #3
 8004622:	f7ff ff61 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 8004626:	204d      	movs	r0, #77	; 0x4d
 8004628:	f7ff ff5e 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x56);
 800462c:	2056      	movs	r0, #86	; 0x56
 800462e:	f7ff ff5b 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3a);
 8004632:	203a      	movs	r0, #58	; 0x3a
 8004634:	f7ff ff58 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8004638:	2006      	movs	r0, #6
 800463a:	f7ff ff55 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0f);
 800463e:	200f      	movs	r0, #15
 8004640:	f7ff ff52 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x04);
 8004644:	2004      	movs	r0, #4
 8004646:	f7ff ff4f 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 800464a:	2018      	movs	r0, #24
 800464c:	f7ff ff4c 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8004650:	2013      	movs	r0, #19
 8004652:	f7ff ff49 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8004656:	2000      	movs	r0, #0
 8004658:	f7ff ff46 	bl	80044e8 <LCD_WritePara.isra.0>

    // Negative Gamma Control
    LCD_WriteCmd(0xe1);
 800465c:	20e1      	movs	r0, #225	; 0xe1
 800465e:	f7ff ff69 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x0f);
 8004662:	200f      	movs	r0, #15
 8004664:	f7ff ff40 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x37);
 8004668:	2037      	movs	r0, #55	; 0x37
 800466a:	f7ff ff3d 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x31);
 800466e:	2031      	movs	r0, #49	; 0x31
 8004670:	f7ff ff3a 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0b);
 8004674:	200b      	movs	r0, #11
 8004676:	f7ff ff37 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0d);
 800467a:	200d      	movs	r0, #13
 800467c:	f7ff ff34 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8004680:	2006      	movs	r0, #6
 8004682:	f7ff ff31 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 8004686:	204d      	movs	r0, #77	; 0x4d
 8004688:	f7ff ff2e 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x34);
 800468c:	2034      	movs	r0, #52	; 0x34
 800468e:	f7ff ff2b 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x38);
 8004692:	2038      	movs	r0, #56	; 0x38
 8004694:	f7ff ff28 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8004698:	2006      	movs	r0, #6
 800469a:	f7ff ff25 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x11);
 800469e:	2011      	movs	r0, #17
 80046a0:	f7ff ff22 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 80046a4:	2001      	movs	r0, #1
 80046a6:	f7ff ff1f 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 80046aa:	2018      	movs	r0, #24
 80046ac:	f7ff ff1c 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 80046b0:	2013      	movs	r0, #19
 80046b2:	f7ff ff19 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 80046b6:	2000      	movs	r0, #0
 80046b8:	f7ff ff16 	bl	80044e8 <LCD_WritePara.isra.0>
    
    // Power Control 1
    LCD_WriteCmd(0xc0);
 80046bc:	20c0      	movs	r0, #192	; 0xc0
 80046be:	f7ff ff39 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x18);
 80046c2:	2018      	movs	r0, #24
 80046c4:	f7ff ff10 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x17);
 80046c8:	2017      	movs	r0, #23
 80046ca:	f7ff ff0d 	bl	80044e8 <LCD_WritePara.isra.0>

    // Power Control 2
    LCD_WriteCmd(0xc1);
 80046ce:	20c1      	movs	r0, #193	; 0xc1
 80046d0:	f7ff ff30 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x41);
 80046d4:	2041      	movs	r0, #65	; 0x41
 80046d6:	f7ff ff07 	bl	80044e8 <LCD_WritePara.isra.0>

    // Power Control 3
    LCD_WriteCmd(0xc5);
 80046da:	20c5      	movs	r0, #197	; 0xc5
 80046dc:	f7ff ff2a 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 80046e0:	2000      	movs	r0, #0
 80046e2:	f7ff ff01 	bl	80044e8 <LCD_WritePara.isra.0>

    // VCOM Control
    LCD_WriteCmd(0x1a);
 80046e6:	201a      	movs	r0, #26
 80046e8:	f7ff ff24 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x80);
 80046ec:	2080      	movs	r0, #128	; 0x80
 80046ee:	f7ff fefb 	bl	80044e8 <LCD_WritePara.isra.0>

    // Memory Access Control
    LCD_WriteCmd(0x36);
 80046f2:	2036      	movs	r0, #54	; 0x36
 80046f4:	f7ff ff1e 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x48);
 80046f8:	2048      	movs	r0, #72	; 0x48
 80046fa:	f7ff fef5 	bl	80044e8 <LCD_WritePara.isra.0>

    // Pixel Interface Format
    LCD_WriteCmd(0x3a);
 80046fe:	203a      	movs	r0, #58	; 0x3a
 8004700:	f7ff ff18 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x55);
 8004704:	2055      	movs	r0, #85	; 0x55
 8004706:	f7ff feef 	bl	80044e8 <LCD_WritePara.isra.0>

    // Interface Mode Control
    LCD_WriteCmd(0xb0);
 800470a:	20b0      	movs	r0, #176	; 0xb0
 800470c:	f7ff ff12 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8004710:	2000      	movs	r0, #0
 8004712:	f7ff fee9 	bl	80044e8 <LCD_WritePara.isra.0>

    // Frame Rate Control
    LCD_WriteCmd(0xb1);
 8004716:	20b1      	movs	r0, #177	; 0xb1
 8004718:	f7ff ff0c 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa0);
 800471c:	20a0      	movs	r0, #160	; 0xa0
 800471e:	f7ff fee3 	bl	80044e8 <LCD_WritePara.isra.0>

    // Display Inversion Control
    LCD_WriteCmd(0xb4);
 8004722:	20b4      	movs	r0, #180	; 0xb4
 8004724:	f7ff ff06 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 8004728:	2002      	movs	r0, #2
 800472a:	f7ff fedd 	bl	80044e8 <LCD_WritePara.isra.0>

    // Display Function Control
    LCD_WriteCmd(0xb6);
 800472e:	20b6      	movs	r0, #182	; 0xb6
 8004730:	f7ff ff00 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 8004734:	2002      	movs	r0, #2
 8004736:	f7ff fed7 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x02);
 800473a:	2002      	movs	r0, #2
 800473c:	f7ff fed4 	bl	80044e8 <LCD_WritePara.isra.0>

    // Set image function
    LCD_WriteCmd(0xe9);
 8004740:	20e9      	movs	r0, #233	; 0xe9
 8004742:	f7ff fef7 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8004746:	2000      	movs	r0, #0
 8004748:	f7ff fece 	bl	80044e8 <LCD_WritePara.isra.0>

    //Adjust Control 3
    LCD_WriteCmd(0xf7);
 800474c:	20f7      	movs	r0, #247	; 0xf7
 800474e:	f7ff fef1 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa9);
 8004752:	20a9      	movs	r0, #169	; 0xa9
 8004754:	f7ff fec8 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x51);
 8004758:	2051      	movs	r0, #81	; 0x51
 800475a:	f7ff fec5 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x2c);
 800475e:	202c      	movs	r0, #44	; 0x2c
 8004760:	f7ff fec2 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x82);
 8004764:	2082      	movs	r0, #130	; 0x82
 8004766:	f7ff febf 	bl	80044e8 <LCD_WritePara.isra.0>

    // Write_memory_start
    LCD_WriteCmd(0x21);
 800476a:	2021      	movs	r0, #33	; 0x21
 800476c:	f7ff fee2 	bl	8004534 <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 8004770:	2078      	movs	r0, #120	; 0x78
 8004772:	f000 f9a7 	bl	8004ac4 <HAL_Delay>
    //Exit Sleep
    LCD_WriteCmd(0x11);
 8004776:	2011      	movs	r0, #17
 8004778:	f7ff fedc 	bl	8004534 <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 800477c:	2078      	movs	r0, #120	; 0x78
 800477e:	f000 f9a1 	bl	8004ac4 <HAL_Delay>

    switch (rotation)
 8004782:	2c02      	cmp	r4, #2
    {
        case LCD_DISPLAY_ROTATION_0:
            LCD_WriteCmd(0x36);
 8004784:	f04f 0036 	mov.w	r0, #54	; 0x36
    switch (rotation)
 8004788:	d036      	beq.n	80047f8 <LCD_Init+0x22c>
 800478a:	2c03      	cmp	r4, #3
 800478c:	d046      	beq.n	800481c <LCD_Init+0x250>
 800478e:	2c01      	cmp	r4, #1
 8004790:	d036      	beq.n	8004800 <LCD_Init+0x234>
            LCD_WriteCmd(0x36);
 8004792:	f7ff fecf 	bl	8004534 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x48);
 8004796:	2048      	movs	r0, #72	; 0x48
            g_lcd_height = 320;
            g_lcd_width  = 480;
            break;
        case LCD_DISPLAY_ROTATION_180:
            LCD_WriteCmd(0x36);
            LCD_WritePara(0x88);
 8004798:	f7ff fea6 	bl	80044e8 <LCD_WritePara.isra.0>
            g_lcd_height = 480;
 800479c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
            g_lcd_width  = 320;
 80047a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
            g_lcd_height = 480;
 80047a4:	4920      	ldr	r1, [pc, #128]	; (8004828 <LCD_Init+0x25c>)
            g_lcd_width  = 320;
 80047a6:	4b21      	ldr	r3, [pc, #132]	; (800482c <LCD_Init+0x260>)
            g_lcd_height = 480;
 80047a8:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 320;
 80047aa:	601a      	str	r2, [r3, #0]
            g_lcd_width  = 320;
            break;
    }

    // set_screen_size
    LCD_WriteCmd(0x2a);
 80047ac:	202a      	movs	r0, #42	; 0x2a
 80047ae:	f7ff fec1 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 80047b2:	2000      	movs	r0, #0
 80047b4:	f7ff fe98 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 80047b8:	2000      	movs	r0, #0
 80047ba:	f7ff fe95 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 80047be:	2001      	movs	r0, #1
 80047c0:	f7ff fe92 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3f);
 80047c4:	203f      	movs	r0, #63	; 0x3f
 80047c6:	f7ff fe8f 	bl	80044e8 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2b);
 80047ca:	202b      	movs	r0, #43	; 0x2b
 80047cc:	f7ff feb2 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 80047d0:	2000      	movs	r0, #0
 80047d2:	f7ff fe89 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 80047d6:	2000      	movs	r0, #0
 80047d8:	f7ff fe86 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 80047dc:	2001      	movs	r0, #1
 80047de:	f7ff fe83 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(0xdf);
 80047e2:	20df      	movs	r0, #223	; 0xdf
 80047e4:	f7ff fe80 	bl	80044e8 <LCD_WritePara.isra.0>

    //Display on
    LCD_WriteCmd(0x29);
 80047e8:	2029      	movs	r0, #41	; 0x29
 80047ea:	f7ff fea3 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WriteCmd(0x21);     

    LCD_WriteCmd(0x29);     
#endif  

}
 80047ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(120);
 80047f2:	2078      	movs	r0, #120	; 0x78
 80047f4:	f000 b966 	b.w	8004ac4 <HAL_Delay>
            LCD_WriteCmd(0x36);
 80047f8:	f7ff fe9c 	bl	8004534 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x88);
 80047fc:	2088      	movs	r0, #136	; 0x88
 80047fe:	e7cb      	b.n	8004798 <LCD_Init+0x1cc>
            LCD_WriteCmd(0x36);
 8004800:	f7ff fe98 	bl	8004534 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0xe8);
 8004804:	20e8      	movs	r0, #232	; 0xe8
            LCD_WritePara(0x28);
 8004806:	f7ff fe6f 	bl	80044e8 <LCD_WritePara.isra.0>
            g_lcd_height = 320;
 800480a:	f44f 70a0 	mov.w	r0, #320	; 0x140
            g_lcd_width  = 480;
 800480e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
            g_lcd_height = 320;
 8004812:	4905      	ldr	r1, [pc, #20]	; (8004828 <LCD_Init+0x25c>)
            g_lcd_width  = 480;
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <LCD_Init+0x260>)
            g_lcd_height = 320;
 8004816:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 480;
 8004818:	601a      	str	r2, [r3, #0]
            break;
 800481a:	e7c7      	b.n	80047ac <LCD_Init+0x1e0>
            LCD_WriteCmd(0x36);
 800481c:	f7ff fe8a 	bl	8004534 <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x28);
 8004820:	2028      	movs	r0, #40	; 0x28
 8004822:	e7f0      	b.n	8004806 <LCD_Init+0x23a>
 8004824:	42020400 	.word	0x42020400
 8004828:	20006000 	.word	0x20006000
 800482c:	20006004 	.word	0x20006004

08004830 <LCD_GetInfo>:
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_GetInfo(uint32_t *pWidth, uint32_t *pHeight)
{
    *pHeight = g_lcd_height;
 8004830:	4a03      	ldr	r2, [pc, #12]	; (8004840 <LCD_GetInfo+0x10>)
    *pWidth  = g_lcd_width;
 8004832:	4b04      	ldr	r3, [pc, #16]	; (8004844 <LCD_GetInfo+0x14>)
    *pHeight = g_lcd_height;
 8004834:	6812      	ldr	r2, [r2, #0]
    *pWidth  = g_lcd_width;
 8004836:	681b      	ldr	r3, [r3, #0]
    *pHeight = g_lcd_height;
 8004838:	600a      	str	r2, [r1, #0]
    *pWidth  = g_lcd_width;
 800483a:	6003      	str	r3, [r0, #0]
}
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20006000 	.word	0x20006000
 8004844:	20006004 	.word	0x20006004

08004848 <LCD_SetWindows>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_SetWindows(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2)
{
 8004848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484a:	4607      	mov	r7, r0
 800484c:	4616      	mov	r6, r2
 800484e:	460d      	mov	r5, r1
 8004850:	461c      	mov	r4, r3
    LCD_WriteCmd(0x2a);
 8004852:	202a      	movs	r0, #42	; 0x2a
 8004854:	f7ff fe6e 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara((x1 >> 8) & 0xFF);
 8004858:	f3c7 2007 	ubfx	r0, r7, #8, #8
 800485c:	f7ff fe44 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(x1 & 0xFF);
 8004860:	b2f8      	uxtb	r0, r7
 8004862:	f7ff fe41 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara((x2 >> 8) & 0xFF);
 8004866:	f3c6 2007 	ubfx	r0, r6, #8, #8
 800486a:	f7ff fe3d 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(x2 & 0xFF);
 800486e:	b2f0      	uxtb	r0, r6
 8004870:	f7ff fe3a 	bl	80044e8 <LCD_WritePara.isra.0>
    

    LCD_WriteCmd(0x2b);
 8004874:	202b      	movs	r0, #43	; 0x2b
 8004876:	f7ff fe5d 	bl	8004534 <LCD_WriteCmd.isra.0>
    LCD_WritePara((y1 >> 8) & 0xFF);
 800487a:	f3c5 2007 	ubfx	r0, r5, #8, #8
 800487e:	f7ff fe33 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(y1 & 0xFF);
 8004882:	b2e8      	uxtb	r0, r5
 8004884:	f7ff fe30 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara((y2 >> 8) & 0xFF);
 8004888:	f3c4 2007 	ubfx	r0, r4, #8, #8
 800488c:	f7ff fe2c 	bl	80044e8 <LCD_WritePara.isra.0>
    LCD_WritePara(y2 & 0xFF);
 8004890:	b2e0      	uxtb	r0, r4
 8004892:	f7ff fe29 	bl	80044e8 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2C);
}
 8004896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_WriteCmd(0x2C);
 800489a:	202c      	movs	r0, #44	; 0x2c
 800489c:	f7ff be4a 	b.w	8004534 <LCD_WriteCmd.isra.0>

080048a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048a0:	480d      	ldr	r0, [pc, #52]	; (80048d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80048a4:	f006 ff24 	bl	800b6f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048a8:	480c      	ldr	r0, [pc, #48]	; (80048dc <LoopForever+0x6>)
  ldr r1, =_edata
 80048aa:	490d      	ldr	r1, [pc, #52]	; (80048e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80048ac:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <LoopForever+0xe>)
  movs r3, #0
 80048ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048b0:	e002      	b.n	80048b8 <LoopCopyDataInit>

080048b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048b6:	3304      	adds	r3, #4

080048b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048bc:	d3f9      	bcc.n	80048b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048be:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048c0:	4c0a      	ldr	r4, [pc, #40]	; (80048ec <LoopForever+0x16>)
  movs r3, #0
 80048c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048c4:	e001      	b.n	80048ca <LoopFillZerobss>

080048c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048c8:	3204      	adds	r2, #4

080048ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048cc:	d3fb      	bcc.n	80048c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80048ce:	f007 ffbd 	bl	800c84c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048d2:	f7fd fcd5 	bl	8002280 <main>

080048d6 <LoopForever>:

LoopForever:
    b LoopForever
 80048d6:	e7fe      	b.n	80048d6 <LoopForever>
  ldr   r0, =_estack
 80048d8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80048dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80048e0:	20000b98 	.word	0x20000b98
  ldr r2, =_sidata
 80048e4:	08014084 	.word	0x08014084
  ldr r2, =_sbss
 80048e8:	20000b98 	.word	0x20000b98
  ldr r4, =_ebss
 80048ec:	200067f0 	.word	0x200067f0

080048f0 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048f0:	e7fe      	b.n	80048f0 <ADC1_IRQHandler>
	...

080048f4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f4:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048f6:	2003      	movs	r0, #3
 80048f8:	f000 f834 	bl	8004964 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80048fc:	f000 ff4e 	bl	800579c <HAL_RCC_GetSysClockFreq>
 8004900:	4603      	mov	r3, r0
 8004902:	4a0c      	ldr	r2, [pc, #48]	; (8004934 <HAL_Init+0x40>)
 8004904:	480c      	ldr	r0, [pc, #48]	; (8004938 <HAL_Init+0x44>)
 8004906:	6a12      	ldr	r2, [r2, #32]
 8004908:	490c      	ldr	r1, [pc, #48]	; (800493c <HAL_Init+0x48>)
 800490a:	f002 020f 	and.w	r2, r2, #15
 800490e:	5c82      	ldrb	r2, [r0, r2]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004910:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004912:	40d3      	lsrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004916:	f000 f897 	bl	8004a48 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800491a:	200f      	movs	r0, #15
 800491c:	f005 ffbe 	bl	800a89c <HAL_InitTick>
 8004920:	b110      	cbz	r0, 8004928 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 8004922:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 8004924:	4620      	mov	r0, r4
 8004926:	bd10      	pop	{r4, pc}
 8004928:	4604      	mov	r4, r0
  HAL_MspInit();
 800492a:	f000 fea5 	bl	8005678 <HAL_MspInit>
}
 800492e:	4620      	mov	r0, r4
 8004930:	bd10      	pop	{r4, pc}
 8004932:	bf00      	nop
 8004934:	44020c00 	.word	0x44020c00
 8004938:	08013c50 	.word	0x08013c50
 800493c:	200001e4 	.word	0x200001e4

08004940 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004940:	4a03      	ldr	r2, [pc, #12]	; (8004950 <HAL_IncTick+0x10>)
 8004942:	4b04      	ldr	r3, [pc, #16]	; (8004954 <HAL_IncTick+0x14>)
 8004944:	6811      	ldr	r1, [r2, #0]
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	440b      	add	r3, r1
 800494a:	6013      	str	r3, [r2, #0]
}
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	20006008 	.word	0x20006008
 8004954:	200001dc 	.word	0x200001dc

08004958 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004958:	4b01      	ldr	r3, [pc, #4]	; (8004960 <HAL_GetTick+0x8>)
 800495a:	6818      	ldr	r0, [r3, #0]
}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	20006008 	.word	0x20006008

08004964 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004964:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004968:	4906      	ldr	r1, [pc, #24]	; (8004984 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800496a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800496c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800496e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004972:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800497c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004980:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004982:	4770      	bx	lr
 8004984:	e000ed00 	.word	0xe000ed00

08004988 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004988:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800498a:	b500      	push	{lr}
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004992:	f1c3 0e07 	rsb	lr, r3, #7
 8004996:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800499a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800499e:	bf28      	it	cs
 80049a0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a4:	f1bc 0f06 	cmp.w	ip, #6
 80049a8:	d91b      	bls.n	80049e2 <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049aa:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ae:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80049b0:	fa0c fc03 	lsl.w	ip, ip, r3
 80049b4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049b8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80049bc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80049c0:	ea21 010c 	bic.w	r1, r1, ip
 80049c4:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80049c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049c8:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80049cc:	db0c      	blt.n	80049e8 <HAL_NVIC_SetPriority+0x60>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ce:	0109      	lsls	r1, r1, #4
 80049d0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80049d4:	b2c9      	uxtb	r1, r1
 80049d6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80049da:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049de:	f85d fb04 	ldr.w	pc, [sp], #4
 80049e2:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e4:	4613      	mov	r3, r2
 80049e6:	e7e7      	b.n	80049b8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049e8:	4b05      	ldr	r3, [pc, #20]	; (8004a00 <HAL_NVIC_SetPriority+0x78>)
 80049ea:	f000 000f 	and.w	r0, r0, #15
 80049ee:	0109      	lsls	r1, r1, #4
 80049f0:	b2c9      	uxtb	r1, r1
 80049f2:	4403      	add	r3, r0
 80049f4:	7619      	strb	r1, [r3, #24]
 80049f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80049fa:	bf00      	nop
 80049fc:	e000ed00 	.word	0xe000ed00
 8004a00:	e000ecfc 	.word	0xe000ecfc

08004a04 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a04:	2800      	cmp	r0, #0
 8004a06:	db07      	blt.n	8004a18 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f000 011f 	and.w	r1, r0, #31
 8004a0e:	4a03      	ldr	r2, [pc, #12]	; (8004a1c <HAL_NVIC_EnableIRQ+0x18>)
 8004a10:	0940      	lsrs	r0, r0, #5
 8004a12:	408b      	lsls	r3, r1
 8004a14:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	e000e100 	.word	0xe000e100

08004a20 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a20:	2800      	cmp	r0, #0
 8004a22:	db0d      	blt.n	8004a40 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a24:	2201      	movs	r2, #1
 8004a26:	4907      	ldr	r1, [pc, #28]	; (8004a44 <HAL_NVIC_DisableIRQ+0x24>)
 8004a28:	0943      	lsrs	r3, r0, #5
 8004a2a:	f000 001f 	and.w	r0, r0, #31
 8004a2e:	3320      	adds	r3, #32
 8004a30:	fa02 f000 	lsl.w	r0, r2, r0
 8004a34:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a3c:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	e000e100 	.word	0xe000e100

08004a48 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004a48:	2804      	cmp	r0, #4
 8004a4a:	d813      	bhi.n	8004a74 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 8004a4c:	e8df f000 	tbb	[pc, r0]
 8004a50:	12031a2a 	.word	0x12031a2a
 8004a54:	13          	.byte	0x13
 8004a55:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004a56:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8004a5a:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8004a5c:	4a18      	ldr	r2, [pc, #96]	; (8004ac0 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004a5e:	f023 0304 	bic.w	r3, r3, #4
 8004a62:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8004a64:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8004a68:	f023 030c 	bic.w	r3, r3, #12
 8004a6c:	f043 0308 	orr.w	r3, r3, #8
 8004a70:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 8004a74:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004a76:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004a7a:	6913      	ldr	r3, [r2, #16]
 8004a7c:	f043 0304 	orr.w	r3, r3, #4
 8004a80:	6113      	str	r3, [r2, #16]
      break;
 8004a82:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004a84:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8004a88:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8004a8a:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004a8c:	f023 0304 	bic.w	r3, r3, #4
 8004a90:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8004a92:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8004a96:	f023 030c 	bic.w	r3, r3, #12
 8004a9a:	f043 0304 	orr.w	r3, r3, #4
 8004a9e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8004aa2:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004aa4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8004aa8:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8004aaa:	4a05      	ldr	r2, [pc, #20]	; (8004ac0 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8004ab2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8004ab6:	f023 030c 	bic.w	r3, r3, #12
 8004aba:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8004abe:	4770      	bx	lr
 8004ac0:	44020c00 	.word	0x44020c00

08004ac4 <HAL_Delay>:
#include "main.h"

void HAL_Delay(uint32_t Delay)
{
 8004ac4:	b570      	push	{r4, r5, r6, lr}
 8004ac6:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8004ac8:	f7ff ff46 	bl	8004958 <HAL_GetTick>
  uint32_t wait = Delay - 1;//减去多出的1ms时间
 8004acc:	1e75      	subs	r5, r6, #1
  uint32_t tickstart = HAL_GetTick();
 8004ace:	4604      	mov	r4, r0

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ad0:	b116      	cbz	r6, 8004ad8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ad2:	4b04      	ldr	r3, [pc, #16]	; (8004ae4 <HAL_Delay+0x20>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	441d      	add	r5, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ad8:	f7ff ff3e 	bl	8004958 <HAL_GetTick>
 8004adc:	1b00      	subs	r0, r0, r4
 8004ade:	42a8      	cmp	r0, r5
 8004ae0:	d3fa      	bcc.n	8004ad8 <HAL_Delay+0x14>
  {
  }
}
 8004ae2:	bd70      	pop	{r4, r5, r6, pc}
 8004ae4:	200001dc 	.word	0x200001dc

08004ae8 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	4604      	mov	r4, r0
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8004aec:	f7ff ff34 	bl	8004958 <HAL_GetTick>

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004af0:	2c00      	cmp	r4, #0
 8004af2:	f000 8148 	beq.w	8004d86 <HAL_DMA_Init+0x29e>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004af6:	4605      	mov	r5, r0
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004af8:	2000      	movs	r0, #0

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 8004afa:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004afe:	6823      	ldr	r3, [r4, #0]
  if (hdma->State == HAL_DMA_STATE_RESET)
 8004b00:	f001 02ff 	and.w	r2, r1, #255	; 0xff
  __HAL_UNLOCK(hdma);
 8004b04:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  if (hdma->State == HAL_DMA_STATE_RESET)
 8004b08:	2900      	cmp	r1, #0
 8004b0a:	f000 80d5 	beq.w	8004cb8 <HAL_DMA_Init+0x1d0>
    hdma->XferAbortCallback    = NULL;
    hdma->XferSuspendCallback  = NULL;
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	f042 0206 	orr.w	r2, r2, #6
 8004b1a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004b1c:	e006      	b.n	8004b2c <HAL_DMA_Init+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004b1e:	f7ff ff1b 	bl	8004958 <HAL_GetTick>
 8004b22:	1b43      	subs	r3, r0, r5
 8004b24:	2b05      	cmp	r3, #5
 8004b26:	f200 8124 	bhi.w	8004d72 <HAL_DMA_Init+0x28a>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	695a      	ldr	r2, [r3, #20]
 8004b2e:	07d2      	lsls	r2, r2, #31
 8004b30:	d4f5      	bmi.n	8004b1e <HAL_DMA_Init+0x36>

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004b32:	6959      	ldr	r1, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004b34:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004b36:	f421 0143 	bic.w	r1, r1, #12779520	; 0xc30000
 8004b3a:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
 8004b3e:	4301      	orrs	r1, r0
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004b40:	6920      	ldr	r0, [r4, #16]
 8004b42:	432a      	orrs	r2, r5
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004b44:	6159      	str	r1, [r3, #20]
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004b46:	69a1      	ldr	r1, [r4, #24]
 8004b48:	4302      	orrs	r2, r0
 8004b4a:	4311      	orrs	r1, r2

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004b4c:	4a8f      	ldr	r2, [pc, #572]	; (8004d8c <HAL_DMA_Init+0x2a4>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	f000 80b8 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004b54:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	f000 80b3 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004b5e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004b62:	3280      	adds	r2, #128	; 0x80
 8004b64:	4293      	cmp	r3, r2
 8004b66:	f000 80ad 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004b6a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	f000 80a8 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004b74:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004b78:	3280      	adds	r2, #128	; 0x80
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f000 80a2 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004b80:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b84:	4293      	cmp	r3, r2
 8004b86:	f000 809d 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004b8a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004b8e:	3280      	adds	r2, #128	; 0x80
 8004b90:	4293      	cmp	r3, r2
 8004b92:	f000 8097 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004b96:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	f000 8092 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004ba0:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004ba4:	3280      	adds	r2, #128	; 0x80
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	f000 808c 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004bac:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f000 8087 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004bb6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004bba:	3280      	adds	r2, #128	; 0x80
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	f000 8081 	beq.w	8004cc4 <HAL_DMA_Init+0x1dc>
 8004bc2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d07c      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004bca:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004bce:	3280      	adds	r2, #128	; 0x80
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d077      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004bd4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d073      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004bdc:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004be0:	3280      	adds	r2, #128	; 0x80
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d06e      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004be6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d06a      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004bee:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004bf2:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d064      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004bfa:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d060      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c02:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c06:	3280      	adds	r2, #128	; 0x80
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d05b      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c0c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d057      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c14:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c18:	3280      	adds	r2, #128	; 0x80
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d052      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c1e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d04e      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c26:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c2a:	3280      	adds	r2, #128	; 0x80
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d049      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c30:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d045      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c38:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c3c:	3280      	adds	r2, #128	; 0x80
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d040      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c42:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d03c      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c4a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c4e:	3280      	adds	r2, #128	; 0x80
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d037      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c54:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d033      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c5c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c60:	3280      	adds	r2, #128	; 0x80
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d02e      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c66:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d02a      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c6e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004c72:	3280      	adds	r2, #128	; 0x80
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d025      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
 8004c78:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d021      	beq.n	8004cc4 <HAL_DMA_Init+0x1dc>
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004c82:	68a0      	ldr	r0, [r4, #8]
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004c84:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004c8c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c8e:	7921      	ldrb	r1, [r4, #4]
 8004c90:	4302      	orrs	r2, r0
 8004c92:	4311      	orrs	r1, r2

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c94:	68e2      	ldr	r2, [r4, #12]
 8004c96:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004c9a:	f000 8111 	beq.w	8004ec0 <HAL_DMA_Init+0x3d8>
    {
      tmpreg |= DMA_CTR2_DREQ;
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004c9e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004ca2:	d06d      	beq.n	8004d80 <HAL_DMA_Init+0x298>
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004ca4:	2000      	movs	r0, #0
  tmpreg |= hdma->Init.Mode;
 8004ca6:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004caa:	4e39      	ldr	r6, [pc, #228]	; (8004d90 <HAL_DMA_Init+0x2a8>)
 8004cac:	4329      	orrs	r1, r5
 8004cae:	4032      	ands	r2, r6
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004cb4:	6498      	str	r0, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004cb6:	e054      	b.n	8004d62 <HAL_DMA_Init+0x27a>
    hdma->XferHalfCpltCallback = NULL;
 8004cb8:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
    hdma->XferAbortCallback    = NULL;
 8004cbc:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
    hdma->XferSuspendCallback  = NULL;
 8004cc0:	6722      	str	r2, [r4, #112]	; 0x70
 8004cc2:	e724      	b.n	8004b0e <HAL_DMA_Init+0x26>
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004cc4:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0512      	lsls	r2, r2, #20
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004ccc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004cce:	3801      	subs	r0, #1
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004cd0:	f002 727c 	and.w	r2, r2, #66060288	; 0x3f00000
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004cd4:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8004cd6:	430a      	orrs	r2, r1
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004cd8:	0101      	lsls	r1, r0, #4
 8004cda:	f401 717c 	and.w	r1, r1, #1008	; 0x3f0
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004cde:	432a      	orrs	r2, r5
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	f006 2080 	and.w	r0, r6, #2147516416	; 0x80008000
 8004ce6:	4302      	orrs	r2, r0
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004ce8:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004cec:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004cee:	7920      	ldrb	r0, [r4, #4]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	ea42 0100 	orr.w	r1, r2, r0
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cf6:	68e2      	ldr	r2, [r4, #12]
 8004cf8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004cfc:	d04c      	beq.n	8004d98 <HAL_DMA_Init+0x2b0>
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004cfe:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004d02:	d03d      	beq.n	8004d80 <HAL_DMA_Init+0x298>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d06:	4822      	ldr	r0, [pc, #136]	; (8004d90 <HAL_DMA_Init+0x2a8>)
  tmpreg |= hdma->Init.Mode;
 8004d08:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004d0a:	4002      	ands	r2, r0
 8004d0c:	432a      	orrs	r2, r5
 8004d0e:	430a      	orrs	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004d10:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004d12:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004d14:	4a1f      	ldr	r2, [pc, #124]	; (8004d94 <HAL_DMA_Init+0x2ac>)
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004d16:	6499      	str	r1, [r3, #72]	; 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01f      	beq.n	8004d5c <HAL_DMA_Init+0x274>
 8004d1c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d01b      	beq.n	8004d5c <HAL_DMA_Init+0x274>
 8004d24:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004d28:	3280      	adds	r2, #128	; 0x80
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d016      	beq.n	8004d5c <HAL_DMA_Init+0x274>
 8004d2e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d012      	beq.n	8004d5c <HAL_DMA_Init+0x274>
 8004d36:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004d3a:	f502 6278 	add.w	r2, r2, #3968	; 0xf80
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d00c      	beq.n	8004d5c <HAL_DMA_Init+0x274>
 8004d42:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d008      	beq.n	8004d5c <HAL_DMA_Init+0x274>
 8004d4a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004d4e:	3280      	adds	r2, #128	; 0x80
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d003      	beq.n	8004d5c <HAL_DMA_Init+0x274>
 8004d54:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d102      	bne.n	8004d62 <HAL_DMA_Init+0x27a>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004d60:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004d62:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004d64:	2201      	movs	r2, #1
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004d66:	67d8      	str	r0, [r3, #124]	; 0x7c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004d68:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->State = HAL_DMA_STATE_READY;
 8004d6a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
  hdma->Mode = hdma->Init.Mode;
 8004d6e:	6525      	str	r5, [r4, #80]	; 0x50
}
 8004d70:	bd70      	pop	{r4, r5, r6, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d72:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8004d74:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d76:	65a2      	str	r2, [r4, #88]	; 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 8004d78:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 8004d7c:	2001      	movs	r0, #1
}
 8004d7e:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg |= DMA_CTR2_SWREQ;
 8004d80:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004d84:	e7be      	b.n	8004d04 <HAL_DMA_Init+0x21c>
    return HAL_ERROR;
 8004d86:	2001      	movs	r0, #1
}
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
 8004d8a:	bf00      	nop
 8004d8c:	40020050 	.word	0x40020050
 8004d90:	3cc02100 	.word	0x3cc02100
 8004d94:	40020350 	.word	0x40020350
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004d98:	4a50      	ldr	r2, [pc, #320]	; (8004edc <HAL_DMA_Init+0x3f4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	f000 809a 	beq.w	8004ed4 <HAL_DMA_Init+0x3ec>
 8004da0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004da4:	4293      	cmp	r3, r2
 8004da6:	f000 8095 	beq.w	8004ed4 <HAL_DMA_Init+0x3ec>
 8004daa:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004dae:	3280      	adds	r2, #128	; 0x80
 8004db0:	4293      	cmp	r3, r2
 8004db2:	f000 808f 	beq.w	8004ed4 <HAL_DMA_Init+0x3ec>
 8004db6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	f000 808a 	beq.w	8004ed4 <HAL_DMA_Init+0x3ec>
 8004dc0:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004dc4:	3280      	adds	r2, #128	; 0x80
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	f000 8084 	beq.w	8004ed4 <HAL_DMA_Init+0x3ec>
 8004dcc:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d07f      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004dd4:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004dd8:	3280      	adds	r2, #128	; 0x80
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d07a      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004dde:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d076      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004de6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004dea:	3280      	adds	r2, #128	; 0x80
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d071      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004df0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d06d      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004df8:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004dfc:	3280      	adds	r2, #128	; 0x80
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d068      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e02:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d064      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e0a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004e0e:	3280      	adds	r2, #128	; 0x80
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d05f      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e14:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d05b      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e1c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004e20:	3280      	adds	r2, #128	; 0x80
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d056      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e26:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d052      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e2e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004e32:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d04c      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e3a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d048      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e42:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004e46:	3280      	adds	r2, #128	; 0x80
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d043      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e4c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d03f      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e54:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004e58:	3280      	adds	r2, #128	; 0x80
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d03a      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e5e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d036      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e66:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004e6a:	3280      	adds	r2, #128	; 0x80
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d031      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e70:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d02d      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e78:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004e7c:	3280      	adds	r2, #128	; 0x80
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d028      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e82:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d024      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e8a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004e8e:	3280      	adds	r2, #128	; 0x80
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d01f      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e94:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d01b      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004e9c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004ea0:	3280      	adds	r2, #128	; 0x80
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d016      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004ea6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d012      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004eae:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004eb2:	3280      	adds	r2, #128	; 0x80
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00d      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
 8004eb8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <HAL_DMA_Init+0x3ec>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ec2:	4807      	ldr	r0, [pc, #28]	; (8004ee0 <HAL_DMA_Init+0x3f8>)
  tmpreg |= hdma->Init.Mode;
 8004ec4:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004ec6:	4002      	ands	r2, r0
 8004ec8:	432a      	orrs	r2, r5
 8004eca:	430a      	orrs	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004ecc:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004ece:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004ed0:	6499      	str	r1, [r3, #72]	; 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004ed2:	e746      	b.n	8004d62 <HAL_DMA_Init+0x27a>
      tmpreg |= DMA_CTR2_DREQ;
 8004ed4:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004ed8:	e714      	b.n	8004d04 <HAL_DMA_Init+0x21c>
 8004eda:	bf00      	nop
 8004edc:	40020050 	.word	0x40020050
 8004ee0:	3cc02100 	.word	0x3cc02100

08004ee4 <HAL_DMA_DeInit>:
{
 8004ee4:	b570      	push	{r4, r5, r6, lr}
 8004ee6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004ee8:	f7ff fd36 	bl	8004958 <HAL_GetTick>
  if (hdma == NULL)
 8004eec:	2c00      	cmp	r4, #0
 8004eee:	d06b      	beq.n	8004fc8 <HAL_DMA_DeInit+0xe4>
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004ef0:	6826      	ldr	r6, [r4, #0]
 8004ef2:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 8004ef4:	6973      	ldr	r3, [r6, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004ef6:	4632      	mov	r2, r6
  __HAL_DMA_DISABLE(hdma);
 8004ef8:	f043 0306 	orr.w	r3, r3, #6
 8004efc:	6173      	str	r3, [r6, #20]
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004efe:	e005      	b.n	8004f0c <HAL_DMA_DeInit+0x28>
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004f00:	f7ff fd2a 	bl	8004958 <HAL_GetTick>
 8004f04:	1b43      	subs	r3, r0, r5
 8004f06:	2b05      	cmp	r3, #5
 8004f08:	d857      	bhi.n	8004fba <HAL_DMA_DeInit+0xd6>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004f0a:	6822      	ldr	r2, [r4, #0]
 8004f0c:	6953      	ldr	r3, [r2, #20]
 8004f0e:	f013 0301 	ands.w	r3, r3, #1
 8004f12:	d1f5      	bne.n	8004f00 <HAL_DMA_DeInit+0x1c>
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004f14:	492d      	ldr	r1, [pc, #180]	; (8004fcc <HAL_DMA_DeInit+0xe8>)
  hdma->Instance->CLBAR = 0U;
 8004f16:	6013      	str	r3, [r2, #0]
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004f18:	428a      	cmp	r2, r1
  hdma->Instance->CCR   = 0U;
 8004f1a:	6153      	str	r3, [r2, #20]
  hdma->Instance->CTR1  = 0U;
 8004f1c:	6413      	str	r3, [r2, #64]	; 0x40
  hdma->Instance->CTR2  = 0U;
 8004f1e:	6453      	str	r3, [r2, #68]	; 0x44
  hdma->Instance->CBR1  = 0U;
 8004f20:	6493      	str	r3, [r2, #72]	; 0x48
  hdma->Instance->CSAR  = 0U;
 8004f22:	64d3      	str	r3, [r2, #76]	; 0x4c
  hdma->Instance->CDAR  = 0U;
 8004f24:	6513      	str	r3, [r2, #80]	; 0x50
  hdma->Instance->CLLR  = 0U;
 8004f26:	67d3      	str	r3, [r2, #124]	; 0x7c
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004f28:	d01e      	beq.n	8004f68 <HAL_DMA_DeInit+0x84>
 8004f2a:	4b29      	ldr	r3, [pc, #164]	; (8004fd0 <HAL_DMA_DeInit+0xec>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d01b      	beq.n	8004f68 <HAL_DMA_DeInit+0x84>
 8004f30:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004f34:	3380      	adds	r3, #128	; 0x80
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d016      	beq.n	8004f68 <HAL_DMA_DeInit+0x84>
 8004f3a:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d012      	beq.n	8004f68 <HAL_DMA_DeInit+0x84>
 8004f42:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004f46:	f503 6378 	add.w	r3, r3, #3968	; 0xf80
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d00c      	beq.n	8004f68 <HAL_DMA_DeInit+0x84>
 8004f4e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d008      	beq.n	8004f68 <HAL_DMA_DeInit+0x84>
 8004f56:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8004f5a:	3380      	adds	r3, #128	; 0x80
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d003      	beq.n	8004f68 <HAL_DMA_DeInit+0x84>
 8004f60:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d102      	bne.n	8004f6e <HAL_DMA_DeInit+0x8a>
    hdma->Instance->CTR3 = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	6553      	str	r3, [r2, #84]	; 0x54
    hdma->Instance->CBR2 = 0U;
 8004f6c:	6593      	str	r3, [r2, #88]	; 0x58
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004f6e:	2001      	movs	r0, #1
 8004f70:	f3c2 030b 	ubfx	r3, r2, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004f74:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004f78:	3b50      	subs	r3, #80	; 0x50
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004f7a:	f026 060f 	bic.w	r6, r6, #15
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004f7e:	f3c3 13c4 	ubfx	r3, r3, #7, #5
 8004f82:	6871      	ldr	r1, [r6, #4]
 8004f84:	fa00 f303 	lsl.w	r3, r0, r3
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004f88:	f44f 40fe 	mov.w	r0, #32512	; 0x7f00
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004f8c:	ea21 0103 	bic.w	r1, r1, r3
  hdma->XferCpltCallback     = NULL;
 8004f90:	2300      	movs	r3, #0
  CLEAR_BIT(p_dma_instance->PRIVCFGR, (1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU)));
 8004f92:	6071      	str	r1, [r6, #4]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004f94:	60d0      	str	r0, [r2, #12]
  if (hdma->Parent != NULL)
 8004f96:	6de2      	ldr	r2, [r4, #92]	; 0x5c
  hdma->XferHalfCpltCallback = NULL;
 8004f98:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
  hdma->XferAbortCallback    = NULL;
 8004f9c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  hdma->LinkedListQueue = NULL;
 8004fa0:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hdma->Parent != NULL)
 8004fa4:	b102      	cbz	r2, 8004fa8 <HAL_DMA_DeInit+0xc4>
    hdma->Parent = NULL;
 8004fa6:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->Mode = DMA_NORMAL;
 8004fa8:	2300      	movs	r3, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004faa:	65a3      	str	r3, [r4, #88]	; 0x58
  __HAL_UNLOCK(hdma);
 8004fac:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  hdma->State = HAL_DMA_STATE_RESET;
 8004fb0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8004fb4:	4618      	mov	r0, r3
  hdma->Mode = DMA_NORMAL;
 8004fb6:	6523      	str	r3, [r4, #80]	; 0x50
}
 8004fb8:	bd70      	pop	{r4, r5, r6, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fba:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 8004fbc:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004fbe:	65a2      	str	r2, [r4, #88]	; 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 8004fc0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 8004fc4:	2001      	movs	r0, #1
}
 8004fc6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8004fc8:	2001      	movs	r0, #1
}
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
 8004fcc:	40020350 	.word	0x40020350
 8004fd0:	50020350 	.word	0x50020350

08004fd4 <HAL_DMA_Start_IT>:
  if (hdma == NULL)
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d043      	beq.n	8005060 <HAL_DMA_Start_IT+0x8c>
{
 8004fd8:	b530      	push	{r4, r5, lr}
  if (hdma->Mode != DMA_NORMAL)
 8004fda:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8004fdc:	4684      	mov	ip, r0
 8004fde:	2c00      	cmp	r4, #0
 8004fe0:	d134      	bne.n	800504c <HAL_DMA_Start_IT+0x78>
  __HAL_LOCK(hdma);
 8004fe2:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8004fe6:	2801      	cmp	r0, #1
 8004fe8:	d038      	beq.n	800505c <HAL_DMA_Start_IT+0x88>
 8004fea:	2001      	movs	r0, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 8004fec:	f89c e054 	ldrb.w	lr, [ip, #84]	; 0x54
  __HAL_LOCK(hdma);
 8004ff0:	f88c 004c 	strb.w	r0, [ip, #76]	; 0x4c
  if (hdma->State == HAL_DMA_STATE_READY)
 8004ff4:	4586      	cmp	lr, r0
 8004ff6:	d12b      	bne.n	8005050 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ff8:	2002      	movs	r0, #2
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004ffa:	f44f 45fe 	mov.w	r5, #32512	; 0x7f00
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ffe:	f88c 0054 	strb.w	r0, [ip, #84]	; 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005002:	f8cc 4058 	str.w	r4, [ip, #88]	; 0x58
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8005006:	f8dc 4000 	ldr.w	r4, [ip]
 800500a:	b29b      	uxth	r3, r3
 800500c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800500e:	0c00      	lsrs	r0, r0, #16
 8005010:	0400      	lsls	r0, r0, #16
 8005012:	4303      	orrs	r3, r0
 8005014:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hdma->XferHalfCpltCallback != NULL)
 8005016:	f8dc 0064 	ldr.w	r0, [ip, #100]	; 0x64
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800501a:	60e5      	str	r5, [r4, #12]
  hdma->Instance->CSAR = SrcAddress;
 800501c:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdma->Instance->CDAR = DstAddress;
 800501e:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005020:	6963      	ldr	r3, [r4, #20]
 8005022:	f443 43ba 	orr.w	r3, r3, #23808	; 0x5d00
 8005026:	6163      	str	r3, [r4, #20]
    if (hdma->XferHalfCpltCallback != NULL)
 8005028:	b118      	cbz	r0, 8005032 <HAL_DMA_Start_IT+0x5e>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800502a:	6963      	ldr	r3, [r4, #20]
 800502c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005030:	6163      	str	r3, [r4, #20]
    if (hdma->XferSuspendCallback != NULL)
 8005032:	f8dc 3070 	ldr.w	r3, [ip, #112]	; 0x70
 8005036:	b11b      	cbz	r3, 8005040 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8005038:	6963      	ldr	r3, [r4, #20]
 800503a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800503e:	6163      	str	r3, [r4, #20]
    __HAL_DMA_ENABLE(hdma);
 8005040:	6963      	ldr	r3, [r4, #20]
  return HAL_OK;
 8005042:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005044:	f043 0301 	orr.w	r3, r3, #1
 8005048:	6163      	str	r3, [r4, #20]
}
 800504a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800504c:	2001      	movs	r0, #1
}
 800504e:	bd30      	pop	{r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005050:	2340      	movs	r3, #64	; 0x40
    __HAL_UNLOCK(hdma);
 8005052:	f88c 404c 	strb.w	r4, [ip, #76]	; 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005056:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
}
 800505a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdma);
 800505c:	2002      	movs	r0, #2
}
 800505e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005060:	2001      	movs	r0, #1
}
 8005062:	4770      	bx	lr

08005064 <HAL_DMA_Abort>:
{
 8005064:	b538      	push	{r3, r4, r5, lr}
 8005066:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 8005068:	f7ff fc76 	bl	8004958 <HAL_GetTick>
  if (hdma == NULL)
 800506c:	2c00      	cmp	r4, #0
 800506e:	d048      	beq.n	8005102 <HAL_DMA_Abort+0x9e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005070:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8005074:	2b02      	cmp	r3, #2
 8005076:	d12b      	bne.n	80050d0 <HAL_DMA_Abort+0x6c>
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005078:	2105      	movs	r1, #5
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	4605      	mov	r5, r0
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	f042 0204 	orr.w	r2, r2, #4
 8005084:	615a      	str	r2, [r3, #20]
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8005086:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800508a:	e005      	b.n	8005098 <HAL_DMA_Abort+0x34>
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800508c:	f7ff fc64 	bl	8004958 <HAL_GetTick>
 8005090:	1b43      	subs	r3, r0, r5
 8005092:	2b05      	cmp	r3, #5
 8005094:	d823      	bhi.n	80050de <HAL_DMA_Abort+0x7a>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	691a      	ldr	r2, [r3, #16]
 800509a:	0491      	lsls	r1, r2, #18
 800509c:	d5f6      	bpl.n	800508c <HAL_DMA_Abort+0x28>
    hdma->State = HAL_DMA_STATE_ABORT;
 800509e:	2504      	movs	r5, #4
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80050a0:	f44f 40fe 	mov.w	r0, #32512	; 0x7f00
    hdma->State = HAL_DMA_STATE_READY;
 80050a4:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80050a6:	695a      	ldr	r2, [r3, #20]
 80050a8:	f042 0202 	orr.w	r2, r2, #2
 80050ac:	615a      	str	r2, [r3, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hdma->State = HAL_DMA_STATE_ABORT;
 80050b0:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050b4:	0612      	lsls	r2, r2, #24
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80050b6:	60d8      	str	r0, [r3, #12]
    hdma->State = HAL_DMA_STATE_READY;
 80050b8:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050bc:	d503      	bpl.n	80050c6 <HAL_DMA_Abort+0x62>
      hdma->Instance->CBR1 = 0U;
 80050be:	2200      	movs	r2, #0
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80050c0:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80050c2:	7301      	strb	r1, [r0, #12]
      hdma->Instance->CBR1 = 0U;
 80050c4:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_UNLOCK(hdma);
 80050c6:	2300      	movs	r3, #0
 80050c8:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 80050cc:	4618      	mov	r0, r3
}
 80050ce:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hdma);
 80050d0:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050d2:	2220      	movs	r2, #32
    __HAL_UNLOCK(hdma);
 80050d4:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return HAL_ERROR;
 80050d8:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050da:	65a2      	str	r2, [r4, #88]	; 0x58
}
 80050dc:	bd38      	pop	{r3, r4, r5, pc}
        hdma->State = HAL_DMA_STATE_ERROR;
 80050de:	2103      	movs	r1, #3
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80050e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80050e4:	f043 0310 	orr.w	r3, r3, #16
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050e8:	0610      	lsls	r0, r2, #24
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 80050ea:	65a3      	str	r3, [r4, #88]	; 0x58
        hdma->State = HAL_DMA_STATE_ERROR;
 80050ec:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80050f0:	d502      	bpl.n	80050f8 <HAL_DMA_Abort+0x94>
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80050f2:	2201      	movs	r2, #1
 80050f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80050f6:	731a      	strb	r2, [r3, #12]
        __HAL_UNLOCK(hdma);
 80050f8:	2300      	movs	r3, #0
 80050fa:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
        return HAL_ERROR;
 80050fe:	2001      	movs	r0, #1
}
 8005100:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005102:	2001      	movs	r0, #1
}
 8005104:	bd38      	pop	{r3, r4, r5, pc}
 8005106:	bf00      	nop

08005108 <HAL_DMA_Abort_IT>:
  if (hdma == NULL)
 8005108:	4603      	mov	r3, r0
 800510a:	b190      	cbz	r0, 8005132 <HAL_DMA_Abort_IT+0x2a>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800510c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8005110:	2a02      	cmp	r2, #2
 8005112:	d003      	beq.n	800511c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005114:	2220      	movs	r2, #32
    return HAL_ERROR;
 8005116:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005118:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 800511a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800511c:	2104      	movs	r1, #4
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800511e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005120:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005124:	6953      	ldr	r3, [r2, #20]
  return HAL_OK;
 8005126:	2000      	movs	r0, #0
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8005128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800512c:	430b      	orrs	r3, r1
 800512e:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8005130:	4770      	bx	lr
    return HAL_ERROR;
 8005132:	2001      	movs	r0, #1
}
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop

08005138 <HAL_DMA_IRQHandler>:
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005138:	2101      	movs	r1, #1
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800513a:	6803      	ldr	r3, [r0, #0]
{
 800513c:	b510      	push	{r4, lr}
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800513e:	f3c3 020b 	ubfx	r2, r3, #0, #12
{
 8005142:	4604      	mov	r4, r0
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8005144:	f423 607f 	bic.w	r0, r3, #4080	; 0xff0
 8005148:	f020 000f 	bic.w	r0, r0, #15
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800514c:	3a50      	subs	r2, #80	; 0x50
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800514e:	68c0      	ldr	r0, [r0, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8005150:	f3c2 12c4 	ubfx	r2, r2, #7, #5
 8005154:	fa01 f202 	lsl.w	r2, r1, r2
  if (global_active_flag_ns == 0U)
 8005158:	4202      	tst	r2, r0
 800515a:	f000 80a4 	beq.w	80052a6 <HAL_DMA_IRQHandler+0x16e>
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	0552      	lsls	r2, r2, #21
 8005162:	d508      	bpl.n	8005176 <HAL_DMA_IRQHandler+0x3e>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	0550      	lsls	r0, r2, #21
 8005168:	d505      	bpl.n	8005176 <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 800516a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800516e:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8005170:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005172:	430a      	orrs	r2, r1
 8005174:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	0511      	lsls	r1, r2, #20
 800517a:	d509      	bpl.n	8005190 <HAL_DMA_IRQHandler+0x58>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	0512      	lsls	r2, r2, #20
 8005180:	d506      	bpl.n	8005190 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8005182:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005186:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8005188:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800518a:	f042 0202 	orr.w	r2, r2, #2
 800518e:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	04d0      	lsls	r0, r2, #19
 8005194:	d509      	bpl.n	80051aa <HAL_DMA_IRQHandler+0x72>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8005196:	695a      	ldr	r2, [r3, #20]
 8005198:	04d1      	lsls	r1, r2, #19
 800519a:	d506      	bpl.n	80051aa <HAL_DMA_IRQHandler+0x72>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 800519c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051a0:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80051a2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80051a4:	f042 0204 	orr.w	r2, r2, #4
 80051a8:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	0452      	lsls	r2, r2, #17
 80051ae:	d509      	bpl.n	80051c4 <HAL_DMA_IRQHandler+0x8c>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80051b0:	695a      	ldr	r2, [r3, #20]
 80051b2:	0450      	lsls	r0, r2, #17
 80051b4:	d506      	bpl.n	80051c4 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80051b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051ba:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80051bc:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 80051c4:	691a      	ldr	r2, [r3, #16]
 80051c6:	0591      	lsls	r1, r2, #22
 80051c8:	d50a      	bpl.n	80051e0 <HAL_DMA_IRQHandler+0xa8>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80051ca:	695a      	ldr	r2, [r3, #20]
 80051cc:	0592      	lsls	r2, r2, #22
 80051ce:	d507      	bpl.n	80051e0 <HAL_DMA_IRQHandler+0xa8>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80051d0:	f44f 7100 	mov.w	r1, #512	; 0x200
      if (hdma->XferHalfCpltCallback != NULL)
 80051d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 80051d6:	60d9      	str	r1, [r3, #12]
      if (hdma->XferHalfCpltCallback != NULL)
 80051d8:	b112      	cbz	r2, 80051e0 <HAL_DMA_IRQHandler+0xa8>
        hdma->XferHalfCpltCallback(hdma);
 80051da:	4620      	mov	r0, r4
 80051dc:	4790      	blx	r2
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	0490      	lsls	r0, r2, #18
 80051e4:	d511      	bpl.n	800520a <HAL_DMA_IRQHandler+0xd2>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 80051e6:	695a      	ldr	r2, [r3, #20]
 80051e8:	0491      	lsls	r1, r2, #18
 80051ea:	d50e      	bpl.n	800520a <HAL_DMA_IRQHandler+0xd2>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 80051ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051f0:	60da      	str	r2, [r3, #12]
      if (hdma->State == HAL_DMA_STATE_ABORT)
 80051f2:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 80051f6:	2a04      	cmp	r2, #4
 80051f8:	d03d      	beq.n	8005276 <HAL_DMA_IRQHandler+0x13e>
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80051fa:	2105      	movs	r1, #5
        if (hdma->XferSuspendCallback != NULL)
 80051fc:	6f22      	ldr	r2, [r4, #112]	; 0x70
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80051fe:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if (hdma->XferSuspendCallback != NULL)
 8005202:	b112      	cbz	r2, 800520a <HAL_DMA_IRQHandler+0xd2>
          hdma->XferSuspendCallback(hdma);
 8005204:	4620      	mov	r0, r4
 8005206:	4790      	blx	r2
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	05d0      	lsls	r0, r2, #23
 800520e:	d518      	bpl.n	8005242 <HAL_DMA_IRQHandler+0x10a>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005210:	695a      	ldr	r2, [r3, #20]
 8005212:	05d1      	lsls	r1, r2, #23
 8005214:	d515      	bpl.n	8005242 <HAL_DMA_IRQHandler+0x10a>
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005216:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005218:	0612      	lsls	r2, r2, #24
 800521a:	d545      	bpl.n	80052a8 <HAL_DMA_IRQHandler+0x170>
        if (hdma->Instance->CLLR == 0U)
 800521c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800521e:	b932      	cbnz	r2, 800522e <HAL_DMA_IRQHandler+0xf6>
          if (hdma->Instance->CBR1 == 0U)
 8005220:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005222:	b922      	cbnz	r2, 800522e <HAL_DMA_IRQHandler+0xf6>
            hdma->State = HAL_DMA_STATE_READY;
 8005224:	2201      	movs	r2, #1
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005226:	6f61      	ldr	r1, [r4, #116]	; 0x74
            hdma->State = HAL_DMA_STATE_READY;
 8005228:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800522c:	730a      	strb	r2, [r1, #12]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800522e:	f44f 7040 	mov.w	r0, #768	; 0x300
      __HAL_UNLOCK(hdma);
 8005232:	2100      	movs	r1, #0
      if (hdma->XferCpltCallback != NULL)
 8005234:	6e22      	ldr	r2, [r4, #96]	; 0x60
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8005236:	60d8      	str	r0, [r3, #12]
      __HAL_UNLOCK(hdma);
 8005238:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
      if (hdma->XferCpltCallback != NULL)
 800523c:	b10a      	cbz	r2, 8005242 <HAL_DMA_IRQHandler+0x10a>
        hdma->XferCpltCallback(hdma);
 800523e:	4620      	mov	r0, r4
 8005240:	4790      	blx	r2
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005242:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005244:	2b00      	cmp	r3, #0
 8005246:	d02e      	beq.n	80052a6 <HAL_DMA_IRQHandler+0x16e>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005248:	6822      	ldr	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;
 800524a:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800524c:	6953      	ldr	r3, [r2, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800524e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8005250:	f043 0302 	orr.w	r3, r3, #2
 8005254:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hdma);
 8005256:	2200      	movs	r2, #0
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005258:	0603      	lsls	r3, r0, #24
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800525a:	bf48      	it	mi
 800525c:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
    hdma->State = HAL_DMA_STATE_READY;
 800525e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005262:	bf48      	it	mi
 8005264:	7319      	strbmi	r1, [r3, #12]
    if (hdma->XferErrorCallback != NULL)
 8005266:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    __HAL_UNLOCK(hdma);
 8005268:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if (hdma->XferErrorCallback != NULL)
 800526c:	b1db      	cbz	r3, 80052a6 <HAL_DMA_IRQHandler+0x16e>
      hdma->XferErrorCallback(hdma);
 800526e:	4620      	mov	r0, r4
}
 8005270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hdma->XferErrorCallback(hdma);
 8005274:	4718      	bx	r3
        hdma->State = HAL_DMA_STATE_READY;
 8005276:	2101      	movs	r1, #1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8005278:	695a      	ldr	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800527a:	6d20      	ldr	r0, [r4, #80]	; 0x50
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 800527c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005280:	615a      	str	r2, [r3, #20]
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	f042 0202 	orr.w	r2, r2, #2
 8005288:	615a      	str	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800528a:	0602      	lsls	r2, r0, #24
        hdma->State = HAL_DMA_STATE_READY;
 800528c:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8005290:	d503      	bpl.n	800529a <HAL_DMA_IRQHandler+0x162>
          hdma->Instance->CBR1 = 0U;
 8005292:	2200      	movs	r2, #0
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8005294:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005296:	7301      	strb	r1, [r0, #12]
          hdma->Instance->CBR1 = 0U;
 8005298:	649a      	str	r2, [r3, #72]	; 0x48
        __HAL_UNLOCK(hdma);
 800529a:	2200      	movs	r2, #0
        if (hdma->XferAbortCallback != NULL)
 800529c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        __HAL_UNLOCK(hdma);
 800529e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
        if (hdma->XferAbortCallback != NULL)
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e3      	bne.n	800526e <HAL_DMA_IRQHandler+0x136>
}
 80052a6:	bd10      	pop	{r4, pc}
        if (hdma->Instance->CBR1 == 0U)
 80052a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052aa:	2a00      	cmp	r2, #0
 80052ac:	d1bf      	bne.n	800522e <HAL_DMA_IRQHandler+0xf6>
          hdma->State = HAL_DMA_STATE_READY;
 80052ae:	2201      	movs	r2, #1
 80052b0:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80052b4:	e7bb      	b.n	800522e <HAL_DMA_IRQHandler+0xf6>
 80052b6:	bf00      	nop

080052b8 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 80052b8:	b1e8      	cbz	r0, 80052f6 <HAL_DMA_ConfigChannelAttributes+0x3e>
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80052ba:	f011 0310 	ands.w	r3, r1, #16
 80052be:	d018      	beq.n	80052f2 <HAL_DMA_ConfigChannelAttributes+0x3a>
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80052c0:	f04f 0c01 	mov.w	ip, #1
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80052c4:	6803      	ldr	r3, [r0, #0]
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80052c6:	f001 0111 	and.w	r1, r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80052ca:	f3c3 020b 	ubfx	r2, r3, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80052ce:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80052d2:	f023 030f 	bic.w	r3, r3, #15
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80052d6:	3a50      	subs	r2, #80	; 0x50
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80052d8:	2911      	cmp	r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80052da:	f3c2 12c4 	ubfx	r2, r2, #7, #5
      p_dma_instance->PRIVCFGR |= channel_idx;
 80052de:	6859      	ldr	r1, [r3, #4]
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80052e0:	fa0c f202 	lsl.w	r2, ip, r2
      p_dma_instance->PRIVCFGR |= channel_idx;
 80052e4:	bf0c      	ite	eq
 80052e6:	430a      	orreq	r2, r1
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80052e8:	ea21 0202 	bicne.w	r2, r1, r2
  return HAL_OK;
 80052ec:	2000      	movs	r0, #0
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 80052ee:	605a      	str	r2, [r3, #4]
 80052f0:	4770      	bx	lr
  return HAL_OK;
 80052f2:	4618      	mov	r0, r3
}
 80052f4:	4770      	bx	lr
    return HAL_ERROR;
 80052f6:	2001      	movs	r0, #1
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop

080052fc <HAL_DMAEx_List_Start_IT>:
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 80052fc:	b1f8      	cbz	r0, 800533e <HAL_DMAEx_List_Start_IT+0x42>
 80052fe:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8005300:	4603      	mov	r3, r0
 8005302:	b1e2      	cbz	r2, 800533e <HAL_DMAEx_List_Start_IT+0x42>
  {
    return HAL_ERROR;
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 8005304:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8005306:	b1d1      	cbz	r1, 800533e <HAL_DMAEx_List_Start_IT+0x42>
{
 8005308:	b410      	push	{r4}
  {
    return HAL_ERROR;
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800530a:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800530e:	6819      	ldr	r1, [r3, #0]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8005310:	2801      	cmp	r0, #1
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8005312:	694c      	ldr	r4, [r1, #20]
  dma_state = hdma->State;
 8005314:	fa5f fc80 	uxtb.w	ip, r0
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8005318:	d004      	beq.n	8005324 <HAL_DMAEx_List_Start_IT+0x28>
 800531a:	f1bc 0f02 	cmp.w	ip, #2
 800531e:	d110      	bne.n	8005342 <HAL_DMAEx_List_Start_IT+0x46>
 8005320:	03e0      	lsls	r0, r4, #15
 8005322:	d50e      	bpl.n	8005342 <HAL_DMAEx_List_Start_IT+0x46>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8005324:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8005328:	2801      	cmp	r0, #1
 800532a:	b2c4      	uxtb	r4, r0
 800532c:	d012      	beq.n	8005354 <HAL_DMAEx_List_Start_IT+0x58>
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 800532e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005330:	694b      	ldr	r3, [r1, #20]
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	614b      	str	r3, [r1, #20]
}
 8005338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800533c:	4770      	bx	lr
    return HAL_ERROR;
 800533e:	2001      	movs	r0, #1
}
 8005340:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 8005342:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005344:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(hdma);
 8005346:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800534a:	2001      	movs	r0, #1
}
 800534c:	f85d 4b04 	ldr.w	r4, [sp], #4
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005350:	6599      	str	r1, [r3, #88]	; 0x58
}
 8005352:	4770      	bx	lr
      __HAL_LOCK(hdma);
 8005354:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 8005358:	2801      	cmp	r0, #1
 800535a:	d02b      	beq.n	80053b4 <HAL_DMAEx_List_Start_IT+0xb8>
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800535c:	2000      	movs	r0, #0
      hdma->State                  = HAL_DMA_STATE_BUSY;
 800535e:	f04f 0c02 	mov.w	ip, #2
      __HAL_LOCK(hdma);
 8005362:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8005366:	f883 c054 	strb.w	ip, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800536a:	f882 c00c 	strb.w	ip, [r2, #12]
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 800536e:	6598      	str	r0, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005370:	6110      	str	r0, [r2, #16]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005372:	6948      	ldr	r0, [r1, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8005374:	6e5c      	ldr	r4, [r3, #100]	; 0x64
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8005376:	f440 40ba 	orr.w	r0, r0, #23808	; 0x5d00
 800537a:	6148      	str	r0, [r1, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 800537c:	b11c      	cbz	r4, 8005386 <HAL_DMAEx_List_Start_IT+0x8a>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800537e:	6948      	ldr	r0, [r1, #20]
 8005380:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8005384:	6148      	str	r0, [r1, #20]
      if (hdma->XferSuspendCallback != NULL)
 8005386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005388:	b11b      	cbz	r3, 8005392 <HAL_DMAEx_List_Start_IT+0x96>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800538a:	694b      	ldr	r3, [r1, #20]
 800538c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005390:	614b      	str	r3, [r1, #20]
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8005392:	6813      	ldr	r3, [r2, #0]
  else
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005394:	4808      	ldr	r0, [pc, #32]	; (80053b8 <HAL_DMAEx_List_Start_IT+0xbc>)
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005396:	6a1c      	ldr	r4, [r3, #32]
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005398:	4a08      	ldr	r2, [pc, #32]	; (80053bc <HAL_DMAEx_List_Start_IT+0xc0>)
 800539a:	f014 0f02 	tst.w	r4, #2
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 800539e:	f64f 74fc 	movw	r4, #65532	; 0xfffc
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 80053a2:	bf08      	it	eq
 80053a4:	4602      	moveq	r2, r0
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80053a6:	0c18      	lsrs	r0, r3, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80053a8:	4023      	ands	r3, r4
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80053aa:	0400      	lsls	r0, r0, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80053ac:	4313      	orrs	r3, r2
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 80053ae:	6008      	str	r0, [r1, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 80053b0:	67cb      	str	r3, [r1, #124]	; 0x7c
 80053b2:	e7bc      	b.n	800532e <HAL_DMAEx_List_Start_IT+0x32>
      __HAL_LOCK(hdma);
 80053b4:	2002      	movs	r0, #2
 80053b6:	e7bf      	b.n	8005338 <HAL_DMAEx_List_Start_IT+0x3c>
 80053b8:	f8010000 	.word	0xf8010000
 80053bc:	fe010000 	.word	0xfe010000

080053c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80053c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80053c4:	680c      	ldr	r4, [r1, #0]
{
 80053c6:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80053c8:	2c00      	cmp	r4, #0
 80053ca:	f000 80c8 	beq.w	800555e <HAL_GPIO_Init+0x19e>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80053ce:	4a65      	ldr	r2, [pc, #404]	; (8005564 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0U;
 80053d0:	2300      	movs	r3, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80053d2:	ea02 2290 	and.w	r2, r2, r0, lsr #10
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80053d6:	4e64      	ldr	r6, [pc, #400]	; (8005568 <HAL_GPIO_Init+0x1a8>)
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80053d8:	9201      	str	r2, [sp, #4]
 80053da:	e068      	b.n	80054ae <HAL_GPIO_Init+0xee>
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80053dc:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 80053de:	f8d0 b000 	ldr.w	fp, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80053e2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80053e6:	fa07 f70c 	lsl.w	r7, r7, ip
 80053ea:	ea2b 0b07 	bic.w	fp, fp, r7
 80053ee:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80053f0:	f002 0903 	and.w	r9, r2, #3
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80053f4:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80053f8:	fa09 fa0c 	lsl.w	sl, r9, ip
 80053fc:	ea4a 0a0b 	orr.w	sl, sl, fp
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005400:	f1be 0f01 	cmp.w	lr, #1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005404:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 8005406:	f8c0 a000 	str.w	sl, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800540a:	f240 8088 	bls.w	800551e <HAL_GPIO_Init+0x15e>
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800540e:	f1b9 0f03 	cmp.w	r9, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8005412:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8005414:	f000 809f 	beq.w	8005556 <HAL_GPIO_Init+0x196>
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005418:	fa05 f50c 	lsl.w	r5, r5, ip
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800541c:	9f00      	ldr	r7, [sp, #0]
        tmp = GPIOx->PUPDR;
 800541e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005422:	ea0c 0707 	and.w	r7, ip, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8005426:	433d      	orrs	r5, r7
        GPIOx->PUPDR = tmp;
 8005428:	60c5      	str	r5, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800542a:	00d5      	lsls	r5, r2, #3
 800542c:	d53b      	bpl.n	80054a6 <HAL_GPIO_Init+0xe6>
        tmp = EXTI->EXTICR[position >> 2U];
 800542e:	f023 0703 	bic.w	r7, r3, #3
 8005432:	f107 4988 	add.w	r9, r7, #1140850688	; 0x44000000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005436:	270f      	movs	r7, #15
 8005438:	f003 0503 	and.w	r5, r3, #3
 800543c:	00ed      	lsls	r5, r5, #3
 800543e:	fa07 fe05 	lsl.w	lr, r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005442:	9f01      	ldr	r7, [sp, #4]
 8005444:	f509 3908 	add.w	r9, r9, #139264	; 0x22000
 8005448:	fa07 f505 	lsl.w	r5, r7, r5
        tmp &= ~((uint32_t)iocurrent);
 800544c:	ea6f 0708 	mvn.w	r7, r8
        tmp = EXTI->EXTICR[position >> 2U];
 8005450:	f8d9 c060 	ldr.w	ip, [r9, #96]	; 0x60
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005454:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005458:	ea2c 0c0e 	bic.w	ip, ip, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800545c:	ea45 050c 	orr.w	r5, r5, ip
        EXTI->EXTICR[position >> 2U] = tmp;
 8005460:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
        tmp = EXTI->RTSR1;
 8005464:	6835      	ldr	r5, [r6, #0]
        tmp &= ~((uint32_t)iocurrent);
 8005466:	bf0c      	ite	eq
 8005468:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 800546a:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->RTSR1 = tmp;
 800546e:	6035      	str	r5, [r6, #0]

        tmp = EXTI->FTSR1;
 8005470:	6875      	ldr	r5, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005472:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8005476:	bf0c      	ite	eq
 8005478:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 800547a:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->FTSR1 = tmp;
 800547e:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8005480:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005484:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8005488:	bf0c      	ite	eq
 800548a:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 800548c:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->EMR1 = tmp;
 8005490:	f8c6 5084 	str.w	r5, [r6, #132]	; 0x84

        tmp = EXTI->IMR1;
 8005494:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005498:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 800549a:	bf54      	ite	pl
 800549c:	403d      	andpl	r5, r7
        {
          tmp |= iocurrent;
 800549e:	ea48 0505 	orrmi.w	r5, r8, r5
        }
        EXTI->IMR1 = tmp;
 80054a2:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
      }
    }

    position++;
 80054a6:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80054a8:	fa34 f203 	lsrs.w	r2, r4, r3
 80054ac:	d057      	beq.n	800555e <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80054ae:	2201      	movs	r2, #1
 80054b0:	fa02 f503 	lsl.w	r5, r2, r3
    if (iocurrent != 0U)
 80054b4:	ea15 0804 	ands.w	r8, r5, r4
 80054b8:	d0f5      	beq.n	80054a6 <HAL_GPIO_Init+0xe6>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80054ba:	684a      	ldr	r2, [r1, #4]
 80054bc:	f022 0e10 	bic.w	lr, r2, #16
 80054c0:	f1be 0f02 	cmp.w	lr, #2
 80054c4:	d18a      	bne.n	80053dc <HAL_GPIO_Init+0x1c>
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054c6:	f04f 090f 	mov.w	r9, #15
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054ca:	690f      	ldr	r7, [r1, #16]
        tmp = GPIOx->AFR[position >> 3U];
 80054cc:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054d0:	f003 0c07 	and.w	ip, r3, #7
 80054d4:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80054d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054dc:	f007 070f 	and.w	r7, r7, #15
 80054e0:	fa07 f70c 	lsl.w	r7, r7, ip
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054e4:	fa09 fc0c 	lsl.w	ip, r9, ip
        tmp = GPIOx->AFR[position >> 3U];
 80054e8:	f8de 9020 	ldr.w	r9, [lr, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054ec:	ea29 0c0c 	bic.w	ip, r9, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80054f0:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = tmp;
 80054f4:	f8ce 7020 	str.w	r7, [lr, #32]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80054f8:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 80054fa:	f8d0 a000 	ldr.w	sl, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80054fe:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005502:	fa07 f70c 	lsl.w	r7, r7, ip
 8005506:	ea2a 0a07 	bic.w	sl, sl, r7
 800550a:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800550c:	f002 0903 	and.w	r9, r2, #3
 8005510:	fa09 fe0c 	lsl.w	lr, r9, ip
 8005514:	ea4e 0e0a 	orr.w	lr, lr, sl
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8005518:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 800551a:	f8c0 e000 	str.w	lr, [r0]
        tmp = GPIOx->OSPEEDR;
 800551e:	f8d0 e008 	ldr.w	lr, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005522:	9f00      	ldr	r7, [sp, #0]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8005524:	f1b9 0f03 	cmp.w	r9, #3
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005528:	ea0e 0e07 	and.w	lr, lr, r7
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800552c:	68cf      	ldr	r7, [r1, #12]
 800552e:	fa07 fa0c 	lsl.w	sl, r7, ip
 8005532:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = tmp;
 8005536:	f8c0 e008 	str.w	lr, [r0, #8]
        tmp = GPIOx->OTYPER;
 800553a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800553e:	ea2e 0e05 	bic.w	lr, lr, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005542:	f3c2 1500 	ubfx	r5, r2, #4, #1
 8005546:	fa05 f503 	lsl.w	r5, r5, r3
 800554a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = tmp;
 800554e:	6045      	str	r5, [r0, #4]
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8005550:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8005552:	f47f af61 	bne.w	8005418 <HAL_GPIO_Init+0x58>
 8005556:	2d01      	cmp	r5, #1
 8005558:	f47f af5e 	bne.w	8005418 <HAL_GPIO_Init+0x58>
 800555c:	e765      	b.n	800542a <HAL_GPIO_Init+0x6a>
  }
}
 800555e:	b003      	add	sp, #12
 8005560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005564:	002f7f7f 	.word	0x002f7f7f
 8005568:	44022000 	.word	0x44022000

0800556c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800556c:	2900      	cmp	r1, #0
 800556e:	d064      	beq.n	800563a <HAL_GPIO_DeInit+0xce>
{
 8005570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0U;
 8005574:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005576:	f04f 0b01 	mov.w	fp, #1
    if (iocurrent != 0U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800557a:	f04f 080f 	mov.w	r8, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 800557e:	4a2f      	ldr	r2, [pc, #188]	; (800563c <HAL_GPIO_DeInit+0xd0>)
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005580:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8005640 <HAL_GPIO_DeInit+0xd4>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8005584:	ea02 2a90 	and.w	sl, r2, r0, lsr #10

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
    }

    position++;
 8005588:	f023 0403 	bic.w	r4, r3, #3
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800558c:	f003 0203 	and.w	r2, r3, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 8005590:	fa0b f503 	lsl.w	r5, fp, r3
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8005594:	00d2      	lsls	r2, r2, #3
 8005596:	f104 4488 	add.w	r4, r4, #1140850688	; 0x44000000
    if (iocurrent != 0U)
 800559a:	ea15 0e01 	ands.w	lr, r5, r1
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800559e:	fa08 f702 	lsl.w	r7, r8, r2
 80055a2:	f504 3408 	add.w	r4, r4, #139264	; 0x22000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80055a6:	fa0a f202 	lsl.w	r2, sl, r2
    if (iocurrent != 0U)
 80055aa:	d040      	beq.n	800562e <HAL_GPIO_DeInit+0xc2>
      tmp = EXTI->EXTICR[position >> 2U];
 80055ac:	6e26      	ldr	r6, [r4, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80055ae:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80055b2:	403e      	ands	r6, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 80055b4:	42b2      	cmp	r2, r6
 80055b6:	d11b      	bne.n	80055f0 <HAL_GPIO_DeInit+0x84>
        EXTI->IMR1 &= ~(iocurrent);
 80055b8:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
 80055bc:	ea22 020e 	bic.w	r2, r2, lr
 80055c0:	f8c9 2080 	str.w	r2, [r9, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80055c4:	f8d9 2084 	ldr.w	r2, [r9, #132]	; 0x84
 80055c8:	ea22 020e 	bic.w	r2, r2, lr
 80055cc:	f8c9 2084 	str.w	r2, [r9, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 80055d0:	f8d9 2000 	ldr.w	r2, [r9]
 80055d4:	ea22 020e 	bic.w	r2, r2, lr
 80055d8:	f8c9 2000 	str.w	r2, [r9]
        EXTI->FTSR1 &= ~(iocurrent);
 80055dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80055e0:	ea22 020e 	bic.w	r2, r2, lr
 80055e4:	f8c9 2004 	str.w	r2, [r9, #4]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 80055e8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80055ea:	ea22 0707 	bic.w	r7, r2, r7
 80055ee:	6627      	str	r7, [r4, #96]	; 0x60
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80055f0:	2203      	movs	r2, #3
 80055f2:	6806      	ldr	r6, [r0, #0]
 80055f4:	fa02 f40c 	lsl.w	r4, r2, ip
 80055f8:	4326      	orrs	r6, r4
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80055fa:	fa23 f202 	lsr.w	r2, r3, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80055fe:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8005600:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8005604:	f003 0607 	and.w	r6, r3, #7
 8005608:	6a17      	ldr	r7, [r2, #32]
 800560a:	00b6      	lsls	r6, r6, #2
 800560c:	fa08 f606 	lsl.w	r6, r8, r6
 8005610:	ea27 0606 	bic.w	r6, r7, r6
 8005614:	6216      	str	r6, [r2, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8005616:	6882      	ldr	r2, [r0, #8]
 8005618:	ea22 0204 	bic.w	r2, r2, r4
 800561c:	6082      	str	r2, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800561e:	6842      	ldr	r2, [r0, #4]
 8005620:	ea22 0505 	bic.w	r5, r2, r5
 8005624:	6045      	str	r5, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8005626:	68c2      	ldr	r2, [r0, #12]
 8005628:	ea22 0404 	bic.w	r4, r2, r4
 800562c:	60c4      	str	r4, [r0, #12]
    position++;
 800562e:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8005630:	fa31 f203 	lsrs.w	r2, r1, r3
 8005634:	d1a8      	bne.n	8005588 <HAL_GPIO_DeInit+0x1c>
  }
}
 8005636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800563a:	4770      	bx	lr
 800563c:	002f7f7f 	.word	0x002f7f7f
 8005640:	44022000 	.word	0x44022000

08005644 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005644:	b10a      	cbz	r2, 800564a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005646:	6181      	str	r1, [r0, #24]
 8005648:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800564a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop

08005650 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005650:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005652:	ea01 0203 	and.w	r2, r1, r3
 8005656:	ea21 0103 	bic.w	r1, r1, r3
 800565a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800565e:	6181      	str	r1, [r0, #24]
}
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop

08005664 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005664:	4a03      	ldr	r2, [pc, #12]	; (8005674 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8005666:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8005668:	6813      	ldr	r3, [r2, #0]
 800566a:	f043 0301 	orr.w	r3, r3, #1
 800566e:	6013      	str	r3, [r2, #0]
}
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40030400 	.word	0x40030400

08005678 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop

0800567c <HAL_RCC_GetSysClockFreq.part.0>:
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800567c:	4b42      	ldr	r3, [pc, #264]	; (8005788 <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	f002 0218 	and.w	r2, r2, #24
 8005684:	2a18      	cmp	r2, #24
 8005686:	d001      	beq.n	800568c <HAL_RCC_GetSysClockFreq.part.0+0x10>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8005688:	4840      	ldr	r0, [pc, #256]	; (800578c <HAL_RCC_GetSysClockFreq.part.0+0x110>)
  }

  return sysclockfreq;
}
 800568a:	4770      	bx	lr
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800568c:	6a99      	ldr	r1, [r3, #40]	; 0x28
uint32_t HAL_RCC_GetSysClockFreq(void)
 800568e:	b430      	push	{r4, r5}
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8005690:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if (pllm != 0U)
 8005694:	f414 5f7c 	tst.w	r4, #16128	; 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8005698:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800569a:	f3c4 2005 	ubfx	r0, r4, #8, #6
    if (pllm != 0U)
 800569e:	d039      	beq.n	8005714 <HAL_RCC_GetSysClockFreq.part.0+0x98>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80056a0:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80056a4:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80056a8:	fb05 f202 	mul.w	r2, r5, r2
 80056ac:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80056b0:	f001 0103 	and.w	r1, r1, #3
      switch (pllsource)
 80056b4:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80056b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      switch (pllsource)
 80056ba:	d03f      	beq.n	800573c <HAL_RCC_GetSysClockFreq.part.0+0xc0>
 80056bc:	2903      	cmp	r1, #3
 80056be:	d12b      	bne.n	8005718 <HAL_RCC_GetSysClockFreq.part.0+0x9c>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	ee05 0a90 	vmov	s11, r0
 80056c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ca:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ce:	eddf 6a30 	vldr	s13, [pc, #192]	; 8005790 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 80056d2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80056da:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80056de:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8005794 <HAL_RCC_GetSysClockFreq.part.0+0x118>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056ea:	eec5 6a25 	vdiv.f32	s13, s10, s11
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80056ee:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80056f6:	4b24      	ldr	r3, [pc, #144]	; (8005788 <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 80056f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056fa:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80056fe:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005700:	ee07 3a10 	vmov	s14, r3
 8005704:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005708:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800570c:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8005710:	ee17 0a90 	vmov	r0, s15
}
 8005714:	bc30      	pop	{r4, r5}
 8005716:	4770      	bx	lr
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	ee05 0a90 	vmov	s11, r0
 800571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005722:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8005726:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8005790 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 800572a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800572e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005732:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8005736:	ed9f 5a18 	vldr	s10, [pc, #96]	; 8005798 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 800573a:	e7d2      	b.n	80056e2 <HAL_RCC_GetSysClockFreq.part.0+0x66>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	0692      	lsls	r2, r2, #26
 8005740:	d5be      	bpl.n	80056c0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005742:	6819      	ldr	r1, [r3, #0]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005746:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8005790 <HAL_RCC_GetSysClockFreq.part.0+0x114>
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee06 3a90 	vmov	s13, r3
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005752:	4a0e      	ldr	r2, [pc, #56]	; (800578c <HAL_RCC_GetSysClockFreq.part.0+0x110>)
 8005754:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8005758:	40da      	lsrs	r2, r3
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800575a:	ee05 0a90 	vmov	s11, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800575e:	ee67 7a87 	vmul.f32	s15, s15, s14
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005762:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8005766:	ee06 2a10 	vmov	s12, r2
 800576a:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 800576e:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8005772:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577a:	ee86 7a05 	vdiv.f32	s14, s12, s10
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800577e:	ee77 7aa5 	vadd.f32	s15, s15, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005786:	e7b6      	b.n	80056f6 <HAL_RCC_GetSysClockFreq.part.0+0x7a>
 8005788:	44020c00 	.word	0x44020c00
 800578c:	017d7840 	.word	0x017d7840
 8005790:	39000000 	.word	0x39000000
 8005794:	4bbebc20 	.word	0x4bbebc20
 8005798:	4a742400 	.word	0x4a742400

0800579c <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800579c:	4a0e      	ldr	r2, [pc, #56]	; (80057d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 800579e:	69d3      	ldr	r3, [r2, #28]
 80057a0:	f003 0318 	and.w	r3, r3, #24
 80057a4:	2b08      	cmp	r3, #8
 80057a6:	d015      	beq.n	80057d4 <HAL_RCC_GetSysClockFreq+0x38>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057a8:	69d3      	ldr	r3, [r2, #28]
 80057aa:	f013 0f18 	tst.w	r3, #24
 80057ae:	d108      	bne.n	80057c2 <HAL_RCC_GetSysClockFreq+0x26>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80057b0:	6813      	ldr	r3, [r2, #0]
 80057b2:	069b      	lsls	r3, r3, #26
 80057b4:	d50c      	bpl.n	80057d0 <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80057b6:	6813      	ldr	r3, [r2, #0]
 80057b8:	4808      	ldr	r0, [pc, #32]	; (80057dc <HAL_RCC_GetSysClockFreq+0x40>)
 80057ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80057be:	40d8      	lsrs	r0, r3
 80057c0:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80057c2:	69d3      	ldr	r3, [r2, #28]
 80057c4:	f003 0318 	and.w	r3, r3, #24
 80057c8:	2b10      	cmp	r3, #16
 80057ca:	d001      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x34>
 80057cc:	f7ff bf56 	b.w	800567c <HAL_RCC_GetSysClockFreq.part.0>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80057d0:	4802      	ldr	r0, [pc, #8]	; (80057dc <HAL_RCC_GetSysClockFreq+0x40>)
}
 80057d2:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 80057d4:	4802      	ldr	r0, [pc, #8]	; (80057e0 <HAL_RCC_GetSysClockFreq+0x44>)
 80057d6:	4770      	bx	lr
 80057d8:	44020c00 	.word	0x44020c00
 80057dc:	017d7840 	.word	0x017d7840
 80057e0:	003d0900 	.word	0x003d0900

080057e4 <HAL_RCC_ClockConfig>:
  if (pClkInitStruct == NULL)
 80057e4:	2800      	cmp	r0, #0
 80057e6:	f000 8115 	beq.w	8005a14 <HAL_RCC_ClockConfig+0x230>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057ea:	4a8e      	ldr	r2, [pc, #568]	; (8005a24 <HAL_RCC_ClockConfig+0x240>)
{
 80057ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80057f0:	6813      	ldr	r3, [r2, #0]
 80057f2:	4604      	mov	r4, r0
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	428b      	cmp	r3, r1
 80057fa:	460d      	mov	r5, r1
 80057fc:	d20c      	bcs.n	8005818 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057fe:	6813      	ldr	r3, [r2, #0]
 8005800:	f023 030f 	bic.w	r3, r3, #15
 8005804:	430b      	orrs	r3, r1
 8005806:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005808:	6813      	ldr	r3, [r2, #0]
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	428b      	cmp	r3, r1
 8005810:	d002      	beq.n	8005818 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005812:	2001      	movs	r0, #1
}
 8005814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	06de      	lsls	r6, r3, #27
 800581c:	d50d      	bpl.n	800583a <HAL_RCC_ClockConfig+0x56>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800581e:	4982      	ldr	r1, [pc, #520]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 8005820:	6960      	ldr	r0, [r4, #20]
 8005822:	6a0a      	ldr	r2, [r1, #32]
 8005824:	0a12      	lsrs	r2, r2, #8
 8005826:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800582a:	4290      	cmp	r0, r2
 800582c:	d905      	bls.n	800583a <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800582e:	6a0a      	ldr	r2, [r1, #32]
 8005830:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8005834:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005838:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800583a:	0718      	lsls	r0, r3, #28
 800583c:	d50d      	bpl.n	800585a <HAL_RCC_ClockConfig+0x76>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800583e:	497a      	ldr	r1, [pc, #488]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 8005840:	6920      	ldr	r0, [r4, #16]
 8005842:	6a0a      	ldr	r2, [r1, #32]
 8005844:	0912      	lsrs	r2, r2, #4
 8005846:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800584a:	4290      	cmp	r0, r2
 800584c:	d905      	bls.n	800585a <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800584e:	6a0a      	ldr	r2, [r1, #32]
 8005850:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005854:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8005858:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800585a:	0759      	lsls	r1, r3, #29
 800585c:	d50b      	bpl.n	8005876 <HAL_RCC_ClockConfig+0x92>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800585e:	4972      	ldr	r1, [pc, #456]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 8005860:	68e0      	ldr	r0, [r4, #12]
 8005862:	6a0a      	ldr	r2, [r1, #32]
 8005864:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005868:	4290      	cmp	r0, r2
 800586a:	d904      	bls.n	8005876 <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800586c:	6a0a      	ldr	r2, [r1, #32]
 800586e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005872:	4302      	orrs	r2, r0
 8005874:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005876:	079a      	lsls	r2, r3, #30
 8005878:	f140 8095 	bpl.w	80059a6 <HAL_RCC_ClockConfig+0x1c2>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800587c:	486a      	ldr	r0, [pc, #424]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 800587e:	68a1      	ldr	r1, [r4, #8]
 8005880:	6a02      	ldr	r2, [r0, #32]
 8005882:	f002 020f 	and.w	r2, r2, #15
 8005886:	4291      	cmp	r1, r2
 8005888:	d904      	bls.n	8005894 <HAL_RCC_ClockConfig+0xb0>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800588a:	6a02      	ldr	r2, [r0, #32]
 800588c:	f022 020f 	bic.w	r2, r2, #15
 8005890:	430a      	orrs	r2, r1
 8005892:	6202      	str	r2, [r0, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005894:	07d8      	lsls	r0, r3, #31
 8005896:	d52f      	bpl.n	80058f8 <HAL_RCC_ClockConfig+0x114>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005898:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800589a:	4b63      	ldr	r3, [pc, #396]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800589c:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800589e:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058a0:	f000 8089 	beq.w	80059b6 <HAL_RCC_ClockConfig+0x1d2>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058a4:	2a02      	cmp	r2, #2
 80058a6:	f000 80b1 	beq.w	8005a0c <HAL_RCC_ClockConfig+0x228>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058aa:	2a01      	cmp	r2, #1
 80058ac:	f000 80b6 	beq.w	8005a1c <HAL_RCC_ClockConfig+0x238>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b0:	0799      	lsls	r1, r3, #30
 80058b2:	d5ae      	bpl.n	8005812 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80058b4:	4e5c      	ldr	r6, [pc, #368]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80058b6:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80058ba:	69f3      	ldr	r3, [r6, #28]
 80058bc:	f023 0303 	bic.w	r3, r3, #3
 80058c0:	4313      	orrs	r3, r2
 80058c2:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 80058c4:	f7ff f848 	bl	8004958 <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c8:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80058ca:	4607      	mov	r7, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d07b      	beq.n	80059c8 <HAL_RCC_ClockConfig+0x1e4>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	f000 8084 	beq.w	80059de <HAL_RCC_ClockConfig+0x1fa>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d106      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x104>
 80058da:	e08b      	b.n	80059f4 <HAL_RCC_ClockConfig+0x210>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80058dc:	f7ff f83c 	bl	8004958 <HAL_GetTick>
 80058e0:	1bc0      	subs	r0, r0, r7
 80058e2:	4540      	cmp	r0, r8
 80058e4:	f200 8098 	bhi.w	8005a18 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80058e8:	69f3      	ldr	r3, [r6, #28]
 80058ea:	f013 0f18 	tst.w	r3, #24
 80058ee:	d1f5      	bne.n	80058dc <HAL_RCC_ClockConfig+0xf8>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	079a      	lsls	r2, r3, #30
 80058f4:	d506      	bpl.n	8005904 <HAL_RCC_ClockConfig+0x120>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80058f6:	68a1      	ldr	r1, [r4, #8]
 80058f8:	484b      	ldr	r0, [pc, #300]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 80058fa:	6a02      	ldr	r2, [r0, #32]
 80058fc:	f002 020f 	and.w	r2, r2, #15
 8005900:	428a      	cmp	r2, r1
 8005902:	d87d      	bhi.n	8005a00 <HAL_RCC_ClockConfig+0x21c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005904:	4947      	ldr	r1, [pc, #284]	; (8005a24 <HAL_RCC_ClockConfig+0x240>)
 8005906:	680a      	ldr	r2, [r1, #0]
 8005908:	f002 020f 	and.w	r2, r2, #15
 800590c:	42aa      	cmp	r2, r5
 800590e:	d90a      	bls.n	8005926 <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005910:	680a      	ldr	r2, [r1, #0]
 8005912:	f022 020f 	bic.w	r2, r2, #15
 8005916:	432a      	orrs	r2, r5
 8005918:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591a:	680a      	ldr	r2, [r1, #0]
 800591c:	f002 020f 	and.w	r2, r2, #15
 8005920:	42aa      	cmp	r2, r5
 8005922:	f47f af76 	bne.w	8005812 <HAL_RCC_ClockConfig+0x2e>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005926:	075f      	lsls	r7, r3, #29
 8005928:	d50b      	bpl.n	8005942 <HAL_RCC_ClockConfig+0x15e>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800592a:	493f      	ldr	r1, [pc, #252]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 800592c:	68e0      	ldr	r0, [r4, #12]
 800592e:	6a0a      	ldr	r2, [r1, #32]
 8005930:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005934:	4290      	cmp	r0, r2
 8005936:	d204      	bcs.n	8005942 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8005938:	6a0a      	ldr	r2, [r1, #32]
 800593a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800593e:	4302      	orrs	r2, r0
 8005940:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005942:	071e      	lsls	r6, r3, #28
 8005944:	d50d      	bpl.n	8005962 <HAL_RCC_ClockConfig+0x17e>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005946:	4938      	ldr	r1, [pc, #224]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 8005948:	6920      	ldr	r0, [r4, #16]
 800594a:	6a0a      	ldr	r2, [r1, #32]
 800594c:	0912      	lsrs	r2, r2, #4
 800594e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005952:	4290      	cmp	r0, r2
 8005954:	d205      	bcs.n	8005962 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8005956:	6a0a      	ldr	r2, [r1, #32]
 8005958:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800595c:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8005960:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005962:	06dd      	lsls	r5, r3, #27
 8005964:	d50d      	bpl.n	8005982 <HAL_RCC_ClockConfig+0x19e>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8005966:	4a30      	ldr	r2, [pc, #192]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 8005968:	6961      	ldr	r1, [r4, #20]
 800596a:	6a13      	ldr	r3, [r2, #32]
 800596c:	0a1b      	lsrs	r3, r3, #8
 800596e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005972:	4299      	cmp	r1, r3
 8005974:	d205      	bcs.n	8005982 <HAL_RCC_ClockConfig+0x19e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8005976:	6a13      	ldr	r3, [r2, #32]
 8005978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005980:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005982:	f7ff ff0b 	bl	800579c <HAL_RCC_GetSysClockFreq>
}
 8005986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800598a:	4603      	mov	r3, r0
 800598c:	4a26      	ldr	r2, [pc, #152]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
 800598e:	4927      	ldr	r1, [pc, #156]	; (8005a2c <HAL_RCC_ClockConfig+0x248>)
 8005990:	6a12      	ldr	r2, [r2, #32]
  halstatus = HAL_InitTick(uwTickPrio);
 8005992:	4827      	ldr	r0, [pc, #156]	; (8005a30 <HAL_RCC_ClockConfig+0x24c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005994:	f002 020f 	and.w	r2, r2, #15
 8005998:	5c89      	ldrb	r1, [r1, r2]
 800599a:	4a26      	ldr	r2, [pc, #152]	; (8005a34 <HAL_RCC_ClockConfig+0x250>)
 800599c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800599e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80059a0:	6013      	str	r3, [r2, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80059a2:	f004 bf7b 	b.w	800a89c <HAL_InitTick>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059a6:	07da      	lsls	r2, r3, #31
 80059a8:	d5ac      	bpl.n	8005904 <HAL_RCC_ClockConfig+0x120>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059aa:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059ac:	4b1e      	ldr	r3, [pc, #120]	; (8005a28 <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059ae:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059b0:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80059b2:	f47f af77 	bne.w	80058a4 <HAL_RCC_ClockConfig+0xc0>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059b6:	019f      	lsls	r7, r3, #6
 80059b8:	f53f af7c 	bmi.w	80058b4 <HAL_RCC_ClockConfig+0xd0>
 80059bc:	e729      	b.n	8005812 <HAL_RCC_ClockConfig+0x2e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80059be:	f7fe ffcb 	bl	8004958 <HAL_GetTick>
 80059c2:	1bc3      	subs	r3, r0, r7
 80059c4:	4543      	cmp	r3, r8
 80059c6:	d827      	bhi.n	8005a18 <HAL_RCC_ClockConfig+0x234>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059c8:	69f3      	ldr	r3, [r6, #28]
 80059ca:	f003 0318 	and.w	r3, r3, #24
 80059ce:	2b18      	cmp	r3, #24
 80059d0:	d1f5      	bne.n	80059be <HAL_RCC_ClockConfig+0x1da>
 80059d2:	e78d      	b.n	80058f0 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80059d4:	f7fe ffc0 	bl	8004958 <HAL_GetTick>
 80059d8:	1bc0      	subs	r0, r0, r7
 80059da:	4540      	cmp	r0, r8
 80059dc:	d81c      	bhi.n	8005a18 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80059de:	69f3      	ldr	r3, [r6, #28]
 80059e0:	f003 0318 	and.w	r3, r3, #24
 80059e4:	2b10      	cmp	r3, #16
 80059e6:	d1f5      	bne.n	80059d4 <HAL_RCC_ClockConfig+0x1f0>
 80059e8:	e782      	b.n	80058f0 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80059ea:	f7fe ffb5 	bl	8004958 <HAL_GetTick>
 80059ee:	1bc0      	subs	r0, r0, r7
 80059f0:	4540      	cmp	r0, r8
 80059f2:	d811      	bhi.n	8005a18 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80059f4:	69f3      	ldr	r3, [r6, #28]
 80059f6:	f003 0318 	and.w	r3, r3, #24
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d1f5      	bne.n	80059ea <HAL_RCC_ClockConfig+0x206>
 80059fe:	e777      	b.n	80058f0 <HAL_RCC_ClockConfig+0x10c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005a00:	6a02      	ldr	r2, [r0, #32]
 8005a02:	f022 020f 	bic.w	r2, r2, #15
 8005a06:	4311      	orrs	r1, r2
 8005a08:	6201      	str	r1, [r0, #32]
 8005a0a:	e77b      	b.n	8005904 <HAL_RCC_ClockConfig+0x120>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a0c:	039e      	lsls	r6, r3, #14
 8005a0e:	f53f af51 	bmi.w	80058b4 <HAL_RCC_ClockConfig+0xd0>
 8005a12:	e6fe      	b.n	8005812 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005a14:	2001      	movs	r0, #1
}
 8005a16:	4770      	bx	lr
          return HAL_TIMEOUT;
 8005a18:	2003      	movs	r0, #3
 8005a1a:	e6fb      	b.n	8005814 <HAL_RCC_ClockConfig+0x30>
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005a1c:	0598      	lsls	r0, r3, #22
 8005a1e:	f53f af49 	bmi.w	80058b4 <HAL_RCC_ClockConfig+0xd0>
 8005a22:	e6f6      	b.n	8005812 <HAL_RCC_ClockConfig+0x2e>
 8005a24:	40022000 	.word	0x40022000
 8005a28:	44020c00 	.word	0x44020c00
 8005a2c:	08013c50 	.word	0x08013c50
 8005a30:	200001e0 	.word	0x200001e0
 8005a34:	200001e4 	.word	0x200001e4

08005a38 <HAL_RCC_GetHCLKFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005a38:	4a15      	ldr	r2, [pc, #84]	; (8005a90 <HAL_RCC_GetHCLKFreq+0x58>)
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a3a:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8005a3c:	69d3      	ldr	r3, [r2, #28]
 8005a3e:	f003 0318 	and.w	r3, r3, #24
 8005a42:	2b08      	cmp	r3, #8
 8005a44:	d021      	beq.n	8005a8a <HAL_RCC_GetHCLKFreq+0x52>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005a46:	69d3      	ldr	r3, [r2, #28]
 8005a48:	f013 0f18 	tst.w	r3, #24
 8005a4c:	d012      	beq.n	8005a74 <HAL_RCC_GetHCLKFreq+0x3c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a4e:	69d3      	ldr	r3, [r2, #28]
 8005a50:	f003 0318 	and.w	r3, r3, #24
 8005a54:	2b10      	cmp	r3, #16
 8005a56:	d016      	beq.n	8005a86 <HAL_RCC_GetHCLKFreq+0x4e>
 8005a58:	f7ff fe10 	bl	800567c <HAL_RCC_GetSysClockFreq.part.0>

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <HAL_RCC_GetHCLKFreq+0x58>)
 8005a5e:	490d      	ldr	r1, [pc, #52]	; (8005a94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	4a0d      	ldr	r2, [pc, #52]	; (8005a98 <HAL_RCC_GetHCLKFreq+0x60>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005a64:	f003 030f 	and.w	r3, r3, #15
 8005a68:	5ccb      	ldrb	r3, [r1, r3]
 8005a6a:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005a6e:	40d8      	lsrs	r0, r3
 8005a70:	6010      	str	r0, [r2, #0]

  return SystemCoreClock;
}
 8005a72:	bd08      	pop	{r3, pc}
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8005a74:	6813      	ldr	r3, [r2, #0]
 8005a76:	069b      	lsls	r3, r3, #26
 8005a78:	d505      	bpl.n	8005a86 <HAL_RCC_GetHCLKFreq+0x4e>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8005a7a:	6813      	ldr	r3, [r2, #0]
 8005a7c:	4807      	ldr	r0, [pc, #28]	; (8005a9c <HAL_RCC_GetHCLKFreq+0x64>)
 8005a7e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8005a82:	40d8      	lsrs	r0, r3
 8005a84:	e7ea      	b.n	8005a5c <HAL_RCC_GetHCLKFreq+0x24>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8005a86:	4805      	ldr	r0, [pc, #20]	; (8005a9c <HAL_RCC_GetHCLKFreq+0x64>)
 8005a88:	e7e8      	b.n	8005a5c <HAL_RCC_GetHCLKFreq+0x24>
    sysclockfreq = CSI_VALUE;
 8005a8a:	4805      	ldr	r0, [pc, #20]	; (8005aa0 <HAL_RCC_GetHCLKFreq+0x68>)
 8005a8c:	e7e6      	b.n	8005a5c <HAL_RCC_GetHCLKFreq+0x24>
 8005a8e:	bf00      	nop
 8005a90:	44020c00 	.word	0x44020c00
 8005a94:	08013c50 	.word	0x08013c50
 8005a98:	200001e4 	.word	0x200001e4
 8005a9c:	017d7840 	.word	0x017d7840
 8005aa0:	003d0900 	.word	0x003d0900

08005aa4 <HAL_RCC_OscConfig>:
  if (pOscInitStruct == NULL)
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	f000 8258 	beq.w	8005f5a <HAL_RCC_OscConfig+0x4b6>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aaa:	4aaa      	ldr	r2, [pc, #680]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005aac:	6803      	ldr	r3, [r0, #0]
{
 8005aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ab2:	69d5      	ldr	r5, [r2, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005ab4:	6a96      	ldr	r6, [r2, #40]	; 0x28
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ab6:	06df      	lsls	r7, r3, #27
 8005ab8:	4604      	mov	r4, r0
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aba:	f005 0518 	and.w	r5, r5, #24
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005abe:	f006 0603 	and.w	r6, r6, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005ac2:	d524      	bpl.n	8005b0e <HAL_RCC_OscConfig+0x6a>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 8005ac4:	2d08      	cmp	r5, #8
 8005ac6:	f000 8157 	beq.w	8005d78 <HAL_RCC_OscConfig+0x2d4>
 8005aca:	2d18      	cmp	r5, #24
 8005acc:	f000 8151 	beq.w	8005d72 <HAL_RCC_OscConfig+0x2ce>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ad0:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8005ad2:	4fa0      	ldr	r7, [pc, #640]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 8134 	beq.w	8005d42 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ae0:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8005ae2:	f7fe ff39 	bl	8004958 <HAL_GetTick>
 8005ae6:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005ae8:	e006      	b.n	8005af8 <HAL_RCC_OscConfig+0x54>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005aea:	f7fe ff35 	bl	8004958 <HAL_GetTick>
 8005aee:	eba0 0008 	sub.w	r0, r0, r8
 8005af2:	2802      	cmp	r0, #2
 8005af4:	f200 818b 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	0598      	lsls	r0, r3, #22
 8005afc:	d5f5      	bpl.n	8005aea <HAL_RCC_OscConfig+0x46>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	6a22      	ldr	r2, [r4, #32]
 8005b02:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8005b06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b0a:	61bb      	str	r3, [r7, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	07da      	lsls	r2, r3, #31
 8005b10:	d538      	bpl.n	8005b84 <HAL_RCC_OscConfig+0xe0>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005b12:	2d10      	cmp	r5, #16
 8005b14:	f000 8141 	beq.w	8005d9a <HAL_RCC_OscConfig+0x2f6>
 8005b18:	2d18      	cmp	r5, #24
 8005b1a:	f000 813b 	beq.w	8005d94 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b24:	d018      	beq.n	8005b58 <HAL_RCC_OscConfig+0xb4>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8174 	beq.w	8005e14 <HAL_RCC_OscConfig+0x370>
 8005b2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b30:	f000 8284 	beq.w	800603c <HAL_RCC_OscConfig+0x598>
 8005b34:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005b38:	4b86      	ldr	r3, [pc, #536]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	f000 829c 	beq.w	8006078 <HAL_RCC_OscConfig+0x5d4>
 8005b40:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b4c:	601a      	str	r2, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005b54:	601a      	str	r2, [r3, #0]
 8005b56:	e004      	b.n	8005b62 <HAL_RCC_OscConfig+0xbe>
 8005b58:	4a7e      	ldr	r2, [pc, #504]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
 8005b5a:	6813      	ldr	r3, [r2, #0]
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b60:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005b62:	f7fe fef9 	bl	8004958 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b66:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8005d54 <HAL_RCC_OscConfig+0x2b0>
        tickstart = HAL_GetTick();
 8005b6a:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b6c:	e005      	b.n	8005b7a <HAL_RCC_OscConfig+0xd6>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005b6e:	f7fe fef3 	bl	8004958 <HAL_GetTick>
 8005b72:	1bc0      	subs	r0, r0, r7
 8005b74:	2864      	cmp	r0, #100	; 0x64
 8005b76:	f200 814a 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b7a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b7e:	039b      	lsls	r3, r3, #14
 8005b80:	d5f5      	bpl.n	8005b6e <HAL_RCC_OscConfig+0xca>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b82:	6823      	ldr	r3, [r4, #0]
 8005b84:	0799      	lsls	r1, r3, #30
 8005b86:	d529      	bpl.n	8005bdc <HAL_RCC_OscConfig+0x138>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005b88:	2d00      	cmp	r5, #0
 8005b8a:	f000 80b9 	beq.w	8005d00 <HAL_RCC_OscConfig+0x25c>
 8005b8e:	2d18      	cmp	r5, #24
 8005b90:	f000 8262 	beq.w	8006058 <HAL_RCC_OscConfig+0x5b4>
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005b94:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005b96:	4e6f      	ldr	r6, [pc, #444]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 81cb 	beq.w	8005f34 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005b9e:	6833      	ldr	r3, [r6, #0]
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	f023 0318 	bic.w	r3, r3, #24
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 8005baa:	6833      	ldr	r3, [r6, #0]
 8005bac:	f043 0301 	orr.w	r3, r3, #1
 8005bb0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005bb2:	f7fe fed1 	bl	8004958 <HAL_GetTick>
 8005bb6:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bb8:	e005      	b.n	8005bc6 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005bba:	f7fe fecd 	bl	8004958 <HAL_GetTick>
 8005bbe:	1bc0      	subs	r0, r0, r7
 8005bc0:	2802      	cmp	r0, #2
 8005bc2:	f200 8124 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bc6:	6833      	ldr	r3, [r6, #0]
 8005bc8:	079b      	lsls	r3, r3, #30
 8005bca:	d5f6      	bpl.n	8005bba <HAL_RCC_OscConfig+0x116>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005bcc:	6933      	ldr	r3, [r6, #16]
 8005bce:	6962      	ldr	r2, [r4, #20]
 8005bd0:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005bd8:	6133      	str	r3, [r6, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	0719      	lsls	r1, r3, #28
 8005bde:	d519      	bpl.n	8005c14 <HAL_RCC_OscConfig+0x170>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005be0:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_LSI_ENABLE();
 8005be2:	4e5c      	ldr	r6, [pc, #368]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f000 8130 	beq.w	8005e4a <HAL_RCC_OscConfig+0x3a6>
      __HAL_RCC_LSI_ENABLE();
 8005bea:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005bee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bf2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8005bf6:	f7fe feaf 	bl	8004958 <HAL_GetTick>
 8005bfa:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005bfc:	e005      	b.n	8005c0a <HAL_RCC_OscConfig+0x166>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005bfe:	f7fe feab 	bl	8004958 <HAL_GetTick>
 8005c02:	1bc0      	subs	r0, r0, r7
 8005c04:	2802      	cmp	r0, #2
 8005c06:	f200 8102 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005c0a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005c0e:	011a      	lsls	r2, r3, #4
 8005c10:	d5f5      	bpl.n	8005bfe <HAL_RCC_OscConfig+0x15a>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	075e      	lsls	r6, r3, #29
 8005c16:	d536      	bpl.n	8005c86 <HAL_RCC_OscConfig+0x1e2>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005c18:	4e4f      	ldr	r6, [pc, #316]	; (8005d58 <HAL_RCC_OscConfig+0x2b4>)
 8005c1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005c1c:	07d8      	lsls	r0, r3, #31
 8005c1e:	f140 80e6 	bpl.w	8005dee <HAL_RCC_OscConfig+0x34a>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005c22:	68a3      	ldr	r3, [r4, #8]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	f000 821f 	beq.w	8006068 <HAL_RCC_OscConfig+0x5c4>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80bc 	beq.w	8005da8 <HAL_RCC_OscConfig+0x304>
 8005c30:	2b05      	cmp	r3, #5
 8005c32:	f000 822d 	beq.w	8006090 <HAL_RCC_OscConfig+0x5ec>
 8005c36:	2b85      	cmp	r3, #133	; 0x85
 8005c38:	4b46      	ldr	r3, [pc, #280]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
 8005c3a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005c3e:	f000 823b 	beq.w	80060b8 <HAL_RCC_OscConfig+0x614>
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005c4a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005c4e:	f022 0204 	bic.w	r2, r2, #4
 8005c52:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005c56:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005c5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c5e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8005c62:	f7fe fe79 	bl	8004958 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c66:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005c6a:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6c:	4f39      	ldr	r7, [pc, #228]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
 8005c6e:	e005      	b.n	8005c7c <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c70:	f7fe fe72 	bl	8004958 <HAL_GetTick>
 8005c74:	1b80      	subs	r0, r0, r6
 8005c76:	4540      	cmp	r0, r8
 8005c78:	f200 80c9 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c7c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005c80:	079a      	lsls	r2, r3, #30
 8005c82:	d5f5      	bpl.n	8005c70 <HAL_RCC_OscConfig+0x1cc>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	069e      	lsls	r6, r3, #26
 8005c88:	d515      	bpl.n	8005cb6 <HAL_RCC_OscConfig+0x212>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8005c8c:	4e31      	ldr	r6, [pc, #196]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	f000 8165 	beq.w	8005f5e <HAL_RCC_OscConfig+0x4ba>
      __HAL_RCC_HSI48_ENABLE();
 8005c94:	6833      	ldr	r3, [r6, #0]
 8005c96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c9a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005c9c:	f7fe fe5c 	bl	8004958 <HAL_GetTick>
 8005ca0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005ca2:	e005      	b.n	8005cb0 <HAL_RCC_OscConfig+0x20c>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005ca4:	f7fe fe58 	bl	8004958 <HAL_GetTick>
 8005ca8:	1bc0      	subs	r0, r0, r7
 8005caa:	2802      	cmp	r0, #2
 8005cac:	f200 80af 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005cb0:	6833      	ldr	r3, [r6, #0]
 8005cb2:	0498      	lsls	r0, r3, #18
 8005cb4:	d5f6      	bpl.n	8005ca4 <HAL_RCC_OscConfig+0x200>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8139 	beq.w	8005f30 <HAL_RCC_OscConfig+0x48c>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cbe:	2d18      	cmp	r5, #24
 8005cc0:	f000 816e 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x4fc>
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	f000 80d4 	beq.w	8005e72 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_PLL1_DISABLE();
 8005cca:	4c22      	ldr	r4, [pc, #136]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cd2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005cd4:	f7fe fe40 	bl	8004958 <HAL_GetTick>
 8005cd8:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005cda:	e005      	b.n	8005ce8 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005cdc:	f7fe fe3c 	bl	8004958 <HAL_GetTick>
 8005ce0:	1b40      	subs	r0, r0, r5
 8005ce2:	2802      	cmp	r0, #2
 8005ce4:	f200 8093 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8005cee:	d1f5      	bne.n	8005cdc <HAL_RCC_OscConfig+0x238>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005cf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  return HAL_OK;
 8005cf2:	4618      	mov	r0, r3
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005cf4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005cf8:	f022 0203 	bic.w	r2, r2, #3
 8005cfc:	62a2      	str	r2, [r4, #40]	; 0x28
 8005cfe:	e051      	b.n	8005da4 <HAL_RCC_OscConfig+0x300>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005d00:	68e3      	ldr	r3, [r4, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d04d      	beq.n	8005da2 <HAL_RCC_OscConfig+0x2fe>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8005d06:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
 8005d08:	6921      	ldr	r1, [r4, #16]
 8005d0a:	6813      	ldr	r3, [r2, #0]
 8005d0c:	f003 0318 	and.w	r3, r3, #24
 8005d10:	428b      	cmp	r3, r1
 8005d12:	f040 8136 	bne.w	8005f82 <HAL_RCC_OscConfig+0x4de>
        tickstart = HAL_GetTick();
 8005d16:	f7fe fe1f 	bl	8004958 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d1a:	4f0e      	ldr	r7, [pc, #56]	; (8005d54 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005d1c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d1e:	e004      	b.n	8005d2a <HAL_RCC_OscConfig+0x286>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005d20:	f7fe fe1a 	bl	8004958 <HAL_GetTick>
 8005d24:	1b80      	subs	r0, r0, r6
 8005d26:	2802      	cmp	r0, #2
 8005d28:	d871      	bhi.n	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	079a      	lsls	r2, r3, #30
 8005d2e:	d5f7      	bpl.n	8005d20 <HAL_RCC_OscConfig+0x27c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6962      	ldr	r2, [r4, #20]
 8005d34:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8005d38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d3c:	613b      	str	r3, [r7, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d3e:	6823      	ldr	r3, [r4, #0]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005d40:	e74c      	b.n	8005bdc <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_CSI_DISABLE();
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d48:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8005d4a:	f7fe fe05 	bl	8004958 <HAL_GetTick>
 8005d4e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005d50:	e00a      	b.n	8005d68 <HAL_RCC_OscConfig+0x2c4>
 8005d52:	bf00      	nop
 8005d54:	44020c00 	.word	0x44020c00
 8005d58:	44020800 	.word	0x44020800
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005d5c:	f7fe fdfc 	bl	8004958 <HAL_GetTick>
 8005d60:	eba0 0008 	sub.w	r0, r0, r8
 8005d64:	2802      	cmp	r0, #2
 8005d66:	d852      	bhi.n	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	0599      	lsls	r1, r3, #22
 8005d6c:	d4f6      	bmi.n	8005d5c <HAL_RCC_OscConfig+0x2b8>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	e6cd      	b.n	8005b0e <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8005d72:	2e02      	cmp	r6, #2
 8005d74:	f47f aeac 	bne.w	8005ad0 <HAL_RCC_OscConfig+0x2c>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8005d78:	69e2      	ldr	r2, [r4, #28]
 8005d7a:	b192      	cbz	r2, 8005da2 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005d7c:	49ad      	ldr	r1, [pc, #692]	; (8006034 <HAL_RCC_OscConfig+0x590>)
 8005d7e:	6a20      	ldr	r0, [r4, #32]
 8005d80:	698a      	ldr	r2, [r1, #24]
 8005d82:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8005d86:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005d8a:	618a      	str	r2, [r1, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d8c:	07da      	lsls	r2, r3, #31
 8005d8e:	f57f aef9 	bpl.w	8005b84 <HAL_RCC_OscConfig+0xe0>
 8005d92:	e6be      	b.n	8005b12 <HAL_RCC_OscConfig+0x6e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8005d94:	2e03      	cmp	r6, #3
 8005d96:	f47f aec2 	bne.w	8005b1e <HAL_RCC_OscConfig+0x7a>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005d9a:	6862      	ldr	r2, [r4, #4]
 8005d9c:	2a00      	cmp	r2, #0
 8005d9e:	f47f aef1 	bne.w	8005b84 <HAL_RCC_OscConfig+0xe0>
        return HAL_ERROR;
 8005da2:	2001      	movs	r0, #1
}
 8005da4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005da8:	4ea2      	ldr	r6, [pc, #648]	; (8006034 <HAL_RCC_OscConfig+0x590>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005daa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005dae:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005db2:	f023 0301 	bic.w	r3, r3, #1
 8005db6:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8005dba:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005dbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8005dc6:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005dca:	f023 0304 	bic.w	r3, r3, #4
 8005dce:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8005dd2:	f7fe fdc1 	bl	8004958 <HAL_GetTick>
 8005dd6:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dd8:	e004      	b.n	8005de4 <HAL_RCC_OscConfig+0x340>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fe fdbd 	bl	8004958 <HAL_GetTick>
 8005dde:	1bc0      	subs	r0, r0, r7
 8005de0:	4540      	cmp	r0, r8
 8005de2:	d814      	bhi.n	8005e0e <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005de4:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005de8:	079b      	lsls	r3, r3, #30
 8005dea:	d4f6      	bmi.n	8005dda <HAL_RCC_OscConfig+0x336>
 8005dec:	e74a      	b.n	8005c84 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005dee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	6273      	str	r3, [r6, #36]	; 0x24
      tickstart = HAL_GetTick();
 8005df6:	f7fe fdaf 	bl	8004958 <HAL_GetTick>
 8005dfa:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005dfc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005dfe:	07d9      	lsls	r1, r3, #31
 8005e00:	f53f af0f 	bmi.w	8005c22 <HAL_RCC_OscConfig+0x17e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e04:	f7fe fda8 	bl	8004958 <HAL_GetTick>
 8005e08:	1bc0      	subs	r0, r0, r7
 8005e0a:	2802      	cmp	r0, #2
 8005e0c:	d9f6      	bls.n	8005dfc <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8005e0e:	2003      	movs	r0, #3
}
 8005e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005e14:	4f87      	ldr	r7, [pc, #540]	; (8006034 <HAL_RCC_OscConfig+0x590>)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e2c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8005e2e:	f7fe fd93 	bl	8004958 <HAL_GetTick>
 8005e32:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e34:	e005      	b.n	8005e42 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8005e36:	f7fe fd8f 	bl	8004958 <HAL_GetTick>
 8005e3a:	eba0 0008 	sub.w	r0, r0, r8
 8005e3e:	2864      	cmp	r0, #100	; 0x64
 8005e40:	d8e5      	bhi.n	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	0398      	lsls	r0, r3, #14
 8005e46:	d4f6      	bmi.n	8005e36 <HAL_RCC_OscConfig+0x392>
 8005e48:	e69b      	b.n	8005b82 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_LSI_DISABLE();
 8005e4a:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005e4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e52:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8005e56:	f7fe fd7f 	bl	8004958 <HAL_GetTick>
 8005e5a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005e5c:	e004      	b.n	8005e68 <HAL_RCC_OscConfig+0x3c4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005e5e:	f7fe fd7b 	bl	8004958 <HAL_GetTick>
 8005e62:	1bc0      	subs	r0, r0, r7
 8005e64:	2802      	cmp	r0, #2
 8005e66:	d8d2      	bhi.n	8005e0e <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005e68:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005e6c:	011b      	lsls	r3, r3, #4
 8005e6e:	d4f6      	bmi.n	8005e5e <HAL_RCC_OscConfig+0x3ba>
 8005e70:	e6cf      	b.n	8005c12 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL1_DISABLE();
 8005e72:	4d70      	ldr	r5, [pc, #448]	; (8006034 <HAL_RCC_OscConfig+0x590>)
 8005e74:	682b      	ldr	r3, [r5, #0]
 8005e76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005e7c:	f7fe fd6c 	bl	8004958 <HAL_GetTick>
 8005e80:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e82:	e004      	b.n	8005e8e <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005e84:	f7fe fd68 	bl	8004958 <HAL_GetTick>
 8005e88:	1b80      	subs	r0, r0, r6
 8005e8a:	2802      	cmp	r0, #2
 8005e8c:	d8bf      	bhi.n	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005e8e:	682b      	ldr	r3, [r5, #0]
 8005e90:	019a      	lsls	r2, r3, #6
 8005e92:	d4f7      	bmi.n	8005e84 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005e94:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005e96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005e98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005e9c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005e9e:	f023 0303 	bic.w	r3, r3, #3
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005ea8:	62ab      	str	r3, [r5, #40]	; 0x28
 8005eaa:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
 8005eae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	3a01      	subs	r2, #1
 8005eb4:	025b      	lsls	r3, r3, #9
 8005eb6:	0412      	lsls	r2, r2, #16
 8005eb8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005ebc:	3901      	subs	r1, #1
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	6c22      	ldr	r2, [r4, #64]	; 0x40
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005eca:	4e5a      	ldr	r6, [pc, #360]	; (8006034 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005ecc:	3a01      	subs	r2, #1
 8005ece:	0612      	lsls	r2, r2, #24
 8005ed0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005ed8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005eda:	f023 0310 	bic.w	r3, r3, #16
 8005ede:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005ee0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	63ab      	str	r3, [r5, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8005ee6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005ee8:	f043 0310 	orr.w	r3, r3, #16
 8005eec:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005eee:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005ef0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005ef2:	f023 030c 	bic.w	r3, r3, #12
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005efa:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005efc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005efe:	f023 0320 	bic.w	r3, r3, #32
 8005f02:	4313      	orrs	r3, r2
 8005f04:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f06:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0c:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_ENABLE();
 8005f0e:	682b      	ldr	r3, [r5, #0]
 8005f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005f16:	f7fe fd1f 	bl	8004958 <HAL_GetTick>
 8005f1a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005f1c:	e005      	b.n	8005f2a <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005f1e:	f7fe fd1b 	bl	8004958 <HAL_GetTick>
 8005f22:	1b00      	subs	r0, r0, r4
 8005f24:	2802      	cmp	r0, #2
 8005f26:	f63f af72 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005f2a:	6833      	ldr	r3, [r6, #0]
 8005f2c:	019b      	lsls	r3, r3, #6
 8005f2e:	d5f6      	bpl.n	8005f1e <HAL_RCC_OscConfig+0x47a>
  return HAL_OK;
 8005f30:	2000      	movs	r0, #0
 8005f32:	e737      	b.n	8005da4 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_DISABLE();
 8005f34:	6833      	ldr	r3, [r6, #0]
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005f3c:	f7fe fd0c 	bl	8004958 <HAL_GetTick>
 8005f40:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f42:	e005      	b.n	8005f50 <HAL_RCC_OscConfig+0x4ac>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005f44:	f7fe fd08 	bl	8004958 <HAL_GetTick>
 8005f48:	1bc0      	subs	r0, r0, r7
 8005f4a:	2802      	cmp	r0, #2
 8005f4c:	f63f af5f 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005f50:	6833      	ldr	r3, [r6, #0]
 8005f52:	0798      	lsls	r0, r3, #30
 8005f54:	d4f6      	bmi.n	8005f44 <HAL_RCC_OscConfig+0x4a0>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	e640      	b.n	8005bdc <HAL_RCC_OscConfig+0x138>
    return HAL_ERROR;
 8005f5a:	2001      	movs	r0, #1
}
 8005f5c:	4770      	bx	lr
      __HAL_RCC_HSI48_DISABLE();
 8005f5e:	6833      	ldr	r3, [r6, #0]
 8005f60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f64:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005f66:	f7fe fcf7 	bl	8004958 <HAL_GetTick>
 8005f6a:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005f6c:	e005      	b.n	8005f7a <HAL_RCC_OscConfig+0x4d6>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8005f6e:	f7fe fcf3 	bl	8004958 <HAL_GetTick>
 8005f72:	1bc0      	subs	r0, r0, r7
 8005f74:	2802      	cmp	r0, #2
 8005f76:	f63f af4a 	bhi.w	8005e0e <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005f7a:	6833      	ldr	r3, [r6, #0]
 8005f7c:	0499      	lsls	r1, r3, #18
 8005f7e:	d4f6      	bmi.n	8005f6e <HAL_RCC_OscConfig+0x4ca>
 8005f80:	e699      	b.n	8005cb6 <HAL_RCC_OscConfig+0x212>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005f82:	6813      	ldr	r3, [r2, #0]
 8005f84:	f023 0318 	bic.w	r3, r3, #24
 8005f88:	430b      	orrs	r3, r1
 8005f8a:	6013      	str	r3, [r2, #0]
            (void) HAL_RCC_GetHCLKFreq();
 8005f8c:	f7ff fd54 	bl	8005a38 <HAL_RCC_GetHCLKFreq>
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005f90:	4b29      	ldr	r3, [pc, #164]	; (8006038 <HAL_RCC_OscConfig+0x594>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	f004 fc82 	bl	800a89c <HAL_InitTick>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	f43f aebc 	beq.w	8005d16 <HAL_RCC_OscConfig+0x272>
 8005f9e:	e700      	b.n	8005da2 <HAL_RCC_OscConfig+0x2fe>
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005fa0:	4a24      	ldr	r2, [pc, #144]	; (8006034 <HAL_RCC_OscConfig+0x590>)
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fa2:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005fa4:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005fa6:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fa8:	f43f aefb 	beq.w	8005da2 <HAL_RCC_OscConfig+0x2fe>
 8005fac:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005fae:	f001 0303 	and.w	r3, r1, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fb2:	4283      	cmp	r3, r0
 8005fb4:	f47f aef5 	bne.w	8005da2 <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005fb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005fba:	f3c1 2105 	ubfx	r1, r1, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	f47f aeef 	bne.w	8005da2 <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005fc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fc6:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8005fca:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005fcc:	4299      	cmp	r1, r3
 8005fce:	f47f aee8 	bne.w	8005da2 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005fd2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005fd4:	f3c5 2146 	ubfx	r1, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005fd8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005fda:	4299      	cmp	r1, r3
 8005fdc:	f47f aee1 	bne.w	8005da2 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005fe2:	f3c5 4106 	ubfx	r1, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005fe6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005fe8:	4299      	cmp	r1, r3
 8005fea:	f47f aeda 	bne.w	8005da2 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005fee:	6c23      	ldr	r3, [r4, #64]	; 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005ff0:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005ff4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005ff6:	429d      	cmp	r5, r3
 8005ff8:	f47f aed3 	bne.w	8005da2 <HAL_RCC_OscConfig+0x2fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ffc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005ffe:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006000:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8006004:	4293      	cmp	r3, r2
 8006006:	d093      	beq.n	8005f30 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8006008:	4a0a      	ldr	r2, [pc, #40]	; (8006034 <HAL_RCC_OscConfig+0x590>)
 800600a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800600c:	f023 0310 	bic.w	r3, r3, #16
 8006010:	6293      	str	r3, [r2, #40]	; 0x28
        tickstart = HAL_GetTick();
 8006012:	f7fe fca1 	bl	8004958 <HAL_GetTick>
 8006016:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8006018:	f7fe fc9e 	bl	8004958 <HAL_GetTick>
 800601c:	42a8      	cmp	r0, r5
 800601e:	d0fb      	beq.n	8006018 <HAL_RCC_OscConfig+0x574>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8006020:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8006022:	4b04      	ldr	r3, [pc, #16]	; (8006034 <HAL_RCC_OscConfig+0x590>)
 8006024:	00d2      	lsls	r2, r2, #3
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8006028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return HAL_OK;
 800602a:	2000      	movs	r0, #0
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800602c:	f042 0210 	orr.w	r2, r2, #16
 8006030:	629a      	str	r2, [r3, #40]	; 0x28
 8006032:	e6b7      	b.n	8005da4 <HAL_RCC_OscConfig+0x300>
 8006034:	44020c00 	.word	0x44020c00
 8006038:	200001e0 	.word	0x200001e0
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800603c:	4b27      	ldr	r3, [pc, #156]	; (80060dc <HAL_RCC_OscConfig+0x638>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e584      	b.n	8005b62 <HAL_RCC_OscConfig+0xbe>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8006058:	2e01      	cmp	r6, #1
 800605a:	f47f ad9b 	bne.w	8005b94 <HAL_RCC_OscConfig+0xf0>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 800605e:	68e3      	ldr	r3, [r4, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	f47f ae58 	bne.w	8005d16 <HAL_RCC_OscConfig+0x272>
 8006066:	e69c      	b.n	8005da2 <HAL_RCC_OscConfig+0x2fe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006068:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <HAL_RCC_OscConfig+0x638>)
 800606a:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8006076:	e5f4      	b.n	8005c62 <HAL_RCC_OscConfig+0x1be>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8006078:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e568      	b.n	8005b62 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8006090:	4b12      	ldr	r3, [pc, #72]	; (80060dc <HAL_RCC_OscConfig+0x638>)
 8006092:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8006096:	f042 0204 	orr.w	r2, r2, #4
 800609a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800609e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80060a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060a6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80060aa:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80060ae:	f042 0201 	orr.w	r2, r2, #1
 80060b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80060b6:	e5d4      	b.n	8005c62 <HAL_RCC_OscConfig+0x1be>
 80060b8:	f042 0204 	orr.w	r2, r2, #4
 80060bc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80060c0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80060c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80060c8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80060cc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80060d0:	f042 0201 	orr.w	r2, r2, #1
 80060d4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80060d8:	e5c3      	b.n	8005c62 <HAL_RCC_OscConfig+0x1be>
 80060da:	bf00      	nop
 80060dc:	44020c00 	.word	0x44020c00

080060e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060e0:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80060e2:	f7ff fb5b 	bl	800579c <HAL_RCC_GetSysClockFreq>
 80060e6:	4a0a      	ldr	r2, [pc, #40]	; (8006110 <HAL_RCC_GetPCLK1Freq+0x30>)
 80060e8:	490a      	ldr	r1, [pc, #40]	; (8006114 <HAL_RCC_GetPCLK1Freq+0x34>)
 80060ea:	6a13      	ldr	r3, [r2, #32]
 80060ec:	4c0a      	ldr	r4, [pc, #40]	; (8006118 <HAL_RCC_GetPCLK1Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80060f4:	4909      	ldr	r1, [pc, #36]	; (800611c <HAL_RCC_GetPCLK1Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80060f6:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80060fa:	40d8      	lsrs	r0, r3
 80060fc:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 80060fe:	6a13      	ldr	r3, [r2, #32]
 8006100:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8006104:	5ccb      	ldrb	r3, [r1, r3]
 8006106:	f003 031f 	and.w	r3, r3, #31
}
 800610a:	40d8      	lsrs	r0, r3
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	44020c00 	.word	0x44020c00
 8006114:	08013c50 	.word	0x08013c50
 8006118:	200001e4 	.word	0x200001e4
 800611c:	08013c60 	.word	0x08013c60

08006120 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006120:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006122:	f7ff fb3b 	bl	800579c <HAL_RCC_GetSysClockFreq>
 8006126:	4a0a      	ldr	r2, [pc, #40]	; (8006150 <HAL_RCC_GetPCLK2Freq+0x30>)
 8006128:	490a      	ldr	r1, [pc, #40]	; (8006154 <HAL_RCC_GetPCLK2Freq+0x34>)
 800612a:	6a13      	ldr	r3, [r2, #32]
 800612c:	4c0a      	ldr	r4, [pc, #40]	; (8006158 <HAL_RCC_GetPCLK2Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800612e:	f003 030f 	and.w	r3, r3, #15
 8006132:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 8006134:	4909      	ldr	r1, [pc, #36]	; (800615c <HAL_RCC_GetPCLK2Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006136:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800613a:	40d8      	lsrs	r0, r3
 800613c:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 800613e:	6a13      	ldr	r3, [r2, #32]
 8006140:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006144:	5ccb      	ldrb	r3, [r1, r3]
 8006146:	f003 031f 	and.w	r3, r3, #31
}
 800614a:	40d8      	lsrs	r0, r3
 800614c:	bd10      	pop	{r4, pc}
 800614e:	bf00      	nop
 8006150:	44020c00 	.word	0x44020c00
 8006154:	08013c50 	.word	0x08013c50
 8006158:	200001e4 	.word	0x200001e4
 800615c:	08013c60 	.word	0x08013c60

08006160 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006160:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8006162:	f7ff fb1b 	bl	800579c <HAL_RCC_GetSysClockFreq>
 8006166:	4a0a      	ldr	r2, [pc, #40]	; (8006190 <HAL_RCC_GetPCLK3Freq+0x30>)
 8006168:	490a      	ldr	r1, [pc, #40]	; (8006194 <HAL_RCC_GetPCLK3Freq+0x34>)
 800616a:	6a13      	ldr	r3, [r2, #32]
 800616c:	4c0a      	ldr	r4, [pc, #40]	; (8006198 <HAL_RCC_GetPCLK3Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800616e:	f003 030f 	and.w	r3, r3, #15
 8006172:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 8006174:	4909      	ldr	r1, [pc, #36]	; (800619c <HAL_RCC_GetPCLK3Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8006176:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800617a:	40d8      	lsrs	r0, r3
 800617c:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 800617e:	6a13      	ldr	r3, [r2, #32]
 8006180:	f3c3 3302 	ubfx	r3, r3, #12, #3
 8006184:	5ccb      	ldrb	r3, [r1, r3]
 8006186:	f003 031f 	and.w	r3, r3, #31
}
 800618a:	40d8      	lsrs	r0, r3
 800618c:	bd10      	pop	{r4, pc}
 800618e:	bf00      	nop
 8006190:	44020c00 	.word	0x44020c00
 8006194:	08013c50 	.word	0x08013c50
 8006198:	200001e4 	.word	0x200001e4
 800619c:	08013c60 	.word	0x08013c60

080061a0 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 80061a0:	231f      	movs	r3, #31
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80061a2:	4a0f      	ldr	r2, [pc, #60]	; (80061e0 <HAL_RCC_GetClockConfig+0x40>)
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 80061a4:	6003      	str	r3, [r0, #0]
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80061a6:	69d3      	ldr	r3, [r2, #28]
{
 80061a8:	b410      	push	{r4}
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	6043      	str	r3, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 80061b0:	6a13      	ldr	r3, [r2, #32]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061b2:	4c0c      	ldr	r4, [pc, #48]	; (80061e4 <HAL_RCC_GetClockConfig+0x44>)
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 80061b4:	f003 020f 	and.w	r2, r3, #15
 80061b8:	6082      	str	r2, [r0, #8]
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 80061ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061be:	60c2      	str	r2, [r0, #12]
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80061c0:	091a      	lsrs	r2, r3, #4
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80061c2:	0a1b      	lsrs	r3, r3, #8
 80061c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 80061c8:	f002 0270 	and.w	r2, r2, #112	; 0x70
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 80061cc:	e9c0 2304 	strd	r2, r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061d0:	6823      	ldr	r3, [r4, #0]
}
 80061d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	600b      	str	r3, [r1, #0]
}
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	44020c00 	.word	0x44020c00
 80061e4:	40022000 	.word	0x40022000

080061e8 <RCCEx_PLL2_Config.part.0>:
  * @param  pll2  pointer to an RCC_PLL2InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
 80061e8:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80061ea:	e9d0 1200 	ldrd	r1, r2, [r0]
 80061ee:	4c2a      	ldr	r4, [pc, #168]	; (8006298 <RCCEx_PLL2_Config.part.0+0xb0>)
 80061f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80061f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80061f6:	f023 0303 	bic.w	r3, r3, #3
 80061fa:	430b      	orrs	r3, r1
 80061fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006202:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8006206:	3b01      	subs	r3, #1
 8006208:	3a01      	subs	r2, #1
 800620a:	025b      	lsls	r3, r3, #9
 800620c:	0412      	lsls	r2, r2, #16
 800620e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8006212:	b29b      	uxth	r3, r3
 8006214:	6881      	ldr	r1, [r0, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	6942      	ldr	r2, [r0, #20]
 800621a:	3901      	subs	r1, #1
 800621c:	3a01      	subs	r2, #1
 800621e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006222:	0612      	lsls	r2, r2, #24
 8006224:	430b      	orrs	r3, r1
 8006226:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800622a:	4313      	orrs	r3, r2
 800622c:	63e3      	str	r3, [r4, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800622e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006230:	6982      	ldr	r2, [r0, #24]
 8006232:	f023 030c 	bic.w	r3, r3, #12
 8006236:	4313      	orrs	r3, r2
 8006238:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 800623a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800623c:	69c2      	ldr	r2, [r0, #28]
 800623e:	f023 0320 	bic.w	r3, r3, #32
 8006242:	4313      	orrs	r3, r2
 8006244:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006246:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006248:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800624a:	4313      	orrs	r3, r2
 800624c:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 800624e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006250:	f023 0310 	bic.w	r3, r3, #16
 8006254:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8006256:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006258:	6a02      	ldr	r2, [r0, #32]
 800625a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800625e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006262:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006266:	6423      	str	r3, [r4, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8006268:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800626a:	f043 0310 	orr.w	r3, r3, #16
 800626e:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8006270:	6823      	ldr	r3, [r4, #0]
 8006272:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006276:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006278:	f7fe fb6e 	bl	8004958 <HAL_GetTick>
 800627c:	4605      	mov	r5, r0

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800627e:	e004      	b.n	800628a <RCCEx_PLL2_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006280:	f7fe fb6a 	bl	8004958 <HAL_GetTick>
 8006284:	1b40      	subs	r0, r0, r5
 8006286:	2802      	cmp	r0, #2
 8006288:	d804      	bhi.n	8006294 <RCCEx_PLL2_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800628a:	6823      	ldr	r3, [r4, #0]
 800628c:	011b      	lsls	r3, r3, #4
 800628e:	d5f7      	bpl.n	8006280 <RCCEx_PLL2_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006290:	2000      	movs	r0, #0

}
 8006292:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8006294:	2003      	movs	r0, #3
}
 8006296:	bd38      	pop	{r3, r4, r5, pc}
 8006298:	44020c00 	.word	0x44020c00

0800629c <RCCEx_PLL3_Config.part.0>:
  * @param  pll3  pointer to an RCC_PLL3InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
 800629c:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800629e:	e9d0 1200 	ldrd	r1, r2, [r0]
 80062a2:	4c2a      	ldr	r4, [pc, #168]	; (800634c <RCCEx_PLL3_Config.part.0+0xb0>)
 80062a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062aa:	f023 0303 	bic.w	r3, r3, #3
 80062ae:	430b      	orrs	r3, r1
 80062b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80062b4:	6323      	str	r3, [r4, #48]	; 0x30
 80062b6:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80062ba:	3b01      	subs	r3, #1
 80062bc:	3a01      	subs	r2, #1
 80062be:	025b      	lsls	r3, r3, #9
 80062c0:	0412      	lsls	r2, r2, #16
 80062c2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	6881      	ldr	r1, [r0, #8]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	6942      	ldr	r2, [r0, #20]
 80062ce:	3901      	subs	r1, #1
 80062d0:	3a01      	subs	r2, #1
 80062d2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80062d6:	0612      	lsls	r2, r2, #24
 80062d8:	430b      	orrs	r3, r1
 80062da:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80062de:	4313      	orrs	r3, r2
 80062e0:	6463      	str	r3, [r4, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062e4:	6982      	ldr	r2, [r0, #24]
 80062e6:	f023 030c 	bic.w	r3, r3, #12
 80062ea:	4313      	orrs	r3, r2
 80062ec:	6323      	str	r3, [r4, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 80062ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062f0:	69c2      	ldr	r2, [r0, #28]
 80062f2:	f023 0320 	bic.w	r3, r3, #32
 80062f6:	4313      	orrs	r3, r2
 80062f8:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80062fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80062fe:	4313      	orrs	r3, r2
 8006300:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8006302:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006304:	f023 0310 	bic.w	r3, r3, #16
 8006308:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 800630a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800630c:	6a02      	ldr	r2, [r0, #32]
 800630e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006312:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006316:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800631a:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 800631c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800631e:	f043 0310 	orr.w	r3, r3, #16
 8006322:	6323      	str	r3, [r4, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800632a:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800632c:	f7fe fb14 	bl	8004958 <HAL_GetTick>
 8006330:	4605      	mov	r5, r0

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006332:	e004      	b.n	800633e <RCCEx_PLL3_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006334:	f7fe fb10 	bl	8004958 <HAL_GetTick>
 8006338:	1b40      	subs	r0, r0, r5
 800633a:	2802      	cmp	r0, #2
 800633c:	d804      	bhi.n	8006348 <RCCEx_PLL3_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	d5f7      	bpl.n	8006334 <RCCEx_PLL3_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006344:	2000      	movs	r0, #0
}
 8006346:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8006348:	2003      	movs	r0, #3
}
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	44020c00 	.word	0x44020c00

08006350 <HAL_RCCEx_PeriphCLKConfig>:
{
 8006350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006354:	e9d0 3200 	ldrd	r3, r2, [r0]
 8006358:	01d9      	lsls	r1, r3, #7
{
 800635a:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800635c:	d508      	bpl.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800635e:	488f      	ldr	r0, [pc, #572]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006360:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8006362:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8006366:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800636a:	4329      	orrs	r1, r5
 800636c:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006370:	f013 0601 	ands.w	r6, r3, #1
 8006374:	d031      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8006376:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006378:	2905      	cmp	r1, #5
 800637a:	f201 86dd 	bhi.w	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 800637e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006382:	0023      	.short	0x0023
 8006384:	00060d13 	.word	0x00060d13
 8006388:	00230023 	.word	0x00230023
 800638c:	0023      	.short	0x0023
  __HAL_RCC_PLL3_DISABLE();
 800638e:	4d83      	ldr	r5, [pc, #524]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006396:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006398:	f7fe fade 	bl	8004958 <HAL_GetTick>
 800639c:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800639e:	e005      	b.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80063a0:	f7fe fada 	bl	8004958 <HAL_GetTick>
 80063a4:	1b80      	subs	r0, r0, r6
 80063a6:	2802      	cmp	r0, #2
 80063a8:	f201 85c6 	bhi.w	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	0098      	lsls	r0, r3, #2
 80063b0:	d4f6      	bmi.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80063b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80063b6:	f7ff ff71 	bl	800629c <RCCEx_PLL3_Config.part.0>
 80063ba:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80063bc:	2e00      	cmp	r6, #0
 80063be:	f041 86b4 	bne.w	800812a <HAL_RCCEx_PeriphCLKConfig+0x1dda>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063c2:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80063c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80063c8:	2600      	movs	r6, #0
 80063ca:	4d74      	ldr	r5, [pc, #464]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80063cc:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
 80063d0:	f020 0007 	bic.w	r0, r0, #7
 80063d4:	4301      	orrs	r1, r0
 80063d6:	f8c5 10d8 	str.w	r1, [r5, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80063da:	0799      	lsls	r1, r3, #30
 80063dc:	d52e      	bpl.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (pPeriphClkInit->Usart2ClockSelection)
 80063de:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80063e0:	2928      	cmp	r1, #40	; 0x28
 80063e2:	d82a      	bhi.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xea>
 80063e4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80063e8:	00290cb4 	.word	0x00290cb4
 80063ec:	00290029 	.word	0x00290029
 80063f0:	00290029 	.word	0x00290029
 80063f4:	00290029 	.word	0x00290029
 80063f8:	00290d6f 	.word	0x00290d6f
 80063fc:	00290029 	.word	0x00290029
 8006400:	00290029 	.word	0x00290029
 8006404:	00290029 	.word	0x00290029
 8006408:	00290d89 	.word	0x00290d89
 800640c:	00290029 	.word	0x00290029
 8006410:	00290029 	.word	0x00290029
 8006414:	00290029 	.word	0x00290029
 8006418:	00290cb4 	.word	0x00290cb4
 800641c:	00290029 	.word	0x00290029
 8006420:	00290029 	.word	0x00290029
 8006424:	00290029 	.word	0x00290029
 8006428:	00290cb4 	.word	0x00290cb4
 800642c:	00290029 	.word	0x00290029
 8006430:	00290029 	.word	0x00290029
 8006434:	00290029 	.word	0x00290029
 8006438:	0cb4      	.short	0x0cb4
 800643a:	2601      	movs	r6, #1
 800643c:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800643e:	0759      	lsls	r1, r3, #29
 8006440:	d52e      	bpl.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8006442:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006444:	2980      	cmp	r1, #128	; 0x80
 8006446:	f001 8285 	beq.w	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1604>
 800644a:	f200 81a2 	bhi.w	8006792 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800644e:	b1d9      	cbz	r1, 8006488 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8006450:	2940      	cmp	r1, #64	; 0x40
 8006452:	f040 81a7 	bne.w	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  __HAL_RCC_PLL2_DISABLE();
 8006456:	4d51      	ldr	r5, [pc, #324]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006458:	682b      	ldr	r3, [r5, #0]
 800645a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800645e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006460:	f7fe fa7a 	bl	8004958 <HAL_GetTick>
 8006464:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006466:	e005      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x124>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006468:	f7fe fa76 	bl	8004958 <HAL_GetTick>
 800646c:	1bc0      	subs	r0, r0, r7
 800646e:	2802      	cmp	r0, #2
 8006470:	f201 85a8 	bhi.w	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	d4f6      	bmi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x118>
 800647a:	f104 0008 	add.w	r0, r4, #8
 800647e:	f7ff feb3 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006482:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006486:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006488:	2d00      	cmp	r5, #0
 800648a:	f041 84b8 	bne.w	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1aae>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800648e:	4f43      	ldr	r7, [pc, #268]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006490:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8006492:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006496:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 800649a:	4301      	orrs	r1, r0
 800649c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80064a0:	0719      	lsls	r1, r3, #28
 80064a2:	d530      	bpl.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart4ClockSelection)
 80064a4:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80064a6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80064aa:	f001 8378 	beq.w	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x184e>
 80064ae:	f200 817c 	bhi.w	80067aa <HAL_RCCEx_PeriphCLKConfig+0x45a>
 80064b2:	b1e1      	cbz	r1, 80064ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80064b4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80064b8:	f040 8181 	bne.w	80067be <HAL_RCCEx_PeriphCLKConfig+0x46e>
  __HAL_RCC_PLL2_DISABLE();
 80064bc:	4d37      	ldr	r5, [pc, #220]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064be:	682b      	ldr	r3, [r5, #0]
 80064c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064c4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80064c6:	f7fe fa47 	bl	8004958 <HAL_GetTick>
 80064ca:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064cc:	e005      	b.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064ce:	f7fe fa43 	bl	8004958 <HAL_GetTick>
 80064d2:	1bc0      	subs	r0, r0, r7
 80064d4:	2802      	cmp	r0, #2
 80064d6:	f201 8534 	bhi.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064da:	682b      	ldr	r3, [r5, #0]
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	d4f6      	bmi.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80064e0:	f104 0008 	add.w	r0, r4, #8
 80064e4:	f7ff fe80 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80064e8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80064ec:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	f041 8473 	bne.w	8007dda <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80064f4:	4f29      	ldr	r7, [pc, #164]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80064f6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80064f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80064fc:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8006500:	4301      	orrs	r1, r0
 8006502:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006506:	06d9      	lsls	r1, r3, #27
 8006508:	d530      	bpl.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Uart5ClockSelection)
 800650a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800650c:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006510:	f001 8156 	beq.w	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x1470>
 8006514:	f200 8156 	bhi.w	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8006518:	b1e1      	cbz	r1, 8006554 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800651a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800651e:	f040 815b 	bne.w	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x488>
  __HAL_RCC_PLL2_DISABLE();
 8006522:	4d1e      	ldr	r5, [pc, #120]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800652a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800652c:	f7fe fa14 	bl	8004958 <HAL_GetTick>
 8006530:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006532:	e005      	b.n	8006540 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006534:	f7fe fa10 	bl	8004958 <HAL_GetTick>
 8006538:	1bc0      	subs	r0, r0, r7
 800653a:	2802      	cmp	r0, #2
 800653c:	f201 8548 	bhi.w	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006540:	682b      	ldr	r3, [r5, #0]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	d4f6      	bmi.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006546:	f104 0008 	add.w	r0, r4, #8
 800654a:	f7ff fe4d 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800654e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006552:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006554:	2d00      	cmp	r5, #0
 8006556:	f041 8479 	bne.w	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1afc>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800655a:	4f10      	ldr	r7, [pc, #64]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800655c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800655e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006562:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006566:	4301      	orrs	r1, r0
 8006568:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800656c:	0699      	lsls	r1, r3, #26
 800656e:	d533      	bpl.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8006570:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8006572:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006576:	f001 8179 	beq.w	800786c <HAL_RCCEx_PeriphCLKConfig+0x151c>
 800657a:	f200 8130 	bhi.w	80067de <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800657e:	b1f9      	cbz	r1, 80065c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8006580:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006584:	f040 8135 	bne.w	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  __HAL_RCC_PLL2_DISABLE();
 8006588:	4d04      	ldr	r5, [pc, #16]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800658a:	682b      	ldr	r3, [r5, #0]
 800658c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006590:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006592:	f7fe f9e1 	bl	8004958 <HAL_GetTick>
 8006596:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800659a:	bf00      	nop
 800659c:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065a0:	f7fe f9da 	bl	8004958 <HAL_GetTick>
 80065a4:	1bc0      	subs	r0, r0, r7
 80065a6:	2802      	cmp	r0, #2
 80065a8:	f201 84dd 	bhi.w	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	d4f6      	bmi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x250>
 80065b2:	f104 0008 	add.w	r0, r4, #8
 80065b6:	f7ff fe17 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80065ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80065be:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80065c0:	2d00      	cmp	r5, #0
 80065c2:	f041 843d 	bne.w	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1af0>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80065c6:	4fb1      	ldr	r7, [pc, #708]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80065c8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80065ca:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80065ce:	f421 3160 	bic.w	r1, r1, #229376	; 0x38000
 80065d2:	4301      	orrs	r1, r0
 80065d4:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80065d8:	0659      	lsls	r1, r3, #25
 80065da:	d530      	bpl.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart7ClockSelection)
 80065dc:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80065de:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80065e2:	f001 8286 	beq.w	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x17a2>
 80065e6:	f200 8107 	bhi.w	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80065ea:	b1e1      	cbz	r1, 8006626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80065ec:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80065f0:	f040 810c 	bne.w	800680c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
  __HAL_RCC_PLL2_DISABLE();
 80065f4:	4da5      	ldr	r5, [pc, #660]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80065f6:	682b      	ldr	r3, [r5, #0]
 80065f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065fc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80065fe:	f7fe f9ab 	bl	8004958 <HAL_GetTick>
 8006602:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006604:	e005      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006606:	f7fe f9a7 	bl	8004958 <HAL_GetTick>
 800660a:	1bc0      	subs	r0, r0, r7
 800660c:	2802      	cmp	r0, #2
 800660e:	f201 84cd 	bhi.w	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006612:	682b      	ldr	r3, [r5, #0]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	d4f6      	bmi.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8006618:	f104 0008 	add.w	r0, r4, #8
 800661c:	f7ff fde4 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006620:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006624:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006626:	2d00      	cmp	r5, #0
 8006628:	f041 83f5 	bne.w	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 800662c:	4f97      	ldr	r7, [pc, #604]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800662e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006630:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006634:	f421 11e0 	bic.w	r1, r1, #1835008	; 0x1c0000
 8006638:	4301      	orrs	r1, r0
 800663a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800663e:	0619      	lsls	r1, r3, #24
 8006640:	d530      	bpl.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8006642:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8006644:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8006648:	f001 8167 	beq.w	800791a <HAL_RCCEx_PeriphCLKConfig+0x15ca>
 800664c:	f200 80e1 	bhi.w	8006812 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8006650:	b1e1      	cbz	r1, 800668c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006652:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006656:	f040 80e6 	bne.w	8006826 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  __HAL_RCC_PLL2_DISABLE();
 800665a:	4d8c      	ldr	r5, [pc, #560]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006662:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006664:	f7fe f978 	bl	8004958 <HAL_GetTick>
 8006668:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800666a:	e005      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x328>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800666c:	f7fe f974 	bl	8004958 <HAL_GetTick>
 8006670:	1bc0      	subs	r0, r0, r7
 8006672:	2802      	cmp	r0, #2
 8006674:	f201 8483 	bhi.w	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	011b      	lsls	r3, r3, #4
 800667c:	d4f6      	bmi.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800667e:	f104 0008 	add.w	r0, r4, #8
 8006682:	f7ff fdb1 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8006686:	e9d4 3200 	ldrd	r3, r2, [r4]
 800668a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800668c:	2d00      	cmp	r5, #0
 800668e:	f041 83da 	bne.w	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x1af6>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8006692:	4f7e      	ldr	r7, [pc, #504]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006694:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006696:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800669a:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800669e:	4301      	orrs	r1, r0
 80066a0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80066a4:	05d9      	lsls	r1, r3, #23
 80066a6:	d530      	bpl.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Uart9ClockSelection)
 80066a8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80066aa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80066ae:	f001 818d 	beq.w	80079cc <HAL_RCCEx_PeriphCLKConfig+0x167c>
 80066b2:	f200 80bb 	bhi.w	800682c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80066b6:	b1e1      	cbz	r1, 80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80066b8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80066bc:	f040 80c0 	bne.w	8006840 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  __HAL_RCC_PLL2_DISABLE();
 80066c0:	4d72      	ldr	r5, [pc, #456]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80066c2:	682b      	ldr	r3, [r5, #0]
 80066c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80066c8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80066ca:	f7fe f945 	bl	8004958 <HAL_GetTick>
 80066ce:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066d0:	e005      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80066d2:	f7fe f941 	bl	8004958 <HAL_GetTick>
 80066d6:	1bc0      	subs	r0, r0, r7
 80066d8:	2802      	cmp	r0, #2
 80066da:	f201 846d 	bhi.w	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80066de:	682b      	ldr	r3, [r5, #0]
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	d4f6      	bmi.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80066e4:	f104 0008 	add.w	r0, r4, #8
 80066e8:	f7ff fd7e 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80066ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80066f0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80066f2:	2d00      	cmp	r5, #0
 80066f4:	f041 838c 	bne.w	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80066f8:	4f64      	ldr	r7, [pc, #400]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80066fa:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80066fc:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8006700:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8006704:	4301      	orrs	r1, r0
 8006706:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 800670a:	0599      	lsls	r1, r3, #22
 800670c:	d532      	bpl.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (pPeriphClkInit->Usart10ClockSelection)
 800670e:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8006712:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8006716:	f001 80c6 	beq.w	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x1556>
 800671a:	f200 8094 	bhi.w	8006846 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800671e:	b1e1      	cbz	r1, 800675a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006720:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8006724:	f040 8097 	bne.w	8006856 <HAL_RCCEx_PeriphCLKConfig+0x506>
  __HAL_RCC_PLL2_DISABLE();
 8006728:	4d58      	ldr	r5, [pc, #352]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800672a:	682b      	ldr	r3, [r5, #0]
 800672c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006730:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006732:	f7fe f911 	bl	8004958 <HAL_GetTick>
 8006736:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006738:	e005      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800673a:	f7fe f90d 	bl	8004958 <HAL_GetTick>
 800673e:	1bc0      	subs	r0, r0, r7
 8006740:	2802      	cmp	r0, #2
 8006742:	f201 842d 	bhi.w	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006746:	682b      	ldr	r3, [r5, #0]
 8006748:	011b      	lsls	r3, r3, #4
 800674a:	d4f6      	bmi.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800674c:	f104 0008 	add.w	r0, r4, #8
 8006750:	f7ff fd4a 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006754:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006758:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800675a:	2d00      	cmp	r5, #0
 800675c:	f041 8352 	bne.w	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8006760:	4f4a      	ldr	r7, [pc, #296]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006762:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8006766:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800676a:	f021 5160 	bic.w	r1, r1, #939524096	; 0x38000000
 800676e:	4301      	orrs	r1, r0
 8006770:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006774:	0559      	lsls	r1, r3, #21
 8006776:	d572      	bpl.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8006778:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800677c:	2905      	cmp	r1, #5
 800677e:	f201 84e2 	bhi.w	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 8006782:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006786:	05f0      	.short	0x05f0
 8006788:	05d70af4 	.word	0x05d70af4
 800678c:	05f005f0 	.word	0x05f005f0
 8006790:	05f0      	.short	0x05f0
    switch (pPeriphClkInit->Usart3ClockSelection)
 8006792:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 8006796:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 800679a:	f43f ae75 	beq.w	8006488 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800679e:	29c0      	cmp	r1, #192	; 0xc0
 80067a0:	f43f ae72 	beq.w	8006488 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80067a4:	2601      	movs	r6, #1
 80067a6:	4635      	mov	r5, r6
 80067a8:	e67a      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Uart4ClockSelection)
 80067aa:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 80067ae:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80067b2:	f43f ae9c 	beq.w	80064ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80067b6:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80067ba:	f43f ae98 	beq.w	80064ee <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80067be:	2601      	movs	r6, #1
 80067c0:	4635      	mov	r5, r6
 80067c2:	e6a0      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart5ClockSelection)
 80067c4:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 80067c8:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80067cc:	f43f aec2 	beq.w	8006554 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80067d0:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80067d4:	f43f aebe 	beq.w	8006554 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80067d8:	2601      	movs	r6, #1
 80067da:	4635      	mov	r5, r6
 80067dc:	e6c6      	b.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Usart6ClockSelection)
 80067de:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 80067e2:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 80067e6:	f43f aeeb 	beq.w	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
 80067ea:	f5b1 3fc0 	cmp.w	r1, #98304	; 0x18000
 80067ee:	f43f aee7 	beq.w	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x270>
 80067f2:	2601      	movs	r6, #1
 80067f4:	4635      	mov	r5, r6
 80067f6:	e6ef      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Uart7ClockSelection)
 80067f8:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 80067fc:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8006800:	f43f af11 	beq.w	8006626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8006804:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8006808:	f43f af0d 	beq.w	8006626 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800680c:	2601      	movs	r6, #1
 800680e:	4635      	mov	r5, r6
 8006810:	e715      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8006812:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8006816:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800681a:	f43f af37 	beq.w	800668c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800681e:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8006822:	f43f af33 	beq.w	800668c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006826:	2601      	movs	r6, #1
 8006828:	4635      	mov	r5, r6
 800682a:	e73b      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart9ClockSelection)
 800682c:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8006830:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8006834:	f43f af5d 	beq.w	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8006838:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800683c:	f43f af59 	beq.w	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8006840:	2601      	movs	r6, #1
 8006842:	4635      	mov	r5, r6
 8006844:	e761      	b.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8006846:	f021 6000 	bic.w	r0, r1, #134217728	; 0x8000000
 800684a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800684e:	d084      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006850:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 8006854:	d081      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8006856:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8006858:	0559      	lsls	r1, r3, #21
    switch (pPeriphClkInit->Usart10ClockSelection)
 800685a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800685c:	d48c      	bmi.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x428>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800685e:	0519      	lsls	r1, r3, #20
 8006860:	d533      	bpl.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8006862:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8006866:	2920      	cmp	r1, #32
 8006868:	f001 8126 	beq.w	8007ab8 <HAL_RCCEx_PeriphCLKConfig+0x1768>
 800686c:	f200 831e 	bhi.w	8006eac <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8006870:	b1f1      	cbz	r1, 80068b0 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006872:	2910      	cmp	r1, #16
 8006874:	f040 8322 	bne.w	8006ebc <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  __HAL_RCC_PLL2_DISABLE();
 8006878:	4d04      	ldr	r5, [pc, #16]	; (800688c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800687a:	682b      	ldr	r3, [r5, #0]
 800687c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006880:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006882:	f7fe f869 	bl	8004958 <HAL_GetTick>
 8006886:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006888:	e008      	b.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x54c>
 800688a:	bf00      	nop
 800688c:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006890:	f7fe f862 	bl	8004958 <HAL_GetTick>
 8006894:	1bc0      	subs	r0, r0, r7
 8006896:	2802      	cmp	r0, #2
 8006898:	f201 83a0 	bhi.w	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800689c:	682b      	ldr	r3, [r5, #0]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	d4f6      	bmi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x540>
 80068a2:	f104 0008 	add.w	r0, r4, #8
 80068a6:	f7ff fc9f 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80068ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80068b0:	2d00      	cmp	r5, #0
 80068b2:	f041 82b6 	bne.w	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80068b6:	4fac      	ldr	r7, [pc, #688]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80068b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80068bc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80068c0:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80068c4:	4301      	orrs	r1, r0
 80068c6:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80068ca:	04d9      	lsls	r1, r3, #19
 80068cc:	d532      	bpl.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80068ce:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80068d2:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80068d6:	f001 8129 	beq.w	8007b2c <HAL_RCCEx_PeriphCLKConfig+0x17dc>
 80068da:	f200 82f2 	bhi.w	8006ec2 <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80068de:	b1e1      	cbz	r1, 800691a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80068e0:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80068e4:	f040 82f7 	bne.w	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
  __HAL_RCC_PLL2_DISABLE();
 80068e8:	4d9f      	ldr	r5, [pc, #636]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80068ea:	682b      	ldr	r3, [r5, #0]
 80068ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068f0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80068f2:	f7fe f831 	bl	8004958 <HAL_GetTick>
 80068f6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068f8:	e005      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068fa:	f7fe f82d 	bl	8004958 <HAL_GetTick>
 80068fe:	1bc0      	subs	r0, r0, r7
 8006900:	2802      	cmp	r0, #2
 8006902:	f201 8324 	bhi.w	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006906:	682b      	ldr	r3, [r5, #0]
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	d4f6      	bmi.n	80068fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800690c:	f104 0008 	add.w	r0, r4, #8
 8006910:	f7ff fc6a 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006914:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006918:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800691a:	2d00      	cmp	r5, #0
 800691c:	f041 826c 	bne.w	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006920:	4f91      	ldr	r7, [pc, #580]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006922:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8006926:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800692a:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800692e:	4301      	orrs	r1, r0
 8006930:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006934:	0499      	lsls	r1, r3, #18
 8006936:	d50f      	bpl.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8006938:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800693c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006940:	f000 86a0 	beq.w	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1334>
 8006944:	f240 82ec 	bls.w	8006f20 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8006948:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800694c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006950:	f000 82e9 	beq.w	8006f26 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8006954:	2601      	movs	r6, #1
 8006956:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006958:	045f      	lsls	r7, r3, #17
 800695a:	d50f      	bpl.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->I2c2ClockSelection)
 800695c:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8006960:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8006964:	f000 86b0 	beq.w	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x1378>
 8006968:	f240 82eb 	bls.w	8006f42 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 800696c:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006970:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8006974:	f000 82e8 	beq.w	8006f48 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
 8006978:	2601      	movs	r6, #1
 800697a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800697c:	0419      	lsls	r1, r3, #16
 800697e:	d50f      	bpl.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8006980:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8006984:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006988:	f000 8642 	beq.w	8007610 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
 800698c:	f240 82b7 	bls.w	8006efe <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006990:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8006994:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006998:	f000 82b4 	beq.w	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 800699c:	2601      	movs	r6, #1
 800699e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069a0:	0557      	lsls	r7, r2, #21
 80069a2:	d50f      	bpl.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c4ClockSelection)
 80069a4:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80069a8:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80069ac:	f000 864d 	beq.w	800764a <HAL_RCCEx_PeriphCLKConfig+0x12fa>
 80069b0:	f240 8294 	bls.w	8006edc <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80069b4:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80069b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80069bc:	f000 8291 	beq.w	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80069c0:	2601      	movs	r6, #1
 80069c2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80069c4:	03d9      	lsls	r1, r3, #15
 80069c6:	d50b      	bpl.n	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    switch (pPeriphClkInit->I3c1ClockSelection)
 80069c8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80069cc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80069d0:	f000 851d 	beq.w	800740e <HAL_RCCEx_PeriphCLKConfig+0x10be>
 80069d4:	f031 7100 	bics.w	r1, r1, #33554432	; 0x2000000
 80069d8:	f000 8532 	beq.w	8007440 <HAL_RCCEx_PeriphCLKConfig+0x10f0>
 80069dc:	2601      	movs	r6, #1
 80069de:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80069e0:	0510      	lsls	r0, r2, #20
 80069e2:	d509      	bpl.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80069e4:	4960      	ldr	r1, [pc, #384]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80069e6:	69c8      	ldr	r0, [r1, #28]
 80069e8:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80069ec:	61c8      	str	r0, [r1, #28]
 80069ee:	69c8      	ldr	r0, [r1, #28]
 80069f0:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
 80069f4:	4338      	orrs	r0, r7
 80069f6:	61c8      	str	r0, [r1, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069f8:	0399      	lsls	r1, r3, #14
 80069fa:	d532      	bpl.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 80069fc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8006a00:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006a04:	f000 87ff 	beq.w	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x16b6>
 8006a08:	f200 82ac 	bhi.w	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8006a0c:	b1e1      	cbz	r1, 8006a48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006a0e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006a12:	f040 82b1 	bne.w	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  __HAL_RCC_PLL2_DISABLE();
 8006a16:	4d54      	ldr	r5, [pc, #336]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006a18:	682b      	ldr	r3, [r5, #0]
 8006a1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a1e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006a20:	f7fd ff9a 	bl	8004958 <HAL_GetTick>
 8006a24:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a26:	e005      	b.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a28:	f7fd ff96 	bl	8004958 <HAL_GetTick>
 8006a2c:	1bc0      	subs	r0, r0, r7
 8006a2e:	2802      	cmp	r0, #2
 8006a30:	f201 82da 	bhi.w	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a34:	682b      	ldr	r3, [r5, #0]
 8006a36:	011b      	lsls	r3, r3, #4
 8006a38:	d4f6      	bmi.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8006a3a:	f104 0008 	add.w	r0, r4, #8
 8006a3e:	f7ff fbd3 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a42:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006a46:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	f041 81cf 	bne.w	8007dec <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006a4e:	4f46      	ldr	r7, [pc, #280]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006a50:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8006a54:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006a58:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8006a5c:	4301      	orrs	r1, r0
 8006a5e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006a62:	0359      	lsls	r1, r3, #13
 8006a64:	d532      	bpl.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006a66:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8006a6a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8006a6e:	f000 866d 	beq.w	800774c <HAL_RCCEx_PeriphCLKConfig+0x13fc>
 8006a72:	f200 8284 	bhi.w	8006f7e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8006a76:	b1e1      	cbz	r1, 8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8006a78:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8006a7c:	f040 8289 	bne.w	8006f92 <HAL_RCCEx_PeriphCLKConfig+0xc42>
  __HAL_RCC_PLL2_DISABLE();
 8006a80:	4d39      	ldr	r5, [pc, #228]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006a82:	682b      	ldr	r3, [r5, #0]
 8006a84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006a88:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006a8a:	f7fd ff65 	bl	8004958 <HAL_GetTick>
 8006a8e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a90:	e005      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x74e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a92:	f7fd ff61 	bl	8004958 <HAL_GetTick>
 8006a96:	1bc0      	subs	r0, r0, r7
 8006a98:	2802      	cmp	r0, #2
 8006a9a:	f201 826a 	bhi.w	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006a9e:	682b      	ldr	r3, [r5, #0]
 8006aa0:	011b      	lsls	r3, r3, #4
 8006aa2:	d4f6      	bmi.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x742>
 8006aa4:	f104 0008 	add.w	r0, r4, #8
 8006aa8:	f7ff fb9e 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006aac:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ab0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	f041 81be 	bne.w	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006ab8:	4f2b      	ldr	r7, [pc, #172]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006aba:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8006abe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006ac2:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8006ac6:	4301      	orrs	r1, r0
 8006ac8:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006acc:	0691      	lsls	r1, r2, #26
 8006ace:	d532      	bpl.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006ad0:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8006ad4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006ad8:	f000 8655 	beq.w	8007786 <HAL_RCCEx_PeriphCLKConfig+0x1436>
 8006adc:	f200 825c 	bhi.w	8006f98 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006ae0:	b1e1      	cbz	r1, 8006b1c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006ae2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006ae6:	f040 8261 	bne.w	8006fac <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  __HAL_RCC_PLL2_DISABLE();
 8006aea:	4d1f      	ldr	r5, [pc, #124]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006aec:	682b      	ldr	r3, [r5, #0]
 8006aee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006af2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006af4:	f7fd ff30 	bl	8004958 <HAL_GetTick>
 8006af8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006afa:	e005      	b.n	8006b08 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006afc:	f7fd ff2c 	bl	8004958 <HAL_GetTick>
 8006b00:	1bc0      	subs	r0, r0, r7
 8006b02:	2802      	cmp	r0, #2
 8006b04:	f201 827e 	bhi.w	8008004 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	011b      	lsls	r3, r3, #4
 8006b0c:	d4f6      	bmi.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8006b0e:	f104 0008 	add.w	r0, r4, #8
 8006b12:	f7ff fb69 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006b16:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006b1a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	f041 8186 	bne.w	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1ade>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 8006b22:	4f11      	ldr	r7, [pc, #68]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006b24:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8006b28:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006b2c:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006b30:	4301      	orrs	r1, r0
 8006b32:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006b36:	0651      	lsls	r1, r2, #25
 8006b38:	d535      	bpl.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006b3a:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 8006b3e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006b42:	f000 86cd 	beq.w	80078e0 <HAL_RCCEx_PeriphCLKConfig+0x1590>
 8006b46:	f200 8234 	bhi.w	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006b4a:	b1f9      	cbz	r1, 8006b8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006b4c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006b50:	f040 8239 	bne.w	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
  __HAL_RCC_PLL2_DISABLE();
 8006b54:	4d04      	ldr	r5, [pc, #16]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006b56:	682b      	ldr	r3, [r5, #0]
 8006b58:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006b5c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006b5e:	f7fd fefb 	bl	8004958 <HAL_GetTick>
 8006b62:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b64:	e008      	b.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8006b66:	bf00      	nop
 8006b68:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006b6c:	f7fd fef4 	bl	8004958 <HAL_GetTick>
 8006b70:	1bc0      	subs	r0, r0, r7
 8006b72:	2802      	cmp	r0, #2
 8006b74:	f201 8209 	bhi.w	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	011b      	lsls	r3, r3, #4
 8006b7c:	d4f6      	bmi.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8006b7e:	f104 0008 	add.w	r0, r4, #8
 8006b82:	f7ff fb31 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006b86:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006b8a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006b8c:	2d00      	cmp	r5, #0
 8006b8e:	f041 813c 	bne.w	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1aba>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 8006b92:	4faf      	ldr	r7, [pc, #700]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006b94:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8006b98:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006b9c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8006ba0:	4301      	orrs	r1, r0
 8006ba2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8006ba6:	0611      	lsls	r1, r2, #24
 8006ba8:	d532      	bpl.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006baa:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8006bae:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8006bb2:	f000 86ec 	beq.w	800798e <HAL_RCCEx_PeriphCLKConfig+0x163e>
 8006bb6:	f200 8209 	bhi.w	8006fcc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006bba:	b1e1      	cbz	r1, 8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006bbc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8006bc0:	f040 820e 	bne.w	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0xc90>
  __HAL_RCC_PLL2_DISABLE();
 8006bc4:	4da2      	ldr	r5, [pc, #648]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006bc6:	682b      	ldr	r3, [r5, #0]
 8006bc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bcc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006bce:	f7fd fec3 	bl	8004958 <HAL_GetTick>
 8006bd2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006bd4:	e005      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x892>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006bd6:	f7fd febf 	bl	8004958 <HAL_GetTick>
 8006bda:	1bc0      	subs	r0, r0, r7
 8006bdc:	2802      	cmp	r0, #2
 8006bde:	f201 81bc 	bhi.w	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	011b      	lsls	r3, r3, #4
 8006be6:	d4f6      	bmi.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x886>
 8006be8:	f104 0008 	add.w	r0, r4, #8
 8006bec:	f7ff fafc 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006bf0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006bf4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	f041 80f2 	bne.w	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1a90>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006bfc:	4f94      	ldr	r7, [pc, #592]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006bfe:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 8006c02:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006c06:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8006c0a:	4301      	orrs	r1, r0
 8006c0c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006c10:	05d1      	lsls	r1, r2, #23
 8006c12:	d532      	bpl.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006c14:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8006c18:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006c1c:	f000 872c 	beq.w	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1728>
 8006c20:	f200 81e1 	bhi.w	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006c24:	b1e1      	cbz	r1, 8006c60 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006c26:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8006c2a:	f040 81e6 	bne.w	8006ffa <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  __HAL_RCC_PLL2_DISABLE();
 8006c2e:	4d88      	ldr	r5, [pc, #544]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006c30:	682b      	ldr	r3, [r5, #0]
 8006c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006c36:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006c38:	f7fd fe8e 	bl	8004958 <HAL_GetTick>
 8006c3c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c3e:	e005      	b.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x8fc>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c40:	f7fd fe8a 	bl	8004958 <HAL_GetTick>
 8006c44:	1bc0      	subs	r0, r0, r7
 8006c46:	2802      	cmp	r0, #2
 8006c48:	f201 81e8 	bhi.w	800801c <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	d4f6      	bmi.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006c52:	f104 0008 	add.w	r0, r4, #8
 8006c56:	f7ff fac7 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c5a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006c5e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006c60:	2d00      	cmp	r5, #0
 8006c62:	f041 80c6 	bne.w	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8006c66:	4f7a      	ldr	r7, [pc, #488]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006c68:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8006c6c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006c70:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8006c74:	4301      	orrs	r1, r0
 8006c76:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c7a:	0319      	lsls	r1, r3, #12
 8006c7c:	d536      	bpl.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8006c7e:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 8006c82:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006c86:	f000 87f9 	beq.w	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x192c>
 8006c8a:	f200 81b9 	bhi.w	8007000 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	f000 8476 	beq.w	8007580 <HAL_RCCEx_PeriphCLKConfig+0x1230>
 8006c94:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006c98:	f040 81ba 	bne.w	8007010 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
  __HAL_RCC_PLL2_DISABLE();
 8006c9c:	4d6c      	ldr	r5, [pc, #432]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006c9e:	682b      	ldr	r3, [r5, #0]
 8006ca0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ca4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006ca6:	f7fd fe57 	bl	8004958 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006caa:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006cac:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	d508      	bpl.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x974>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006cb2:	f7fd fe51 	bl	8004958 <HAL_GetTick>
 8006cb6:	1bc0      	subs	r0, r0, r7
 8006cb8:	2802      	cmp	r0, #2
 8006cba:	f201 81cd 	bhi.w	8008058 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006cbe:	682b      	ldr	r3, [r5, #0]
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	d4f6      	bmi.n	8006cb2 <HAL_RCCEx_PeriphCLKConfig+0x962>
 8006cc4:	f104 0008 	add.w	r0, r4, #8
 8006cc8:	f7ff fa8e 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006ccc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006cd0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006cd2:	2d00      	cmp	r5, #0
 8006cd4:	f040 845c 	bne.w	8007590 <HAL_RCCEx_PeriphCLKConfig+0x1240>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006cd8:	4f5d      	ldr	r7, [pc, #372]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006cda:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8006cde:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8006ce2:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8006ce6:	4301      	orrs	r1, r0
 8006ce8:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006cec:	02d9      	lsls	r1, r3, #11
 8006cee:	d536      	bpl.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8006cf0:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8006cf4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006cf8:	f000 87a5 	beq.w	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x18f6>
 8006cfc:	f200 818b 	bhi.w	8007016 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8006d00:	2900      	cmp	r1, #0
 8006d02:	f000 8448 	beq.w	8007596 <HAL_RCCEx_PeriphCLKConfig+0x1246>
 8006d06:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8006d0a:	f040 818c 	bne.w	8007026 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
  __HAL_RCC_PLL2_DISABLE();
 8006d0e:	4d50      	ldr	r5, [pc, #320]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006d10:	682b      	ldr	r3, [r5, #0]
 8006d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d16:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006d18:	f7fd fe1e 	bl	8004958 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d1c:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006d1e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d20:	011b      	lsls	r3, r3, #4
 8006d22:	d508      	bpl.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d24:	f7fd fe18 	bl	8004958 <HAL_GetTick>
 8006d28:	1bc0      	subs	r0, r0, r7
 8006d2a:	2802      	cmp	r0, #2
 8006d2c:	f201 8188 	bhi.w	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	011b      	lsls	r3, r3, #4
 8006d34:	d4f6      	bmi.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006d36:	f104 0008 	add.w	r0, r4, #8
 8006d3a:	f7ff fa55 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006d3e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d42:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	f040 842e 	bne.w	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1256>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006d4a:	4f41      	ldr	r7, [pc, #260]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006d4c:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8006d50:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8006d54:	f421 1160 	bic.w	r1, r1, #3670016	; 0x380000
 8006d58:	4301      	orrs	r1, r0
 8006d5a:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006d5e:	0299      	lsls	r1, r3, #10
 8006d60:	d516      	bpl.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8006d62:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 8006d66:	2902      	cmp	r1, #2
 8006d68:	f000 8435 	beq.w	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x1286>
 8006d6c:	d903      	bls.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8006d6e:	3903      	subs	r1, #3
 8006d70:	2902      	cmp	r1, #2
 8006d72:	f200 831a 	bhi.w	80073aa <HAL_RCCEx_PeriphCLKConfig+0x105a>
    if (ret == HAL_OK)
 8006d76:	2d00      	cmp	r5, #0
 8006d78:	f040 87d8 	bne.w	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x19dc>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006d7c:	4f34      	ldr	r7, [pc, #208]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006d7e:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8006d82:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8006d86:	f021 0107 	bic.w	r1, r1, #7
 8006d8a:	4301      	orrs	r1, r0
 8006d8c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006d90:	0590      	lsls	r0, r2, #22
 8006d92:	d507      	bpl.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8006d94:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8006d98:	f031 0008 	bics.w	r0, r1, #8
 8006d9c:	f000 835f 	beq.w	800745e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006da0:	2601      	movs	r6, #1
 8006da2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006da4:	0199      	lsls	r1, r3, #6
 8006da6:	f100 8368 	bmi.w	800747a <HAL_RCCEx_PeriphCLKConfig+0x112a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006daa:	0158      	lsls	r0, r3, #5
 8006dac:	d50d      	bpl.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    switch (pPeriphClkInit->RngClockSelection)
 8006dae:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8006db2:	2910      	cmp	r1, #16
 8006db4:	f000 8406 	beq.w	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1274>
 8006db8:	f240 8138 	bls.w	800702c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006dbc:	f021 0010 	bic.w	r0, r1, #16
 8006dc0:	2820      	cmp	r0, #32
 8006dc2:	f000 8136 	beq.w	8007032 <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8006dc6:	2601      	movs	r6, #1
 8006dc8:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006dca:	0259      	lsls	r1, r3, #9
 8006dcc:	d52d      	bpl.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xada>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006dce:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 8006dd2:	2900      	cmp	r1, #0
 8006dd4:	f000 83f0 	beq.w	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1268>
 8006dd8:	2940      	cmp	r1, #64	; 0x40
 8006dda:	f040 82ef 	bne.w	80073bc <HAL_RCCEx_PeriphCLKConfig+0x106c>
  __HAL_RCC_PLL2_DISABLE();
 8006dde:	4d1c      	ldr	r5, [pc, #112]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006de6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006de8:	f7fd fdb6 	bl	8004958 <HAL_GetTick>
 8006dec:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dee:	e005      	b.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xaac>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006df0:	f7fd fdb2 	bl	8004958 <HAL_GetTick>
 8006df4:	1bc0      	subs	r0, r0, r7
 8006df6:	2802      	cmp	r0, #2
 8006df8:	f201 8146 	bhi.w	8008088 <HAL_RCCEx_PeriphCLKConfig+0x1d38>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	011b      	lsls	r3, r3, #4
 8006e00:	d4f6      	bmi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8006e02:	f104 0008 	add.w	r0, r4, #8
 8006e06:	f7ff f9ef 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006e0a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006e0e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006e10:	2d00      	cmp	r5, #0
 8006e12:	f041 8136 	bne.w	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1d32>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8006e16:	4f0e      	ldr	r7, [pc, #56]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006e18:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8006e1c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006e20:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006e24:	4301      	orrs	r1, r0
 8006e26:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006e2a:	021f      	lsls	r7, r3, #8
 8006e2c:	d52f      	bpl.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xb3e>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006e2e:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8006e32:	2900      	cmp	r1, #0
 8006e34:	f000 83ba 	beq.w	80075ac <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8006e38:	2980      	cmp	r1, #128	; 0x80
 8006e3a:	f040 82b9 	bne.w	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1060>
  __HAL_RCC_PLL2_DISABLE();
 8006e3e:	4d04      	ldr	r5, [pc, #16]	; (8006e50 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006e40:	682b      	ldr	r3, [r5, #0]
 8006e42:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e46:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006e48:	f7fd fd86 	bl	8004958 <HAL_GetTick>
 8006e4c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e4e:	e007      	b.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8006e50:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e54:	f7fd fd80 	bl	8004958 <HAL_GetTick>
 8006e58:	1bc0      	subs	r0, r0, r7
 8006e5a:	2802      	cmp	r0, #2
 8006e5c:	f201 8120 	bhi.w	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x1d50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	0118      	lsls	r0, r3, #4
 8006e64:	d4f6      	bmi.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8006e66:	f104 0008 	add.w	r0, r4, #8
 8006e6a:	f7ff f9bd 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006e6e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006e72:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006e74:	2d00      	cmp	r5, #0
 8006e76:	f041 8101 	bne.w	800807c <HAL_RCCEx_PeriphCLKConfig+0x1d2c>
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8006e7a:	4f91      	ldr	r7, [pc, #580]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8006e7c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 8006e80:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006e84:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e88:	4301      	orrs	r1, r0
 8006e8a:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006e8e:	0119      	lsls	r1, r3, #4
 8006e90:	f140 80ed 	bpl.w	800706e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8006e94:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8006e98:	2904      	cmp	r1, #4
 8006e9a:	f201 8150 	bhi.w	800813e <HAL_RCCEx_PeriphCLKConfig+0x1dee>
 8006e9e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006ea2:	00d4      	.short	0x00d4
 8006ea4:	070b072a 	.word	0x070b072a
 8006ea8:	00d900d9 	.word	0x00d900d9
    switch (pPeriphClkInit->Uart12ClockSelection)
 8006eac:	f021 0010 	bic.w	r0, r1, #16
 8006eb0:	2840      	cmp	r0, #64	; 0x40
 8006eb2:	f43f acfd 	beq.w	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006eb6:	2930      	cmp	r1, #48	; 0x30
 8006eb8:	f43f acfa 	beq.w	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006ebc:	2601      	movs	r6, #1
 8006ebe:	4635      	mov	r5, r6
 8006ec0:	e503      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006ec2:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8006ec6:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8006eca:	f43f ad26 	beq.w	800691a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006ece:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8006ed2:	f43f ad22 	beq.w	800691a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006ed6:	2601      	movs	r6, #1
 8006ed8:	4635      	mov	r5, r6
 8006eda:	e52b      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8006edc:	2900      	cmp	r1, #0
 8006ede:	f47f ad6f 	bne.w	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    if (ret == HAL_OK)
 8006ee2:	2d00      	cmp	r5, #0
 8006ee4:	f040 8725 	bne.w	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x19e2>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006ee8:	4f75      	ldr	r7, [pc, #468]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8006eea:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8006eee:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006ef2:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8006ef6:	4301      	orrs	r1, r0
 8006ef8:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006efc:	e562      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8006efe:	2900      	cmp	r1, #0
 8006f00:	f47f ad4c 	bne.w	800699c <HAL_RCCEx_PeriphCLKConfig+0x64c>
    if (ret == HAL_OK)
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	f040 8720 	bne.w	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006f0a:	4f6d      	ldr	r7, [pc, #436]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8006f0c:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8006f10:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006f14:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006f18:	4301      	orrs	r1, r0
 8006f1a:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006f1e:	e53f      	b.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8006f20:	2900      	cmp	r1, #0
 8006f22:	f47f ad17 	bne.w	8006954 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if (ret == HAL_OK)
 8006f26:	2d00      	cmp	r5, #0
 8006f28:	f040 8709 	bne.w	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x19ee>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006f2c:	4f64      	ldr	r7, [pc, #400]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8006f2e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8006f32:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006f36:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8006f3a:	4301      	orrs	r1, r0
 8006f3c:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006f40:	e50a      	b.n	8006958 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8006f42:	2900      	cmp	r1, #0
 8006f44:	f47f ad18 	bne.w	8006978 <HAL_RCCEx_PeriphCLKConfig+0x628>
    if (ret == HAL_OK)
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	f040 86fb 	bne.w	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x19f4>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006f4e:	4f5c      	ldr	r7, [pc, #368]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8006f50:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8006f54:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006f58:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8006f5c:	4301      	orrs	r1, r0
 8006f5e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006f62:	e50b      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006f64:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8006f68:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006f6c:	f43f ad6c 	beq.w	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006f70:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8006f74:	f43f ad68 	beq.w	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006f78:	2601      	movs	r6, #1
 8006f7a:	4635      	mov	r5, r6
 8006f7c:	e571      	b.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8006f7e:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 8006f82:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8006f86:	f43f ad94 	beq.w	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8006f8a:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8006f8e:	f43f ad90 	beq.w	8006ab2 <HAL_RCCEx_PeriphCLKConfig+0x762>
 8006f92:	2601      	movs	r6, #1
 8006f94:	4635      	mov	r5, r6
 8006f96:	e599      	b.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006f98:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8006f9c:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8006fa0:	f43f adbc 	beq.w	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006fa4:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8006fa8:	f43f adb8 	beq.w	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006fac:	2601      	movs	r6, #1
 8006fae:	4635      	mov	r5, r6
 8006fb0:	e5c1      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8006fb2:	f421 1080 	bic.w	r0, r1, #1048576	; 0x100000
 8006fb6:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8006fba:	f43f ade7 	beq.w	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006fbe:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8006fc2:	f43f ade3 	beq.w	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006fc6:	2601      	movs	r6, #1
 8006fc8:	4635      	mov	r5, r6
 8006fca:	e5ec      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006fcc:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8006fd0:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8006fd4:	f43f ae0f 	beq.w	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006fd8:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8006fdc:	f43f ae0b 	beq.w	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006fe0:	2601      	movs	r6, #1
 8006fe2:	4635      	mov	r5, r6
 8006fe4:	e614      	b.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8006fe6:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8006fea:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006fee:	f43f ae37 	beq.w	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006ff2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8006ff6:	f43f ae33 	beq.w	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006ffa:	2601      	movs	r6, #1
 8006ffc:	4635      	mov	r5, r6
 8006ffe:	e63c      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8007000:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8007004:	f43f ae65 	beq.w	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8007008:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 800700c:	f43f ae61 	beq.w	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x982>
 8007010:	2601      	movs	r6, #1
 8007012:	4635      	mov	r5, r6
 8007014:	e66a      	b.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8007016:	f5b1 1fc0 	cmp.w	r1, #1572864	; 0x180000
 800701a:	f43f ae93 	beq.w	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 800701e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007022:	f43f ae8f 	beq.w	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8007026:	2601      	movs	r6, #1
 8007028:	4635      	mov	r5, r6
 800702a:	e698      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->RngClockSelection)
 800702c:	2900      	cmp	r1, #0
 800702e:	f47f aeca 	bne.w	8006dc6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
    if (ret == HAL_OK)
 8007032:	2d00      	cmp	r5, #0
 8007034:	f040 8365 	bne.w	8007702 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8007038:	4f21      	ldr	r7, [pc, #132]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 800703a:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800703e:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8007042:	4301      	orrs	r1, r0
 8007044:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8007048:	e6bf      	b.n	8006dca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800704a:	481d      	ldr	r0, [pc, #116]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 800704c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800704e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007052:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8007054:	2d00      	cmp	r5, #0
 8007056:	f040 864b 	bne.w	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x19a0>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800705a:	4f19      	ldr	r7, [pc, #100]	; (80070c0 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 800705c:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8007060:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007064:	f021 0107 	bic.w	r1, r1, #7
 8007068:	4301      	orrs	r1, r0
 800706a:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800706e:	00d9      	lsls	r1, r3, #3
 8007070:	d52a      	bpl.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    switch (pPeriphClkInit->Spi2ClockSelection)
 8007072:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 8007076:	2920      	cmp	r1, #32
 8007078:	d824      	bhi.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 800707a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800707e:	0264      	.short	0x0264
 8007080:	00230023 	.word	0x00230023
 8007084:	00230023 	.word	0x00230023
 8007088:	00230023 	.word	0x00230023
 800708c:	07090023 	.word	0x07090023
 8007090:	00230023 	.word	0x00230023
 8007094:	00230023 	.word	0x00230023
 8007098:	00230023 	.word	0x00230023
 800709c:	06ea0023 	.word	0x06ea0023
 80070a0:	00230023 	.word	0x00230023
 80070a4:	00230023 	.word	0x00230023
 80070a8:	00230023 	.word	0x00230023
 80070ac:	02690023 	.word	0x02690023
 80070b0:	00230023 	.word	0x00230023
 80070b4:	00230023 	.word	0x00230023
 80070b8:	00230023 	.word	0x00230023
 80070bc:	02690023 	.word	0x02690023
 80070c0:	44020c00 	.word	0x44020c00
 80070c4:	2601      	movs	r6, #1
 80070c6:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80070c8:	0099      	lsls	r1, r3, #2
 80070ca:	d534      	bpl.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi3ClockSelection)
 80070cc:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 80070d0:	2980      	cmp	r1, #128	; 0x80
 80070d2:	f000 859d 	beq.w	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
 80070d6:	f200 80d5 	bhi.w	8007284 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80070da:	2900      	cmp	r1, #0
 80070dc:	f000 8246 	beq.w	800756c <HAL_RCCEx_PeriphCLKConfig+0x121c>
 80070e0:	2940      	cmp	r1, #64	; 0x40
 80070e2:	f040 80d6 	bne.w	8007292 <HAL_RCCEx_PeriphCLKConfig+0xf42>
  __HAL_RCC_PLL2_DISABLE();
 80070e6:	4db4      	ldr	r5, [pc, #720]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070ee:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80070f0:	f7fd fc32 	bl	8004958 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070f4:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80070f6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070f8:	011a      	lsls	r2, r3, #4
 80070fa:	d508      	bpl.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070fc:	f7fd fc2c 	bl	8004958 <HAL_GetTick>
 8007100:	1bc0      	subs	r0, r0, r7
 8007102:	2802      	cmp	r0, #2
 8007104:	f200 87a2 	bhi.w	800804c <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	011a      	lsls	r2, r3, #4
 800710c:	d4f6      	bmi.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0xdac>
 800710e:	f104 0008 	add.w	r0, r4, #8
 8007112:	f7ff f869 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007116:	e9d4 3200 	ldrd	r3, r2, [r4]
 800711a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800711c:	2d00      	cmp	r5, #0
 800711e:	f040 822d 	bne.w	800757c <HAL_RCCEx_PeriphCLKConfig+0x122c>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8007122:	4fa5      	ldr	r7, [pc, #660]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007124:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8007128:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800712c:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8007130:	4301      	orrs	r1, r0
 8007132:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007136:	0058      	lsls	r0, r3, #1
 8007138:	d532      	bpl.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi4ClockSelection)
 800713a:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 800713e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007142:	f000 8376 	beq.w	8007832 <HAL_RCCEx_PeriphCLKConfig+0x14e2>
 8007146:	f200 80a7 	bhi.w	8007298 <HAL_RCCEx_PeriphCLKConfig+0xf48>
 800714a:	b1e1      	cbz	r1, 8007186 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 800714c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007150:	f040 80ac 	bne.w	80072ac <HAL_RCCEx_PeriphCLKConfig+0xf5c>
  __HAL_RCC_PLL2_DISABLE();
 8007154:	4d98      	ldr	r5, [pc, #608]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007156:	682b      	ldr	r3, [r5, #0]
 8007158:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800715c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800715e:	f7fd fbfb 	bl	8004958 <HAL_GetTick>
 8007162:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007164:	e005      	b.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xe22>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007166:	f7fd fbf7 	bl	8004958 <HAL_GetTick>
 800716a:	1bc0      	subs	r0, r0, r7
 800716c:	2802      	cmp	r0, #2
 800716e:	f200 8761 	bhi.w	8008034 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007172:	682b      	ldr	r3, [r5, #0]
 8007174:	0119      	lsls	r1, r3, #4
 8007176:	d4f6      	bmi.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0xe16>
 8007178:	f104 0008 	add.w	r0, r4, #8
 800717c:	f7ff f834 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8007180:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007184:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007186:	2d00      	cmp	r5, #0
 8007188:	f040 864e 	bne.w	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 800718c:	4f8a      	ldr	r7, [pc, #552]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800718e:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8007192:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007196:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 800719a:	4301      	orrs	r1, r0
 800719c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	da30      	bge.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi5ClockSelection)
 80071a4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 80071a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ac:	f000 8325 	beq.w	80077fa <HAL_RCCEx_PeriphCLKConfig+0x14aa>
 80071b0:	d87f      	bhi.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
 80071b2:	b1db      	cbz	r3, 80071ec <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b8:	f040 8083 	bne.w	80072c2 <HAL_RCCEx_PeriphCLKConfig+0xf72>
  __HAL_RCC_PLL2_DISABLE();
 80071bc:	4d7e      	ldr	r5, [pc, #504]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80071be:	682b      	ldr	r3, [r5, #0]
 80071c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071c4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80071c6:	f7fd fbc7 	bl	8004958 <HAL_GetTick>
 80071ca:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071cc:	e005      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xe8a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80071ce:	f7fd fbc3 	bl	8004958 <HAL_GetTick>
 80071d2:	1bc0      	subs	r0, r0, r7
 80071d4:	2802      	cmp	r0, #2
 80071d6:	f200 870d 	bhi.w	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80071da:	682b      	ldr	r3, [r5, #0]
 80071dc:	011b      	lsls	r3, r3, #4
 80071de:	d4f6      	bmi.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
 80071e0:	f104 0008 	add.w	r0, r4, #8
 80071e4:	f7ff f800 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
 80071e8:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80071ea:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80071ec:	2d00      	cmp	r5, #0
 80071ee:	f040 8615 	bne.w	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1acc>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 80071f2:	4971      	ldr	r1, [pc, #452]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80071f4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 80071f8:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 80071fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007200:	4303      	orrs	r3, r0
 8007202:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007206:	07d1      	lsls	r1, r2, #31
 8007208:	d52f      	bpl.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xf1a>
    switch (pPeriphClkInit->Spi6ClockSelection)
 800720a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 800720e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007212:	f000 84a8 	beq.w	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8007216:	d857      	bhi.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0xf78>
 8007218:	b1d3      	cbz	r3, 8007250 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800721a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800721e:	d15b      	bne.n	80072d8 <HAL_RCCEx_PeriphCLKConfig+0xf88>
  __HAL_RCC_PLL2_DISABLE();
 8007220:	4d65      	ldr	r5, [pc, #404]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007222:	682b      	ldr	r3, [r5, #0]
 8007224:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007228:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800722a:	f7fd fb95 	bl	8004958 <HAL_GetTick>
 800722e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007230:	e005      	b.n	800723e <HAL_RCCEx_PeriphCLKConfig+0xeee>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007232:	f7fd fb91 	bl	8004958 <HAL_GetTick>
 8007236:	1bc0      	subs	r0, r0, r7
 8007238:	2802      	cmp	r0, #2
 800723a:	f200 86ac 	bhi.w	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800723e:	682b      	ldr	r3, [r5, #0]
 8007240:	011b      	lsls	r3, r3, #4
 8007242:	d4f6      	bmi.n	8007232 <HAL_RCCEx_PeriphCLKConfig+0xee2>
 8007244:	f104 0008 	add.w	r0, r4, #8
 8007248:	f7fe ffce 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
 800724c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800724e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007250:	2d00      	cmp	r5, #0
 8007252:	f040 85c8 	bne.w	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x1a96>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8007256:	4958      	ldr	r1, [pc, #352]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007258:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 800725c:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 8007260:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8007264:	4303      	orrs	r3, r0
 8007266:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800726a:	0791      	lsls	r1, r2, #30
 800726c:	d538      	bpl.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->OspiClockSelection)
 800726e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8007272:	2b03      	cmp	r3, #3
 8007274:	f200 876b 	bhi.w	800814e <HAL_RCCEx_PeriphCLKConfig+0x1dfe>
 8007278:	e8df f013 	tbh	[pc, r3, lsl #1]
 800727c:	00840089 	.word	0x00840089
 8007280:	008904ae 	.word	0x008904ae
    switch (pPeriphClkInit->Spi3ClockSelection)
 8007284:	29c0      	cmp	r1, #192	; 0xc0
 8007286:	f43f af49 	beq.w	800711c <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 800728a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800728e:	f43f af45 	beq.w	800711c <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 8007292:	2601      	movs	r6, #1
 8007294:	4635      	mov	r5, r6
 8007296:	e74e      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8007298:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 800729c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80072a0:	f43f af71 	beq.w	8007186 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 80072a4:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80072a8:	f43f af6d 	beq.w	8007186 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 80072ac:	2601      	movs	r6, #1
 80072ae:	4635      	mov	r5, r6
 80072b0:	e776      	b.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi5ClockSelection)
 80072b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072b6:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80072ba:	d097      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 80072bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80072c0:	d094      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 80072c2:	2601      	movs	r6, #1
 80072c4:	4635      	mov	r5, r6
 80072c6:	e79e      	b.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi6ClockSelection)
 80072c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072cc:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80072d0:	d0be      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80072d2:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80072d6:	d0bb      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80072d8:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80072da:	0791      	lsls	r1, r2, #30
    switch (pPeriphClkInit->Spi6ClockSelection)
 80072dc:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80072de:	d4c6      	bmi.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072e0:	0757      	lsls	r7, r2, #29
 80072e2:	d50c      	bpl.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xfae>
    switch (pPeriphClkInit->FdcanClockSelection)
 80072e4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 80072e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ec:	d069      	beq.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x1072>
 80072ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f2:	f000 8209 	beq.w	8007708 <HAL_RCCEx_PeriphCLKConfig+0x13b8>
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d068      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80072fa:	2601      	movs	r6, #1
 80072fc:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072fe:	06d1      	lsls	r1, r2, #27
 8007300:	d509      	bpl.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
    switch (pPeriphClkInit->UsbClockSelection)
 8007302:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8007306:	2b20      	cmp	r3, #32
 8007308:	f000 839a 	beq.w	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d070      	beq.n	80073f2 <HAL_RCCEx_PeriphCLKConfig+0x10a2>
 8007310:	2b10      	cmp	r3, #16
 8007312:	d069      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x1098>
 8007314:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007316:	0713      	lsls	r3, r2, #28
 8007318:	d509      	bpl.n	800732e <HAL_RCCEx_PeriphCLKConfig+0xfde>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 800731a:	4a27      	ldr	r2, [pc, #156]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800731c:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 8007320:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8007324:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007328:	430b      	orrs	r3, r1
 800732a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 800732e:	4630      	mov	r0, r6
 8007330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_RCC_PLL3_DISABLE();
 8007334:	4d20      	ldr	r5, [pc, #128]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007336:	682b      	ldr	r3, [r5, #0]
 8007338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800733c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800733e:	f7fd fb0b 	bl	8004958 <HAL_GetTick>
 8007342:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007344:	e005      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x1002>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007346:	f7fd fb07 	bl	8004958 <HAL_GetTick>
 800734a:	1bc0      	subs	r0, r0, r7
 800734c:	2802      	cmp	r0, #2
 800734e:	f200 866b 	bhi.w	8008028 <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	0098      	lsls	r0, r3, #2
 8007356:	d4f6      	bmi.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0xff6>
 8007358:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800735c:	f7fe ff9e 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007360:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007364:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007366:	2d00      	cmp	r5, #0
 8007368:	f040 8567 	bne.w	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1aea>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 800736c:	4f12      	ldr	r7, [pc, #72]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800736e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8007372:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007376:	f021 0107 	bic.w	r1, r1, #7
 800737a:	4301      	orrs	r1, r0
 800737c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8007380:	f7ff ba6d 	b.w	800685e <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007384:	490c      	ldr	r1, [pc, #48]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007386:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800738c:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 800738e:	2d00      	cmp	r5, #0
 8007390:	f040 81d6 	bne.w	8007740 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007394:	4908      	ldr	r1, [pc, #32]	; (80073b8 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8007396:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 800739a:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 800739e:	f023 0303 	bic.w	r3, r3, #3
 80073a2:	4303      	orrs	r3, r0
 80073a4:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80073a8:	e79a      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->AdcDacClockSelection)
 80073aa:	2601      	movs	r6, #1
 80073ac:	4635      	mov	r5, r6
 80073ae:	e4ef      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80073b0:	2601      	movs	r6, #1
 80073b2:	4635      	mov	r5, r6
 80073b4:	e56b      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 80073b6:	bf00      	nop
 80073b8:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80073bc:	2601      	movs	r6, #1
 80073be:	4635      	mov	r5, r6
 80073c0:	e533      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xada>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073c2:	49b5      	ldr	r1, [pc, #724]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80073c4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80073c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ca:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 80073cc:	2d00      	cmp	r5, #0
 80073ce:	f040 81b9 	bne.w	8007744 <HAL_RCCEx_PeriphCLKConfig+0x13f4>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80073d2:	49b1      	ldr	r1, [pc, #708]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80073d4:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 80073d8:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
 80073dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e0:	4303      	orrs	r3, r0
 80073e2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80073e6:	e78a      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xfae>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e8:	49ab      	ldr	r1, [pc, #684]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80073ea:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80073ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f0:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 80073f2:	2d00      	cmp	r5, #0
 80073f4:	f040 81a8 	bne.w	8007748 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80073f8:	49a7      	ldr	r1, [pc, #668]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80073fa:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80073fe:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 8007402:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8007406:	4303      	orrs	r3, r0
 8007408:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800740c:	e783      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 800740e:	4da2      	ldr	r5, [pc, #648]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007416:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007418:	f7fd fa9e 	bl	8004958 <HAL_GetTick>
 800741c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800741e:	e005      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x10dc>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007420:	f7fd fa9a 	bl	8004958 <HAL_GetTick>
 8007424:	1bc0      	subs	r0, r0, r7
 8007426:	2802      	cmp	r0, #2
 8007428:	f200 8646 	bhi.w	80080b8 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	d4f6      	bmi.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x10d0>
 8007432:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007436:	f7fe ff31 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800743a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800743e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007440:	2d00      	cmp	r5, #0
 8007442:	f040 8479 	bne.w	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x19e8>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8007446:	4f94      	ldr	r7, [pc, #592]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007448:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 800744c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8007450:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8007454:	4301      	orrs	r1, r0
 8007456:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800745a:	f7ff bac1 	b.w	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    if (ret == HAL_OK)
 800745e:	2d00      	cmp	r5, #0
 8007460:	f040 8327 	bne.w	8007ab2 <HAL_RCCEx_PeriphCLKConfig+0x1762>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8007464:	4f8c      	ldr	r7, [pc, #560]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007466:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 800746a:	f020 0008 	bic.w	r0, r0, #8
 800746e:	4301      	orrs	r1, r0
 8007470:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007474:	0199      	lsls	r1, r3, #6
 8007476:	f57f ac98 	bpl.w	8006daa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 800747a:	4f88      	ldr	r7, [pc, #544]	; (800769c <HAL_RCCEx_PeriphCLKConfig+0x134c>)
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	f043 0301 	orr.w	r3, r3, #1
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
    tickstart = HAL_GetTick();
 8007484:	f7fd fa68 	bl	8004958 <HAL_GetTick>
 8007488:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800748a:	e006      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x114a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800748c:	f7fd fa64 	bl	8004958 <HAL_GetTick>
 8007490:	eba0 0008 	sub.w	r0, r0, r8
 8007494:	2802      	cmp	r0, #2
 8007496:	f200 8549 	bhi.w	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	07db      	lsls	r3, r3, #31
 800749e:	d5f5      	bpl.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x113c>
    if (ret == HAL_OK)
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	f040 863d 	bne.w	8008120 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074a6:	4f7c      	ldr	r7, [pc, #496]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 80074a8:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80074ac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK)
 80074b0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80074b4:	d02b      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x11be>
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 80074b6:	f402 7140 	and.w	r1, r2, #768	; 0x300
 80074ba:	4299      	cmp	r1, r3
 80074bc:	d029      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074be:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 80074c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80074ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80074d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80074da:	f420 7340 	bic.w	r3, r0, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074de:	07c0      	lsls	r0, r0, #31
        RCC->BDCR = tmpregister;
 80074e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80074e4:	f140 8625 	bpl.w	8008132 <HAL_RCCEx_PeriphCLKConfig+0x1de2>
        tickstart = HAL_GetTick();
 80074e8:	f7fd fa36 	bl	8004958 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074ec:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80074f0:	4680      	mov	r8, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80074f2:	e006      	b.n	8007502 <HAL_RCCEx_PeriphCLKConfig+0x11b2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80074f4:	f7fd fa30 	bl	8004958 <HAL_GetTick>
 80074f8:	eba0 0008 	sub.w	r0, r0, r8
 80074fc:	4548      	cmp	r0, r9
 80074fe:	f200 8515 	bhi.w	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007502:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007506:	079b      	lsls	r3, r3, #30
 8007508:	d5f4      	bpl.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0x11a4>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800750a:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 800750e:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8007512:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007516:	f000 85f8 	beq.w	800810a <HAL_RCCEx_PeriphCLKConfig+0x1dba>
 800751a:	495f      	ldr	r1, [pc, #380]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800751c:	69cb      	ldr	r3, [r1, #28]
 800751e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007522:	61cb      	str	r3, [r1, #28]
 8007524:	4b5c      	ldr	r3, [pc, #368]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007526:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800752a:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800752e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8007532:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 8007536:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800753a:	430a      	orrs	r2, r1
 800753c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007540:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007544:	e431      	b.n	8006daa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007546:	4854      	ldr	r0, [pc, #336]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007548:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800754a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800754e:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8007550:	2d00      	cmp	r5, #0
 8007552:	f040 849a 	bne.w	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8007556:	4f50      	ldr	r7, [pc, #320]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007558:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 800755c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8007560:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8007564:	4301      	orrs	r1, r0
 8007566:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 800756a:	e5ad      	b.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800756c:	484a      	ldr	r0, [pc, #296]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800756e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007570:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007574:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8007576:	2d00      	cmp	r5, #0
 8007578:	f43f add3 	beq.w	8007122 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800757c:	462e      	mov	r6, r5
 800757e:	e5da      	b.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xde6>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007580:	4845      	ldr	r0, [pc, #276]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007582:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8007584:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8007588:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 800758a:	2d00      	cmp	r5, #0
 800758c:	f43f aba4 	beq.w	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8007590:	462e      	mov	r6, r5
 8007592:	f7ff bbab 	b.w	8006cec <HAL_RCCEx_PeriphCLKConfig+0x99c>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007596:	4840      	ldr	r0, [pc, #256]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007598:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800759a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800759e:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	f43f abd2 	beq.w	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80075a6:	462e      	mov	r6, r5
 80075a8:	f7ff bbd9 	b.w	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ac:	483a      	ldr	r0, [pc, #232]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80075ae:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80075b0:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80075b4:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 80075b6:	e45d      	b.n	8006e74 <HAL_RCCEx_PeriphCLKConfig+0xb24>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075b8:	4837      	ldr	r0, [pc, #220]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80075ba:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80075bc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80075c0:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 80075c2:	e425      	b.n	8006e10 <HAL_RCCEx_PeriphCLKConfig+0xac0>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c4:	4f34      	ldr	r7, [pc, #208]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80075c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075c8:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80075cc:	62b8      	str	r0, [r7, #40]	; 0x28
    if (ret == HAL_OK)
 80075ce:	2d00      	cmp	r5, #0
 80075d0:	f040 8097 	bne.w	8007702 <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80075d4:	e530      	b.n	8007038 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  __HAL_RCC_PLL2_DISABLE();
 80075d6:	4d30      	ldr	r5, [pc, #192]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80075de:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80075e0:	f7fd f9ba 	bl	8004958 <HAL_GetTick>
 80075e4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075e6:	e005      	b.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x12a4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80075e8:	f7fd f9b6 	bl	8004958 <HAL_GetTick>
 80075ec:	1bc0      	subs	r0, r0, r7
 80075ee:	2802      	cmp	r0, #2
 80075f0:	f200 8574 	bhi.w	80080dc <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	d4f6      	bmi.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1298>
 80075fa:	f104 0008 	add.w	r0, r4, #8
 80075fe:	f7fe fdf3 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007602:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007606:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007608:	2d00      	cmp	r5, #0
 800760a:	f43f abb7 	beq.w	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800760e:	e38d      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x19dc>
  __HAL_RCC_PLL3_DISABLE();
 8007610:	4d21      	ldr	r5, [pc, #132]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007612:	682b      	ldr	r3, [r5, #0]
 8007614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007618:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800761a:	f7fd f99d 	bl	8004958 <HAL_GetTick>
 800761e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007620:	e005      	b.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x12de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007622:	f7fd f999 	bl	8004958 <HAL_GetTick>
 8007626:	1bc0      	subs	r0, r0, r7
 8007628:	2802      	cmp	r0, #2
 800762a:	f200 853f 	bhi.w	80080ac <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800762e:	682b      	ldr	r3, [r5, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	d4f6      	bmi.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8007634:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007638:	f7fe fe30 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800763c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007640:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007642:	2d00      	cmp	r5, #0
 8007644:	f43f ac61 	beq.w	8006f0a <HAL_RCCEx_PeriphCLKConfig+0xbba>
 8007648:	e37f      	b.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x19fa>
  __HAL_RCC_PLL3_DISABLE();
 800764a:	4d13      	ldr	r5, [pc, #76]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800764c:	682b      	ldr	r3, [r5, #0]
 800764e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007652:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007654:	f7fd f980 	bl	8004958 <HAL_GetTick>
 8007658:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800765a:	e005      	b.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x1318>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800765c:	f7fd f97c 	bl	8004958 <HAL_GetTick>
 8007660:	1bc0      	subs	r0, r0, r7
 8007662:	2802      	cmp	r0, #2
 8007664:	f200 8534 	bhi.w	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x1d80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007668:	682b      	ldr	r3, [r5, #0]
 800766a:	0098      	lsls	r0, r3, #2
 800766c:	d4f6      	bmi.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800766e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007672:	f7fe fe13 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8007676:	e9d4 3200 	ldrd	r3, r2, [r4]
 800767a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800767c:	2d00      	cmp	r5, #0
 800767e:	f43f ac33 	beq.w	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007682:	e356      	b.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x19e2>
  __HAL_RCC_PLL3_DISABLE();
 8007684:	4d04      	ldr	r5, [pc, #16]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8007686:	682b      	ldr	r3, [r5, #0]
 8007688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800768c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800768e:	f7fd f963 	bl	8004958 <HAL_GetTick>
 8007692:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007694:	e00a      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x135c>
 8007696:	bf00      	nop
 8007698:	44020c00 	.word	0x44020c00
 800769c:	44020800 	.word	0x44020800
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076a0:	f7fd f95a 	bl	8004958 <HAL_GetTick>
 80076a4:	1bc0      	subs	r0, r0, r7
 80076a6:	2802      	cmp	r0, #2
 80076a8:	f200 850c 	bhi.w	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x1d74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	d4f6      	bmi.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x1350>
 80076b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80076b6:	f7fe fdf1 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076be:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80076c0:	2d00      	cmp	r5, #0
 80076c2:	f43f ac33 	beq.w	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xbdc>
 80076c6:	e33a      	b.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x19ee>
  __HAL_RCC_PLL3_DISABLE();
 80076c8:	4db5      	ldr	r5, [pc, #724]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80076ca:	682b      	ldr	r3, [r5, #0]
 80076cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076d0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80076d2:	f7fd f941 	bl	8004958 <HAL_GetTick>
 80076d6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076d8:	e005      	b.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x1396>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80076da:	f7fd f93d 	bl	8004958 <HAL_GetTick>
 80076de:	1bc0      	subs	r0, r0, r7
 80076e0:	2802      	cmp	r0, #2
 80076e2:	f200 84d7 	bhi.w	8008094 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80076e6:	682b      	ldr	r3, [r5, #0]
 80076e8:	0098      	lsls	r0, r3, #2
 80076ea:	d4f6      	bmi.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x138a>
 80076ec:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80076f0:	f7fe fdd4 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076f8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	f43f ac27 	beq.w	8006f4e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007700:	e320      	b.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x19f4>
 8007702:	462e      	mov	r6, r5
 8007704:	f7ff bb61 	b.w	8006dca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
  __HAL_RCC_PLL2_DISABLE();
 8007708:	4da5      	ldr	r5, [pc, #660]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007710:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007712:	f7fd f921 	bl	8004958 <HAL_GetTick>
 8007716:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007718:	e005      	b.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800771a:	f7fd f91d 	bl	8004958 <HAL_GetTick>
 800771e:	1bc0      	subs	r0, r0, r7
 8007720:	2802      	cmp	r0, #2
 8007722:	f200 84e9 	bhi.w	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007726:	682b      	ldr	r3, [r5, #0]
 8007728:	0118      	lsls	r0, r3, #4
 800772a:	d4f6      	bmi.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x13ca>
 800772c:	f104 0008 	add.w	r0, r4, #8
 8007730:	f7fe fd5a 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
 8007734:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007736:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007738:	2d00      	cmp	r5, #0
 800773a:	f43f ae4a 	beq.w	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800773e:	e001      	b.n	8007744 <HAL_RCCEx_PeriphCLKConfig+0x13f4>
 8007740:	462e      	mov	r6, r5
 8007742:	e5cd      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8007744:	462e      	mov	r6, r5
 8007746:	e5da      	b.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xfae>
 8007748:	462e      	mov	r6, r5
 800774a:	e5e4      	b.n	8007316 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 800774c:	4d94      	ldr	r5, [pc, #592]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800774e:	682b      	ldr	r3, [r5, #0]
 8007750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007754:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007756:	f7fd f8ff 	bl	8004958 <HAL_GetTick>
 800775a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800775c:	e005      	b.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x141a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800775e:	f7fd f8fb 	bl	8004958 <HAL_GetTick>
 8007762:	1bc0      	subs	r0, r0, r7
 8007764:	2802      	cmp	r0, #2
 8007766:	f200 8404 	bhi.w	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	0098      	lsls	r0, r3, #2
 800776e:	d4f6      	bmi.n	800775e <HAL_RCCEx_PeriphCLKConfig+0x140e>
 8007770:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007774:	f7fe fd92 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007778:	e9d4 3200 	ldrd	r3, r2, [r4]
 800777c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800777e:	2d00      	cmp	r5, #0
 8007780:	f43f a99a 	beq.w	8006ab8 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8007784:	e356      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
  __HAL_RCC_PLL3_DISABLE();
 8007786:	4d86      	ldr	r5, [pc, #536]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800778e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007790:	f7fd f8e2 	bl	8004958 <HAL_GetTick>
 8007794:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007796:	e005      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x1454>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007798:	f7fd f8de 	bl	8004958 <HAL_GetTick>
 800779c:	1bc0      	subs	r0, r0, r7
 800779e:	2802      	cmp	r0, #2
 80077a0:	f200 8430 	bhi.w	8008004 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	0098      	lsls	r0, r3, #2
 80077a8:	d4f6      	bmi.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x1448>
 80077aa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80077ae:	f7fe fd75 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80077b2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077b6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80077b8:	2d00      	cmp	r5, #0
 80077ba:	f43f a9b2 	beq.w	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80077be:	e336      	b.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x1ade>
  __HAL_RCC_PLL3_DISABLE();
 80077c0:	4d77      	ldr	r5, [pc, #476]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80077c2:	682b      	ldr	r3, [r5, #0]
 80077c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077c8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80077ca:	f7fd f8c5 	bl	8004958 <HAL_GetTick>
 80077ce:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077d0:	e005      	b.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x148e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80077d2:	f7fd f8c1 	bl	8004958 <HAL_GetTick>
 80077d6:	1bc0      	subs	r0, r0, r7
 80077d8:	2802      	cmp	r0, #2
 80077da:	f200 83f9 	bhi.w	8007fd0 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80077de:	682b      	ldr	r3, [r5, #0]
 80077e0:	0098      	lsls	r0, r3, #2
 80077e2:	d4f6      	bmi.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
 80077e4:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80077e8:	f7fe fd58 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80077ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077f0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80077f2:	2d00      	cmp	r5, #0
 80077f4:	f43e aeb1 	beq.w	800655a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80077f8:	e328      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x1afc>
  __HAL_RCC_PLL3_DISABLE();
 80077fa:	4d69      	ldr	r5, [pc, #420]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007802:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007804:	f7fd f8a8 	bl	8004958 <HAL_GetTick>
 8007808:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800780a:	e005      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x14c8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800780c:	f7fd f8a4 	bl	8004958 <HAL_GetTick>
 8007810:	1bc0      	subs	r0, r0, r7
 8007812:	2802      	cmp	r0, #2
 8007814:	f200 83ee 	bhi.w	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007818:	682b      	ldr	r3, [r5, #0]
 800781a:	0098      	lsls	r0, r3, #2
 800781c:	d4f6      	bmi.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x14bc>
 800781e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007822:	f7fe fd3b 	bl	800629c <RCCEx_PLL3_Config.part.0>
 8007826:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007828:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800782a:	2d00      	cmp	r5, #0
 800782c:	f43f ace1 	beq.w	80071f2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8007830:	e2f4      	b.n	8007e1c <HAL_RCCEx_PeriphCLKConfig+0x1acc>
  __HAL_RCC_PLL3_DISABLE();
 8007832:	4d5b      	ldr	r5, [pc, #364]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800783a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800783c:	f7fd f88c 	bl	8004958 <HAL_GetTick>
 8007840:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007842:	e005      	b.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x1500>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007844:	f7fd f888 	bl	8004958 <HAL_GetTick>
 8007848:	1bc0      	subs	r0, r0, r7
 800784a:	2802      	cmp	r0, #2
 800784c:	f200 83f2 	bhi.w	8008034 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007850:	682b      	ldr	r3, [r5, #0]
 8007852:	009a      	lsls	r2, r3, #2
 8007854:	d4f6      	bmi.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x14f4>
 8007856:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800785a:	f7fe fd1f 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800785e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007862:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007864:	2d00      	cmp	r5, #0
 8007866:	f43f ac91 	beq.w	800718c <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 800786a:	e2dd      	b.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
  __HAL_RCC_PLL3_DISABLE();
 800786c:	4d4c      	ldr	r5, [pc, #304]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800786e:	682b      	ldr	r3, [r5, #0]
 8007870:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007874:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007876:	f7fd f86f 	bl	8004958 <HAL_GetTick>
 800787a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800787c:	e005      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x153a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800787e:	f7fd f86b 	bl	8004958 <HAL_GetTick>
 8007882:	1bc0      	subs	r0, r0, r7
 8007884:	2802      	cmp	r0, #2
 8007886:	f200 836e 	bhi.w	8007f66 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800788a:	682b      	ldr	r3, [r5, #0]
 800788c:	0098      	lsls	r0, r3, #2
 800788e:	d4f6      	bmi.n	800787e <HAL_RCCEx_PeriphCLKConfig+0x152e>
 8007890:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007894:	f7fe fd02 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007898:	e9d4 3200 	ldrd	r3, r2, [r4]
 800789c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800789e:	2d00      	cmp	r5, #0
 80078a0:	f43e ae91 	beq.w	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80078a4:	e2cc      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x1af0>
  __HAL_RCC_PLL3_DISABLE();
 80078a6:	4d3e      	ldr	r5, [pc, #248]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078ae:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80078b0:	f7fd f852 	bl	8004958 <HAL_GetTick>
 80078b4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078b6:	e005      	b.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x1574>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078b8:	f7fd f84e 	bl	8004958 <HAL_GetTick>
 80078bc:	1bc0      	subs	r0, r0, r7
 80078be:	2802      	cmp	r0, #2
 80078c0:	f200 836e 	bhi.w	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078c4:	682b      	ldr	r3, [r5, #0]
 80078c6:	0098      	lsls	r0, r3, #2
 80078c8:	d4f6      	bmi.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x1568>
 80078ca:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80078ce:	f7fe fce5 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80078d2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80078d6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80078d8:	2d00      	cmp	r5, #0
 80078da:	f43e af41 	beq.w	8006760 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80078de:	e291      	b.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
  __HAL_RCC_PLL3_DISABLE();
 80078e0:	4d2f      	ldr	r5, [pc, #188]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80078e2:	682b      	ldr	r3, [r5, #0]
 80078e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078e8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80078ea:	f7fd f835 	bl	8004958 <HAL_GetTick>
 80078ee:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078f0:	e005      	b.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x15ae>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80078f2:	f7fd f831 	bl	8004958 <HAL_GetTick>
 80078f6:	1bc0      	subs	r0, r0, r7
 80078f8:	2802      	cmp	r0, #2
 80078fa:	f200 8346 	bhi.w	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80078fe:	682b      	ldr	r3, [r5, #0]
 8007900:	0098      	lsls	r0, r3, #2
 8007902:	d4f6      	bmi.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x15a2>
 8007904:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007908:	f7fe fcc8 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800790c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007910:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007912:	2d00      	cmp	r5, #0
 8007914:	f43f a93d 	beq.w	8006b92 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007918:	e277      	b.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0x1aba>
  __HAL_RCC_PLL3_DISABLE();
 800791a:	4d21      	ldr	r5, [pc, #132]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007922:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007924:	f7fd f818 	bl	8004958 <HAL_GetTick>
 8007928:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800792a:	e005      	b.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x15e8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800792c:	f7fd f814 	bl	8004958 <HAL_GetTick>
 8007930:	1bc0      	subs	r0, r0, r7
 8007932:	2802      	cmp	r0, #2
 8007934:	f200 8323 	bhi.w	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007938:	682b      	ldr	r3, [r5, #0]
 800793a:	0098      	lsls	r0, r3, #2
 800793c:	d4f6      	bmi.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x15dc>
 800793e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007942:	f7fe fcab 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007946:	e9d4 3200 	ldrd	r3, r2, [r4]
 800794a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800794c:	2d00      	cmp	r5, #0
 800794e:	f43e aea0 	beq.w	8006692 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007952:	e278      	b.n	8007e46 <HAL_RCCEx_PeriphCLKConfig+0x1af6>
  __HAL_RCC_PLL3_DISABLE();
 8007954:	4d12      	ldr	r5, [pc, #72]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8007956:	682b      	ldr	r3, [r5, #0]
 8007958:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800795c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800795e:	f7fc fffb 	bl	8004958 <HAL_GetTick>
 8007962:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007964:	e005      	b.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0x1622>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007966:	f7fc fff7 	bl	8004958 <HAL_GetTick>
 800796a:	1bc0      	subs	r0, r0, r7
 800796c:	2802      	cmp	r0, #2
 800796e:	f200 8329 	bhi.w	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007972:	682b      	ldr	r3, [r5, #0]
 8007974:	0098      	lsls	r0, r3, #2
 8007976:	d4f6      	bmi.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x1616>
 8007978:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800797c:	f7fe fc8e 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007980:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007984:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007986:	2d00      	cmp	r5, #0
 8007988:	f43e ad81 	beq.w	800648e <HAL_RCCEx_PeriphCLKConfig+0x13e>
 800798c:	e237      	b.n	8007dfe <HAL_RCCEx_PeriphCLKConfig+0x1aae>
  __HAL_RCC_PLL3_DISABLE();
 800798e:	4d04      	ldr	r5, [pc, #16]	; (80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8007990:	682b      	ldr	r3, [r5, #0]
 8007992:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007996:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007998:	f7fc ffde 	bl	8004958 <HAL_GetTick>
 800799c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800799e:	e007      	b.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1660>
 80079a0:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079a4:	f7fc ffd8 	bl	8004958 <HAL_GetTick>
 80079a8:	1bc0      	subs	r0, r0, r7
 80079aa:	2802      	cmp	r0, #2
 80079ac:	f200 82d5 	bhi.w	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	0098      	lsls	r0, r3, #2
 80079b4:	d4f6      	bmi.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x1654>
 80079b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80079ba:	f7fe fc6f 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80079be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80079c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80079c4:	2d00      	cmp	r5, #0
 80079c6:	f43f a919 	beq.w	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 80079ca:	e209      	b.n	8007de0 <HAL_RCCEx_PeriphCLKConfig+0x1a90>
  __HAL_RCC_PLL3_DISABLE();
 80079cc:	4db0      	ldr	r5, [pc, #704]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079d4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80079d6:	f7fc ffbf 	bl	8004958 <HAL_GetTick>
 80079da:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079dc:	e005      	b.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x169a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80079de:	f7fc ffbb 	bl	8004958 <HAL_GetTick>
 80079e2:	1bc0      	subs	r0, r0, r7
 80079e4:	2802      	cmp	r0, #2
 80079e6:	f200 82e7 	bhi.w	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	0098      	lsls	r0, r3, #2
 80079ee:	d4f6      	bmi.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x168e>
 80079f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80079f4:	f7fe fc52 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80079f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80079fc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80079fe:	2d00      	cmp	r5, #0
 8007a00:	f43e ae7a 	beq.w	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8007a04:	e204      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
  __HAL_RCC_PLL3_DISABLE();
 8007a06:	4da2      	ldr	r5, [pc, #648]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a0e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007a10:	f7fc ffa2 	bl	8004958 <HAL_GetTick>
 8007a14:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a16:	e005      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0x16d4>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a18:	f7fc ff9e 	bl	8004958 <HAL_GetTick>
 8007a1c:	1bc0      	subs	r0, r0, r7
 8007a1e:	2802      	cmp	r0, #2
 8007a20:	f200 82e2 	bhi.w	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a24:	682b      	ldr	r3, [r5, #0]
 8007a26:	0098      	lsls	r0, r3, #2
 8007a28:	d4f6      	bmi.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x16c8>
 8007a2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007a2e:	f7fe fc35 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007a32:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007a36:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007a38:	2d00      	cmp	r5, #0
 8007a3a:	f43f a808 	beq.w	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 8007a3e:	e1d5      	b.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
  __HAL_RCC_PLL3_DISABLE();
 8007a40:	4d93      	ldr	r5, [pc, #588]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007a42:	682b      	ldr	r3, [r5, #0]
 8007a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a48:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007a4a:	f7fc ff85 	bl	8004958 <HAL_GetTick>
 8007a4e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a50:	e005      	b.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x170e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a52:	f7fc ff81 	bl	8004958 <HAL_GetTick>
 8007a56:	1bc0      	subs	r0, r0, r7
 8007a58:	2802      	cmp	r0, #2
 8007a5a:	f200 8352 	bhi.w	8008102 <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a5e:	682b      	ldr	r3, [r5, #0]
 8007a60:	009a      	lsls	r2, r3, #2
 8007a62:	d4f6      	bmi.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0x1702>
 8007a64:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007a68:	f7fe fc18 	bl	800629c <RCCEx_PLL3_Config.part.0>
 8007a6c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007a6e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007a70:	2d00      	cmp	r5, #0
 8007a72:	f43f acc1 	beq.w	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8007a76:	e667      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
  __HAL_RCC_PLL3_DISABLE();
 8007a78:	4d85      	ldr	r5, [pc, #532]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a80:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007a82:	f7fc ff69 	bl	8004958 <HAL_GetTick>
 8007a86:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a88:	e005      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x1746>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007a8a:	f7fc ff65 	bl	8004958 <HAL_GetTick>
 8007a8e:	1bc0      	subs	r0, r0, r7
 8007a90:	2802      	cmp	r0, #2
 8007a92:	f200 82c3 	bhi.w	800801c <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007a96:	682b      	ldr	r3, [r5, #0]
 8007a98:	0098      	lsls	r0, r3, #2
 8007a9a:	d4f6      	bmi.n	8007a8a <HAL_RCCEx_PeriphCLKConfig+0x173a>
 8007a9c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007aa0:	f7fe fbfc 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007aa4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007aa8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007aaa:	2d00      	cmp	r5, #0
 8007aac:	f43f a8db 	beq.w	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x916>
 8007ab0:	e19f      	b.n	8007df2 <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
 8007ab2:	462e      	mov	r6, r5
 8007ab4:	f7ff b976 	b.w	8006da4 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  __HAL_RCC_PLL3_DISABLE();
 8007ab8:	4d75      	ldr	r5, [pc, #468]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007aba:	682b      	ldr	r3, [r5, #0]
 8007abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007ac2:	f7fc ff49 	bl	8004958 <HAL_GetTick>
 8007ac6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ac8:	e005      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x1786>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007aca:	f7fc ff45 	bl	8004958 <HAL_GetTick>
 8007ace:	1bc0      	subs	r0, r0, r7
 8007ad0:	2802      	cmp	r0, #2
 8007ad2:	f200 8283 	bhi.w	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ad6:	682b      	ldr	r3, [r5, #0]
 8007ad8:	0098      	lsls	r0, r3, #2
 8007ada:	d4f6      	bmi.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x177a>
 8007adc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007ae0:	f7fe fbdc 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ae4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ae8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007aea:	2d00      	cmp	r5, #0
 8007aec:	f43e aee3 	beq.w	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007af0:	e197      	b.n	8007e22 <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
  __HAL_RCC_PLL3_DISABLE();
 8007af2:	4d67      	ldr	r5, [pc, #412]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007afa:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007afc:	f7fc ff2c 	bl	8004958 <HAL_GetTick>
 8007b00:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b02:	e005      	b.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x17c0>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b04:	f7fc ff28 	bl	8004958 <HAL_GetTick>
 8007b08:	1bc0      	subs	r0, r0, r7
 8007b0a:	2802      	cmp	r0, #2
 8007b0c:	f200 824e 	bhi.w	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	0098      	lsls	r0, r3, #2
 8007b14:	d4f6      	bmi.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x17b4>
 8007b16:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007b1a:	f7fe fbbf 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007b1e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007b22:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007b24:	2d00      	cmp	r5, #0
 8007b26:	f43e ad81 	beq.w	800662c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8007b2a:	e174      	b.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
  __HAL_RCC_PLL3_DISABLE();
 8007b2c:	4d58      	ldr	r5, [pc, #352]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007b2e:	682b      	ldr	r3, [r5, #0]
 8007b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b34:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007b36:	f7fc ff0f 	bl	8004958 <HAL_GetTick>
 8007b3a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b3c:	e005      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x17fa>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b3e:	f7fc ff0b 	bl	8004958 <HAL_GetTick>
 8007b42:	1bc0      	subs	r0, r0, r7
 8007b44:	2802      	cmp	r0, #2
 8007b46:	f200 8202 	bhi.w	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b4a:	682b      	ldr	r3, [r5, #0]
 8007b4c:	0098      	lsls	r0, r3, #2
 8007b4e:	d4f6      	bmi.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x17ee>
 8007b50:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007b54:	f7fe fba2 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007b58:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007b5c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	f43e aede 	beq.w	8006920 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8007b64:	e148      	b.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
  __HAL_RCC_PLL3_DISABLE();
 8007b66:	4d4a      	ldr	r5, [pc, #296]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b6e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007b70:	f7fc fef2 	bl	8004958 <HAL_GetTick>
 8007b74:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b76:	e005      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x1834>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007b78:	f7fc feee 	bl	8004958 <HAL_GetTick>
 8007b7c:	1bc0      	subs	r0, r0, r7
 8007b7e:	2802      	cmp	r0, #2
 8007b80:	f200 8209 	bhi.w	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	0098      	lsls	r0, r3, #2
 8007b88:	d4f6      	bmi.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x1828>
 8007b8a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007b8e:	f7fe fb85 	bl	800629c <RCCEx_PLL3_Config.part.0>
 8007b92:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007b94:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	f43f ab5d 	beq.w	8007256 <HAL_RCCEx_PeriphCLKConfig+0xf06>
 8007b9c:	e123      	b.n	8007de6 <HAL_RCCEx_PeriphCLKConfig+0x1a96>
  __HAL_RCC_PLL3_DISABLE();
 8007b9e:	4d3c      	ldr	r5, [pc, #240]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007ba0:	682b      	ldr	r3, [r5, #0]
 8007ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ba6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007ba8:	f7fc fed6 	bl	8004958 <HAL_GetTick>
 8007bac:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bae:	e005      	b.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0x186c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007bb0:	f7fc fed2 	bl	8004958 <HAL_GetTick>
 8007bb4:	1bc0      	subs	r0, r0, r7
 8007bb6:	2802      	cmp	r0, #2
 8007bb8:	f200 81c3 	bhi.w	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	0098      	lsls	r0, r3, #2
 8007bc0:	d4f6      	bmi.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x1860>
 8007bc2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007bc6:	f7fe fb69 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bca:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007bce:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	f43e ac8f 	beq.w	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007bd6:	e100      	b.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
  __HAL_RCC_PLL2_DISABLE();
 8007bd8:	4d2d      	ldr	r5, [pc, #180]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007bda:	682b      	ldr	r3, [r5, #0]
 8007bdc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007be0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007be2:	f7fc feb9 	bl	8004958 <HAL_GetTick>
 8007be6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007be8:	e005      	b.n	8007bf6 <HAL_RCCEx_PeriphCLKConfig+0x18a6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007bea:	f7fc feb5 	bl	8004958 <HAL_GetTick>
 8007bee:	1bc0      	subs	r0, r0, r7
 8007bf0:	2802      	cmp	r0, #2
 8007bf2:	f200 827c 	bhi.w	80080ee <HAL_RCCEx_PeriphCLKConfig+0x1d9e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007bf6:	682b      	ldr	r3, [r5, #0]
 8007bf8:	011b      	lsls	r3, r3, #4
 8007bfa:	d4f6      	bmi.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x189a>
 8007bfc:	f104 0008 	add.w	r0, r4, #8
 8007c00:	f7fe faf2 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
 8007c04:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c06:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007c08:	2d00      	cmp	r5, #0
 8007c0a:	f43f abc3 	beq.w	8007394 <HAL_RCCEx_PeriphCLKConfig+0x1044>
 8007c0e:	e597      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
  __HAL_RCC_PLL3_DISABLE();
 8007c10:	4d1f      	ldr	r5, [pc, #124]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007c12:	682b      	ldr	r3, [r5, #0]
 8007c14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c18:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007c1a:	f7fc fe9d 	bl	8004958 <HAL_GetTick>
 8007c1e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c20:	e005      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x18de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c22:	f7fc fe99 	bl	8004958 <HAL_GetTick>
 8007c26:	1bc0      	subs	r0, r0, r7
 8007c28:	2802      	cmp	r0, #2
 8007c2a:	f200 820f 	bhi.w	800804c <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	d4f6      	bmi.n	8007c22 <HAL_RCCEx_PeriphCLKConfig+0x18d2>
 8007c34:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007c38:	f7fe fb30 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8007c3c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c40:	4605      	mov	r5, r0
 8007c42:	f7ff ba6b 	b.w	800711c <HAL_RCCEx_PeriphCLKConfig+0xdcc>
  __HAL_RCC_PLL3_DISABLE();
 8007c46:	4d12      	ldr	r5, [pc, #72]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007c48:	682b      	ldr	r3, [r5, #0]
 8007c4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c4e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007c50:	f7fc fe82 	bl	8004958 <HAL_GetTick>
 8007c54:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c56:	e005      	b.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x1914>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c58:	f7fc fe7e 	bl	8004958 <HAL_GetTick>
 8007c5c:	1bc0      	subs	r0, r0, r7
 8007c5e:	2802      	cmp	r0, #2
 8007c60:	f200 81ee 	bhi.w	8008040 <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	0098      	lsls	r0, r3, #2
 8007c68:	d4f6      	bmi.n	8007c58 <HAL_RCCEx_PeriphCLKConfig+0x1908>
 8007c6a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007c6e:	f7fe fb15 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007c72:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007c76:	4605      	mov	r5, r0
 8007c78:	f7ff b864 	b.w	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  __HAL_RCC_PLL3_DISABLE();
 8007c7c:	4d04      	ldr	r5, [pc, #16]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007c7e:	682b      	ldr	r3, [r5, #0]
 8007c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c84:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007c86:	f7fc fe67 	bl	8004958 <HAL_GetTick>
 8007c8a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c8c:	e008      	b.n	8007ca0 <HAL_RCCEx_PeriphCLKConfig+0x1950>
 8007c8e:	bf00      	nop
 8007c90:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007c94:	f7fc fe60 	bl	8004958 <HAL_GetTick>
 8007c98:	1bc0      	subs	r0, r0, r7
 8007c9a:	2802      	cmp	r0, #2
 8007c9c:	f200 81dc 	bhi.w	8008058 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	0098      	lsls	r0, r3, #2
 8007ca4:	d4f6      	bmi.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1944>
 8007ca6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007caa:	f7fe faf7 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007cae:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	f7ff b80d 	b.w	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x982>
  __HAL_RCC_PLL3_DISABLE();
 8007cb8:	4dd1      	ldr	r5, [pc, #836]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007cba:	682b      	ldr	r3, [r5, #0]
 8007cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007cc2:	f7fc fe49 	bl	8004958 <HAL_GetTick>
 8007cc6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cc8:	e005      	b.n	8007cd6 <HAL_RCCEx_PeriphCLKConfig+0x1986>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007cca:	f7fc fe45 	bl	8004958 <HAL_GetTick>
 8007cce:	1bc0      	subs	r0, r0, r7
 8007cd0:	2802      	cmp	r0, #2
 8007cd2:	f200 81c7 	bhi.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007cd6:	682b      	ldr	r3, [r5, #0]
 8007cd8:	0098      	lsls	r0, r3, #2
 8007cda:	d4f6      	bmi.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x197a>
 8007cdc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007ce0:	f7fe fadc 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007ce4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ce8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007cea:	2d00      	cmp	r5, #0
 8007cec:	f43f a9b5 	beq.w	800705a <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8007cf0:	462e      	mov	r6, r5
 8007cf2:	f7ff b9bc 	b.w	800706e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  __HAL_RCC_PLL2_DISABLE();
 8007cf6:	4dc2      	ldr	r5, [pc, #776]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007cf8:	682b      	ldr	r3, [r5, #0]
 8007cfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cfe:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007d00:	f7fc fe2a 	bl	8004958 <HAL_GetTick>
 8007d04:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d06:	e005      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x19c4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d08:	f7fc fe26 	bl	8004958 <HAL_GetTick>
 8007d0c:	1bc0      	subs	r0, r0, r7
 8007d0e:	2802      	cmp	r0, #2
 8007d10:	f200 81a8 	bhi.w	8008064 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d14:	682b      	ldr	r3, [r5, #0]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	d4f6      	bmi.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
 8007d1a:	f104 0008 	add.w	r0, r4, #8
 8007d1e:	f7fe fa63 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007d22:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d26:	4605      	mov	r5, r0
 8007d28:	f7ff b994 	b.w	8007054 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8007d2c:	462e      	mov	r6, r5
 8007d2e:	f7ff b82f 	b.w	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007d32:	462e      	mov	r6, r5
 8007d34:	f7fe be46 	b.w	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8007d38:	462e      	mov	r6, r5
 8007d3a:	f7fe be51 	b.w	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
 8007d3e:	462e      	mov	r6, r5
 8007d40:	f7fe be0a 	b.w	8006958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007d44:	462e      	mov	r6, r5
 8007d46:	f7fe be19 	b.w	800697c <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8007d4a:	462e      	mov	r6, r5
 8007d4c:	f7fe be28 	b.w	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8007d50:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8007d52:	2d00      	cmp	r5, #0
 8007d54:	f040 81c8 	bne.w	80080e8 <HAL_RCCEx_PeriphCLKConfig+0x1d98>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007d58:	4fa9      	ldr	r7, [pc, #676]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007d5a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8007d5c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8007d60:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8007d64:	4301      	orrs	r1, r0
 8007d66:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8007d6a:	f7fe bb68 	b.w	800643e <HAL_RCCEx_PeriphCLKConfig+0xee>
  __HAL_RCC_PLL2_DISABLE();
 8007d6e:	4da4      	ldr	r5, [pc, #656]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007d70:	682b      	ldr	r3, [r5, #0]
 8007d72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d76:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007d78:	f7fc fdee 	bl	8004958 <HAL_GetTick>
 8007d7c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d7e:	e005      	b.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x1a3c>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d80:	f7fc fdea 	bl	8004958 <HAL_GetTick>
 8007d84:	1bc0      	subs	r0, r0, r7
 8007d86:	2802      	cmp	r0, #2
 8007d88:	f200 814e 	bhi.w	8008028 <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d8c:	682b      	ldr	r3, [r5, #0]
 8007d8e:	011b      	lsls	r3, r3, #4
 8007d90:	d4f6      	bmi.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x1a30>
 8007d92:	f104 0008 	add.w	r0, r4, #8
 8007d96:	f7fe fa27 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007d9a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007d9e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007da0:	2d00      	cmp	r5, #0
 8007da2:	f43f aae3 	beq.w	800736c <HAL_RCCEx_PeriphCLKConfig+0x101c>
 8007da6:	e048      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0x1aea>
  __HAL_RCC_PLL2_DISABLE();
 8007da8:	4d95      	ldr	r5, [pc, #596]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007daa:	682b      	ldr	r3, [r5, #0]
 8007dac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007db0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007db2:	f7fc fdd1 	bl	8004958 <HAL_GetTick>
 8007db6:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007db8:	e005      	b.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x1a76>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dba:	f7fc fdcd 	bl	8004958 <HAL_GetTick>
 8007dbe:	1b80      	subs	r0, r0, r6
 8007dc0:	2802      	cmp	r0, #2
 8007dc2:	f200 80b9 	bhi.w	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	011f      	lsls	r7, r3, #4
 8007dca:	d4f6      	bmi.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x1a6a>
 8007dcc:	f104 0008 	add.w	r0, r4, #8
 8007dd0:	f7fe fa0a 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
 8007dd4:	4606      	mov	r6, r0
 8007dd6:	f7fe baf1 	b.w	80063bc <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007dda:	462e      	mov	r6, r5
 8007ddc:	f7fe bb93 	b.w	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007de0:	462e      	mov	r6, r5
 8007de2:	f7fe bf15 	b.w	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8007de6:	462e      	mov	r6, r5
 8007de8:	f7ff ba3f 	b.w	800726a <HAL_RCCEx_PeriphCLKConfig+0xf1a>
 8007dec:	462e      	mov	r6, r5
 8007dee:	f7fe be38 	b.w	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x712>
 8007df2:	462e      	mov	r6, r5
 8007df4:	f7fe bf41 	b.w	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8007df8:	462e      	mov	r6, r5
 8007dfa:	f7fe bd9b 	b.w	8006934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8007dfe:	462e      	mov	r6, r5
 8007e00:	f7fe bb4e 	b.w	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8007e04:	462e      	mov	r6, r5
 8007e06:	f7fe bcb5 	b.w	8006774 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007e0a:	462e      	mov	r6, r5
 8007e0c:	f7fe becb 	b.w	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x856>
 8007e10:	462e      	mov	r6, r5
 8007e12:	f7fe bc7a 	b.w	800670a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007e16:	462e      	mov	r6, r5
 8007e18:	f7fe bc11 	b.w	800663e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8007e1c:	462e      	mov	r6, r5
 8007e1e:	f7ff b9f2 	b.w	8007206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8007e22:	462e      	mov	r6, r5
 8007e24:	f7fe bd51 	b.w	80068ca <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8007e28:	462e      	mov	r6, r5
 8007e2a:	f7ff b9b9 	b.w	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8007e2e:	462e      	mov	r6, r5
 8007e30:	f7fe be81 	b.w	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8007e34:	462e      	mov	r6, r5
 8007e36:	f7fe be49 	b.w	8006acc <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8007e3a:	462e      	mov	r6, r5
 8007e3c:	f7fe bd0f 	b.w	800685e <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8007e40:	462e      	mov	r6, r5
 8007e42:	f7fe bbc9 	b.w	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8007e46:	462e      	mov	r6, r5
 8007e48:	f7fe bc2c 	b.w	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8007e4c:	462e      	mov	r6, r5
 8007e4e:	f7fe bb8d 	b.w	800656c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  __HAL_RCC_PLL3_DISABLE();
 8007e52:	4d6b      	ldr	r5, [pc, #428]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007e54:	682b      	ldr	r3, [r5, #0]
 8007e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e5a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007e5c:	f7fc fd7c 	bl	8004958 <HAL_GetTick>
 8007e60:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e62:	e005      	b.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x1b20>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e64:	f7fc fd78 	bl	8004958 <HAL_GetTick>
 8007e68:	1bc0      	subs	r0, r0, r7
 8007e6a:	2802      	cmp	r0, #2
 8007e6c:	f200 8100 	bhi.w	8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e70:	682b      	ldr	r3, [r5, #0]
 8007e72:	0098      	lsls	r0, r3, #2
 8007e74:	d4f6      	bmi.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x1b14>
 8007e76:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007e7a:	f7fe fa0f 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007e7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007e82:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007e84:	2d00      	cmp	r5, #0
 8007e86:	f43f ab66 	beq.w	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1206>
 8007e8a:	462e      	mov	r6, r5
 8007e8c:	f7ff b91c 	b.w	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  __HAL_RCC_PLL2_DISABLE();
 8007e90:	4d5b      	ldr	r5, [pc, #364]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007e92:	682b      	ldr	r3, [r5, #0]
 8007e94:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e98:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007e9a:	f7fc fd5d 	bl	8004958 <HAL_GetTick>
 8007e9e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ea0:	e005      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1b5e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ea2:	f7fc fd59 	bl	8004958 <HAL_GetTick>
 8007ea6:	1bc0      	subs	r0, r0, r7
 8007ea8:	2802      	cmp	r0, #2
 8007eaa:	f200 80e1 	bhi.w	8008070 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007eae:	682b      	ldr	r3, [r5, #0]
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	d4f6      	bmi.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x1b52>
 8007eb4:	f104 0008 	add.w	r0, r4, #8
 8007eb8:	f7fe f996 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007ebc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	f7ff bb45 	b.w	8007550 <HAL_RCCEx_PeriphCLKConfig+0x1200>
  __HAL_RCC_PLL2_DISABLE();
 8007ec6:	4d4e      	ldr	r5, [pc, #312]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007ec8:	682b      	ldr	r3, [r5, #0]
 8007eca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ece:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007ed0:	f7fc fd42 	bl	8004958 <HAL_GetTick>
 8007ed4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ed6:	e005      	b.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x1b94>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007ed8:	f7fc fd3e 	bl	8004958 <HAL_GetTick>
 8007edc:	1bc0      	subs	r0, r0, r7
 8007ede:	2802      	cmp	r0, #2
 8007ee0:	f200 8096 	bhi.w	8008010 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ee4:	682b      	ldr	r3, [r5, #0]
 8007ee6:	011b      	lsls	r3, r3, #4
 8007ee8:	d4f6      	bmi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8007eea:	f104 0008 	add.w	r0, r4, #8
 8007eee:	f7fe f97b 	bl	80061e8 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ef2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007ef6:	4605      	mov	r5, r0
 8007ef8:	e72b      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x1a02>
  __HAL_RCC_PLL3_DISABLE();
 8007efa:	4d41      	ldr	r5, [pc, #260]	; (8008000 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007efc:	682b      	ldr	r3, [r5, #0]
 8007efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f02:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007f04:	f7fc fd28 	bl	8004958 <HAL_GetTick>
 8007f08:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f0a:	e004      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x1bc6>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007f0c:	f7fc fd24 	bl	8004958 <HAL_GetTick>
 8007f10:	1bc0      	subs	r0, r0, r7
 8007f12:	2802      	cmp	r0, #2
 8007f14:	d87c      	bhi.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f16:	682b      	ldr	r3, [r5, #0]
 8007f18:	0098      	lsls	r0, r3, #2
 8007f1a:	d4f7      	bmi.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x1bbc>
 8007f1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007f20:	f7fe f9bc 	bl	800629c <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f24:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f28:	4605      	mov	r5, r0
 8007f2a:	e712      	b.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x1a02>
            ret = HAL_TIMEOUT;
 8007f2c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f2e:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 8007f32:	4635      	mov	r5, r6
 8007f34:	f7fe bf39 	b.w	8006daa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f38:	2603      	movs	r6, #3
 8007f3a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f3e:	f7fe ba4c 	b.w	80063da <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f42:	2603      	movs	r6, #3
 8007f44:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f48:	4635      	mov	r5, r6
 8007f4a:	f7fe badc 	b.w	8006506 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007f4e:	2603      	movs	r6, #3
 8007f50:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f54:	4635      	mov	r5, r6
 8007f56:	f7fe bced 	b.w	8006934 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007f5a:	2603      	movs	r6, #3
 8007f5c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f60:	4635      	mov	r5, r6
 8007f62:	f7fe be55 	b.w	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f66:	2603      	movs	r6, #3
 8007f68:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f6c:	4635      	mov	r5, r6
 8007f6e:	f7fe bb33 	b.w	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x288>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8007f72:	2603      	movs	r6, #3
 8007f74:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f78:	4635      	mov	r5, r6
 8007f7a:	f7fe bda7 	b.w	8006acc <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8007f7e:	2603      	movs	r6, #3
 8007f80:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f84:	4635      	mov	r5, r6
 8007f86:	f7fe bb8d 	b.w	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007f8a:	2603      	movs	r6, #3
 8007f8c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f90:	4635      	mov	r5, r6
 8007f92:	f7fe be08 	b.w	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007f96:	2603      	movs	r6, #3
 8007f98:	6862      	ldr	r2, [r4, #4]
 8007f9a:	4635      	mov	r5, r6
 8007f9c:	f7ff b965 	b.w	800726a <HAL_RCCEx_PeriphCLKConfig+0xf1a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007fa0:	2603      	movs	r6, #3
 8007fa2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fa6:	4635      	mov	r5, r6
 8007fa8:	f7fe bbe4 	b.w	8006774 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007fac:	2603      	movs	r6, #3
 8007fae:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fb2:	4635      	mov	r5, r6
 8007fb4:	f7fe bb43 	b.w	800663e <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007fb8:	2603      	movs	r6, #3
 8007fba:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fbe:	4635      	mov	r5, r6
 8007fc0:	f7fe bba3 	b.w	800670a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fc4:	2603      	movs	r6, #3
 8007fc6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fca:	4635      	mov	r5, r6
 8007fcc:	f7fe ba68 	b.w	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x150>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007fd0:	2603      	movs	r6, #3
 8007fd2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fd6:	4635      	mov	r5, r6
 8007fd8:	f7fe bac8 	b.w	800656c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fdc:	2603      	movs	r6, #3
 8007fde:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fe2:	4635      	mov	r5, r6
 8007fe4:	f7fe bc71 	b.w	80068ca <HAL_RCCEx_PeriphCLKConfig+0x57a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007fe8:	2603      	movs	r6, #3
 8007fea:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fee:	4635      	mov	r5, r6
 8007ff0:	f7fe bd37 	b.w	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x712>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ff4:	2603      	movs	r6, #3
 8007ff6:	6862      	ldr	r2, [r4, #4]
 8007ff8:	4635      	mov	r5, r6
 8007ffa:	f7ff b904 	b.w	8007206 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8007ffe:	bf00      	nop
 8008000:	44020c00 	.word	0x44020c00
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8008004:	2603      	movs	r6, #3
 8008006:	e9d4 3200 	ldrd	r3, r2, [r4]
 800800a:	4635      	mov	r5, r6
 800800c:	f7fe bd93 	b.w	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008010:	2603      	movs	r6, #3
 8008012:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008016:	4635      	mov	r5, r6
 8008018:	f7fe ba11 	b.w	800643e <HAL_RCCEx_PeriphCLKConfig+0xee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800801c:	2603      	movs	r6, #3
 800801e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008022:	4635      	mov	r5, r6
 8008024:	f7fe be29 	b.w	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x92a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8008028:	2603      	movs	r6, #3
 800802a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800802e:	4635      	mov	r5, r6
 8008030:	f7fe bc15 	b.w	800685e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8008034:	2603      	movs	r6, #3
 8008036:	e9d4 3200 	ldrd	r3, r2, [r4]
 800803a:	4635      	mov	r5, r6
 800803c:	f7ff b8b0 	b.w	80071a0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8008040:	2603      	movs	r6, #3
 8008042:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008046:	4635      	mov	r5, r6
 8008048:	f7fe be89 	b.w	8006d5e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800804c:	2603      	movs	r6, #3
 800804e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008052:	4635      	mov	r5, r6
 8008054:	f7ff b86f 	b.w	8007136 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8008058:	2603      	movs	r6, #3
 800805a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800805e:	4635      	mov	r5, r6
 8008060:	f7fe be44 	b.w	8006cec <HAL_RCCEx_PeriphCLKConfig+0x99c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8008064:	2603      	movs	r6, #3
 8008066:	e9d4 3200 	ldrd	r3, r2, [r4]
 800806a:	4635      	mov	r5, r6
 800806c:	f7fe bfff 	b.w	800706e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8008070:	2603      	movs	r6, #3
 8008072:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008076:	4635      	mov	r5, r6
 8008078:	f7ff b826 	b.w	80070c8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 800807c:	462e      	mov	r6, r5
 800807e:	f7fe bf06 	b.w	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 8008082:	462e      	mov	r6, r5
 8008084:	f7fe bed1 	b.w	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8008088:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800808a:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 800808e:	4635      	mov	r5, r6
 8008090:	f7fe becb 	b.w	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8008094:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008096:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 800809a:	4635      	mov	r5, r6
 800809c:	f7fe bc6e 	b.w	800697c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      return HAL_TIMEOUT;
 80080a0:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80080a2:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 80080a6:	4635      	mov	r5, r6
 80080a8:	f7fe bef1 	b.w	8006e8e <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      return HAL_TIMEOUT;
 80080ac:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80080ae:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 80080b2:	4635      	mov	r5, r6
 80080b4:	f7fe bc74 	b.w	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80080b8:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080ba:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 80080be:	4635      	mov	r5, r6
 80080c0:	f7fe bc8e 	b.w	80069e0 <HAL_RCCEx_PeriphCLKConfig+0x690>
 80080c4:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080c6:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 80080ca:	4635      	mov	r5, r6
 80080cc:	f7fe bc44 	b.w	8006958 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80080d0:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80080d2:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 80080d6:	4635      	mov	r5, r6
 80080d8:	f7fe bc74 	b.w	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x674>
      return HAL_TIMEOUT;
 80080dc:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80080de:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 80080e2:	4635      	mov	r5, r6
 80080e4:	f7fe be54 	b.w	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80080e8:	462e      	mov	r6, r5
 80080ea:	f7fe b9a8 	b.w	800643e <HAL_RCCEx_PeriphCLKConfig+0xee>
 80080ee:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80080f0:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 80080f2:	4635      	mov	r5, r6
 80080f4:	f7ff b8f4 	b.w	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 80080f8:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080fa:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 80080fc:	4635      	mov	r5, r6
 80080fe:	f7ff b8fe 	b.w	80072fe <HAL_RCCEx_PeriphCLKConfig+0xfae>
      return HAL_TIMEOUT;
 8008102:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008104:	6862      	ldr	r2, [r4, #4]
 8008106:	f7ff b906 	b.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800810a:	4813      	ldr	r0, [pc, #76]	; (8008158 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
 800810c:	4b13      	ldr	r3, [pc, #76]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
 800810e:	69c1      	ldr	r1, [r0, #28]
 8008110:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8008114:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8008118:	430b      	orrs	r3, r1
 800811a:	61c3      	str	r3, [r0, #28]
 800811c:	f7ff ba02 	b.w	8007524 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008120:	462e      	mov	r6, r5
 8008122:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008126:	f7fe be40 	b.w	8006daa <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800812a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800812e:	f7fe b954 	b.w	80063da <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8008132:	460b      	mov	r3, r1
 8008134:	f7ff b9ed 	b.w	8007512 <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8008138:	2601      	movs	r6, #1
 800813a:	f7fe b94e 	b.w	80063da <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Spi1ClockSelection)
 800813e:	2601      	movs	r6, #1
 8008140:	4635      	mov	r5, r6
 8008142:	f7fe bf94 	b.w	800706e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8008146:	2601      	movs	r6, #1
 8008148:	4635      	mov	r5, r6
 800814a:	f7fe bb88 	b.w	800685e <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->OspiClockSelection)
 800814e:	2601      	movs	r6, #1
 8008150:	4635      	mov	r5, r6
 8008152:	f7ff b8c5 	b.w	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8008156:	bf00      	nop
 8008158:	44020c00 	.word	0x44020c00
 800815c:	00ffffcf 	.word	0x00ffffcf

08008160 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008160:	4b59      	ldr	r3, [pc, #356]	; (80082c8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
{
 8008162:	b4f0      	push	{r4, r5, r6, r7}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008164:	6b59      	ldr	r1, [r3, #52]	; 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008166:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008168:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800816a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
  if (pll1m != 0U)
 800816c:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8008172:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll1m != 0U)
 8008176:	d05a      	beq.n	800822e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008178:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800817c:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008180:	fb07 f202 	mul.w	r2, r7, r2
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008184:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008188:	ee07 2a90 	vmov	s15, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800818c:	ee07 1a10 	vmov	s14, r1
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8008190:	f005 0203 	and.w	r2, r5, #3
    switch (pll1source)
 8008194:	2a02      	cmp	r2, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8008196:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800819a:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80082cc <HAL_RCCEx_GetPLL1ClockFreq+0x16c>
 800819e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll1source)
 80081a2:	f000 8087 	beq.w	80082b4 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 80081a6:	2a03      	cmp	r2, #3
 80081a8:	d05f      	beq.n	800826a <HAL_RCCEx_GetPLL1ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	4b48      	ldr	r3, [pc, #288]	; (80082d0 <HAL_RCCEx_GetPLL1ClockFreq+0x170>)
 80081ae:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80081b2:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80081b4:	ee05 4a90 	vmov	s11, r4
 80081b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80081bc:	ee06 3a10 	vmov	s12, r3
 80081c0:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 80081c4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80081c8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80081cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081d0:	eec6 6a05 	vdiv.f32	s13, s12, s10
 80081d4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80081d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081dc:	4b3a      	ldr	r3, [pc, #232]	; (80082c8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	0197      	lsls	r7, r2, #6
 80081e2:	d429      	bmi.n	8008238 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081e8:	4b37      	ldr	r3, [pc, #220]	; (80082c8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 80081ea:	681a      	ldr	r2, [r3, #0]
 80081ec:	0195      	lsls	r5, r2, #6
 80081ee:	d502      	bpl.n	80081f6 <HAL_RCCEx_GetPLL1ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80081f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081f2:	0394      	lsls	r4, r2, #14
 80081f4:	d44c      	bmi.n	8008290 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80081f6:	2300      	movs	r3, #0
 80081f8:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80081fa:	4b33      	ldr	r3, [pc, #204]	; (80082c8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	0191      	lsls	r1, r2, #6
 8008200:	d52f      	bpl.n	8008262 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8008202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008204:	0352      	lsls	r2, r2, #13
 8008206:	d52c      	bpl.n	8008262 <HAL_RCCEx_GetPLL1ClockFreq+0x102>
}
 8008208:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800820a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800820c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008210:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008214:	ee07 3a10 	vmov	s14, r3
 8008218:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 800821c:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 8008220:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008224:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008228:	edc0 6a02 	vstr	s13, [r0, #8]
}
 800822c:	4770      	bx	lr
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800822e:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008232:	6084      	str	r4, [r0, #8]
}
 8008234:	bcf0      	pop	{r4, r5, r6, r7}
 8008236:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800823a:	03d6      	lsls	r6, r2, #15
 800823c:	d5d2      	bpl.n	80081e4 <HAL_RCCEx_GetPLL1ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800823e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008244:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008248:	ee07 3a10 	vmov	s14, r3
 800824c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 8008250:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 8008254:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008258:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800825c:	edc0 6a00 	vstr	s13, [r0]
 8008260:	e7c2      	b.n	80081e8 <HAL_RCCEx_GetPLL1ClockFreq+0x88>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008262:	2300      	movs	r3, #0
}
 8008264:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 8008266:	6083      	str	r3, [r0, #8]
}
 8008268:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800826a:	ee05 4a90 	vmov	s11, r4
 800826e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008272:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008276:	ed9f 5a17 	vldr	s10, [pc, #92]	; 80082d4 <HAL_RCCEx_GetPLL1ClockFreq+0x174>
 800827a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800827e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008282:	eec5 6a25 	vdiv.f32	s13, s10, s11
 8008286:	ee77 7a86 	vadd.f32	s15, s15, s12
 800828a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800828e:	e7a5      	b.n	80081dc <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8008292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008296:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800829a:	ee07 3a10 	vmov	s14, r3
 800829e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 80082a2:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 80082a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80082aa:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80082ae:	edc0 6a01 	vstr	s13, [r0, #4]
 80082b2:	e7a2      	b.n	80081fa <HAL_RCCEx_GetPLL1ClockFreq+0x9a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80082b4:	ee05 4a90 	vmov	s11, r4
 80082b8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80082bc:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80082c0:	ed9f 5a05 	vldr	s10, [pc, #20]	; 80082d8 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 80082c4:	e7d9      	b.n	800827a <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 80082c6:	bf00      	nop
 80082c8:	44020c00 	.word	0x44020c00
 80082cc:	39000000 	.word	0x39000000
 80082d0:	017d7840 	.word	0x017d7840
 80082d4:	4bbebc20 	.word	0x4bbebc20
 80082d8:	4a742400 	.word	0x4a742400

080082dc <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80082dc:	4b59      	ldr	r3, [pc, #356]	; (8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
{
 80082de:	b4f0      	push	{r4, r5, r6, r7}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80082e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80082e2:	6add      	ldr	r5, [r3, #44]	; 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80082e4:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80082e6:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 80082e8:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80082ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 80082ee:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll2m != 0U)
 80082f2:	d05a      	beq.n	80083aa <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80082f4:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80082f8:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80082fc:	fb07 f202 	mul.w	r2, r7, r2
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008300:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008304:	ee07 2a90 	vmov	s15, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008308:	ee07 1a10 	vmov	s14, r1
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800830c:	f005 0203 	and.w	r2, r5, #3
    switch (pll2source)
 8008310:	2a02      	cmp	r2, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008316:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8008448 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 800831a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll2source)
 800831e:	f000 8087 	beq.w	8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8008322:	2a03      	cmp	r2, #3
 8008324:	d05f      	beq.n	80083e6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008326:	681a      	ldr	r2, [r3, #0]
 8008328:	4b48      	ldr	r3, [pc, #288]	; (800844c <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
 800832a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800832e:	40d3      	lsrs	r3, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008330:	ee05 4a90 	vmov	s11, r4
 8008334:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008338:	ee06 3a10 	vmov	s12, r3
 800833c:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8008340:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008344:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800834c:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8008350:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008354:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008358:	4b3a      	ldr	r3, [pc, #232]	; (8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	0117      	lsls	r7, r2, #4
 800835e:	d429      	bmi.n	80083b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8008360:	2300      	movs	r3, #0
 8008362:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008364:	4b37      	ldr	r3, [pc, #220]	; (8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	0115      	lsls	r5, r2, #4
 800836a:	d502      	bpl.n	8008372 <HAL_RCCEx_GetPLL2ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836e:	0394      	lsls	r4, r2, #14
 8008370:	d44c      	bmi.n	800840c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008372:	2300      	movs	r3, #0
 8008374:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008376:	4b33      	ldr	r3, [pc, #204]	; (8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	0111      	lsls	r1, r2, #4
 800837c:	d52f      	bpl.n	80083de <HAL_RCCEx_GetPLL2ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800837e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008380:	0352      	lsls	r2, r2, #13
 8008382:	d52c      	bpl.n	80083de <HAL_RCCEx_GetPLL2ClockFreq+0x102>
}
 8008384:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008388:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800838c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008390:	ee07 3a10 	vmov	s14, r3
 8008394:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8008398:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 800839c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80083a0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80083a4:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80083a8:	4770      	bx	lr
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 80083aa:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80083ae:	6084      	str	r4, [r0, #8]
}
 80083b0:	bcf0      	pop	{r4, r5, r6, r7}
 80083b2:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80083b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083b6:	03d6      	lsls	r6, r2, #15
 80083b8:	d5d2      	bpl.n	8008360 <HAL_RCCEx_GetPLL2ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80083bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80083c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80083c4:	ee07 3a10 	vmov	s14, r3
 80083c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 80083cc:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 80083d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80083d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80083d8:	edc0 6a00 	vstr	s13, [r0]
 80083dc:	e7c2      	b.n	8008364 <HAL_RCCEx_GetPLL2ClockFreq+0x88>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 80083e2:	6083      	str	r3, [r0, #8]
}
 80083e4:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 80083e6:	ee05 4a90 	vmov	s11, r4
 80083ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80083ee:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80083f2:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8008450 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 80083f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80083fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80083fe:	eec5 6a25 	vdiv.f32	s13, s10, s11
 8008402:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008406:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800840a:	e7a5      	b.n	8008358 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800840c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800840e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008412:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008416:	ee07 3a10 	vmov	s14, r3
 800841a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 800841e:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 8008422:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008426:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800842a:	edc0 6a01 	vstr	s13, [r0, #4]
 800842e:	e7a2      	b.n	8008376 <HAL_RCCEx_GetPLL2ClockFreq+0x9a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8008430:	ee05 4a90 	vmov	s11, r4
 8008434:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008438:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800843c:	ed9f 5a05 	vldr	s10, [pc, #20]	; 8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 8008440:	e7d9      	b.n	80083f6 <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
 8008442:	bf00      	nop
 8008444:	44020c00 	.word	0x44020c00
 8008448:	39000000 	.word	0x39000000
 800844c:	017d7840 	.word	0x017d7840
 8008450:	4bbebc20 	.word	0x4bbebc20
 8008454:	4a742400 	.word	0x4a742400

08008458 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008458:	4b59      	ldr	r3, [pc, #356]	; (80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
{
 800845a:	b4f0      	push	{r4, r5, r6, r7}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800845c:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800845e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8008460:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008462:	6b1f      	ldr	r7, [r3, #48]	; 0x30
  if (pll3m != 0U)
 8008464:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 800846a:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll3m != 0U)
 800846e:	d05a      	beq.n	8008526 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008470:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008474:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008478:	fb07 f202 	mul.w	r2, r7, r2
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 800847c:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008480:	ee07 2a90 	vmov	s15, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008484:	ee07 1a10 	vmov	s14, r1
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008488:	f005 0203 	and.w	r2, r5, #3
    switch (pll3source)
 800848c:	2a02      	cmp	r2, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800848e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008492:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80085c4 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8008496:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll3source)
 800849a:	f000 8087 	beq.w	80085ac <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800849e:	2a03      	cmp	r2, #3
 80084a0:	d05f      	beq.n	8008562 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	4b48      	ldr	r3, [pc, #288]	; (80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
 80084a6:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 80084aa:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80084ac:	ee05 4a90 	vmov	s11, r4
 80084b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80084b4:	ee06 3a10 	vmov	s12, r3
 80084b8:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 80084bc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80084c0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80084c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084c8:	eec6 6a05 	vdiv.f32	s13, s12, s10
 80084cc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80084d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084d4:	4b3a      	ldr	r3, [pc, #232]	; (80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	0097      	lsls	r7, r2, #2
 80084da:	d429      	bmi.n	8008530 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 80084dc:	2300      	movs	r3, #0
 80084de:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084e0:	4b37      	ldr	r3, [pc, #220]	; (80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	0095      	lsls	r5, r2, #2
 80084e6:	d502      	bpl.n	80084ee <HAL_RCCEx_GetPLL3ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80084e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084ea:	0394      	lsls	r4, r2, #14
 80084ec:	d44c      	bmi.n	8008588 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084ee:	2300      	movs	r3, #0
 80084f0:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80084f2:	4b33      	ldr	r3, [pc, #204]	; (80085c0 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	0091      	lsls	r1, r2, #2
 80084f8:	d52f      	bpl.n	800855a <HAL_RCCEx_GetPLL3ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80084fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084fc:	0352      	lsls	r2, r2, #13
 80084fe:	d52c      	bpl.n	800855a <HAL_RCCEx_GetPLL3ClockFreq+0x102>
}
 8008500:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008508:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800850c:	ee07 3a10 	vmov	s14, r3
 8008510:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8008514:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 8008518:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800851c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008520:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8008524:	4770      	bx	lr
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008526:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800852a:	6084      	str	r4, [r0, #8]
}
 800852c:	bcf0      	pop	{r4, r5, r6, r7}
 800852e:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008532:	03d6      	lsls	r6, r2, #15
 8008534:	d5d2      	bpl.n	80084dc <HAL_RCCEx_GetPLL3ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8008538:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800853c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008540:	ee07 3a10 	vmov	s14, r3
 8008544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8008548:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 800854c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008550:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8008554:	edc0 6a00 	vstr	s13, [r0]
 8008558:	e7c2      	b.n	80084e0 <HAL_RCCEx_GetPLL3ClockFreq+0x88>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800855a:	2300      	movs	r3, #0
}
 800855c:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 800855e:	6083      	str	r3, [r0, #8]
}
 8008560:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8008562:	ee05 4a90 	vmov	s11, r4
 8008566:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800856a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800856e:	ed9f 5a17 	vldr	s10, [pc, #92]	; 80085cc <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 8008572:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800857a:	eec5 6a25 	vdiv.f32	s13, s10, s11
 800857e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008582:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8008586:	e7a5      	b.n	80084d4 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800858a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800858e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008592:	ee07 3a10 	vmov	s14, r3
 8008596:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 800859a:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 800859e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80085a2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80085a6:	edc0 6a01 	vstr	s13, [r0, #4]
 80085aa:	e7a2      	b.n	80084f2 <HAL_RCCEx_GetPLL3ClockFreq+0x9a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 80085ac:	ee05 4a90 	vmov	s11, r4
 80085b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80085b4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80085b8:	ed9f 5a05 	vldr	s10, [pc, #20]	; 80085d0 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 80085bc:	e7d9      	b.n	8008572 <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
 80085be:	bf00      	nop
 80085c0:	44020c00 	.word	0x44020c00
 80085c4:	39000000 	.word	0x39000000
 80085c8:	017d7840 	.word	0x017d7840
 80085cc:	4bbebc20 	.word	0x4bbebc20
 80085d0:	4a742400 	.word	0x4a742400

080085d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80085d4:	f100 437e 	add.w	r3, r0, #4261412864	; 0xfe000000
 80085d8:	430b      	orrs	r3, r1
 80085da:	f000 8318 	beq.w	8008c0e <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
{
 80085de:	b500      	push	{lr}
    switch (PeriphClk)
 80085e0:	f5a0 1380 	sub.w	r3, r0, #1048576	; 0x100000
 80085e4:	430b      	orrs	r3, r1
{
 80085e6:	b085      	sub	sp, #20
    switch (PeriphClk)
 80085e8:	f000 872b 	beq.w	8009442 <HAL_RCCEx_GetPeriphCLKFreq+0xe6e>
 80085ec:	4bac      	ldr	r3, [pc, #688]	; (80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80085ee:	4298      	cmp	r0, r3
 80085f0:	f171 0300 	sbcs.w	r3, r1, #0
 80085f4:	d23f      	bcs.n	8008676 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80085f6:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 80085fa:	430b      	orrs	r3, r1
 80085fc:	f000 8750 	beq.w	80094a0 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>
 8008600:	f240 4301 	movw	r3, #1025	; 0x401
 8008604:	4298      	cmp	r0, r3
 8008606:	f171 0300 	sbcs.w	r3, r1, #0
 800860a:	d377      	bcc.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 800860c:	f5a0 4300 	sub.w	r3, r0, #32768	; 0x8000
 8008610:	430b      	orrs	r3, r1
 8008612:	f001 8077 	beq.w	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 8008616:	f248 0301 	movw	r3, #32769	; 0x8001
 800861a:	4298      	cmp	r0, r3
 800861c:	f171 0300 	sbcs.w	r3, r1, #0
 8008620:	f0c0 8207 	bcc.w	8008a32 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8008624:	f5a0 2380 	sub.w	r3, r0, #262144	; 0x40000
 8008628:	430b      	orrs	r3, r1
 800862a:	f000 8720 	beq.w	800946e <HAL_RCCEx_GetPeriphCLKFreq+0xe9a>
 800862e:	4b9d      	ldr	r3, [pc, #628]	; (80088a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008630:	4298      	cmp	r0, r3
 8008632:	f171 0300 	sbcs.w	r3, r1, #0
 8008636:	f0c0 81d8 	bcc.w	80089ea <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 800863a:	f5a0 2000 	sub.w	r0, r0, #524288	; 0x80000
 800863e:	ea50 0301 	orrs.w	r3, r0, r1
 8008642:	bf18      	it	ne
 8008644:	2000      	movne	r0, #0
 8008646:	d113      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8008648:	4a97      	ldr	r2, [pc, #604]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800864a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 800864e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
        switch (srcclk)
 8008652:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008656:	f000 85a6 	beq.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 800865a:	f200 866b 	bhi.w	8009334 <HAL_RCCEx_GetPeriphCLKFreq+0xd60>
 800865e:	2b00      	cmp	r3, #0
 8008660:	f000 859b 	beq.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 8008664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008668:	bf18      	it	ne
 800866a:	2000      	movne	r0, #0
 800866c:	f000 83c6 	beq.w	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
}
 8008670:	b005      	add	sp, #20
 8008672:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 8008676:	2300      	movs	r3, #0
 8008678:	2202      	movs	r2, #2
 800867a:	4291      	cmp	r1, r2
 800867c:	bf08      	it	eq
 800867e:	4298      	cmpeq	r0, r3
 8008680:	f001 8016 	beq.w	80096b0 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 8008684:	4283      	cmp	r3, r0
 8008686:	418a      	sbcs	r2, r1
 8008688:	d24c      	bcs.n	8008724 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800868a:	2240      	movs	r2, #64	; 0x40
 800868c:	4291      	cmp	r1, r2
 800868e:	bf08      	it	eq
 8008690:	4298      	cmpeq	r0, r3
 8008692:	f000 879d 	beq.w	80095d0 <HAL_RCCEx_GetPeriphCLKFreq+0xffc>
 8008696:	4283      	cmp	r3, r0
 8008698:	418a      	sbcs	r2, r1
 800869a:	f080 821f 	bcs.w	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0x508>
 800869e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086a2:	4291      	cmp	r1, r2
 80086a4:	bf08      	it	eq
 80086a6:	4298      	cmpeq	r0, r3
 80086a8:	f001 8015 	beq.w	80096d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80086ac:	4283      	cmp	r3, r0
 80086ae:	418a      	sbcs	r2, r1
 80086b0:	f080 81f0 	bcs.w	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 80086b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80086b8:	bf08      	it	eq
 80086ba:	4298      	cmpeq	r0, r3
 80086bc:	bf18      	it	ne
 80086be:	2000      	movne	r0, #0
 80086c0:	d1d6      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80086c2:	4a79      	ldr	r2, [pc, #484]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80086c4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 80086c8:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 80086cc:	f000 822c 	beq.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 80086d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086d4:	f001 8089 	beq.w	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80086d8:	6811      	ldr	r1, [r2, #0]
 80086da:	0788      	lsls	r0, r1, #30
 80086dc:	d503      	bpl.n	80086e6 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80086de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80086e2:	f001 8255 	beq.w	8009b90 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 80086e6:	4a70      	ldr	r2, [pc, #448]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80086e8:	6810      	ldr	r0, [r2, #0]
 80086ea:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80086ee:	d0bf      	beq.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 80086f0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80086f4:	486d      	ldr	r0, [pc, #436]	; (80088ac <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80086f6:	bf18      	it	ne
 80086f8:	2000      	movne	r0, #0
 80086fa:	e7b9      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80086fc:	2821      	cmp	r0, #33	; 0x21
 80086fe:	f171 0300 	sbcs.w	r3, r1, #0
 8008702:	d25e      	bcs.n	80087c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8008704:	ea50 0301 	orrs.w	r3, r0, r1
 8008708:	f000 827d 	beq.w	8008c06 <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 800870c:	3801      	subs	r0, #1
 800870e:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8008712:	2820      	cmp	r0, #32
 8008714:	f171 0300 	sbcs.w	r3, r1, #0
 8008718:	f0c0 82a0 	bcc.w	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 800871c:	2000      	movs	r0, #0
}
 800871e:	b005      	add	sp, #20
 8008720:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 8008724:	f100 4270 	add.w	r2, r0, #4026531840	; 0xf0000000
 8008728:	430a      	orrs	r2, r1
 800872a:	f000 8625 	beq.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 800872e:	4a60      	ldr	r2, [pc, #384]	; (80088b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8008730:	4290      	cmp	r0, r2
 8008732:	f171 0200 	sbcs.w	r2, r1, #0
 8008736:	f0c0 808d 	bcc.w	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800873a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800873e:	4299      	cmp	r1, r3
 8008740:	bf08      	it	eq
 8008742:	4290      	cmpeq	r0, r2
 8008744:	f000 8764 	beq.w	8009610 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 8008748:	4282      	cmp	r2, r0
 800874a:	eb73 0201 	sbcs.w	r2, r3, r1
 800874e:	f080 80cd 	bcs.w	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8008752:	2901      	cmp	r1, #1
 8008754:	bf08      	it	eq
 8008756:	4298      	cmpeq	r0, r3
 8008758:	bf18      	it	ne
 800875a:	2000      	movne	r0, #0
 800875c:	d188      	bne.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800875e:	4a52      	ldr	r2, [pc, #328]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008760:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8008764:	f413 3360 	ands.w	r3, r3, #229376	; 0x38000
 8008768:	f000 8512 	beq.w	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 800876c:	6812      	ldr	r2, [r2, #0]
 800876e:	0112      	lsls	r2, r2, #4
 8008770:	d503      	bpl.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8008772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008776:	f000 855b 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 800877a:	4a4b      	ldr	r2, [pc, #300]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800877c:	6812      	ldr	r2, [r2, #0]
 800877e:	0090      	lsls	r0, r2, #2
 8008780:	d503      	bpl.n	800878a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8008782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008786:	f000 8559 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 800878a:	4a47      	ldr	r2, [pc, #284]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800878c:	6811      	ldr	r1, [r2, #0]
 800878e:	0789      	lsls	r1, r1, #30
 8008790:	d503      	bpl.n	800879a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008792:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008796:	f001 8209 	beq.w	8009bac <HAL_RCCEx_GetPeriphCLKFreq+0x15d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 800879a:	4a43      	ldr	r2, [pc, #268]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800879c:	6812      	ldr	r2, [r2, #0]
 800879e:	0590      	lsls	r0, r2, #22
 80087a0:	d503      	bpl.n	80087aa <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80087a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80087a6:	f001 8291 	beq.w	8009ccc <HAL_RCCEx_GetPeriphCLKFreq+0x16f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 80087aa:	4a3f      	ldr	r2, [pc, #252]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087ac:	6810      	ldr	r0, [r2, #0]
 80087ae:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80087b2:	f43f af5d 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80087b6:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 80087ba:	483e      	ldr	r0, [pc, #248]	; (80088b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80087bc:	bf18      	it	ne
 80087be:	2000      	movne	r0, #0
 80087c0:	e756      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80087c2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 80087c6:	430b      	orrs	r3, r1
 80087c8:	f000 86cd 	beq.w	8009566 <HAL_RCCEx_GetPeriphCLKFreq+0xf92>
 80087cc:	f240 1301 	movw	r3, #257	; 0x101
 80087d0:	4298      	cmp	r0, r3
 80087d2:	f171 0300 	sbcs.w	r3, r1, #0
 80087d6:	f0c0 80c8 	bcc.w	800896a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 80087da:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 80087de:	ea50 0301 	orrs.w	r3, r0, r1
 80087e2:	bf18      	it	ne
 80087e4:	2000      	movne	r0, #0
 80087e6:	f47f af43 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 80087ea:	4b2f      	ldr	r3, [pc, #188]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 80087f0:	f013 5360 	ands.w	r3, r3, #939524096	; 0x38000000
 80087f4:	f000 822d 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 80087f8:	4a2b      	ldr	r2, [pc, #172]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 80087fa:	6812      	ldr	r2, [r2, #0]
 80087fc:	0112      	lsls	r2, r2, #4
 80087fe:	d503      	bpl.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8008800:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008804:	f000 8514 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8008808:	4a27      	ldr	r2, [pc, #156]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	0090      	lsls	r0, r2, #2
 800880e:	d503      	bpl.n	8008818 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008814:	f000 8512 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8008818:	4a23      	ldr	r2, [pc, #140]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800881a:	6811      	ldr	r1, [r2, #0]
 800881c:	0789      	lsls	r1, r1, #30
 800881e:	d503      	bpl.n	8008828 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8008820:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008824:	f001 81d7 	beq.w	8009bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8008828:	4a1f      	ldr	r2, [pc, #124]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800882a:	6812      	ldr	r2, [r2, #0]
 800882c:	0590      	lsls	r0, r2, #22
 800882e:	d503      	bpl.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8008830:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008834:	f001 8238 	beq.w	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x16d4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8008838:	4a1b      	ldr	r2, [pc, #108]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 800883a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800883e:	f010 0002 	ands.w	r0, r0, #2
 8008842:	f43f af15 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008846:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 800884a:	bf14      	ite	ne
 800884c:	2000      	movne	r0, #0
 800884e:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008852:	e70d      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8008854:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8008858:	430b      	orrs	r3, r1
 800885a:	f000 835a 	beq.w	8008f12 <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 800885e:	4b16      	ldr	r3, [pc, #88]	; (80088b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8008860:	4298      	cmp	r0, r3
 8008862:	f171 0300 	sbcs.w	r3, r1, #0
 8008866:	d329      	bcc.n	80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008868:	f100 437c 	add.w	r3, r0, #4227858432	; 0xfc000000
 800886c:	430b      	orrs	r3, r1
 800886e:	f000 8322 	beq.w	8008eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8008872:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8008876:	ea50 0301 	orrs.w	r3, r0, r1
 800887a:	bf18      	it	ne
 800887c:	2000      	movne	r0, #0
 800887e:	f47f aef7 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008882:	4b09      	ldr	r3, [pc, #36]	; (80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8008884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	2b04      	cmp	r3, #4
 800888e:	f201 8253 	bhi.w	8009d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1764>
 8008892:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008896:	0482      	.short	0x0482
 8008898:	048802b3 	.word	0x048802b3
 800889c:	0491048e 	.word	0x0491048e
 80088a0:	00100001 	.word	0x00100001
 80088a4:	00040001 	.word	0x00040001
 80088a8:	44020c00 	.word	0x44020c00
 80088ac:	003d0900 	.word	0x003d0900
 80088b0:	10000001 	.word	0x10000001
 80088b4:	017d7840 	.word	0x017d7840
 80088b8:	00800001 	.word	0x00800001
    switch (PeriphClk)
 80088bc:	f5a0 1300 	sub.w	r3, r0, #2097152	; 0x200000
 80088c0:	430b      	orrs	r3, r1
 80088c2:	f000 82a0 	beq.w	8008e06 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80088c6:	f5a0 0080 	sub.w	r0, r0, #4194304	; 0x400000
 80088ca:	ea50 0301 	orrs.w	r3, r0, r1
 80088ce:	bf18      	it	ne
 80088d0:	2000      	movne	r0, #0
 80088d2:	f47f aecd 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 80088d6:	4bb3      	ldr	r3, [pc, #716]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80088d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 80088dc:	0658      	lsls	r0, r3, #25
 80088de:	f100 831e 	bmi.w	8008f1e <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80088e2:	a801      	add	r0, sp, #4
 80088e4:	f7ff fc3c 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80088e8:	9802      	ldr	r0, [sp, #8]
 80088ea:	e6c1      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80088ec:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 80088f0:	430b      	orrs	r3, r1
 80088f2:	f000 8271 	beq.w	8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 80088f6:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 80088fa:	ea50 0301 	orrs.w	r3, r0, r1
 80088fe:	bf18      	it	ne
 8008900:	2000      	movne	r0, #0
 8008902:	f47f aeb5 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 8008906:	4aa7      	ldr	r2, [pc, #668]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008908:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 800890c:	f413 6360 	ands.w	r3, r3, #3584	; 0xe00
 8008910:	f000 843e 	beq.w	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	0112      	lsls	r2, r2, #4
 8008918:	d503      	bpl.n	8008922 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800891a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800891e:	f000 8487 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 8008922:	4aa0      	ldr	r2, [pc, #640]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008924:	6812      	ldr	r2, [r2, #0]
 8008926:	0090      	lsls	r0, r2, #2
 8008928:	d503      	bpl.n	8008932 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800892a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800892e:	f000 8485 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 8008932:	4a9c      	ldr	r2, [pc, #624]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008934:	6811      	ldr	r1, [r2, #0]
 8008936:	0789      	lsls	r1, r1, #30
 8008938:	d503      	bpl.n	8008942 <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 800893a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800893e:	f001 812e 	beq.w	8009b9e <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 8008942:	4a98      	ldr	r2, [pc, #608]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008944:	6812      	ldr	r2, [r2, #0]
 8008946:	0590      	lsls	r0, r2, #22
 8008948:	d503      	bpl.n	8008952 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 800894a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800894e:	f001 81a5 	beq.w	8009c9c <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 8008952:	4a94      	ldr	r2, [pc, #592]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008954:	6810      	ldr	r0, [r2, #0]
 8008956:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800895a:	f43f ae89 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800895e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8008962:	4891      	ldr	r0, [pc, #580]	; (8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 8008964:	bf18      	it	ne
 8008966:	2000      	movne	r0, #0
 8008968:	e682      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 800896a:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
 800896e:	430b      	orrs	r3, r1
 8008970:	f000 81fd 	beq.w	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 8008974:	3880      	subs	r0, #128	; 0x80
 8008976:	ea50 0301 	orrs.w	r3, r0, r1
 800897a:	bf18      	it	ne
 800897c:	2000      	movne	r0, #0
 800897e:	f47f ae77 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 8008982:	4a88      	ldr	r2, [pc, #544]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008984:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008988:	f413 0360 	ands.w	r3, r3, #14680064	; 0xe00000
 800898c:	f000 8161 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	0112      	lsls	r2, r2, #4
 8008994:	d503      	bpl.n	800899e <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
 8008996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800899a:	f000 8449 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 800899e:	4a81      	ldr	r2, [pc, #516]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80089a0:	6812      	ldr	r2, [r2, #0]
 80089a2:	0090      	lsls	r0, r2, #2
 80089a4:	d503      	bpl.n	80089ae <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80089a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089aa:	f000 8447 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 80089ae:	4a7d      	ldr	r2, [pc, #500]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80089b0:	6811      	ldr	r1, [r2, #0]
 80089b2:	0789      	lsls	r1, r1, #30
 80089b4:	d503      	bpl.n	80089be <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 80089b6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80089ba:	f001 80fe 	beq.w	8009bba <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 80089be:	4a79      	ldr	r2, [pc, #484]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80089c0:	6812      	ldr	r2, [r2, #0]
 80089c2:	0590      	lsls	r0, r2, #22
 80089c4:	d503      	bpl.n	80089ce <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80089c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80089ca:	f001 815b 	beq.w	8009c84 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 80089ce:	4a75      	ldr	r2, [pc, #468]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80089d0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80089d4:	f010 0002 	ands.w	r0, r0, #2
 80089d8:	f43f ae4a 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80089dc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80089e0:	bf14      	ite	ne
 80089e2:	2000      	movne	r0, #0
 80089e4:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80089e8:	e642      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80089ea:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 80089ee:	430b      	orrs	r3, r1
 80089f0:	f000 824a 	beq.w	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 80089f4:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
 80089f8:	ea50 0301 	orrs.w	r3, r0, r1
 80089fc:	bf18      	it	ne
 80089fe:	2000      	movne	r0, #0
 8008a00:	f47f ae36 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008a04:	4a67      	ldr	r2, [pc, #412]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008a06:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8008a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
        switch (srcclk)
 8008a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a12:	f000 83e4 	beq.w	80091de <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 8008a16:	f200 8439 	bhi.w	800928c <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 8008a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1e:	f000 81ed 	beq.w	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a26:	f000 8225 	beq.w	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d07c      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	e61e      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8008a32:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8008a36:	430b      	orrs	r3, r1
 8008a38:	f000 869b 	beq.w	8009772 <HAL_RCCEx_GetPeriphCLKFreq+0x119e>
 8008a3c:	f242 0301 	movw	r3, #8193	; 0x2001
 8008a40:	4298      	cmp	r0, r3
 8008a42:	f171 0300 	sbcs.w	r3, r1, #0
 8008a46:	d374      	bcc.n	8008b32 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 8008a48:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 8008a4c:	ea50 0301 	orrs.w	r3, r0, r1
 8008a50:	bf18      	it	ne
 8008a52:	2000      	movne	r0, #0
 8008a54:	f47f ae0c 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008a58:	4a52      	ldr	r2, [pc, #328]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008a5a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008a5e:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 8008a62:	f000 80f6 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 8008a66:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a6a:	f000 86be 	beq.w	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008a6e:	6811      	ldr	r1, [r2, #0]
 8008a70:	0789      	lsls	r1, r1, #30
 8008a72:	d503      	bpl.n	8008a7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8008a74:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008a78:	f001 8075 	beq.w	8009b66 <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 8008a7c:	4a49      	ldr	r2, [pc, #292]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008a7e:	6810      	ldr	r0, [r2, #0]
 8008a80:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8008a84:	f43f adf4 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8008a88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008a8c:	4847      	ldr	r0, [pc, #284]	; (8008bac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8008a8e:	bf18      	it	ne
 8008a90:	2000      	movne	r0, #0
 8008a92:	e5ed      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8008a94:	2980      	cmp	r1, #128	; 0x80
 8008a96:	bf08      	it	eq
 8008a98:	4298      	cmpeq	r0, r3
 8008a9a:	f000 81d9 	beq.w	8008e50 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008aa4:	bf08      	it	eq
 8008aa6:	4298      	cmpeq	r0, r3
 8008aa8:	bf18      	it	ne
 8008aaa:	4618      	movne	r0, r3
 8008aac:	f47f ade0 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008ab0:	493c      	ldr	r1, [pc, #240]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008ab2:	f8d1 20dc 	ldr.w	r2, [r1, #220]	; 0xdc
 8008ab6:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
        switch (srcclk)
 8008aba:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008abe:	f000 8397 	beq.w	80091f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
 8008ac2:	f200 83ff 	bhi.w	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 8008ac6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008aca:	f000 8197 	beq.w	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008ace:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8008ad2:	f000 81cf 	beq.w	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 8008ad6:	b33a      	cbz	r2, 8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008ad8:	4618      	mov	r0, r3
 8008ada:	e5c9      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8008adc:	2210      	movs	r2, #16
 8008ade:	4291      	cmp	r1, r2
 8008ae0:	bf08      	it	eq
 8008ae2:	4298      	cmpeq	r0, r3
 8008ae4:	f000 850c 	beq.w	8009500 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
 8008ae8:	4283      	cmp	r3, r0
 8008aea:	418a      	sbcs	r2, r1
 8008aec:	d260      	bcs.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8008aee:	2920      	cmp	r1, #32
 8008af0:	bf08      	it	eq
 8008af2:	4298      	cmpeq	r0, r3
 8008af4:	bf18      	it	ne
 8008af6:	2000      	movne	r0, #0
 8008af8:	f47f adba 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008afc:	4a29      	ldr	r2, [pc, #164]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008afe:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8008b02:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
        switch (srcclk)
 8008b06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b0a:	f000 837a 	beq.w	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8008b0e:	f200 83f5 	bhi.w	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
 8008b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b16:	f000 8171 	beq.w	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008b1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b1e:	f000 81a9 	beq.w	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	f040 867a 	bne.w	800981c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
}
 8008b28:	b005      	add	sp, #20
 8008b2a:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK3Freq();
 8008b2e:	f7fd bb17 	b.w	8006160 <HAL_RCC_GetPCLK3Freq>
    switch (PeriphClk)
 8008b32:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8008b36:	430b      	orrs	r3, r1
 8008b38:	f000 80eb 	beq.w	8008d12 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 8008b3c:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 8008b40:	ea50 0301 	orrs.w	r3, r0, r1
 8008b44:	bf18      	it	ne
 8008b46:	2000      	movne	r0, #0
 8008b48:	f47f ad92 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8008b4c:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008b4e:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8008b52:	f013 63e0 	ands.w	r3, r3, #117440512	; 0x7000000
 8008b56:	d0e7      	beq.n	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 8008b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b5c:	f000 8368 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 8008b60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b64:	f000 836a 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8008b68:	6811      	ldr	r1, [r2, #0]
 8008b6a:	0789      	lsls	r1, r1, #30
 8008b6c:	d503      	bpl.n	8008b76 <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
 8008b6e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008b72:	f001 8076 	beq.w	8009c62 <HAL_RCCEx_GetPeriphCLKFreq+0x168e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 8008b76:	4a0b      	ldr	r2, [pc, #44]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008b78:	6812      	ldr	r2, [r2, #0]
 8008b7a:	0592      	lsls	r2, r2, #22
 8008b7c:	d503      	bpl.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 8008b7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b82:	f001 80ac 	beq.w	8009cde <HAL_RCCEx_GetPeriphCLKFreq+0x170a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8008b86:	4a07      	ldr	r2, [pc, #28]	; (8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008b88:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008b8c:	f010 0002 	ands.w	r0, r0, #2
 8008b90:	f43f ad6e 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008b94:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008b98:	bf14      	ite	ne
 8008b9a:	2000      	movne	r0, #0
 8008b9c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008ba0:	e566      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008ba2:	bf00      	nop
 8008ba4:	44020c00 	.word	0x44020c00
 8008ba8:	017d7840 	.word	0x017d7840
 8008bac:	003d0900 	.word	0x003d0900
    switch (PeriphClk)
 8008bb0:	2904      	cmp	r1, #4
 8008bb2:	bf08      	it	eq
 8008bb4:	4298      	cmpeq	r0, r3
 8008bb6:	f000 8097 	beq.w	8008ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	2908      	cmp	r1, #8
 8008bbe:	bf08      	it	eq
 8008bc0:	4298      	cmpeq	r0, r3
 8008bc2:	bf18      	it	ne
 8008bc4:	4618      	movne	r0, r3
 8008bc6:	f47f ad53 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008bca:	4aad      	ldr	r2, [pc, #692]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008bcc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008bd0:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008bd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008bd8:	0790      	lsls	r0, r2, #30
 8008bda:	f100 81a6 	bmi.w	8008f2a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008bde:	4aa8      	ldr	r2, [pc, #672]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008be0:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8008be4:	0111      	lsls	r1, r2, #4
 8008be6:	d502      	bpl.n	8008bee <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8008be8:	2b40      	cmp	r3, #64	; 0x40
 8008bea:	f001 800a 	beq.w	8009c02 <HAL_RCCEx_GetPeriphCLKFreq+0x162e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008bee:	4aa4      	ldr	r2, [pc, #656]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008bf0:	6810      	ldr	r0, [r2, #0]
 8008bf2:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8008bf6:	f43f ad3b 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = CSI_VALUE / 122U;
 8008bfa:	2b80      	cmp	r3, #128	; 0x80
 8008bfc:	f248 0012 	movw	r0, #32786	; 0x8012
 8008c00:	bf18      	it	ne
 8008c02:	2000      	movne	r0, #0
 8008c04:	e534      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8008c06:	2000      	movs	r0, #0
}
 8008c08:	b005      	add	sp, #20
 8008c0a:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008c0e:	4a9c      	ldr	r2, [pc, #624]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008c10:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008c14:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008c1c:	0792      	lsls	r2, r2, #30
 8008c1e:	d503      	bpl.n	8008c28 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008c20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c24:	f000 816f 	beq.w	8008f06 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008c28:	4a95      	ldr	r2, [pc, #596]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008c2a:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8008c2e:	0110      	lsls	r0, r2, #4
 8008c30:	d503      	bpl.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 8008c32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c36:	f000 8169 	beq.w	8008f0c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 8008c3a:	4a91      	ldr	r2, [pc, #580]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008c3c:	6810      	ldr	r0, [r2, #0]
 8008c3e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008c42:	d005      	beq.n	8008c50 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8008c44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c48:	f000 82e4 	beq.w	8009214 <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	4770      	bx	lr
}
 8008c50:	4770      	bx	lr
 8008c52:	b005      	add	sp, #20
 8008c54:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK1Freq();
 8008c58:	f7fd ba42 	b.w	80060e0 <HAL_RCC_GetPCLK1Freq>
    switch (PeriphClk)
 8008c5c:	281f      	cmp	r0, #31
 8008c5e:	f63f ad5d 	bhi.w	800871c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8008c62:	a301      	add	r3, pc, #4	; (adr r3, 8008c68 <HAL_RCCEx_GetPeriphCLKFreq+0x694>)
 8008c64:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8008c68:	08009137 	.word	0x08009137
 8008c6c:	08009071 	.word	0x08009071
 8008c70:	0800871d 	.word	0x0800871d
 8008c74:	0800900d 	.word	0x0800900d
 8008c78:	0800871d 	.word	0x0800871d
 8008c7c:	0800871d 	.word	0x0800871d
 8008c80:	0800871d 	.word	0x0800871d
 8008c84:	080090cd 	.word	0x080090cd
 8008c88:	0800871d 	.word	0x0800871d
 8008c8c:	0800871d 	.word	0x0800871d
 8008c90:	0800871d 	.word	0x0800871d
 8008c94:	0800871d 	.word	0x0800871d
 8008c98:	0800871d 	.word	0x0800871d
 8008c9c:	0800871d 	.word	0x0800871d
 8008ca0:	0800871d 	.word	0x0800871d
 8008ca4:	08008fa3 	.word	0x08008fa3
 8008ca8:	0800871d 	.word	0x0800871d
 8008cac:	0800871d 	.word	0x0800871d
 8008cb0:	0800871d 	.word	0x0800871d
 8008cb4:	0800871d 	.word	0x0800871d
 8008cb8:	0800871d 	.word	0x0800871d
 8008cbc:	0800871d 	.word	0x0800871d
 8008cc0:	0800871d 	.word	0x0800871d
 8008cc4:	0800871d 	.word	0x0800871d
 8008cc8:	0800871d 	.word	0x0800871d
 8008ccc:	0800871d 	.word	0x0800871d
 8008cd0:	0800871d 	.word	0x0800871d
 8008cd4:	0800871d 	.word	0x0800871d
 8008cd8:	0800871d 	.word	0x0800871d
 8008cdc:	0800871d 	.word	0x0800871d
 8008ce0:	0800871d 	.word	0x0800871d
 8008ce4:	08008f39 	.word	0x08008f39
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008ce8:	4a65      	ldr	r2, [pc, #404]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008cea:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008cee:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008cf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008cf4:	0390      	lsls	r0, r2, #14
 8008cf6:	d502      	bpl.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 85bf 	beq.w	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d02:	f43f adee 	beq.w	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 8008d06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d0a:	f000 8291 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = 0U;
 8008d0e:	2000      	movs	r0, #0
 8008d10:	e4ae      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 8008d12:	4a5b      	ldr	r2, [pc, #364]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d14:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008d18:	f013 0370 	ands.w	r3, r3, #112	; 0x70
 8008d1c:	d099      	beq.n	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	0112      	lsls	r2, r2, #4
 8008d22:	d502      	bpl.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 8008d24:	2b10      	cmp	r3, #16
 8008d26:	f000 8283 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 8008d2a:	4a55      	ldr	r2, [pc, #340]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d2c:	6812      	ldr	r2, [r2, #0]
 8008d2e:	0090      	lsls	r0, r2, #2
 8008d30:	d502      	bpl.n	8008d38 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	f000 8282 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 8008d38:	4a51      	ldr	r2, [pc, #324]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d3a:	6811      	ldr	r1, [r2, #0]
 8008d3c:	0789      	lsls	r1, r1, #30
 8008d3e:	d502      	bpl.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8008d40:	2b30      	cmp	r3, #48	; 0x30
 8008d42:	f000 8709 	beq.w	8009b58 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 8008d46:	4a4e      	ldr	r2, [pc, #312]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d48:	6812      	ldr	r2, [r2, #0]
 8008d4a:	0590      	lsls	r0, r2, #22
 8008d4c:	d502      	bpl.n	8008d54 <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 8008d4e:	2b40      	cmp	r3, #64	; 0x40
 8008d50:	f000 87a7 	beq.w	8009ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 8008d54:	4a4a      	ldr	r2, [pc, #296]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d56:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008d5a:	f010 0002 	ands.w	r0, r0, #2
 8008d5e:	f43f ac87 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008d62:	2b50      	cmp	r3, #80	; 0x50
 8008d64:	bf14      	ite	ne
 8008d66:	2000      	movne	r0, #0
 8008d68:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008d6c:	e480      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 8008d6e:	4b44      	ldr	r3, [pc, #272]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 8008d74:	f413 13e0 	ands.w	r3, r3, #1835008	; 0x1c0000
 8008d78:	f43f af6b 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 8008d7c:	4a40      	ldr	r2, [pc, #256]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	0111      	lsls	r1, r2, #4
 8008d82:	d503      	bpl.n	8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 8008d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008d88:	f000 8252 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008d8c:	4a3c      	ldr	r2, [pc, #240]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d8e:	6812      	ldr	r2, [r2, #0]
 8008d90:	0092      	lsls	r2, r2, #2
 8008d92:	d503      	bpl.n	8008d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 8008d94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d98:	f000 8250 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008d9c:	4a38      	ldr	r2, [pc, #224]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008d9e:	6811      	ldr	r1, [r2, #0]
 8008da0:	0788      	lsls	r0, r1, #30
 8008da2:	d503      	bpl.n	8008dac <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 8008da4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008da8:	f000 86eb 	beq.w	8009b82 <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008dac:	4a34      	ldr	r2, [pc, #208]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008dae:	6812      	ldr	r2, [r2, #0]
 8008db0:	0591      	lsls	r1, r2, #22
 8008db2:	d503      	bpl.n	8008dbc <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8008db4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db8:	f000 8761 	beq.w	8009c7e <HAL_RCCEx_GetPeriphCLKFreq+0x16aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008dbc:	4a30      	ldr	r2, [pc, #192]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008dbe:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008dc2:	f010 0002 	ands.w	r0, r0, #2
 8008dc6:	f43f ac53 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008dca:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008dce:	bf14      	ite	ne
 8008dd0:	2000      	movne	r0, #0
 8008dd2:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008dd6:	e44b      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008dd8:	4a29      	ldr	r2, [pc, #164]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008dda:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8008dde:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        switch (srcclk)
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	f000 81df 	beq.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 8008de8:	f200 83a4 	bhi.w	8009534 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	f000 81d4 	beq.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 8008df2:	2b40      	cmp	r3, #64	; 0x40
 8008df4:	bf18      	it	ne
 8008df6:	2000      	movne	r0, #0
 8008df8:	f47f ac3a 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008dfc:	a801      	add	r0, sp, #4
 8008dfe:	f7ff fa6d 	bl	80082dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 8008e02:	9801      	ldr	r0, [sp, #4]
            break;
 8008e04:	e434      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8008e06:	4a1e      	ldr	r2, [pc, #120]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008e08:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008e0c:	f013 0307 	ands.w	r3, r3, #7
 8008e10:	f000 845c 	beq.w	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x10f8>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	f000 8598 	beq.w	800994a <HAL_RCCEx_GetPeriphCLKFreq+0x1376>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	f000 8642 	beq.w	8009aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x14d0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008e20:	6812      	ldr	r2, [r2, #0]
 8008e22:	0390      	lsls	r0, r2, #14
 8008e24:	d502      	bpl.n	8008e2c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	f000 8753 	beq.w	8009cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x16fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8008e2c:	4a14      	ldr	r2, [pc, #80]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008e2e:	6811      	ldr	r1, [r2, #0]
 8008e30:	0789      	lsls	r1, r1, #30
 8008e32:	d502      	bpl.n	8008e3a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8008e34:	2b04      	cmp	r3, #4
 8008e36:	f000 871b 	beq.w	8009c70 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 8008e3a:	4a11      	ldr	r2, [pc, #68]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008e3c:	6810      	ldr	r0, [r2, #0]
 8008e3e:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8008e42:	f43f ac15 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	480e      	ldr	r0, [pc, #56]	; (8008e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 8008e4a:	bf18      	it	ne
 8008e4c:	2000      	movne	r0, #0
 8008e4e:	e40f      	b.n	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008e50:	4a0b      	ldr	r2, [pc, #44]	; (8008e80 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008e52:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8008e56:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
        switch (srcclk)
 8008e5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008e5e:	f000 8517 	beq.w	8009890 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8008e62:	f200 81f7 	bhi.w	8009254 <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 8008e66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e6a:	d0c7      	beq.n	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e70:	f040 81ea 	bne.w	8009248 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e74:	a801      	add	r0, sp, #4
 8008e76:	f7ff faef 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 8008e7a:	9803      	ldr	r0, [sp, #12]
            break;
 8008e7c:	f7ff bbf8 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008e80:	44020c00 	.word	0x44020c00
 8008e84:	003d0900 	.word	0x003d0900
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008e88:	4a8f      	ldr	r2, [pc, #572]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008e8a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008e8e:	f013 7340 	ands.w	r3, r3, #50331648	; 0x3000000
 8008e92:	f43f aede 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 8008e96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e9a:	f000 84a6 	beq.w	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008e9e:	6810      	ldr	r0, [r2, #0]
 8008ea0:	f010 0002 	ands.w	r0, r0, #2
 8008ea4:	f43f abe4 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008ea8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008eac:	f000 8646 	beq.w	8009b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
          frequency = 0U;
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	f7ff bbdd 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008eb6:	4a84      	ldr	r2, [pc, #528]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008eb8:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008ebc:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008ebe:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008ec2:	0492      	lsls	r2, r2, #18
 8008ec4:	d502      	bpl.n	8008ecc <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 84df 	beq.w	800988a <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008ecc:	4a7e      	ldr	r2, [pc, #504]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008ece:	6812      	ldr	r2, [r2, #0]
 8008ed0:	0190      	lsls	r0, r2, #6
 8008ed2:	d502      	bpl.n	8008eda <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8008ed4:	2b10      	cmp	r3, #16
 8008ed6:	f43f ad04 	beq.w	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008eda:	4a7b      	ldr	r2, [pc, #492]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008edc:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8008ee0:	0791      	lsls	r1, r2, #30
 8008ee2:	d502      	bpl.n	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 8008ee4:	2b20      	cmp	r3, #32
 8008ee6:	f000 86b8 	beq.w	8009c5a <HAL_RCCEx_GetPeriphCLKFreq+0x1686>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008eea:	4a77      	ldr	r2, [pc, #476]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008eec:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008ef0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008ef4:	f43f abbc 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSI_VALUE;
 8008ef8:	2b30      	cmp	r3, #48	; 0x30
 8008efa:	bf14      	ite	ne
 8008efc:	2000      	movne	r0, #0
 8008efe:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 8008f02:	f7ff bbb5 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008f06:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008f0a:	4770      	bx	lr
      frequency = LSI_VALUE;
 8008f0c:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8008f10:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 8008f12:	4b6d      	ldr	r3, [pc, #436]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008f14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008f18:	0619      	lsls	r1, r3, #24
 8008f1a:	f57f ace2 	bpl.w	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f1e:	a801      	add	r0, sp, #4
 8008f20:	f7ff f9dc 	bl	80082dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8008f24:	9803      	ldr	r0, [sp, #12]
 8008f26:	f7ff bba3 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f47f ae57 	bne.w	8008bde <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = LSE_VALUE;
 8008f30:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008f34:	f7ff bb9c 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8008f38:	4a63      	ldr	r2, [pc, #396]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008f3a:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8008f3e:	f413 3360 	ands.w	r3, r3, #229376	; 0x38000
 8008f42:	f43f ae86 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 8008f46:	6812      	ldr	r2, [r2, #0]
 8008f48:	0112      	lsls	r2, r2, #4
 8008f4a:	d503      	bpl.n	8008f54 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8008f4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f50:	f000 816e 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 8008f54:	4a5c      	ldr	r2, [pc, #368]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	0090      	lsls	r0, r2, #2
 8008f5a:	d503      	bpl.n	8008f64 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f60:	f000 816c 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8008f64:	4a58      	ldr	r2, [pc, #352]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008f66:	6811      	ldr	r1, [r2, #0]
 8008f68:	0789      	lsls	r1, r1, #30
 8008f6a:	d503      	bpl.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 8008f6c:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8008f70:	f000 85dd 	beq.w	8009b2e <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 8008f74:	4a54      	ldr	r2, [pc, #336]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008f76:	6812      	ldr	r2, [r2, #0]
 8008f78:	0590      	lsls	r0, r2, #22
 8008f7a:	d503      	bpl.n	8008f84 <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 8008f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f80:	f000 86a1 	beq.w	8009cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8008f84:	4a50      	ldr	r2, [pc, #320]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008f86:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008f8a:	f010 0002 	ands.w	r0, r0, #2
 8008f8e:	f43f ab6f 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008f92:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8008f96:	bf14      	ite	ne
 8008f98:	2000      	movne	r0, #0
 8008f9a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008f9e:	f7ff bb67 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008fa2:	4a49      	ldr	r2, [pc, #292]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008fa4:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008fa8:	f413 43e0 	ands.w	r3, r3, #28672	; 0x7000
 8008fac:	f43f ae51 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008fb0:	6812      	ldr	r2, [r2, #0]
 8008fb2:	0111      	lsls	r1, r2, #4
 8008fb4:	d503      	bpl.n	8008fbe <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 8008fb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fba:	f000 8139 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008fbe:	4a42      	ldr	r2, [pc, #264]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008fc0:	6812      	ldr	r2, [r2, #0]
 8008fc2:	0092      	lsls	r2, r2, #2
 8008fc4:	d503      	bpl.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 8008fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fca:	f000 8137 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008fce:	4a3e      	ldr	r2, [pc, #248]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008fd0:	6811      	ldr	r1, [r2, #0]
 8008fd2:	0788      	lsls	r0, r1, #30
 8008fd4:	d503      	bpl.n	8008fde <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
 8008fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008fda:	f000 8622 	beq.w	8009c22 <HAL_RCCEx_GetPeriphCLKFreq+0x164e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008fde:	4a3a      	ldr	r2, [pc, #232]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008fe0:	6812      	ldr	r2, [r2, #0]
 8008fe2:	0591      	lsls	r1, r2, #22
 8008fe4:	d503      	bpl.n	8008fee <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8008fe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008fea:	f000 8666 	beq.w	8009cba <HAL_RCCEx_GetPeriphCLKFreq+0x16e6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008fee:	4a36      	ldr	r2, [pc, #216]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008ff0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008ff4:	f010 0002 	ands.w	r0, r0, #2
 8008ff8:	f43f ab3a 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008ffc:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8009000:	bf14      	ite	ne
 8009002:	2000      	movne	r0, #0
 8009004:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009008:	f7ff bb32 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800900c:	4a2e      	ldr	r2, [pc, #184]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800900e:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8009012:	f413 73e0 	ands.w	r3, r3, #448	; 0x1c0
 8009016:	f43f ae1c 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 800901a:	6812      	ldr	r2, [r2, #0]
 800901c:	0111      	lsls	r1, r2, #4
 800901e:	d502      	bpl.n	8009026 <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8009020:	2b40      	cmp	r3, #64	; 0x40
 8009022:	f000 8105 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 8009026:	4a28      	ldr	r2, [pc, #160]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009028:	6812      	ldr	r2, [r2, #0]
 800902a:	0092      	lsls	r2, r2, #2
 800902c:	d502      	bpl.n	8009034 <HAL_RCCEx_GetPeriphCLKFreq+0xa60>
 800902e:	2b80      	cmp	r3, #128	; 0x80
 8009030:	f000 8104 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009034:	4a24      	ldr	r2, [pc, #144]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009036:	6811      	ldr	r1, [r2, #0]
 8009038:	0788      	lsls	r0, r1, #30
 800903a:	d502      	bpl.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 800903c:	2bc0      	cmp	r3, #192	; 0xc0
 800903e:	f000 85f7 	beq.w	8009c30 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 8009042:	4a21      	ldr	r2, [pc, #132]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009044:	6812      	ldr	r2, [r2, #0]
 8009046:	0591      	lsls	r1, r2, #22
 8009048:	d503      	bpl.n	8009052 <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 800904a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800904e:	f000 861f 	beq.w	8009c90 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8009052:	4a1d      	ldr	r2, [pc, #116]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009054:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8009058:	f010 0002 	ands.w	r0, r0, #2
 800905c:	f43f ab08 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009060:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8009064:	bf14      	ite	ne
 8009066:	2000      	movne	r0, #0
 8009068:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800906c:	f7ff bb00 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8009070:	4a15      	ldr	r2, [pc, #84]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009072:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8009076:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800907a:	f43f adea 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 800907e:	6812      	ldr	r2, [r2, #0]
 8009080:	0110      	lsls	r0, r2, #4
 8009082:	d502      	bpl.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8009084:	2b08      	cmp	r3, #8
 8009086:	f000 80d3 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 800908a:	2b10      	cmp	r3, #16
 800908c:	f000 80d6 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009090:	4a0d      	ldr	r2, [pc, #52]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8009092:	6811      	ldr	r1, [r2, #0]
 8009094:	0789      	lsls	r1, r1, #30
 8009096:	d502      	bpl.n	800909e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8009098:	2b18      	cmp	r3, #24
 800909a:	f000 85d7 	beq.w	8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1678>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 800909e:	4a0a      	ldr	r2, [pc, #40]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80090a0:	6812      	ldr	r2, [r2, #0]
 80090a2:	0590      	lsls	r0, r2, #22
 80090a4:	d502      	bpl.n	80090ac <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 80090a6:	2b20      	cmp	r3, #32
 80090a8:	f000 8616 	beq.w	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80090ac:	4a06      	ldr	r2, [pc, #24]	; (80090c8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80090ae:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80090b2:	f010 0002 	ands.w	r0, r0, #2
 80090b6:	f43f aadb 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80090ba:	2b28      	cmp	r3, #40	; 0x28
 80090bc:	bf14      	ite	ne
 80090be:	2000      	movne	r0, #0
 80090c0:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80090c4:	f7ff bad4 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80090c8:	44020c00 	.word	0x44020c00
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80090cc:	4aa7      	ldr	r2, [pc, #668]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80090ce:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80090d2:	f413 6360 	ands.w	r3, r3, #3584	; 0xe00
 80090d6:	f43f adbc 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 80090da:	6812      	ldr	r2, [r2, #0]
 80090dc:	0112      	lsls	r2, r2, #4
 80090de:	d503      	bpl.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 80090e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090e4:	f000 80a4 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 80090e8:	4aa0      	ldr	r2, [pc, #640]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80090ea:	6812      	ldr	r2, [r2, #0]
 80090ec:	0090      	lsls	r0, r2, #2
 80090ee:	d503      	bpl.n	80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 80090f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80090f4:	f000 80a2 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80090f8:	4a9c      	ldr	r2, [pc, #624]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80090fa:	6811      	ldr	r1, [r2, #0]
 80090fc:	0789      	lsls	r1, r1, #30
 80090fe:	d503      	bpl.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8009100:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009104:	f000 859b 	beq.w	8009c3e <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8009108:	4a98      	ldr	r2, [pc, #608]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800910a:	6812      	ldr	r2, [r2, #0]
 800910c:	0590      	lsls	r0, r2, #22
 800910e:	d503      	bpl.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
 8009110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009114:	f000 85bf 	beq.w	8009c96 <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009118:	4a94      	ldr	r2, [pc, #592]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800911a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800911e:	f010 0002 	ands.w	r0, r0, #2
 8009122:	f43f aaa5 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009126:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800912a:	bf14      	ite	ne
 800912c:	2000      	movne	r0, #0
 800912e:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8009132:	f7ff ba9d 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009136:	4a8d      	ldr	r2, [pc, #564]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009138:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800913c:	f013 0307 	ands.w	r3, r3, #7
 8009140:	d026      	beq.n	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 8009142:	6812      	ldr	r2, [r2, #0]
 8009144:	0112      	lsls	r2, r2, #4
 8009146:	d501      	bpl.n	800914c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8009148:	2b01      	cmp	r3, #1
 800914a:	d071      	beq.n	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 800914c:	4a87      	ldr	r2, [pc, #540]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800914e:	6812      	ldr	r2, [r2, #0]
 8009150:	0090      	lsls	r0, r2, #2
 8009152:	d501      	bpl.n	8009158 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8009154:	2b02      	cmp	r3, #2
 8009156:	d071      	beq.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8009158:	4a84      	ldr	r2, [pc, #528]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 800915a:	6811      	ldr	r1, [r2, #0]
 800915c:	0789      	lsls	r1, r1, #30
 800915e:	d502      	bpl.n	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8009160:	2b03      	cmp	r3, #3
 8009162:	f000 8507 	beq.w	8009b74 <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 8009166:	4a81      	ldr	r2, [pc, #516]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009168:	6812      	ldr	r2, [r2, #0]
 800916a:	0592      	lsls	r2, r2, #22
 800916c:	d502      	bpl.n	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 800916e:	2b04      	cmp	r3, #4
 8009170:	f000 859d 	beq.w	8009cae <HAL_RCCEx_GetPeriphCLKFreq+0x16da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8009174:	4a7d      	ldr	r2, [pc, #500]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009176:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800917a:	f010 0002 	ands.w	r0, r0, #2
 800917e:	f43f aa77 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009182:	2b05      	cmp	r3, #5
 8009184:	bf14      	ite	ne
 8009186:	2000      	movne	r0, #0
 8009188:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800918c:	f7ff ba70 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
}
 8009190:	b005      	add	sp, #20
 8009192:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetPCLK2Freq();
 8009196:	f7fc bfc3 	b.w	8006120 <HAL_RCC_GetPCLK2Freq>
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800919a:	a801      	add	r0, sp, #4
 800919c:	f7fe ffe0 	bl	8008160 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 80091a0:	9802      	ldr	r0, [sp, #8]
            break;
 80091a2:	f7ff ba65 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091a6:	a801      	add	r0, sp, #4
 80091a8:	f7ff f956 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 80091ac:	9801      	ldr	r0, [sp, #4]
            break;
 80091ae:	f7ff ba5f 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 80091b2:	486f      	ldr	r0, [pc, #444]	; (8009370 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80091b4:	f7ff ba5c 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091b8:	4a6c      	ldr	r2, [pc, #432]	; (800936c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80091ba:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091be:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80091c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80091c4:	0789      	lsls	r1, r1, #30
 80091c6:	f140 83da 	bpl.w	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f040 83d7 	bne.w	800997e <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80091d0:	6813      	ldr	r3, [r2, #0]
 80091d2:	4868      	ldr	r0, [pc, #416]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 80091d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80091d8:	40d8      	lsrs	r0, r3
 80091da:	f7ff ba49 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091de:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 80091e2:	f010 0002 	ands.w	r0, r0, #2
 80091e6:	bf18      	it	ne
 80091e8:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80091ec:	f7ff ba40 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80091f0:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
      frequency = LSE_VALUE;
 80091f4:	f010 0002 	ands.w	r0, r0, #2
 80091f8:	bf18      	it	ne
 80091fa:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80091fe:	f7ff ba37 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009202:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8009206:	f010 0002 	ands.w	r0, r0, #2
 800920a:	bf18      	it	ne
 800920c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009210:	f7ff ba2e 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 8009214:	69d3      	ldr	r3, [r2, #28]
 8009216:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800921a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800921e:	f4ff ad15 	bcc.w	8008c4c <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 8009222:	69d0      	ldr	r0, [r2, #28]
 8009224:	4b53      	ldr	r3, [pc, #332]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8009226:	f3c0 2005 	ubfx	r0, r0, #8, #6
 800922a:	fbb3 f0f0 	udiv	r0, r3, r0
 800922e:	4770      	bx	lr
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009230:	a801      	add	r0, sp, #4
 8009232:	f7ff f853 	bl	80082dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009236:	9802      	ldr	r0, [sp, #8]
 8009238:	f7ff ba1a 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800923c:	a801      	add	r0, sp, #4
 800923e:	f7ff f90b 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009242:	9802      	ldr	r0, [sp, #8]
 8009244:	f7ff ba14 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009248:	2b00      	cmp	r3, #0
 800924a:	f43f ac6d 	beq.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 800924e:	2000      	movs	r0, #0
 8009250:	f7ff ba0e 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009254:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009258:	f000 832c 	beq.w	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 800925c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8009260:	bf18      	it	ne
 8009262:	2000      	movne	r0, #0
 8009264:	f47f aa04 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009268:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800926c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800926e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009272:	0789      	lsls	r1, r1, #30
 8009274:	f140 83ec 	bpl.w	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
 8009278:	2b00      	cmp	r3, #0
 800927a:	f040 83e9 	bne.w	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800927e:	6813      	ldr	r3, [r2, #0]
 8009280:	483c      	ldr	r0, [pc, #240]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8009282:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009286:	40d8      	lsrs	r0, r3
 8009288:	f7ff b9f2 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800928c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009290:	f000 8307 	beq.w	80098a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8009294:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009298:	bf18      	it	ne
 800929a:	2000      	movne	r0, #0
 800929c:	f47f a9e8 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092a0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092a4:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092a6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092aa:	0789      	lsls	r1, r1, #30
 80092ac:	f140 83bb 	bpl.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	f040 83b8 	bne.w	8009a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092b6:	6813      	ldr	r3, [r2, #0]
 80092b8:	482e      	ldr	r0, [pc, #184]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 80092ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092be:	40d8      	lsrs	r0, r3
 80092c0:	f7ff b9d6 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80092c4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80092c8:	f000 82fd 	beq.w	80098c6 <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 80092cc:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80092d0:	bf18      	it	ne
 80092d2:	4618      	movne	r0, r3
 80092d4:	f47f a9cc 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092d8:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092dc:	680a      	ldr	r2, [r1, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80092de:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80092e2:	0790      	lsls	r0, r2, #30
 80092e4:	f140 83f9 	bpl.w	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	f040 83f6 	bne.w	8009ada <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092ee:	680b      	ldr	r3, [r1, #0]
 80092f0:	4820      	ldr	r0, [pc, #128]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 80092f2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092f6:	40d8      	lsrs	r0, r3
 80092f8:	f7ff b9ba 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80092fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009300:	f000 82ea 	beq.w	80098d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>
 8009304:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009308:	bf18      	it	ne
 800930a:	2000      	movne	r0, #0
 800930c:	f47f a9b0 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009310:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009314:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009316:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800931a:	0789      	lsls	r1, r1, #30
 800931c:	f140 83f2 	bpl.w	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1530>
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 83ef 	bne.w	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0x1530>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009326:	6813      	ldr	r3, [r2, #0]
 8009328:	4812      	ldr	r0, [pc, #72]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800932a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800932e:	40d8      	lsrs	r0, r3
 8009330:	f7ff b99e 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009334:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009338:	f000 826d 	beq.w	8009816 <HAL_RCCEx_GetPeriphCLKFreq+0x1242>
 800933c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009340:	bf18      	it	ne
 8009342:	2000      	movne	r0, #0
 8009344:	f47f a994 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009348:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800934c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800934e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009352:	0789      	lsls	r1, r1, #30
 8009354:	f140 82fe 	bpl.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 8009358:	2b00      	cmp	r3, #0
 800935a:	f040 82fb 	bne.w	8009954 <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800935e:	6813      	ldr	r3, [r2, #0]
 8009360:	4804      	ldr	r0, [pc, #16]	; (8009374 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8009362:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009366:	40d8      	lsrs	r0, r3
 8009368:	f7ff b982 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800936c:	44020c00 	.word	0x44020c00
 8009370:	00bb8000 	.word	0x00bb8000
 8009374:	017d7840 	.word	0x017d7840
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009378:	4ba1      	ldr	r3, [pc, #644]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800937a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800937e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009382:	2b20      	cmp	r3, #32
 8009384:	d844      	bhi.n	8009410 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8009386:	a201      	add	r2, pc, #4	; (adr r2, 800938c <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8009388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938c:	0800919b 	.word	0x0800919b
 8009390:	08009411 	.word	0x08009411
 8009394:	08009411 	.word	0x08009411
 8009398:	08009411 	.word	0x08009411
 800939c:	08009411 	.word	0x08009411
 80093a0:	08009411 	.word	0x08009411
 80093a4:	08009411 	.word	0x08009411
 80093a8:	08009411 	.word	0x08009411
 80093ac:	08008dfd 	.word	0x08008dfd
 80093b0:	08009411 	.word	0x08009411
 80093b4:	08009411 	.word	0x08009411
 80093b8:	08009411 	.word	0x08009411
 80093bc:	08009411 	.word	0x08009411
 80093c0:	08009411 	.word	0x08009411
 80093c4:	08009411 	.word	0x08009411
 80093c8:	08009411 	.word	0x08009411
 80093cc:	080091a7 	.word	0x080091a7
 80093d0:	08009411 	.word	0x08009411
 80093d4:	08009411 	.word	0x08009411
 80093d8:	08009411 	.word	0x08009411
 80093dc:	08009411 	.word	0x08009411
 80093e0:	08009411 	.word	0x08009411
 80093e4:	08009411 	.word	0x08009411
 80093e8:	08009411 	.word	0x08009411
 80093ec:	0800943d 	.word	0x0800943d
 80093f0:	08009411 	.word	0x08009411
 80093f4:	08009411 	.word	0x08009411
 80093f8:	08009411 	.word	0x08009411
 80093fc:	08009411 	.word	0x08009411
 8009400:	08009411 	.word	0x08009411
 8009404:	08009411 	.word	0x08009411
 8009408:	08009411 	.word	0x08009411
 800940c:	08009417 	.word	0x08009417
 8009410:	2000      	movs	r0, #0
 8009412:	f7ff b92d 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009416:	4a7a      	ldr	r2, [pc, #488]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009418:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800941c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800941e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009422:	0789      	lsls	r1, r1, #30
 8009424:	f140 82ea 	bpl.w	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x1428>
 8009428:	2b00      	cmp	r3, #0
 800942a:	f040 82e7 	bne.w	80099fc <HAL_RCCEx_GetPeriphCLKFreq+0x1428>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800942e:	6813      	ldr	r3, [r2, #0]
 8009430:	4874      	ldr	r0, [pc, #464]	; (8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 8009432:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009436:	40d8      	lsrs	r0, r3
 8009438:	f7ff b91a 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 800943c:	4872      	ldr	r0, [pc, #456]	; (8009608 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>)
 800943e:	f7ff b917 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009442:	4a6f      	ldr	r2, [pc, #444]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009444:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8009448:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
        switch (srcclk)
 800944c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009450:	f43f aea9 	beq.w	80091a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 8009454:	f200 8174 	bhi.w	8009740 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8009458:	2b00      	cmp	r3, #0
 800945a:	f43f ae9e 	beq.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 800945e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009462:	bf18      	it	ne
 8009464:	2000      	movne	r0, #0
 8009466:	f43f acc9 	beq.w	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800946a:	f7ff b901 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800946e:	4a64      	ldr	r2, [pc, #400]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009470:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8009474:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
        switch (srcclk)
 8009478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800947c:	f000 825c 	beq.w	8009938 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>
 8009480:	f200 8196 	bhi.w	80097b0 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
 8009484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009488:	f43f acb8 	beq.w	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800948c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009490:	f43f acf0 	beq.w	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 8009494:	2b00      	cmp	r3, #0
 8009496:	f43f abdc 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 800949a:	2000      	movs	r0, #0
 800949c:	f7ff b8e8 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 80094a0:	4a57      	ldr	r2, [pc, #348]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80094a2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 80094a6:	f013 0307 	ands.w	r3, r3, #7
 80094aa:	f43f abd2 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 80094ae:	6812      	ldr	r2, [r2, #0]
 80094b0:	0111      	lsls	r1, r2, #4
 80094b2:	d502      	bpl.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	f43f aebb 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 80094ba:	4a51      	ldr	r2, [pc, #324]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80094bc:	6812      	ldr	r2, [r2, #0]
 80094be:	0092      	lsls	r2, r2, #2
 80094c0:	d502      	bpl.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 80094c2:	2b02      	cmp	r3, #2
 80094c4:	f43f aeba 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 80094c8:	4a4d      	ldr	r2, [pc, #308]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80094ca:	6811      	ldr	r1, [r2, #0]
 80094cc:	0788      	lsls	r0, r1, #30
 80094ce:	d502      	bpl.n	80094d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 80094d0:	2b03      	cmp	r3, #3
 80094d2:	f000 833a 	beq.w	8009b4a <HAL_RCCEx_GetPeriphCLKFreq+0x1576>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 80094d6:	4a4a      	ldr	r2, [pc, #296]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80094d8:	6812      	ldr	r2, [r2, #0]
 80094da:	0591      	lsls	r1, r2, #22
 80094dc:	d502      	bpl.n	80094e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 80094de:	2b04      	cmp	r3, #4
 80094e0:	f000 83ee 	beq.w	8009cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 80094e4:	4a46      	ldr	r2, [pc, #280]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80094e6:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80094ea:	f010 0002 	ands.w	r0, r0, #2
 80094ee:	f43f a8bf 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80094f2:	2b05      	cmp	r3, #5
 80094f4:	bf14      	ite	ne
 80094f6:	2000      	movne	r0, #0
 80094f8:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80094fc:	f7ff b8b8 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8009500:	4a3f      	ldr	r2, [pc, #252]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009502:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8009506:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 800950a:	2b10      	cmp	r3, #16
 800950c:	f43f a9e9 	beq.w	80088e2 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8009510:	6812      	ldr	r2, [r2, #0]
 8009512:	0092      	lsls	r2, r2, #2
 8009514:	d502      	bpl.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8009516:	2b20      	cmp	r3, #32
 8009518:	f43f ae90 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 800951c:	4a38      	ldr	r2, [pc, #224]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 800951e:	6810      	ldr	r0, [r2, #0]
 8009520:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8009524:	f43f a8a4 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSI48_VALUE;
 8009528:	2b30      	cmp	r3, #48	; 0x30
 800952a:	4838      	ldr	r0, [pc, #224]	; (800960c <HAL_RCCEx_GetPeriphCLKFreq+0x1038>)
 800952c:	bf18      	it	ne
 800952e:	2000      	movne	r0, #0
 8009530:	f7ff b89e 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009534:	2bc0      	cmp	r3, #192	; 0xc0
 8009536:	f000 816b 	beq.w	8009810 <HAL_RCCEx_GetPeriphCLKFreq+0x123c>
 800953a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800953e:	f040 83f8 	bne.w	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x175e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009542:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009546:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009548:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800954c:	0788      	lsls	r0, r1, #30
 800954e:	f140 822b 	bpl.w	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8009552:	2b00      	cmp	r3, #0
 8009554:	f040 8228 	bne.w	80099a8 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009558:	6813      	ldr	r3, [r2, #0]
 800955a:	482a      	ldr	r0, [pc, #168]	; (8009604 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 800955c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009560:	40d8      	lsrs	r0, r3
 8009562:	f7ff b885 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8009566:	4a26      	ldr	r2, [pc, #152]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009568:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 800956c:	f013 63e0 	ands.w	r3, r3, #117440512	; 0x7000000
 8009570:	f43f ab6f 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8009574:	6812      	ldr	r2, [r2, #0]
 8009576:	0111      	lsls	r1, r2, #4
 8009578:	d503      	bpl.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 800957a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800957e:	f43f ae57 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8009582:	4a1f      	ldr	r2, [pc, #124]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009584:	6812      	ldr	r2, [r2, #0]
 8009586:	0092      	lsls	r2, r2, #2
 8009588:	d503      	bpl.n	8009592 <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 800958a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800958e:	f43f ae55 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8009592:	4a1b      	ldr	r2, [pc, #108]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8009594:	6811      	ldr	r1, [r2, #0]
 8009596:	0788      	lsls	r0, r1, #30
 8009598:	d503      	bpl.n	80095a2 <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 800959a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800959e:	f000 8339 	beq.w	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 80095a2:	4a17      	ldr	r2, [pc, #92]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	0591      	lsls	r1, r2, #22
 80095a8:	d503      	bpl.n	80095b2 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
 80095aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095ae:	f000 8381 	beq.w	8009cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x16e0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 80095b2:	4a13      	ldr	r2, [pc, #76]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80095b4:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80095b8:	f010 0002 	ands.w	r0, r0, #2
 80095bc:	f43f a858 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80095c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80095c4:	bf14      	ite	ne
 80095c6:	2000      	movne	r0, #0
 80095c8:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80095cc:	f7ff b850 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 80095d0:	4a0b      	ldr	r2, [pc, #44]	; (8009600 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 80095d2:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 80095d6:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
        switch (srcclk)
 80095da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80095de:	f000 8199 	beq.w	8009914 <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
 80095e2:	d848      	bhi.n	8009676 <HAL_RCCEx_GetPeriphCLKFreq+0x10a2>
 80095e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095e8:	f43f ac08 	beq.w	8008dfc <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80095ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80095f0:	f43f ac40 	beq.w	8008e74 <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	f43f aa97 	beq.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80095fa:	2000      	movs	r0, #0
 80095fc:	f7ff b838 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009600:	44020c00 	.word	0x44020c00
 8009604:	017d7840 	.word	0x017d7840
 8009608:	00bb8000 	.word	0x00bb8000
 800960c:	02dc6c00 	.word	0x02dc6c00
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8009610:	4abb      	ldr	r2, [pc, #748]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009612:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8009616:	f413 43e0 	ands.w	r3, r3, #28672	; 0x7000
 800961a:	f43f aa85 	beq.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 800961e:	6812      	ldr	r2, [r2, #0]
 8009620:	0111      	lsls	r1, r2, #4
 8009622:	d503      	bpl.n	800962c <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8009624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009628:	f43f ae02 	beq.w	8009230 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 800962c:	4ab4      	ldr	r2, [pc, #720]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800962e:	6812      	ldr	r2, [r2, #0]
 8009630:	0092      	lsls	r2, r2, #2
 8009632:	d503      	bpl.n	800963c <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 8009634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009638:	f43f ae00 	beq.w	800923c <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 800963c:	4ab0      	ldr	r2, [pc, #704]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800963e:	6811      	ldr	r1, [r2, #0]
 8009640:	0788      	lsls	r0, r1, #30
 8009642:	d503      	bpl.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x1078>
 8009644:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009648:	f000 82be 	beq.w	8009bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x15f4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 800964c:	4aac      	ldr	r2, [pc, #688]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	0591      	lsls	r1, r2, #22
 8009652:	d503      	bpl.n	800965c <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8009654:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009658:	f000 8317 	beq.w	8009c8a <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 800965c:	4aa8      	ldr	r2, [pc, #672]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800965e:	6810      	ldr	r0, [r2, #0]
 8009660:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009664:	f43f a804 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009668:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800966c:	48a5      	ldr	r0, [pc, #660]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800966e:	bf18      	it	ne
 8009670:	2000      	movne	r0, #0
 8009672:	f7fe bffd 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009676:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800967a:	f000 8154 	beq.w	8009926 <HAL_RCCEx_GetPeriphCLKFreq+0x1352>
 800967e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8009682:	bf18      	it	ne
 8009684:	2000      	movne	r0, #0
 8009686:	f47e aff3 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800968a:	4a9d      	ldr	r2, [pc, #628]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 800968c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009690:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009692:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009696:	0789      	lsls	r1, r1, #30
 8009698:	f140 81ef 	bpl.w	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 81ec 	bne.w	8009a7a <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80096a2:	6813      	ldr	r3, [r2, #0]
 80096a4:	4897      	ldr	r0, [pc, #604]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 80096a6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80096aa:	40d8      	lsrs	r0, r3
 80096ac:	f7fe bfe0 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80096b0:	4a93      	ldr	r2, [pc, #588]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80096b2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 80096b6:	f003 0303 	and.w	r3, r3, #3
        switch (srcclk)
 80096ba:	2b02      	cmp	r3, #2
 80096bc:	f000 80c0 	beq.w	8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	f000 80ae 	beq.w	8009822 <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	f43f ad67 	beq.w	800919a <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
}
 80096cc:	b005      	add	sp, #20
 80096ce:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetHCLKFreq();
 80096d2:	f7fc b9b1 	b.w	8005a38 <HAL_RCC_GetHCLKFreq>
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80096d6:	4b8a      	ldr	r3, [pc, #552]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80096d8:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80096dc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 80096e0:	f000 0008 	and.w	r0, r0, #8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 80096e4:	0792      	lsls	r2, r2, #30
 80096e6:	f140 8086 	bpl.w	80097f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	f000 80c9 	beq.w	8009882 <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80096f0:	4b83      	ldr	r3, [pc, #524]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80096f2:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
          frequency = LSI_VALUE;
 80096f6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80096fa:	bf18      	it	ne
 80096fc:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8009700:	f7fe bfb6 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009704:	4a7e      	ldr	r2, [pc, #504]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009706:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 800970a:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 800970e:	f43f aa0b 	beq.w	8008b28 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8009712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009716:	d068      	beq.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8009718:	6812      	ldr	r2, [r2, #0]
 800971a:	0792      	lsls	r2, r2, #30
 800971c:	d503      	bpl.n	8009726 <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
 800971e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009722:	f000 825f 	beq.w	8009be4 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8009726:	4a76      	ldr	r2, [pc, #472]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009728:	6810      	ldr	r0, [r2, #0]
 800972a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800972e:	f43e af9f 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8009732:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009736:	4874      	ldr	r0, [pc, #464]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>)
 8009738:	bf18      	it	ne
 800973a:	2000      	movne	r0, #0
 800973c:	f7fe bf98 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009740:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8009744:	d061      	beq.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
 8009746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800974a:	f040 82ef 	bne.w	8009d2c <HAL_RCCEx_GetPeriphCLKFreq+0x1758>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800974e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009752:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009754:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009758:	0789      	lsls	r1, r1, #30
 800975a:	f140 813a 	bpl.w	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
 800975e:	2b00      	cmp	r3, #0
 8009760:	f040 8137 	bne.w	80099d2 <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009764:	6813      	ldr	r3, [r2, #0]
 8009766:	4867      	ldr	r0, [pc, #412]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8009768:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800976c:	40d8      	lsrs	r0, r3
 800976e:	f7fe bf7f 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009772:	4b63      	ldr	r3, [pc, #396]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009774:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009778:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 800977c:	f43f aa69 	beq.w	8008c52 <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8009780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009784:	d031      	beq.n	80097ea <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009786:	4a5e      	ldr	r2, [pc, #376]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009788:	6811      	ldr	r1, [r2, #0]
 800978a:	0788      	lsls	r0, r1, #30
 800978c:	d503      	bpl.n	8009796 <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 800978e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009792:	f000 822f 	beq.w	8009bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8009796:	4a5a      	ldr	r2, [pc, #360]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009798:	6810      	ldr	r0, [r2, #0]
 800979a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800979e:	f43e af67 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 80097a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80097a6:	4858      	ldr	r0, [pc, #352]	; (8009908 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>)
 80097a8:	bf18      	it	ne
 80097aa:	2000      	movne	r0, #0
 80097ac:	f7fe bf60 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80097b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097b4:	f000 8099 	beq.w	80098ea <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
 80097b8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80097bc:	bf18      	it	ne
 80097be:	2000      	movne	r0, #0
 80097c0:	f47e af56 	bne.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097c4:	4a4e      	ldr	r2, [pc, #312]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80097c6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097ca:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80097cc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80097d0:	0789      	lsls	r1, r1, #30
 80097d2:	f140 816d 	bpl.w	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f040 816a 	bne.w	8009ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80097dc:	6813      	ldr	r3, [r2, #0]
 80097de:	4849      	ldr	r0, [pc, #292]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 80097e0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80097e4:	40d8      	lsrs	r0, r3
 80097e6:	f7fe bf43 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097ea:	a801      	add	r0, sp, #4
 80097ec:	f7fe fe34 	bl	8008458 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80097f0:	9803      	ldr	r0, [sp, #12]
 80097f2:	f7fe bf3d 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 80097f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80097fa:	011b      	lsls	r3, r3, #4
 80097fc:	d526      	bpl.n	800984c <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
          frequency = LSI_VALUE;
 80097fe:	2800      	cmp	r0, #0
 8009800:	bf18      	it	ne
 8009802:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8009806:	f7fe bf33 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 800980a:	4840      	ldr	r0, [pc, #256]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 800980c:	f7fe bf30 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009810:	483e      	ldr	r0, [pc, #248]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 8009812:	f7fe bf2d 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009816:	483d      	ldr	r0, [pc, #244]	; (800990c <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 8009818:	f7fe bf2a 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800981c:	2000      	movs	r0, #0
 800981e:	f7fe bf27 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009822:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009826:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009828:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800982c:	0789      	lsls	r1, r1, #30
 800982e:	d510      	bpl.n	8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8009830:	b97b      	cbnz	r3, 8009852 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009832:	6813      	ldr	r3, [r2, #0]
 8009834:	4833      	ldr	r0, [pc, #204]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8009836:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800983a:	40d8      	lsrs	r0, r3
 800983c:	f7fe bf18 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009840:	a801      	add	r0, sp, #4
 8009842:	f7fe fd4b 	bl	80082dc <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8009846:	9803      	ldr	r0, [sp, #12]
            break;
 8009848:	f7fe bf12 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = 0U;
 800984c:	2000      	movs	r0, #0
 800984e:	f7fe bf0f 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009852:	4a2b      	ldr	r2, [pc, #172]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009854:	6812      	ldr	r2, [r2, #0]
 8009856:	0592      	lsls	r2, r2, #22
 8009858:	d503      	bpl.n	8009862 <HAL_RCCEx_GetPeriphCLKFreq+0x128e>
 800985a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800985e:	f000 8241 	beq.w	8009ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x1710>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009862:	4a27      	ldr	r2, [pc, #156]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009864:	6810      	ldr	r0, [r2, #0]
 8009866:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800986a:	f43e af01 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800986e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009872:	4824      	ldr	r0, [pc, #144]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8009874:	bf18      	it	ne
 8009876:	2000      	movne	r0, #0
 8009878:	f7fe befa 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800987c:	4821      	ldr	r0, [pc, #132]	; (8009904 <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 800987e:	f7fe bef7 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8009882:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009886:	f7fe bef3 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSI48_VALUE;
 800988a:	4821      	ldr	r0, [pc, #132]	; (8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 800988c:	f7fe bef0 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009890:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8009894:	f010 0002 	ands.w	r0, r0, #2
 8009898:	bf18      	it	ne
 800989a:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800989e:	f7fe bee7 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098a2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 80098a6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80098aa:	bf18      	it	ne
 80098ac:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80098b0:	f7fe bede 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098b4:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 80098b8:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80098bc:	bf18      	it	ne
 80098be:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80098c2:	f7fe bed5 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098c6:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
          frequency = LSI_VALUE;
 80098ca:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80098ce:	bf18      	it	ne
 80098d0:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80098d4:	f7fe becc 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098d8:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 80098dc:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80098e0:	bf18      	it	ne
 80098e2:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80098e6:	f7fe bec3 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 80098ea:	4b05      	ldr	r3, [pc, #20]	; (8009900 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 80098ec:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
          frequency = LSI_VALUE;
 80098f0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80098f4:	bf18      	it	ne
 80098f6:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80098fa:	f7fe beb9 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80098fe:	bf00      	nop
 8009900:	44020c00 	.word	0x44020c00
 8009904:	017d7840 	.word	0x017d7840
 8009908:	003d0900 	.word	0x003d0900
 800990c:	00bb8000 	.word	0x00bb8000
 8009910:	02dc6c00 	.word	0x02dc6c00
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009914:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8009918:	f010 0002 	ands.w	r0, r0, #2
 800991c:	bf18      	it	ne
 800991e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009922:	f7fe bea5 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009926:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 800992a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800992e:	bf18      	it	ne
 8009930:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8009934:	f7fe be9c 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009938:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 800993c:	f010 0002 	ands.w	r0, r0, #2
 8009940:	bf18      	it	ne
 8009942:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009946:	f7fe be93 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
}
 800994a:	b005      	add	sp, #20
 800994c:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 8009950:	f7fb bf24 	b.w	800579c <HAL_RCC_GetSysClockFreq>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009954:	4aad      	ldr	r2, [pc, #692]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009956:	6812      	ldr	r2, [r2, #0]
 8009958:	0590      	lsls	r0, r2, #22
 800995a:	d503      	bpl.n	8009964 <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
 800995c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009960:	f000 81d2 	beq.w	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0x1734>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009964:	4aa9      	ldr	r2, [pc, #676]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009966:	6810      	ldr	r0, [r2, #0]
 8009968:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800996c:	f43e ae80 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009974:	48a6      	ldr	r0, [pc, #664]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009976:	bf18      	it	ne
 8009978:	2000      	movne	r0, #0
 800997a:	f7fe be79 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800997e:	4aa3      	ldr	r2, [pc, #652]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	0590      	lsls	r0, r2, #22
 8009984:	d503      	bpl.n	800998e <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
 8009986:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800998a:	f000 81c9 	beq.w	8009d20 <HAL_RCCEx_GetPeriphCLKFreq+0x174c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800998e:	4a9f      	ldr	r2, [pc, #636]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009990:	6810      	ldr	r0, [r2, #0]
 8009992:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009996:	f43e ae6b 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800999a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800999e:	489c      	ldr	r0, [pc, #624]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80099a0:	bf18      	it	ne
 80099a2:	2000      	movne	r0, #0
 80099a4:	f7fe be64 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099a8:	4a98      	ldr	r2, [pc, #608]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80099aa:	6812      	ldr	r2, [r2, #0]
 80099ac:	0591      	lsls	r1, r2, #22
 80099ae:	d503      	bpl.n	80099b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 80099b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b4:	f000 81b1 	beq.w	8009d1a <HAL_RCCEx_GetPeriphCLKFreq+0x1746>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099b8:	4a94      	ldr	r2, [pc, #592]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80099ba:	6810      	ldr	r0, [r2, #0]
 80099bc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80099c0:	f43e ae56 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80099c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099c8:	4891      	ldr	r0, [pc, #580]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80099ca:	bf18      	it	ne
 80099cc:	2000      	movne	r0, #0
 80099ce:	f7fe be4f 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099d2:	4a8e      	ldr	r2, [pc, #568]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80099d4:	6812      	ldr	r2, [r2, #0]
 80099d6:	0592      	lsls	r2, r2, #22
 80099d8:	d503      	bpl.n	80099e2 <HAL_RCCEx_GetPeriphCLKFreq+0x140e>
 80099da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099de:	f000 8187 	beq.w	8009cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x171c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80099e2:	4a8a      	ldr	r2, [pc, #552]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80099e4:	6810      	ldr	r0, [r2, #0]
 80099e6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80099ea:	f43e ae41 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80099ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099f2:	4887      	ldr	r0, [pc, #540]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80099f4:	bf18      	it	ne
 80099f6:	2000      	movne	r0, #0
 80099f8:	f7fe be3a 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80099fc:	4a83      	ldr	r2, [pc, #524]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80099fe:	6812      	ldr	r2, [r2, #0]
 8009a00:	0592      	lsls	r2, r2, #22
 8009a02:	d503      	bpl.n	8009a0c <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 8009a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a08:	f000 8184 	beq.w	8009d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1740>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a0c:	4a7f      	ldr	r2, [pc, #508]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009a0e:	6810      	ldr	r0, [r2, #0]
 8009a10:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009a14:	f43e ae2c 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a1c:	487c      	ldr	r0, [pc, #496]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009a1e:	bf18      	it	ne
 8009a20:	2000      	movne	r0, #0
 8009a22:	f7fe be25 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a26:	4a79      	ldr	r2, [pc, #484]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009a28:	6812      	ldr	r2, [r2, #0]
 8009a2a:	0590      	lsls	r0, r2, #22
 8009a2c:	d503      	bpl.n	8009a36 <HAL_RCCEx_GetPeriphCLKFreq+0x1462>
 8009a2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a32:	f000 816c 	beq.w	8009d0e <HAL_RCCEx_GetPeriphCLKFreq+0x173a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a36:	4a75      	ldr	r2, [pc, #468]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009a38:	6810      	ldr	r0, [r2, #0]
 8009a3a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009a3e:	f43e ae17 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009a42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a46:	4872      	ldr	r0, [pc, #456]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009a48:	bf18      	it	ne
 8009a4a:	2000      	movne	r0, #0
 8009a4c:	f7fe be10 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a50:	4a6e      	ldr	r2, [pc, #440]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009a52:	6812      	ldr	r2, [r2, #0]
 8009a54:	0592      	lsls	r2, r2, #22
 8009a56:	d503      	bpl.n	8009a60 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 8009a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a5c:	f000 8151 	beq.w	8009d02 <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a60:	4a6a      	ldr	r2, [pc, #424]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009a62:	6810      	ldr	r0, [r2, #0]
 8009a64:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009a68:	f43e ae02 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009a6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a70:	4867      	ldr	r0, [pc, #412]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009a72:	bf18      	it	ne
 8009a74:	2000      	movne	r0, #0
 8009a76:	f7fe bdfb 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009a7a:	4a64      	ldr	r2, [pc, #400]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009a7c:	6812      	ldr	r2, [r2, #0]
 8009a7e:	0590      	lsls	r0, r2, #22
 8009a80:	d503      	bpl.n	8009a8a <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 8009a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a86:	f000 8130 	beq.w	8009cea <HAL_RCCEx_GetPeriphCLKFreq+0x1716>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009a8a:	4a60      	ldr	r2, [pc, #384]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009a8c:	6810      	ldr	r0, [r2, #0]
 8009a8e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009a92:	f43e aded 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009a96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a9a:	485d      	ldr	r0, [pc, #372]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009a9c:	bf18      	it	ne
 8009a9e:	2000      	movne	r0, #0
 8009aa0:	f7fe bde6 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009aa4:	a801      	add	r0, sp, #4
 8009aa6:	f7fe fc19 	bl	80082dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009aaa:	9803      	ldr	r0, [sp, #12]
 8009aac:	f7fe bde0 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ab0:	4a56      	ldr	r2, [pc, #344]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009ab2:	6812      	ldr	r2, [r2, #0]
 8009ab4:	0590      	lsls	r0, r2, #22
 8009ab6:	d503      	bpl.n	8009ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>
 8009ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009abc:	f000 8133 	beq.w	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1752>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009ac0:	4a52      	ldr	r2, [pc, #328]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009ac2:	6810      	ldr	r0, [r2, #0]
 8009ac4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009ac8:	f43e add2 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009acc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ad0:	484f      	ldr	r0, [pc, #316]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009ad2:	bf18      	it	ne
 8009ad4:	2000      	movne	r0, #0
 8009ad6:	f7fe bdcb 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009ada:	4a4c      	ldr	r2, [pc, #304]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009adc:	6812      	ldr	r2, [r2, #0]
 8009ade:	0592      	lsls	r2, r2, #22
 8009ae0:	d503      	bpl.n	8009aea <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 8009ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ae6:	f000 8106 	beq.w	8009cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1722>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009aea:	4a48      	ldr	r2, [pc, #288]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009aec:	6810      	ldr	r0, [r2, #0]
 8009aee:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009af2:	f43e adbd 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009af6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009afa:	4845      	ldr	r0, [pc, #276]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009afc:	bf18      	it	ne
 8009afe:	2000      	movne	r0, #0
 8009b00:	f7fe bdb6 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009b04:	4a41      	ldr	r2, [pc, #260]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009b06:	6812      	ldr	r2, [r2, #0]
 8009b08:	0590      	lsls	r0, r2, #22
 8009b0a:	d503      	bpl.n	8009b14 <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 8009b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b10:	f000 80f4 	beq.w	8009cfc <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009b14:	4a3d      	ldr	r2, [pc, #244]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009b16:	6810      	ldr	r0, [r2, #0]
 8009b18:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009b1c:	f43e ada8 	beq.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009b20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b24:	483a      	ldr	r0, [pc, #232]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b26:	bf18      	it	ne
 8009b28:	2000      	movne	r0, #0
 8009b2a:	f7fe bda1 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b2e:	6813      	ldr	r3, [r2, #0]
 8009b30:	4837      	ldr	r0, [pc, #220]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b32:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b36:	40d8      	lsrs	r0, r3
 8009b38:	f7fe bd9a 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b3c:	6813      	ldr	r3, [r2, #0]
 8009b3e:	4834      	ldr	r0, [pc, #208]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b40:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b44:	40d8      	lsrs	r0, r3
 8009b46:	f7fe bd93 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	4830      	ldr	r0, [pc, #192]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b4e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b52:	40d8      	lsrs	r0, r3
 8009b54:	f7fe bd8c 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b58:	6813      	ldr	r3, [r2, #0]
 8009b5a:	482d      	ldr	r0, [pc, #180]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b5c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b60:	40d8      	lsrs	r0, r3
 8009b62:	f7fe bd85 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b66:	6813      	ldr	r3, [r2, #0]
 8009b68:	4829      	ldr	r0, [pc, #164]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b6a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b6e:	40d8      	lsrs	r0, r3
 8009b70:	f7fe bd7e 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b74:	6813      	ldr	r3, [r2, #0]
 8009b76:	4826      	ldr	r0, [pc, #152]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b78:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b7c:	40d8      	lsrs	r0, r3
 8009b7e:	f7fe bd77 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	4822      	ldr	r0, [pc, #136]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b86:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b8a:	40d8      	lsrs	r0, r3
 8009b8c:	f7fe bd70 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b90:	6813      	ldr	r3, [r2, #0]
 8009b92:	481f      	ldr	r0, [pc, #124]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009b94:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009b98:	40d8      	lsrs	r0, r3
 8009b9a:	f7fe bd69 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009b9e:	6813      	ldr	r3, [r2, #0]
 8009ba0:	481b      	ldr	r0, [pc, #108]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009ba2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009ba6:	40d8      	lsrs	r0, r3
 8009ba8:	f7fe bd62 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bac:	6813      	ldr	r3, [r2, #0]
 8009bae:	4818      	ldr	r0, [pc, #96]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009bb0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009bb4:	40d8      	lsrs	r0, r3
 8009bb6:	f7fe bd5b 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bba:	6813      	ldr	r3, [r2, #0]
 8009bbc:	4814      	ldr	r0, [pc, #80]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009bbe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009bc2:	40d8      	lsrs	r0, r3
 8009bc4:	f7fe bd54 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bc8:	6813      	ldr	r3, [r2, #0]
 8009bca:	4811      	ldr	r0, [pc, #68]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009bcc:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009bd0:	40d8      	lsrs	r0, r3
 8009bd2:	f7fe bd4d 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bd6:	6813      	ldr	r3, [r2, #0]
 8009bd8:	480d      	ldr	r0, [pc, #52]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009bda:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009bde:	40d8      	lsrs	r0, r3
 8009be0:	f7fe bd46 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009be4:	4b09      	ldr	r3, [pc, #36]	; (8009c0c <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009be6:	480a      	ldr	r0, [pc, #40]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009bee:	40d8      	lsrs	r0, r3
 8009bf0:	f7fe bd3e 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009bf4:	6813      	ldr	r3, [r2, #0]
 8009bf6:	4806      	ldr	r0, [pc, #24]	; (8009c10 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009bf8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009bfc:	40d8      	lsrs	r0, r3
 8009bfe:	f7fe bd37 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSI_VALUE;
 8009c02:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8009c06:	f7fe bd33 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009c0a:	bf00      	nop
 8009c0c:	44020c00 	.word	0x44020c00
 8009c10:	017d7840 	.word	0x017d7840
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c14:	6813      	ldr	r3, [r2, #0]
 8009c16:	484a      	ldr	r0, [pc, #296]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009c18:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c1c:	40d8      	lsrs	r0, r3
 8009c1e:	f7fe bd27 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c22:	6813      	ldr	r3, [r2, #0]
 8009c24:	4846      	ldr	r0, [pc, #280]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009c26:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c2a:	40d8      	lsrs	r0, r3
 8009c2c:	f7fe bd20 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c30:	6813      	ldr	r3, [r2, #0]
 8009c32:	4843      	ldr	r0, [pc, #268]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009c34:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c38:	40d8      	lsrs	r0, r3
 8009c3a:	f7fe bd19 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	483f      	ldr	r0, [pc, #252]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009c42:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c46:	40d8      	lsrs	r0, r3
 8009c48:	f7fe bd12 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c4c:	6813      	ldr	r3, [r2, #0]
 8009c4e:	483c      	ldr	r0, [pc, #240]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009c50:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c54:	40d8      	lsrs	r0, r3
 8009c56:	f7fe bd0b 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSE_VALUE;
 8009c5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8009c5e:	f7fe bd07 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c62:	6813      	ldr	r3, [r2, #0]
 8009c64:	4836      	ldr	r0, [pc, #216]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009c66:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c6a:	40d8      	lsrs	r0, r3
 8009c6c:	f7fe bd00 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009c70:	6813      	ldr	r3, [r2, #0]
 8009c72:	4833      	ldr	r0, [pc, #204]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009c74:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009c78:	40d8      	lsrs	r0, r3
 8009c7a:	f7fe bcf9 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8009c7e:	4831      	ldr	r0, [pc, #196]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009c80:	f7fe bcf6 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009c84:	482f      	ldr	r0, [pc, #188]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009c86:	f7fe bcf3 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009c8a:	482e      	ldr	r0, [pc, #184]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009c8c:	f7fe bcf0 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009c90:	482c      	ldr	r0, [pc, #176]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009c92:	f7fe bced 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009c96:	482b      	ldr	r0, [pc, #172]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009c98:	f7fe bcea 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009c9c:	4829      	ldr	r0, [pc, #164]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009c9e:	f7fe bce7 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009ca2:	4828      	ldr	r0, [pc, #160]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009ca4:	f7fe bce4 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009ca8:	4826      	ldr	r0, [pc, #152]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009caa:	f7fe bce1 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cae:	4825      	ldr	r0, [pc, #148]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cb0:	f7fe bcde 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cb4:	4823      	ldr	r0, [pc, #140]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cb6:	f7fe bcdb 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cba:	4822      	ldr	r0, [pc, #136]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cbc:	f7fe bcd8 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cc0:	4820      	ldr	r0, [pc, #128]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cc2:	f7fe bcd5 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cc6:	481f      	ldr	r0, [pc, #124]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cc8:	f7fe bcd2 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009ccc:	481d      	ldr	r0, [pc, #116]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cce:	f7fe bccf 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSE_VALUE;
 8009cd2:	481b      	ldr	r0, [pc, #108]	; (8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009cd4:	f7fe bccc 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8009cd8:	481a      	ldr	r0, [pc, #104]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cda:	f7fe bcc9 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cde:	4819      	ldr	r0, [pc, #100]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009ce0:	f7fe bcc6 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009ce4:	4817      	ldr	r0, [pc, #92]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009ce6:	f7fe bcc3 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cea:	4816      	ldr	r0, [pc, #88]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cec:	f7fe bcc0 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cf0:	4814      	ldr	r0, [pc, #80]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cf2:	f7fe bcbd 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cf6:	4813      	ldr	r0, [pc, #76]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cf8:	f7fe bcba 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009cfc:	4811      	ldr	r0, [pc, #68]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009cfe:	f7fe bcb7 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d02:	4810      	ldr	r0, [pc, #64]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009d04:	f7fe bcb4 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d08:	480e      	ldr	r0, [pc, #56]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009d0a:	f7fe bcb1 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d0e:	480d      	ldr	r0, [pc, #52]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009d10:	f7fe bcae 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d14:	480b      	ldr	r0, [pc, #44]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009d16:	f7fe bcab 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d1a:	480a      	ldr	r0, [pc, #40]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009d1c:	f7fe bca8 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d20:	4808      	ldr	r0, [pc, #32]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009d22:	f7fe bca5 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d26:	4807      	ldr	r0, [pc, #28]	; (8009d44 <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009d28:	f7fe bca2 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	f7fe bc9f 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d32:	2000      	movs	r0, #0
 8009d34:	f7fe bc9c 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f7fe bc99 	b.w	8008670 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009d3e:	bf00      	nop
 8009d40:	017d7840 	.word	0x017d7840
 8009d44:	003d0900 	.word	0x003d0900

08009d48 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8009d48:	6803      	ldr	r3, [r0, #0]
 8009d4a:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009d4c:	699a      	ldr	r2, [r3, #24]
 8009d4e:	f042 0208 	orr.w	r2, r2, #8
 8009d52:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009d54:	699a      	ldr	r2, [r3, #24]
 8009d56:	f042 0210 	orr.w	r2, r2, #16
 8009d5a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	f022 0201 	bic.w	r2, r2, #1
 8009d62:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009d64:	691a      	ldr	r2, [r3, #16]
 8009d66:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 8009d6a:	f022 0203 	bic.w	r2, r2, #3
 8009d6e:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009d70:	689a      	ldr	r2, [r3, #8]
 8009d72:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009d76:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009d78:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 8009d7c:	2a04      	cmp	r2, #4
 8009d7e:	d001      	beq.n	8009d84 <SPI_CloseTransfer+0x3c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009d80:	068a      	lsls	r2, r1, #26
 8009d82:	d431      	bmi.n	8009de8 <SPI_CloseTransfer+0xa0>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009d84:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 8009d88:	2a03      	cmp	r2, #3
 8009d8a:	d00f      	beq.n	8009dac <SPI_CloseTransfer+0x64>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009d8c:	064a      	lsls	r2, r1, #25
 8009d8e:	d509      	bpl.n	8009da4 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009d90:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009d94:	f042 0204 	orr.w	r2, r2, #4
 8009d98:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d9c:	699a      	ldr	r2, [r3, #24]
 8009d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009da2:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009da4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8009da6:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8009daa:	d028      	beq.n	8009dfe <SPI_CloseTransfer+0xb6>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009dac:	058a      	lsls	r2, r1, #22
 8009dae:	d509      	bpl.n	8009dc4 <SPI_CloseTransfer+0x7c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009db0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009db4:	f042 0201 	orr.w	r2, r2, #1
 8009db8:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009dbc:	699a      	ldr	r2, [r3, #24]
 8009dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dc2:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009dc4:	05ca      	lsls	r2, r1, #23
 8009dc6:	d509      	bpl.n	8009ddc <SPI_CloseTransfer+0x94>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009dc8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009dcc:	f042 0208 	orr.w	r2, r2, #8
 8009dd0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009dd4:	699a      	ldr	r2, [r3, #24]
 8009dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009dda:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8009de2:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
}
 8009de6:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009de8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009df0:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009df4:	699a      	ldr	r2, [r3, #24]
 8009df6:	f042 0220 	orr.w	r2, r2, #32
 8009dfa:	619a      	str	r2, [r3, #24]
 8009dfc:	e7c2      	b.n	8009d84 <SPI_CloseTransfer+0x3c>
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 8009dfe:	060a      	lsls	r2, r1, #24
 8009e00:	d5d4      	bpl.n	8009dac <SPI_CloseTransfer+0x64>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8009e02:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009e06:	f042 0202 	orr.w	r2, r2, #2
 8009e0a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009e0e:	699a      	ldr	r2, [r3, #24]
 8009e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009e14:	619a      	str	r2, [r3, #24]
 8009e16:	e7c9      	b.n	8009dac <SPI_CloseTransfer+0x64>

08009e18 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009e18:	2800      	cmp	r0, #0
 8009e1a:	f000 811e 	beq.w	800a05a <HAL_SPI_Init+0x242>
{
 8009e1e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e22:	4a9b      	ldr	r2, [pc, #620]	; (800a090 <HAL_SPI_Init+0x278>)
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8009e24:	6803      	ldr	r3, [r0, #0]
 8009e26:	4604      	mov	r4, r0
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	f000 80a5 	beq.w	8009f78 <HAL_SPI_Init+0x160>
 8009e2e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e32:	4293      	cmp	r3, r2
 8009e34:	f000 80a0 	beq.w	8009f78 <HAL_SPI_Init+0x160>
 8009e38:	4a96      	ldr	r2, [pc, #600]	; (800a094 <HAL_SPI_Init+0x27c>)
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	f000 809c 	beq.w	8009f78 <HAL_SPI_Init+0x160>
 8009e40:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e44:	4293      	cmp	r3, r2
 8009e46:	f000 8097 	beq.w	8009f78 <HAL_SPI_Init+0x160>
 8009e4a:	4a93      	ldr	r2, [pc, #588]	; (800a098 <HAL_SPI_Init+0x280>)
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	f000 8093 	beq.w	8009f78 <HAL_SPI_Init+0x160>
 8009e52:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e56:	4293      	cmp	r3, r2
 8009e58:	f000 808e 	beq.w	8009f78 <HAL_SPI_Init+0x160>
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009e5c:	68c2      	ldr	r2, [r0, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e5e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009e60:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009e64:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8009e66:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 8009e68:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e6c:	4d8b      	ldr	r5, [pc, #556]	; (800a09c <HAL_SPI_Init+0x284>)
 8009e6e:	42ab      	cmp	r3, r5
 8009e70:	d010      	beq.n	8009e94 <HAL_SPI_Init+0x7c>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e72:	4d8b      	ldr	r5, [pc, #556]	; (800a0a0 <HAL_SPI_Init+0x288>)
 8009e74:	42ab      	cmp	r3, r5
 8009e76:	d00d      	beq.n	8009e94 <HAL_SPI_Init+0x7c>
 8009e78:	4d8a      	ldr	r5, [pc, #552]	; (800a0a4 <HAL_SPI_Init+0x28c>)
 8009e7a:	42ab      	cmp	r3, r5
 8009e7c:	d00a      	beq.n	8009e94 <HAL_SPI_Init+0x7c>
 8009e7e:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 8009e82:	42ab      	cmp	r3, r5
 8009e84:	d006      	beq.n	8009e94 <HAL_SPI_Init+0x7c>
 8009e86:	4d88      	ldr	r5, [pc, #544]	; (800a0a8 <HAL_SPI_Init+0x290>)
 8009e88:	42ab      	cmp	r3, r5
 8009e8a:	d003      	beq.n	8009e94 <HAL_SPI_Init+0x7c>
 8009e8c:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 8009e90:	42ab      	cmp	r3, r5
 8009e92:	d101      	bne.n	8009e98 <HAL_SPI_Init+0x80>
 8009e94:	2910      	cmp	r1, #16
 8009e96:	d87c      	bhi.n	8009f92 <HAL_SPI_Init+0x17a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e98:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e9a:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 8009e9e:	f000 810d 	beq.w	800a0bc <HAL_SPI_Init+0x2a4>
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 8009ea2:	0417      	lsls	r7, r2, #16
  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ea4:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
 8009ea8:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8009eac:	2900      	cmp	r1, #0
 8009eae:	f000 80e5 	beq.w	800a07c <HAL_SPI_Init+0x264>
  hspi->State = HAL_SPI_STATE_BUSY;
 8009eb2:	2102      	movs	r1, #2
 8009eb4:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
  __HAL_SPI_DISABLE(hspi);
 8009eb8:	6819      	ldr	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009eba:	f8d4 8018 	ldr.w	r8, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8009ebe:	f021 0101 	bic.w	r1, r1, #1
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ec2:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
 8009ec6:	6865      	ldr	r5, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ec8:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8009ecc:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ece:	f000 80c6 	beq.w	800a05e <HAL_SPI_Init+0x246>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009ed2:	f415 0e80 	ands.w	lr, r5, #4194304	; 0x400000
 8009ed6:	f000 80cc 	beq.w	800a072 <HAL_SPI_Init+0x25a>
 8009eda:	2a06      	cmp	r2, #6
 8009edc:	f240 80c9 	bls.w	800a072 <HAL_SPI_Init+0x25a>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009ee0:	6819      	ldr	r1, [r3, #0]
 8009ee2:	f421 7980 	bic.w	r9, r1, #256	; 0x100
 8009ee6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009ee8:	ea49 0101 	orr.w	r1, r9, r1
 8009eec:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ef0:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009ef4:	ea48 0801 	orr.w	r8, r8, r1
 8009ef8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009efa:	ea48 0801 	orr.w	r8, r8, r1
 8009efe:	6921      	ldr	r1, [r4, #16]
 8009f00:	ea48 0801 	orr.w	r8, r8, r1
 8009f04:	6961      	ldr	r1, [r4, #20]
 8009f06:	ea48 0801 	orr.w	r8, r8, r1
 8009f0a:	6a21      	ldr	r1, [r4, #32]
 8009f0c:	ea48 0801 	orr.w	r8, r8, r1
 8009f10:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009f12:	ea48 0801 	orr.w	r8, r8, r1
 8009f16:	68a1      	ldr	r1, [r4, #8]
 8009f18:	ea48 0801 	orr.w	r8, r8, r1
 8009f1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009f1e:	ea48 0801 	orr.w	r8, r8, r1
 8009f22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009f24:	ea48 0801 	orr.w	r8, r8, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009f28:	69e1      	ldr	r1, [r4, #28]
 8009f2a:	ea41 0100 	orr.w	r1, r1, r0
 8009f2e:	ea41 0107 	orr.w	r1, r1, r7
 8009f32:	ea42 0201 	orr.w	r2, r2, r1
 8009f36:	ea42 0206 	orr.w	r2, r2, r6
 8009f3a:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f3c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8009f3e:	ea48 0102 	orr.w	r1, r8, r2
 8009f42:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8009f44:	ea42 0201 	orr.w	r2, r2, r1
 8009f48:	ea42 0c0c 	orr.w	ip, r2, ip
 8009f4c:	ea4c 0205 	orr.w	r2, ip, r5
 8009f50:	60da      	str	r2, [r3, #12]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f52:	d021      	beq.n	8009f98 <HAL_SPI_Init+0x180>
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f54:	2d00      	cmp	r5, #0
 8009f56:	d168      	bne.n	800a02a <HAL_SPI_Init+0x212>
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG);
 8009f58:	689a      	ldr	r2, [r3, #8]
 8009f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f5e:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f62:	f022 0201 	bic.w	r2, r2, #1
 8009f66:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f68:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8009f6a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009f6c:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8009f70:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
}
 8009f74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009f78:	68e2      	ldr	r2, [r4, #12]
 8009f7a:	2a0f      	cmp	r2, #15
 8009f7c:	d809      	bhi.n	8009f92 <HAL_SPI_Init+0x17a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8009f80:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009f84:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8009f86:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8009f88:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009f8c:	2908      	cmp	r1, #8
 8009f8e:	f240 808d 	bls.w	800a0ac <HAL_SPI_Init+0x294>
    return HAL_ERROR;
 8009f92:	2001      	movs	r0, #1
}
 8009f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8009f98:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009f9a:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	bf0c      	ite	eq
 8009fa0:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8009fa4:	f422 4200 	bicne.w	r2, r2, #32768	; 0x8000
 8009fa8:	601a      	str	r2, [r3, #0]
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8009faa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009fac:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	bf0c      	ite	eq
 8009fb2:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8009fb6:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8009fba:	601a      	str	r2, [r3, #0]
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 8009fbc:	4a34      	ldr	r2, [pc, #208]	; (800a090 <HAL_SPI_Init+0x278>)
 8009fbe:	4293      	cmp	r3, r2
 8009fc0:	d041      	beq.n	800a046 <HAL_SPI_Init+0x22e>
 8009fc2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d03d      	beq.n	800a046 <HAL_SPI_Init+0x22e>
 8009fca:	4a32      	ldr	r2, [pc, #200]	; (800a094 <HAL_SPI_Init+0x27c>)
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d03a      	beq.n	800a046 <HAL_SPI_Init+0x22e>
 8009fd0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d036      	beq.n	800a046 <HAL_SPI_Init+0x22e>
 8009fd8:	4a2f      	ldr	r2, [pc, #188]	; (800a098 <HAL_SPI_Init+0x280>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d033      	beq.n	800a046 <HAL_SPI_Init+0x22e>
 8009fde:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d02f      	beq.n	800a046 <HAL_SPI_Init+0x22e>
 8009fe6:	4a2d      	ldr	r2, [pc, #180]	; (800a09c <HAL_SPI_Init+0x284>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d00e      	beq.n	800a00a <HAL_SPI_Init+0x1f2>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8009fec:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d00a      	beq.n	800a00a <HAL_SPI_Init+0x1f2>
 8009ff4:	4a2b      	ldr	r2, [pc, #172]	; (800a0a4 <HAL_SPI_Init+0x28c>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d007      	beq.n	800a00a <HAL_SPI_Init+0x1f2>
 8009ffa:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d003      	beq.n	800a00a <HAL_SPI_Init+0x1f2>
 800a002:	4a29      	ldr	r2, [pc, #164]	; (800a0a8 <HAL_SPI_Init+0x290>)
 800a004:	4293      	cmp	r3, r2
 800a006:	f040 8086 	bne.w	800a116 <HAL_SPI_Init+0x2fe>
 800a00a:	f5b7 1ff8 	cmp.w	r7, #2031616	; 0x1f0000
 800a00e:	d01d      	beq.n	800a04c <HAL_SPI_Init+0x234>
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800a010:	2201      	movs	r2, #1
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800a012:	6819      	ldr	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800a014:	0c3f      	lsrs	r7, r7, #16
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800a016:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a01a:	6019      	str	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800a01c:	3701      	adds	r7, #1
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 800a01e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800a020:	40ba      	lsls	r2, r7
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 800a022:	430a      	orrs	r2, r1
 800a024:	641a      	str	r2, [r3, #64]	; 0x40
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a026:	2d00      	cmp	r5, #0
 800a028:	d096      	beq.n	8009f58 <HAL_SPI_Init+0x140>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a02a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a02c:	f022 0201 	bic.w	r2, r2, #1
 800a030:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a032:	f1be 0f00 	cmp.w	lr, #0
 800a036:	d097      	beq.n	8009f68 <HAL_SPI_Init+0x150>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a038:	68da      	ldr	r2, [r3, #12]
 800a03a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800a03c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800a040:	430a      	orrs	r2, r1
 800a042:	60da      	str	r2, [r3, #12]
 800a044:	e790      	b.n	8009f68 <HAL_SPI_Init+0x150>
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 800a046:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 800a04a:	d1e1      	bne.n	800a010 <HAL_SPI_Init+0x1f8>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a052:	601a      	str	r2, [r3, #0]
      WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 800a054:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800a056:	641a      	str	r2, [r3, #64]	; 0x40
 800a058:	e77c      	b.n	8009f54 <HAL_SPI_Init+0x13c>
    return HAL_ERROR;
 800a05a:	2001      	movs	r0, #1
}
 800a05c:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a05e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 800a062:	d04e      	beq.n	800a102 <HAL_SPI_Init+0x2ea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a064:	2d00      	cmp	r5, #0
 800a066:	f47f af34 	bne.w	8009ed2 <HAL_SPI_Init+0xba>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a06a:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 800a06e:	d04d      	beq.n	800a10c <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a070:	46ae      	mov	lr, r5
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a072:	6819      	ldr	r1, [r3, #0]
 800a074:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800a078:	6019      	str	r1, [r3, #0]
 800a07a:	e738      	b.n	8009eee <HAL_SPI_Init+0xd6>
    HAL_SPI_MspInit(hspi);
 800a07c:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800a07e:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    HAL_SPI_MspInit(hspi);
 800a082:	f7f7 fa43 	bl	800150c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800a086:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a088:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a08a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a08c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a08e:	e710      	b.n	8009eb2 <HAL_SPI_Init+0x9a>
 800a090:	40014c00 	.word	0x40014c00
 800a094:	44002000 	.word	0x44002000
 800a098:	40015000 	.word	0x40015000
 800a09c:	40013000 	.word	0x40013000
 800a0a0:	50013000 	.word	0x50013000
 800a0a4:	40003800 	.word	0x40003800
 800a0a8:	40003c00 	.word	0x40003c00
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0ac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a0ae:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 800a0b2:	f47f aef6 	bne.w	8009ea2 <HAL_SPI_Init+0x8a>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 800a0b6:	491b      	ldr	r1, [pc, #108]	; (800a124 <HAL_SPI_Init+0x30c>)
 800a0b8:	428b      	cmp	r3, r1
 800a0ba:	d01a      	beq.n	800a0f2 <HAL_SPI_Init+0x2da>
 800a0bc:	491a      	ldr	r1, [pc, #104]	; (800a128 <HAL_SPI_Init+0x310>)
 800a0be:	428b      	cmp	r3, r1
 800a0c0:	d017      	beq.n	800a0f2 <HAL_SPI_Init+0x2da>
 800a0c2:	491a      	ldr	r1, [pc, #104]	; (800a12c <HAL_SPI_Init+0x314>)
 800a0c4:	428b      	cmp	r3, r1
 800a0c6:	d014      	beq.n	800a0f2 <HAL_SPI_Init+0x2da>
 800a0c8:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 800a0cc:	428b      	cmp	r3, r1
 800a0ce:	d010      	beq.n	800a0f2 <HAL_SPI_Init+0x2da>
 800a0d0:	4917      	ldr	r1, [pc, #92]	; (800a130 <HAL_SPI_Init+0x318>)
 800a0d2:	428b      	cmp	r3, r1
 800a0d4:	d00d      	beq.n	800a0f2 <HAL_SPI_Init+0x2da>
 800a0d6:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 800a0da:	428b      	cmp	r3, r1
 800a0dc:	d009      	beq.n	800a0f2 <HAL_SPI_Init+0x2da>
 800a0de:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a0e0:	b907      	cbnz	r7, 800a0e4 <HAL_SPI_Init+0x2cc>
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 800a0e2:	0417      	lsls	r7, r2, #16
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 800a0e4:	ebb2 4f17 	cmp.w	r2, r7, lsr #16
 800a0e8:	f63f af53 	bhi.w	8009f92 <HAL_SPI_Init+0x17a>
 800a0ec:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 800a0f0:	e6d8      	b.n	8009ea4 <HAL_SPI_Init+0x8c>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 800a0f2:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800a0f4:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 800a0f8:	f63f af4b 	bhi.w	8009f92 <HAL_SPI_Init+0x17a>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a0fc:	2f00      	cmp	r7, #0
 800a0fe:	d1f1      	bne.n	800a0e4 <HAL_SPI_Init+0x2cc>
 800a100:	e7ef      	b.n	800a0e2 <HAL_SPI_Init+0x2ca>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a102:	f1bc 0f00 	cmp.w	ip, #0
 800a106:	d001      	beq.n	800a10c <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a108:	46ae      	mov	lr, r5
 800a10a:	e6e6      	b.n	8009eda <HAL_SPI_Init+0xc2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a10c:	6819      	ldr	r1, [r3, #0]
 800a10e:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800a112:	6019      	str	r1, [r3, #0]
 800a114:	e6dd      	b.n	8009ed2 <HAL_SPI_Init+0xba>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 800a116:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a11a:	4293      	cmp	r3, r2
 800a11c:	f43f af75 	beq.w	800a00a <HAL_SPI_Init+0x1f2>
 800a120:	e776      	b.n	800a010 <HAL_SPI_Init+0x1f8>
 800a122:	bf00      	nop
 800a124:	40014c00 	.word	0x40014c00
 800a128:	50014c00 	.word	0x50014c00
 800a12c:	44002000 	.word	0x44002000
 800a130:	40015000 	.word	0x40015000

0800a134 <HAL_SPI_Transmit>:
{
 800a134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a138:	4604      	mov	r4, r0
 800a13a:	4690      	mov	r8, r2
 800a13c:	4689      	mov	r9, r1
 800a13e:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a140:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 800a142:	f7fa fc09 	bl	8004958 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800a146:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 800a14a:	2a01      	cmp	r2, #1
 800a14c:	d172      	bne.n	800a234 <HAL_SPI_Transmit+0x100>
  if ((pData == NULL) || (Size == 0UL))
 800a14e:	b2d3      	uxtb	r3, r2
 800a150:	f1b9 0f00 	cmp.w	r9, #0
 800a154:	d06f      	beq.n	800a236 <HAL_SPI_Transmit+0x102>
 800a156:	f1b8 0f00 	cmp.w	r8, #0
 800a15a:	d06c      	beq.n	800a236 <HAL_SPI_Transmit+0x102>
  __HAL_LOCK(hspi);
 800a15c:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 800a160:	2a01      	cmp	r2, #1
 800a162:	d067      	beq.n	800a234 <HAL_SPI_Transmit+0x100>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a164:	2203      	movs	r2, #3
  __HAL_LOCK(hspi);
 800a166:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a16a:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a16c:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
  hspi->pRxBuffPtr  = NULL;
 800a170:	66e3      	str	r3, [r4, #108]	; 0x6c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a172:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a176:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  hspi->TxXferCount = Size;
 800a17a:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a17e:	67e3      	str	r3, [r4, #124]	; 0x7c
  hspi->RxXferCount = (uint16_t) 0UL;
 800a180:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
  hspi->RxISR       = NULL;
 800a184:	67a3      	str	r3, [r4, #120]	; 0x78
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a186:	68a3      	ldr	r3, [r4, #8]
 800a188:	4606      	mov	r6, r0
 800a18a:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    SPI_1LINE_TX(hspi);
 800a18e:	6821      	ldr	r1, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a190:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800a194:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a198:	f000 8121 	beq.w	800a3de <HAL_SPI_Transmit+0x2aa>
    SPI_2LINES_TX(hspi);
 800a19c:	68cb      	ldr	r3, [r1, #12]
 800a19e:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a1a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1a6:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a1a8:	684b      	ldr	r3, [r1, #4]
 800a1aa:	0c1b      	lsrs	r3, r3, #16
 800a1ac:	041b      	lsls	r3, r3, #16
 800a1ae:	ea43 0308 	orr.w	r3, r3, r8
 800a1b2:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800a1b4:	680b      	ldr	r3, [r1, #0]
 800a1b6:	f043 0301 	orr.w	r3, r3, #1
 800a1ba:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1bc:	6863      	ldr	r3, [r4, #4]
 800a1be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1c2:	d103      	bne.n	800a1cc <HAL_SPI_Transmit+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a1c4:	680b      	ldr	r3, [r1, #0]
 800a1c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a1ca:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a1cc:	68e3      	ldr	r3, [r4, #12]
 800a1ce:	2b0f      	cmp	r3, #15
 800a1d0:	f200 808f 	bhi.w	800a2f2 <HAL_SPI_Transmit+0x1be>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1d4:	2b07      	cmp	r3, #7
 800a1d6:	d860      	bhi.n	800a29a <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 800a1d8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	b383      	cbz	r3, 800a242 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a1e0:	694b      	ldr	r3, [r1, #20]
 800a1e2:	0798      	lsls	r0, r3, #30
 800a1e4:	d51b      	bpl.n	800a21e <HAL_SPI_Transmit+0xea>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a1e6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	2b03      	cmp	r3, #3
 800a1ee:	f240 80ba 	bls.w	800a366 <HAL_SPI_Transmit+0x232>
 800a1f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a1f4:	2b40      	cmp	r3, #64	; 0x40
 800a1f6:	f240 80b6 	bls.w	800a366 <HAL_SPI_Transmit+0x232>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a1fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a200:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a202:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800a204:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a208:	3b04      	subs	r3, #4
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 800a210:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a214:	b29b      	uxth	r3, r3
 800a216:	b1a3      	cbz	r3, 800a242 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a218:	694b      	ldr	r3, [r1, #20]
 800a21a:	0798      	lsls	r0, r3, #30
 800a21c:	d4e3      	bmi.n	800a1e6 <HAL_SPI_Transmit+0xb2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a21e:	f7fa fb9b 	bl	8004958 <HAL_GetTick>
 800a222:	1b80      	subs	r0, r0, r6
 800a224:	42a8      	cmp	r0, r5
 800a226:	f0c0 80d6 	bcc.w	800a3d6 <HAL_SPI_Transmit+0x2a2>
 800a22a:	1c69      	adds	r1, r5, #1
 800a22c:	f040 80bf 	bne.w	800a3ae <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a230:	6821      	ldr	r1, [r4, #0]
 800a232:	e7d1      	b.n	800a1d8 <HAL_SPI_Transmit+0xa4>
    return HAL_BUSY;
 800a234:	2302      	movs	r3, #2
}
 800a236:	4618      	mov	r0, r3
 800a238:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a23c:	1c6a      	adds	r2, r5, #1
 800a23e:	d10a      	bne.n	800a256 <HAL_SPI_Transmit+0x122>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a240:	6821      	ldr	r1, [r4, #0]
 800a242:	694b      	ldr	r3, [r1, #20]
 800a244:	071b      	lsls	r3, r3, #28
 800a246:	d40c      	bmi.n	800a262 <HAL_SPI_Transmit+0x12e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a248:	f7fa fb86 	bl	8004958 <HAL_GetTick>
 800a24c:	1b80      	subs	r0, r0, r6
 800a24e:	4285      	cmp	r5, r0
 800a250:	d9f4      	bls.n	800a23c <HAL_SPI_Transmit+0x108>
 800a252:	2d00      	cmp	r5, #0
 800a254:	d1f4      	bne.n	800a240 <HAL_SPI_Transmit+0x10c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a256:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a25a:	f043 0320 	orr.w	r3, r3, #32
 800a25e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  SPI_CloseTransfer(hspi);
 800a262:	4620      	mov	r0, r4
 800a264:	f7ff fd70 	bl	8009d48 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800a268:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 800a26a:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 800a26c:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a270:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  __HAL_UNLOCK(hspi);
 800a274:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
    return HAL_BUSY;
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	bf18      	it	ne
 800a27c:	2301      	movne	r3, #1
}
 800a27e:	4618      	mov	r0, r3
 800a280:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a284:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a286:	f833 2b02 	ldrh.w	r2, [r3], #2
 800a28a:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a28c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 800a28e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a292:	3b01      	subs	r3, #1
 800a294:	b29b      	uxth	r3, r3
 800a296:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 800a29a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d0ce      	beq.n	800a242 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a2a4:	694b      	ldr	r3, [r1, #20]
 800a2a6:	079a      	lsls	r2, r3, #30
 800a2a8:	d51a      	bpl.n	800a2e0 <HAL_SPI_Transmit+0x1ac>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a2aa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a2ae:	b29b      	uxth	r3, r3
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d9e7      	bls.n	800a284 <HAL_SPI_Transmit+0x150>
 800a2b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0e4      	beq.n	800a284 <HAL_SPI_Transmit+0x150>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a2ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2c0:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2c2:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2c4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a2c8:	3b02      	subs	r3, #2
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 800a2d0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d0b3      	beq.n	800a242 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a2da:	694b      	ldr	r3, [r1, #20]
 800a2dc:	079a      	lsls	r2, r3, #30
 800a2de:	d4e4      	bmi.n	800a2aa <HAL_SPI_Transmit+0x176>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2e0:	f7fa fb3a 	bl	8004958 <HAL_GetTick>
 800a2e4:	1b80      	subs	r0, r0, r6
 800a2e6:	42a8      	cmp	r0, r5
 800a2e8:	d372      	bcc.n	800a3d0 <HAL_SPI_Transmit+0x29c>
 800a2ea:	1c6b      	adds	r3, r5, #1
 800a2ec:	d15f      	bne.n	800a3ae <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a2ee:	6821      	ldr	r1, [r4, #0]
 800a2f0:	e7d3      	b.n	800a29a <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800a2f2:	4b3d      	ldr	r3, [pc, #244]	; (800a3e8 <HAL_SPI_Transmit+0x2b4>)
 800a2f4:	4299      	cmp	r1, r3
 800a2f6:	d011      	beq.n	800a31c <HAL_SPI_Transmit+0x1e8>
 800a2f8:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800a2fc:	4299      	cmp	r1, r3
 800a2fe:	d00d      	beq.n	800a31c <HAL_SPI_Transmit+0x1e8>
 800a300:	4b3a      	ldr	r3, [pc, #232]	; (800a3ec <HAL_SPI_Transmit+0x2b8>)
 800a302:	4299      	cmp	r1, r3
 800a304:	d00a      	beq.n	800a31c <HAL_SPI_Transmit+0x1e8>
 800a306:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800a30a:	4299      	cmp	r1, r3
 800a30c:	d006      	beq.n	800a31c <HAL_SPI_Transmit+0x1e8>
 800a30e:	4b38      	ldr	r3, [pc, #224]	; (800a3f0 <HAL_SPI_Transmit+0x2bc>)
 800a310:	4299      	cmp	r1, r3
 800a312:	d003      	beq.n	800a31c <HAL_SPI_Transmit+0x1e8>
 800a314:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800a318:	4299      	cmp	r1, r3
 800a31a:	d1be      	bne.n	800a29a <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 800a31c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a320:	b29b      	uxth	r3, r3
 800a322:	2b00      	cmp	r3, #0
 800a324:	d08d      	beq.n	800a242 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a326:	694b      	ldr	r3, [r1, #20]
 800a328:	0798      	lsls	r0, r3, #30
 800a32a:	d513      	bpl.n	800a354 <HAL_SPI_Transmit+0x220>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a32c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a32e:	f852 3b04 	ldr.w	r3, [r2], #4
 800a332:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 800a334:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a338:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->TxXferCount--;
 800a33a:	3b01      	subs	r3, #1
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 800a342:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a346:	b29b      	uxth	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f43f af7a 	beq.w	800a242 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a34e:	694b      	ldr	r3, [r1, #20]
 800a350:	0798      	lsls	r0, r3, #30
 800a352:	d4eb      	bmi.n	800a32c <HAL_SPI_Transmit+0x1f8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a354:	f7fa fb00 	bl	8004958 <HAL_GetTick>
 800a358:	1b80      	subs	r0, r0, r6
 800a35a:	42a8      	cmp	r0, r5
 800a35c:	d325      	bcc.n	800a3aa <HAL_SPI_Transmit+0x276>
 800a35e:	1c69      	adds	r1, r5, #1
 800a360:	d125      	bne.n	800a3ae <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a362:	6821      	ldr	r1, [r4, #0]
 800a364:	e7da      	b.n	800a31c <HAL_SPI_Transmit+0x1e8>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a366:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d90d      	bls.n	800a38c <HAL_SPI_Transmit+0x258>
 800a370:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a372:	b15b      	cbz	r3, 800a38c <HAL_SPI_Transmit+0x258>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a376:	f833 2b02 	ldrh.w	r2, [r3], #2
 800a37a:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a37c:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 800a37e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a382:	3b02      	subs	r3, #2
 800a384:	b29b      	uxth	r3, r3
 800a386:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a38a:	e725      	b.n	800a1d8 <HAL_SPI_Transmit+0xa4>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a38c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a394:	6e63      	ldr	r3, [r4, #100]	; 0x64
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a396:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a398:	3301      	adds	r3, #1
 800a39a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 800a39c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800a3a0:	3b01      	subs	r3, #1
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800a3a8:	e716      	b.n	800a1d8 <HAL_SPI_Transmit+0xa4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3aa:	2d00      	cmp	r5, #0
 800a3ac:	d1d9      	bne.n	800a362 <HAL_SPI_Transmit+0x22e>
          SPI_CloseTransfer(hspi);
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f7ff fcca 	bl	8009d48 <SPI_CloseTransfer>
          hspi->State = HAL_SPI_STATE_READY;
 800a3b4:	2401      	movs	r4, #1
          __HAL_UNLOCK(hspi);
 800a3b6:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3b8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
          return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a3be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3c2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
          __HAL_UNLOCK(hspi);
 800a3c6:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
          hspi->State = HAL_SPI_STATE_READY;
 800a3ca:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
          return HAL_TIMEOUT;
 800a3ce:	e732      	b.n	800a236 <HAL_SPI_Transmit+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3d0:	2d00      	cmp	r5, #0
 800a3d2:	d18c      	bne.n	800a2ee <HAL_SPI_Transmit+0x1ba>
 800a3d4:	e7eb      	b.n	800a3ae <HAL_SPI_Transmit+0x27a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3d6:	2d00      	cmp	r5, #0
 800a3d8:	f47f af2a 	bne.w	800a230 <HAL_SPI_Transmit+0xfc>
 800a3dc:	e7e7      	b.n	800a3ae <HAL_SPI_Transmit+0x27a>
    SPI_1LINE_TX(hspi);
 800a3de:	680b      	ldr	r3, [r1, #0]
 800a3e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a3e4:	600b      	str	r3, [r1, #0]
 800a3e6:	e6df      	b.n	800a1a8 <HAL_SPI_Transmit+0x74>
 800a3e8:	40013000 	.word	0x40013000
 800a3ec:	40003800 	.word	0x40003800
 800a3f0:	40003c00 	.word	0x40003c00

0800a3f4 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a3f4:	4770      	bx	lr
 800a3f6:	bf00      	nop

0800a3f8 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a3f8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d14b      	bne.n	800a498 <HAL_TIM_Base_Start_IT+0xa0>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a400:	2202      	movs	r2, #2

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a402:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800a404:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a408:	68da      	ldr	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a40a:	4925      	ldr	r1, [pc, #148]	; (800a4a0 <HAL_TIM_Base_Start_IT+0xa8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a40c:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a410:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a412:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a414:	d032      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a416:	4a23      	ldr	r2, [pc, #140]	; (800a4a4 <HAL_TIM_Base_Start_IT+0xac>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d02f      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a420:	d02c      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a422:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a426:	d029      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a428:	4a1f      	ldr	r2, [pc, #124]	; (800a4a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d026      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a42e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a432:	4293      	cmp	r3, r2
 800a434:	d022      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a436:	4a1d      	ldr	r2, [pc, #116]	; (800a4ac <HAL_TIM_Base_Start_IT+0xb4>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d01f      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a43c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a440:	4293      	cmp	r3, r2
 800a442:	d01b      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a444:	4a1a      	ldr	r2, [pc, #104]	; (800a4b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d018      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a44a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a44e:	4293      	cmp	r3, r2
 800a450:	d014      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a452:	4a18      	ldr	r2, [pc, #96]	; (800a4b4 <HAL_TIM_Base_Start_IT+0xbc>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d011      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a458:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d00d      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a460:	4a15      	ldr	r2, [pc, #84]	; (800a4b8 <HAL_TIM_Base_Start_IT+0xc0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d00a      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a466:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d006      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a46e:	4a13      	ldr	r2, [pc, #76]	; (800a4bc <HAL_TIM_Base_Start_IT+0xc4>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d003      	beq.n	800a47c <HAL_TIM_Base_Start_IT+0x84>
 800a474:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a478:	4293      	cmp	r3, r2
 800a47a:	d107      	bne.n	800a48c <HAL_TIM_Base_Start_IT+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a47c:	6899      	ldr	r1, [r3, #8]
 800a47e:	4a10      	ldr	r2, [pc, #64]	; (800a4c0 <HAL_TIM_Base_Start_IT+0xc8>)
 800a480:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a482:	2a06      	cmp	r2, #6
 800a484:	d00a      	beq.n	800a49c <HAL_TIM_Base_Start_IT+0xa4>
 800a486:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800a48a:	d007      	beq.n	800a49c <HAL_TIM_Base_Start_IT+0xa4>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a48c:	681a      	ldr	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a48e:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800a490:	f042 0201 	orr.w	r2, r2, #1
 800a494:	601a      	str	r2, [r3, #0]
 800a496:	4770      	bx	lr
    return HAL_ERROR;
 800a498:	2001      	movs	r0, #1
 800a49a:	4770      	bx	lr
  return HAL_OK;
 800a49c:	2000      	movs	r0, #0
}
 800a49e:	4770      	bx	lr
 800a4a0:	40012c00 	.word	0x40012c00
 800a4a4:	50012c00 	.word	0x50012c00
 800a4a8:	40000400 	.word	0x40000400
 800a4ac:	40000800 	.word	0x40000800
 800a4b0:	40000c00 	.word	0x40000c00
 800a4b4:	40013400 	.word	0x40013400
 800a4b8:	40001800 	.word	0x40001800
 800a4bc:	40014000 	.word	0x40014000
 800a4c0:	00010007 	.word	0x00010007

0800a4c4 <HAL_TIM_OC_DelayElapsedCallback>:
 800a4c4:	4770      	bx	lr
 800a4c6:	bf00      	nop

0800a4c8 <HAL_TIM_IC_CaptureCallback>:
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop

0800a4cc <HAL_TIM_PWM_PulseFinishedCallback>:
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop

0800a4d0 <HAL_TIM_TriggerCallback>:
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop

0800a4d4 <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 800a4d4:	6803      	ldr	r3, [r0, #0]
{
 800a4d6:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800a4d8:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a4da:	691c      	ldr	r4, [r3, #16]
{
 800a4dc:	4605      	mov	r5, r0

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a4de:	07a2      	lsls	r2, r4, #30
 800a4e0:	d501      	bpl.n	800a4e6 <HAL_TIM_IRQHandler+0x12>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a4e2:	07b1      	lsls	r1, r6, #30
 800a4e4:	d46c      	bmi.n	800a5c0 <HAL_TIM_IRQHandler+0xec>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a4e6:	0763      	lsls	r3, r4, #29
 800a4e8:	d501      	bpl.n	800a4ee <HAL_TIM_IRQHandler+0x1a>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a4ea:	0770      	lsls	r0, r6, #29
 800a4ec:	d455      	bmi.n	800a59a <HAL_TIM_IRQHandler+0xc6>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a4ee:	0721      	lsls	r1, r4, #28
 800a4f0:	d501      	bpl.n	800a4f6 <HAL_TIM_IRQHandler+0x22>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a4f2:	0732      	lsls	r2, r6, #28
 800a4f4:	d43e      	bmi.n	800a574 <HAL_TIM_IRQHandler+0xa0>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a4f6:	06e0      	lsls	r0, r4, #27
 800a4f8:	d501      	bpl.n	800a4fe <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a4fa:	06f1      	lsls	r1, r6, #27
 800a4fc:	d426      	bmi.n	800a54c <HAL_TIM_IRQHandler+0x78>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a4fe:	07e2      	lsls	r2, r4, #31
 800a500:	d501      	bpl.n	800a506 <HAL_TIM_IRQHandler+0x32>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a502:	07f3      	lsls	r3, r6, #31
 800a504:	d47a      	bmi.n	800a5fc <HAL_TIM_IRQHandler+0x128>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a506:	f414 5f02 	tst.w	r4, #8320	; 0x2080
 800a50a:	d069      	beq.n	800a5e0 <HAL_TIM_IRQHandler+0x10c>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a50c:	0630      	lsls	r0, r6, #24
 800a50e:	d47d      	bmi.n	800a60c <HAL_TIM_IRQHandler+0x138>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a510:	0660      	lsls	r0, r4, #25
 800a512:	d502      	bpl.n	800a51a <HAL_TIM_IRQHandler+0x46>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a514:	0671      	lsls	r1, r6, #25
 800a516:	f100 808b 	bmi.w	800a630 <HAL_TIM_IRQHandler+0x15c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a51a:	06a2      	lsls	r2, r4, #26
 800a51c:	d502      	bpl.n	800a524 <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a51e:	06b3      	lsls	r3, r6, #26
 800a520:	f100 808e 	bmi.w	800a640 <HAL_TIM_IRQHandler+0x16c>
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a524:	02e0      	lsls	r0, r4, #11
 800a526:	d502      	bpl.n	800a52e <HAL_TIM_IRQHandler+0x5a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a528:	02f1      	lsls	r1, r6, #11
 800a52a:	f100 8091 	bmi.w	800a650 <HAL_TIM_IRQHandler+0x17c>
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a52e:	02a2      	lsls	r2, r4, #10
 800a530:	d502      	bpl.n	800a538 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a532:	02b3      	lsls	r3, r6, #10
 800a534:	f100 8094 	bmi.w	800a660 <HAL_TIM_IRQHandler+0x18c>
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a538:	0260      	lsls	r0, r4, #9
 800a53a:	d502      	bpl.n	800a542 <HAL_TIM_IRQHandler+0x6e>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a53c:	0271      	lsls	r1, r6, #9
 800a53e:	f100 8097 	bmi.w	800a670 <HAL_TIM_IRQHandler+0x19c>
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a542:	0222      	lsls	r2, r4, #8
 800a544:	d501      	bpl.n	800a54a <HAL_TIM_IRQHandler+0x76>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a546:	0233      	lsls	r3, r6, #8
 800a548:	d44f      	bmi.n	800a5ea <HAL_TIM_IRQHandler+0x116>
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a54a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a54c:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a550:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a552:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800a554:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a556:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a558:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a560:	f040 8097 	bne.w	800a692 <HAL_TIM_IRQHandler+0x1be>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a564:	f7ff ffae 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a568:	4628      	mov	r0, r5
 800a56a:	f7ff ffaf 	bl	800a4cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a56e:	2300      	movs	r3, #0
 800a570:	772b      	strb	r3, [r5, #28]
 800a572:	e7c4      	b.n	800a4fe <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a574:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a578:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a57a:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800a57c:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a57e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a580:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a582:	69db      	ldr	r3, [r3, #28]
 800a584:	079b      	lsls	r3, r3, #30
 800a586:	f040 8081 	bne.w	800a68c <HAL_TIM_IRQHandler+0x1b8>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a58a:	f7ff ff9b 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a58e:	4628      	mov	r0, r5
 800a590:	f7ff ff9c 	bl	800a4cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a594:	2300      	movs	r3, #0
 800a596:	772b      	strb	r3, [r5, #28]
 800a598:	e7ad      	b.n	800a4f6 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a59a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a59e:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a5a0:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 800a5a2:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a5a4:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a5a6:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	f413 7f40 	tst.w	r3, #768	; 0x300
 800a5ae:	d16a      	bne.n	800a686 <HAL_TIM_IRQHandler+0x1b2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5b0:	f7ff ff88 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5b4:	4628      	mov	r0, r5
 800a5b6:	f7ff ff89 	bl	800a4cc <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	772b      	strb	r3, [r5, #28]
 800a5be:	e796      	b.n	800a4ee <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a5c0:	f06f 0202 	mvn.w	r2, #2
 800a5c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a5ca:	699b      	ldr	r3, [r3, #24]
 800a5cc:	079a      	lsls	r2, r3, #30
 800a5ce:	d157      	bne.n	800a680 <HAL_TIM_IRQHandler+0x1ac>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5d0:	f7ff ff78 	bl	800a4c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5d4:	4628      	mov	r0, r5
 800a5d6:	f7ff ff79 	bl	800a4cc <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	772b      	strb	r3, [r5, #28]
 800a5de:	e782      	b.n	800a4e6 <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a5e0:	05e2      	lsls	r2, r4, #23
 800a5e2:	d595      	bpl.n	800a510 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a5e4:	0633      	lsls	r3, r6, #24
 800a5e6:	d41b      	bmi.n	800a620 <HAL_TIM_IRQHandler+0x14c>
 800a5e8:	e792      	b.n	800a510 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a5ea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a5ee:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a5f0:	4628      	mov	r0, r5
}
 800a5f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a5f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a5f8:	f000 b94e 	b.w	800a898 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a5fc:	f06f 0201 	mvn.w	r2, #1
 800a600:	682b      	ldr	r3, [r5, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a602:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a604:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800a606:	f7f7 fedf 	bl	80023c8 <HAL_TIM_PeriodElapsedCallback>
 800a60a:	e77c      	b.n	800a506 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a60c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800a610:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_BreakCallback(htim);
 800a612:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a614:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800a616:	f000 f935 	bl	800a884 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a61a:	05e1      	lsls	r1, r4, #23
 800a61c:	f57f af78 	bpl.w	800a510 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a620:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a624:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_Break2Callback(htim);
 800a626:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a628:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800a62a:	f000 f92d 	bl	800a888 <HAL_TIMEx_Break2Callback>
 800a62e:	e76f      	b.n	800a510 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a630:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a634:	682b      	ldr	r3, [r5, #0]
      HAL_TIM_TriggerCallback(htim);
 800a636:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a638:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800a63a:	f7ff ff49 	bl	800a4d0 <HAL_TIM_TriggerCallback>
 800a63e:	e76c      	b.n	800a51a <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a640:	f06f 0220 	mvn.w	r2, #32
 800a644:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_CommutCallback(htim);
 800a646:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a648:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800a64a:	f000 f919 	bl	800a880 <HAL_TIMEx_CommutCallback>
 800a64e:	e769      	b.n	800a524 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a650:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a654:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a656:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a658:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a65a:	f000 f917 	bl	800a88c <HAL_TIMEx_EncoderIndexCallback>
 800a65e:	e766      	b.n	800a52e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a660:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a664:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a666:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a668:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a66a:	f000 f911 	bl	800a890 <HAL_TIMEx_DirectionChangeCallback>
 800a66e:	e763      	b.n	800a538 <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a670:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a674:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_IndexErrorCallback(htim);
 800a676:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a678:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 800a67a:	f000 f90b 	bl	800a894 <HAL_TIMEx_IndexErrorCallback>
 800a67e:	e760      	b.n	800a542 <HAL_TIM_IRQHandler+0x6e>
          HAL_TIM_IC_CaptureCallback(htim);
 800a680:	f7ff ff22 	bl	800a4c8 <HAL_TIM_IC_CaptureCallback>
 800a684:	e7a9      	b.n	800a5da <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 800a686:	f7ff ff1f 	bl	800a4c8 <HAL_TIM_IC_CaptureCallback>
 800a68a:	e796      	b.n	800a5ba <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800a68c:	f7ff ff1c 	bl	800a4c8 <HAL_TIM_IC_CaptureCallback>
 800a690:	e780      	b.n	800a594 <HAL_TIM_IRQHandler+0xc0>
        HAL_TIM_IC_CaptureCallback(htim);
 800a692:	f7ff ff19 	bl	800a4c8 <HAL_TIM_IC_CaptureCallback>
 800a696:	e76a      	b.n	800a56e <HAL_TIM_IRQHandler+0x9a>

0800a698 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a698:	4a54      	ldr	r2, [pc, #336]	; (800a7ec <TIM_Base_SetConfig+0x154>)
{
 800a69a:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a69c:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 800a69e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a6a0:	d059      	beq.n	800a756 <TIM_Base_SetConfig+0xbe>
 800a6a2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a6a6:	4290      	cmp	r0, r2
 800a6a8:	d055      	beq.n	800a756 <TIM_Base_SetConfig+0xbe>
 800a6aa:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a6ae:	d070      	beq.n	800a792 <TIM_Base_SetConfig+0xfa>
 800a6b0:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 800a6b4:	d06d      	beq.n	800a792 <TIM_Base_SetConfig+0xfa>
 800a6b6:	4a4e      	ldr	r2, [pc, #312]	; (800a7f0 <TIM_Base_SetConfig+0x158>)
 800a6b8:	4290      	cmp	r0, r2
 800a6ba:	d06a      	beq.n	800a792 <TIM_Base_SetConfig+0xfa>
 800a6bc:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a6c0:	4290      	cmp	r0, r2
 800a6c2:	d066      	beq.n	800a792 <TIM_Base_SetConfig+0xfa>
 800a6c4:	4a4b      	ldr	r2, [pc, #300]	; (800a7f4 <TIM_Base_SetConfig+0x15c>)
 800a6c6:	4290      	cmp	r0, r2
 800a6c8:	d063      	beq.n	800a792 <TIM_Base_SetConfig+0xfa>
 800a6ca:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a6ce:	4290      	cmp	r0, r2
 800a6d0:	d05f      	beq.n	800a792 <TIM_Base_SetConfig+0xfa>
 800a6d2:	4a49      	ldr	r2, [pc, #292]	; (800a7f8 <TIM_Base_SetConfig+0x160>)
 800a6d4:	4290      	cmp	r0, r2
 800a6d6:	d05c      	beq.n	800a792 <TIM_Base_SetConfig+0xfa>
 800a6d8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a6dc:	4290      	cmp	r0, r2
 800a6de:	d058      	beq.n	800a792 <TIM_Base_SetConfig+0xfa>
 800a6e0:	4a46      	ldr	r2, [pc, #280]	; (800a7fc <TIM_Base_SetConfig+0x164>)
 800a6e2:	4290      	cmp	r0, r2
 800a6e4:	d067      	beq.n	800a7b6 <TIM_Base_SetConfig+0x11e>
 800a6e6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a6ea:	4290      	cmp	r0, r2
 800a6ec:	d063      	beq.n	800a7b6 <TIM_Base_SetConfig+0x11e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6ee:	4a44      	ldr	r2, [pc, #272]	; (800a800 <TIM_Base_SetConfig+0x168>)
 800a6f0:	4290      	cmp	r0, r2
 800a6f2:	d052      	beq.n	800a79a <TIM_Base_SetConfig+0x102>
 800a6f4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a6f8:	4290      	cmp	r0, r2
 800a6fa:	d04e      	beq.n	800a79a <TIM_Base_SetConfig+0x102>
 800a6fc:	4a41      	ldr	r2, [pc, #260]	; (800a804 <TIM_Base_SetConfig+0x16c>)
 800a6fe:	4290      	cmp	r0, r2
 800a700:	d04b      	beq.n	800a79a <TIM_Base_SetConfig+0x102>
 800a702:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a706:	4290      	cmp	r0, r2
 800a708:	d047      	beq.n	800a79a <TIM_Base_SetConfig+0x102>
 800a70a:	4a3f      	ldr	r2, [pc, #252]	; (800a808 <TIM_Base_SetConfig+0x170>)
 800a70c:	4290      	cmp	r0, r2
 800a70e:	d044      	beq.n	800a79a <TIM_Base_SetConfig+0x102>
 800a710:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a714:	4290      	cmp	r0, r2
 800a716:	d040      	beq.n	800a79a <TIM_Base_SetConfig+0x102>
 800a718:	4a3c      	ldr	r2, [pc, #240]	; (800a80c <TIM_Base_SetConfig+0x174>)
 800a71a:	4290      	cmp	r0, r2
 800a71c:	d050      	beq.n	800a7c0 <TIM_Base_SetConfig+0x128>
 800a71e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a722:	4290      	cmp	r0, r2
 800a724:	d052      	beq.n	800a7cc <TIM_Base_SetConfig+0x134>
 800a726:	4a3a      	ldr	r2, [pc, #232]	; (800a810 <TIM_Base_SetConfig+0x178>)
 800a728:	4290      	cmp	r0, r2
 800a72a:	d049      	beq.n	800a7c0 <TIM_Base_SetConfig+0x128>
 800a72c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a730:	4290      	cmp	r0, r2
 800a732:	d045      	beq.n	800a7c0 <TIM_Base_SetConfig+0x128>
 800a734:	4a37      	ldr	r2, [pc, #220]	; (800a814 <TIM_Base_SetConfig+0x17c>)
 800a736:	4290      	cmp	r0, r2
 800a738:	d042      	beq.n	800a7c0 <TIM_Base_SetConfig+0x128>
 800a73a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800a73e:	4290      	cmp	r0, r2
 800a740:	d03e      	beq.n	800a7c0 <TIM_Base_SetConfig+0x128>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a742:	694d      	ldr	r5, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a744:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a746:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a748:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a74c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800a74e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a750:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a752:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a754:	e012      	b.n	800a77c <TIM_Base_SetConfig+0xe4>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a756:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 800a758:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a75a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a75e:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 800a760:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a764:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a766:	694a      	ldr	r2, [r1, #20]
 800a768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a76c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a76e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a770:	688b      	ldr	r3, [r1, #8]
 800a772:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a774:	680b      	ldr	r3, [r1, #0]
 800a776:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a778:	690b      	ldr	r3, [r1, #16]
 800a77a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a77c:	2301      	movs	r3, #1
 800a77e:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a780:	6903      	ldr	r3, [r0, #16]
 800a782:	07db      	lsls	r3, r3, #31
 800a784:	d503      	bpl.n	800a78e <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a786:	6903      	ldr	r3, [r0, #16]
 800a788:	f023 0301 	bic.w	r3, r3, #1
 800a78c:	6103      	str	r3, [r0, #16]
  }
}
 800a78e:	bc30      	pop	{r4, r5}
 800a790:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800a792:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a794:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a798:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a79a:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a79c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7a0:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7a2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7a8:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7aa:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800a7ac:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800a7ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7b0:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a7b2:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7b4:	e7e2      	b.n	800a77c <TIM_Base_SetConfig+0xe4>
    tmpcr1 |= Structure->CounterMode;
 800a7b6:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7b8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800a7be:	e7ce      	b.n	800a75e <TIM_Base_SetConfig+0xc6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7c0:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7c6:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7c8:	4323      	orrs	r3, r4
 800a7ca:	e7cd      	b.n	800a768 <TIM_Base_SetConfig+0xd0>
 800a7cc:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7d2:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7d4:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7da:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800a7dc:	4a0e      	ldr	r2, [pc, #56]	; (800a818 <TIM_Base_SetConfig+0x180>)
 800a7de:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7e0:	688b      	ldr	r3, [r1, #8]
 800a7e2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800a7e4:	680b      	ldr	r3, [r1, #0]
 800a7e6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7e8:	e7c6      	b.n	800a778 <TIM_Base_SetConfig+0xe0>
 800a7ea:	bf00      	nop
 800a7ec:	40012c00 	.word	0x40012c00
 800a7f0:	40000400 	.word	0x40000400
 800a7f4:	40000800 	.word	0x40000800
 800a7f8:	40000c00 	.word	0x40000c00
 800a7fc:	40013400 	.word	0x40013400
 800a800:	40001800 	.word	0x40001800
 800a804:	40001c00 	.word	0x40001c00
 800a808:	40002000 	.word	0x40002000
 800a80c:	40014000 	.word	0x40014000
 800a810:	40014400 	.word	0x40014400
 800a814:	40014800 	.word	0x40014800
 800a818:	50014000 	.word	0x50014000

0800a81c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800a81c:	b370      	cbz	r0, 800a87c <HAL_TIM_Base_Init+0x60>
{
 800a81e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800a820:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800a824:	4604      	mov	r4, r0
 800a826:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a82a:	b313      	cbz	r3, 800a872 <HAL_TIM_Base_Init+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 800a82c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a82e:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800a830:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a834:	f851 0b04 	ldr.w	r0, [r1], #4
 800a838:	f7ff ff2e 	bl	800a698 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a83c:	2301      	movs	r3, #1
 800a83e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a842:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800a846:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800a84a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800a84e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800a852:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a856:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a85a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800a85e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a862:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800a866:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800a86a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800a86e:	2000      	movs	r0, #0
}
 800a870:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800a872:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800a876:	f7ff fdbd 	bl	800a3f4 <HAL_TIM_Base_MspInit>
 800a87a:	e7d7      	b.n	800a82c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 800a87c:	2001      	movs	r0, #1
}
 800a87e:	4770      	bx	lr

0800a880 <HAL_TIMEx_CommutCallback>:
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop

0800a884 <HAL_TIMEx_BreakCallback>:
 800a884:	4770      	bx	lr
 800a886:	bf00      	nop

0800a888 <HAL_TIMEx_Break2Callback>:
 800a888:	4770      	bx	lr
 800a88a:	bf00      	nop

0800a88c <HAL_TIMEx_EncoderIndexCallback>:
 800a88c:	4770      	bx	lr
 800a88e:	bf00      	nop

0800a890 <HAL_TIMEx_DirectionChangeCallback>:
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop

0800a894 <HAL_TIMEx_IndexErrorCallback>:
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop

0800a898 <HAL_TIMEx_TransitionErrorCallback>:
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop

0800a89c <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a89c:	4b26      	ldr	r3, [pc, #152]	; (800a938 <HAL_InitTick+0x9c>)
{
 800a89e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a8a0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
{
 800a8a4:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a8a6:	f042 0210 	orr.w	r2, r2, #16
 800a8aa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800a8ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
{
 800a8b2:	4604      	mov	r4, r0
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	9301      	str	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a8ba:	4669      	mov	r1, sp
 800a8bc:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a8be:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a8c0:	f7fb fc6e 	bl	80061a0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a8c4:	9b05      	ldr	r3, [sp, #20]
 800a8c6:	b9e3      	cbnz	r3, 800a902 <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a8c8:	f7fb fc0a 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 800a8cc:	4603      	mov	r3, r0
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800a8ce:	2200      	movs	r2, #0
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800a8d0:	2163      	movs	r1, #99	; 0x63
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800a8d2:	481a      	ldr	r0, [pc, #104]	; (800a93c <HAL_InitTick+0xa0>)
 800a8d4:	095b      	lsrs	r3, r3, #5
 800a8d6:	fba0 0303 	umull	r0, r3, r0, r3
  htim6.Instance = TIM6;
 800a8da:	4d19      	ldr	r5, [pc, #100]	; (800a940 <HAL_InitTick+0xa4>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800a8dc:	09db      	lsrs	r3, r3, #7
 800a8de:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800a8e0:	606b      	str	r3, [r5, #4]
  htim6.Instance = TIM6;
 800a8e2:	4b18      	ldr	r3, [pc, #96]	; (800a944 <HAL_InitTick+0xa8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim6);
 800a8e4:	4628      	mov	r0, r5
  htim6.Init.ClockDivision = 0;
 800a8e6:	e9c5 1203 	strd	r1, r2, [r5, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a8ea:	60aa      	str	r2, [r5, #8]
  htim6.Instance = TIM6;
 800a8ec:	602b      	str	r3, [r5, #0]
  status = HAL_TIM_Base_Init(&htim6);
 800a8ee:	f7ff ff95 	bl	800a81c <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	b148      	cbz	r0, 800a90a <HAL_InitTick+0x6e>
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800a8f6:	2031      	movs	r0, #49	; 0x31
 800a8f8:	f7fa f884 	bl	8004a04 <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
}
 800a8fc:	4630      	mov	r0, r6
 800a8fe:	b008      	add	sp, #32
 800a900:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a902:	f7fb fbed 	bl	80060e0 <HAL_RCC_GetPCLK1Freq>
 800a906:	0043      	lsls	r3, r0, #1
 800a908:	e7e1      	b.n	800a8ce <HAL_InitTick+0x32>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800a90a:	4628      	mov	r0, r5
 800a90c:	f7ff fd74 	bl	800a3f8 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800a910:	4606      	mov	r6, r0
 800a912:	2800      	cmp	r0, #0
 800a914:	d1ef      	bne.n	800a8f6 <HAL_InitTick+0x5a>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a916:	2c0f      	cmp	r4, #15
 800a918:	d906      	bls.n	800a928 <HAL_InitTick+0x8c>
        status = HAL_ERROR;
 800a91a:	2601      	movs	r6, #1
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800a91c:	2031      	movs	r0, #49	; 0x31
 800a91e:	f7fa f871 	bl	8004a04 <HAL_NVIC_EnableIRQ>
}
 800a922:	4630      	mov	r0, r6
 800a924:	b008      	add	sp, #32
 800a926:	bd70      	pop	{r4, r5, r6, pc}
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800a928:	4602      	mov	r2, r0
 800a92a:	4621      	mov	r1, r4
 800a92c:	2031      	movs	r0, #49	; 0x31
 800a92e:	f7fa f82b 	bl	8004988 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a932:	4b05      	ldr	r3, [pc, #20]	; (800a948 <HAL_InitTick+0xac>)
 800a934:	601c      	str	r4, [r3, #0]
 800a936:	e7de      	b.n	800a8f6 <HAL_InitTick+0x5a>
 800a938:	44020c00 	.word	0x44020c00
 800a93c:	0a7c5ac5 	.word	0x0a7c5ac5
 800a940:	2000600c 	.word	0x2000600c
 800a944:	40001000 	.word	0x40001000
 800a948:	200001e0 	.word	0x200001e0

0800a94c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a94c:	b410      	push	{r4}
 800a94e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a950:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a958:	e842 3100 	strex	r1, r3, [r2]
 800a95c:	2900      	cmp	r1, #0
 800a95e:	d1f7      	bne.n	800a950 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a960:	4c14      	ldr	r4, [pc, #80]	; (800a9b4 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a962:	f102 0308 	add.w	r3, r2, #8
 800a966:	e853 3f00 	ldrex	r3, [r3]
 800a96a:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96c:	f102 0c08 	add.w	ip, r2, #8
 800a970:	e84c 3100 	strex	r1, r3, [ip]
 800a974:	2900      	cmp	r1, #0
 800a976:	d1f4      	bne.n	800a962 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a978:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d008      	beq.n	800a990 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a980:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 800a982:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 800a986:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxISR = NULL;
 800a98a:	6743      	str	r3, [r0, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a98c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800a98e:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a994:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a998:	e842 3100 	strex	r1, r3, [r2]
 800a99c:	2900      	cmp	r1, #0
 800a99e:	d0ee      	beq.n	800a97e <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	e852 3f00 	ldrex	r3, [r2]
 800a9a4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	e842 3100 	strex	r1, r3, [r2]
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	d1ef      	bne.n	800a990 <UART_EndRxTransfer+0x44>
 800a9b0:	e7e5      	b.n	800a97e <UART_EndRxTransfer+0x32>
 800a9b2:	bf00      	nop
 800a9b4:	effffffe 	.word	0xeffffffe

0800a9b8 <HAL_UART_DeInit>:
  if (huart == NULL)
 800a9b8:	b1d8      	cbz	r0, 800a9f2 <HAL_UART_DeInit+0x3a>
  huart->gState = HAL_UART_STATE_BUSY;
 800a9ba:	2224      	movs	r2, #36	; 0x24
{
 800a9bc:	b538      	push	{r3, r4, r5, lr}
  huart->Instance->CR1 = 0x0U;
 800a9be:	2500      	movs	r5, #0
 800a9c0:	4604      	mov	r4, r0
  __HAL_UART_DISABLE(huart);
 800a9c2:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a9c4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	f022 0201 	bic.w	r2, r2, #1
 800a9ce:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800a9d0:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800a9d2:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800a9d4:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800a9d6:	f7f7 f8a9 	bl	8001b2c <HAL_UART_MspDeInit>
  __HAL_UNLOCK(huart);
 800a9da:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9de:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  return HAL_OK;
 800a9e2:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 800a9e4:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800a9e8:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ec:	66e5      	str	r5, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9ee:	6725      	str	r5, [r4, #112]	; 0x70
}
 800a9f0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a9f2:	2001      	movs	r0, #1
}
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop

0800a9f8 <HAL_UART_Transmit_DMA>:
{
 800a9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800a9fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a9fe:	2b20      	cmp	r3, #32
 800aa00:	d13d      	bne.n	800aa7e <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 800aa02:	2900      	cmp	r1, #0
 800aa04:	d039      	beq.n	800aa7a <HAL_UART_Transmit_DMA+0x82>
 800aa06:	2a00      	cmp	r2, #0
 800aa08:	d037      	beq.n	800aa7a <HAL_UART_Transmit_DMA+0x82>
    huart->pTxBuffPtr  = pData;
 800aa0a:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0c:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa0e:	2721      	movs	r7, #33	; 0x21
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa10:	2640      	movs	r6, #64	; 0x40
 800aa12:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 800aa14:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 800aa18:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800aa1a:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (huart->hdmatx != NULL)
 800aa1e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa20:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa24:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aa28:	622e      	str	r6, [r5, #32]
    if (huart->hdmatx != NULL)
 800aa2a:	b1c8      	cbz	r0, 800aa60 <HAL_UART_Transmit_DMA+0x68>
      huart->hdmatx->XferAbortCallback = NULL;
 800aa2c:	66c3      	str	r3, [r0, #108]	; 0x6c
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa2e:	4b1f      	ldr	r3, [pc, #124]	; (800aaac <HAL_UART_Transmit_DMA+0xb4>)
 800aa30:	6603      	str	r3, [r0, #96]	; 0x60
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa32:	4b1f      	ldr	r3, [pc, #124]	; (800aab0 <HAL_UART_Transmit_DMA+0xb8>)
 800aa34:	6643      	str	r3, [r0, #100]	; 0x64
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa36:	4b1f      	ldr	r3, [pc, #124]	; (800aab4 <HAL_UART_Transmit_DMA+0xbc>)
 800aa38:	6683      	str	r3, [r0, #104]	; 0x68
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa40:	d01f      	beq.n	800aa82 <HAL_UART_Transmit_DMA+0x8a>
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800aa42:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800aa44:	061b      	lsls	r3, r3, #24
 800aa46:	d522      	bpl.n	800aa8e <HAL_UART_Transmit_DMA+0x96>
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800aa48:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800aa4a:	b33b      	cbz	r3, 800aa9c <HAL_UART_Transmit_DMA+0xa4>
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	b32b      	cbz	r3, 800aa9c <HAL_UART_Transmit_DMA+0xa4>
            (uint32_t)&huart->Instance->TDR;
 800aa50:	3528      	adds	r5, #40	; 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800aa52:	e9c3 1503 	strd	r1, r5, [r3, #12]
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800aa56:	609a      	str	r2, [r3, #8]
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800aa58:	f7fa fc50 	bl	80052fc <HAL_DMAEx_List_Start_IT>
      if (status != HAL_OK)
 800aa5c:	b9f0      	cbnz	r0, 800aa9c <HAL_UART_Transmit_DMA+0xa4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aa5e:	6825      	ldr	r5, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	f105 0308 	add.w	r3, r5, #8
 800aa64:	e853 3f00 	ldrex	r3, [r3]
 800aa68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa6c:	f105 0208 	add.w	r2, r5, #8
 800aa70:	e842 3000 	strex	r0, r3, [r2]
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d1f3      	bne.n	800aa60 <HAL_UART_Transmit_DMA+0x68>
}
 800aa78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800aa7a:	2001      	movs	r0, #1
}
 800aa7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800aa7e:	2002      	movs	r0, #2
}
 800aa80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa82:	6923      	ldr	r3, [r4, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d1dc      	bne.n	800aa42 <HAL_UART_Transmit_DMA+0x4a>
        nbByte = Size * 2U;
 800aa88:	0052      	lsls	r2, r2, #1
 800aa8a:	b292      	uxth	r2, r2
 800aa8c:	e7d9      	b.n	800aa42 <HAL_UART_Transmit_DMA+0x4a>
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800aa8e:	4613      	mov	r3, r2
 800aa90:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800aa94:	f7fa fa9e 	bl	8004fd4 <HAL_DMA_Start_IT>
      if (status != HAL_OK)
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d0e0      	beq.n	800aa5e <HAL_UART_Transmit_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aa9c:	2210      	movs	r2, #16
        huart->gState = HAL_UART_STATE_READY;
 800aa9e:	2320      	movs	r3, #32
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aaa0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        return HAL_ERROR;
 800aaa4:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 800aaa6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800aaaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaac:	0800aab9 	.word	0x0800aab9
 800aab0:	0800aae9 	.word	0x0800aae9
 800aab4:	0800aaf9 	.word	0x0800aaf9

0800aab8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aab8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800aaba:	6d03      	ldr	r3, [r0, #80]	; 0x50
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aabc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800aabe:	2b81      	cmp	r3, #129	; 0x81
 800aac0:	d00c      	beq.n	800aadc <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 800aac2:	2300      	movs	r3, #0
 800aac4:	6802      	ldr	r2, [r0, #0]
 800aac6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaca:	e852 3f00 	ldrex	r3, [r2]
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	e842 3100 	strex	r1, r3, [r2]
 800aad6:	2900      	cmp	r1, #0
 800aad8:	d1f7      	bne.n	800aaca <UART_DMATransmitCplt+0x12>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aada:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800aadc:	f7f7 f866 	bl	8001bac <HAL_UART_TxCpltCallback>
}
 800aae0:	bd08      	pop	{r3, pc}
 800aae2:	bf00      	nop

0800aae4 <HAL_UART_TxHalfCpltCallback>:
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop

0800aae8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800aae8:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800aaea:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800aaec:	f7ff fffa 	bl	800aae4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaf0:	bd08      	pop	{r3, pc}
 800aaf2:	bf00      	nop

0800aaf4 <HAL_UART_RxHalfCpltCallback>:
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop

0800aaf8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aaf8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
{
 800aafa:	b510      	push	{r4, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aafc:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aafe:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ab02:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ab06:	689a      	ldr	r2, [r3, #8]
 800ab08:	0612      	lsls	r2, r2, #24
 800ab0a:	d501      	bpl.n	800ab10 <UART_DMAError+0x18>
 800ab0c:	2921      	cmp	r1, #33	; 0x21
 800ab0e:	d013      	beq.n	800ab38 <UART_DMAError+0x40>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	065b      	lsls	r3, r3, #25
 800ab14:	d501      	bpl.n	800ab1a <UART_DMAError+0x22>
 800ab16:	2c22      	cmp	r4, #34	; 0x22
 800ab18:	d008      	beq.n	800ab2c <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ab1a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800ab1e:	f043 0310 	orr.w	r3, r3, #16
 800ab22:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab26:	f7f7 f8b1 	bl	8001c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab2a:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800ab32:	f7ff ff0b 	bl	800a94c <UART_EndRxTransfer>
 800ab36:	e7f0      	b.n	800ab1a <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab3e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ab42:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	e843 2100 	strex	r1, r2, [r3]
 800ab4a:	2900      	cmp	r1, #0
 800ab4c:	d1f7      	bne.n	800ab3e <UART_DMAError+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab4e:	f103 0208 	add.w	r2, r3, #8
 800ab52:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ab56:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab5a:	f103 0c08 	add.w	ip, r3, #8
 800ab5e:	e84c 2100 	strex	r1, r2, [ip]
 800ab62:	2900      	cmp	r1, #0
 800ab64:	d1f3      	bne.n	800ab4e <UART_DMAError+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800ab66:	2220      	movs	r2, #32
 800ab68:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 800ab6c:	e7d0      	b.n	800ab10 <UART_DMAError+0x18>
 800ab6e:	bf00      	nop

0800ab70 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ab70:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800ab72:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ab74:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  huart->RxXferCount = 0U;
 800ab76:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ab7a:	f7f7 f887 	bl	8001c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ab7e:	bd08      	pop	{r3, pc}

0800ab80 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ab80:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab84:	6803      	ldr	r3, [r0, #0]
{
 800ab86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab8a:	69da      	ldr	r2, [r3, #28]
{
 800ab8c:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800ab8e:	ea12 0f0c 	tst.w	r2, ip
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ab92:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ab94:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800ab96:	f000 80d8 	beq.w	800ad4a <HAL_UART_IRQHandler+0x1ca>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab9a:	4eae      	ldr	r6, [pc, #696]	; (800ae54 <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ab9c:	48ae      	ldr	r0, [pc, #696]	; (800ae58 <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800ab9e:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aba2:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aba4:	ea5c 0600 	orrs.w	r6, ip, r0
 800aba8:	d16b      	bne.n	800ac82 <HAL_UART_IRQHandler+0x102>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abaa:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800abac:	2801      	cmp	r0, #1
 800abae:	d01e      	beq.n	800abee <HAL_UART_IRQHandler+0x6e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800abb0:	02d7      	lsls	r7, r2, #11
 800abb2:	d502      	bpl.n	800abba <HAL_UART_IRQHandler+0x3a>
 800abb4:	024e      	lsls	r6, r1, #9
 800abb6:	f100 80fe 	bmi.w	800adb6 <HAL_UART_IRQHandler+0x236>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800abba:	0610      	lsls	r0, r2, #24
 800abbc:	d506      	bpl.n	800abcc <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800abbe:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800abc2:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800abc6:	4301      	orrs	r1, r0
 800abc8:	f040 80ed 	bne.w	800ada6 <HAL_UART_IRQHandler+0x226>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800abcc:	0657      	lsls	r7, r2, #25
 800abce:	d502      	bpl.n	800abd6 <HAL_UART_IRQHandler+0x56>
 800abd0:	066e      	lsls	r6, r5, #25
 800abd2:	f100 80cb 	bmi.w	800ad6c <HAL_UART_IRQHandler+0x1ec>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800abd6:	0210      	lsls	r0, r2, #8
 800abd8:	d502      	bpl.n	800abe0 <HAL_UART_IRQHandler+0x60>
 800abda:	0069      	lsls	r1, r5, #1
 800abdc:	f100 80f7 	bmi.w	800adce <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800abe0:	01d3      	lsls	r3, r2, #7
 800abe2:	d502      	bpl.n	800abea <HAL_UART_IRQHandler+0x6a>
 800abe4:	2d00      	cmp	r5, #0
 800abe6:	f2c0 813d 	blt.w	800ae64 <HAL_UART_IRQHandler+0x2e4>
}
 800abea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800abee:	06d6      	lsls	r6, r2, #27
 800abf0:	d5de      	bpl.n	800abb0 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800abf2:	06e8      	lsls	r0, r5, #27
 800abf4:	d5dc      	bpl.n	800abb0 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abf6:	2210      	movs	r2, #16
 800abf8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abfa:	689a      	ldr	r2, [r3, #8]
 800abfc:	0652      	lsls	r2, r2, #25
 800abfe:	f140 80f2 	bpl.w	800ade6 <HAL_UART_IRQHandler+0x266>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac02:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ac06:	6802      	ldr	r2, [r0, #0]
 800ac08:	6c91      	ldr	r1, [r2, #72]	; 0x48
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac0a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac0e:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800ac10:	2900      	cmp	r1, #0
 800ac12:	f000 8131 	beq.w	800ae78 <HAL_UART_IRQHandler+0x2f8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac16:	428a      	cmp	r2, r1
 800ac18:	f240 812e 	bls.w	800ae78 <HAL_UART_IRQHandler+0x2f8>
        huart->RxXferCount = nb_remaining_rx_data;
 800ac1c:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800ac20:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800ac22:	2981      	cmp	r1, #129	; 0x81
 800ac24:	d023      	beq.n	800ac6e <HAL_UART_IRQHandler+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac26:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2e:	e843 2100 	strex	r1, r2, [r3]
 800ac32:	2900      	cmp	r1, #0
 800ac34:	d1f7      	bne.n	800ac26 <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac36:	f103 0208 	add.w	r2, r3, #8
 800ac3a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac3e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac42:	f103 0508 	add.w	r5, r3, #8
 800ac46:	e845 2100 	strex	r1, r2, [r5]
 800ac4a:	2900      	cmp	r1, #0
 800ac4c:	d1f3      	bne.n	800ac36 <HAL_UART_IRQHandler+0xb6>
          huart->RxState = HAL_UART_STATE_READY;
 800ac4e:	2220      	movs	r2, #32
 800ac50:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac54:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac5a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	e843 2100 	strex	r1, r2, [r3]
 800ac62:	2900      	cmp	r1, #0
 800ac64:	d1f7      	bne.n	800ac56 <HAL_UART_IRQHandler+0xd6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ac66:	f7fa f9fd 	bl	8005064 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac6a:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ac6e:	2302      	movs	r3, #2
 800ac70:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ac72:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800ac76:	4620      	mov	r0, r4
 800ac78:	1ad2      	subs	r2, r2, r3
 800ac7a:	b291      	uxth	r1, r2
 800ac7c:	f7f6 ffcc 	bl	8001c18 <HAL_UARTEx_RxEventCallback>
 800ac80:	e7b3      	b.n	800abea <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac82:	07d6      	lsls	r6, r2, #31
 800ac84:	461f      	mov	r7, r3
 800ac86:	d509      	bpl.n	800ac9c <HAL_UART_IRQHandler+0x11c>
 800ac88:	05ee      	lsls	r6, r5, #23
 800ac8a:	d507      	bpl.n	800ac9c <HAL_UART_IRQHandler+0x11c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac8c:	2601      	movs	r6, #1
 800ac8e:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac90:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800ac94:	f046 0601 	orr.w	r6, r6, #1
 800ac98:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac9c:	0796      	lsls	r6, r2, #30
 800ac9e:	d575      	bpl.n	800ad8c <HAL_UART_IRQHandler+0x20c>
 800aca0:	07ce      	lsls	r6, r1, #31
 800aca2:	d509      	bpl.n	800acb8 <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aca4:	2602      	movs	r6, #2
 800aca6:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aca8:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800acac:	f046 0604 	orr.w	r6, r6, #4
 800acb0:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acb4:	0756      	lsls	r6, r2, #29
 800acb6:	d46d      	bmi.n	800ad94 <HAL_UART_IRQHandler+0x214>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800acb8:	0716      	lsls	r6, r2, #28
 800acba:	d50b      	bpl.n	800acd4 <HAL_UART_IRQHandler+0x154>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800acbc:	f005 0620 	and.w	r6, r5, #32
 800acc0:	4330      	orrs	r0, r6
 800acc2:	d007      	beq.n	800acd4 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800acc4:	2008      	movs	r0, #8
 800acc6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800acc8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800accc:	f040 0008 	orr.w	r0, r0, #8
 800acd0:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800acd4:	0516      	lsls	r6, r2, #20
 800acd6:	d50a      	bpl.n	800acee <HAL_UART_IRQHandler+0x16e>
 800acd8:	0168      	lsls	r0, r5, #5
 800acda:	d508      	bpl.n	800acee <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acdc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ace0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ace2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800ace6:	f043 0320 	orr.w	r3, r3, #32
 800acea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f43f af79 	beq.w	800abea <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800acf8:	0693      	lsls	r3, r2, #26
 800acfa:	d506      	bpl.n	800ad0a <HAL_UART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800acfc:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad00:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800ad04:	ea55 0301 	orrs.w	r3, r5, r1
 800ad08:	d166      	bne.n	800add8 <HAL_UART_IRQHandler+0x258>
      errorcode = huart->ErrorCode;
 800ad0a:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad0e:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ad10:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad18:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 800ad1a:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad1c:	f000 80a7 	beq.w	800ae6e <HAL_UART_IRQHandler+0x2ee>
        UART_EndRxTransfer(huart);
 800ad20:	f7ff fe14 	bl	800a94c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	689b      	ldr	r3, [r3, #8]
 800ad28:	065f      	lsls	r7, r3, #25
 800ad2a:	d54c      	bpl.n	800adc6 <HAL_UART_IRQHandler+0x246>
          if (huart->hdmarx != NULL)
 800ad2c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d048      	beq.n	800adc6 <HAL_UART_IRQHandler+0x246>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad34:	4b49      	ldr	r3, [pc, #292]	; (800ae5c <HAL_UART_IRQHandler+0x2dc>)
 800ad36:	66c3      	str	r3, [r0, #108]	; 0x6c
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad38:	f7fa f9e6 	bl	8005108 <HAL_DMA_Abort_IT>
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f43f af54 	beq.w	800abea <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad42:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800ad46:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800ad48:	e00d      	b.n	800ad66 <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ad4a:	0697      	lsls	r7, r2, #26
 800ad4c:	f57f af2d 	bpl.w	800abaa <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ad50:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ad54:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 800ad58:	433e      	orrs	r6, r7
 800ad5a:	f43f af26 	beq.w	800abaa <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800ad5e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f43f af42 	beq.w	800abea <HAL_UART_IRQHandler+0x6a>
}
 800ad66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad6a:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad74:	e843 2100 	strex	r1, r2, [r3]
 800ad78:	2900      	cmp	r1, #0
 800ad7a:	d1f7      	bne.n	800ad6c <HAL_UART_IRQHandler+0x1ec>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad7c:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad7e:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800ad80:	67a1      	str	r1, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800ad82:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_TxCpltCallback(huart);
 800ad86:	f7f6 ff11 	bl	8001bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad8a:	e72e      	b.n	800abea <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad8c:	0756      	lsls	r6, r2, #29
 800ad8e:	d593      	bpl.n	800acb8 <HAL_UART_IRQHandler+0x138>
 800ad90:	07ce      	lsls	r6, r1, #31
 800ad92:	d591      	bpl.n	800acb8 <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad94:	2604      	movs	r6, #4
 800ad96:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad98:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800ad9c:	f046 0602 	orr.w	r6, r6, #2
 800ada0:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800ada4:	e788      	b.n	800acb8 <HAL_UART_IRQHandler+0x138>
    if (huart->TxISR != NULL)
 800ada6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f43f af1e 	beq.w	800abea <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 800adae:	4620      	mov	r0, r4
}
 800adb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800adb4:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800adb6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800adba:	4620      	mov	r0, r4
}
 800adbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800adc0:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800adc2:	f000 bbbd 	b.w	800b540 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800adc6:	4620      	mov	r0, r4
 800adc8:	f7f6 ff60 	bl	8001c8c <HAL_UART_ErrorCallback>
 800adcc:	e70d      	b.n	800abea <HAL_UART_IRQHandler+0x6a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800adce:	4620      	mov	r0, r4
}
 800add0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800add4:	f000 bbb8 	b.w	800b548 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 800add8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800adda:	2b00      	cmp	r3, #0
 800addc:	d095      	beq.n	800ad0a <HAL_UART_IRQHandler+0x18a>
          huart->RxISR(huart);
 800adde:	4620      	mov	r0, r4
 800ade0:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ade2:	6827      	ldr	r7, [r4, #0]
 800ade4:	e791      	b.n	800ad0a <HAL_UART_IRQHandler+0x18a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ade6:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 800adea:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adee:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800adf0:	b292      	uxth	r2, r2
 800adf2:	2a00      	cmp	r2, #0
 800adf4:	f43f aef9 	beq.w	800abea <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adf8:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800adfc:	1a51      	subs	r1, r2, r1
 800adfe:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800ae00:	2900      	cmp	r1, #0
 800ae02:	f43f aef2 	beq.w	800abea <HAL_UART_IRQHandler+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae06:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae0e:	e843 2000 	strex	r0, r2, [r3]
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d1f7      	bne.n	800ae06 <HAL_UART_IRQHandler+0x286>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae16:	4d12      	ldr	r5, [pc, #72]	; (800ae60 <HAL_UART_IRQHandler+0x2e0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae18:	f103 0208 	add.w	r2, r3, #8
 800ae1c:	e852 2f00 	ldrex	r2, [r2]
 800ae20:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae22:	f103 0608 	add.w	r6, r3, #8
 800ae26:	e846 2000 	strex	r0, r2, [r6]
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	d1f4      	bne.n	800ae18 <HAL_UART_IRQHandler+0x298>
        huart->RxState = HAL_UART_STATE_READY;
 800ae2e:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800ae30:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ae32:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae36:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae38:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae3c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae40:	e843 2000 	strex	r0, r2, [r3]
 800ae44:	2800      	cmp	r0, #0
 800ae46:	d1f7      	bne.n	800ae38 <HAL_UART_IRQHandler+0x2b8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae48:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae4a:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae4c:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae4e:	f7f6 fee3 	bl	8001c18 <HAL_UARTEx_RxEventCallback>
 800ae52:	e6ca      	b.n	800abea <HAL_UART_IRQHandler+0x6a>
 800ae54:	04000120 	.word	0x04000120
 800ae58:	10000001 	.word	0x10000001
 800ae5c:	0800ab71 	.word	0x0800ab71
 800ae60:	effffffe 	.word	0xeffffffe
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae64:	4620      	mov	r0, r4
}
 800ae66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ae6a:	f000 bb6b 	b.w	800b544 <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800ae6e:	f7f6 ff0d 	bl	8001c8c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae72:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 800ae76:	e6b8      	b.n	800abea <HAL_UART_IRQHandler+0x6a>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ae78:	4291      	cmp	r1, r2
 800ae7a:	f47f aeb6 	bne.w	800abea <HAL_UART_IRQHandler+0x6a>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800ae7e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800ae80:	2b81      	cmp	r3, #129	; 0x81
 800ae82:	f47f aeb2 	bne.w	800abea <HAL_UART_IRQHandler+0x6a>
 800ae86:	e7df      	b.n	800ae48 <HAL_UART_IRQHandler+0x2c8>

0800ae88 <UART_DMARxHalfCplt>:
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ae88:	2201      	movs	r2, #1
{
 800ae8a:	b508      	push	{r3, lr}
 800ae8c:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae8e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800ae90:	6702      	str	r2, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae92:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800ae94:	2a01      	cmp	r2, #1
 800ae96:	d112      	bne.n	800aebe <UART_DMARxHalfCplt+0x36>
    huart->RxXferCount = huart->RxXferSize / 2U;
 800ae98:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800ae9c:	681b      	ldr	r3, [r3, #0]
    huart->RxXferCount = huart->RxXferSize / 2U;
 800ae9e:	084a      	lsrs	r2, r1, #1
 800aea0:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800aea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aea6:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data <= huart->RxXferSize)
 800aea8:	4299      	cmp	r1, r3
      huart->RxXferCount = nb_remaining_rx_data;
 800aeaa:	bf28      	it	cs
 800aeac:	f8a0 305e 	strhcs.w	r3, [r0, #94]	; 0x5e
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800aeb0:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800aeb4:	1ac9      	subs	r1, r1, r3
 800aeb6:	b289      	uxth	r1, r1
 800aeb8:	f7f6 feae 	bl	8001c18 <HAL_UARTEx_RxEventCallback>
}
 800aebc:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800aebe:	f7ff fe19 	bl	800aaf4 <HAL_UART_RxHalfCpltCallback>
}
 800aec2:	bd08      	pop	{r3, pc}

0800aec4 <UART_DMAReceiveCplt>:
{
 800aec4:	b508      	push	{r3, lr}
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800aec6:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 800aec8:	4684      	mov	ip, r0
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800aeca:	2b81      	cmp	r3, #129	; 0x81
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aecc:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800aece:	d01d      	beq.n	800af0c <UART_DMAReceiveCplt+0x48>
    huart->RxXferCount = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	6802      	ldr	r2, [r0, #0]
 800aed4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aed8:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aedc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aee0:	e842 3100 	strex	r1, r3, [r2]
 800aee4:	2900      	cmp	r1, #0
 800aee6:	d1f7      	bne.n	800aed8 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee8:	f102 0308 	add.w	r3, r2, #8
 800aeec:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aef0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef4:	f102 0e08 	add.w	lr, r2, #8
 800aef8:	e84e 3100 	strex	r1, r3, [lr]
 800aefc:	2900      	cmp	r1, #0
 800aefe:	d1f3      	bne.n	800aee8 <UART_DMAReceiveCplt+0x24>
    huart->RxState = HAL_UART_STATE_READY;
 800af00:	2320      	movs	r3, #32
 800af02:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af06:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d017      	beq.n	800af3c <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800af0c:	2300      	movs	r3, #0
 800af0e:	6703      	str	r3, [r0, #112]	; 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af10:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800af12:	2a01      	cmp	r2, #1
 800af14:	d123      	bne.n	800af5e <UART_DMAReceiveCplt+0x9a>
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800af16:	f8dc 2000 	ldr.w	r2, [ip]
    huart->RxXferCount = 0;
 800af1a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800af1e:	6c93      	ldr	r3, [r2, #72]	; 0x48
    if (nb_remaining_rx_data < huart->RxXferSize)
 800af20:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 800af24:	b29b      	uxth	r3, r3
    if (nb_remaining_rx_data < huart->RxXferSize)
 800af26:	4299      	cmp	r1, r3
      huart->RxXferCount = nb_remaining_rx_data;
 800af28:	bf88      	it	hi
 800af2a:	f8a0 305e 	strhhi.w	r3, [r0, #94]	; 0x5e
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800af2e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800af32:	1ac9      	subs	r1, r1, r3
 800af34:	b289      	uxth	r1, r1
 800af36:	f7f6 fe6f 	bl	8001c18 <HAL_UARTEx_RxEventCallback>
}
 800af3a:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af3c:	e852 3f00 	ldrex	r3, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af40:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af44:	e842 3100 	strex	r1, r3, [r2]
 800af48:	2900      	cmp	r1, #0
 800af4a:	d0df      	beq.n	800af0c <UART_DMAReceiveCplt+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af4c:	e852 3f00 	ldrex	r3, [r2]
 800af50:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af54:	e842 3100 	strex	r1, r3, [r2]
 800af58:	2900      	cmp	r1, #0
 800af5a:	d1ef      	bne.n	800af3c <UART_DMAReceiveCplt+0x78>
 800af5c:	e7d6      	b.n	800af0c <UART_DMAReceiveCplt+0x48>
    HAL_UART_RxCpltCallback(huart);
 800af5e:	f7f6 fe39 	bl	8001bd4 <HAL_UART_RxCpltCallback>
}
 800af62:	bd08      	pop	{r3, pc}

0800af64 <UART_SetConfig>:
{
 800af64:	b570      	push	{r4, r5, r6, lr}
 800af66:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800af68:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af6a:	69c5      	ldr	r5, [r0, #28]
 800af6c:	6882      	ldr	r2, [r0, #8]
 800af6e:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af70:	4987      	ldr	r1, [pc, #540]	; (800b190 <UART_SetConfig+0x22c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af72:	4302      	orrs	r2, r0
 800af74:	6960      	ldr	r0, [r4, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af76:	4e87      	ldr	r6, [pc, #540]	; (800b194 <UART_SetConfig+0x230>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af78:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af7a:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af7c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800af7e:	4001      	ands	r1, r0
 800af80:	430a      	orrs	r2, r1
 800af82:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af84:	685a      	ldr	r2, [r3, #4]
 800af86:	68e1      	ldr	r1, [r4, #12]
 800af88:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800af8c:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af8e:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800af90:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800af92:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800af94:	f000 80bb 	beq.w	800b10e <UART_SetConfig+0x1aa>
 800af98:	497f      	ldr	r1, [pc, #508]	; (800b198 <UART_SetConfig+0x234>)
 800af9a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800af9c:	6899      	ldr	r1, [r3, #8]
 800af9e:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800afa2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800afa6:	d02a      	beq.n	800affe <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 800afa8:	6a20      	ldr	r0, [r4, #32]
 800afaa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afac:	430a      	orrs	r2, r1
 800afae:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800afb4:	f022 020f 	bic.w	r2, r2, #15
 800afb8:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afba:	4978      	ldr	r1, [pc, #480]	; (800b19c <UART_SetConfig+0x238>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800afbc:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800afbe:	428b      	cmp	r3, r1
 800afc0:	d17a      	bne.n	800b0b8 <UART_SetConfig+0x154>
 800afc2:	2001      	movs	r0, #1
 800afc4:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800afc6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800afca:	d05d      	beq.n	800b088 <UART_SetConfig+0x124>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800afcc:	f7fd fb02 	bl	80085d4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d051      	beq.n	800b078 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800afd6:	4b72      	ldr	r3, [pc, #456]	; (800b1a0 <UART_SetConfig+0x23c>)
 800afd8:	6862      	ldr	r2, [r4, #4]
 800afda:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afde:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afe2:	fbb0 f3f3 	udiv	r3, r0, r3
 800afe6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800afea:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afee:	f1a3 0210 	sub.w	r2, r3, #16
 800aff2:	428a      	cmp	r2, r1
 800aff4:	d85e      	bhi.n	800b0b4 <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aff6:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800aff8:	2000      	movs	r0, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 800affa:	60d3      	str	r3, [r2, #12]
 800affc:	e03d      	b.n	800b07a <UART_SetConfig+0x116>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800affe:	430a      	orrs	r2, r1
 800b000:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b004:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b006:	f022 020f 	bic.w	r2, r2, #15
 800b00a:	430a      	orrs	r2, r1
 800b00c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (UART_INSTANCE_LOWPOWER(huart))
 800b00e:	4a62      	ldr	r2, [pc, #392]	; (800b198 <UART_SetConfig+0x234>)
 800b010:	2000      	movs	r0, #0
 800b012:	4293      	cmp	r3, r2
 800b014:	f04f 0100 	mov.w	r1, #0
 800b018:	d1d5      	bne.n	800afc6 <UART_SetConfig+0x62>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b01a:	f7fd fadb 	bl	80085d4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800b01e:	b358      	cbz	r0, 800b078 <UART_SetConfig+0x114>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b020:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b022:	4a5f      	ldr	r2, [pc, #380]	; (800b1a0 <UART_SetConfig+0x23c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b024:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b026:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b02a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b02e:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b032:	4299      	cmp	r1, r3
 800b034:	d83e      	bhi.n	800b0b4 <UART_SetConfig+0x150>
 800b036:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800b03a:	d83b      	bhi.n	800b0b4 <UART_SetConfig+0x150>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b03c:	2300      	movs	r3, #0
 800b03e:	4619      	mov	r1, r3
 800b040:	f7f5 fdf4 	bl	8000c2c <__aeabi_uldivmod>
 800b044:	4606      	mov	r6, r0
 800b046:	462a      	mov	r2, r5
 800b048:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800b04c:	0209      	lsls	r1, r1, #8
 800b04e:	0235      	lsls	r5, r6, #8
 800b050:	eb15 000c 	adds.w	r0, r5, ip
 800b054:	ea41 6116 	orr.w	r1, r1, r6, lsr #24
 800b058:	f04f 0300 	mov.w	r3, #0
 800b05c:	f141 0100 	adc.w	r1, r1, #0
 800b060:	f7f5 fde4 	bl	8000c2c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b064:	4a4f      	ldr	r2, [pc, #316]	; (800b1a4 <UART_SetConfig+0x240>)
 800b066:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800b06a:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b06c:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b06e:	d821      	bhi.n	800b0b4 <UART_SetConfig+0x150>
          huart->Instance->BRR = usartdiv;
 800b070:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b072:	2000      	movs	r0, #0
          huart->Instance->BRR = usartdiv;
 800b074:	60d3      	str	r3, [r2, #12]
 800b076:	e000      	b.n	800b07a <UART_SetConfig+0x116>
  HAL_StatusTypeDef ret               = HAL_OK;
 800b078:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800b07a:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800b07c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800b080:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800b082:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800b084:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800b086:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800b088:	f7fd faa4 	bl	80085d4 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800b08c:	2800      	cmp	r0, #0
 800b08e:	d0f3      	beq.n	800b078 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b090:	4b43      	ldr	r3, [pc, #268]	; (800b1a0 <UART_SetConfig+0x23c>)
 800b092:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b094:	6862      	ldr	r2, [r4, #4]
 800b096:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800b09a:	0853      	lsrs	r3, r2, #1
 800b09c:	fbb0 f0f1 	udiv	r0, r0, r1
 800b0a0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800b0a4:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b0a8:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800b0ac:	f1a0 0310 	sub.w	r3, r0, #16
 800b0b0:	428b      	cmp	r3, r1
 800b0b2:	d94c      	bls.n	800b14e <UART_SetConfig+0x1ea>
        ret = HAL_ERROR;
 800b0b4:	2001      	movs	r0, #1
 800b0b6:	e7e0      	b.n	800b07a <UART_SetConfig+0x116>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b0b8:	4a3b      	ldr	r2, [pc, #236]	; (800b1a8 <UART_SetConfig+0x244>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d038      	beq.n	800b130 <UART_SetConfig+0x1cc>
 800b0be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d03a      	beq.n	800b13c <UART_SetConfig+0x1d8>
 800b0c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d039      	beq.n	800b142 <UART_SetConfig+0x1de>
 800b0ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d02f      	beq.n	800b136 <UART_SetConfig+0x1d2>
 800b0d6:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d034      	beq.n	800b148 <UART_SetConfig+0x1e4>
 800b0de:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d040      	beq.n	800b168 <UART_SetConfig+0x204>
 800b0e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d039      	beq.n	800b162 <UART_SetConfig+0x1fe>
 800b0ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d03b      	beq.n	800b16e <UART_SetConfig+0x20a>
 800b0f6:	f5a2 52c0 	sub.w	r2, r2, #6144	; 0x1800
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d03b      	beq.n	800b176 <UART_SetConfig+0x212>
 800b0fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b102:	4293      	cmp	r3, r2
 800b104:	d13b      	bne.n	800b17e <UART_SetConfig+0x21a>
 800b106:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800b10a:	2100      	movs	r1, #0
 800b10c:	e75b      	b.n	800afc6 <UART_SetConfig+0x62>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b10e:	6899      	ldr	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b110:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b114:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800b118:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800b11c:	430a      	orrs	r2, r1
 800b11e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b122:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b124:	f022 020f 	bic.w	r2, r2, #15
 800b128:	430a      	orrs	r2, r1
 800b12a:	62da      	str	r2, [r3, #44]	; 0x2c
 800b12c:	2100      	movs	r1, #0
 800b12e:	e774      	b.n	800b01a <UART_SetConfig+0xb6>
 800b130:	2002      	movs	r0, #2
 800b132:	2100      	movs	r1, #0
 800b134:	e747      	b.n	800afc6 <UART_SetConfig+0x62>
 800b136:	2010      	movs	r0, #16
 800b138:	2100      	movs	r1, #0
 800b13a:	e744      	b.n	800afc6 <UART_SetConfig+0x62>
 800b13c:	2004      	movs	r0, #4
 800b13e:	2100      	movs	r1, #0
 800b140:	e741      	b.n	800afc6 <UART_SetConfig+0x62>
 800b142:	2008      	movs	r0, #8
 800b144:	2100      	movs	r1, #0
 800b146:	e73e      	b.n	800afc6 <UART_SetConfig+0x62>
 800b148:	2020      	movs	r0, #32
 800b14a:	2100      	movs	r1, #0
 800b14c:	e73b      	b.n	800afc6 <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b14e:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800b152:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b154:	f3c0 0042 	ubfx	r0, r0, #1, #3
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b158:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800b15a:	4303      	orrs	r3, r0
 800b15c:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b15e:	2000      	movs	r0, #0
 800b160:	e78b      	b.n	800b07a <UART_SetConfig+0x116>
 800b162:	2080      	movs	r0, #128	; 0x80
 800b164:	2100      	movs	r1, #0
 800b166:	e72e      	b.n	800afc6 <UART_SetConfig+0x62>
 800b168:	2040      	movs	r0, #64	; 0x40
 800b16a:	2100      	movs	r1, #0
 800b16c:	e72b      	b.n	800afc6 <UART_SetConfig+0x62>
 800b16e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b172:	2100      	movs	r1, #0
 800b174:	e727      	b.n	800afc6 <UART_SetConfig+0x62>
 800b176:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b17a:	2100      	movs	r1, #0
 800b17c:	e723      	b.n	800afc6 <UART_SetConfig+0x62>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b17e:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 800b182:	4293      	cmp	r3, r2
 800b184:	f47f af43 	bne.w	800b00e <UART_SetConfig+0xaa>
 800b188:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b18c:	2100      	movs	r1, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 800b18e:	e71a      	b.n	800afc6 <UART_SetConfig+0x62>
 800b190:	cfff69f3 	.word	0xcfff69f3
 800b194:	44002400 	.word	0x44002400
 800b198:	54002400 	.word	0x54002400
 800b19c:	40013800 	.word	0x40013800
 800b1a0:	08013c28 	.word	0x08013c28
 800b1a4:	000ffcff 	.word	0x000ffcff
 800b1a8:	40004400 	.word	0x40004400

0800b1ac <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800b1ae:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b1b0:	071a      	lsls	r2, r3, #28
 800b1b2:	d506      	bpl.n	800b1c2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b1b4:	6801      	ldr	r1, [r0, #0]
 800b1b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800b1b8:	684a      	ldr	r2, [r1, #4]
 800b1ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1be:	4322      	orrs	r2, r4
 800b1c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b1c2:	07dc      	lsls	r4, r3, #31
 800b1c4:	d506      	bpl.n	800b1d4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b1c6:	6801      	ldr	r1, [r0, #0]
 800b1c8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800b1ca:	684a      	ldr	r2, [r1, #4]
 800b1cc:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800b1d0:	4322      	orrs	r2, r4
 800b1d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b1d4:	0799      	lsls	r1, r3, #30
 800b1d6:	d506      	bpl.n	800b1e6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b1d8:	6801      	ldr	r1, [r0, #0]
 800b1da:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800b1dc:	684a      	ldr	r2, [r1, #4]
 800b1de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b1e2:	4322      	orrs	r2, r4
 800b1e4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b1e6:	075a      	lsls	r2, r3, #29
 800b1e8:	d506      	bpl.n	800b1f8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b1ea:	6801      	ldr	r1, [r0, #0]
 800b1ec:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800b1ee:	684a      	ldr	r2, [r1, #4]
 800b1f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b1f4:	4322      	orrs	r2, r4
 800b1f6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b1f8:	06dc      	lsls	r4, r3, #27
 800b1fa:	d506      	bpl.n	800b20a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b1fc:	6801      	ldr	r1, [r0, #0]
 800b1fe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800b200:	688a      	ldr	r2, [r1, #8]
 800b202:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b206:	4322      	orrs	r2, r4
 800b208:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b20a:	0699      	lsls	r1, r3, #26
 800b20c:	d506      	bpl.n	800b21c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b20e:	6801      	ldr	r1, [r0, #0]
 800b210:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800b212:	688a      	ldr	r2, [r1, #8]
 800b214:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b218:	4322      	orrs	r2, r4
 800b21a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b21c:	065a      	lsls	r2, r3, #25
 800b21e:	d50a      	bpl.n	800b236 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b220:	6801      	ldr	r1, [r0, #0]
 800b222:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800b224:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b226:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b22a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800b22e:	ea42 0204 	orr.w	r2, r2, r4
 800b232:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b234:	d00b      	beq.n	800b24e <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b236:	061b      	lsls	r3, r3, #24
 800b238:	d506      	bpl.n	800b248 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b23a:	6802      	ldr	r2, [r0, #0]
 800b23c:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800b23e:	6853      	ldr	r3, [r2, #4]
 800b240:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800b244:	430b      	orrs	r3, r1
 800b246:	6053      	str	r3, [r2, #4]
}
 800b248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b24c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b24e:	684a      	ldr	r2, [r1, #4]
 800b250:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800b252:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800b256:	4322      	orrs	r2, r4
 800b258:	604a      	str	r2, [r1, #4]
 800b25a:	e7ec      	b.n	800b236 <UART_AdvFeatureConfig+0x8a>

0800b25c <UART_WaitOnFlagUntilTimeout>:
{
 800b25c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b260:	9f08      	ldr	r7, [sp, #32]
 800b262:	460d      	mov	r5, r1
 800b264:	4680      	mov	r8, r0
 800b266:	4616      	mov	r6, r2
 800b268:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b26a:	6801      	ldr	r1, [r0, #0]
 800b26c:	e001      	b.n	800b272 <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800b26e:	1c78      	adds	r0, r7, #1
 800b270:	d10d      	bne.n	800b28e <UART_WaitOnFlagUntilTimeout+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b272:	69cc      	ldr	r4, [r1, #28]
 800b274:	ea35 0304 	bics.w	r3, r5, r4
 800b278:	bf0c      	ite	eq
 800b27a:	f04f 0c01 	moveq.w	ip, #1
 800b27e:	f04f 0c00 	movne.w	ip, #0
 800b282:	45b4      	cmp	ip, r6
 800b284:	d0f3      	beq.n	800b26e <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b28e:	f7f9 fb63 	bl	8004958 <HAL_GetTick>
 800b292:	eba0 0009 	sub.w	r0, r0, r9
 800b296:	42b8      	cmp	r0, r7
 800b298:	d81d      	bhi.n	800b2d6 <UART_WaitOnFlagUntilTimeout+0x7a>
 800b29a:	b1e7      	cbz	r7, 800b2d6 <UART_WaitOnFlagUntilTimeout+0x7a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b29c:	f8d8 1000 	ldr.w	r1, [r8]
 800b2a0:	680b      	ldr	r3, [r1, #0]
 800b2a2:	075a      	lsls	r2, r3, #29
 800b2a4:	d5e5      	bpl.n	800b272 <UART_WaitOnFlagUntilTimeout+0x16>
 800b2a6:	2d80      	cmp	r5, #128	; 0x80
 800b2a8:	d0e3      	beq.n	800b272 <UART_WaitOnFlagUntilTimeout+0x16>
 800b2aa:	2d40      	cmp	r5, #64	; 0x40
 800b2ac:	d0e1      	beq.n	800b272 <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b2ae:	69cc      	ldr	r4, [r1, #28]
 800b2b0:	f014 0408 	ands.w	r4, r4, #8
 800b2b4:	d111      	bne.n	800b2da <UART_WaitOnFlagUntilTimeout+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2b6:	69cb      	ldr	r3, [r1, #28]
 800b2b8:	051b      	lsls	r3, r3, #20
 800b2ba:	d5da      	bpl.n	800b272 <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
          UART_EndRxTransfer(huart);
 800b2c0:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2c2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800b2c4:	f7ff fb42 	bl	800a94c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2c8:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
          __HAL_UNLOCK(huart);
 800b2cc:	f888 4084 	strb.w	r4, [r8, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b2d0:	f8c8 2090 	str.w	r2, [r8, #144]	; 0x90
          return HAL_TIMEOUT;
 800b2d4:	e7d8      	b.n	800b288 <UART_WaitOnFlagUntilTimeout+0x2c>
        return HAL_TIMEOUT;
 800b2d6:	2303      	movs	r3, #3
 800b2d8:	e7d6      	b.n	800b288 <UART_WaitOnFlagUntilTimeout+0x2c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2da:	2408      	movs	r4, #8
          UART_EndRxTransfer(huart);
 800b2dc:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b2de:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 800b2e0:	f7ff fb34 	bl	800a94c <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800b2e4:	2200      	movs	r2, #0
          return HAL_ERROR;
 800b2e6:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b2e8:	f8c8 4090 	str.w	r4, [r8, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800b2ec:	f888 2084 	strb.w	r2, [r8, #132]	; 0x84
          return HAL_ERROR;
 800b2f0:	e7ca      	b.n	800b288 <UART_WaitOnFlagUntilTimeout+0x2c>
 800b2f2:	bf00      	nop

0800b2f4 <UART_CheckIdleState>:
{
 800b2f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f6:	2600      	movs	r6, #0
{
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	b083      	sub	sp, #12
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2fc:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800b300:	f7f9 fb2a 	bl	8004958 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b304:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800b306:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	0712      	lsls	r2, r2, #28
 800b30c:	d40f      	bmi.n	800b32e <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	075b      	lsls	r3, r3, #29
 800b312:	d428      	bmi.n	800b366 <UART_CheckIdleState+0x72>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b314:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b316:	2220      	movs	r2, #32
  return HAL_OK;
 800b318:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800b31a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800b31e:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b322:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b326:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b328:	6723      	str	r3, [r4, #112]	; 0x70
}
 800b32a:	b003      	add	sp, #12
 800b32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b32e:	f06f 477e 	mvn.w	r7, #4261412864	; 0xfe000000
 800b332:	4603      	mov	r3, r0
 800b334:	4632      	mov	r2, r6
 800b336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b33a:	4620      	mov	r0, r4
 800b33c:	9700      	str	r7, [sp, #0]
 800b33e:	f7ff ff8d 	bl	800b25c <UART_WaitOnFlagUntilTimeout>
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	2800      	cmp	r0, #0
 800b346:	d0e2      	beq.n	800b30e <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b348:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b34c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b350:	e843 2100 	strex	r1, r2, [r3]
 800b354:	2900      	cmp	r1, #0
 800b356:	d1f7      	bne.n	800b348 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 800b358:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800b35a:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800b35c:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800b360:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800b364:	e7e1      	b.n	800b32a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b366:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 800b36a:	462b      	mov	r3, r5
 800b36c:	2200      	movs	r2, #0
 800b36e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b372:	4620      	mov	r0, r4
 800b374:	9600      	str	r6, [sp, #0]
 800b376:	f7ff ff71 	bl	800b25c <UART_WaitOnFlagUntilTimeout>
 800b37a:	2800      	cmp	r0, #0
 800b37c:	d0ca      	beq.n	800b314 <UART_CheckIdleState+0x20>
 800b37e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b380:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b384:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b388:	e843 2100 	strex	r1, r2, [r3]
 800b38c:	2900      	cmp	r1, #0
 800b38e:	d1f7      	bne.n	800b380 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	f103 0208 	add.w	r2, r3, #8
 800b394:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b398:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b39c:	f103 0008 	add.w	r0, r3, #8
 800b3a0:	e840 2100 	strex	r1, r2, [r0]
 800b3a4:	2900      	cmp	r1, #0
 800b3a6:	d1f3      	bne.n	800b390 <UART_CheckIdleState+0x9c>
      huart->RxState = HAL_UART_STATE_READY;
 800b3a8:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800b3aa:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800b3ac:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800b3b0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 800b3b4:	e7b9      	b.n	800b32a <UART_CheckIdleState+0x36>
 800b3b6:	bf00      	nop

0800b3b8 <HAL_UART_Init>:
  if (huart == NULL)
 800b3b8:	b380      	cbz	r0, 800b41c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800b3ba:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800b3be:	b510      	push	{r4, lr}
 800b3c0:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800b3c2:	b333      	cbz	r3, 800b412 <HAL_UART_Init+0x5a>
  huart->gState = HAL_UART_STATE_BUSY;
 800b3c4:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800b3c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800b3c8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800b3cc:	6813      	ldr	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  __HAL_UART_DISABLE(huart);
 800b3d0:	f023 0301 	bic.w	r3, r3, #1
 800b3d4:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3d6:	b9c1      	cbnz	r1, 800b40a <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f7ff fdc3 	bl	800af64 <UART_SetConfig>
 800b3de:	2801      	cmp	r0, #1
 800b3e0:	d011      	beq.n	800b406 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3e2:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800b3e4:	4620      	mov	r0, r4
}
 800b3e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b3f2:	689a      	ldr	r2, [r3, #8]
 800b3f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b3f8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	f042 0201 	orr.w	r2, r2, #1
 800b400:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800b402:	f7ff bf77 	b.w	800b2f4 <UART_CheckIdleState>
}
 800b406:	2001      	movs	r0, #1
 800b408:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800b40a:	4620      	mov	r0, r4
 800b40c:	f7ff fece 	bl	800b1ac <UART_AdvFeatureConfig>
 800b410:	e7e2      	b.n	800b3d8 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800b412:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800b416:	f7f6 fa3b 	bl	8001890 <HAL_UART_MspInit>
 800b41a:	e7d3      	b.n	800b3c4 <HAL_UART_Init+0xc>
}
 800b41c:	2001      	movs	r0, #1
 800b41e:	4770      	bx	lr

0800b420 <UART_Start_Receive_DMA>:
{
 800b420:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b422:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b424:	2522      	movs	r5, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b426:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
{
 800b42a:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 800b42c:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize = Size;
 800b42e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b432:	f8c0 508c 	str.w	r5, [r0, #140]	; 0x8c
  if (huart->hdmarx != NULL)
 800b436:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 800b43a:	b1e0      	cbz	r0, 800b476 <UART_Start_Receive_DMA+0x56>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b43c:	4d2d      	ldr	r5, [pc, #180]	; (800b4f4 <UART_Start_Receive_DMA+0xd4>)
    huart->hdmarx->XferAbortCallback = NULL;
 800b43e:	66c3      	str	r3, [r0, #108]	; 0x6c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b440:	68a3      	ldr	r3, [r4, #8]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b442:	6605      	str	r5, [r0, #96]	; 0x60
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b444:	4d2c      	ldr	r5, [pc, #176]	; (800b4f8 <UART_Start_Receive_DMA+0xd8>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b44a:	6645      	str	r5, [r0, #100]	; 0x64
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b44c:	4d2b      	ldr	r5, [pc, #172]	; (800b4fc <UART_Start_Receive_DMA+0xdc>)
 800b44e:	6685      	str	r5, [r0, #104]	; 0x68
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b450:	d037      	beq.n	800b4c2 <UART_Start_Receive_DMA+0xa2>
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b452:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b454:	061b      	lsls	r3, r3, #24
 800b456:	d53c      	bpl.n	800b4d2 <UART_Start_Receive_DMA+0xb2>
      if ((huart->hdmarx->LinkedListQueue != NULL) && (huart->hdmarx->LinkedListQueue->Head != NULL))
 800b458:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d042      	beq.n	800b4e4 <UART_Start_Receive_DMA+0xc4>
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d03f      	beq.n	800b4e4 <UART_Start_Receive_DMA+0xc4>
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800b464:	609a      	str	r2, [r3, #8]
          (uint32_t)&huart->Instance->RDR;
 800b466:	6822      	ldr	r2, [r4, #0]
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = (uint32_t)huart->pRxBuffPtr;
 800b468:	6119      	str	r1, [r3, #16]
          (uint32_t)&huart->Instance->RDR;
 800b46a:	3224      	adds	r2, #36	; 0x24
        huart->hdmarx->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] =
 800b46c:	60da      	str	r2, [r3, #12]
        status = HAL_DMAEx_List_Start_IT(huart->hdmarx);
 800b46e:	f7f9 ff45 	bl	80052fc <HAL_DMAEx_List_Start_IT>
    if (status != HAL_OK)
 800b472:	2800      	cmp	r0, #0
 800b474:	d136      	bne.n	800b4e4 <UART_Start_Receive_DMA+0xc4>
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	b14b      	cbz	r3, 800b48e <UART_Start_Receive_DMA+0x6e>
 800b47a:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b47c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b480:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b484:	e843 2100 	strex	r1, r2, [r3]
 800b488:	2900      	cmp	r1, #0
 800b48a:	d1f7      	bne.n	800b47c <UART_Start_Receive_DMA+0x5c>
 800b48c:	e000      	b.n	800b490 <UART_Start_Receive_DMA+0x70>
 800b48e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b490:	f103 0208 	add.w	r2, r3, #8
 800b494:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b498:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b49c:	f103 0008 	add.w	r0, r3, #8
 800b4a0:	e840 2100 	strex	r1, r2, [r0]
 800b4a4:	2900      	cmp	r1, #0
 800b4a6:	d1f3      	bne.n	800b490 <UART_Start_Receive_DMA+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4a8:	f103 0208 	add.w	r2, r3, #8
 800b4ac:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b4:	f103 0108 	add.w	r1, r3, #8
 800b4b8:	e841 2000 	strex	r0, r2, [r1]
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d1f3      	bne.n	800b4a8 <UART_Start_Receive_DMA+0x88>
}
 800b4c0:	bd38      	pop	{r3, r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b4c2:	6923      	ldr	r3, [r4, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d1c4      	bne.n	800b452 <UART_Start_Receive_DMA+0x32>
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b4c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
      nbByte = Size * 2U;
 800b4ca:	0052      	lsls	r2, r2, #1
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b4cc:	061b      	lsls	r3, r3, #24
      nbByte = Size * 2U;
 800b4ce:	b292      	uxth	r2, r2
    if ((huart->hdmarx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800b4d0:	d4c2      	bmi.n	800b458 <UART_Start_Receive_DMA+0x38>
      status = HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, nbByte);
 800b4d2:	6825      	ldr	r5, [r4, #0]
 800b4d4:	4613      	mov	r3, r2
 800b4d6:	460a      	mov	r2, r1
 800b4d8:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800b4dc:	f7f9 fd7a 	bl	8004fd4 <HAL_DMA_Start_IT>
    if (status != HAL_OK)
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d0c8      	beq.n	800b476 <UART_Start_Receive_DMA+0x56>
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4e4:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 800b4e6:	2320      	movs	r3, #32
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4e8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
      return HAL_ERROR;
 800b4ec:	2001      	movs	r0, #1
      huart->RxState = HAL_UART_STATE_READY;
 800b4ee:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
 800b4f2:	bd38      	pop	{r3, r4, r5, pc}
 800b4f4:	0800aec5 	.word	0x0800aec5
 800b4f8:	0800ae89 	.word	0x0800ae89
 800b4fc:	0800aaf9 	.word	0x0800aaf9

0800b500 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b500:	6803      	ldr	r3, [r0, #0]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800b502:	b430      	push	{r4, r5}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b504:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b506:	689b      	ldr	r3, [r3, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b508:	4d0b      	ldr	r5, [pc, #44]	; (800b538 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800b50a:	4c0c      	ldr	r4, [pc, #48]	; (800b53c <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b50c:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b510:	f3c1 6142 	ubfx	r1, r1, #25, #3
 800b514:	5c6b      	ldrb	r3, [r5, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b516:	f815 200c 	ldrb.w	r2, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800b51a:	5c61      	ldrb	r1, [r4, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800b51c:	f814 500c 	ldrb.w	r5, [r4, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b520:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b522:	00db      	lsls	r3, r3, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b524:	fbb2 f2f5 	udiv	r2, r2, r5
  }
}
 800b528:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b52a:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b52e:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b532:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800b536:	4770      	bx	lr
 800b538:	08013c48 	.word	0x08013c48
 800b53c:	08013c40 	.word	0x08013c40

0800b540 <HAL_UARTEx_WakeupCallback>:
}
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop

0800b544 <HAL_UARTEx_RxFifoFullCallback>:
 800b544:	4770      	bx	lr
 800b546:	bf00      	nop

0800b548 <HAL_UARTEx_TxFifoEmptyCallback>:
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop

0800b54c <HAL_UARTEx_EnableFifoMode>:
{
 800b54c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800b54e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800b552:	2b01      	cmp	r3, #1
 800b554:	d01b      	beq.n	800b58e <HAL_UARTEx_EnableFifoMode+0x42>
 800b556:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800b558:	2224      	movs	r2, #36	; 0x24
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b55a:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b55e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800b560:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b564:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b568:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b56a:	6819      	ldr	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b56c:	432a      	orrs	r2, r5
  __HAL_UART_DISABLE(huart);
 800b56e:	f021 0101 	bic.w	r1, r1, #1
 800b572:	6019      	str	r1, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800b574:	6645      	str	r5, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	f7ff ffc2 	bl	800b500 <UARTEx_SetNbDataToProcess.part.0>
 800b57c:	4604      	mov	r4, r0
  __HAL_UNLOCK(huart);
 800b57e:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800b580:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800b582:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800b586:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800b588:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800b58c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800b58e:	2002      	movs	r0, #2
}
 800b590:	bd38      	pop	{r3, r4, r5, pc}
 800b592:	bf00      	nop

0800b594 <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800b594:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d023      	beq.n	800b5e4 <HAL_UARTEx_SetTxFifoThreshold+0x50>
{
 800b59c:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b59e:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 800b5a0:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5a2:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800b5a4:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b5a8:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5ac:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b5ae:	681a      	ldr	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5b0:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800b5b2:	f022 0201 	bic.w	r2, r2, #1
 800b5b6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b5b8:	689a      	ldr	r2, [r3, #8]
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800b5c0:	4311      	orrs	r1, r2
 800b5c2:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5c4:	b156      	cbz	r6, 800b5dc <HAL_UARTEx_SetTxFifoThreshold+0x48>
 800b5c6:	f7ff ff9b 	bl	800b500 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5ca:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 800b5cc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b5ce:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5d0:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 800b5d2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800b5d6:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b5dc:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800b5e0:	6682      	str	r2, [r0, #104]	; 0x68
 800b5e2:	e7f3      	b.n	800b5cc <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 800b5e4:	2002      	movs	r0, #2
}
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800b5e8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d023      	beq.n	800b638 <HAL_UARTEx_SetRxFifoThreshold+0x50>
{
 800b5f0:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800b5f2:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 800b5f4:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5f6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800b5f8:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800b5fc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b600:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800b602:	681a      	ldr	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b604:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800b606:	f022 0201 	bic.w	r2, r2, #1
 800b60a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b60c:	689a      	ldr	r2, [r3, #8]
 800b60e:	4604      	mov	r4, r0
 800b610:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800b614:	4311      	orrs	r1, r2
 800b616:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b618:	b156      	cbz	r6, 800b630 <HAL_UARTEx_SetRxFifoThreshold+0x48>
 800b61a:	f7ff ff71 	bl	800b500 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b61e:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 800b620:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800b622:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b624:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 800b626:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800b62a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800b62e:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800b630:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800b634:	6682      	str	r2, [r0, #104]	; 0x68
 800b636:	e7f3      	b.n	800b620 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 800b638:	2002      	movs	r0, #2
}
 800b63a:	4770      	bx	lr

0800b63c <HAL_UARTEx_ReceiveToIdle_DMA>:
{
 800b63c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800b63e:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
 800b642:	2e20      	cmp	r6, #32
 800b644:	d103      	bne.n	800b64e <HAL_UARTEx_ReceiveToIdle_DMA+0x12>
    if ((pData == NULL) || (Size == 0U))
 800b646:	b101      	cbz	r1, 800b64a <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
 800b648:	b91a      	cbnz	r2, 800b652 <HAL_UARTEx_ReceiveToIdle_DMA+0x16>
      return HAL_ERROR;
 800b64a:	2001      	movs	r0, #1
}
 800b64c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800b64e:	2002      	movs	r0, #2
}
 800b650:	bd70      	pop	{r4, r5, r6, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b652:	2501      	movs	r5, #1
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b654:	2300      	movs	r3, #0
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b656:	66c5      	str	r5, [r0, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b658:	6703      	str	r3, [r0, #112]	; 0x70
    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b65a:	4604      	mov	r4, r0
 800b65c:	f7ff fee0 	bl	800b420 <UART_Start_Receive_DMA>
    if (status == HAL_OK)
 800b660:	2800      	cmp	r0, #0
 800b662:	d1f3      	bne.n	800b64c <HAL_UARTEx_ReceiveToIdle_DMA+0x10>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b664:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b666:	42ab      	cmp	r3, r5
 800b668:	d1ef      	bne.n	800b64a <HAL_UARTEx_ReceiveToIdle_DMA+0xe>
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b66a:	2310      	movs	r3, #16
 800b66c:	6822      	ldr	r2, [r4, #0]
 800b66e:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b670:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b674:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	e842 3100 	strex	r1, r3, [r2]
 800b67c:	2900      	cmp	r1, #0
 800b67e:	d1f7      	bne.n	800b670 <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
}
 800b680:	bd70      	pop	{r4, r5, r6, pc}
 800b682:	bf00      	nop

0800b684 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop

0800b688 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800b688:	e7fe      	b.n	800b688 <HardFault_Handler>
 800b68a:	bf00      	nop

0800b68c <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800b68c:	e7fe      	b.n	800b68c <MemManage_Handler>
 800b68e:	bf00      	nop

0800b690 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800b690:	e7fe      	b.n	800b690 <BusFault_Handler>
 800b692:	bf00      	nop

0800b694 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800b694:	e7fe      	b.n	800b694 <UsageFault_Handler>
 800b696:	bf00      	nop

0800b698 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
 800b698:	e7fe      	b.n	800b698 <DebugMon_Handler>
 800b69a:	bf00      	nop

0800b69c <GPDMA1_Channel0_IRQHandler>:
void GPDMA1_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800b69c:	4801      	ldr	r0, [pc, #4]	; (800b6a4 <GPDMA1_Channel0_IRQHandler+0x8>)
 800b69e:	f7f9 bd4b 	b.w	8005138 <HAL_DMA_IRQHandler>
 800b6a2:	bf00      	nop
 800b6a4:	20000c44 	.word	0x20000c44

0800b6a8 <GPDMA1_Channel1_IRQHandler>:
void GPDMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 800b6a8:	4801      	ldr	r0, [pc, #4]	; (800b6b0 <GPDMA1_Channel1_IRQHandler+0x8>)
 800b6aa:	f7f9 bd45 	b.w	8005138 <HAL_DMA_IRQHandler>
 800b6ae:	bf00      	nop
 800b6b0:	20000cbc 	.word	0x20000cbc

0800b6b4 <GPDMA1_Channel2_IRQHandler>:
void GPDMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 800b6b4:	4801      	ldr	r0, [pc, #4]	; (800b6bc <GPDMA1_Channel2_IRQHandler+0x8>)
 800b6b6:	f7f9 bd3f 	b.w	8005138 <HAL_DMA_IRQHandler>
 800b6ba:	bf00      	nop
 800b6bc:	20000d34 	.word	0x20000d34

0800b6c0 <GPDMA1_Channel3_IRQHandler>:
void GPDMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 800b6c0:	4801      	ldr	r0, [pc, #4]	; (800b6c8 <GPDMA1_Channel3_IRQHandler+0x8>)
 800b6c2:	f7f9 bd39 	b.w	8005138 <HAL_DMA_IRQHandler>
 800b6c6:	bf00      	nop
 800b6c8:	20000dac 	.word	0x20000dac

0800b6cc <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800b6cc:	4801      	ldr	r0, [pc, #4]	; (800b6d4 <TIM6_IRQHandler+0x8>)
 800b6ce:	f7fe bf01 	b.w	800a4d4 <HAL_TIM_IRQHandler>
 800b6d2:	bf00      	nop
 800b6d4:	2000600c 	.word	0x2000600c

0800b6d8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b6d8:	4801      	ldr	r0, [pc, #4]	; (800b6e0 <USART2_IRQHandler+0x8>)
 800b6da:	f7ff ba51 	b.w	800ab80 <HAL_UART_IRQHandler>
 800b6de:	bf00      	nop
 800b6e0:	20000e24 	.word	0x20000e24

0800b6e4 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800b6e4:	4801      	ldr	r0, [pc, #4]	; (800b6ec <UART4_IRQHandler+0x8>)
 800b6e6:	f7ff ba4b 	b.w	800ab80 <HAL_UART_IRQHandler>
 800b6ea:	bf00      	nop
 800b6ec:	20000eb8 	.word	0x20000eb8

0800b6f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b6f0:	b4f0      	push	{r4, r5, r6, r7}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800b6f2:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_HSION;
 800b6f4:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b6f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b6fa:	491d      	ldr	r1, [pc, #116]	; (800b770 <SystemInit+0x80>)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800b6fc:	4c1d      	ldr	r4, [pc, #116]	; (800b774 <SystemInit+0x84>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b6fe:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  RCC->PLL1DIVR = 0x01010280U;
 800b702:	481d      	ldr	r0, [pc, #116]	; (800b778 <SystemInit+0x88>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800b704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR = RCC_CR_HSION;
 800b70c:	4b1b      	ldr	r3, [pc, #108]	; (800b77c <SystemInit+0x8c>)
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800b70e:	4d1c      	ldr	r5, [pc, #112]	; (800b780 <SystemInit+0x90>)
  RCC->CR = RCC_CR_HSION;
 800b710:	601f      	str	r7, [r3, #0]
  RCC->CFGR1 = 0U;
 800b712:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800b714:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800b716:	681f      	ldr	r7, [r3, #0]
 800b718:	403c      	ands	r4, r7
 800b71a:	601c      	str	r4, [r3, #0]
  RCC->PLL1CFGR = 0U;
 800b71c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800b71e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 800b720:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1DIVR = 0x01010280U;
 800b722:	6358      	str	r0, [r3, #52]	; 0x34
  RCC->PLL1FRACR = 0x00000000U;
 800b724:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2DIVR = 0x01010280U;
 800b726:	63d8      	str	r0, [r3, #60]	; 0x3c
  RCC->PLL2FRACR = 0x00000000U;
 800b728:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3DIVR = 0x01010280U;
 800b72a:	6458      	str	r0, [r3, #68]	; 0x44
  RCC->PLL3FRACR = 0x00000000U;
 800b72c:	649a      	str	r2, [r3, #72]	; 0x48
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800b72e:	6818      	ldr	r0, [r3, #0]
 800b730:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800b734:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0U;
 800b736:	651a      	str	r2, [r3, #80]	; 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b738:	608e      	str	r6, [r1, #8]
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800b73a:	69ab      	ldr	r3, [r5, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800b73c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800b740:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800b744:	d001      	beq.n	800b74a <SystemInit+0x5a>
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
  }
}
 800b746:	bcf0      	pop	{r4, r5, r6, r7}
 800b748:	4770      	bx	lr
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800b74a:	69eb      	ldr	r3, [r5, #28]
 800b74c:	07db      	lsls	r3, r3, #31
 800b74e:	d503      	bpl.n	800b758 <SystemInit+0x68>
      FLASH->OPTKEYR = 0x08192A3BU;
 800b750:	4a0c      	ldr	r2, [pc, #48]	; (800b784 <SystemInit+0x94>)
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800b752:	4b0d      	ldr	r3, [pc, #52]	; (800b788 <SystemInit+0x98>)
      FLASH->OPTKEYR = 0x08192A3BU;
 800b754:	60ea      	str	r2, [r5, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800b756:	60eb      	str	r3, [r5, #12]
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800b758:	4b09      	ldr	r3, [pc, #36]	; (800b780 <SystemInit+0x90>)
}
 800b75a:	bcf0      	pop	{r4, r5, r6, r7}
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800b75c:	69da      	ldr	r2, [r3, #28]
 800b75e:	f042 0202 	orr.w	r2, r2, #2
 800b762:	61da      	str	r2, [r3, #28]
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800b764:	69da      	ldr	r2, [r3, #28]
 800b766:	f042 0201 	orr.w	r2, r2, #1
 800b76a:	61da      	str	r2, [r3, #28]
}
 800b76c:	4770      	bx	lr
 800b76e:	bf00      	nop
 800b770:	e000ed00 	.word	0xe000ed00
 800b774:	eae2eae3 	.word	0xeae2eae3
 800b778:	01010280 	.word	0x01010280
 800b77c:	44020c00 	.word	0x44020c00
 800b780:	40022000 	.word	0x40022000
 800b784:	08192a3b 	.word	0x08192a3b
 800b788:	4c5d6e7f 	.word	0x4c5d6e7f

0800b78c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800b78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b790:	4604      	mov	r4, r0
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800b792:	f7f6 fe55 	bl	8002440 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800b796:	4a3e      	ldr	r2, [pc, #248]	; (800b890 <prvAddNewTaskToReadyList+0x104>)

            if( pxCurrentTCB == NULL )
 800b798:	4d3e      	ldr	r5, [pc, #248]	; (800b894 <prvAddNewTaskToReadyList+0x108>)
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800b79a:	6813      	ldr	r3, [r2, #0]
 800b79c:	3301      	adds	r3, #1
 800b79e:	6013      	str	r3, [r2, #0]
            if( pxCurrentTCB == NULL )
 800b7a0:	682b      	ldr	r3, [r5, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d042      	beq.n	800b82c <prvAddNewTaskToReadyList+0xa0>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800b7a6:	4f3c      	ldr	r7, [pc, #240]	; (800b898 <prvAddNewTaskToReadyList+0x10c>)
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d036      	beq.n	800b81c <prvAddNewTaskToReadyList+0x90>
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800b7ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b7b0:	4e3a      	ldr	r6, [pc, #232]	; (800b89c <prvAddNewTaskToReadyList+0x110>)
 800b7b2:	f04f 0e01 	mov.w	lr, #1
 800b7b6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800b7ba:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800b7be:	6841      	ldr	r1, [r0, #4]
 800b7c0:	fa0e fe02 	lsl.w	lr, lr, r2
            uxTaskNumber++;
 800b7c4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800b8b4 <prvAddNewTaskToReadyList+0x128>
            prvAddTaskToReadyList( pxNewTCB );
 800b7c8:	688a      	ldr	r2, [r1, #8]
 800b7ca:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800b8b8 <prvAddNewTaskToReadyList+0x12c>
 800b7ce:	60e2      	str	r2, [r4, #12]
            uxTaskNumber++;
 800b7d0:	f8d9 2000 	ldr.w	r2, [r9]
            prvAddTaskToReadyList( pxNewTCB );
 800b7d4:	009b      	lsls	r3, r3, #2
            uxTaskNumber++;
 800b7d6:	3201      	adds	r2, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7d8:	6462      	str	r2, [r4, #68]	; 0x44
            uxTaskNumber++;
 800b7da:	f8c9 2000 	str.w	r2, [r9]
            prvAddTaskToReadyList( pxNewTCB );
 800b7de:	f8d8 2000 	ldr.w	r2, [r8]
 800b7e2:	60a1      	str	r1, [r4, #8]
 800b7e4:	ea4e 0202 	orr.w	r2, lr, r2
 800b7e8:	f8c8 2000 	str.w	r2, [r8]
 800b7ec:	58f2      	ldr	r2, [r6, r3]
 800b7ee:	f104 0e04 	add.w	lr, r4, #4
 800b7f2:	f102 0c01 	add.w	ip, r2, #1
 800b7f6:	688a      	ldr	r2, [r1, #8]
 800b7f8:	f8c2 e004 	str.w	lr, [r2, #4]
 800b7fc:	f8c1 e008 	str.w	lr, [r1, #8]
 800b800:	6160      	str	r0, [r4, #20]
 800b802:	f846 c003 	str.w	ip, [r6, r3]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800b806:	f7f6 fe29 	bl	800245c <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	b123      	cbz	r3, 800b818 <prvAddNewTaskToReadyList+0x8c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800b80e:	682a      	ldr	r2, [r5, #0]
 800b810:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b812:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b814:	429a      	cmp	r2, r3
 800b816:	d311      	bcc.n	800b83c <prvAddNewTaskToReadyList+0xb0>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800b818:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b822:	4e1e      	ldr	r6, [pc, #120]	; (800b89c <prvAddNewTaskToReadyList+0x110>)
 800b824:	4293      	cmp	r3, r2
                        pxCurrentTCB = pxNewTCB;
 800b826:	bf98      	it	ls
 800b828:	602c      	strls	r4, [r5, #0]
 800b82a:	e7c2      	b.n	800b7b2 <prvAddNewTaskToReadyList+0x26>
                pxCurrentTCB = pxNewTCB;
 800b82c:	602c      	str	r4, [r5, #0]
                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b82e:	6813      	ldr	r3, [r2, #0]
 800b830:	2b01      	cmp	r3, #1
 800b832:	d007      	beq.n	800b844 <prvAddNewTaskToReadyList+0xb8>
            prvAddTaskToReadyList( pxNewTCB );
 800b834:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800b836:	4e19      	ldr	r6, [pc, #100]	; (800b89c <prvAddNewTaskToReadyList+0x110>)
 800b838:	4f17      	ldr	r7, [pc, #92]	; (800b898 <prvAddNewTaskToReadyList+0x10c>)
 800b83a:	e7ba      	b.n	800b7b2 <prvAddNewTaskToReadyList+0x26>
    }
 800b83c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800b840:	f7f6 bdf2 	b.w	8002428 <vPortYield>
 800b844:	4e15      	ldr	r6, [pc, #84]	; (800b89c <prvAddNewTaskToReadyList+0x110>)
 800b846:	4637      	mov	r7, r6
 800b848:	f106 08c8 	add.w	r8, r6, #200	; 0xc8
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b84c:	4638      	mov	r0, r7
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b84e:	3714      	adds	r7, #20
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b850:	f7f6 fcd8 	bl	8002204 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b854:	45b8      	cmp	r8, r7
 800b856:	d1f9      	bne.n	800b84c <prvAddNewTaskToReadyList+0xc0>
    }

    vListInitialise( &xDelayedTaskList1 );
 800b858:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800b8bc <prvAddNewTaskToReadyList+0x130>
    vListInitialise( &xDelayedTaskList2 );
 800b85c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800b8c0 <prvAddNewTaskToReadyList+0x134>
    vListInitialise( &xDelayedTaskList1 );
 800b860:	4648      	mov	r0, r9
 800b862:	f7f6 fccf 	bl	8002204 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800b866:	4640      	mov	r0, r8
 800b868:	f7f6 fccc 	bl	8002204 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800b86c:	480c      	ldr	r0, [pc, #48]	; (800b8a0 <prvAddNewTaskToReadyList+0x114>)
 800b86e:	f7f6 fcc9 	bl	8002204 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800b872:	480c      	ldr	r0, [pc, #48]	; (800b8a4 <prvAddNewTaskToReadyList+0x118>)
 800b874:	f7f6 fcc6 	bl	8002204 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800b878:	480b      	ldr	r0, [pc, #44]	; (800b8a8 <prvAddNewTaskToReadyList+0x11c>)
 800b87a:	f7f6 fcc3 	bl	8002204 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800b87e:	4b0b      	ldr	r3, [pc, #44]	; (800b8ac <prvAddNewTaskToReadyList+0x120>)
 800b880:	4f05      	ldr	r7, [pc, #20]	; (800b898 <prvAddNewTaskToReadyList+0x10c>)
 800b882:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b886:	4b0a      	ldr	r3, [pc, #40]	; (800b8b0 <prvAddNewTaskToReadyList+0x124>)
            prvAddTaskToReadyList( pxNewTCB );
 800b888:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b88a:	f8c3 8000 	str.w	r8, [r3]
}
 800b88e:	e790      	b.n	800b7b2 <prvAddNewTaskToReadyList+0x26>
 800b890:	2000612c 	.word	0x2000612c
 800b894:	20006058 	.word	0x20006058
 800b898:	200065e8 	.word	0x200065e8
 800b89c:	20006064 	.word	0x20006064
 800b8a0:	200065d4 	.word	0x200065d4
 800b8a4:	20006600 	.word	0x20006600
 800b8a8:	200065ec 	.word	0x200065ec
 800b8ac:	2000605c 	.word	0x2000605c
 800b8b0:	20006060 	.word	0x20006060
 800b8b4:	20006338 	.word	0x20006338
 800b8b8:	2000653c 	.word	0x2000653c
 800b8bc:	20006540 	.word	0x20006540
 800b8c0:	20006554 	.word	0x20006554

0800b8c4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800b8c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    List_t * const pxDelayedList = pxDelayedTaskList;
 800b8c8:	4a24      	ldr	r2, [pc, #144]	; (800b95c <prvAddCurrentTaskToDelayedList+0x98>)
{
 800b8ca:	4605      	mov	r5, r0
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800b8cc:	4b24      	ldr	r3, [pc, #144]	; (800b960 <prvAddCurrentTaskToDelayedList+0x9c>)
    const TickType_t xConstTickCount = xTickCount;
 800b8ce:	4825      	ldr	r0, [pc, #148]	; (800b964 <prvAddCurrentTaskToDelayedList+0xa0>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8d0:	4e25      	ldr	r6, [pc, #148]	; (800b968 <prvAddCurrentTaskToDelayedList+0xa4>)
    const TickType_t xConstTickCount = xTickCount;
 800b8d2:	6804      	ldr	r4, [r0, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800b8d4:	f8d2 8000 	ldr.w	r8, [r2]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800b8d8:	f8d3 9000 	ldr.w	r9, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8dc:	6830      	ldr	r0, [r6, #0]
{
 800b8de:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8e0:	3004      	adds	r0, #4
 800b8e2:	f7f6 fcb7 	bl	8002254 <uxListRemove>
 800b8e6:	b948      	cbnz	r0, 800b8fc <prvAddCurrentTaskToDelayedList+0x38>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	6832      	ldr	r2, [r6, #0]
 800b8ec:	491f      	ldr	r1, [pc, #124]	; (800b96c <prvAddCurrentTaskToDelayedList+0xa8>)
 800b8ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b8f0:	fa03 f202 	lsl.w	r2, r3, r2
 800b8f4:	680b      	ldr	r3, [r1, #0]
 800b8f6:	ea23 0302 	bic.w	r3, r3, r2
 800b8fa:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8fc:	1c6b      	adds	r3, r5, #1
 800b8fe:	d015      	beq.n	800b92c <prvAddCurrentTaskToDelayedList+0x68>
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b900:	6833      	ldr	r3, [r6, #0]
 800b902:	1964      	adds	r4, r4, r5
            if( xTimeToWake < xConstTickCount )
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b904:	6831      	ldr	r1, [r6, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b906:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800b908:	d20a      	bcs.n	800b920 <prvAddCurrentTaskToDelayedList+0x5c>
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                traceMOVED_TASK_TO_DELAYED_LIST();
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b90a:	4640      	mov	r0, r8
 800b90c:	3104      	adds	r1, #4
 800b90e:	f7f6 fc89 	bl	8002224 <vListInsert>

                /* If the task entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime
                 * needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
 800b912:	4b17      	ldr	r3, [pc, #92]	; (800b970 <prvAddCurrentTaskToDelayedList+0xac>)
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	42a2      	cmp	r2, r4
                {
                    xNextTaskUnblockTime = xTimeToWake;
 800b918:	bf88      	it	hi
 800b91a:	601c      	strhi	r4, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800b91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b920:	4648      	mov	r0, r9
}
 800b922:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800b926:	3104      	adds	r1, #4
 800b928:	f7f6 bc7c 	b.w	8002224 <vListInsert>
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b92c:	2f00      	cmp	r7, #0
 800b92e:	d0e7      	beq.n	800b900 <prvAddCurrentTaskToDelayedList+0x3c>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b930:	4b10      	ldr	r3, [pc, #64]	; (800b974 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b932:	6830      	ldr	r0, [r6, #0]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	6831      	ldr	r1, [r6, #0]
 800b938:	6082      	str	r2, [r0, #8]
 800b93a:	6890      	ldr	r0, [r2, #8]
 800b93c:	60c8      	str	r0, [r1, #12]
 800b93e:	6831      	ldr	r1, [r6, #0]
 800b940:	6890      	ldr	r0, [r2, #8]
 800b942:	3104      	adds	r1, #4
 800b944:	6041      	str	r1, [r0, #4]
 800b946:	6830      	ldr	r0, [r6, #0]
 800b948:	6819      	ldr	r1, [r3, #0]
 800b94a:	6834      	ldr	r4, [r6, #0]
 800b94c:	3004      	adds	r0, #4
 800b94e:	3101      	adds	r1, #1
 800b950:	6090      	str	r0, [r2, #8]
 800b952:	6019      	str	r1, [r3, #0]
 800b954:	6163      	str	r3, [r4, #20]
}
 800b956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95a:	bf00      	nop
 800b95c:	2000605c 	.word	0x2000605c
 800b960:	20006060 	.word	0x20006060
 800b964:	20006614 	.word	0x20006614
 800b968:	20006058 	.word	0x20006058
 800b96c:	2000653c 	.word	0x2000653c
 800b970:	200065c8 	.word	0x200065c8
 800b974:	200065ec 	.word	0x200065ec

0800b978 <vTaskSwitchContext.part.0>:
            xYieldPendings[ 0 ] = pdFALSE;
 800b978:	2200      	movs	r2, #0
 800b97a:	4b1d      	ldr	r3, [pc, #116]	; (800b9f0 <vTaskSwitchContext.part.0+0x78>)
    void vTaskSwitchContext( void )
 800b97c:	b510      	push	{r4, lr}
            taskCHECK_FOR_STACK_OVERFLOW();
 800b97e:	4c1d      	ldr	r4, [pc, #116]	; (800b9f4 <vTaskSwitchContext.part.0+0x7c>)
            xYieldPendings[ 0 ] = pdFALSE;
 800b980:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b98c:	d103      	bne.n	800b996 <vTaskSwitchContext.part.0+0x1e>
 800b98e:	685a      	ldr	r2, [r3, #4]
 800b990:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b994:	d022      	beq.n	800b9dc <vTaskSwitchContext.part.0+0x64>
 800b996:	6821      	ldr	r1, [r4, #0]
 800b998:	6820      	ldr	r0, [r4, #0]
 800b99a:	3134      	adds	r1, #52	; 0x34
 800b99c:	f7f5 fcf8 	bl	8001390 <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800b9a0:	4b15      	ldr	r3, [pc, #84]	; (800b9f8 <vTaskSwitchContext.part.0+0x80>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 */
    static portFORCE_INLINE uint32_t ulPortCountLeadingZeros( uint32_t ulBitmap )
    {
        uint32_t ulReturn;

        __asm volatile ( "clz %0, %1" : "=r" ( ulReturn ) : "r" ( ulBitmap ) : "memory" );
 800b9a4:	fab3 f383 	clz	r3, r3
 800b9a8:	f1c3 031f 	rsb	r3, r3, #31
 800b9ac:	4a13      	ldr	r2, [pc, #76]	; (800b9fc <vTaskSwitchContext.part.0+0x84>)
 800b9ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b9b2:	0099      	lsls	r1, r3, #2
 800b9b4:	5850      	ldr	r0, [r2, r1]
 800b9b6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b9ba:	b160      	cbz	r0, 800b9d6 <vTaskSwitchContext.part.0+0x5e>
 800b9bc:	6858      	ldr	r0, [r3, #4]
 800b9be:	3108      	adds	r1, #8
 800b9c0:	6840      	ldr	r0, [r0, #4]
 800b9c2:	440a      	add	r2, r1
 800b9c4:	4290      	cmp	r0, r2
 800b9c6:	6058      	str	r0, [r3, #4]
 800b9c8:	bf04      	itt	eq
 800b9ca:	68d8      	ldreq	r0, [r3, #12]
 800b9cc:	6058      	streq	r0, [r3, #4]
 800b9ce:	68c3      	ldr	r3, [r0, #12]
 800b9d0:	6023      	str	r3, [r4, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800b9d2:	6823      	ldr	r3, [r4, #0]
    }
 800b9d4:	bd10      	pop	{r4, pc}
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800b9d6:	f7f6 fe89 	bl	80026ec <ulSetInterruptMask>
 800b9da:	e7fe      	b.n	800b9da <vTaskSwitchContext.part.0+0x62>
            taskCHECK_FOR_STACK_OVERFLOW();
 800b9dc:	689a      	ldr	r2, [r3, #8]
 800b9de:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800b9e2:	d1d8      	bne.n	800b996 <vTaskSwitchContext.part.0+0x1e>
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800b9ea:	d1d4      	bne.n	800b996 <vTaskSwitchContext.part.0+0x1e>
 800b9ec:	e7d8      	b.n	800b9a0 <vTaskSwitchContext.part.0+0x28>
 800b9ee:	bf00      	nop
 800b9f0:	20006674 	.word	0x20006674
 800b9f4:	20006058 	.word	0x20006058
 800b9f8:	2000653c 	.word	0x2000653c
 800b9fc:	20006064 	.word	0x20006064

0800ba00 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800ba00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba04:	460c      	mov	r4, r1
 800ba06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800ba08:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800ba0c:	4607      	mov	r7, r0
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800ba0e:	21a5      	movs	r1, #165	; 0xa5
 800ba10:	464a      	mov	r2, r9
 800ba12:	6b28      	ldr	r0, [r5, #48]	; 0x30
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800ba14:	4698      	mov	r8, r3
 800ba16:	9e08      	ldr	r6, [sp, #32]
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800ba18:	f001 fa72 	bl	800cf00 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800ba1c:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
    if( pcName != NULL )
 800ba20:	b174      	cbz	r4, 800ba40 <prvInitialiseNewTask.constprop.0+0x40>
 800ba22:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800ba26:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 800ba2a:	340f      	adds	r4, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba2c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800ba30:	f80e 1f01 	strb.w	r1, [lr, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 800ba34:	b109      	cbz	r1, 800ba3a <prvInitialiseNewTask.constprop.0+0x3a>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba36:	45a4      	cmp	ip, r4
 800ba38:	d1f8      	bne.n	800ba2c <prvInitialiseNewTask.constprop.0+0x2c>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800ba40:	2e09      	cmp	r6, #9
 800ba42:	d902      	bls.n	800ba4a <prvInitialiseNewTask.constprop.0+0x4a>
 800ba44:	f7f6 fe52 	bl	80026ec <ulSetInterruptMask>
 800ba48:	e7fe      	b.n	800ba48 <prvInitialiseNewTask.constprop.0+0x48>
    pxNewTCB->uxPriority = uxPriority;
 800ba4a:	62ee      	str	r6, [r5, #44]	; 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 800ba4c:	64ee      	str	r6, [r5, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba4e:	1d28      	adds	r0, r5, #4
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800ba50:	f1a9 0904 	sub.w	r9, r9, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba54:	f7f6 fbe2 	bl	800221c <vListInitialiseItem>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800ba58:	44d1      	add	r9, sl
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba5a:	f105 0018 	add.w	r0, r5, #24
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800ba5e:	f1c6 060a 	rsb	r6, r6, #10
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba62:	f7f6 fbdb 	bl	800221c <vListInitialiseItem>
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800ba66:	4643      	mov	r3, r8
 800ba68:	463a      	mov	r2, r7
 800ba6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800ba6c:	61ae      	str	r6, [r5, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba6e:	612d      	str	r5, [r5, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba70:	626d      	str	r5, [r5, #36]	; 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800ba72:	f029 0007 	bic.w	r0, r9, #7
 800ba76:	f7f6 fd33 	bl	80024e0 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 800ba7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800ba7c:	6028      	str	r0, [r5, #0]
    if( pxCreatedTask != NULL )
 800ba7e:	b103      	cbz	r3, 800ba82 <prvInitialiseNewTask.constprop.0+0x82>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba80:	601d      	str	r5, [r3, #0]
}
 800ba82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba86:	bf00      	nop

0800ba88 <prvCheckTasksWaitingTermination>:
{
 800ba88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba8a:	4d17      	ldr	r5, [pc, #92]	; (800bae8 <prvCheckTasksWaitingTermination+0x60>)
 800ba8c:	682b      	ldr	r3, [r5, #0]
 800ba8e:	b31b      	cbz	r3, 800bad8 <prvCheckTasksWaitingTermination+0x50>
 800ba90:	4f16      	ldr	r7, [pc, #88]	; (800baec <prvCheckTasksWaitingTermination+0x64>)
 800ba92:	4e17      	ldr	r6, [pc, #92]	; (800baf0 <prvCheckTasksWaitingTermination+0x68>)
                taskENTER_CRITICAL();
 800ba94:	f7f6 fcd4 	bl	8002440 <vPortEnterCritical>
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	68dc      	ldr	r4, [r3, #12]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba9c:	1d20      	adds	r0, r4, #4
 800ba9e:	f7f6 fbd9 	bl	8002254 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800baa2:	6833      	ldr	r3, [r6, #0]
 800baa4:	3b01      	subs	r3, #1
 800baa6:	6033      	str	r3, [r6, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	3b01      	subs	r3, #1
 800baac:	602b      	str	r3, [r5, #0]
                taskEXIT_CRITICAL();
 800baae:	f7f6 fcd5 	bl	800245c <vPortExitCritical>
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bab2:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 800bab6:	b133      	cbz	r3, 800bac6 <prvCheckTasksWaitingTermination+0x3e>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d00e      	beq.n	800bada <prvCheckTasksWaitingTermination+0x52>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800babc:	2b02      	cmp	r3, #2
 800babe:	d008      	beq.n	800bad2 <prvCheckTasksWaitingTermination+0x4a>
 800bac0:	f7f6 fe14 	bl	80026ec <ulSetInterruptMask>
 800bac4:	e7fe      	b.n	800bac4 <prvCheckTasksWaitingTermination+0x3c>
                vPortFreeStack( pxTCB->pxStack );
 800bac6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800bac8:	f7f6 fb10 	bl	80020ec <vPortFree>
                vPortFree( pxTCB );
 800bacc:	4620      	mov	r0, r4
 800bace:	f7f6 fb0d 	bl	80020ec <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bad2:	682b      	ldr	r3, [r5, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1dd      	bne.n	800ba94 <prvCheckTasksWaitingTermination+0xc>
}
 800bad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                vPortFree( pxTCB );
 800bada:	4620      	mov	r0, r4
 800badc:	f7f6 fb06 	bl	80020ec <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d1d6      	bne.n	800ba94 <prvCheckTasksWaitingTermination+0xc>
 800bae6:	e7f7      	b.n	800bad8 <prvCheckTasksWaitingTermination+0x50>
 800bae8:	20006130 	.word	0x20006130
 800baec:	20006600 	.word	0x20006600
 800baf0:	2000612c 	.word	0x2000612c

0800baf4 <prvIdleTask>:
{
 800baf4:	b508      	push	{r3, lr}
 800baf6:	4c04      	ldr	r4, [pc, #16]	; (800bb08 <prvIdleTask+0x14>)
        prvCheckTasksWaitingTermination();
 800baf8:	f7ff ffc6 	bl	800ba88 <prvCheckTasksWaitingTermination>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800bafc:	6823      	ldr	r3, [r4, #0]
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d9fa      	bls.n	800baf8 <prvIdleTask+0x4>
                taskYIELD();
 800bb02:	f7f6 fc91 	bl	8002428 <vPortYield>
 800bb06:	e7f7      	b.n	800baf8 <prvIdleTask+0x4>
 800bb08:	20006064 	.word	0x20006064

0800bb0c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800bb0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb10:	4b61      	ldr	r3, [pc, #388]	; (800bc98 <xTaskIncrementTick.part.0+0x18c>)
BaseType_t xTaskIncrementTick( void )
 800bb12:	b085      	sub	sp, #20
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bb14:	681c      	ldr	r4, [r3, #0]
 800bb16:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 800bb18:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U )
 800bb1a:	2c00      	cmp	r4, #0
 800bb1c:	d07a      	beq.n	800bc14 <xTaskIncrementTick.part.0+0x108>
 800bb1e:	4b5f      	ldr	r3, [pc, #380]	; (800bc9c <xTaskIncrementTick.part.0+0x190>)
 800bb20:	9303      	str	r3, [sp, #12]
        if( xConstTickCount >= xNextTaskUnblockTime )
 800bb22:	9b03      	ldr	r3, [sp, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429c      	cmp	r4, r3
 800bb28:	d37b      	bcc.n	800bc22 <xTaskIncrementTick.part.0+0x116>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb2a:	4d5d      	ldr	r5, [pc, #372]	; (800bca0 <xTaskIncrementTick.part.0+0x194>)
 800bb2c:	682b      	ldr	r3, [r5, #0]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	f000 80a8 	beq.w	800bc86 <xTaskIncrementTick.part.0+0x17a>
    BaseType_t xSwitchRequired = pdFALSE;
 800bb36:	f04f 0c00 	mov.w	ip, #0
 800bb3a:	4b5a      	ldr	r3, [pc, #360]	; (800bca4 <xTaskIncrementTick.part.0+0x198>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800bb3c:	4667      	mov	r7, ip
 800bb3e:	485a      	ldr	r0, [pc, #360]	; (800bca8 <xTaskIncrementTick.part.0+0x19c>)
                    prvAddTaskToReadyList( pxTCB );
 800bb40:	4e5a      	ldr	r6, [pc, #360]	; (800bcac <xTaskIncrementTick.part.0+0x1a0>)
 800bb42:	9301      	str	r3, [sp, #4]
 800bb44:	9402      	str	r4, [sp, #8]
 800bb46:	e058      	b.n	800bbfa <xTaskIncrementTick.part.0+0xee>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800bb48:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800bb4c:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 800bb50:	f8c2 9008 	str.w	r9, [r2, #8]
 800bb54:	f8c9 2004 	str.w	r2, [r9, #4]
 800bb58:	f8de 2004 	ldr.w	r2, [lr, #4]
 800bb5c:	428a      	cmp	r2, r1
 800bb5e:	f8de 2000 	ldr.w	r2, [lr]
 800bb62:	bf08      	it	eq
 800bb64:	f8ce 9004 	streq.w	r9, [lr, #4]
 800bb68:	3a01      	subs	r2, #1
 800bb6a:	615f      	str	r7, [r3, #20]
 800bb6c:	f8ce 2000 	str.w	r2, [lr]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bb70:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
 800bb74:	f1be 0f00 	cmp.w	lr, #0
 800bb78:	d012      	beq.n	800bba0 <xTaskIncrementTick.part.0+0x94>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800bb7a:	e9d3 9207 	ldrd	r9, r2, [r3, #28]
 800bb7e:	f8de 4004 	ldr.w	r4, [lr, #4]
 800bb82:	f8c9 2008 	str.w	r2, [r9, #8]
 800bb86:	6a1a      	ldr	r2, [r3, #32]
 800bb88:	4544      	cmp	r4, r8
 800bb8a:	f8c2 9004 	str.w	r9, [r2, #4]
 800bb8e:	bf08      	it	eq
 800bb90:	f8ce 2004 	streq.w	r2, [lr, #4]
 800bb94:	f8de 2000 	ldr.w	r2, [lr]
 800bb98:	629f      	str	r7, [r3, #40]	; 0x28
 800bb9a:	3a01      	subs	r2, #1
 800bb9c:	f8ce 2000 	str.w	r2, [lr]
                    prvAddTaskToReadyList( pxTCB );
 800bba0:	2401      	movs	r4, #1
 800bba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bba4:	f8d6 b000 	ldr.w	fp, [r6]
 800bba8:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 800bbac:	eb00 0988 	add.w	r9, r0, r8, lsl #2
 800bbb0:	f8d9 e004 	ldr.w	lr, [r9, #4]
 800bbb4:	fa04 fa02 	lsl.w	sl, r4, r2
 800bbb8:	f8de 4008 	ldr.w	r4, [lr, #8]
 800bbbc:	ea4a 0a0b 	orr.w	sl, sl, fp
 800bbc0:	60dc      	str	r4, [r3, #12]
 800bbc2:	f850 4028 	ldr.w	r4, [r0, r8, lsl #2]
 800bbc6:	f8c6 a000 	str.w	sl, [r6]
 800bbca:	f104 0a01 	add.w	sl, r4, #1
 800bbce:	f8de 4008 	ldr.w	r4, [lr, #8]
 800bbd2:	f8c3 e008 	str.w	lr, [r3, #8]
 800bbd6:	6061      	str	r1, [r4, #4]
 800bbd8:	f8ce 1008 	str.w	r1, [lr, #8]
 800bbdc:	f8c3 9014 	str.w	r9, [r3, #20]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbe0:	9b01      	ldr	r3, [sp, #4]
                    prvAddTaskToReadyList( pxTCB );
 800bbe2:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbe6:	6819      	ldr	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbe8:	682b      	ldr	r3, [r5, #0]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbea:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbec:	681b      	ldr	r3, [r3, #0]
                                xSwitchRequired = pdTRUE;
 800bbee:	428a      	cmp	r2, r1
 800bbf0:	bf88      	it	hi
 800bbf2:	f04f 0c01 	movhi.w	ip, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d049      	beq.n	800bc8e <xTaskIncrementTick.part.0+0x182>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bbfa:	682b      	ldr	r3, [r5, #0]
                    if( xConstTickCount < xItemValue )
 800bbfc:	9c02      	ldr	r4, [sp, #8]
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bbfe:	68db      	ldr	r3, [r3, #12]
 800bc00:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bc02:	685a      	ldr	r2, [r3, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800bc04:	1d19      	adds	r1, r3, #4
                    if( xConstTickCount < xItemValue )
 800bc06:	4294      	cmp	r4, r2
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800bc08:	f103 0818 	add.w	r8, r3, #24
                    if( xConstTickCount < xItemValue )
 800bc0c:	d29c      	bcs.n	800bb48 <xTaskIncrementTick.part.0+0x3c>
                        xNextTaskUnblockTime = xItemValue;
 800bc0e:	9b03      	ldr	r3, [sp, #12]
 800bc10:	601a      	str	r2, [r3, #0]
                        break;
 800bc12:	e00b      	b.n	800bc2c <xTaskIncrementTick.part.0+0x120>
            taskSWITCH_DELAYED_LISTS();
 800bc14:	4b22      	ldr	r3, [pc, #136]	; (800bca0 <xTaskIncrementTick.part.0+0x194>)
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	6812      	ldr	r2, [r2, #0]
 800bc1a:	b1da      	cbz	r2, 800bc54 <xTaskIncrementTick.part.0+0x148>
 800bc1c:	f7f6 fd66 	bl	80026ec <ulSetInterruptMask>
 800bc20:	e7fe      	b.n	800bc20 <xTaskIncrementTick.part.0+0x114>
    BaseType_t xSwitchRequired = pdFALSE;
 800bc22:	f04f 0c00 	mov.w	ip, #0
 800bc26:	4b1f      	ldr	r3, [pc, #124]	; (800bca4 <xTaskIncrementTick.part.0+0x198>)
 800bc28:	481f      	ldr	r0, [pc, #124]	; (800bca8 <xTaskIncrementTick.part.0+0x19c>)
 800bc2a:	9301      	str	r3, [sp, #4]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800bc2c:	9b01      	ldr	r3, [sp, #4]
                if( xYieldPendings[ 0 ] != pdFALSE )
 800bc2e:	4a20      	ldr	r2, [pc, #128]	; (800bcb0 <xTaskIncrementTick.part.0+0x1a4>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800bc30:	681b      	ldr	r3, [r3, #0]
                if( xYieldPendings[ 0 ] != pdFALSE )
 800bc32:	6812      	ldr	r2, [r2, #0]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800bc34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc36:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800bc3a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                    xSwitchRequired = pdTRUE;
 800bc3e:	2b02      	cmp	r3, #2
 800bc40:	bf28      	it	cs
 800bc42:	f04f 0c01 	movcs.w	ip, #1
                    xSwitchRequired = pdTRUE;
 800bc46:	2a00      	cmp	r2, #0
}
 800bc48:	bf0c      	ite	eq
 800bc4a:	4660      	moveq	r0, ip
 800bc4c:	2001      	movne	r0, #1
 800bc4e:	b005      	add	sp, #20
 800bc50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
 800bc54:	4a17      	ldr	r2, [pc, #92]	; (800bcb4 <xTaskIncrementTick.part.0+0x1a8>)
 800bc56:	6818      	ldr	r0, [r3, #0]
 800bc58:	6811      	ldr	r1, [r2, #0]
 800bc5a:	6019      	str	r1, [r3, #0]
 800bc5c:	4916      	ldr	r1, [pc, #88]	; (800bcb8 <xTaskIncrementTick.part.0+0x1ac>)
 800bc5e:	6010      	str	r0, [r2, #0]
 800bc60:	680a      	ldr	r2, [r1, #0]
 800bc62:	3201      	adds	r2, #1
 800bc64:	600a      	str	r2, [r1, #0]
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc66:	681a      	ldr	r2, [r3, #0]
 800bc68:	6812      	ldr	r2, [r2, #0]
 800bc6a:	b92a      	cbnz	r2, 800bc78 <xTaskIncrementTick.part.0+0x16c>
        xNextTaskUnblockTime = portMAX_DELAY;
 800bc6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc70:	4a0a      	ldr	r2, [pc, #40]	; (800bc9c <xTaskIncrementTick.part.0+0x190>)
 800bc72:	9203      	str	r2, [sp, #12]
 800bc74:	6013      	str	r3, [r2, #0]
 800bc76:	e754      	b.n	800bb22 <xTaskIncrementTick.part.0+0x16>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	4a08      	ldr	r2, [pc, #32]	; (800bc9c <xTaskIncrementTick.part.0+0x190>)
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	9203      	str	r2, [sp, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	6013      	str	r3, [r2, #0]
}
 800bc84:	e74d      	b.n	800bb22 <xTaskIncrementTick.part.0+0x16>
    BaseType_t xSwitchRequired = pdFALSE;
 800bc86:	469c      	mov	ip, r3
 800bc88:	4b06      	ldr	r3, [pc, #24]	; (800bca4 <xTaskIncrementTick.part.0+0x198>)
 800bc8a:	4807      	ldr	r0, [pc, #28]	; (800bca8 <xTaskIncrementTick.part.0+0x19c>)
 800bc8c:	9301      	str	r3, [sp, #4]
                    xNextTaskUnblockTime = portMAX_DELAY;
 800bc8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc92:	9a03      	ldr	r2, [sp, #12]
 800bc94:	6013      	str	r3, [r2, #0]
                    break;
 800bc96:	e7c9      	b.n	800bc2c <xTaskIncrementTick.part.0+0x120>
 800bc98:	20006614 	.word	0x20006614
 800bc9c:	200065c8 	.word	0x200065c8
 800bca0:	2000605c 	.word	0x2000605c
 800bca4:	20006058 	.word	0x20006058
 800bca8:	20006064 	.word	0x20006064
 800bcac:	2000653c 	.word	0x2000653c
 800bcb0:	20006674 	.word	0x20006674
 800bcb4:	20006060 	.word	0x20006060
 800bcb8:	200065cc 	.word	0x200065cc

0800bcbc <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800bcc0:	4f53      	ldr	r7, [pc, #332]	; (800be10 <xTaskResumeAll.part.0+0x154>)
BaseType_t xTaskResumeAll( void )
 800bcc2:	b083      	sub	sp, #12
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	3b01      	subs	r3, #1
 800bcc8:	603b      	str	r3, [r7, #0]
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800bcca:	f8d7 8000 	ldr.w	r8, [r7]
 800bcce:	f1b8 0f00 	cmp.w	r8, #0
 800bcd2:	f040 808d 	bne.w	800bdf0 <xTaskResumeAll.part.0+0x134>
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcd6:	4b4f      	ldr	r3, [pc, #316]	; (800be14 <xTaskResumeAll.part.0+0x158>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f000 8088 	beq.w	800bdf0 <xTaskResumeAll.part.0+0x134>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bce0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 800be30 <xTaskResumeAll.part.0+0x174>
 800bce4:	f8dc 3000 	ldr.w	r3, [ip]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	f000 808e 	beq.w	800be0a <xTaskResumeAll.part.0+0x14e>
                        prvAddTaskToReadyList( pxTCB );
 800bcee:	f04f 0b01 	mov.w	fp, #1
 800bcf2:	46c2      	mov	sl, r8
 800bcf4:	4b48      	ldr	r3, [pc, #288]	; (800be18 <xTaskResumeAll.part.0+0x15c>)
 800bcf6:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800be34 <xTaskResumeAll.part.0+0x178>
 800bcfa:	4d48      	ldr	r5, [pc, #288]	; (800be1c <xTaskResumeAll.part.0+0x160>)
 800bcfc:	9301      	str	r3, [sp, #4]
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800bcfe:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800bd02:	68db      	ldr	r3, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800bd04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bd06:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 800bd0a:	6081      	str	r1, [r0, #8]
 800bd0c:	6048      	str	r0, [r1, #4]
 800bd0e:	6850      	ldr	r0, [r2, #4]
 800bd10:	f103 0418 	add.w	r4, r3, #24
 800bd14:	42a0      	cmp	r0, r4
 800bd16:	bf08      	it	eq
 800bd18:	6051      	streq	r1, [r2, #4]
 800bd1a:	6811      	ldr	r1, [r2, #0]
 800bd1c:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
 800bd20:	3901      	subs	r1, #1
 800bd22:	6011      	str	r1, [r2, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800bd24:	6958      	ldr	r0, [r3, #20]
 800bd26:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 800bd2a:	6091      	str	r1, [r2, #8]
 800bd2c:	604a      	str	r2, [r1, #4]
 800bd2e:	6842      	ldr	r2, [r0, #4]
 800bd30:	1d1e      	adds	r6, r3, #4
 800bd32:	42b2      	cmp	r2, r6
 800bd34:	bf08      	it	eq
 800bd36:	6041      	streq	r1, [r0, #4]
 800bd38:	6801      	ldr	r1, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 800bd3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800bd3c:	3901      	subs	r1, #1
 800bd3e:	6001      	str	r1, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 800bd40:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800bd44:	f8de 9000 	ldr.w	r9, [lr]
 800bd48:	eb05 0880 	add.w	r8, r5, r0, lsl #2
 800bd4c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd50:	fa0b f402 	lsl.w	r4, fp, r2
 800bd54:	ea44 0409 	orr.w	r4, r4, r9
 800bd58:	f8ce 4000 	str.w	r4, [lr]
 800bd5c:	688c      	ldr	r4, [r1, #8]
 800bd5e:	6099      	str	r1, [r3, #8]
 800bd60:	60dc      	str	r4, [r3, #12]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd62:	4c2f      	ldr	r4, [pc, #188]	; (800be20 <xTaskResumeAll.part.0+0x164>)
 800bd64:	6824      	ldr	r4, [r4, #0]
 800bd66:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                        prvAddTaskToReadyList( pxTCB );
 800bd6a:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd6e:	454a      	cmp	r2, r9
                        prvAddTaskToReadyList( pxTCB );
 800bd70:	f104 0401 	add.w	r4, r4, #1
 800bd74:	9400      	str	r4, [sp, #0]
 800bd76:	688c      	ldr	r4, [r1, #8]
 800bd78:	6066      	str	r6, [r4, #4]
 800bd7a:	608e      	str	r6, [r1, #8]
 800bd7c:	f8c3 8014 	str.w	r8, [r3, #20]
 800bd80:	9b00      	ldr	r3, [sp, #0]
 800bd82:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800bd86:	bf84      	itt	hi
 800bd88:	9b01      	ldrhi	r3, [sp, #4]
 800bd8a:	f8c3 b000 	strhi.w	fp, [r3]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd8e:	f8dc 3000 	ldr.w	r3, [ip]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1b3      	bne.n	800bcfe <xTaskResumeAll.part.0+0x42>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd96:	4b23      	ldr	r3, [pc, #140]	; (800be24 <xTaskResumeAll.part.0+0x168>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	6812      	ldr	r2, [r2, #0]
 800bd9c:	2a00      	cmp	r2, #0
 800bd9e:	d02f      	beq.n	800be00 <xTaskResumeAll.part.0+0x144>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	4b21      	ldr	r3, [pc, #132]	; (800be28 <xTaskResumeAll.part.0+0x16c>)
 800bda4:	68d2      	ldr	r2, [r2, #12]
 800bda6:	6812      	ldr	r2, [r2, #0]
 800bda8:	601a      	str	r2, [r3, #0]
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bdaa:	4d20      	ldr	r5, [pc, #128]	; (800be2c <xTaskResumeAll.part.0+0x170>)
 800bdac:	682c      	ldr	r4, [r5, #0]
                        if( xPendedCounts > ( TickType_t ) 0U )
 800bdae:	b1a4      	cbz	r4, 800bdda <xTaskResumeAll.part.0+0x11e>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800bdb0:	2601      	movs	r6, #1
 800bdb2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bdb6:	e006      	b.n	800bdc6 <xTaskResumeAll.part.0+0x10a>
 800bdb8:	f7ff fea8 	bl	800bb0c <xTaskIncrementTick.part.0>
                                if( xTaskIncrementTick() != pdFALSE )
 800bdbc:	b108      	cbz	r0, 800bdc2 <xTaskResumeAll.part.0+0x106>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800bdbe:	f8c8 6000 	str.w	r6, [r8]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800bdc2:	3c01      	subs	r4, #1
 800bdc4:	d008      	beq.n	800bdd8 <xTaskResumeAll.part.0+0x11c>
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d0f5      	beq.n	800bdb8 <xTaskResumeAll.part.0+0xfc>
        xPendedTicks += 1U;
 800bdcc:	682b      	ldr	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800bdce:	3c01      	subs	r4, #1
        xPendedTicks += 1U;
 800bdd0:	f103 0301 	add.w	r3, r3, #1
 800bdd4:	602b      	str	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800bdd6:	d1f6      	bne.n	800bdc6 <xTaskResumeAll.part.0+0x10a>
                            xPendedTicks = 0;
 800bdd8:	602c      	str	r4, [r5, #0]
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800bdda:	9b01      	ldr	r3, [sp, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	b13b      	cbz	r3, 800bdf0 <xTaskResumeAll.part.0+0x134>
                            xAlreadyYielded = pdTRUE;
 800bde0:	2001      	movs	r0, #1
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800bde2:	4b0f      	ldr	r3, [pc, #60]	; (800be20 <xTaskResumeAll.part.0+0x164>)
                            xAlreadyYielded = pdTRUE;
 800bde4:	9000      	str	r0, [sp, #0]
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f7f6 fb1e 	bl	8002428 <vPortYield>
 800bdec:	9800      	ldr	r0, [sp, #0]
 800bdee:	e000      	b.n	800bdf2 <xTaskResumeAll.part.0+0x136>
    BaseType_t xAlreadyYielded = pdFALSE;
 800bdf0:	2000      	movs	r0, #0
 800bdf2:	9000      	str	r0, [sp, #0]
        taskEXIT_CRITICAL();
 800bdf4:	f7f6 fb32 	bl	800245c <vPortExitCritical>
}
 800bdf8:	9800      	ldr	r0, [sp, #0]
 800bdfa:	b003      	add	sp, #12
 800bdfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xNextTaskUnblockTime = portMAX_DELAY;
 800be00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800be04:	4b08      	ldr	r3, [pc, #32]	; (800be28 <xTaskResumeAll.part.0+0x16c>)
 800be06:	601a      	str	r2, [r3, #0]
 800be08:	e7cf      	b.n	800bdaa <xTaskResumeAll.part.0+0xee>
 800be0a:	4b03      	ldr	r3, [pc, #12]	; (800be18 <xTaskResumeAll.part.0+0x15c>)
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	e7cc      	b.n	800bdaa <xTaskResumeAll.part.0+0xee>
 800be10:	20006334 	.word	0x20006334
 800be14:	2000612c 	.word	0x2000612c
 800be18:	20006674 	.word	0x20006674
 800be1c:	20006064 	.word	0x20006064
 800be20:	20006058 	.word	0x20006058
 800be24:	2000605c 	.word	0x2000605c
 800be28:	200065c8 	.word	0x200065c8
 800be2c:	200065d0 	.word	0x200065d0
 800be30:	200065d4 	.word	0x200065d4
 800be34:	2000653c 	.word	0x2000653c

0800be38 <xTaskCreateStatic>:
    {
 800be38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        TaskHandle_t xReturn = NULL;
 800be3c:	2700      	movs	r7, #0
    {
 800be3e:	b087      	sub	sp, #28
 800be40:	4698      	mov	r8, r3
        configASSERT( puxStackBuffer != NULL );
 800be42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    {
 800be44:	9e10      	ldr	r6, [sp, #64]	; 0x40
        TaskHandle_t xReturn = NULL;
 800be46:	9704      	str	r7, [sp, #16]
        configASSERT( puxStackBuffer != NULL );
 800be48:	b33b      	cbz	r3, 800be9a <xTaskCreateStatic+0x62>
        configASSERT( pxTaskBuffer != NULL );
 800be4a:	b34e      	cbz	r6, 800bea0 <xTaskCreateStatic+0x68>
 800be4c:	4691      	mov	r9, r2
            volatile size_t xSize = sizeof( StaticTask_t );
 800be4e:	225c      	movs	r2, #92	; 0x5c
 800be50:	9205      	str	r2, [sp, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800be52:	9a05      	ldr	r2, [sp, #20]
 800be54:	2a5c      	cmp	r2, #92	; 0x5c
 800be56:	d002      	beq.n	800be5e <xTaskCreateStatic+0x26>
 800be58:	f7f6 fc48 	bl	80026ec <ulSetInterruptMask>
 800be5c:	e7fe      	b.n	800be5c <xTaskCreateStatic+0x24>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 800be5e:	4604      	mov	r4, r0
 800be60:	460d      	mov	r5, r1
 800be62:	9805      	ldr	r0, [sp, #20]
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800be64:	4639      	mov	r1, r7
 800be66:	4630      	mov	r0, r6
 800be68:	f001 f84a 	bl	800cf00 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be6e:	4620      	mov	r0, r4
 800be70:	9c0e      	ldr	r4, [sp, #56]	; 0x38
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800be72:	6333      	str	r3, [r6, #48]	; 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be74:	9400      	str	r4, [sp, #0]
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be76:	2402      	movs	r4, #2
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be78:	9602      	str	r6, [sp, #8]
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800be7a:	f886 4059 	strb.w	r4, [r6, #89]	; 0x59
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800be7e:	ac04      	add	r4, sp, #16
 800be80:	4643      	mov	r3, r8
 800be82:	464a      	mov	r2, r9
 800be84:	4629      	mov	r1, r5
 800be86:	9401      	str	r4, [sp, #4]
 800be88:	f7ff fdba 	bl	800ba00 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7ff fc7d 	bl	800b78c <prvAddNewTaskToReadyList>
    }
 800be92:	9804      	ldr	r0, [sp, #16]
 800be94:	b007      	add	sp, #28
 800be96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        configASSERT( puxStackBuffer != NULL );
 800be9a:	f7f6 fc27 	bl	80026ec <ulSetInterruptMask>
 800be9e:	e7fe      	b.n	800be9e <xTaskCreateStatic+0x66>
        configASSERT( pxTaskBuffer != NULL );
 800bea0:	f7f6 fc24 	bl	80026ec <ulSetInterruptMask>
 800bea4:	e7fe      	b.n	800bea4 <xTaskCreateStatic+0x6c>
 800bea6:	bf00      	nop

0800bea8 <xTaskCreate>:
    {
 800bea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beac:	4607      	mov	r7, r0
 800beae:	b085      	sub	sp, #20
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800beb0:	0090      	lsls	r0, r2, #2
    {
 800beb2:	4616      	mov	r6, r2
 800beb4:	4688      	mov	r8, r1
 800beb6:	4699      	mov	r9, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800beb8:	f7f6 f866 	bl	8001f88 <pvPortMalloc>
            if( pxStack != NULL )
 800bebc:	b1e0      	cbz	r0, 800bef8 <xTaskCreate+0x50>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800bebe:	4604      	mov	r4, r0
 800bec0:	205c      	movs	r0, #92	; 0x5c
 800bec2:	f7f6 f861 	bl	8001f88 <pvPortMalloc>
                if( pxNewTCB != NULL )
 800bec6:	4605      	mov	r5, r0
 800bec8:	b1d8      	cbz	r0, 800bf02 <xTaskCreate+0x5a>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800beca:	225c      	movs	r2, #92	; 0x5c
 800becc:	2100      	movs	r1, #0
 800bece:	f001 f817 	bl	800cf00 <memset>
                    pxNewTCB->pxStack = pxStack;
 800bed2:	632c      	str	r4, [r5, #48]	; 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bed4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800bed6:	464b      	mov	r3, r9
 800bed8:	9401      	str	r4, [sp, #4]
 800beda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bedc:	4632      	mov	r2, r6
 800bede:	4641      	mov	r1, r8
 800bee0:	4638      	mov	r0, r7
 800bee2:	9502      	str	r5, [sp, #8]
 800bee4:	9400      	str	r4, [sp, #0]
 800bee6:	f7ff fd8b 	bl	800ba00 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
 800beea:	4628      	mov	r0, r5
 800beec:	f7ff fc4e 	bl	800b78c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800bef0:	2001      	movs	r0, #1
    }
 800bef2:	b005      	add	sp, #20
 800bef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 800befc:	b005      	add	sp, #20
 800befe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    vPortFreeStack( pxStack );
 800bf02:	4620      	mov	r0, r4
 800bf04:	f7f6 f8f2 	bl	80020ec <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bf08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 800bf0c:	b005      	add	sp, #20
 800bf0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf12:	bf00      	nop

0800bf14 <vTaskDelay>:
        if( xTicksToDelay > ( TickType_t ) 0U )
 800bf14:	b1e0      	cbz	r0, 800bf50 <vTaskDelay+0x3c>
    {
 800bf16:	b510      	push	{r4, lr}
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800bf18:	4c0e      	ldr	r4, [pc, #56]	; (800bf54 <vTaskDelay+0x40>)
 800bf1a:	6823      	ldr	r3, [r4, #0]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	6023      	str	r3, [r4, #0]
                configASSERT( uxSchedulerSuspended == 1U );
 800bf20:	6823      	ldr	r3, [r4, #0]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d002      	beq.n	800bf2c <vTaskDelay+0x18>
 800bf26:	f7f6 fbe1 	bl	80026ec <ulSetInterruptMask>
 800bf2a:	e7fe      	b.n	800bf2a <vTaskDelay+0x16>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf2c:	2100      	movs	r1, #0
 800bf2e:	f7ff fcc9 	bl	800b8c4 <prvAddCurrentTaskToDelayedList>
        taskENTER_CRITICAL();
 800bf32:	f7f6 fa85 	bl	8002440 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 800bf36:	6823      	ldr	r3, [r4, #0]
 800bf38:	b11b      	cbz	r3, 800bf42 <vTaskDelay+0x2e>
 800bf3a:	f7ff febf 	bl	800bcbc <xTaskResumeAll.part.0>
        if( xAlreadyYielded == pdFALSE )
 800bf3e:	b118      	cbz	r0, 800bf48 <vTaskDelay+0x34>
    }
 800bf40:	bd10      	pop	{r4, pc}
            configASSERT( uxSchedulerSuspended != 0U );
 800bf42:	f7f6 fbd3 	bl	80026ec <ulSetInterruptMask>
 800bf46:	e7fe      	b.n	800bf46 <vTaskDelay+0x32>
    }
 800bf48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            taskYIELD_WITHIN_API();
 800bf4c:	f7f6 ba6c 	b.w	8002428 <vPortYield>
 800bf50:	f7f6 ba6a 	b.w	8002428 <vPortYield>
 800bf54:	20006334 	.word	0x20006334

0800bf58 <vTaskStartScheduler>:
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800bf58:	2149      	movs	r1, #73	; 0x49
{
 800bf5a:	b530      	push	{r4, r5, lr}
 800bf5c:	4a19      	ldr	r2, [pc, #100]	; (800bfc4 <vTaskStartScheduler+0x6c>)
 800bf5e:	b089      	sub	sp, #36	; 0x24
 800bf60:	f10d 0311 	add.w	r3, sp, #17
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800bf64:	f88d 1010 	strb.w	r1, [sp, #16]
 800bf68:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800bf6c:	f803 4b01 	strb.w	r4, [r3], #1
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800bf70:	2c00      	cmp	r4, #0
 800bf72:	d1f9      	bne.n	800bf68 <vTaskStartScheduler+0x10>
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800bf74:	4814      	ldr	r0, [pc, #80]	; (800bfc8 <vTaskStartScheduler+0x70>)
 800bf76:	4915      	ldr	r1, [pc, #84]	; (800bfcc <vTaskStartScheduler+0x74>)
 800bf78:	4623      	mov	r3, r4
 800bf7a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800bf7e:	2280      	movs	r2, #128	; 0x80
 800bf80:	4813      	ldr	r0, [pc, #76]	; (800bfd0 <vTaskStartScheduler+0x78>)
 800bf82:	9400      	str	r4, [sp, #0]
 800bf84:	a904      	add	r1, sp, #16
 800bf86:	f7ff ff57 	bl	800be38 <xTaskCreateStatic>
 800bf8a:	4b12      	ldr	r3, [pc, #72]	; (800bfd4 <vTaskStartScheduler+0x7c>)
 800bf8c:	6018      	str	r0, [r3, #0]
            if( xIdleTaskHandles[ xCoreID ] != NULL )
 800bf8e:	b180      	cbz	r0, 800bfb2 <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800bf90:	f000 fc30 	bl	800c7f4 <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 800bf94:	2801      	cmp	r0, #1
            xReturn = xTimerCreateTimerTask();
 800bf96:	4605      	mov	r5, r0
    if( xReturn == pdPASS )
 800bf98:	d10f      	bne.n	800bfba <vTaskStartScheduler+0x62>
        portDISABLE_INTERRUPTS();
 800bf9a:	f7f6 fba7 	bl	80026ec <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
 800bf9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bfa2:	490d      	ldr	r1, [pc, #52]	; (800bfd8 <vTaskStartScheduler+0x80>)
        xSchedulerRunning = pdTRUE;
 800bfa4:	4a0d      	ldr	r2, [pc, #52]	; (800bfdc <vTaskStartScheduler+0x84>)
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfa6:	4b0e      	ldr	r3, [pc, #56]	; (800bfe0 <vTaskStartScheduler+0x88>)
        xNextTaskUnblockTime = portMAX_DELAY;
 800bfa8:	6008      	str	r0, [r1, #0]
        xSchedulerRunning = pdTRUE;
 800bfaa:	6015      	str	r5, [r2, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bfac:	601c      	str	r4, [r3, #0]
        ( void ) xPortStartScheduler();
 800bfae:	f7f6 fad5 	bl	800255c <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 800bfb2:	4b0c      	ldr	r3, [pc, #48]	; (800bfe4 <vTaskStartScheduler+0x8c>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
}
 800bfb6:	b009      	add	sp, #36	; 0x24
 800bfb8:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bfba:	3501      	adds	r5, #1
 800bfbc:	d1f9      	bne.n	800bfb2 <vTaskStartScheduler+0x5a>
 800bfbe:	f7f6 fb95 	bl	80026ec <ulSetInterruptMask>
 800bfc2:	e7fe      	b.n	800bfc2 <vTaskStartScheduler+0x6a>
 800bfc4:	08013c68 	.word	0x08013c68
 800bfc8:	2000656c 	.word	0x2000656c
 800bfcc:	20006134 	.word	0x20006134
 800bfd0:	0800baf5 	.word	0x0800baf5
 800bfd4:	20006568 	.word	0x20006568
 800bfd8:	200065c8 	.word	0x200065c8
 800bfdc:	200065e8 	.word	0x200065e8
 800bfe0:	20006614 	.word	0x20006614
 800bfe4:	200001e8 	.word	0x200001e8

0800bfe8 <vTaskSuspendAll>:
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800bfe8:	4a02      	ldr	r2, [pc, #8]	; (800bff4 <vTaskSuspendAll+0xc>)
 800bfea:	6813      	ldr	r3, [r2, #0]
 800bfec:	3301      	adds	r3, #1
 800bfee:	6013      	str	r3, [r2, #0]
}
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	20006334 	.word	0x20006334

0800bff8 <xTaskResumeAll>:
{
 800bff8:	b508      	push	{r3, lr}
        taskENTER_CRITICAL();
 800bffa:	f7f6 fa21 	bl	8002440 <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 800bffe:	4b05      	ldr	r3, [pc, #20]	; (800c014 <xTaskResumeAll+0x1c>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	b11b      	cbz	r3, 800c00c <xTaskResumeAll+0x14>
}
 800c004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c008:	f7ff be58 	b.w	800bcbc <xTaskResumeAll.part.0>
            configASSERT( uxSchedulerSuspended != 0U );
 800c00c:	f7f6 fb6e 	bl	80026ec <ulSetInterruptMask>
 800c010:	e7fe      	b.n	800c010 <xTaskResumeAll+0x18>
 800c012:	bf00      	nop
 800c014:	20006334 	.word	0x20006334

0800c018 <xTaskGetTickCount>:
        xTicks = xTickCount;
 800c018:	4b01      	ldr	r3, [pc, #4]	; (800c020 <xTaskGetTickCount+0x8>)
 800c01a:	6818      	ldr	r0, [r3, #0]
}
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	20006614 	.word	0x20006614

0800c024 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 800c024:	4b01      	ldr	r3, [pc, #4]	; (800c02c <uxTaskGetNumberOfTasks+0x8>)
 800c026:	6818      	ldr	r0, [r3, #0]
}
 800c028:	4770      	bx	lr
 800c02a:	bf00      	nop
 800c02c:	2000612c 	.word	0x2000612c

0800c030 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800c030:	4b05      	ldr	r3, [pc, #20]	; (800c048 <xTaskIncrementTick+0x18>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	b90b      	cbnz	r3, 800c03a <xTaskIncrementTick+0xa>
 800c036:	f7ff bd69 	b.w	800bb0c <xTaskIncrementTick.part.0>
        xPendedTicks += 1U;
 800c03a:	4a04      	ldr	r2, [pc, #16]	; (800c04c <xTaskIncrementTick+0x1c>)
}
 800c03c:	2000      	movs	r0, #0
        xPendedTicks += 1U;
 800c03e:	6813      	ldr	r3, [r2, #0]
 800c040:	3301      	adds	r3, #1
 800c042:	6013      	str	r3, [r2, #0]
}
 800c044:	4770      	bx	lr
 800c046:	bf00      	nop
 800c048:	20006334 	.word	0x20006334
 800c04c:	200065d0 	.word	0x200065d0

0800c050 <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800c050:	4b04      	ldr	r3, [pc, #16]	; (800c064 <vTaskSwitchContext+0x14>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	b11b      	cbz	r3, 800c05e <vTaskSwitchContext+0xe>
            xYieldPendings[ 0 ] = pdTRUE;
 800c056:	2201      	movs	r2, #1
 800c058:	4b03      	ldr	r3, [pc, #12]	; (800c068 <vTaskSwitchContext+0x18>)
 800c05a:	601a      	str	r2, [r3, #0]
    }
 800c05c:	4770      	bx	lr
 800c05e:	f7ff bc8b 	b.w	800b978 <vTaskSwitchContext.part.0>
 800c062:	bf00      	nop
 800c064:	20006334 	.word	0x20006334
 800c068:	20006674 	.word	0x20006674

0800c06c <vTaskPlaceOnEventList>:
{
 800c06c:	b510      	push	{r4, lr}
    configASSERT( pxEventList );
 800c06e:	b158      	cbz	r0, 800c088 <vTaskPlaceOnEventList+0x1c>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c070:	460c      	mov	r4, r1
 800c072:	4b07      	ldr	r3, [pc, #28]	; (800c090 <vTaskPlaceOnEventList+0x24>)
 800c074:	6819      	ldr	r1, [r3, #0]
 800c076:	3118      	adds	r1, #24
 800c078:	f7f6 f8d4 	bl	8002224 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c07c:	4620      	mov	r0, r4
}
 800c07e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c082:	2101      	movs	r1, #1
 800c084:	f7ff bc1e 	b.w	800b8c4 <prvAddCurrentTaskToDelayedList>
    configASSERT( pxEventList );
 800c088:	f7f6 fb30 	bl	80026ec <ulSetInterruptMask>
 800c08c:	e7fe      	b.n	800c08c <vTaskPlaceOnEventList+0x20>
 800c08e:	bf00      	nop
 800c090:	20006058 	.word	0x20006058

0800c094 <vTaskPlaceOnEventListRestricted>:
    {
 800c094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( pxEventList );
 800c096:	4603      	mov	r3, r0
 800c098:	b1f8      	cbz	r0, 800c0da <vTaskPlaceOnEventListRestricted+0x46>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c09a:	4c11      	ldr	r4, [pc, #68]	; (800c0e0 <vTaskPlaceOnEventListRestricted+0x4c>)
 800c09c:	685d      	ldr	r5, [r3, #4]
 800c09e:	4608      	mov	r0, r1
            xTicksToWait = portMAX_DELAY;
 800c0a0:	2a00      	cmp	r2, #0
 800c0a2:	4611      	mov	r1, r2
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0a4:	6822      	ldr	r2, [r4, #0]
 800c0a6:	68ae      	ldr	r6, [r5, #8]
 800c0a8:	61d5      	str	r5, [r2, #28]
 800c0aa:	6822      	ldr	r2, [r4, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0ac:	bf18      	it	ne
 800c0ae:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0b2:	6216      	str	r6, [r2, #32]
 800c0b4:	6826      	ldr	r6, [r4, #0]
 800c0b6:	6822      	ldr	r2, [r4, #0]
 800c0b8:	6827      	ldr	r7, [r4, #0]
 800c0ba:	f102 0418 	add.w	r4, r2, #24
 800c0be:	681a      	ldr	r2, [r3, #0]
 800c0c0:	3618      	adds	r6, #24
 800c0c2:	f102 0c01 	add.w	ip, r2, #1
 800c0c6:	68aa      	ldr	r2, [r5, #8]
 800c0c8:	6056      	str	r6, [r2, #4]
 800c0ca:	60ac      	str	r4, [r5, #8]
 800c0cc:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ce:	f8c3 c000 	str.w	ip, [r3]
    }
 800c0d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0d6:	f7ff bbf5 	b.w	800b8c4 <prvAddCurrentTaskToDelayedList>
        configASSERT( pxEventList );
 800c0da:	f7f6 fb07 	bl	80026ec <ulSetInterruptMask>
 800c0de:	e7fe      	b.n	800c0de <vTaskPlaceOnEventListRestricted+0x4a>
 800c0e0:	20006058 	.word	0x20006058

0800c0e4 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c0e4:	68c3      	ldr	r3, [r0, #12]
{
 800c0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800c0ea:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d05e      	beq.n	800c1ae <xTaskRemoveFromEventList+0xca>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800c0f0:	e9d3 4107 	ldrd	r4, r1, [r3, #28]
 800c0f4:	2500      	movs	r5, #0
 800c0f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c0f8:	60a1      	str	r1, [r4, #8]
 800c0fa:	604c      	str	r4, [r1, #4]
 800c0fc:	6854      	ldr	r4, [r2, #4]
 800c0fe:	f103 0018 	add.w	r0, r3, #24
 800c102:	4284      	cmp	r4, r0
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800c104:	4c2b      	ldr	r4, [pc, #172]	; (800c1b4 <xTaskRemoveFromEventList+0xd0>)
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800c106:	bf08      	it	eq
 800c108:	6051      	streq	r1, [r2, #4]
 800c10a:	6811      	ldr	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800c10c:	6824      	ldr	r4, [r4, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800c10e:	3901      	subs	r1, #1
 800c110:	629d      	str	r5, [r3, #40]	; 0x28
 800c112:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800c114:	b1bc      	cbz	r4, 800c146 <xTaskRemoveFromEventList+0x62>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c116:	4928      	ldr	r1, [pc, #160]	; (800c1b8 <xTaskRemoveFromEventList+0xd4>)
 800c118:	684a      	ldr	r2, [r1, #4]
 800c11a:	6894      	ldr	r4, [r2, #8]
 800c11c:	e9c3 2407 	strd	r2, r4, [r3, #28]
 800c120:	6894      	ldr	r4, [r2, #8]
 800c122:	6060      	str	r0, [r4, #4]
 800c124:	6090      	str	r0, [r2, #8]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c128:	6299      	str	r1, [r3, #40]	; 0x28
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c12a:	4b24      	ldr	r3, [pc, #144]	; (800c1bc <xTaskRemoveFromEventList+0xd8>)
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c12c:	680c      	ldr	r4, [r1, #0]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c12e:	681b      	ldr	r3, [r3, #0]
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c130:	3401      	adds	r4, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c134:	600c      	str	r4, [r1, #0]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c136:	4293      	cmp	r3, r2
 800c138:	d236      	bcs.n	800c1a8 <xTaskRemoveFromEventList+0xc4>
            xYieldPendings[ 0 ] = pdTRUE;
 800c13a:	2301      	movs	r3, #1
 800c13c:	4a20      	ldr	r2, [pc, #128]	; (800c1c0 <xTaskRemoveFromEventList+0xdc>)
            xReturn = pdTRUE;
 800c13e:	4618      	mov	r0, r3
            xYieldPendings[ 0 ] = pdTRUE;
 800c140:	6013      	str	r3, [r2, #0]
}
 800c142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800c146:	6959      	ldr	r1, [r3, #20]
 800c148:	e9d3 2002 	ldrd	r2, r0, [r3, #8]
 800c14c:	6090      	str	r0, [r2, #8]
 800c14e:	68d8      	ldr	r0, [r3, #12]
 800c150:	1d1f      	adds	r7, r3, #4
 800c152:	6042      	str	r2, [r0, #4]
 800c154:	684a      	ldr	r2, [r1, #4]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c156:	4d1b      	ldr	r5, [pc, #108]	; (800c1c4 <xTaskRemoveFromEventList+0xe0>)
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800c158:	42ba      	cmp	r2, r7
 800c15a:	bf08      	it	eq
 800c15c:	6048      	streq	r0, [r1, #4]
 800c15e:	6808      	ldr	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800c162:	3801      	subs	r0, #1
 800c164:	6008      	str	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c166:	2001      	movs	r0, #1
 800c168:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800c16c:	eb05 0c81 	add.w	ip, r5, r1, lsl #2
 800c170:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800c174:	f8df e050 	ldr.w	lr, [pc, #80]	; 800c1c8 <xTaskRemoveFromEventList+0xe4>
 800c178:	68a6      	ldr	r6, [r4, #8]
 800c17a:	0089      	lsls	r1, r1, #2
 800c17c:	60de      	str	r6, [r3, #12]
 800c17e:	586e      	ldr	r6, [r5, r1]
 800c180:	f8de 8000 	ldr.w	r8, [lr]
 800c184:	4406      	add	r6, r0
 800c186:	4090      	lsls	r0, r2
 800c188:	ea40 0008 	orr.w	r0, r0, r8
 800c18c:	f8ce 0000 	str.w	r0, [lr]
 800c190:	68a0      	ldr	r0, [r4, #8]
 800c192:	609c      	str	r4, [r3, #8]
 800c194:	6047      	str	r7, [r0, #4]
 800c196:	60a7      	str	r7, [r4, #8]
 800c198:	f8c3 c014 	str.w	ip, [r3, #20]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c19c:	4b07      	ldr	r3, [pc, #28]	; (800c1bc <xTaskRemoveFromEventList+0xd8>)
        prvAddTaskToReadyList( pxUnblockedTCB );
 800c19e:	506e      	str	r6, [r5, r1]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d3c8      	bcc.n	800c13a <xTaskRemoveFromEventList+0x56>
            xReturn = pdFALSE;
 800c1a8:	2000      	movs	r0, #0
}
 800c1aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( pxUnblockedTCB );
 800c1ae:	f7f6 fa9d 	bl	80026ec <ulSetInterruptMask>
 800c1b2:	e7fe      	b.n	800c1b2 <xTaskRemoveFromEventList+0xce>
 800c1b4:	20006334 	.word	0x20006334
 800c1b8:	200065d4 	.word	0x200065d4
 800c1bc:	20006058 	.word	0x20006058
 800c1c0:	20006674 	.word	0x20006674
 800c1c4:	20006064 	.word	0x20006064
 800c1c8:	2000653c 	.word	0x2000653c

0800c1cc <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1cc:	4a03      	ldr	r2, [pc, #12]	; (800c1dc <vTaskInternalSetTimeOutState+0x10>)
    pxTimeOut->xTimeOnEntering = xTickCount;
 800c1ce:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <vTaskInternalSetTimeOutState+0x14>)
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1d0:	6812      	ldr	r2, [r2, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	e9c0 2300 	strd	r2, r3, [r0]
}
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	200065cc 	.word	0x200065cc
 800c1e0:	20006614 	.word	0x20006614

0800c1e4 <xTaskCheckForTimeOut>:
{
 800c1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1e6:	b083      	sub	sp, #12
    configASSERT( pxTimeOut );
 800c1e8:	b370      	cbz	r0, 800c248 <xTaskCheckForTimeOut+0x64>
    configASSERT( pxTicksToWait );
 800c1ea:	460d      	mov	r5, r1
 800c1ec:	b339      	cbz	r1, 800c23e <xTaskCheckForTimeOut+0x5a>
 800c1ee:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 800c1f0:	f7f6 f926 	bl	8002440 <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 800c1f4:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 800c1f6:	4a16      	ldr	r2, [pc, #88]	; (800c250 <xTaskCheckForTimeOut+0x6c>)
            if( *pxTicksToWait == portMAX_DELAY )
 800c1f8:	1c58      	adds	r0, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 800c1fa:	6811      	ldr	r1, [r2, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 800c1fc:	d022      	beq.n	800c244 <xTaskCheckForTimeOut+0x60>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800c1fe:	e9d4 6000 	ldrd	r6, r0, [r4]
 800c202:	f8df c050 	ldr.w	ip, [pc, #80]	; 800c254 <xTaskCheckForTimeOut+0x70>
 800c206:	f8dc 7000 	ldr.w	r7, [ip]
 800c20a:	42be      	cmp	r6, r7
 800c20c:	d00a      	beq.n	800c224 <xTaskCheckForTimeOut+0x40>
 800c20e:	4288      	cmp	r0, r1
 800c210:	d808      	bhi.n	800c224 <xTaskCheckForTimeOut+0x40>
            *pxTicksToWait = ( TickType_t ) 0;
 800c212:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 800c214:	2001      	movs	r0, #1
            *pxTicksToWait = ( TickType_t ) 0;
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	9001      	str	r0, [sp, #4]
    taskEXIT_CRITICAL();
 800c21a:	f7f6 f91f 	bl	800245c <vPortExitCritical>
}
 800c21e:	9801      	ldr	r0, [sp, #4]
 800c220:	b003      	add	sp, #12
 800c222:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c224:	1a0f      	subs	r7, r1, r0
        else if( xElapsedTime < *pxTicksToWait )
 800c226:	42bb      	cmp	r3, r7
 800c228:	d9f3      	bls.n	800c212 <xTaskCheckForTimeOut+0x2e>
            *pxTicksToWait -= xElapsedTime;
 800c22a:	1a5b      	subs	r3, r3, r1
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c22c:	f8dc 1000 	ldr.w	r1, [ip]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800c230:	6812      	ldr	r2, [r2, #0]
            *pxTicksToWait -= xElapsedTime;
 800c232:	4403      	add	r3, r0
 800c234:	602b      	str	r3, [r5, #0]
            xReturn = pdFALSE;
 800c236:	2000      	movs	r0, #0
    pxTimeOut->xTimeOnEntering = xTickCount;
 800c238:	e9c4 1200 	strd	r1, r2, [r4]
            xReturn = pdFALSE;
 800c23c:	e7ec      	b.n	800c218 <xTaskCheckForTimeOut+0x34>
    configASSERT( pxTicksToWait );
 800c23e:	f7f6 fa55 	bl	80026ec <ulSetInterruptMask>
 800c242:	e7fe      	b.n	800c242 <xTaskCheckForTimeOut+0x5e>
                xReturn = pdFALSE;
 800c244:	2000      	movs	r0, #0
 800c246:	e7e7      	b.n	800c218 <xTaskCheckForTimeOut+0x34>
    configASSERT( pxTimeOut );
 800c248:	f7f6 fa50 	bl	80026ec <ulSetInterruptMask>
 800c24c:	e7fe      	b.n	800c24c <xTaskCheckForTimeOut+0x68>
 800c24e:	bf00      	nop
 800c250:	20006614 	.word	0x20006614
 800c254:	200065cc 	.word	0x200065cc

0800c258 <vTaskMissedYield>:
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800c258:	2201      	movs	r2, #1
 800c25a:	4b01      	ldr	r3, [pc, #4]	; (800c260 <vTaskMissedYield+0x8>)
 800c25c:	601a      	str	r2, [r3, #0]
}
 800c25e:	4770      	bx	lr
 800c260:	20006674 	.word	0x20006674

0800c264 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 800c264:	4b05      	ldr	r3, [pc, #20]	; (800c27c <xTaskGetSchedulerState+0x18>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	b133      	cbz	r3, 800c278 <xTaskGetSchedulerState+0x14>
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800c26a:	4b05      	ldr	r3, [pc, #20]	; (800c280 <xTaskGetSchedulerState+0x1c>)
 800c26c:	681b      	ldr	r3, [r3, #0]
                    xReturn = taskSCHEDULER_SUSPENDED;
 800c26e:	2b00      	cmp	r3, #0
 800c270:	bf0c      	ite	eq
 800c272:	2002      	moveq	r0, #2
 800c274:	2000      	movne	r0, #0
 800c276:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 800c278:	2001      	movs	r0, #1
    }
 800c27a:	4770      	bx	lr
 800c27c:	200065e8 	.word	0x200065e8
 800c280:	20006334 	.word	0x20006334

0800c284 <xTaskPriorityInherit>:
    {
 800c284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        if( pxMutexHolder != NULL )
 800c288:	4604      	mov	r4, r0
 800c28a:	b1c8      	cbz	r0, 800c2c0 <xTaskPriorityInherit+0x3c>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c28c:	4d2b      	ldr	r5, [pc, #172]	; (800c33c <xTaskPriorityInherit+0xb8>)
 800c28e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800c290:	682a      	ldr	r2, [r5, #0]
 800c292:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c294:	4293      	cmp	r3, r2
 800c296:	d215      	bcs.n	800c2c4 <xTaskPriorityInherit+0x40>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800c298:	6982      	ldr	r2, [r0, #24]
 800c29a:	2a00      	cmp	r2, #0
 800c29c:	db04      	blt.n	800c2a8 <xTaskPriorityInherit+0x24>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 800c29e:	682a      	ldr	r2, [r5, #0]
 800c2a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c2a2:	f1c2 020a 	rsb	r2, r2, #10
 800c2a6:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c2a8:	4e25      	ldr	r6, [pc, #148]	; (800c340 <xTaskPriorityInherit+0xbc>)
 800c2aa:	6962      	ldr	r2, [r4, #20]
 800c2ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c2b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d00e      	beq.n	800c2d6 <xTaskPriorityInherit+0x52>
                xReturn = pdTRUE;
 800c2b8:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c2ba:	682b      	ldr	r3, [r5, #0]
 800c2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2be:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
 800c2c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800c2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ca:	4298      	cmp	r0, r3
 800c2cc:	bf2c      	ite	cs
 800c2ce:	2000      	movcs	r0, #0
 800c2d0:	2001      	movcc	r0, #1
    }
 800c2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2d6:	1d27      	adds	r7, r4, #4
 800c2d8:	4638      	mov	r0, r7
 800c2da:	f7f5 ffbb 	bl	8002254 <uxListRemove>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c2de:	f8df c064 	ldr.w	ip, [pc, #100]	; 800c344 <xTaskPriorityInherit+0xc0>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2e2:	b948      	cbnz	r0, 800c2f8 <xTaskPriorityInherit+0x74>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c2e8:	fa03 f202 	lsl.w	r2, r3, r2
 800c2ec:	f8dc 3000 	ldr.w	r3, [ip]
 800c2f0:	ea23 0302 	bic.w	r3, r3, r2
 800c2f4:	f8cc 3000 	str.w	r3, [ip]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800c2f8:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c2fa:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800c2fc:	f8dc 8000 	ldr.w	r8, [ip]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800c302:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800c306:	eb06 0582 	add.w	r5, r6, r2, lsl #2
 800c30a:	f8d5 e004 	ldr.w	lr, [r5, #4]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c30e:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800c310:	f8de 1008 	ldr.w	r1, [lr, #8]
 800c314:	0092      	lsls	r2, r2, #2
 800c316:	fa00 f303 	lsl.w	r3, r0, r3
 800c31a:	60e1      	str	r1, [r4, #12]
 800c31c:	ea43 0308 	orr.w	r3, r3, r8
 800c320:	58b1      	ldr	r1, [r6, r2]
 800c322:	f8cc 3000 	str.w	r3, [ip]
 800c326:	f8de 3008 	ldr.w	r3, [lr, #8]
 800c32a:	4401      	add	r1, r0
 800c32c:	f8c4 e008 	str.w	lr, [r4, #8]
 800c330:	605f      	str	r7, [r3, #4]
 800c332:	f8ce 7008 	str.w	r7, [lr, #8]
 800c336:	6165      	str	r5, [r4, #20]
 800c338:	50b1      	str	r1, [r6, r2]
 800c33a:	e7c1      	b.n	800c2c0 <xTaskPriorityInherit+0x3c>
 800c33c:	20006058 	.word	0x20006058
 800c340:	20006064 	.word	0x20006064
 800c344:	2000653c 	.word	0x2000653c

0800c348 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 800c348:	b1a8      	cbz	r0, 800c376 <xTaskPriorityDisinherit+0x2e>
            configASSERT( pxTCB == pxCurrentTCB );
 800c34a:	4b28      	ldr	r3, [pc, #160]	; (800c3ec <xTaskPriorityDisinherit+0xa4>)
    {
 800c34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            configASSERT( pxTCB == pxCurrentTCB );
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4604      	mov	r4, r0
 800c354:	4283      	cmp	r3, r0
 800c356:	d002      	beq.n	800c35e <xTaskPriorityDisinherit+0x16>
 800c358:	f7f6 f9c8 	bl	80026ec <ulSetInterruptMask>
 800c35c:	e7fe      	b.n	800c35c <xTaskPriorityDisinherit+0x14>
            configASSERT( pxTCB->uxMutexesHeld );
 800c35e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c360:	b15b      	cbz	r3, 800c37a <xTaskPriorityDisinherit+0x32>
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c362:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c364:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 800c366:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c368:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 800c36a:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c36c:	d000      	beq.n	800c370 <xTaskPriorityDisinherit+0x28>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c36e:	b13b      	cbz	r3, 800c380 <xTaskPriorityDisinherit+0x38>
        BaseType_t xReturn = pdFALSE;
 800c370:	2000      	movs	r0, #0
    }
 800c372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        BaseType_t xReturn = pdFALSE;
 800c376:	2000      	movs	r0, #0
    }
 800c378:	4770      	bx	lr
            configASSERT( pxTCB->uxMutexesHeld );
 800c37a:	f7f6 f9b7 	bl	80026ec <ulSetInterruptMask>
 800c37e:	e7fe      	b.n	800c37e <xTaskPriorityDisinherit+0x36>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c380:	1d05      	adds	r5, r0, #4
 800c382:	4628      	mov	r0, r5
 800c384:	f7f5 ff66 	bl	8002254 <uxListRemove>
 800c388:	b338      	cbz	r0, 800c3da <xTaskPriorityDisinherit+0x92>
 800c38a:	4919      	ldr	r1, [pc, #100]	; (800c3f0 <xTaskPriorityDisinherit+0xa8>)
                    prvAddTaskToReadyList( pxTCB );
 800c38c:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c38e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 800c390:	f8df e060 	ldr.w	lr, [pc, #96]	; 800c3f4 <xTaskPriorityDisinherit+0xac>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800c394:	f1c3 020a 	rsb	r2, r3, #10
 800c398:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 800c39a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800c39e:	eb0e 0682 	add.w	r6, lr, r2, lsl #2
 800c3a2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 800c3a6:	f8d1 8000 	ldr.w	r8, [r1]
 800c3aa:	f8dc 7008 	ldr.w	r7, [ip, #8]
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c3ae:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 800c3b0:	0092      	lsls	r2, r2, #2
 800c3b2:	fa00 f303 	lsl.w	r3, r0, r3
 800c3b6:	60e7      	str	r7, [r4, #12]
 800c3b8:	ea43 0308 	orr.w	r3, r3, r8
 800c3bc:	f85e 7002 	ldr.w	r7, [lr, r2]
 800c3c0:	600b      	str	r3, [r1, #0]
 800c3c2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c3c6:	4407      	add	r7, r0
 800c3c8:	f8c4 c008 	str.w	ip, [r4, #8]
 800c3cc:	605d      	str	r5, [r3, #4]
 800c3ce:	f8cc 5008 	str.w	r5, [ip, #8]
 800c3d2:	6166      	str	r6, [r4, #20]
 800c3d4:	f84e 7002 	str.w	r7, [lr, r2]
        return xReturn;
 800c3d8:	e7cb      	b.n	800c372 <xTaskPriorityDisinherit+0x2a>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c3da:	2201      	movs	r2, #1
 800c3dc:	4904      	ldr	r1, [pc, #16]	; (800c3f0 <xTaskPriorityDisinherit+0xa8>)
 800c3de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c3e0:	680b      	ldr	r3, [r1, #0]
 800c3e2:	4082      	lsls	r2, r0
 800c3e4:	ea23 0302 	bic.w	r3, r3, r2
 800c3e8:	600b      	str	r3, [r1, #0]
 800c3ea:	e7cf      	b.n	800c38c <xTaskPriorityDisinherit+0x44>
 800c3ec:	20006058 	.word	0x20006058
 800c3f0:	2000653c 	.word	0x2000653c
 800c3f4:	20006064 	.word	0x20006064

0800c3f8 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 800c3f8:	b180      	cbz	r0, 800c41c <vTaskPriorityDisinheritAfterTimeout+0x24>
    {
 800c3fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
            configASSERT( pxTCB->uxMutexesHeld );
 800c3fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c3fe:	4604      	mov	r4, r0
 800c400:	b14b      	cbz	r3, 800c416 <vTaskPriorityDisinheritAfterTimeout+0x1e>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c402:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
            if( pxTCB->uxPriority != uxPriorityToUse )
 800c404:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c406:	4281      	cmp	r1, r0
 800c408:	bf38      	it	cc
 800c40a:	4601      	movcc	r1, r0
 800c40c:	428a      	cmp	r2, r1
 800c40e:	d001      	beq.n	800c414 <vTaskPriorityDisinheritAfterTimeout+0x1c>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c410:	2b01      	cmp	r3, #1
 800c412:	d004      	beq.n	800c41e <vTaskPriorityDisinheritAfterTimeout+0x26>
    }
 800c414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            configASSERT( pxTCB->uxMutexesHeld );
 800c416:	f7f6 f969 	bl	80026ec <ulSetInterruptMask>
 800c41a:	e7fe      	b.n	800c41a <vTaskPriorityDisinheritAfterTimeout+0x22>
 800c41c:	4770      	bx	lr
                    configASSERT( pxTCB != pxCurrentTCB );
 800c41e:	4b20      	ldr	r3, [pc, #128]	; (800c4a0 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	42a3      	cmp	r3, r4
 800c424:	d031      	beq.n	800c48a <vTaskPriorityDisinheritAfterTimeout+0x92>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800c426:	69a3      	ldr	r3, [r4, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 800c428:	62e1      	str	r1, [r4, #44]	; 0x2c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800c42a:	2b00      	cmp	r3, #0
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800c42c:	bfa8      	it	ge
 800c42e:	f1c1 010a 	rsbge	r1, r1, #10
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c432:	4d1c      	ldr	r5, [pc, #112]	; (800c4a4 <vTaskPriorityDisinheritAfterTimeout+0xac>)
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 800c434:	bfa8      	it	ge
 800c436:	61a1      	strge	r1, [r4, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c438:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800c43c:	6961      	ldr	r1, [r4, #20]
 800c43e:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 800c442:	4299      	cmp	r1, r3
 800c444:	d1e6      	bne.n	800c414 <vTaskPriorityDisinheritAfterTimeout+0x1c>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c446:	1d26      	adds	r6, r4, #4
 800c448:	4630      	mov	r0, r6
 800c44a:	f7f5 ff03 	bl	8002254 <uxListRemove>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c44e:	2201      	movs	r2, #1
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c450:	b1f0      	cbz	r0, 800c490 <vTaskPriorityDisinheritAfterTimeout+0x98>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c452:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c454:	4914      	ldr	r1, [pc, #80]	; (800c4a8 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800c456:	409a      	lsls	r2, r3
                        prvAddTaskToReadyList( pxTCB );
 800c458:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800c45c:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f8d1 c000 	ldr.w	ip, [r1]
 800c466:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 800c46a:	6883      	ldr	r3, [r0, #8]
 800c46c:	ea4c 0202 	orr.w	r2, ip, r2
 800c470:	60e3      	str	r3, [r4, #12]
 800c472:	600a      	str	r2, [r1, #0]
 800c474:	f855 200e 	ldr.w	r2, [r5, lr]
 800c478:	6881      	ldr	r1, [r0, #8]
 800c47a:	3201      	adds	r2, #1
 800c47c:	60a0      	str	r0, [r4, #8]
 800c47e:	604e      	str	r6, [r1, #4]
 800c480:	6086      	str	r6, [r0, #8]
 800c482:	6167      	str	r7, [r4, #20]
 800c484:	f845 200e 	str.w	r2, [r5, lr]
    }
 800c488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    configASSERT( pxTCB != pxCurrentTCB );
 800c48a:	f7f6 f92f 	bl	80026ec <ulSetInterruptMask>
 800c48e:	e7fe      	b.n	800c48e <vTaskPriorityDisinheritAfterTimeout+0x96>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c490:	4905      	ldr	r1, [pc, #20]	; (800c4a8 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800c492:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c494:	6808      	ldr	r0, [r1, #0]
 800c496:	409a      	lsls	r2, r3
 800c498:	ea20 0002 	bic.w	r0, r0, r2
 800c49c:	6008      	str	r0, [r1, #0]
 800c49e:	e7db      	b.n	800c458 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800c4a0:	20006058 	.word	0x20006058
 800c4a4:	20006064 	.word	0x20006064
 800c4a8:	2000653c 	.word	0x2000653c

0800c4ac <pvTaskIncrementMutexHeldCount>:
        pxTCB = pxCurrentTCB;
 800c4ac:	4b03      	ldr	r3, [pc, #12]	; (800c4bc <pvTaskIncrementMutexHeldCount+0x10>)
 800c4ae:	6818      	ldr	r0, [r3, #0]
        if( pxTCB != NULL )
 800c4b0:	b110      	cbz	r0, 800c4b8 <pvTaskIncrementMutexHeldCount+0xc>
            ( pxTCB->uxMutexesHeld )++;
 800c4b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	6503      	str	r3, [r0, #80]	; 0x50
    }
 800c4b8:	4770      	bx	lr
 800c4ba:	bf00      	nop
 800c4bc:	20006058 	.word	0x20006058

0800c4c0 <vApplicationGetTimerTaskMemory>:
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800c4c0:	2380      	movs	r3, #128	; 0x80
    {
 800c4c2:	b430      	push	{r4, r5}
        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 800c4c4:	4d03      	ldr	r5, [pc, #12]	; (800c4d4 <vApplicationGetTimerTaskMemory+0x14>)
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 800c4c6:	4c04      	ldr	r4, [pc, #16]	; (800c4d8 <vApplicationGetTimerTaskMemory+0x18>)
        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 800c4c8:	6005      	str	r5, [r0, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 800c4ca:	600c      	str	r4, [r1, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800c4cc:	6013      	str	r3, [r2, #0]
    }
 800c4ce:	bc30      	pop	{r4, r5}
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	20006618 	.word	0x20006618
 800c4d8:	2000633c 	.word	0x2000633c

0800c4dc <prvCheckForValidListAndQueue>:
        pxOverflowTimerList = pxTemp;
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800c4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 800c4de:	4c12      	ldr	r4, [pc, #72]	; (800c528 <prvCheckForValidListAndQueue+0x4c>)
    {
 800c4e0:	b083      	sub	sp, #12
        taskENTER_CRITICAL();
 800c4e2:	f7f5 ffad 	bl	8002440 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 800c4e6:	6825      	ldr	r5, [r4, #0]
 800c4e8:	b125      	cbz	r5, 800c4f4 <prvCheckForValidListAndQueue+0x18>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
 800c4ea:	b003      	add	sp, #12
 800c4ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 800c4f0:	f7f5 bfb4 	b.w	800245c <vPortExitCritical>
                vListInitialise( &xActiveTimerList1 );
 800c4f4:	4f0d      	ldr	r7, [pc, #52]	; (800c52c <prvCheckForValidListAndQueue+0x50>)
                vListInitialise( &xActiveTimerList2 );
 800c4f6:	4e0e      	ldr	r6, [pc, #56]	; (800c530 <prvCheckForValidListAndQueue+0x54>)
                vListInitialise( &xActiveTimerList1 );
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f7f5 fe83 	bl	8002204 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800c4fe:	4630      	mov	r0, r6
 800c500:	f7f5 fe80 	bl	8002204 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800c504:	4a0b      	ldr	r2, [pc, #44]	; (800c534 <prvCheckForValidListAndQueue+0x58>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c506:	9500      	str	r5, [sp, #0]
                pxCurrentTimerList = &xActiveTimerList1;
 800c508:	6017      	str	r7, [r2, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800c50a:	4a0b      	ldr	r2, [pc, #44]	; (800c538 <prvCheckForValidListAndQueue+0x5c>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c50c:	2110      	movs	r1, #16
                pxOverflowTimerList = &xActiveTimerList2;
 800c50e:	6016      	str	r6, [r2, #0]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c510:	4b0a      	ldr	r3, [pc, #40]	; (800c53c <prvCheckForValidListAndQueue+0x60>)
 800c512:	4a0b      	ldr	r2, [pc, #44]	; (800c540 <prvCheckForValidListAndQueue+0x64>)
 800c514:	200a      	movs	r0, #10
 800c516:	f7f6 f9f1 	bl	80028fc <xQueueGenericCreateStatic>
 800c51a:	6020      	str	r0, [r4, #0]
    }
 800c51c:	b003      	add	sp, #12
 800c51e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 800c522:	f7f5 bf9b 	b.w	800245c <vPortExitCritical>
 800c526:	bf00      	nop
 800c528:	2000679c 	.word	0x2000679c
 800c52c:	20006720 	.word	0x20006720
 800c530:	20006734 	.word	0x20006734
 800c534:	20006678 	.word	0x20006678
 800c538:	2000667c 	.word	0x2000667c
 800c53c:	2000674c 	.word	0x2000674c
 800c540:	20006680 	.word	0x20006680

0800c544 <prvReloadTimer>:
    {
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	4604      	mov	r4, r0
 800c548:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c54a:	e005      	b.n	800c558 <prvReloadTimer+0x14>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d818      	bhi.n	800c582 <prvReloadTimer+0x3e>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c550:	4620      	mov	r0, r4
 800c552:	6a23      	ldr	r3, [r4, #32]
 800c554:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800c556:	4629      	mov	r1, r5
 800c558:	69a3      	ldr	r3, [r4, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800c55a:	1a72      	subs	r2, r6, r1
 800c55c:	185d      	adds	r5, r3, r1
 800c55e:	bf2c      	ite	cs
 800c560:	2001      	movcs	r0, #1
 800c562:	2000      	movcc	r0, #0
        if( xNextExpiryTime <= xTimeNow )
 800c564:	42b5      	cmp	r5, r6
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c566:	6065      	str	r5, [r4, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c568:	6124      	str	r4, [r4, #16]
        if( xNextExpiryTime <= xTimeNow )
 800c56a:	d9ef      	bls.n	800c54c <prvReloadTimer+0x8>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c56c:	42b1      	cmp	r1, r6
 800c56e:	d901      	bls.n	800c574 <prvReloadTimer+0x30>
 800c570:	2800      	cmp	r0, #0
 800c572:	d0ed      	beq.n	800c550 <prvReloadTimer+0xc>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c574:	4b06      	ldr	r3, [pc, #24]	; (800c590 <prvReloadTimer+0x4c>)
 800c576:	1d21      	adds	r1, r4, #4
 800c578:	6818      	ldr	r0, [r3, #0]
    }
 800c57a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c57e:	f7f5 be51 	b.w	8002224 <vListInsert>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c582:	4b04      	ldr	r3, [pc, #16]	; (800c594 <prvReloadTimer+0x50>)
 800c584:	1d21      	adds	r1, r4, #4
 800c586:	6818      	ldr	r0, [r3, #0]
    }
 800c588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c58c:	f7f5 be4a 	b.w	8002224 <vListInsert>
 800c590:	20006678 	.word	0x20006678
 800c594:	2000667c 	.word	0x2000667c

0800c598 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c598:	4a10      	ldr	r2, [pc, #64]	; (800c5dc <prvProcessExpiredTimer+0x44>)
    {
 800c59a:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c59c:	6812      	ldr	r2, [r2, #0]
    {
 800c59e:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5a0:	68d2      	ldr	r2, [r2, #12]
    {
 800c5a2:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c5a4:	68d4      	ldr	r4, [r2, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c5a6:	1d20      	adds	r0, r4, #4
 800c5a8:	f7f5 fe54 	bl	8002254 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800c5ac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800c5b0:	075a      	lsls	r2, r3, #29
 800c5b2:	d408      	bmi.n	800c5c6 <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c5b4:	f023 0301 	bic.w	r3, r3, #1
 800c5b8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5bc:	4620      	mov	r0, r4
 800c5be:	6a23      	ldr	r3, [r4, #32]
    }
 800c5c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5c4:	4718      	bx	r3
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800c5c6:	4620      	mov	r0, r4
 800c5c8:	4632      	mov	r2, r6
 800c5ca:	4629      	mov	r1, r5
 800c5cc:	f7ff ffba 	bl	800c544 <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	6a23      	ldr	r3, [r4, #32]
    }
 800c5d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5d8:	4718      	bx	r3
 800c5da:	bf00      	nop
 800c5dc:	20006678 	.word	0x20006678

0800c5e0 <prvTimerTask>:
    {
 800c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5e4:	2600      	movs	r6, #0
 800c5e6:	4d7f      	ldr	r5, [pc, #508]	; (800c7e4 <prvTimerTask+0x204>)
 800c5e8:	4f7f      	ldr	r7, [pc, #508]	; (800c7e8 <prvTimerTask+0x208>)
 800c5ea:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800c7f0 <prvTimerTask+0x210>
 800c5ee:	4c7f      	ldr	r4, [pc, #508]	; (800c7ec <prvTimerTask+0x20c>)
 800c5f0:	b084      	sub	sp, #16
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c5f2:	682b      	ldr	r3, [r5, #0]
 800c5f4:	f8d3 a000 	ldr.w	sl, [r3]
 800c5f8:	f1ba 0f00 	cmp.w	sl, #0
 800c5fc:	f000 80bf 	beq.w	800c77e <prvTimerTask+0x19e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c600:	68db      	ldr	r3, [r3, #12]
 800c602:	f8d3 a000 	ldr.w	sl, [r3]
        vTaskSuspendAll();
 800c606:	f7ff fcef 	bl	800bfe8 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 800c60a:	f7ff fd05 	bl	800c018 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800c60e:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800c610:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 800c612:	4283      	cmp	r3, r0
 800c614:	d83f      	bhi.n	800c696 <prvTimerTask+0xb6>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c616:	4582      	cmp	sl, r0
        xLastTime = xTimeNow;
 800c618:	6038      	str	r0, [r7, #0]
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c61a:	f240 80cf 	bls.w	800c7bc <prvTimerTask+0x1dc>
 800c61e:	2200      	movs	r2, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c620:	6820      	ldr	r0, [r4, #0]
 800c622:	ebaa 0109 	sub.w	r1, sl, r9
 800c626:	f7f6 fc83 	bl	8002f30 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800c62a:	f7ff fce5 	bl	800bff8 <xTaskResumeAll>
 800c62e:	2800      	cmp	r0, #0
 800c630:	f000 80b6 	beq.w	800c7a0 <prvTimerTask+0x1c0>
        DaemonTaskMessage_t xMessage = { 0 };
 800c634:	e9cd 6600 	strd	r6, r6, [sp]
 800c638:	e9cd 6602 	strd	r6, r6, [sp, #8]
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800c63c:	2200      	movs	r2, #0
 800c63e:	4669      	mov	r1, sp
 800c640:	6820      	ldr	r0, [r4, #0]
 800c642:	f7f6 fb25 	bl	8002c90 <xQueueReceive>
 800c646:	2800      	cmp	r0, #0
 800c648:	d0d3      	beq.n	800c5f2 <prvTimerTask+0x12>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c64a:	9b00      	ldr	r3, [sp, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	f2c0 808d 	blt.w	800c76c <prvTimerTask+0x18c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c652:	f8dd 9008 	ldr.w	r9, [sp, #8]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800c656:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800c65a:	b11b      	cbz	r3, 800c664 <prvTimerTask+0x84>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c65c:	f109 0004 	add.w	r0, r9, #4
 800c660:	f7f5 fdf8 	bl	8002254 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
 800c664:	f7ff fcd8 	bl	800c018 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800c668:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800c66a:	4682      	mov	sl, r0
        if( xTimeNow < xLastTime )
 800c66c:	4298      	cmp	r0, r3
 800c66e:	d326      	bcc.n	800c6be <prvTimerTask+0xde>
                switch( xMessage.xMessageID )
 800c670:	9b00      	ldr	r3, [sp, #0]
        xLastTime = xTimeNow;
 800c672:	f8c7 a000 	str.w	sl, [r7]
                switch( xMessage.xMessageID )
 800c676:	3b01      	subs	r3, #1
 800c678:	2b08      	cmp	r3, #8
 800c67a:	d8df      	bhi.n	800c63c <prvTimerTask+0x5c>
 800c67c:	e8df f003 	tbb	[pc, r3]
 800c680:	4d662929 	.word	0x4d662929
 800c684:	6629296d 	.word	0x6629296d
 800c688:	4d          	.byte	0x4d
 800c689:	00          	.byte	0x00
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c68a:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800c68c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c690:	6818      	ldr	r0, [r3, #0]
 800c692:	f7ff ff81 	bl	800c598 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c696:	682b      	ldr	r3, [r5, #0]
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	2a00      	cmp	r2, #0
 800c69c:	d1f5      	bne.n	800c68a <prvTimerTask+0xaa>
        pxCurrentTimerList = pxOverflowTimerList;
 800c69e:	f8d8 2000 	ldr.w	r2, [r8]
        xLastTime = xTimeNow;
 800c6a2:	f8c7 9000 	str.w	r9, [r7]
        pxCurrentTimerList = pxOverflowTimerList;
 800c6a6:	602a      	str	r2, [r5, #0]
        pxOverflowTimerList = pxTemp;
 800c6a8:	f8c8 3000 	str.w	r3, [r8]
                ( void ) xTaskResumeAll();
 800c6ac:	f7ff fca4 	bl	800bff8 <xTaskResumeAll>
 800c6b0:	e7c0      	b.n	800c634 <prvTimerTask+0x54>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6b2:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800c6b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c6b8:	6818      	ldr	r0, [r3, #0]
 800c6ba:	f7ff ff6d 	bl	800c598 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6be:	682b      	ldr	r3, [r5, #0]
 800c6c0:	681a      	ldr	r2, [r3, #0]
 800c6c2:	2a00      	cmp	r2, #0
 800c6c4:	d1f5      	bne.n	800c6b2 <prvTimerTask+0xd2>
        pxCurrentTimerList = pxOverflowTimerList;
 800c6c6:	f8d8 2000 	ldr.w	r2, [r8]
        pxOverflowTimerList = pxTemp;
 800c6ca:	f8c8 3000 	str.w	r3, [r8]
        pxCurrentTimerList = pxOverflowTimerList;
 800c6ce:	602a      	str	r2, [r5, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 800c6d0:	e7ce      	b.n	800c670 <prvTimerTask+0x90>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800c6d2:	f899 0028 	ldrb.w	r0, [r9, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6d6:	9b01      	ldr	r3, [sp, #4]
 800c6d8:	f8d9 2018 	ldr.w	r2, [r9, #24]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800c6dc:	f040 0c01 	orr.w	ip, r0, #1
 800c6e0:	1899      	adds	r1, r3, r2
 800c6e2:	f889 c028 	strb.w	ip, [r9, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c6e6:	bf2c      	ite	cs
 800c6e8:	f04f 0c01 	movcs.w	ip, #1
 800c6ec:	f04f 0c00 	movcc.w	ip, #0
        if( xNextExpiryTime <= xTimeNow )
 800c6f0:	4551      	cmp	r1, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6f2:	f8c9 1004 	str.w	r1, [r9, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6f6:	f8c9 9010 	str.w	r9, [r9, #16]
        if( xNextExpiryTime <= xTimeNow )
 800c6fa:	d854      	bhi.n	800c7a6 <prvTimerTask+0x1c6>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800c6fc:	ebaa 0303 	sub.w	r3, sl, r3
 800c700:	429a      	cmp	r2, r3
 800c702:	d81c      	bhi.n	800c73e <prvTimerTask+0x15e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800c704:	0743      	lsls	r3, r0, #29
 800c706:	d464      	bmi.n	800c7d2 <prvTimerTask+0x1f2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c708:	f020 0001 	bic.w	r0, r0, #1
 800c70c:	f889 0028 	strb.w	r0, [r9, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c710:	4648      	mov	r0, r9
 800c712:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800c716:	4798      	blx	r3
 800c718:	e790      	b.n	800c63c <prvTimerTask+0x5c>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800c71a:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c71e:	9b01      	ldr	r3, [sp, #4]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800c720:	f042 0201 	orr.w	r2, r2, #1
 800c724:	f889 2028 	strb.w	r2, [r9, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c728:	f8c9 3018 	str.w	r3, [r9, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d055      	beq.n	800c7dc <prvTimerTask+0x1fc>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c730:	4453      	add	r3, sl
        if( xNextExpiryTime <= xTimeNow )
 800c732:	4553      	cmp	r3, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c734:	f8c9 3004 	str.w	r3, [r9, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c738:	f8c9 9010 	str.w	r9, [r9, #16]
        if( xNextExpiryTime <= xTimeNow )
 800c73c:	d838      	bhi.n	800c7b0 <prvTimerTask+0x1d0>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c73e:	f8d8 0000 	ldr.w	r0, [r8]
 800c742:	f109 0104 	add.w	r1, r9, #4
 800c746:	f7f5 fd6d 	bl	8002224 <vListInsert>
        return xProcessTimerNow;
 800c74a:	e777      	b.n	800c63c <prvTimerTask+0x5c>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c74c:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800c750:	f023 0301 	bic.w	r3, r3, #1
 800c754:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
                        break;
 800c758:	e770      	b.n	800c63c <prvTimerTask+0x5c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c75a:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800c75e:	079a      	lsls	r2, r3, #30
 800c760:	d533      	bpl.n	800c7ca <prvTimerTask+0x1ea>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800c762:	f023 0301 	bic.w	r3, r3, #1
 800c766:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
 800c76a:	e767      	b.n	800c63c <prvTimerTask+0x5c>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c76c:	9b01      	ldr	r3, [sp, #4]
 800c76e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c772:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c774:	9b00      	ldr	r3, [sp, #0]
 800c776:	2b00      	cmp	r3, #0
 800c778:	f6ff af60 	blt.w	800c63c <prvTimerTask+0x5c>
 800c77c:	e769      	b.n	800c652 <prvTimerTask+0x72>
        vTaskSuspendAll();
 800c77e:	f7ff fc33 	bl	800bfe8 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 800c782:	f7ff fc49 	bl	800c018 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800c786:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800c788:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 800c78a:	4298      	cmp	r0, r3
 800c78c:	d383      	bcc.n	800c696 <prvTimerTask+0xb6>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c78e:	f8d8 3000 	ldr.w	r3, [r8]
        xLastTime = xTimeNow;
 800c792:	f8c7 9000 	str.w	r9, [r7]
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	fab2 f282 	clz	r2, r2
 800c79c:	0952      	lsrs	r2, r2, #5
 800c79e:	e73f      	b.n	800c620 <prvTimerTask+0x40>
                        taskYIELD_WITHIN_API();
 800c7a0:	f7f5 fe42 	bl	8002428 <vPortYield>
 800c7a4:	e746      	b.n	800c634 <prvTimerTask+0x54>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c7a6:	4553      	cmp	r3, sl
 800c7a8:	d902      	bls.n	800c7b0 <prvTimerTask+0x1d0>
 800c7aa:	f1bc 0f00 	cmp.w	ip, #0
 800c7ae:	d0a9      	beq.n	800c704 <prvTimerTask+0x124>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7b0:	6828      	ldr	r0, [r5, #0]
 800c7b2:	f109 0104 	add.w	r1, r9, #4
 800c7b6:	f7f5 fd35 	bl	8002224 <vListInsert>
 800c7ba:	e73f      	b.n	800c63c <prvTimerTask+0x5c>
                    ( void ) xTaskResumeAll();
 800c7bc:	f7ff fc1c 	bl	800bff8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c7c0:	4649      	mov	r1, r9
 800c7c2:	4650      	mov	r0, sl
 800c7c4:	f7ff fee8 	bl	800c598 <prvProcessExpiredTimer>
 800c7c8:	e734      	b.n	800c634 <prvTimerTask+0x54>
                                vPortFree( pxTimer );
 800c7ca:	4648      	mov	r0, r9
 800c7cc:	f7f5 fc8e 	bl	80020ec <vPortFree>
 800c7d0:	e734      	b.n	800c63c <prvTimerTask+0x5c>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800c7d2:	4652      	mov	r2, sl
 800c7d4:	4648      	mov	r0, r9
 800c7d6:	f7ff feb5 	bl	800c544 <prvReloadTimer>
 800c7da:	e799      	b.n	800c710 <prvTimerTask+0x130>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c7dc:	f7f5 ff86 	bl	80026ec <ulSetInterruptMask>
 800c7e0:	e7fe      	b.n	800c7e0 <prvTimerTask+0x200>
 800c7e2:	bf00      	nop
 800c7e4:	20006678 	.word	0x20006678
 800c7e8:	20006748 	.word	0x20006748
 800c7ec:	2000679c 	.word	0x2000679c
 800c7f0:	2000667c 	.word	0x2000667c

0800c7f4 <xTimerCreateTimerTask>:
    {
 800c7f4:	b530      	push	{r4, r5, lr}
 800c7f6:	b089      	sub	sp, #36	; 0x24
        prvCheckForValidListAndQueue();
 800c7f8:	f7ff fe70 	bl	800c4dc <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800c7fc:	4b0f      	ldr	r3, [pc, #60]	; (800c83c <xTimerCreateTimerTask+0x48>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	b1cb      	cbz	r3, 800c836 <xTimerCreateTimerTask+0x42>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800c802:	2400      	movs	r4, #0
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800c804:	2509      	movs	r5, #9
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800c806:	aa07      	add	r2, sp, #28
 800c808:	a906      	add	r1, sp, #24
 800c80a:	a805      	add	r0, sp, #20
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800c80c:	e9cd 4405 	strd	r4, r4, [sp, #20]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800c810:	f7ff fe56 	bl	800c4c0 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800c814:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800c818:	4623      	mov	r3, r4
 800c81a:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c81e:	9a07      	ldr	r2, [sp, #28]
 800c820:	4907      	ldr	r1, [pc, #28]	; (800c840 <xTimerCreateTimerTask+0x4c>)
 800c822:	4808      	ldr	r0, [pc, #32]	; (800c844 <xTimerCreateTimerTask+0x50>)
 800c824:	9500      	str	r5, [sp, #0]
 800c826:	f7ff fb07 	bl	800be38 <xTaskCreateStatic>
 800c82a:	4b07      	ldr	r3, [pc, #28]	; (800c848 <xTimerCreateTimerTask+0x54>)
 800c82c:	6018      	str	r0, [r3, #0]
                    if( xTimerTaskHandle != NULL )
 800c82e:	b110      	cbz	r0, 800c836 <xTimerCreateTimerTask+0x42>
    }
 800c830:	2001      	movs	r0, #1
 800c832:	b009      	add	sp, #36	; 0x24
 800c834:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn );
 800c836:	f7f5 ff59 	bl	80026ec <ulSetInterruptMask>
 800c83a:	e7fe      	b.n	800c83a <xTimerCreateTimerTask+0x46>
 800c83c:	2000679c 	.word	0x2000679c
 800c840:	08013c70 	.word	0x08013c70
 800c844:	0800c5e1 	.word	0x0800c5e1
 800c848:	200067a0 	.word	0x200067a0

0800c84c <__libc_init_array>:
 800c84c:	b570      	push	{r4, r5, r6, lr}
 800c84e:	4e0d      	ldr	r6, [pc, #52]	; (800c884 <__libc_init_array+0x38>)
 800c850:	4d0d      	ldr	r5, [pc, #52]	; (800c888 <__libc_init_array+0x3c>)
 800c852:	1b76      	subs	r6, r6, r5
 800c854:	10b6      	asrs	r6, r6, #2
 800c856:	d006      	beq.n	800c866 <__libc_init_array+0x1a>
 800c858:	2400      	movs	r4, #0
 800c85a:	3401      	adds	r4, #1
 800c85c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c860:	4798      	blx	r3
 800c862:	42a6      	cmp	r6, r4
 800c864:	d1f9      	bne.n	800c85a <__libc_init_array+0xe>
 800c866:	4e09      	ldr	r6, [pc, #36]	; (800c88c <__libc_init_array+0x40>)
 800c868:	f006 f8ba 	bl	80129e0 <_init>
 800c86c:	4d08      	ldr	r5, [pc, #32]	; (800c890 <__libc_init_array+0x44>)
 800c86e:	1b76      	subs	r6, r6, r5
 800c870:	10b6      	asrs	r6, r6, #2
 800c872:	d006      	beq.n	800c882 <__libc_init_array+0x36>
 800c874:	2400      	movs	r4, #0
 800c876:	3401      	adds	r4, #1
 800c878:	f855 3b04 	ldr.w	r3, [r5], #4
 800c87c:	4798      	blx	r3
 800c87e:	42a6      	cmp	r6, r4
 800c880:	d1f9      	bne.n	800c876 <__libc_init_array+0x2a>
 800c882:	bd70      	pop	{r4, r5, r6, pc}
 800c884:	08014078 	.word	0x08014078
 800c888:	08014078 	.word	0x08014078
 800c88c:	08014080 	.word	0x08014080
 800c890:	08014078 	.word	0x08014078

0800c894 <_malloc_r>:
 800c894:	f101 030b 	add.w	r3, r1, #11
 800c898:	2b16      	cmp	r3, #22
 800c89a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c89e:	4605      	mov	r5, r0
 800c8a0:	b083      	sub	sp, #12
 800c8a2:	d824      	bhi.n	800c8ee <_malloc_r+0x5a>
 800c8a4:	2910      	cmp	r1, #16
 800c8a6:	f200 80f5 	bhi.w	800ca94 <_malloc_r+0x200>
 800c8aa:	f000 fb7b 	bl	800cfa4 <__malloc_lock>
 800c8ae:	2410      	movs	r4, #16
 800c8b0:	2218      	movs	r2, #24
 800c8b2:	2002      	movs	r0, #2
 800c8b4:	4ec0      	ldr	r6, [pc, #768]	; (800cbb8 <_malloc_r+0x324>)
 800c8b6:	4432      	add	r2, r6
 800c8b8:	6853      	ldr	r3, [r2, #4]
 800c8ba:	f1a2 0108 	sub.w	r1, r2, #8
 800c8be:	428b      	cmp	r3, r1
 800c8c0:	f000 80ef 	beq.w	800caa2 <_malloc_r+0x20e>
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	4628      	mov	r0, r5
 800c8c8:	f022 0203 	bic.w	r2, r2, #3
 800c8cc:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 800c8d0:	441a      	add	r2, r3
 800c8d2:	60e1      	str	r1, [r4, #12]
 800c8d4:	608c      	str	r4, [r1, #8]
 800c8d6:	f103 0408 	add.w	r4, r3, #8
 800c8da:	6853      	ldr	r3, [r2, #4]
 800c8dc:	f043 0301 	orr.w	r3, r3, #1
 800c8e0:	6053      	str	r3, [r2, #4]
 800c8e2:	f000 fb65 	bl	800cfb0 <__malloc_unlock>
 800c8e6:	4620      	mov	r0, r4
 800c8e8:	b003      	add	sp, #12
 800c8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	f023 0407 	bic.w	r4, r3, #7
 800c8f4:	f2c0 80ce 	blt.w	800ca94 <_malloc_r+0x200>
 800c8f8:	42a1      	cmp	r1, r4
 800c8fa:	f200 80cb 	bhi.w	800ca94 <_malloc_r+0x200>
 800c8fe:	f000 fb51 	bl	800cfa4 <__malloc_lock>
 800c902:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800c906:	f0c0 81c2 	bcc.w	800cc8e <_malloc_r+0x3fa>
 800c90a:	0a63      	lsrs	r3, r4, #9
 800c90c:	f000 8133 	beq.w	800cb76 <_malloc_r+0x2e2>
 800c910:	2b04      	cmp	r3, #4
 800c912:	f200 8198 	bhi.w	800cc46 <_malloc_r+0x3b2>
 800c916:	09a3      	lsrs	r3, r4, #6
 800c918:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800c91c:	f103 0738 	add.w	r7, r3, #56	; 0x38
 800c920:	00c3      	lsls	r3, r0, #3
 800c922:	4ea5      	ldr	r6, [pc, #660]	; (800cbb8 <_malloc_r+0x324>)
 800c924:	4433      	add	r3, r6
 800c926:	f1a3 0c08 	sub.w	ip, r3, #8
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	459c      	cmp	ip, r3
 800c92e:	d107      	bne.n	800c940 <_malloc_r+0xac>
 800c930:	e0bc      	b.n	800caac <_malloc_r+0x218>
 800c932:	2900      	cmp	r1, #0
 800c934:	f280 8150 	bge.w	800cbd8 <_malloc_r+0x344>
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	459c      	cmp	ip, r3
 800c93c:	f000 80b6 	beq.w	800caac <_malloc_r+0x218>
 800c940:	685a      	ldr	r2, [r3, #4]
 800c942:	f022 0203 	bic.w	r2, r2, #3
 800c946:	1b11      	subs	r1, r2, r4
 800c948:	290f      	cmp	r1, #15
 800c94a:	ddf2      	ble.n	800c932 <_malloc_r+0x9e>
 800c94c:	6933      	ldr	r3, [r6, #16]
 800c94e:	4638      	mov	r0, r7
 800c950:	f8df e27c 	ldr.w	lr, [pc, #636]	; 800cbd0 <_malloc_r+0x33c>
 800c954:	4573      	cmp	r3, lr
 800c956:	f040 80af 	bne.w	800cab8 <_malloc_r+0x224>
 800c95a:	1083      	asrs	r3, r0, #2
 800c95c:	2101      	movs	r1, #1
 800c95e:	6872      	ldr	r2, [r6, #4]
 800c960:	4099      	lsls	r1, r3
 800c962:	4291      	cmp	r1, r2
 800c964:	f240 80d1 	bls.w	800cb0a <_malloc_r+0x276>
 800c968:	68b7      	ldr	r7, [r6, #8]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f023 0903 	bic.w	r9, r3, #3
 800c970:	eba9 0304 	sub.w	r3, r9, r4
 800c974:	2b0f      	cmp	r3, #15
 800c976:	dd02      	ble.n	800c97e <_malloc_r+0xea>
 800c978:	454c      	cmp	r4, r9
 800c97a:	f240 810c 	bls.w	800cb96 <_malloc_r+0x302>
 800c97e:	4b8f      	ldr	r3, [pc, #572]	; (800cbbc <_malloc_r+0x328>)
 800c980:	eb07 0b09 	add.w	fp, r7, r9
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	eb04 0803 	add.w	r8, r4, r3
 800c98a:	4b8d      	ldr	r3, [pc, #564]	; (800cbc0 <_malloc_r+0x32c>)
 800c98c:	681a      	ldr	r2, [r3, #0]
 800c98e:	3201      	adds	r2, #1
 800c990:	f000 81cb 	beq.w	800cd2a <_malloc_r+0x496>
 800c994:	f241 020f 	movw	r2, #4111	; 0x100f
 800c998:	4442      	add	r2, r8
 800c99a:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800cbd4 <_malloc_r+0x340>
 800c99e:	ea02 0808 	and.w	r8, r2, r8
 800c9a2:	4641      	mov	r1, r8
 800c9a4:	4628      	mov	r0, r5
 800c9a6:	f000 fb09 	bl	800cfbc <_sbrk_r>
 800c9aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c9ae:	4682      	mov	sl, r0
 800c9b0:	4b83      	ldr	r3, [pc, #524]	; (800cbc0 <_malloc_r+0x32c>)
 800c9b2:	f000 81a9 	beq.w	800cd08 <_malloc_r+0x474>
 800c9b6:	42b7      	cmp	r7, r6
 800c9b8:	d002      	beq.n	800c9c0 <_malloc_r+0x12c>
 800c9ba:	4583      	cmp	fp, r0
 800c9bc:	f200 81a4 	bhi.w	800cd08 <_malloc_r+0x474>
 800c9c0:	4a80      	ldr	r2, [pc, #512]	; (800cbc4 <_malloc_r+0x330>)
 800c9c2:	45d3      	cmp	fp, sl
 800c9c4:	6811      	ldr	r1, [r2, #0]
 800c9c6:	4441      	add	r1, r8
 800c9c8:	6011      	str	r1, [r2, #0]
 800c9ca:	f000 81a0 	beq.w	800cd0e <_malloc_r+0x47a>
 800c9ce:	6818      	ldr	r0, [r3, #0]
 800c9d0:	3001      	adds	r0, #1
 800c9d2:	f000 81a7 	beq.w	800cd24 <_malloc_r+0x490>
 800c9d6:	ebaa 0b0b 	sub.w	fp, sl, fp
 800c9da:	4459      	add	r1, fp
 800c9dc:	6011      	str	r1, [r2, #0]
 800c9de:	f01a 0307 	ands.w	r3, sl, #7
 800c9e2:	f000 81ac 	beq.w	800cd3e <_malloc_r+0x4aa>
 800c9e6:	f1c3 0108 	rsb	r1, r3, #8
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	9301      	str	r3, [sp, #4]
 800c9ee:	448a      	add	sl, r1
 800c9f0:	f241 0108 	movw	r1, #4104	; 0x1008
 800c9f4:	44d0      	add	r8, sl
 800c9f6:	1ac9      	subs	r1, r1, r3
 800c9f8:	eba1 0108 	sub.w	r1, r1, r8
 800c9fc:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
 800ca00:	4659      	mov	r1, fp
 800ca02:	f000 fadb 	bl	800cfbc <_sbrk_r>
 800ca06:	1c42      	adds	r2, r0, #1
 800ca08:	9b01      	ldr	r3, [sp, #4]
 800ca0a:	4a6e      	ldr	r2, [pc, #440]	; (800cbc4 <_malloc_r+0x330>)
 800ca0c:	f000 81de 	beq.w	800cdcc <_malloc_r+0x538>
 800ca10:	eba0 000a 	sub.w	r0, r0, sl
 800ca14:	eb00 080b 	add.w	r8, r0, fp
 800ca18:	6810      	ldr	r0, [r2, #0]
 800ca1a:	f048 0301 	orr.w	r3, r8, #1
 800ca1e:	42b7      	cmp	r7, r6
 800ca20:	f8c6 a008 	str.w	sl, [r6, #8]
 800ca24:	eb0b 0100 	add.w	r1, fp, r0
 800ca28:	f8ca 3004 	str.w	r3, [sl, #4]
 800ca2c:	6011      	str	r1, [r2, #0]
 800ca2e:	f000 81a9 	beq.w	800cd84 <_malloc_r+0x4f0>
 800ca32:	f1b9 0f0f 	cmp.w	r9, #15
 800ca36:	f240 81a7 	bls.w	800cd88 <_malloc_r+0x4f4>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f1a9 000c 	sub.w	r0, r9, #12
 800ca40:	f04f 0c05 	mov.w	ip, #5
 800ca44:	f020 0007 	bic.w	r0, r0, #7
 800ca48:	f003 0301 	and.w	r3, r3, #1
 800ca4c:	4303      	orrs	r3, r0
 800ca4e:	280f      	cmp	r0, #15
 800ca50:	607b      	str	r3, [r7, #4]
 800ca52:	eb07 0300 	add.w	r3, r7, r0
 800ca56:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 800ca5a:	f200 81ad 	bhi.w	800cdb8 <_malloc_r+0x524>
 800ca5e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800ca62:	4657      	mov	r7, sl
 800ca64:	4a58      	ldr	r2, [pc, #352]	; (800cbc8 <_malloc_r+0x334>)
 800ca66:	6810      	ldr	r0, [r2, #0]
 800ca68:	4288      	cmp	r0, r1
 800ca6a:	bf38      	it	cc
 800ca6c:	6011      	strcc	r1, [r2, #0]
 800ca6e:	4a57      	ldr	r2, [pc, #348]	; (800cbcc <_malloc_r+0x338>)
 800ca70:	6810      	ldr	r0, [r2, #0]
 800ca72:	4288      	cmp	r0, r1
 800ca74:	bf38      	it	cc
 800ca76:	6011      	strcc	r1, [r2, #0]
 800ca78:	f023 0803 	bic.w	r8, r3, #3
 800ca7c:	4544      	cmp	r4, r8
 800ca7e:	eba8 0304 	sub.w	r3, r8, r4
 800ca82:	d802      	bhi.n	800ca8a <_malloc_r+0x1f6>
 800ca84:	2b0f      	cmp	r3, #15
 800ca86:	f300 8086 	bgt.w	800cb96 <_malloc_r+0x302>
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	2400      	movs	r4, #0
 800ca8e:	f000 fa8f 	bl	800cfb0 <__malloc_unlock>
 800ca92:	e728      	b.n	800c8e6 <_malloc_r+0x52>
 800ca94:	2400      	movs	r4, #0
 800ca96:	230c      	movs	r3, #12
 800ca98:	4620      	mov	r0, r4
 800ca9a:	602b      	str	r3, [r5, #0]
 800ca9c:	b003      	add	sp, #12
 800ca9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa2:	68d3      	ldr	r3, [r2, #12]
 800caa4:	429a      	cmp	r2, r3
 800caa6:	f47f af0d 	bne.w	800c8c4 <_malloc_r+0x30>
 800caaa:	3002      	adds	r0, #2
 800caac:	6933      	ldr	r3, [r6, #16]
 800caae:	f8df e120 	ldr.w	lr, [pc, #288]	; 800cbd0 <_malloc_r+0x33c>
 800cab2:	4573      	cmp	r3, lr
 800cab4:	f43f af51 	beq.w	800c95a <_malloc_r+0xc6>
 800cab8:	6859      	ldr	r1, [r3, #4]
 800caba:	f021 0103 	bic.w	r1, r1, #3
 800cabe:	1b0a      	subs	r2, r1, r4
 800cac0:	2a0f      	cmp	r2, #15
 800cac2:	f300 80e8 	bgt.w	800cc96 <_malloc_r+0x402>
 800cac6:	2a00      	cmp	r2, #0
 800cac8:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 800cacc:	da58      	bge.n	800cb80 <_malloc_r+0x2ec>
 800cace:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cad2:	f080 8093 	bcs.w	800cbfc <_malloc_r+0x368>
 800cad6:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
 800cada:	2201      	movs	r2, #1
 800cadc:	0949      	lsrs	r1, r1, #5
 800cade:	f10c 0c01 	add.w	ip, ip, #1
 800cae2:	408a      	lsls	r2, r1
 800cae4:	6871      	ldr	r1, [r6, #4]
 800cae6:	f856 703c 	ldr.w	r7, [r6, ip, lsl #3]
 800caea:	430a      	orrs	r2, r1
 800caec:	eb06 01cc 	add.w	r1, r6, ip, lsl #3
 800caf0:	3908      	subs	r1, #8
 800caf2:	6072      	str	r2, [r6, #4]
 800caf4:	e9c3 7102 	strd	r7, r1, [r3, #8]
 800caf8:	f846 303c 	str.w	r3, [r6, ip, lsl #3]
 800cafc:	60fb      	str	r3, [r7, #12]
 800cafe:	1083      	asrs	r3, r0, #2
 800cb00:	2101      	movs	r1, #1
 800cb02:	4099      	lsls	r1, r3
 800cb04:	4291      	cmp	r1, r2
 800cb06:	f63f af2f 	bhi.w	800c968 <_malloc_r+0xd4>
 800cb0a:	4211      	tst	r1, r2
 800cb0c:	d105      	bne.n	800cb1a <_malloc_r+0x286>
 800cb0e:	f020 0003 	bic.w	r0, r0, #3
 800cb12:	0049      	lsls	r1, r1, #1
 800cb14:	3004      	adds	r0, #4
 800cb16:	4211      	tst	r1, r2
 800cb18:	d0fb      	beq.n	800cb12 <_malloc_r+0x27e>
 800cb1a:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 800cb1e:	4680      	mov	r8, r0
 800cb20:	46cc      	mov	ip, r9
 800cb22:	f8dc 700c 	ldr.w	r7, [ip, #12]
 800cb26:	45bc      	cmp	ip, r7
 800cb28:	d107      	bne.n	800cb3a <_malloc_r+0x2a6>
 800cb2a:	e098      	b.n	800cc5e <_malloc_r+0x3ca>
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	f280 809f 	bge.w	800cc70 <_malloc_r+0x3dc>
 800cb32:	68ff      	ldr	r7, [r7, #12]
 800cb34:	45bc      	cmp	ip, r7
 800cb36:	f000 8092 	beq.w	800cc5e <_malloc_r+0x3ca>
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	f022 0203 	bic.w	r2, r2, #3
 800cb40:	1b13      	subs	r3, r2, r4
 800cb42:	2b0f      	cmp	r3, #15
 800cb44:	ddf2      	ble.n	800cb2c <_malloc_r+0x298>
 800cb46:	1939      	adds	r1, r7, r4
 800cb48:	f044 0401 	orr.w	r4, r4, #1
 800cb4c:	4628      	mov	r0, r5
 800cb4e:	607c      	str	r4, [r7, #4]
 800cb50:	f043 0401 	orr.w	r4, r3, #1
 800cb54:	e9d7 c502 	ldrd	ip, r5, [r7, #8]
 800cb58:	f8cc 500c 	str.w	r5, [ip, #12]
 800cb5c:	f8c5 c008 	str.w	ip, [r5, #8]
 800cb60:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800cb64:	604c      	str	r4, [r1, #4]
 800cb66:	f107 0408 	add.w	r4, r7, #8
 800cb6a:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 800cb6e:	50bb      	str	r3, [r7, r2]
 800cb70:	f000 fa1e 	bl	800cfb0 <__malloc_unlock>
 800cb74:	e6b7      	b.n	800c8e6 <_malloc_r+0x52>
 800cb76:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb7a:	2040      	movs	r0, #64	; 0x40
 800cb7c:	273f      	movs	r7, #63	; 0x3f
 800cb7e:	e6d0      	b.n	800c922 <_malloc_r+0x8e>
 800cb80:	4419      	add	r1, r3
 800cb82:	f103 0408 	add.w	r4, r3, #8
 800cb86:	4628      	mov	r0, r5
 800cb88:	684b      	ldr	r3, [r1, #4]
 800cb8a:	f043 0301 	orr.w	r3, r3, #1
 800cb8e:	604b      	str	r3, [r1, #4]
 800cb90:	f000 fa0e 	bl	800cfb0 <__malloc_unlock>
 800cb94:	e6a7      	b.n	800c8e6 <_malloc_r+0x52>
 800cb96:	193a      	adds	r2, r7, r4
 800cb98:	f044 0401 	orr.w	r4, r4, #1
 800cb9c:	f043 0301 	orr.w	r3, r3, #1
 800cba0:	4628      	mov	r0, r5
 800cba2:	607c      	str	r4, [r7, #4]
 800cba4:	f107 0408 	add.w	r4, r7, #8
 800cba8:	60b2      	str	r2, [r6, #8]
 800cbaa:	6053      	str	r3, [r2, #4]
 800cbac:	f000 fa00 	bl	800cfb0 <__malloc_unlock>
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	b003      	add	sp, #12
 800cbb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbb8:	20000618 	.word	0x20000618
 800cbbc:	200067d4 	.word	0x200067d4
 800cbc0:	20000a20 	.word	0x20000a20
 800cbc4:	200067a4 	.word	0x200067a4
 800cbc8:	200067cc 	.word	0x200067cc
 800cbcc:	200067d0 	.word	0x200067d0
 800cbd0:	20000620 	.word	0x20000620
 800cbd4:	fffff000 	.word	0xfffff000
 800cbd8:	441a      	add	r2, r3
 800cbda:	f103 0408 	add.w	r4, r3, #8
 800cbde:	4628      	mov	r0, r5
 800cbe0:	e9d3 6102 	ldrd	r6, r1, [r3, #8]
 800cbe4:	6853      	ldr	r3, [r2, #4]
 800cbe6:	60f1      	str	r1, [r6, #12]
 800cbe8:	f043 0301 	orr.w	r3, r3, #1
 800cbec:	608e      	str	r6, [r1, #8]
 800cbee:	6053      	str	r3, [r2, #4]
 800cbf0:	f000 f9de 	bl	800cfb0 <__malloc_unlock>
 800cbf4:	4620      	mov	r0, r4
 800cbf6:	b003      	add	sp, #12
 800cbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbfc:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800cc00:	ea4f 2251 	mov.w	r2, r1, lsr #9
 800cc04:	d359      	bcc.n	800ccba <_malloc_r+0x426>
 800cc06:	2a14      	cmp	r2, #20
 800cc08:	f200 80aa 	bhi.w	800cd60 <_malloc_r+0x4cc>
 800cc0c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800cc10:	325b      	adds	r2, #91	; 0x5b
 800cc12:	00ff      	lsls	r7, r7, #3
 800cc14:	eb06 0c07 	add.w	ip, r6, r7
 800cc18:	59f7      	ldr	r7, [r6, r7]
 800cc1a:	f1ac 0c08 	sub.w	ip, ip, #8
 800cc1e:	45bc      	cmp	ip, r7
 800cc20:	f000 8086 	beq.w	800cd30 <_malloc_r+0x49c>
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	f022 0203 	bic.w	r2, r2, #3
 800cc2a:	428a      	cmp	r2, r1
 800cc2c:	d902      	bls.n	800cc34 <_malloc_r+0x3a0>
 800cc2e:	68bf      	ldr	r7, [r7, #8]
 800cc30:	45bc      	cmp	ip, r7
 800cc32:	d1f7      	bne.n	800cc24 <_malloc_r+0x390>
 800cc34:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800cc38:	6872      	ldr	r2, [r6, #4]
 800cc3a:	e9c3 7c02 	strd	r7, ip, [r3, #8]
 800cc3e:	f8cc 3008 	str.w	r3, [ip, #8]
 800cc42:	60fb      	str	r3, [r7, #12]
 800cc44:	e75b      	b.n	800cafe <_malloc_r+0x26a>
 800cc46:	2b14      	cmp	r3, #20
 800cc48:	d93d      	bls.n	800ccc6 <_malloc_r+0x432>
 800cc4a:	2b54      	cmp	r3, #84	; 0x54
 800cc4c:	f200 8090 	bhi.w	800cd70 <_malloc_r+0x4dc>
 800cc50:	0b23      	lsrs	r3, r4, #12
 800cc52:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800cc56:	f103 076e 	add.w	r7, r3, #110	; 0x6e
 800cc5a:	00c3      	lsls	r3, r0, #3
 800cc5c:	e661      	b.n	800c922 <_malloc_r+0x8e>
 800cc5e:	f108 0801 	add.w	r8, r8, #1
 800cc62:	f10c 0c08 	add.w	ip, ip, #8
 800cc66:	f018 0f03 	tst.w	r8, #3
 800cc6a:	f47f af5a 	bne.w	800cb22 <_malloc_r+0x28e>
 800cc6e:	e035      	b.n	800ccdc <_malloc_r+0x448>
 800cc70:	443a      	add	r2, r7
 800cc72:	463c      	mov	r4, r7
 800cc74:	68f9      	ldr	r1, [r7, #12]
 800cc76:	4628      	mov	r0, r5
 800cc78:	6853      	ldr	r3, [r2, #4]
 800cc7a:	f043 0301 	orr.w	r3, r3, #1
 800cc7e:	6053      	str	r3, [r2, #4]
 800cc80:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800cc84:	60d9      	str	r1, [r3, #12]
 800cc86:	608b      	str	r3, [r1, #8]
 800cc88:	f000 f992 	bl	800cfb0 <__malloc_unlock>
 800cc8c:	e62b      	b.n	800c8e6 <_malloc_r+0x52>
 800cc8e:	08e0      	lsrs	r0, r4, #3
 800cc90:	f104 0208 	add.w	r2, r4, #8
 800cc94:	e60e      	b.n	800c8b4 <_malloc_r+0x20>
 800cc96:	4628      	mov	r0, r5
 800cc98:	191d      	adds	r5, r3, r4
 800cc9a:	f044 0401 	orr.w	r4, r4, #1
 800cc9e:	605c      	str	r4, [r3, #4]
 800cca0:	f042 0401 	orr.w	r4, r2, #1
 800cca4:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800cca8:	606c      	str	r4, [r5, #4]
 800ccaa:	f103 0408 	add.w	r4, r3, #8
 800ccae:	e9c5 ee02 	strd	lr, lr, [r5, #8]
 800ccb2:	505a      	str	r2, [r3, r1]
 800ccb4:	f000 f97c 	bl	800cfb0 <__malloc_unlock>
 800ccb8:	e615      	b.n	800c8e6 <_malloc_r+0x52>
 800ccba:	098a      	lsrs	r2, r1, #6
 800ccbc:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800ccc0:	3238      	adds	r2, #56	; 0x38
 800ccc2:	00ff      	lsls	r7, r7, #3
 800ccc4:	e7a6      	b.n	800cc14 <_malloc_r+0x380>
 800ccc6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800ccca:	f103 075b 	add.w	r7, r3, #91	; 0x5b
 800ccce:	00c3      	lsls	r3, r0, #3
 800ccd0:	e627      	b.n	800c922 <_malloc_r+0x8e>
 800ccd2:	f859 3908 	ldr.w	r3, [r9], #-8
 800ccd6:	454b      	cmp	r3, r9
 800ccd8:	f040 8092 	bne.w	800ce00 <_malloc_r+0x56c>
 800ccdc:	f010 0f03 	tst.w	r0, #3
 800cce0:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800cce4:	d1f5      	bne.n	800ccd2 <_malloc_r+0x43e>
 800cce6:	6873      	ldr	r3, [r6, #4]
 800cce8:	ea23 0301 	bic.w	r3, r3, r1
 800ccec:	6073      	str	r3, [r6, #4]
 800ccee:	0049      	lsls	r1, r1, #1
 800ccf0:	f43f ae3a 	beq.w	800c968 <_malloc_r+0xd4>
 800ccf4:	4299      	cmp	r1, r3
 800ccf6:	d903      	bls.n	800cd00 <_malloc_r+0x46c>
 800ccf8:	e636      	b.n	800c968 <_malloc_r+0xd4>
 800ccfa:	0049      	lsls	r1, r1, #1
 800ccfc:	f108 0804 	add.w	r8, r8, #4
 800cd00:	4219      	tst	r1, r3
 800cd02:	d0fa      	beq.n	800ccfa <_malloc_r+0x466>
 800cd04:	4640      	mov	r0, r8
 800cd06:	e708      	b.n	800cb1a <_malloc_r+0x286>
 800cd08:	68b7      	ldr	r7, [r6, #8]
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	e6b4      	b.n	800ca78 <_malloc_r+0x1e4>
 800cd0e:	f3cb 000b 	ubfx	r0, fp, #0, #12
 800cd12:	2800      	cmp	r0, #0
 800cd14:	f47f ae5b 	bne.w	800c9ce <_malloc_r+0x13a>
 800cd18:	44c8      	add	r8, r9
 800cd1a:	68b7      	ldr	r7, [r6, #8]
 800cd1c:	f048 0301 	orr.w	r3, r8, #1
 800cd20:	607b      	str	r3, [r7, #4]
 800cd22:	e69f      	b.n	800ca64 <_malloc_r+0x1d0>
 800cd24:	f8c3 a000 	str.w	sl, [r3]
 800cd28:	e659      	b.n	800c9de <_malloc_r+0x14a>
 800cd2a:	f108 0810 	add.w	r8, r8, #16
 800cd2e:	e638      	b.n	800c9a2 <_malloc_r+0x10e>
 800cd30:	1092      	asrs	r2, r2, #2
 800cd32:	2101      	movs	r1, #1
 800cd34:	4091      	lsls	r1, r2
 800cd36:	6872      	ldr	r2, [r6, #4]
 800cd38:	430a      	orrs	r2, r1
 800cd3a:	6072      	str	r2, [r6, #4]
 800cd3c:	e77d      	b.n	800cc3a <_malloc_r+0x3a6>
 800cd3e:	eb0a 0108 	add.w	r1, sl, r8
 800cd42:	4628      	mov	r0, r5
 800cd44:	9301      	str	r3, [sp, #4]
 800cd46:	4249      	negs	r1, r1
 800cd48:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
 800cd4c:	4659      	mov	r1, fp
 800cd4e:	f000 f935 	bl	800cfbc <_sbrk_r>
 800cd52:	1c43      	adds	r3, r0, #1
 800cd54:	4a2b      	ldr	r2, [pc, #172]	; (800ce04 <_malloc_r+0x570>)
 800cd56:	9b01      	ldr	r3, [sp, #4]
 800cd58:	f47f ae5a 	bne.w	800ca10 <_malloc_r+0x17c>
 800cd5c:	469b      	mov	fp, r3
 800cd5e:	e65b      	b.n	800ca18 <_malloc_r+0x184>
 800cd60:	2a54      	cmp	r2, #84	; 0x54
 800cd62:	d815      	bhi.n	800cd90 <_malloc_r+0x4fc>
 800cd64:	0b0a      	lsrs	r2, r1, #12
 800cd66:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800cd6a:	326e      	adds	r2, #110	; 0x6e
 800cd6c:	00ff      	lsls	r7, r7, #3
 800cd6e:	e751      	b.n	800cc14 <_malloc_r+0x380>
 800cd70:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800cd74:	d815      	bhi.n	800cda2 <_malloc_r+0x50e>
 800cd76:	0be3      	lsrs	r3, r4, #15
 800cd78:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800cd7c:	f103 0777 	add.w	r7, r3, #119	; 0x77
 800cd80:	00c3      	lsls	r3, r0, #3
 800cd82:	e5ce      	b.n	800c922 <_malloc_r+0x8e>
 800cd84:	4657      	mov	r7, sl
 800cd86:	e66d      	b.n	800ca64 <_malloc_r+0x1d0>
 800cd88:	2301      	movs	r3, #1
 800cd8a:	f8ca 3004 	str.w	r3, [sl, #4]
 800cd8e:	e67c      	b.n	800ca8a <_malloc_r+0x1f6>
 800cd90:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800cd94:	d821      	bhi.n	800cdda <_malloc_r+0x546>
 800cd96:	0bca      	lsrs	r2, r1, #15
 800cd98:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800cd9c:	3277      	adds	r2, #119	; 0x77
 800cd9e:	00ff      	lsls	r7, r7, #3
 800cda0:	e738      	b.n	800cc14 <_malloc_r+0x380>
 800cda2:	f240 5254 	movw	r2, #1364	; 0x554
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d821      	bhi.n	800cdee <_malloc_r+0x55a>
 800cdaa:	0ca3      	lsrs	r3, r4, #18
 800cdac:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800cdb0:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 800cdb4:	00c3      	lsls	r3, r0, #3
 800cdb6:	e5b4      	b.n	800c922 <_malloc_r+0x8e>
 800cdb8:	f107 0108 	add.w	r1, r7, #8
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	f002 ff5b 	bl	800fc78 <_free_r>
 800cdc2:	68b7      	ldr	r7, [r6, #8]
 800cdc4:	4a0f      	ldr	r2, [pc, #60]	; (800ce04 <_malloc_r+0x570>)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	6811      	ldr	r1, [r2, #0]
 800cdca:	e64b      	b.n	800ca64 <_malloc_r+0x1d0>
 800cdcc:	3b08      	subs	r3, #8
 800cdce:	f04f 0b00 	mov.w	fp, #0
 800cdd2:	4498      	add	r8, r3
 800cdd4:	eba8 080a 	sub.w	r8, r8, sl
 800cdd8:	e61e      	b.n	800ca18 <_malloc_r+0x184>
 800cdda:	f240 5754 	movw	r7, #1364	; 0x554
 800cdde:	42ba      	cmp	r2, r7
 800cde0:	d80a      	bhi.n	800cdf8 <_malloc_r+0x564>
 800cde2:	0c8a      	lsrs	r2, r1, #18
 800cde4:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800cde8:	327c      	adds	r2, #124	; 0x7c
 800cdea:	00ff      	lsls	r7, r7, #3
 800cdec:	e712      	b.n	800cc14 <_malloc_r+0x380>
 800cdee:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800cdf2:	207f      	movs	r0, #127	; 0x7f
 800cdf4:	277e      	movs	r7, #126	; 0x7e
 800cdf6:	e594      	b.n	800c922 <_malloc_r+0x8e>
 800cdf8:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800cdfc:	227e      	movs	r2, #126	; 0x7e
 800cdfe:	e709      	b.n	800cc14 <_malloc_r+0x380>
 800ce00:	6873      	ldr	r3, [r6, #4]
 800ce02:	e774      	b.n	800ccee <_malloc_r+0x45a>
 800ce04:	200067a4 	.word	0x200067a4

0800ce08 <memmove>:
 800ce08:	4288      	cmp	r0, r1
 800ce0a:	d90d      	bls.n	800ce28 <memmove+0x20>
 800ce0c:	188b      	adds	r3, r1, r2
 800ce0e:	4283      	cmp	r3, r0
 800ce10:	d90a      	bls.n	800ce28 <memmove+0x20>
 800ce12:	eb00 0c02 	add.w	ip, r0, r2
 800ce16:	b1ba      	cbz	r2, 800ce48 <memmove+0x40>
 800ce18:	4662      	mov	r2, ip
 800ce1a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
 800ce1e:	4299      	cmp	r1, r3
 800ce20:	f802 cd01 	strb.w	ip, [r2, #-1]!
 800ce24:	d1f9      	bne.n	800ce1a <memmove+0x12>
 800ce26:	4770      	bx	lr
 800ce28:	2a0f      	cmp	r2, #15
 800ce2a:	d80e      	bhi.n	800ce4a <memmove+0x42>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800ce32:	b14a      	cbz	r2, 800ce48 <memmove+0x40>
 800ce34:	f10c 0c01 	add.w	ip, ip, #1
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	448c      	add	ip, r1
 800ce3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce40:	4561      	cmp	r1, ip
 800ce42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce46:	d1f9      	bne.n	800ce3c <memmove+0x34>
 800ce48:	4770      	bx	lr
 800ce4a:	ea40 0301 	orr.w	r3, r0, r1
 800ce4e:	079b      	lsls	r3, r3, #30
 800ce50:	d150      	bne.n	800cef4 <memmove+0xec>
 800ce52:	f1a2 0310 	sub.w	r3, r2, #16
 800ce56:	f101 0c20 	add.w	ip, r1, #32
 800ce5a:	b570      	push	{r4, r5, r6, lr}
 800ce5c:	f023 050f 	bic.w	r5, r3, #15
 800ce60:	f101 0e10 	add.w	lr, r1, #16
 800ce64:	f100 0410 	add.w	r4, r0, #16
 800ce68:	091b      	lsrs	r3, r3, #4
 800ce6a:	44ac      	add	ip, r5
 800ce6c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
 800ce70:	f10e 0e10 	add.w	lr, lr, #16
 800ce74:	3410      	adds	r4, #16
 800ce76:	f844 5c20 	str.w	r5, [r4, #-32]
 800ce7a:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
 800ce7e:	f844 5c1c 	str.w	r5, [r4, #-28]
 800ce82:	f85e 5c18 	ldr.w	r5, [lr, #-24]
 800ce86:	f844 5c18 	str.w	r5, [r4, #-24]
 800ce8a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
 800ce8e:	45e6      	cmp	lr, ip
 800ce90:	f844 5c14 	str.w	r5, [r4, #-20]
 800ce94:	d1ea      	bne.n	800ce6c <memmove+0x64>
 800ce96:	3301      	adds	r3, #1
 800ce98:	f012 0f0c 	tst.w	r2, #12
 800ce9c:	f002 0c0f 	and.w	ip, r2, #15
 800cea0:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 800cea4:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800cea8:	d028      	beq.n	800cefc <memmove+0xf4>
 800ceaa:	f1ac 0c04 	sub.w	ip, ip, #4
 800ceae:	1f1c      	subs	r4, r3, #4
 800ceb0:	468e      	mov	lr, r1
 800ceb2:	f02c 0603 	bic.w	r6, ip, #3
 800ceb6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
 800ceba:	441e      	add	r6, r3
 800cebc:	f85e 5b04 	ldr.w	r5, [lr], #4
 800cec0:	f844 5f04 	str.w	r5, [r4, #4]!
 800cec4:	42b4      	cmp	r4, r6
 800cec6:	d1f9      	bne.n	800cebc <memmove+0xb4>
 800cec8:	f10c 0c01 	add.w	ip, ip, #1
 800cecc:	f002 0203 	and.w	r2, r2, #3
 800ced0:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800ced4:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 800ced8:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800cedc:	b14a      	cbz	r2, 800cef2 <memmove+0xea>
 800cede:	f10c 0c01 	add.w	ip, ip, #1
 800cee2:	3b01      	subs	r3, #1
 800cee4:	448c      	add	ip, r1
 800cee6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ceea:	4561      	cmp	r1, ip
 800ceec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cef0:	d1f9      	bne.n	800cee6 <memmove+0xde>
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 800cef8:	4603      	mov	r3, r0
 800cefa:	e79b      	b.n	800ce34 <memmove+0x2c>
 800cefc:	4662      	mov	r2, ip
 800cefe:	e7eb      	b.n	800ced8 <memmove+0xd0>

0800cf00 <memset>:
 800cf00:	b570      	push	{r4, r5, r6, lr}
 800cf02:	0786      	lsls	r6, r0, #30
 800cf04:	d048      	beq.n	800cf98 <memset+0x98>
 800cf06:	1e54      	subs	r4, r2, #1
 800cf08:	2a00      	cmp	r2, #0
 800cf0a:	d03f      	beq.n	800cf8c <memset+0x8c>
 800cf0c:	b2ca      	uxtb	r2, r1
 800cf0e:	4603      	mov	r3, r0
 800cf10:	e001      	b.n	800cf16 <memset+0x16>
 800cf12:	3c01      	subs	r4, #1
 800cf14:	d33a      	bcc.n	800cf8c <memset+0x8c>
 800cf16:	f803 2b01 	strb.w	r2, [r3], #1
 800cf1a:	079d      	lsls	r5, r3, #30
 800cf1c:	d1f9      	bne.n	800cf12 <memset+0x12>
 800cf1e:	2c03      	cmp	r4, #3
 800cf20:	d92d      	bls.n	800cf7e <memset+0x7e>
 800cf22:	b2cd      	uxtb	r5, r1
 800cf24:	2c0f      	cmp	r4, #15
 800cf26:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800cf2a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800cf2e:	d936      	bls.n	800cf9e <memset+0x9e>
 800cf30:	f1a4 0c10 	sub.w	ip, r4, #16
 800cf34:	f103 0e20 	add.w	lr, r3, #32
 800cf38:	f103 0210 	add.w	r2, r3, #16
 800cf3c:	f02c 060f 	bic.w	r6, ip, #15
 800cf40:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800cf44:	44b6      	add	lr, r6
 800cf46:	e942 5504 	strd	r5, r5, [r2, #-16]
 800cf4a:	e942 5502 	strd	r5, r5, [r2, #-8]
 800cf4e:	3210      	adds	r2, #16
 800cf50:	4572      	cmp	r2, lr
 800cf52:	d1f8      	bne.n	800cf46 <memset+0x46>
 800cf54:	f10c 0201 	add.w	r2, ip, #1
 800cf58:	f014 0f0c 	tst.w	r4, #12
 800cf5c:	f004 0c0f 	and.w	ip, r4, #15
 800cf60:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800cf64:	d013      	beq.n	800cf8e <memset+0x8e>
 800cf66:	f1ac 0304 	sub.w	r3, ip, #4
 800cf6a:	f023 0303 	bic.w	r3, r3, #3
 800cf6e:	3304      	adds	r3, #4
 800cf70:	4413      	add	r3, r2
 800cf72:	f842 5b04 	str.w	r5, [r2], #4
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d1fb      	bne.n	800cf72 <memset+0x72>
 800cf7a:	f00c 0403 	and.w	r4, ip, #3
 800cf7e:	b12c      	cbz	r4, 800cf8c <memset+0x8c>
 800cf80:	b2ca      	uxtb	r2, r1
 800cf82:	441c      	add	r4, r3
 800cf84:	f803 2b01 	strb.w	r2, [r3], #1
 800cf88:	429c      	cmp	r4, r3
 800cf8a:	d1fb      	bne.n	800cf84 <memset+0x84>
 800cf8c:	bd70      	pop	{r4, r5, r6, pc}
 800cf8e:	4664      	mov	r4, ip
 800cf90:	4613      	mov	r3, r2
 800cf92:	2c00      	cmp	r4, #0
 800cf94:	d1f4      	bne.n	800cf80 <memset+0x80>
 800cf96:	e7f9      	b.n	800cf8c <memset+0x8c>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	4614      	mov	r4, r2
 800cf9c:	e7bf      	b.n	800cf1e <memset+0x1e>
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	46a4      	mov	ip, r4
 800cfa2:	e7e0      	b.n	800cf66 <memset+0x66>

0800cfa4 <__malloc_lock>:
 800cfa4:	4801      	ldr	r0, [pc, #4]	; (800cfac <__malloc_lock+0x8>)
 800cfa6:	f002 bf75 	b.w	800fe94 <__retarget_lock_acquire_recursive>
 800cfaa:	bf00      	nop
 800cfac:	200067dc 	.word	0x200067dc

0800cfb0 <__malloc_unlock>:
 800cfb0:	4801      	ldr	r0, [pc, #4]	; (800cfb8 <__malloc_unlock+0x8>)
 800cfb2:	f002 bf71 	b.w	800fe98 <__retarget_lock_release_recursive>
 800cfb6:	bf00      	nop
 800cfb8:	200067dc 	.word	0x200067dc

0800cfbc <_sbrk_r>:
 800cfbc:	b538      	push	{r3, r4, r5, lr}
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	4d06      	ldr	r5, [pc, #24]	; (800cfdc <_sbrk_r+0x20>)
 800cfc2:	4604      	mov	r4, r0
 800cfc4:	4608      	mov	r0, r1
 800cfc6:	602a      	str	r2, [r5, #0]
 800cfc8:	f005 fcf0 	bl	80129ac <_sbrk>
 800cfcc:	1c43      	adds	r3, r0, #1
 800cfce:	d000      	beq.n	800cfd2 <_sbrk_r+0x16>
 800cfd0:	bd38      	pop	{r3, r4, r5, pc}
 800cfd2:	682b      	ldr	r3, [r5, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d0fb      	beq.n	800cfd0 <_sbrk_r+0x14>
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	bd38      	pop	{r3, r4, r5, pc}
 800cfdc:	200067e8 	.word	0x200067e8

0800cfe0 <sprintf>:
 800cfe0:	b40e      	push	{r1, r2, r3}
 800cfe2:	b530      	push	{r4, r5, lr}
 800cfe4:	b09c      	sub	sp, #112	; 0x70
 800cfe6:	4601      	mov	r1, r0
 800cfe8:	4d0c      	ldr	r5, [pc, #48]	; (800d01c <sprintf+0x3c>)
 800cfea:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800cfee:	ab1f      	add	r3, sp, #124	; 0x7c
 800cff0:	9102      	str	r1, [sp, #8]
 800cff2:	9106      	str	r1, [sp, #24]
 800cff4:	490a      	ldr	r1, [pc, #40]	; (800d020 <sprintf+0x40>)
 800cff6:	f853 2b04 	ldr.w	r2, [r3], #4
 800cffa:	9105      	str	r1, [sp, #20]
 800cffc:	a902      	add	r1, sp, #8
 800cffe:	6828      	ldr	r0, [r5, #0]
 800d000:	9301      	str	r3, [sp, #4]
 800d002:	9407      	str	r4, [sp, #28]
 800d004:	9404      	str	r4, [sp, #16]
 800d006:	f000 f83b 	bl	800d080 <_svfprintf_r>
 800d00a:	9b02      	ldr	r3, [sp, #8]
 800d00c:	2200      	movs	r2, #0
 800d00e:	701a      	strb	r2, [r3, #0]
 800d010:	b01c      	add	sp, #112	; 0x70
 800d012:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d016:	b003      	add	sp, #12
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	200001ec 	.word	0x200001ec
 800d020:	ffff0208 	.word	0xffff0208

0800d024 <strlen>:
 800d024:	f020 0103 	bic.w	r1, r0, #3
 800d028:	f010 0003 	ands.w	r0, r0, #3
 800d02c:	f1c0 0000 	rsb	r0, r0, #0
 800d030:	f851 3b04 	ldr.w	r3, [r1], #4
 800d034:	f100 0c04 	add.w	ip, r0, #4
 800d038:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800d03c:	f06f 0200 	mvn.w	r2, #0
 800d040:	bf1c      	itt	ne
 800d042:	fa22 f20c 	lsrne.w	r2, r2, ip
 800d046:	4313      	orrne	r3, r2
 800d048:	f04f 0c01 	mov.w	ip, #1
 800d04c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800d050:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800d054:	eba3 020c 	sub.w	r2, r3, ip
 800d058:	ea22 0203 	bic.w	r2, r2, r3
 800d05c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800d060:	bf04      	itt	eq
 800d062:	f851 3b04 	ldreq.w	r3, [r1], #4
 800d066:	3004      	addeq	r0, #4
 800d068:	d0f4      	beq.n	800d054 <strlen+0x30>
 800d06a:	f1c2 0100 	rsb	r1, r2, #0
 800d06e:	ea02 0201 	and.w	r2, r2, r1
 800d072:	fab2 f282 	clz	r2, r2
 800d076:	f1c2 021f 	rsb	r2, r2, #31
 800d07a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800d07e:	4770      	bx	lr

0800d080 <_svfprintf_r>:
 800d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d084:	ed2d 8b08 	vpush	{d8-d11}
 800d088:	b0d1      	sub	sp, #324	; 0x144
 800d08a:	460c      	mov	r4, r1
 800d08c:	ee09 1a10 	vmov	s18, r1
 800d090:	4690      	mov	r8, r2
 800d092:	930a      	str	r3, [sp, #40]	; 0x28
 800d094:	4607      	mov	r7, r0
 800d096:	f002 fef5 	bl	800fe84 <_localeconv_r>
 800d09a:	6803      	ldr	r3, [r0, #0]
 800d09c:	4618      	mov	r0, r3
 800d09e:	9312      	str	r3, [sp, #72]	; 0x48
 800d0a0:	f7ff ffc0 	bl	800d024 <strlen>
 800d0a4:	89a3      	ldrh	r3, [r4, #12]
 800d0a6:	9011      	str	r0, [sp, #68]	; 0x44
 800d0a8:	061d      	lsls	r5, r3, #24
 800d0aa:	d503      	bpl.n	800d0b4 <_svfprintf_r+0x34>
 800d0ac:	6923      	ldr	r3, [r4, #16]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f000 87ab 	beq.w	800e00a <_svfprintf_r+0xf8a>
 800d0b4:	aa27      	add	r2, sp, #156	; 0x9c
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	46ba      	mov	sl, r7
 800d0ba:	4691      	mov	r9, r2
 800d0bc:	930d      	str	r3, [sp, #52]	; 0x34
 800d0be:	9224      	str	r2, [sp, #144]	; 0x90
 800d0c0:	9317      	str	r3, [sp, #92]	; 0x5c
 800d0c2:	9305      	str	r3, [sp, #20]
 800d0c4:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 800d338 <_svfprintf_r+0x2b8>
 800d0c8:	e9cd 3325 	strd	r3, r3, [sp, #148]	; 0x94
 800d0cc:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 800d0d0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 800d0d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d0d8:	f898 3000 	ldrb.w	r3, [r8]
 800d0dc:	4644      	mov	r4, r8
 800d0de:	2b25      	cmp	r3, #37	; 0x25
 800d0e0:	d01a      	beq.n	800d118 <_svfprintf_r+0x98>
 800d0e2:	b1cb      	cbz	r3, 800d118 <_svfprintf_r+0x98>
 800d0e4:	4625      	mov	r5, r4
 800d0e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800d0ea:	b10b      	cbz	r3, 800d0f0 <_svfprintf_r+0x70>
 800d0ec:	2b25      	cmp	r3, #37	; 0x25
 800d0ee:	d1f9      	bne.n	800d0e4 <_svfprintf_r+0x64>
 800d0f0:	ebb4 0608 	subs.w	r6, r4, r8
 800d0f4:	d010      	beq.n	800d118 <_svfprintf_r+0x98>
 800d0f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d0f8:	4433      	add	r3, r6
 800d0fa:	9326      	str	r3, [sp, #152]	; 0x98
 800d0fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d0fe:	3301      	adds	r3, #1
 800d100:	2b07      	cmp	r3, #7
 800d102:	9325      	str	r3, [sp, #148]	; 0x94
 800d104:	e9c9 8600 	strd	r8, r6, [r9]
 800d108:	f300 8109 	bgt.w	800d31e <_svfprintf_r+0x29e>
 800d10c:	f109 0908 	add.w	r9, r9, #8
 800d110:	9b05      	ldr	r3, [sp, #20]
 800d112:	4433      	add	r3, r6
 800d114:	9305      	str	r3, [sp, #20]
 800d116:	786b      	ldrb	r3, [r5, #1]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	f001 8140 	beq.w	800e39e <_svfprintf_r+0x131e>
 800d11e:	2300      	movs	r3, #0
 800d120:	f104 0801 	add.w	r8, r4, #1
 800d124:	7865      	ldrb	r5, [r4, #1]
 800d126:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d12a:	242b      	movs	r4, #43	; 0x2b
 800d12c:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 800d130:	9306      	str	r3, [sp, #24]
 800d132:	9303      	str	r3, [sp, #12]
 800d134:	f108 0801 	add.w	r8, r8, #1
 800d138:	f1a5 0320 	sub.w	r3, r5, #32
 800d13c:	2b5a      	cmp	r3, #90	; 0x5a
 800d13e:	f200 811e 	bhi.w	800d37e <_svfprintf_r+0x2fe>
 800d142:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d146:	006a      	.short	0x006a
 800d148:	011c011c 	.word	0x011c011c
 800d14c:	011c02cb 	.word	0x011c02cb
 800d150:	011c011c 	.word	0x011c011c
 800d154:	011c02aa 	.word	0x011c02aa
 800d158:	0243011c 	.word	0x0243011c
 800d15c:	011c02f1 	.word	0x011c02f1
 800d160:	02d9024e 	.word	0x02d9024e
 800d164:	02d2011c 	.word	0x02d2011c
 800d168:	005b005b 	.word	0x005b005b
 800d16c:	005b005b 	.word	0x005b005b
 800d170:	005b005b 	.word	0x005b005b
 800d174:	005b005b 	.word	0x005b005b
 800d178:	011c005b 	.word	0x011c005b
 800d17c:	011c011c 	.word	0x011c011c
 800d180:	011c011c 	.word	0x011c011c
 800d184:	011c011c 	.word	0x011c011c
 800d188:	011c019f 	.word	0x011c019f
 800d18c:	00790209 	.word	0x00790209
 800d190:	019f019f 	.word	0x019f019f
 800d194:	011c019f 	.word	0x011c019f
 800d198:	011c011c 	.word	0x011c011c
 800d19c:	02a3011c 	.word	0x02a3011c
 800d1a0:	011c011c 	.word	0x011c011c
 800d1a4:	011c00a4 	.word	0x011c00a4
 800d1a8:	011c011c 	.word	0x011c011c
 800d1ac:	011c021d 	.word	0x011c021d
 800d1b0:	011c0255 	.word	0x011c0255
 800d1b4:	073f011c 	.word	0x073f011c
 800d1b8:	011c011c 	.word	0x011c011c
 800d1bc:	011c011c 	.word	0x011c011c
 800d1c0:	011c011c 	.word	0x011c011c
 800d1c4:	011c011c 	.word	0x011c011c
 800d1c8:	011c019f 	.word	0x011c019f
 800d1cc:	007d0209 	.word	0x007d0209
 800d1d0:	019f019f 	.word	0x019f019f
 800d1d4:	0299019f 	.word	0x0299019f
 800d1d8:	0072007d 	.word	0x0072007d
 800d1dc:	028f011c 	.word	0x028f011c
 800d1e0:	0278011c 	.word	0x0278011c
 800d1e4:	026600a8 	.word	0x026600a8
 800d1e8:	011c0072 	.word	0x011c0072
 800d1ec:	006f021d 	.word	0x006f021d
 800d1f0:	011c0718 	.word	0x011c0718
 800d1f4:	071c011c 	.word	0x071c011c
 800d1f8:	006f011c 	.word	0x006f011c
 800d1fc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d200:	2200      	movs	r2, #0
 800d202:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800d206:	f818 5b01 	ldrb.w	r5, [r8], #1
 800d20a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d20e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d212:	2b09      	cmp	r3, #9
 800d214:	d9f5      	bls.n	800d202 <_svfprintf_r+0x182>
 800d216:	9206      	str	r2, [sp, #24]
 800d218:	e78e      	b.n	800d138 <_svfprintf_r+0xb8>
 800d21a:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 85e6 	beq.w	800ddf0 <_svfprintf_r+0xd70>
 800d224:	f898 5000 	ldrb.w	r5, [r8]
 800d228:	e784      	b.n	800d134 <_svfprintf_r+0xb4>
 800d22a:	9b03      	ldr	r3, [sp, #12]
 800d22c:	f898 5000 	ldrb.w	r5, [r8]
 800d230:	f043 0320 	orr.w	r3, r3, #32
 800d234:	9303      	str	r3, [sp, #12]
 800d236:	e77d      	b.n	800d134 <_svfprintf_r+0xb4>
 800d238:	9b03      	ldr	r3, [sp, #12]
 800d23a:	f043 0310 	orr.w	r3, r3, #16
 800d23e:	9303      	str	r3, [sp, #12]
 800d240:	9b03      	ldr	r3, [sp, #12]
 800d242:	069c      	lsls	r4, r3, #26
 800d244:	f140 8177 	bpl.w	800d536 <_svfprintf_r+0x4b6>
 800d248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d24a:	3307      	adds	r3, #7
 800d24c:	f023 0307 	bic.w	r3, r3, #7
 800d250:	461a      	mov	r2, r3
 800d252:	685b      	ldr	r3, [r3, #4]
 800d254:	f852 4b08 	ldr.w	r4, [r2], #8
 800d258:	461e      	mov	r6, r3
 800d25a:	920a      	str	r2, [sp, #40]	; 0x28
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f2c0 8571 	blt.w	800dd44 <_svfprintf_r+0xcc4>
 800d262:	1c7a      	adds	r2, r7, #1
 800d264:	f000 846e 	beq.w	800db44 <_svfprintf_r+0xac4>
 800d268:	9b03      	ldr	r3, [sp, #12]
 800d26a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d26e:	9303      	str	r3, [sp, #12]
 800d270:	2f00      	cmp	r7, #0
 800d272:	f040 8467 	bne.w	800db44 <_svfprintf_r+0xac4>
 800d276:	ea54 0306 	orrs.w	r3, r4, r6
 800d27a:	bf14      	ite	ne
 800d27c:	2301      	movne	r3, #1
 800d27e:	2300      	moveq	r3, #0
 800d280:	f040 8460 	bne.w	800db44 <_svfprintf_r+0xac4>
 800d284:	461f      	mov	r7, r3
 800d286:	ab50      	add	r3, sp, #320	; 0x140
 800d288:	9707      	str	r7, [sp, #28]
 800d28a:	9309      	str	r3, [sp, #36]	; 0x24
 800d28c:	e035      	b.n	800d2fa <_svfprintf_r+0x27a>
 800d28e:	9b03      	ldr	r3, [sp, #12]
 800d290:	f043 0310 	orr.w	r3, r3, #16
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	f013 0620 	ands.w	r6, r3, #32
 800d29c:	f000 813a 	beq.w	800d514 <_svfprintf_r+0x494>
 800d2a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2a2:	3307      	adds	r3, #7
 800d2a4:	f023 0307 	bic.w	r3, r3, #7
 800d2a8:	685e      	ldr	r6, [r3, #4]
 800d2aa:	f853 4b08 	ldr.w	r4, [r3], #8
 800d2ae:	930a      	str	r3, [sp, #40]	; 0x28
 800d2b0:	9b03      	ldr	r3, [sp, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 800d2be:	1c78      	adds	r0, r7, #1
 800d2c0:	f000 8315 	beq.w	800d8ee <_svfprintf_r+0x86e>
 800d2c4:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
 800d2c8:	9303      	str	r3, [sp, #12]
 800d2ca:	ea54 0306 	orrs.w	r3, r4, r6
 800d2ce:	f040 830c 	bne.w	800d8ea <_svfprintf_r+0x86a>
 800d2d2:	1e3b      	subs	r3, r7, #0
 800d2d4:	bf18      	it	ne
 800d2d6:	2301      	movne	r3, #1
 800d2d8:	2f00      	cmp	r7, #0
 800d2da:	f040 8306 	bne.w	800d8ea <_svfprintf_r+0x86a>
 800d2de:	2a00      	cmp	r2, #0
 800d2e0:	d1d0      	bne.n	800d284 <_svfprintf_r+0x204>
 800d2e2:	f01b 0301 	ands.w	r3, fp, #1
 800d2e6:	4617      	mov	r7, r2
 800d2e8:	9307      	str	r3, [sp, #28]
 800d2ea:	f000 84de 	beq.w	800dcaa <_svfprintf_r+0xc2a>
 800d2ee:	2330      	movs	r3, #48	; 0x30
 800d2f0:	f88d 313f 	strb.w	r3, [sp, #319]	; 0x13f
 800d2f4:	f20d 133f 	addw	r3, sp, #319	; 0x13f
 800d2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2fa:	9907      	ldr	r1, [sp, #28]
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800d302:	42b9      	cmp	r1, r7
 800d304:	9308      	str	r3, [sp, #32]
 800d306:	9310      	str	r3, [sp, #64]	; 0x40
 800d308:	bfb8      	it	lt
 800d30a:	4639      	movlt	r1, r7
 800d30c:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800d310:	9104      	str	r1, [sp, #16]
 800d312:	2a00      	cmp	r2, #0
 800d314:	d045      	beq.n	800d3a2 <_svfprintf_r+0x322>
 800d316:	9b04      	ldr	r3, [sp, #16]
 800d318:	3301      	adds	r3, #1
 800d31a:	9304      	str	r3, [sp, #16]
 800d31c:	e041      	b.n	800d3a2 <_svfprintf_r+0x322>
 800d31e:	aa24      	add	r2, sp, #144	; 0x90
 800d320:	ee19 1a10 	vmov	r1, s18
 800d324:	4650      	mov	r0, sl
 800d326:	f003 fa19 	bl	801075c <__ssprint_r>
 800d32a:	b9c0      	cbnz	r0, 800d35e <_svfprintf_r+0x2de>
 800d32c:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800d330:	e6ee      	b.n	800d110 <_svfprintf_r+0x90>
 800d332:	bf00      	nop
 800d334:	f3af 8000 	nop.w
	...
 800d340:	aa24      	add	r2, sp, #144	; 0x90
 800d342:	ee19 1a10 	vmov	r1, s18
 800d346:	4650      	mov	r0, sl
 800d348:	f003 fa08 	bl	801075c <__ssprint_r>
 800d34c:	2800      	cmp	r0, #0
 800d34e:	f000 808e 	beq.w	800d46e <_svfprintf_r+0x3ee>
 800d352:	9b08      	ldr	r3, [sp, #32]
 800d354:	b11b      	cbz	r3, 800d35e <_svfprintf_r+0x2de>
 800d356:	9908      	ldr	r1, [sp, #32]
 800d358:	4650      	mov	r0, sl
 800d35a:	f002 fc8d 	bl	800fc78 <_free_r>
 800d35e:	ee19 3a10 	vmov	r3, s18
 800d362:	899b      	ldrh	r3, [r3, #12]
 800d364:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d368:	9b05      	ldr	r3, [sp, #20]
 800d36a:	bf18      	it	ne
 800d36c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800d370:	9305      	str	r3, [sp, #20]
 800d372:	9805      	ldr	r0, [sp, #20]
 800d374:	b051      	add	sp, #324	; 0x144
 800d376:	ecbd 8b08 	vpop	{d8-d11}
 800d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37e:	2d00      	cmp	r5, #0
 800d380:	f001 800d 	beq.w	800e39e <_svfprintf_r+0x131e>
 800d384:	2200      	movs	r2, #0
 800d386:	2301      	movs	r3, #1
 800d388:	a937      	add	r1, sp, #220	; 0xdc
 800d38a:	f88d 50dc 	strb.w	r5, [sp, #220]	; 0xdc
 800d38e:	4617      	mov	r7, r2
 800d390:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 800d394:	9304      	str	r3, [sp, #16]
 800d396:	9307      	str	r3, [sp, #28]
 800d398:	9210      	str	r2, [sp, #64]	; 0x40
 800d39a:	e9cd 2108 	strd	r2, r1, [sp, #32]
 800d39e:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 800d3a2:	9b03      	ldr	r3, [sp, #12]
 800d3a4:	f013 0302 	ands.w	r3, r3, #2
 800d3a8:	d002      	beq.n	800d3b0 <_svfprintf_r+0x330>
 800d3aa:	9904      	ldr	r1, [sp, #16]
 800d3ac:	3102      	adds	r1, #2
 800d3ae:	9104      	str	r1, [sp, #16]
 800d3b0:	9903      	ldr	r1, [sp, #12]
 800d3b2:	f011 0b84 	ands.w	fp, r1, #132	; 0x84
 800d3b6:	d105      	bne.n	800d3c4 <_svfprintf_r+0x344>
 800d3b8:	9906      	ldr	r1, [sp, #24]
 800d3ba:	9804      	ldr	r0, [sp, #16]
 800d3bc:	1a0e      	subs	r6, r1, r0
 800d3be:	2e00      	cmp	r6, #0
 800d3c0:	f300 830d 	bgt.w	800d9de <_svfprintf_r+0x95e>
 800d3c4:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800d3c6:	b182      	cbz	r2, 800d3ea <_svfprintf_r+0x36a>
 800d3c8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d3ca:	f10d 0173 	add.w	r1, sp, #115	; 0x73
 800d3ce:	3401      	adds	r4, #1
 800d3d0:	3201      	adds	r2, #1
 800d3d2:	f8c9 1000 	str.w	r1, [r9]
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	9426      	str	r4, [sp, #152]	; 0x98
 800d3da:	2a07      	cmp	r2, #7
 800d3dc:	9225      	str	r2, [sp, #148]	; 0x94
 800d3de:	f8c9 1004 	str.w	r1, [r9, #4]
 800d3e2:	f300 8343 	bgt.w	800da6c <_svfprintf_r+0x9ec>
 800d3e6:	f109 0908 	add.w	r9, r9, #8
 800d3ea:	b17b      	cbz	r3, 800d40c <_svfprintf_r+0x38c>
 800d3ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d3ee:	aa1d      	add	r2, sp, #116	; 0x74
 800d3f0:	3402      	adds	r4, #2
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	f8c9 2000 	str.w	r2, [r9]
 800d3f8:	2202      	movs	r2, #2
 800d3fa:	9426      	str	r4, [sp, #152]	; 0x98
 800d3fc:	2b07      	cmp	r3, #7
 800d3fe:	9325      	str	r3, [sp, #148]	; 0x94
 800d400:	f8c9 2004 	str.w	r2, [r9, #4]
 800d404:	f300 8341 	bgt.w	800da8a <_svfprintf_r+0xa0a>
 800d408:	f109 0908 	add.w	r9, r9, #8
 800d40c:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
 800d410:	f000 81f0 	beq.w	800d7f4 <_svfprintf_r+0x774>
 800d414:	9b07      	ldr	r3, [sp, #28]
 800d416:	1aff      	subs	r7, r7, r3
 800d418:	2f00      	cmp	r7, #0
 800d41a:	f300 8231 	bgt.w	800d880 <_svfprintf_r+0x800>
 800d41e:	9b03      	ldr	r3, [sp, #12]
 800d420:	05d9      	lsls	r1, r3, #23
 800d422:	f100 818f 	bmi.w	800d744 <_svfprintf_r+0x6c4>
 800d426:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d428:	f8c9 3000 	str.w	r3, [r9]
 800d42c:	9b07      	ldr	r3, [sp, #28]
 800d42e:	441c      	add	r4, r3
 800d430:	f8c9 3004 	str.w	r3, [r9, #4]
 800d434:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d436:	9426      	str	r4, [sp, #152]	; 0x98
 800d438:	3301      	adds	r3, #1
 800d43a:	2b07      	cmp	r3, #7
 800d43c:	9325      	str	r3, [sp, #148]	; 0x94
 800d43e:	f300 82c1 	bgt.w	800d9c4 <_svfprintf_r+0x944>
 800d442:	f109 0908 	add.w	r9, r9, #8
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	0758      	lsls	r0, r3, #29
 800d44a:	d505      	bpl.n	800d458 <_svfprintf_r+0x3d8>
 800d44c:	9b06      	ldr	r3, [sp, #24]
 800d44e:	9a04      	ldr	r2, [sp, #16]
 800d450:	1a9d      	subs	r5, r3, r2
 800d452:	2d00      	cmp	r5, #0
 800d454:	f300 833b 	bgt.w	800dace <_svfprintf_r+0xa4e>
 800d458:	9904      	ldr	r1, [sp, #16]
 800d45a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
 800d45e:	428a      	cmp	r2, r1
 800d460:	bfac      	ite	ge
 800d462:	189b      	addge	r3, r3, r2
 800d464:	185b      	addlt	r3, r3, r1
 800d466:	9305      	str	r3, [sp, #20]
 800d468:	2c00      	cmp	r4, #0
 800d46a:	f47f af69 	bne.w	800d340 <_svfprintf_r+0x2c0>
 800d46e:	2300      	movs	r3, #0
 800d470:	9325      	str	r3, [sp, #148]	; 0x94
 800d472:	9b08      	ldr	r3, [sp, #32]
 800d474:	b11b      	cbz	r3, 800d47e <_svfprintf_r+0x3fe>
 800d476:	9908      	ldr	r1, [sp, #32]
 800d478:	4650      	mov	r0, sl
 800d47a:	f002 fbfd 	bl	800fc78 <_free_r>
 800d47e:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800d482:	e629      	b.n	800d0d8 <_svfprintf_r+0x58>
 800d484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d486:	3307      	adds	r3, #7
 800d488:	f023 0307 	bic.w	r3, r3, #7
 800d48c:	ecb3 7b02 	vldmia	r3!, {d7}
 800d490:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800d494:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800d498:	930a      	str	r3, [sp, #40]	; 0x28
 800d49a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d49e:	ee0a 1a10 	vmov	s20, r1
 800d4a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4a6:	ee0a 3a90 	vmov	s21, r3
 800d4aa:	4ba2      	ldr	r3, [pc, #648]	; (800d734 <_svfprintf_r+0x6b4>)
 800d4ac:	eeb0 8a4a 	vmov.f32	s16, s20
 800d4b0:	eef0 8a6a 	vmov.f32	s17, s21
 800d4b4:	ec51 0b18 	vmov	r0, r1, d8
 800d4b8:	f7f3 fef2 	bl	80012a0 <__aeabi_dcmpun>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f040 84a5 	bne.w	800de0c <_svfprintf_r+0xd8c>
 800d4c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d4c6:	4b9b      	ldr	r3, [pc, #620]	; (800d734 <_svfprintf_r+0x6b4>)
 800d4c8:	ec51 0b18 	vmov	r0, r1, d8
 800d4cc:	f7f3 fb18 	bl	8000b00 <__aeabi_dcmple>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	f040 849b 	bne.w	800de0c <_svfprintf_r+0xd8c>
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d4de:	f7f3 fb05 	bl	8000aec <__aeabi_dcmplt>
 800d4e2:	2800      	cmp	r0, #0
 800d4e4:	f041 806e 	bne.w	800e5c4 <_svfprintf_r+0x1544>
 800d4e8:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800d4ec:	9b03      	ldr	r3, [sp, #12]
 800d4ee:	2000      	movs	r0, #0
 800d4f0:	4991      	ldr	r1, [pc, #580]	; (800d738 <_svfprintf_r+0x6b8>)
 800d4f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4f6:	9008      	str	r0, [sp, #32]
 800d4f8:	9303      	str	r3, [sp, #12]
 800d4fa:	4b90      	ldr	r3, [pc, #576]	; (800d73c <_svfprintf_r+0x6bc>)
 800d4fc:	2d47      	cmp	r5, #71	; 0x47
 800d4fe:	bfc8      	it	gt
 800d500:	4619      	movgt	r1, r3
 800d502:	4607      	mov	r7, r0
 800d504:	9010      	str	r0, [sp, #64]	; 0x40
 800d506:	9109      	str	r1, [sp, #36]	; 0x24
 800d508:	2103      	movs	r1, #3
 800d50a:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 800d50e:	9104      	str	r1, [sp, #16]
 800d510:	9107      	str	r1, [sp, #28]
 800d512:	e6fe      	b.n	800d312 <_svfprintf_r+0x292>
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	f013 0310 	ands.w	r3, r3, #16
 800d51a:	f040 8526 	bne.w	800df6a <_svfprintf_r+0xeea>
 800d51e:	9a03      	ldr	r2, [sp, #12]
 800d520:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800d524:	f000 8791 	beq.w	800e44a <_svfprintf_r+0x13ca>
 800d528:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d52a:	461e      	mov	r6, r3
 800d52c:	f852 4b04 	ldr.w	r4, [r2], #4
 800d530:	b2a4      	uxth	r4, r4
 800d532:	920a      	str	r2, [sp, #40]	; 0x28
 800d534:	e6bc      	b.n	800d2b0 <_svfprintf_r+0x230>
 800d536:	9b03      	ldr	r3, [sp, #12]
 800d538:	06d8      	lsls	r0, r3, #27
 800d53a:	f100 844d 	bmi.w	800ddd8 <_svfprintf_r+0xd58>
 800d53e:	9b03      	ldr	r3, [sp, #12]
 800d540:	0659      	lsls	r1, r3, #25
 800d542:	f140 8773 	bpl.w	800e42c <_svfprintf_r+0x13ac>
 800d546:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d548:	f853 4b04 	ldr.w	r4, [r3], #4
 800d54c:	f344 36c0 	sbfx	r6, r4, #15, #1
 800d550:	930a      	str	r3, [sp, #40]	; 0x28
 800d552:	b224      	sxth	r4, r4
 800d554:	4633      	mov	r3, r6
 800d556:	e681      	b.n	800d25c <_svfprintf_r+0x1dc>
 800d558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d55a:	2200      	movs	r2, #0
 800d55c:	f853 1b04 	ldr.w	r1, [r3], #4
 800d560:	4617      	mov	r7, r2
 800d562:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 800d566:	930a      	str	r3, [sp, #40]	; 0x28
 800d568:	2301      	movs	r3, #1
 800d56a:	f88d 10dc 	strb.w	r1, [sp, #220]	; 0xdc
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	9307      	str	r3, [sp, #28]
 800d572:	ab37      	add	r3, sp, #220	; 0xdc
 800d574:	9208      	str	r2, [sp, #32]
 800d576:	9210      	str	r2, [sp, #64]	; 0x40
 800d578:	9309      	str	r3, [sp, #36]	; 0x24
 800d57a:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 800d57e:	e710      	b.n	800d3a2 <_svfprintf_r+0x322>
 800d580:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800d582:	2600      	movs	r6, #0
 800d584:	f854 3b04 	ldr.w	r3, [r4], #4
 800d588:	f88d 6073 	strb.w	r6, [sp, #115]	; 0x73
 800d58c:	9309      	str	r3, [sp, #36]	; 0x24
 800d58e:	2b00      	cmp	r3, #0
 800d590:	f000 8714 	beq.w	800e3bc <_svfprintf_r+0x133c>
 800d594:	1c79      	adds	r1, r7, #1
 800d596:	f000 8569 	beq.w	800e06c <_svfprintf_r+0xfec>
 800d59a:	463a      	mov	r2, r7
 800d59c:	4631      	mov	r1, r6
 800d59e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5a0:	f002 fc7c 	bl	800fe9c <memchr>
 800d5a4:	9008      	str	r0, [sp, #32]
 800d5a6:	2800      	cmp	r0, #0
 800d5a8:	f001 8154 	beq.w	800e854 <_svfprintf_r+0x17d4>
 800d5ac:	4637      	mov	r7, r6
 800d5ae:	940a      	str	r4, [sp, #40]	; 0x28
 800d5b0:	9610      	str	r6, [sp, #64]	; 0x40
 800d5b2:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800d5b6:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 800d5ba:	1a9b      	subs	r3, r3, r2
 800d5bc:	9608      	str	r6, [sp, #32]
 800d5be:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800d5c2:	9307      	str	r3, [sp, #28]
 800d5c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d5c8:	9304      	str	r3, [sp, #16]
 800d5ca:	e6a2      	b.n	800d312 <_svfprintf_r+0x292>
 800d5cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5d2:	2a00      	cmp	r2, #0
 800d5d4:	9206      	str	r2, [sp, #24]
 800d5d6:	f280 83e3 	bge.w	800dda0 <_svfprintf_r+0xd20>
 800d5da:	9a06      	ldr	r2, [sp, #24]
 800d5dc:	930a      	str	r3, [sp, #40]	; 0x28
 800d5de:	4252      	negs	r2, r2
 800d5e0:	9206      	str	r2, [sp, #24]
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	f898 5000 	ldrb.w	r5, [r8]
 800d5e8:	f043 0304 	orr.w	r3, r3, #4
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	e5a1      	b.n	800d134 <_svfprintf_r+0xb4>
 800d5f0:	9b03      	ldr	r3, [sp, #12]
 800d5f2:	f043 0b10 	orr.w	fp, r3, #16
 800d5f6:	f01b 0620 	ands.w	r6, fp, #32
 800d5fa:	f000 8393 	beq.w	800dd24 <_svfprintf_r+0xca4>
 800d5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d600:	2201      	movs	r2, #1
 800d602:	3307      	adds	r3, #7
 800d604:	f023 0307 	bic.w	r3, r3, #7
 800d608:	685e      	ldr	r6, [r3, #4]
 800d60a:	f853 4b08 	ldr.w	r4, [r3], #8
 800d60e:	930a      	str	r3, [sp, #40]	; 0x28
 800d610:	e652      	b.n	800d2b8 <_svfprintf_r+0x238>
 800d612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d614:	2578      	movs	r5, #120	; 0x78
 800d616:	9a03      	ldr	r2, [sp, #12]
 800d618:	2600      	movs	r6, #0
 800d61a:	f853 4b04 	ldr.w	r4, [r3], #4
 800d61e:	f042 0b02 	orr.w	fp, r2, #2
 800d622:	f88d 5075 	strb.w	r5, [sp, #117]	; 0x75
 800d626:	930a      	str	r3, [sp, #40]	; 0x28
 800d628:	2330      	movs	r3, #48	; 0x30
 800d62a:	2202      	movs	r2, #2
 800d62c:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
 800d630:	4b43      	ldr	r3, [pc, #268]	; (800d740 <_svfprintf_r+0x6c0>)
 800d632:	9313      	str	r3, [sp, #76]	; 0x4c
 800d634:	e640      	b.n	800d2b8 <_svfprintf_r+0x238>
 800d636:	9b03      	ldr	r3, [sp, #12]
 800d638:	069e      	lsls	r6, r3, #26
 800d63a:	f100 83c3 	bmi.w	800ddc4 <_svfprintf_r+0xd44>
 800d63e:	9b03      	ldr	r3, [sp, #12]
 800d640:	06dd      	lsls	r5, r3, #27
 800d642:	f100 86a4 	bmi.w	800e38e <_svfprintf_r+0x130e>
 800d646:	9b03      	ldr	r3, [sp, #12]
 800d648:	065c      	lsls	r4, r3, #25
 800d64a:	f100 87e7 	bmi.w	800e61c <_svfprintf_r+0x159c>
 800d64e:	9b03      	ldr	r3, [sp, #12]
 800d650:	0598      	lsls	r0, r3, #22
 800d652:	f140 869c 	bpl.w	800e38e <_svfprintf_r+0x130e>
 800d656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d658:	9905      	ldr	r1, [sp, #20]
 800d65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d65e:	7011      	strb	r1, [r2, #0]
 800d660:	930a      	str	r3, [sp, #40]	; 0x28
 800d662:	e539      	b.n	800d0d8 <_svfprintf_r+0x58>
 800d664:	f898 5000 	ldrb.w	r5, [r8]
 800d668:	9b03      	ldr	r3, [sp, #12]
 800d66a:	2d6c      	cmp	r5, #108	; 0x6c
 800d66c:	f000 84ad 	beq.w	800dfca <_svfprintf_r+0xf4a>
 800d670:	f043 0310 	orr.w	r3, r3, #16
 800d674:	9303      	str	r3, [sp, #12]
 800d676:	e55d      	b.n	800d134 <_svfprintf_r+0xb4>
 800d678:	f898 5000 	ldrb.w	r5, [r8]
 800d67c:	9b03      	ldr	r3, [sp, #12]
 800d67e:	2d68      	cmp	r5, #104	; 0x68
 800d680:	f000 84ba 	beq.w	800dff8 <_svfprintf_r+0xf78>
 800d684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d688:	9303      	str	r3, [sp, #12]
 800d68a:	e553      	b.n	800d134 <_svfprintf_r+0xb4>
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	f898 5000 	ldrb.w	r5, [r8]
 800d692:	f043 0308 	orr.w	r3, r3, #8
 800d696:	9303      	str	r3, [sp, #12]
 800d698:	e54c      	b.n	800d134 <_svfprintf_r+0xb4>
 800d69a:	4650      	mov	r0, sl
 800d69c:	f002 fbf2 	bl	800fe84 <_localeconv_r>
 800d6a0:	6843      	ldr	r3, [r0, #4]
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	9316      	str	r3, [sp, #88]	; 0x58
 800d6a6:	f7ff fcbd 	bl	800d024 <strlen>
 800d6aa:	9015      	str	r0, [sp, #84]	; 0x54
 800d6ac:	4605      	mov	r5, r0
 800d6ae:	4650      	mov	r0, sl
 800d6b0:	f002 fbe8 	bl	800fe84 <_localeconv_r>
 800d6b4:	6883      	ldr	r3, [r0, #8]
 800d6b6:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6b8:	2d00      	cmp	r5, #0
 800d6ba:	f43f adb3 	beq.w	800d224 <_svfprintf_r+0x1a4>
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f43f adb0 	beq.w	800d224 <_svfprintf_r+0x1a4>
 800d6c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f43f adab 	beq.w	800d224 <_svfprintf_r+0x1a4>
 800d6ce:	9b03      	ldr	r3, [sp, #12]
 800d6d0:	f898 5000 	ldrb.w	r5, [r8]
 800d6d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d6d8:	9303      	str	r3, [sp, #12]
 800d6da:	e52b      	b.n	800d134 <_svfprintf_r+0xb4>
 800d6dc:	9b03      	ldr	r3, [sp, #12]
 800d6de:	f898 5000 	ldrb.w	r5, [r8]
 800d6e2:	f043 0301 	orr.w	r3, r3, #1
 800d6e6:	9303      	str	r3, [sp, #12]
 800d6e8:	e524      	b.n	800d134 <_svfprintf_r+0xb4>
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	f898 5000 	ldrb.w	r5, [r8]
 800d6f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6f4:	9303      	str	r3, [sp, #12]
 800d6f6:	e51d      	b.n	800d134 <_svfprintf_r+0xb4>
 800d6f8:	4642      	mov	r2, r8
 800d6fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d6fe:	2d2a      	cmp	r5, #42	; 0x2a
 800d700:	f001 81ba 	beq.w	800ea78 <_svfprintf_r+0x19f8>
 800d704:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d708:	4690      	mov	r8, r2
 800d70a:	2700      	movs	r7, #0
 800d70c:	2b09      	cmp	r3, #9
 800d70e:	f63f ad13 	bhi.w	800d138 <_svfprintf_r+0xb8>
 800d712:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 800d716:	f818 5b01 	ldrb.w	r5, [r8], #1
 800d71a:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 800d71e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800d722:	2b09      	cmp	r3, #9
 800d724:	d9f5      	bls.n	800d712 <_svfprintf_r+0x692>
 800d726:	e507      	b.n	800d138 <_svfprintf_r+0xb8>
 800d728:	f898 5000 	ldrb.w	r5, [r8]
 800d72c:	f88d 4073 	strb.w	r4, [sp, #115]	; 0x73
 800d730:	e500      	b.n	800d134 <_svfprintf_r+0xb4>
 800d732:	bf00      	nop
 800d734:	7fefffff 	.word	0x7fefffff
 800d738:	08013c7c 	.word	0x08013c7c
 800d73c:	08013c80 	.word	0x08013c80
 800d740:	08013c88 	.word	0x08013c88
 800d744:	2d65      	cmp	r5, #101	; 0x65
 800d746:	f340 80f4 	ble.w	800d932 <_svfprintf_r+0x8b2>
 800d74a:	2200      	movs	r2, #0
 800d74c:	2300      	movs	r3, #0
 800d74e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d752:	f7f3 f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 800d756:	2800      	cmp	r0, #0
 800d758:	f000 8207 	beq.w	800db6a <_svfprintf_r+0xaea>
 800d75c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d75e:	3401      	adds	r4, #1
 800d760:	4abf      	ldr	r2, [pc, #764]	; (800da60 <_svfprintf_r+0x9e0>)
 800d762:	3301      	adds	r3, #1
 800d764:	9426      	str	r4, [sp, #152]	; 0x98
 800d766:	f8c9 2000 	str.w	r2, [r9]
 800d76a:	2201      	movs	r2, #1
 800d76c:	2b07      	cmp	r3, #7
 800d76e:	9325      	str	r3, [sp, #148]	; 0x94
 800d770:	f8c9 2004 	str.w	r2, [r9, #4]
 800d774:	f300 8587 	bgt.w	800e286 <_svfprintf_r+0x1206>
 800d778:	f109 0908 	add.w	r9, r9, #8
 800d77c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d77e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d780:	4293      	cmp	r3, r2
 800d782:	f280 8308 	bge.w	800dd96 <_svfprintf_r+0xd16>
 800d786:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d788:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d78a:	441c      	add	r4, r3
 800d78c:	e9c9 2300 	strd	r2, r3, [r9]
 800d790:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d792:	9426      	str	r4, [sp, #152]	; 0x98
 800d794:	3301      	adds	r3, #1
 800d796:	2b07      	cmp	r3, #7
 800d798:	9325      	str	r3, [sp, #148]	; 0x94
 800d79a:	f300 841f 	bgt.w	800dfdc <_svfprintf_r+0xf5c>
 800d79e:	f109 0908 	add.w	r9, r9, #8
 800d7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7a4:	1e5d      	subs	r5, r3, #1
 800d7a6:	2d00      	cmp	r5, #0
 800d7a8:	f77f ae4d 	ble.w	800d446 <_svfprintf_r+0x3c6>
 800d7ac:	2d10      	cmp	r5, #16
 800d7ae:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800d7b0:	4eac      	ldr	r6, [pc, #688]	; (800da64 <_svfprintf_r+0x9e4>)
 800d7b2:	f340 8576 	ble.w	800e2a2 <_svfprintf_r+0x1222>
 800d7b6:	2710      	movs	r7, #16
 800d7b8:	ee19 ba10 	vmov	fp, s18
 800d7bc:	e003      	b.n	800d7c6 <_svfprintf_r+0x746>
 800d7be:	3d10      	subs	r5, #16
 800d7c0:	2d10      	cmp	r5, #16
 800d7c2:	f340 856e 	ble.w	800e2a2 <_svfprintf_r+0x1222>
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	3410      	adds	r4, #16
 800d7ca:	2b07      	cmp	r3, #7
 800d7cc:	e9c9 6700 	strd	r6, r7, [r9]
 800d7d0:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800d7d4:	f109 0908 	add.w	r9, r9, #8
 800d7d8:	ddf1      	ble.n	800d7be <_svfprintf_r+0x73e>
 800d7da:	aa24      	add	r2, sp, #144	; 0x90
 800d7dc:	4659      	mov	r1, fp
 800d7de:	4650      	mov	r0, sl
 800d7e0:	f002 ffbc 	bl	801075c <__ssprint_r>
 800d7e4:	2800      	cmp	r0, #0
 800d7e6:	f47f adb4 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800d7ea:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800d7ee:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
 800d7f2:	e7e4      	b.n	800d7be <_svfprintf_r+0x73e>
 800d7f4:	9b06      	ldr	r3, [sp, #24]
 800d7f6:	9a04      	ldr	r2, [sp, #16]
 800d7f8:	eba3 0b02 	sub.w	fp, r3, r2
 800d7fc:	f1bb 0f00 	cmp.w	fp, #0
 800d800:	f77f ae08 	ble.w	800d414 <_svfprintf_r+0x394>
 800d804:	f1bb 0f10 	cmp.w	fp, #16
 800d808:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d80a:	4e96      	ldr	r6, [pc, #600]	; (800da64 <_svfprintf_r+0x9e4>)
 800d80c:	dd26      	ble.n	800d85c <_svfprintf_r+0x7dc>
 800d80e:	4621      	mov	r1, r4
 800d810:	2310      	movs	r3, #16
 800d812:	ee19 4a10 	vmov	r4, s18
 800d816:	e004      	b.n	800d822 <_svfprintf_r+0x7a2>
 800d818:	f1ab 0b10 	sub.w	fp, fp, #16
 800d81c:	f1bb 0f10 	cmp.w	fp, #16
 800d820:	dd1b      	ble.n	800d85a <_svfprintf_r+0x7da>
 800d822:	3201      	adds	r2, #1
 800d824:	3110      	adds	r1, #16
 800d826:	2a07      	cmp	r2, #7
 800d828:	e9c9 6300 	strd	r6, r3, [r9]
 800d82c:	e9cd 2125 	strd	r2, r1, [sp, #148]	; 0x94
 800d830:	f109 0908 	add.w	r9, r9, #8
 800d834:	ddf0      	ble.n	800d818 <_svfprintf_r+0x798>
 800d836:	aa24      	add	r2, sp, #144	; 0x90
 800d838:	4621      	mov	r1, r4
 800d83a:	4650      	mov	r0, sl
 800d83c:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800d840:	f002 ff8c 	bl	801075c <__ssprint_r>
 800d844:	2800      	cmp	r0, #0
 800d846:	f47f ad84 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800d84a:	f1ab 0b10 	sub.w	fp, fp, #16
 800d84e:	2310      	movs	r3, #16
 800d850:	f1bb 0f10 	cmp.w	fp, #16
 800d854:	e9dd 2125 	ldrd	r2, r1, [sp, #148]	; 0x94
 800d858:	dce3      	bgt.n	800d822 <_svfprintf_r+0x7a2>
 800d85a:	460c      	mov	r4, r1
 800d85c:	3201      	adds	r2, #1
 800d85e:	445c      	add	r4, fp
 800d860:	f8c9 6000 	str.w	r6, [r9]
 800d864:	2a07      	cmp	r2, #7
 800d866:	f8c9 b004 	str.w	fp, [r9, #4]
 800d86a:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
 800d86e:	f300 8573 	bgt.w	800e358 <_svfprintf_r+0x12d8>
 800d872:	9b07      	ldr	r3, [sp, #28]
 800d874:	f109 0908 	add.w	r9, r9, #8
 800d878:	1aff      	subs	r7, r7, r3
 800d87a:	2f00      	cmp	r7, #0
 800d87c:	f77f adcf 	ble.w	800d41e <_svfprintf_r+0x39e>
 800d880:	2f10      	cmp	r7, #16
 800d882:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800d884:	4e77      	ldr	r6, [pc, #476]	; (800da64 <_svfprintf_r+0x9e4>)
 800d886:	dd22      	ble.n	800d8ce <_svfprintf_r+0x84e>
 800d888:	4623      	mov	r3, r4
 800d88a:	f04f 0b10 	mov.w	fp, #16
 800d88e:	ee19 4a10 	vmov	r4, s18
 800d892:	e002      	b.n	800d89a <_svfprintf_r+0x81a>
 800d894:	3f10      	subs	r7, #16
 800d896:	2f10      	cmp	r7, #16
 800d898:	dd18      	ble.n	800d8cc <_svfprintf_r+0x84c>
 800d89a:	3201      	adds	r2, #1
 800d89c:	3310      	adds	r3, #16
 800d89e:	2a07      	cmp	r2, #7
 800d8a0:	e9c9 6b00 	strd	r6, fp, [r9]
 800d8a4:	e9cd 2325 	strd	r2, r3, [sp, #148]	; 0x94
 800d8a8:	f109 0908 	add.w	r9, r9, #8
 800d8ac:	ddf2      	ble.n	800d894 <_svfprintf_r+0x814>
 800d8ae:	aa24      	add	r2, sp, #144	; 0x90
 800d8b0:	4621      	mov	r1, r4
 800d8b2:	4650      	mov	r0, sl
 800d8b4:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800d8b8:	f002 ff50 	bl	801075c <__ssprint_r>
 800d8bc:	2800      	cmp	r0, #0
 800d8be:	f47f ad48 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800d8c2:	3f10      	subs	r7, #16
 800d8c4:	2f10      	cmp	r7, #16
 800d8c6:	e9dd 2325 	ldrd	r2, r3, [sp, #148]	; 0x94
 800d8ca:	dce6      	bgt.n	800d89a <_svfprintf_r+0x81a>
 800d8cc:	461c      	mov	r4, r3
 800d8ce:	3201      	adds	r2, #1
 800d8d0:	443c      	add	r4, r7
 800d8d2:	f8c9 6000 	str.w	r6, [r9]
 800d8d6:	2a07      	cmp	r2, #7
 800d8d8:	f8c9 7004 	str.w	r7, [r9, #4]
 800d8dc:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
 800d8e0:	f300 8212 	bgt.w	800dd08 <_svfprintf_r+0xc88>
 800d8e4:	f109 0908 	add.w	r9, r9, #8
 800d8e8:	e599      	b.n	800d41e <_svfprintf_r+0x39e>
 800d8ea:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d8ee:	2a01      	cmp	r2, #1
 800d8f0:	f000 812a 	beq.w	800db48 <_svfprintf_r+0xac8>
 800d8f4:	2a02      	cmp	r2, #2
 800d8f6:	f000 80d5 	beq.w	800daa4 <_svfprintf_r+0xa24>
 800d8fa:	a950      	add	r1, sp, #320	; 0x140
 800d8fc:	f004 0307 	and.w	r3, r4, #7
 800d900:	08e4      	lsrs	r4, r4, #3
 800d902:	460a      	mov	r2, r1
 800d904:	ea44 7446 	orr.w	r4, r4, r6, lsl #29
 800d908:	3330      	adds	r3, #48	; 0x30
 800d90a:	08f6      	lsrs	r6, r6, #3
 800d90c:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800d910:	ea54 0006 	orrs.w	r0, r4, r6
 800d914:	d1f2      	bne.n	800d8fc <_svfprintf_r+0x87c>
 800d916:	2b30      	cmp	r3, #48	; 0x30
 800d918:	9109      	str	r1, [sp, #36]	; 0x24
 800d91a:	d003      	beq.n	800d924 <_svfprintf_r+0x8a4>
 800d91c:	f01b 0f01 	tst.w	fp, #1
 800d920:	f040 8243 	bne.w	800ddaa <_svfprintf_r+0xd2a>
 800d924:	ab50      	add	r3, sp, #320	; 0x140
 800d926:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d928:	f8cd b00c 	str.w	fp, [sp, #12]
 800d92c:	1a9b      	subs	r3, r3, r2
 800d92e:	9307      	str	r3, [sp, #28]
 800d930:	e4e3      	b.n	800d2fa <_svfprintf_r+0x27a>
 800d932:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d934:	2b01      	cmp	r3, #1
 800d936:	f340 8198 	ble.w	800dc6a <_svfprintf_r+0xbea>
 800d93a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800d93c:	3401      	adds	r4, #1
 800d93e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d940:	3501      	adds	r5, #1
 800d942:	9426      	str	r4, [sp, #152]	; 0x98
 800d944:	f8c9 3000 	str.w	r3, [r9]
 800d948:	2301      	movs	r3, #1
 800d94a:	2d07      	cmp	r5, #7
 800d94c:	9525      	str	r5, [sp, #148]	; 0x94
 800d94e:	f8c9 3004 	str.w	r3, [r9, #4]
 800d952:	f300 8212 	bgt.w	800dd7a <_svfprintf_r+0xcfa>
 800d956:	f109 0908 	add.w	r9, r9, #8
 800d95a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d95c:	3501      	adds	r5, #1
 800d95e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d960:	441c      	add	r4, r3
 800d962:	2d07      	cmp	r5, #7
 800d964:	e9c9 2300 	strd	r2, r3, [r9]
 800d968:	e9cd 5425 	strd	r5, r4, [sp, #148]	; 0x94
 800d96c:	f300 81f7 	bgt.w	800dd5e <_svfprintf_r+0xcde>
 800d970:	f109 0908 	add.w	r9, r9, #8
 800d974:	2200      	movs	r2, #0
 800d976:	2300      	movs	r3, #0
 800d978:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800d97c:	f7f3 f8ac 	bl	8000ad8 <__aeabi_dcmpeq>
 800d980:	2800      	cmp	r0, #0
 800d982:	f040 8196 	bne.w	800dcb2 <_svfprintf_r+0xc32>
 800d986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d988:	3501      	adds	r5, #1
 800d98a:	3301      	adds	r3, #1
 800d98c:	2d07      	cmp	r5, #7
 800d98e:	9525      	str	r5, [sp, #148]	; 0x94
 800d990:	f8c9 3000 	str.w	r3, [r9]
 800d994:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d996:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800d99a:	441c      	add	r4, r3
 800d99c:	f8c9 3004 	str.w	r3, [r9, #4]
 800d9a0:	9426      	str	r4, [sp, #152]	; 0x98
 800d9a2:	f300 8174 	bgt.w	800dc8e <_svfprintf_r+0xc0e>
 800d9a6:	f109 0908 	add.w	r9, r9, #8
 800d9aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9ac:	3501      	adds	r5, #1
 800d9ae:	441c      	add	r4, r3
 800d9b0:	f8c9 3004 	str.w	r3, [r9, #4]
 800d9b4:	2d07      	cmp	r5, #7
 800d9b6:	ab20      	add	r3, sp, #128	; 0x80
 800d9b8:	e9cd 5425 	strd	r5, r4, [sp, #148]	; 0x94
 800d9bc:	f8c9 3000 	str.w	r3, [r9]
 800d9c0:	f77f ad3f 	ble.w	800d442 <_svfprintf_r+0x3c2>
 800d9c4:	aa24      	add	r2, sp, #144	; 0x90
 800d9c6:	ee19 1a10 	vmov	r1, s18
 800d9ca:	4650      	mov	r0, sl
 800d9cc:	f002 fec6 	bl	801075c <__ssprint_r>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	f47f acbe 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800d9d6:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800d9d8:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800d9dc:	e533      	b.n	800d446 <_svfprintf_r+0x3c6>
 800d9de:	2e10      	cmp	r6, #16
 800d9e0:	e9dd 2125 	ldrd	r2, r1, [sp, #148]	; 0x94
 800d9e4:	dd2b      	ble.n	800da3e <_svfprintf_r+0x9be>
 800d9e6:	9318      	str	r3, [sp, #96]	; 0x60
 800d9e8:	2410      	movs	r4, #16
 800d9ea:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
 800d9ee:	460b      	mov	r3, r1
 800d9f0:	46b8      	mov	r8, r7
 800d9f2:	462f      	mov	r7, r5
 800d9f4:	ee19 5a10 	vmov	r5, s18
 800d9f8:	e002      	b.n	800da00 <_svfprintf_r+0x980>
 800d9fa:	3e10      	subs	r6, #16
 800d9fc:	2e10      	cmp	r6, #16
 800d9fe:	dd19      	ble.n	800da34 <_svfprintf_r+0x9b4>
 800da00:	3201      	adds	r2, #1
 800da02:	3310      	adds	r3, #16
 800da04:	4918      	ldr	r1, [pc, #96]	; (800da68 <_svfprintf_r+0x9e8>)
 800da06:	2a07      	cmp	r2, #7
 800da08:	e9c9 1400 	strd	r1, r4, [r9]
 800da0c:	e9cd 2325 	strd	r2, r3, [sp, #148]	; 0x94
 800da10:	f109 0908 	add.w	r9, r9, #8
 800da14:	ddf1      	ble.n	800d9fa <_svfprintf_r+0x97a>
 800da16:	aa24      	add	r2, sp, #144	; 0x90
 800da18:	4629      	mov	r1, r5
 800da1a:	4650      	mov	r0, sl
 800da1c:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800da20:	f002 fe9c 	bl	801075c <__ssprint_r>
 800da24:	2800      	cmp	r0, #0
 800da26:	f47f ac94 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800da2a:	3e10      	subs	r6, #16
 800da2c:	2e10      	cmp	r6, #16
 800da2e:	e9dd 2325 	ldrd	r2, r3, [sp, #148]	; 0x94
 800da32:	dce5      	bgt.n	800da00 <_svfprintf_r+0x980>
 800da34:	463d      	mov	r5, r7
 800da36:	4619      	mov	r1, r3
 800da38:	4647      	mov	r7, r8
 800da3a:	e9dd 3818 	ldrd	r3, r8, [sp, #96]	; 0x60
 800da3e:	3201      	adds	r2, #1
 800da40:	1874      	adds	r4, r6, r1
 800da42:	4909      	ldr	r1, [pc, #36]	; (800da68 <_svfprintf_r+0x9e8>)
 800da44:	2a07      	cmp	r2, #7
 800da46:	f8c9 6004 	str.w	r6, [r9, #4]
 800da4a:	f8c9 1000 	str.w	r1, [r9]
 800da4e:	e9cd 2425 	strd	r2, r4, [sp, #148]	; 0x94
 800da52:	f300 83bb 	bgt.w	800e1cc <_svfprintf_r+0x114c>
 800da56:	f109 0908 	add.w	r9, r9, #8
 800da5a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800da5e:	e4b2      	b.n	800d3c6 <_svfprintf_r+0x346>
 800da60:	08013cb8 	.word	0x08013cb8
 800da64:	08013ccc 	.word	0x08013ccc
 800da68:	08013cbc 	.word	0x08013cbc
 800da6c:	aa24      	add	r2, sp, #144	; 0x90
 800da6e:	ee19 1a10 	vmov	r1, s18
 800da72:	4650      	mov	r0, sl
 800da74:	9318      	str	r3, [sp, #96]	; 0x60
 800da76:	f002 fe71 	bl	801075c <__ssprint_r>
 800da7a:	2800      	cmp	r0, #0
 800da7c:	f47f ac69 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800da80:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800da82:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800da86:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800da88:	e4af      	b.n	800d3ea <_svfprintf_r+0x36a>
 800da8a:	aa24      	add	r2, sp, #144	; 0x90
 800da8c:	ee19 1a10 	vmov	r1, s18
 800da90:	4650      	mov	r0, sl
 800da92:	f002 fe63 	bl	801075c <__ssprint_r>
 800da96:	2800      	cmp	r0, #0
 800da98:	f47f ac5b 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800da9c:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800da9e:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800daa2:	e4b3      	b.n	800d40c <_svfprintf_r+0x38c>
 800daa4:	ab50      	add	r3, sp, #320	; 0x140
 800daa6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800daa8:	f004 020f 	and.w	r2, r4, #15
 800daac:	0924      	lsrs	r4, r4, #4
 800daae:	5c8a      	ldrb	r2, [r1, r2]
 800dab0:	ea44 7406 	orr.w	r4, r4, r6, lsl #28
 800dab4:	0936      	lsrs	r6, r6, #4
 800dab6:	f803 2d01 	strb.w	r2, [r3, #-1]!
 800daba:	ea54 0206 	orrs.w	r2, r4, r6
 800dabe:	d1f3      	bne.n	800daa8 <_svfprintf_r+0xa28>
 800dac0:	aa50      	add	r2, sp, #320	; 0x140
 800dac2:	9309      	str	r3, [sp, #36]	; 0x24
 800dac4:	f8cd b00c 	str.w	fp, [sp, #12]
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	9307      	str	r3, [sp, #28]
 800dacc:	e415      	b.n	800d2fa <_svfprintf_r+0x27a>
 800dace:	2d10      	cmp	r5, #16
 800dad0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dad2:	dd20      	ble.n	800db16 <_svfprintf_r+0xa96>
 800dad4:	2610      	movs	r6, #16
 800dad6:	ee19 7a10 	vmov	r7, s18
 800dada:	e002      	b.n	800dae2 <_svfprintf_r+0xa62>
 800dadc:	3d10      	subs	r5, #16
 800dade:	2d10      	cmp	r5, #16
 800dae0:	dd19      	ble.n	800db16 <_svfprintf_r+0xa96>
 800dae2:	3301      	adds	r3, #1
 800dae4:	3410      	adds	r4, #16
 800dae6:	4ac0      	ldr	r2, [pc, #768]	; (800dde8 <_svfprintf_r+0xd68>)
 800dae8:	2b07      	cmp	r3, #7
 800daea:	e9c9 2600 	strd	r2, r6, [r9]
 800daee:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800daf2:	f109 0908 	add.w	r9, r9, #8
 800daf6:	ddf1      	ble.n	800dadc <_svfprintf_r+0xa5c>
 800daf8:	aa24      	add	r2, sp, #144	; 0x90
 800dafa:	4639      	mov	r1, r7
 800dafc:	4650      	mov	r0, sl
 800dafe:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800db02:	f002 fe2b 	bl	801075c <__ssprint_r>
 800db06:	2800      	cmp	r0, #0
 800db08:	f47f ac23 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800db0c:	3d10      	subs	r5, #16
 800db0e:	2d10      	cmp	r5, #16
 800db10:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
 800db14:	dce5      	bgt.n	800dae2 <_svfprintf_r+0xa62>
 800db16:	3301      	adds	r3, #1
 800db18:	442c      	add	r4, r5
 800db1a:	4ab3      	ldr	r2, [pc, #716]	; (800dde8 <_svfprintf_r+0xd68>)
 800db1c:	2b07      	cmp	r3, #7
 800db1e:	f8c9 5004 	str.w	r5, [r9, #4]
 800db22:	f8c9 2000 	str.w	r2, [r9]
 800db26:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800db2a:	f77f ac95 	ble.w	800d458 <_svfprintf_r+0x3d8>
 800db2e:	aa24      	add	r2, sp, #144	; 0x90
 800db30:	ee19 1a10 	vmov	r1, s18
 800db34:	4650      	mov	r0, sl
 800db36:	f002 fe11 	bl	801075c <__ssprint_r>
 800db3a:	2800      	cmp	r0, #0
 800db3c:	f47f ac09 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800db40:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800db42:	e489      	b.n	800d458 <_svfprintf_r+0x3d8>
 800db44:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800db48:	2c0a      	cmp	r4, #10
 800db4a:	f176 0300 	sbcs.w	r3, r6, #0
 800db4e:	f080 83b5 	bcs.w	800e2bc <_svfprintf_r+0x123c>
 800db52:	2301      	movs	r3, #1
 800db54:	3430      	adds	r4, #48	; 0x30
 800db56:	f8cd b00c 	str.w	fp, [sp, #12]
 800db5a:	9307      	str	r3, [sp, #28]
 800db5c:	f20d 133f 	addw	r3, sp, #319	; 0x13f
 800db60:	f88d 413f 	strb.w	r4, [sp, #319]	; 0x13f
 800db64:	9309      	str	r3, [sp, #36]	; 0x24
 800db66:	f7ff bbc8 	b.w	800d2fa <_svfprintf_r+0x27a>
 800db6a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800db6c:	2a00      	cmp	r2, #0
 800db6e:	f340 834a 	ble.w	800e206 <_svfprintf_r+0x1186>
 800db72:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800db74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db76:	429e      	cmp	r6, r3
 800db78:	bfa8      	it	ge
 800db7a:	461e      	movge	r6, r3
 800db7c:	2e00      	cmp	r6, #0
 800db7e:	dd0c      	ble.n	800db9a <_svfprintf_r+0xb1a>
 800db80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db82:	4434      	add	r4, r6
 800db84:	e9c9 3600 	strd	r3, r6, [r9]
 800db88:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800db8a:	9426      	str	r4, [sp, #152]	; 0x98
 800db8c:	3301      	adds	r3, #1
 800db8e:	2b07      	cmp	r3, #7
 800db90:	9325      	str	r3, [sp, #148]	; 0x94
 800db92:	f300 85fc 	bgt.w	800e78e <_svfprintf_r+0x170e>
 800db96:	f109 0908 	add.w	r9, r9, #8
 800db9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800db9c:	2e00      	cmp	r6, #0
 800db9e:	bfa8      	it	ge
 800dba0:	1bad      	subge	r5, r5, r6
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	f300 823e 	bgt.w	800e024 <_svfprintf_r+0xfa4>
 800dba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbac:	4413      	add	r3, r2
 800dbae:	469b      	mov	fp, r3
 800dbb0:	9b03      	ldr	r3, [sp, #12]
 800dbb2:	055f      	lsls	r7, r3, #21
 800dbb4:	f100 826b 	bmi.w	800e08e <_svfprintf_r+0x100e>
 800dbb8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800dbba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbbc:	429d      	cmp	r5, r3
 800dbbe:	db03      	blt.n	800dbc8 <_svfprintf_r+0xb48>
 800dbc0:	9b03      	ldr	r3, [sp, #12]
 800dbc2:	07de      	lsls	r6, r3, #31
 800dbc4:	f140 851f 	bpl.w	800e606 <_svfprintf_r+0x1586>
 800dbc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dbcc:	441c      	add	r4, r3
 800dbce:	e9c9 2300 	strd	r2, r3, [r9]
 800dbd2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dbd4:	9426      	str	r4, [sp, #152]	; 0x98
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	2b07      	cmp	r3, #7
 800dbda:	9325      	str	r3, [sp, #148]	; 0x94
 800dbdc:	f300 85f4 	bgt.w	800e7c8 <_svfprintf_r+0x1748>
 800dbe0:	f109 0908 	add.w	r9, r9, #8
 800dbe4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dbe6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dbe8:	1b5d      	subs	r5, r3, r5
 800dbea:	441e      	add	r6, r3
 800dbec:	eba6 060b 	sub.w	r6, r6, fp
 800dbf0:	42ae      	cmp	r6, r5
 800dbf2:	bfa8      	it	ge
 800dbf4:	462e      	movge	r6, r5
 800dbf6:	2e00      	cmp	r6, #0
 800dbf8:	dd0d      	ble.n	800dc16 <_svfprintf_r+0xb96>
 800dbfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dbfc:	4434      	add	r4, r6
 800dbfe:	f8c9 b000 	str.w	fp, [r9]
 800dc02:	3301      	adds	r3, #1
 800dc04:	f8c9 6004 	str.w	r6, [r9, #4]
 800dc08:	9426      	str	r4, [sp, #152]	; 0x98
 800dc0a:	2b07      	cmp	r3, #7
 800dc0c:	9325      	str	r3, [sp, #148]	; 0x94
 800dc0e:	f300 8642 	bgt.w	800e896 <_svfprintf_r+0x1816>
 800dc12:	f109 0908 	add.w	r9, r9, #8
 800dc16:	2e00      	cmp	r6, #0
 800dc18:	bfa8      	it	ge
 800dc1a:	1bad      	subge	r5, r5, r6
 800dc1c:	2d00      	cmp	r5, #0
 800dc1e:	f77f ac12 	ble.w	800d446 <_svfprintf_r+0x3c6>
 800dc22:	2d10      	cmp	r5, #16
 800dc24:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800dc26:	4e71      	ldr	r6, [pc, #452]	; (800ddec <_svfprintf_r+0xd6c>)
 800dc28:	f340 833b 	ble.w	800e2a2 <_svfprintf_r+0x1222>
 800dc2c:	2710      	movs	r7, #16
 800dc2e:	ee19 ba10 	vmov	fp, s18
 800dc32:	e003      	b.n	800dc3c <_svfprintf_r+0xbbc>
 800dc34:	3d10      	subs	r5, #16
 800dc36:	2d10      	cmp	r5, #16
 800dc38:	f340 8333 	ble.w	800e2a2 <_svfprintf_r+0x1222>
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	3410      	adds	r4, #16
 800dc40:	2b07      	cmp	r3, #7
 800dc42:	e9c9 6700 	strd	r6, r7, [r9]
 800dc46:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800dc4a:	f109 0908 	add.w	r9, r9, #8
 800dc4e:	ddf1      	ble.n	800dc34 <_svfprintf_r+0xbb4>
 800dc50:	aa24      	add	r2, sp, #144	; 0x90
 800dc52:	4659      	mov	r1, fp
 800dc54:	4650      	mov	r0, sl
 800dc56:	f002 fd81 	bl	801075c <__ssprint_r>
 800dc5a:	2800      	cmp	r0, #0
 800dc5c:	f47f ab79 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800dc60:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800dc64:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
 800dc68:	e7e4      	b.n	800dc34 <_svfprintf_r+0xbb4>
 800dc6a:	9b03      	ldr	r3, [sp, #12]
 800dc6c:	07dd      	lsls	r5, r3, #31
 800dc6e:	f53f ae64 	bmi.w	800d93a <_svfprintf_r+0x8ba>
 800dc72:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800dc74:	3401      	adds	r4, #1
 800dc76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc78:	3501      	adds	r5, #1
 800dc7a:	9426      	str	r4, [sp, #152]	; 0x98
 800dc7c:	f8c9 3000 	str.w	r3, [r9]
 800dc80:	2301      	movs	r3, #1
 800dc82:	2d07      	cmp	r5, #7
 800dc84:	9525      	str	r5, [sp, #148]	; 0x94
 800dc86:	f8c9 3004 	str.w	r3, [r9, #4]
 800dc8a:	f77f ae8c 	ble.w	800d9a6 <_svfprintf_r+0x926>
 800dc8e:	aa24      	add	r2, sp, #144	; 0x90
 800dc90:	ee19 1a10 	vmov	r1, s18
 800dc94:	4650      	mov	r0, sl
 800dc96:	f002 fd61 	bl	801075c <__ssprint_r>
 800dc9a:	2800      	cmp	r0, #0
 800dc9c:	f47f ab59 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800dca0:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800dca4:	e9dd 5425 	ldrd	r5, r4, [sp, #148]	; 0x94
 800dca8:	e67f      	b.n	800d9aa <_svfprintf_r+0x92a>
 800dcaa:	ab50      	add	r3, sp, #320	; 0x140
 800dcac:	9309      	str	r3, [sp, #36]	; 0x24
 800dcae:	f7ff bb24 	b.w	800d2fa <_svfprintf_r+0x27a>
 800dcb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcb4:	1e5f      	subs	r7, r3, #1
 800dcb6:	2f00      	cmp	r7, #0
 800dcb8:	f77f ae77 	ble.w	800d9aa <_svfprintf_r+0x92a>
 800dcbc:	2f10      	cmp	r7, #16
 800dcbe:	4e4b      	ldr	r6, [pc, #300]	; (800ddec <_svfprintf_r+0xd6c>)
 800dcc0:	f340 838f 	ble.w	800e3e2 <_svfprintf_r+0x1362>
 800dcc4:	f8cd 801c 	str.w	r8, [sp, #28]
 800dcc8:	f04f 0b10 	mov.w	fp, #16
 800dccc:	ee19 8a10 	vmov	r8, s18
 800dcd0:	e003      	b.n	800dcda <_svfprintf_r+0xc5a>
 800dcd2:	3f10      	subs	r7, #16
 800dcd4:	2f10      	cmp	r7, #16
 800dcd6:	f340 8382 	ble.w	800e3de <_svfprintf_r+0x135e>
 800dcda:	3501      	adds	r5, #1
 800dcdc:	3410      	adds	r4, #16
 800dcde:	2d07      	cmp	r5, #7
 800dce0:	e9c9 6b00 	strd	r6, fp, [r9]
 800dce4:	e9cd 5425 	strd	r5, r4, [sp, #148]	; 0x94
 800dce8:	f109 0908 	add.w	r9, r9, #8
 800dcec:	ddf1      	ble.n	800dcd2 <_svfprintf_r+0xc52>
 800dcee:	aa24      	add	r2, sp, #144	; 0x90
 800dcf0:	4641      	mov	r1, r8
 800dcf2:	4650      	mov	r0, sl
 800dcf4:	f002 fd32 	bl	801075c <__ssprint_r>
 800dcf8:	2800      	cmp	r0, #0
 800dcfa:	f47f ab2a 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800dcfe:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800dd02:	e9dd 5425 	ldrd	r5, r4, [sp, #148]	; 0x94
 800dd06:	e7e4      	b.n	800dcd2 <_svfprintf_r+0xc52>
 800dd08:	aa24      	add	r2, sp, #144	; 0x90
 800dd0a:	ee19 1a10 	vmov	r1, s18
 800dd0e:	4650      	mov	r0, sl
 800dd10:	f002 fd24 	bl	801075c <__ssprint_r>
 800dd14:	2800      	cmp	r0, #0
 800dd16:	f47f ab1c 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800dd1a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dd1c:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800dd20:	f7ff bb7d 	b.w	800d41e <_svfprintf_r+0x39e>
 800dd24:	f01b 0310 	ands.w	r3, fp, #16
 800dd28:	d169      	bne.n	800ddfe <_svfprintf_r+0xd7e>
 800dd2a:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
 800dd2e:	f000 8364 	beq.w	800e3fa <_svfprintf_r+0x137a>
 800dd32:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dd34:	461e      	mov	r6, r3
 800dd36:	2201      	movs	r2, #1
 800dd38:	f851 4b04 	ldr.w	r4, [r1], #4
 800dd3c:	b2a4      	uxth	r4, r4
 800dd3e:	910a      	str	r1, [sp, #40]	; 0x28
 800dd40:	f7ff baba 	b.w	800d2b8 <_svfprintf_r+0x238>
 800dd44:	4264      	negs	r4, r4
 800dd46:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800dd4a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800dd4e:	f04f 0201 	mov.w	r2, #1
 800dd52:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 800dd56:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 800dd5a:	f7ff bab0 	b.w	800d2be <_svfprintf_r+0x23e>
 800dd5e:	aa24      	add	r2, sp, #144	; 0x90
 800dd60:	ee19 1a10 	vmov	r1, s18
 800dd64:	4650      	mov	r0, sl
 800dd66:	f002 fcf9 	bl	801075c <__ssprint_r>
 800dd6a:	2800      	cmp	r0, #0
 800dd6c:	f47f aaf1 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800dd70:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800dd74:	e9dd 5425 	ldrd	r5, r4, [sp, #148]	; 0x94
 800dd78:	e5fc      	b.n	800d974 <_svfprintf_r+0x8f4>
 800dd7a:	aa24      	add	r2, sp, #144	; 0x90
 800dd7c:	ee19 1a10 	vmov	r1, s18
 800dd80:	4650      	mov	r0, sl
 800dd82:	f002 fceb 	bl	801075c <__ssprint_r>
 800dd86:	2800      	cmp	r0, #0
 800dd88:	f47f aae3 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800dd8c:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800dd90:	e9dd 5425 	ldrd	r5, r4, [sp, #148]	; 0x94
 800dd94:	e5e1      	b.n	800d95a <_svfprintf_r+0x8da>
 800dd96:	9b03      	ldr	r3, [sp, #12]
 800dd98:	07da      	lsls	r2, r3, #31
 800dd9a:	f57f ab54 	bpl.w	800d446 <_svfprintf_r+0x3c6>
 800dd9e:	e4f2      	b.n	800d786 <_svfprintf_r+0x706>
 800dda0:	f898 5000 	ldrb.w	r5, [r8]
 800dda4:	930a      	str	r3, [sp, #40]	; 0x28
 800dda6:	f7ff b9c5 	b.w	800d134 <_svfprintf_r+0xb4>
 800ddaa:	2330      	movs	r3, #48	; 0x30
 800ddac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ddae:	3a02      	subs	r2, #2
 800ddb0:	f8cd b00c 	str.w	fp, [sp, #12]
 800ddb4:	f801 3c01 	strb.w	r3, [r1, #-1]
 800ddb8:	ab50      	add	r3, sp, #320	; 0x140
 800ddba:	9209      	str	r2, [sp, #36]	; 0x24
 800ddbc:	1a9b      	subs	r3, r3, r2
 800ddbe:	9307      	str	r3, [sp, #28]
 800ddc0:	f7ff ba9b 	b.w	800d2fa <_svfprintf_r+0x27a>
 800ddc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddc6:	9805      	ldr	r0, [sp, #20]
 800ddc8:	f853 1b04 	ldr.w	r1, [r3], #4
 800ddcc:	17c2      	asrs	r2, r0, #31
 800ddce:	930a      	str	r3, [sp, #40]	; 0x28
 800ddd0:	e9c1 0200 	strd	r0, r2, [r1]
 800ddd4:	f7ff b980 	b.w	800d0d8 <_svfprintf_r+0x58>
 800ddd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddda:	f853 4b04 	ldr.w	r4, [r3], #4
 800ddde:	17e6      	asrs	r6, r4, #31
 800dde0:	930a      	str	r3, [sp, #40]	; 0x28
 800dde2:	4633      	mov	r3, r6
 800dde4:	f7ff ba3a 	b.w	800d25c <_svfprintf_r+0x1dc>
 800dde8:	08013cbc 	.word	0x08013cbc
 800ddec:	08013ccc 	.word	0x08013ccc
 800ddf0:	2320      	movs	r3, #32
 800ddf2:	f898 5000 	ldrb.w	r5, [r8]
 800ddf6:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
 800ddfa:	f7ff b99b 	b.w	800d134 <_svfprintf_r+0xb4>
 800ddfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de00:	2201      	movs	r2, #1
 800de02:	f853 4b04 	ldr.w	r4, [r3], #4
 800de06:	930a      	str	r3, [sp, #40]	; 0x28
 800de08:	f7ff ba56 	b.w	800d2b8 <_svfprintf_r+0x238>
 800de0c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800de10:	4602      	mov	r2, r0
 800de12:	460b      	mov	r3, r1
 800de14:	f7f3 fa44 	bl	80012a0 <__aeabi_dcmpun>
 800de18:	2800      	cmp	r0, #0
 800de1a:	f040 860c 	bne.w	800ea36 <_svfprintf_r+0x19b6>
 800de1e:	f025 0320 	bic.w	r3, r5, #32
 800de22:	2b41      	cmp	r3, #65	; 0x41
 800de24:	9304      	str	r3, [sp, #16]
 800de26:	f040 8321 	bne.w	800e46c <_svfprintf_r+0x13ec>
 800de2a:	2330      	movs	r3, #48	; 0x30
 800de2c:	2d61      	cmp	r5, #97	; 0x61
 800de2e:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
 800de32:	bf0c      	ite	eq
 800de34:	2378      	moveq	r3, #120	; 0x78
 800de36:	2358      	movne	r3, #88	; 0x58
 800de38:	2f63      	cmp	r7, #99	; 0x63
 800de3a:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
 800de3e:	f300 8408 	bgt.w	800e652 <_svfprintf_r+0x15d2>
 800de42:	ab37      	add	r3, sp, #220	; 0xdc
 800de44:	9008      	str	r0, [sp, #32]
 800de46:	9309      	str	r3, [sp, #36]	; 0x24
 800de48:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800de4c:	2a00      	cmp	r2, #0
 800de4e:	f280 855f 	bge.w	800e910 <_svfprintf_r+0x1890>
 800de52:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800de56:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800de5a:	911a      	str	r1, [sp, #104]	; 0x68
 800de5c:	931b      	str	r3, [sp, #108]	; 0x6c
 800de5e:	232d      	movs	r3, #45	; 0x2d
 800de60:	9318      	str	r3, [sp, #96]	; 0x60
 800de62:	a81e      	add	r0, sp, #120	; 0x78
 800de64:	ed9d 0b1a 	vldr	d0, [sp, #104]	; 0x68
 800de68:	f002 fc0e 	bl	8010688 <frexp>
 800de6c:	2200      	movs	r2, #0
 800de6e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800de72:	ec51 0b10 	vmov	r0, r1, d0
 800de76:	f7f2 fbc7 	bl	8000608 <__aeabi_dmul>
 800de7a:	4602      	mov	r2, r0
 800de7c:	460b      	mov	r3, r1
 800de7e:	ec43 2b18 	vmov	d8, r2, r3
 800de82:	2200      	movs	r2, #0
 800de84:	2300      	movs	r3, #0
 800de86:	f7f2 fe27 	bl	8000ad8 <__aeabi_dcmpeq>
 800de8a:	b108      	cbz	r0, 800de90 <_svfprintf_r+0xe10>
 800de8c:	2301      	movs	r3, #1
 800de8e:	931e      	str	r3, [sp, #120]	; 0x78
 800de90:	4ab5      	ldr	r2, [pc, #724]	; (800e168 <_svfprintf_r+0x10e8>)
 800de92:	1e7c      	subs	r4, r7, #1
 800de94:	4bb5      	ldr	r3, [pc, #724]	; (800e16c <_svfprintf_r+0x10ec>)
 800de96:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800de9a:	2d61      	cmp	r5, #97	; 0x61
 800de9c:	bf18      	it	ne
 800de9e:	461a      	movne	r2, r3
 800dea0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800dea4:	ec57 6b18 	vmov	r6, r7, d8
 800dea8:	4690      	mov	r8, r2
 800deaa:	ee08 aa10 	vmov	s16, sl
 800deae:	920b      	str	r2, [sp, #44]	; 0x2c
 800deb0:	e9cd 950c 	strd	r9, r5, [sp, #48]	; 0x30
 800deb4:	e004      	b.n	800dec0 <_svfprintf_r+0xe40>
 800deb6:	2200      	movs	r2, #0
 800deb8:	2300      	movs	r3, #0
 800deba:	f7f2 fe0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800debe:	b9f0      	cbnz	r0, 800defe <_svfprintf_r+0xe7e>
 800dec0:	2200      	movs	r2, #0
 800dec2:	4bab      	ldr	r3, [pc, #684]	; (800e170 <_svfprintf_r+0x10f0>)
 800dec4:	4630      	mov	r0, r6
 800dec6:	4639      	mov	r1, r7
 800dec8:	f7f2 fb9e 	bl	8000608 <__aeabi_dmul>
 800decc:	460f      	mov	r7, r1
 800dece:	4606      	mov	r6, r0
 800ded0:	f7f2 fe34 	bl	8000b3c <__aeabi_d2iz>
 800ded4:	4605      	mov	r5, r0
 800ded6:	f7f2 fb2d 	bl	8000534 <__aeabi_i2d>
 800deda:	460b      	mov	r3, r1
 800dedc:	4602      	mov	r2, r0
 800dede:	4639      	mov	r1, r7
 800dee0:	4630      	mov	r0, r6
 800dee2:	f7f2 f9d9 	bl	8000298 <__aeabi_dsub>
 800dee6:	f818 3005 	ldrb.w	r3, [r8, r5]
 800deea:	46da      	mov	sl, fp
 800deec:	46a1      	mov	r9, r4
 800deee:	f80b 3b01 	strb.w	r3, [fp], #1
 800def2:	1c63      	adds	r3, r4, #1
 800def4:	4606      	mov	r6, r0
 800def6:	460f      	mov	r7, r1
 800def8:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800defc:	d1db      	bne.n	800deb6 <_svfprintf_r+0xe36>
 800defe:	2200      	movs	r2, #0
 800df00:	4b9c      	ldr	r3, [pc, #624]	; (800e174 <_svfprintf_r+0x10f4>)
 800df02:	4630      	mov	r0, r6
 800df04:	4639      	mov	r1, r7
 800df06:	462c      	mov	r4, r5
 800df08:	f8cd 901c 	str.w	r9, [sp, #28]
 800df0c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800df0e:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 800df12:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800df16:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800df1a:	ee18 aa10 	vmov	sl, s16
 800df1e:	f7f2 fe03 	bl	8000b28 <__aeabi_dcmpgt>
 800df22:	2800      	cmp	r0, #0
 800df24:	f040 853d 	bne.w	800e9a2 <_svfprintf_r+0x1922>
 800df28:	4630      	mov	r0, r6
 800df2a:	4639      	mov	r1, r7
 800df2c:	2200      	movs	r2, #0
 800df2e:	4b91      	ldr	r3, [pc, #580]	; (800e174 <_svfprintf_r+0x10f4>)
 800df30:	f7f2 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 800df34:	b118      	cbz	r0, 800df3e <_svfprintf_r+0xebe>
 800df36:	4623      	mov	r3, r4
 800df38:	07dc      	lsls	r4, r3, #31
 800df3a:	f100 8532 	bmi.w	800e9a2 <_svfprintf_r+0x1922>
 800df3e:	9b07      	ldr	r3, [sp, #28]
 800df40:	2b00      	cmp	r3, #0
 800df42:	db07      	blt.n	800df54 <_svfprintf_r+0xed4>
 800df44:	9b07      	ldr	r3, [sp, #28]
 800df46:	2230      	movs	r2, #48	; 0x30
 800df48:	3301      	adds	r3, #1
 800df4a:	445b      	add	r3, fp
 800df4c:	f80b 2b01 	strb.w	r2, [fp], #1
 800df50:	455b      	cmp	r3, fp
 800df52:	d1fb      	bne.n	800df4c <_svfprintf_r+0xecc>
 800df54:	9b03      	ldr	r3, [sp, #12]
 800df56:	f043 0302 	orr.w	r3, r3, #2
 800df5a:	9303      	str	r3, [sp, #12]
 800df5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df5e:	ebab 0303 	sub.w	r3, fp, r3
 800df62:	930d      	str	r3, [sp, #52]	; 0x34
 800df64:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800df66:	930b      	str	r3, [sp, #44]	; 0x2c
 800df68:	e2c4      	b.n	800e4f4 <_svfprintf_r+0x1474>
 800df6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df6c:	f853 4b04 	ldr.w	r4, [r3], #4
 800df70:	930a      	str	r3, [sp, #40]	; 0x28
 800df72:	f7ff b99d 	b.w	800d2b0 <_svfprintf_r+0x230>
 800df76:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800df7a:	f7ff bb3c 	b.w	800d5f6 <_svfprintf_r+0x576>
 800df7e:	4b7a      	ldr	r3, [pc, #488]	; (800e168 <_svfprintf_r+0x10e8>)
 800df80:	9313      	str	r3, [sp, #76]	; 0x4c
 800df82:	9b03      	ldr	r3, [sp, #12]
 800df84:	f013 0620 	ands.w	r6, r3, #32
 800df88:	f000 80d9 	beq.w	800e13e <_svfprintf_r+0x10be>
 800df8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df8e:	3307      	adds	r3, #7
 800df90:	f023 0307 	bic.w	r3, r3, #7
 800df94:	685e      	ldr	r6, [r3, #4]
 800df96:	f853 4b08 	ldr.w	r4, [r3], #8
 800df9a:	930a      	str	r3, [sp, #40]	; 0x28
 800df9c:	ea54 0306 	orrs.w	r3, r4, r6
 800dfa0:	d00a      	beq.n	800dfb8 <_svfprintf_r+0xf38>
 800dfa2:	9b03      	ldr	r3, [sp, #12]
 800dfa4:	07da      	lsls	r2, r3, #31
 800dfa6:	d507      	bpl.n	800dfb8 <_svfprintf_r+0xf38>
 800dfa8:	f043 0302 	orr.w	r3, r3, #2
 800dfac:	f88d 5075 	strb.w	r5, [sp, #117]	; 0x75
 800dfb0:	9303      	str	r3, [sp, #12]
 800dfb2:	2330      	movs	r3, #48	; 0x30
 800dfb4:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
 800dfb8:	9b03      	ldr	r3, [sp, #12]
 800dfba:	2202      	movs	r2, #2
 800dfbc:	f423 6b80 	bic.w	fp, r3, #1024	; 0x400
 800dfc0:	f7ff b97a 	b.w	800d2b8 <_svfprintf_r+0x238>
 800dfc4:	4b69      	ldr	r3, [pc, #420]	; (800e16c <_svfprintf_r+0x10ec>)
 800dfc6:	9313      	str	r3, [sp, #76]	; 0x4c
 800dfc8:	e7db      	b.n	800df82 <_svfprintf_r+0xf02>
 800dfca:	f043 0320 	orr.w	r3, r3, #32
 800dfce:	f898 5001 	ldrb.w	r5, [r8, #1]
 800dfd2:	f108 0801 	add.w	r8, r8, #1
 800dfd6:	9303      	str	r3, [sp, #12]
 800dfd8:	f7ff b8ac 	b.w	800d134 <_svfprintf_r+0xb4>
 800dfdc:	aa24      	add	r2, sp, #144	; 0x90
 800dfde:	ee19 1a10 	vmov	r1, s18
 800dfe2:	4650      	mov	r0, sl
 800dfe4:	f002 fbba 	bl	801075c <__ssprint_r>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	f47f a9b2 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800dfee:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800dff0:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800dff4:	f7ff bbd5 	b.w	800d7a2 <_svfprintf_r+0x722>
 800dff8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dffc:	f898 5001 	ldrb.w	r5, [r8, #1]
 800e000:	f108 0801 	add.w	r8, r8, #1
 800e004:	9303      	str	r3, [sp, #12]
 800e006:	f7ff b895 	b.w	800d134 <_svfprintf_r+0xb4>
 800e00a:	2140      	movs	r1, #64	; 0x40
 800e00c:	4638      	mov	r0, r7
 800e00e:	f7fe fc41 	bl	800c894 <_malloc_r>
 800e012:	6020      	str	r0, [r4, #0]
 800e014:	6120      	str	r0, [r4, #16]
 800e016:	2800      	cmp	r0, #0
 800e018:	f000 8561 	beq.w	800eade <_svfprintf_r+0x1a5e>
 800e01c:	2340      	movs	r3, #64	; 0x40
 800e01e:	6163      	str	r3, [r4, #20]
 800e020:	f7ff b848 	b.w	800d0b4 <_svfprintf_r+0x34>
 800e024:	2d10      	cmp	r5, #16
 800e026:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e028:	4e53      	ldr	r6, [pc, #332]	; (800e178 <_svfprintf_r+0x10f8>)
 800e02a:	f340 82d0 	ble.w	800e5ce <_svfprintf_r+0x154e>
 800e02e:	2710      	movs	r7, #16
 800e030:	ee19 ba10 	vmov	fp, s18
 800e034:	e003      	b.n	800e03e <_svfprintf_r+0xfbe>
 800e036:	3d10      	subs	r5, #16
 800e038:	2d10      	cmp	r5, #16
 800e03a:	f340 82c8 	ble.w	800e5ce <_svfprintf_r+0x154e>
 800e03e:	3301      	adds	r3, #1
 800e040:	3410      	adds	r4, #16
 800e042:	2b07      	cmp	r3, #7
 800e044:	e9c9 6700 	strd	r6, r7, [r9]
 800e048:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800e04c:	f109 0908 	add.w	r9, r9, #8
 800e050:	ddf1      	ble.n	800e036 <_svfprintf_r+0xfb6>
 800e052:	aa24      	add	r2, sp, #144	; 0x90
 800e054:	4659      	mov	r1, fp
 800e056:	4650      	mov	r0, sl
 800e058:	f002 fb80 	bl	801075c <__ssprint_r>
 800e05c:	2800      	cmp	r0, #0
 800e05e:	f47f a978 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e062:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e066:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
 800e06a:	e7e4      	b.n	800e036 <_svfprintf_r+0xfb6>
 800e06c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e06e:	4637      	mov	r7, r6
 800e070:	940a      	str	r4, [sp, #40]	; 0x28
 800e072:	f7fe ffd7 	bl	800d024 <strlen>
 800e076:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 800e07a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800e07e:	9007      	str	r0, [sp, #28]
 800e080:	9608      	str	r6, [sp, #32]
 800e082:	9610      	str	r6, [sp, #64]	; 0x40
 800e084:	9304      	str	r3, [sp, #16]
 800e086:	e9cd 660b 	strd	r6, r6, [sp, #44]	; 0x2c
 800e08a:	f7ff b942 	b.w	800d312 <_svfprintf_r+0x292>
 800e08e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e090:	2b00      	cmp	r3, #0
 800e092:	dc0b      	bgt.n	800e0ac <_svfprintf_r+0x102c>
 800e094:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e096:	2b00      	cmp	r3, #0
 800e098:	dc08      	bgt.n	800e0ac <_svfprintf_r+0x102c>
 800e09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e09c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e09e:	4413      	add	r3, r2
 800e0a0:	9307      	str	r3, [sp, #28]
 800e0a2:	9b07      	ldr	r3, [sp, #28]
 800e0a4:	459b      	cmp	fp, r3
 800e0a6:	bf28      	it	cs
 800e0a8:	469b      	movcs	fp, r3
 800e0aa:	e585      	b.n	800dbb8 <_svfprintf_r+0xb38>
 800e0ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e0b2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800e0b4:	4413      	add	r3, r2
 800e0b6:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e0ba:	4f2f      	ldr	r7, [pc, #188]	; (800e178 <_svfprintf_r+0x10f8>)
 800e0bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0be:	464b      	mov	r3, r9
 800e0c0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800e0c4:	ee19 9a10 	vmov	r9, s18
 800e0c8:	2c00      	cmp	r4, #0
 800e0ca:	d042      	beq.n	800e152 <_svfprintf_r+0x10d2>
 800e0cc:	3c01      	subs	r4, #1
 800e0ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800e0d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e0d2:	4410      	add	r0, r2
 800e0d4:	e9c3 1200 	strd	r1, r2, [r3]
 800e0d8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e0da:	9026      	str	r0, [sp, #152]	; 0x98
 800e0dc:	3201      	adds	r2, #1
 800e0de:	2a07      	cmp	r2, #7
 800e0e0:	9225      	str	r2, [sp, #148]	; 0x94
 800e0e2:	f300 8085 	bgt.w	800e1f0 <_svfprintf_r+0x1170>
 800e0e6:	3308      	adds	r3, #8
 800e0e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0ea:	f898 2000 	ldrb.w	r2, [r8]
 800e0ee:	eba1 060b 	sub.w	r6, r1, fp
 800e0f2:	9107      	str	r1, [sp, #28]
 800e0f4:	4296      	cmp	r6, r2
 800e0f6:	bfa8      	it	ge
 800e0f8:	4616      	movge	r6, r2
 800e0fa:	2e00      	cmp	r6, #0
 800e0fc:	dd0c      	ble.n	800e118 <_svfprintf_r+0x1098>
 800e0fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e100:	4430      	add	r0, r6
 800e102:	3201      	adds	r2, #1
 800e104:	9026      	str	r0, [sp, #152]	; 0x98
 800e106:	2a07      	cmp	r2, #7
 800e108:	9225      	str	r2, [sp, #148]	; 0x94
 800e10a:	e9c3 b600 	strd	fp, r6, [r3]
 800e10e:	f300 8131 	bgt.w	800e374 <_svfprintf_r+0x12f4>
 800e112:	3308      	adds	r3, #8
 800e114:	f898 2000 	ldrb.w	r2, [r8]
 800e118:	2e00      	cmp	r6, #0
 800e11a:	bfac      	ite	ge
 800e11c:	1b95      	subge	r5, r2, r6
 800e11e:	4615      	movlt	r5, r2
 800e120:	2d00      	cmp	r5, #0
 800e122:	dc1c      	bgt.n	800e15e <_svfprintf_r+0x10de>
 800e124:	4493      	add	fp, r2
 800e126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e128:	2a00      	cmp	r2, #0
 800e12a:	dccd      	bgt.n	800e0c8 <_svfprintf_r+0x1048>
 800e12c:	2c00      	cmp	r4, #0
 800e12e:	dccb      	bgt.n	800e0c8 <_svfprintf_r+0x1048>
 800e130:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800e134:	4604      	mov	r4, r0
 800e136:	4699      	mov	r9, r3
 800e138:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 800e13c:	e7b1      	b.n	800e0a2 <_svfprintf_r+0x1022>
 800e13e:	9b03      	ldr	r3, [sp, #12]
 800e140:	f013 0310 	ands.w	r3, r3, #16
 800e144:	f000 8093 	beq.w	800e26e <_svfprintf_r+0x11ee>
 800e148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e14a:	f853 4b04 	ldr.w	r4, [r3], #4
 800e14e:	930a      	str	r3, [sp, #40]	; 0x28
 800e150:	e724      	b.n	800df9c <_svfprintf_r+0xf1c>
 800e152:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e154:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e158:	3a01      	subs	r2, #1
 800e15a:	920c      	str	r2, [sp, #48]	; 0x30
 800e15c:	e7b7      	b.n	800e0ce <_svfprintf_r+0x104e>
 800e15e:	2d10      	cmp	r5, #16
 800e160:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800e162:	dd26      	ble.n	800e1b2 <_svfprintf_r+0x1132>
 800e164:	2610      	movs	r6, #16
 800e166:	e00c      	b.n	800e182 <_svfprintf_r+0x1102>
 800e168:	08013c88 	.word	0x08013c88
 800e16c:	08013c9c 	.word	0x08013c9c
 800e170:	40300000 	.word	0x40300000
 800e174:	3fe00000 	.word	0x3fe00000
 800e178:	08013ccc 	.word	0x08013ccc
 800e17c:	3d10      	subs	r5, #16
 800e17e:	2d10      	cmp	r5, #16
 800e180:	dd17      	ble.n	800e1b2 <_svfprintf_r+0x1132>
 800e182:	3201      	adds	r2, #1
 800e184:	3010      	adds	r0, #16
 800e186:	2a07      	cmp	r2, #7
 800e188:	e9c3 7600 	strd	r7, r6, [r3]
 800e18c:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
 800e190:	f103 0308 	add.w	r3, r3, #8
 800e194:	ddf2      	ble.n	800e17c <_svfprintf_r+0x10fc>
 800e196:	aa24      	add	r2, sp, #144	; 0x90
 800e198:	4649      	mov	r1, r9
 800e19a:	4650      	mov	r0, sl
 800e19c:	f002 fade 	bl	801075c <__ssprint_r>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	f47f a8d6 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e1a6:	3d10      	subs	r5, #16
 800e1a8:	ab27      	add	r3, sp, #156	; 0x9c
 800e1aa:	2d10      	cmp	r5, #16
 800e1ac:	e9dd 2025 	ldrd	r2, r0, [sp, #148]	; 0x94
 800e1b0:	dce7      	bgt.n	800e182 <_svfprintf_r+0x1102>
 800e1b2:	3201      	adds	r2, #1
 800e1b4:	4428      	add	r0, r5
 800e1b6:	605d      	str	r5, [r3, #4]
 800e1b8:	2a07      	cmp	r2, #7
 800e1ba:	601f      	str	r7, [r3, #0]
 800e1bc:	e9cd 2025 	strd	r2, r0, [sp, #148]	; 0x94
 800e1c0:	f300 8326 	bgt.w	800e810 <_svfprintf_r+0x1790>
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	f898 2000 	ldrb.w	r2, [r8]
 800e1ca:	e7ab      	b.n	800e124 <_svfprintf_r+0x10a4>
 800e1cc:	aa24      	add	r2, sp, #144	; 0x90
 800e1ce:	ee19 1a10 	vmov	r1, s18
 800e1d2:	4650      	mov	r0, sl
 800e1d4:	9318      	str	r3, [sp, #96]	; 0x60
 800e1d6:	f002 fac1 	bl	801075c <__ssprint_r>
 800e1da:	2800      	cmp	r0, #0
 800e1dc:	f47f a8b9 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e1e0:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800e1e4:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e1e8:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e1ea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e1ec:	f7ff b8eb 	b.w	800d3c6 <_svfprintf_r+0x346>
 800e1f0:	aa24      	add	r2, sp, #144	; 0x90
 800e1f2:	4649      	mov	r1, r9
 800e1f4:	4650      	mov	r0, sl
 800e1f6:	f002 fab1 	bl	801075c <__ssprint_r>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	f47f a8a9 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e200:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e202:	ab27      	add	r3, sp, #156	; 0x9c
 800e204:	e770      	b.n	800e0e8 <_svfprintf_r+0x1068>
 800e206:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e208:	3401      	adds	r4, #1
 800e20a:	4996      	ldr	r1, [pc, #600]	; (800e464 <_svfprintf_r+0x13e4>)
 800e20c:	3301      	adds	r3, #1
 800e20e:	9426      	str	r4, [sp, #152]	; 0x98
 800e210:	f8c9 1000 	str.w	r1, [r9]
 800e214:	2101      	movs	r1, #1
 800e216:	2b07      	cmp	r3, #7
 800e218:	9325      	str	r3, [sp, #148]	; 0x94
 800e21a:	f8c9 1004 	str.w	r1, [r9, #4]
 800e21e:	f300 81e4 	bgt.w	800e5ea <_svfprintf_r+0x156a>
 800e222:	f109 0908 	add.w	r9, r9, #8
 800e226:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e228:	4313      	orrs	r3, r2
 800e22a:	f000 82df 	beq.w	800e7ec <_svfprintf_r+0x176c>
 800e22e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e230:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e232:	441c      	add	r4, r3
 800e234:	e9c9 1300 	strd	r1, r3, [r9]
 800e238:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e23a:	9426      	str	r4, [sp, #152]	; 0x98
 800e23c:	3301      	adds	r3, #1
 800e23e:	2b07      	cmp	r3, #7
 800e240:	9325      	str	r3, [sp, #148]	; 0x94
 800e242:	f300 82b2 	bgt.w	800e7aa <_svfprintf_r+0x172a>
 800e246:	f109 0908 	add.w	r9, r9, #8
 800e24a:	2a00      	cmp	r2, #0
 800e24c:	f2c0 833e 	blt.w	800e8cc <_svfprintf_r+0x184c>
 800e250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e252:	3301      	adds	r3, #1
 800e254:	f8c9 2000 	str.w	r2, [r9]
 800e258:	2b07      	cmp	r3, #7
 800e25a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e25c:	4414      	add	r4, r2
 800e25e:	f8c9 2004 	str.w	r2, [r9, #4]
 800e262:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800e266:	f77f a8ec 	ble.w	800d442 <_svfprintf_r+0x3c2>
 800e26a:	f7ff bbab 	b.w	800d9c4 <_svfprintf_r+0x944>
 800e26e:	9a03      	ldr	r2, [sp, #12]
 800e270:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 800e274:	f000 80ce 	beq.w	800e414 <_svfprintf_r+0x1394>
 800e278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e27a:	461e      	mov	r6, r3
 800e27c:	f852 4b04 	ldr.w	r4, [r2], #4
 800e280:	b2a4      	uxth	r4, r4
 800e282:	920a      	str	r2, [sp, #40]	; 0x28
 800e284:	e68a      	b.n	800df9c <_svfprintf_r+0xf1c>
 800e286:	aa24      	add	r2, sp, #144	; 0x90
 800e288:	ee19 1a10 	vmov	r1, s18
 800e28c:	4650      	mov	r0, sl
 800e28e:	f002 fa65 	bl	801075c <__ssprint_r>
 800e292:	2800      	cmp	r0, #0
 800e294:	f47f a85d 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e298:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e29a:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e29e:	f7ff ba6d 	b.w	800d77c <_svfprintf_r+0x6fc>
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	442c      	add	r4, r5
 800e2a6:	f8c9 6000 	str.w	r6, [r9]
 800e2aa:	2b07      	cmp	r3, #7
 800e2ac:	f8c9 5004 	str.w	r5, [r9, #4]
 800e2b0:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800e2b4:	f77f a8c5 	ble.w	800d442 <_svfprintf_r+0x3c2>
 800e2b8:	f7ff bb84 	b.w	800d9c4 <_svfprintf_r+0x944>
 800e2bc:	f40b 6380 	and.w	r3, fp, #1024	; 0x400
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	a950      	add	r1, sp, #320	; 0x140
 800e2c4:	ee08 aa10 	vmov	s16, sl
 800e2c8:	9503      	str	r5, [sp, #12]
 800e2ca:	9707      	str	r7, [sp, #28]
 800e2cc:	460d      	mov	r5, r1
 800e2ce:	f8cd 8020 	str.w	r8, [sp, #32]
 800e2d2:	4617      	mov	r7, r2
 800e2d4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 800e2d8:	4698      	mov	r8, r3
 800e2da:	f8cd b010 	str.w	fp, [sp, #16]
 800e2de:	e00c      	b.n	800e2fa <_svfprintf_r+0x127a>
 800e2e0:	2300      	movs	r3, #0
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	4631      	mov	r1, r6
 800e2e6:	220a      	movs	r2, #10
 800e2e8:	f7f2 fca0 	bl	8000c2c <__aeabi_uldivmod>
 800e2ec:	2c0a      	cmp	r4, #10
 800e2ee:	f176 0300 	sbcs.w	r3, r6, #0
 800e2f2:	d31c      	bcc.n	800e32e <_svfprintf_r+0x12ae>
 800e2f4:	4604      	mov	r4, r0
 800e2f6:	460e      	mov	r6, r1
 800e2f8:	465d      	mov	r5, fp
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	4631      	mov	r1, r6
 800e2fe:	220a      	movs	r2, #10
 800e300:	2300      	movs	r3, #0
 800e302:	f7f2 fc93 	bl	8000c2c <__aeabi_uldivmod>
 800e306:	3230      	adds	r2, #48	; 0x30
 800e308:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800e30c:	3701      	adds	r7, #1
 800e30e:	f805 2c01 	strb.w	r2, [r5, #-1]
 800e312:	f1b8 0f00 	cmp.w	r8, #0
 800e316:	d0e3      	beq.n	800e2e0 <_svfprintf_r+0x1260>
 800e318:	f89a 3000 	ldrb.w	r3, [sl]
 800e31c:	42bb      	cmp	r3, r7
 800e31e:	d1df      	bne.n	800e2e0 <_svfprintf_r+0x1260>
 800e320:	2bff      	cmp	r3, #255	; 0xff
 800e322:	d0dd      	beq.n	800e2e0 <_svfprintf_r+0x1260>
 800e324:	2c0a      	cmp	r4, #10
 800e326:	f176 0300 	sbcs.w	r3, r6, #0
 800e32a:	f080 827e 	bcs.w	800e82a <_svfprintf_r+0x17aa>
 800e32e:	465a      	mov	r2, fp
 800e330:	ab50      	add	r3, sp, #320	; 0x140
 800e332:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800e336:	1a9b      	subs	r3, r3, r2
 800e338:	f8dd b010 	ldr.w	fp, [sp, #16]
 800e33c:	9d03      	ldr	r5, [sp, #12]
 800e33e:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800e342:	ee18 aa10 	vmov	sl, s16
 800e346:	970d      	str	r7, [sp, #52]	; 0x34
 800e348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e34c:	9f07      	ldr	r7, [sp, #28]
 800e34e:	f8cd b00c 	str.w	fp, [sp, #12]
 800e352:	9307      	str	r3, [sp, #28]
 800e354:	f7fe bfd1 	b.w	800d2fa <_svfprintf_r+0x27a>
 800e358:	aa24      	add	r2, sp, #144	; 0x90
 800e35a:	ee19 1a10 	vmov	r1, s18
 800e35e:	4650      	mov	r0, sl
 800e360:	f002 f9fc 	bl	801075c <__ssprint_r>
 800e364:	2800      	cmp	r0, #0
 800e366:	f47e aff4 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e36a:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e36c:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e370:	f7ff b850 	b.w	800d414 <_svfprintf_r+0x394>
 800e374:	aa24      	add	r2, sp, #144	; 0x90
 800e376:	4649      	mov	r1, r9
 800e378:	4650      	mov	r0, sl
 800e37a:	f002 f9ef 	bl	801075c <__ssprint_r>
 800e37e:	2800      	cmp	r0, #0
 800e380:	f47e afe7 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e384:	f898 2000 	ldrb.w	r2, [r8]
 800e388:	ab27      	add	r3, sp, #156	; 0x9c
 800e38a:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e38c:	e6c4      	b.n	800e118 <_svfprintf_r+0x1098>
 800e38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e390:	9905      	ldr	r1, [sp, #20]
 800e392:	f853 2b04 	ldr.w	r2, [r3], #4
 800e396:	6011      	str	r1, [r2, #0]
 800e398:	930a      	str	r3, [sp, #40]	; 0x28
 800e39a:	f7fe be9d 	b.w	800d0d8 <_svfprintf_r+0x58>
 800e39e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f43e afdc 	beq.w	800d35e <_svfprintf_r+0x2de>
 800e3a6:	ee19 4a10 	vmov	r4, s18
 800e3aa:	aa24      	add	r2, sp, #144	; 0x90
 800e3ac:	ee19 1a10 	vmov	r1, s18
 800e3b0:	4650      	mov	r0, sl
 800e3b2:	f002 f9d3 	bl	801075c <__ssprint_r>
 800e3b6:	89a3      	ldrh	r3, [r4, #12]
 800e3b8:	f7fe bfd4 	b.w	800d364 <_svfprintf_r+0x2e4>
 800e3bc:	2f06      	cmp	r7, #6
 800e3be:	463b      	mov	r3, r7
 800e3c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3c2:	bf28      	it	cs
 800e3c4:	2306      	movcs	r3, #6
 800e3c6:	940a      	str	r4, [sp, #40]	; 0x28
 800e3c8:	4617      	mov	r7, r2
 800e3ca:	9210      	str	r2, [sp, #64]	; 0x40
 800e3cc:	9304      	str	r3, [sp, #16]
 800e3ce:	e9cd 3207 	strd	r3, r2, [sp, #28]
 800e3d2:	4b25      	ldr	r3, [pc, #148]	; (800e468 <_svfprintf_r+0x13e8>)
 800e3d4:	e9cd 220b 	strd	r2, r2, [sp, #44]	; 0x2c
 800e3d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e3da:	f7fe bf9a 	b.w	800d312 <_svfprintf_r+0x292>
 800e3de:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800e3e2:	3501      	adds	r5, #1
 800e3e4:	443c      	add	r4, r7
 800e3e6:	f8c9 6000 	str.w	r6, [r9]
 800e3ea:	2d07      	cmp	r5, #7
 800e3ec:	f8c9 7004 	str.w	r7, [r9, #4]
 800e3f0:	e9cd 5425 	strd	r5, r4, [sp, #148]	; 0x94
 800e3f4:	f77f aad7 	ble.w	800d9a6 <_svfprintf_r+0x926>
 800e3f8:	e449      	b.n	800dc8e <_svfprintf_r+0xc0e>
 800e3fa:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 800e3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e400:	f000 8114 	beq.w	800e62c <_svfprintf_r+0x15ac>
 800e404:	f853 4b04 	ldr.w	r4, [r3], #4
 800e408:	4616      	mov	r6, r2
 800e40a:	2201      	movs	r2, #1
 800e40c:	b2e4      	uxtb	r4, r4
 800e40e:	930a      	str	r3, [sp, #40]	; 0x28
 800e410:	f7fe bf52 	b.w	800d2b8 <_svfprintf_r+0x238>
 800e414:	9b03      	ldr	r3, [sp, #12]
 800e416:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 800e41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e41c:	f000 8110 	beq.w	800e640 <_svfprintf_r+0x15c0>
 800e420:	f853 4b04 	ldr.w	r4, [r3], #4
 800e424:	4616      	mov	r6, r2
 800e426:	b2e4      	uxtb	r4, r4
 800e428:	930a      	str	r3, [sp, #40]	; 0x28
 800e42a:	e5b7      	b.n	800df9c <_svfprintf_r+0xf1c>
 800e42c:	9b03      	ldr	r3, [sp, #12]
 800e42e:	f413 7f00 	tst.w	r3, #512	; 0x200
 800e432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e434:	f853 4b04 	ldr.w	r4, [r3], #4
 800e438:	930a      	str	r3, [sp, #40]	; 0x28
 800e43a:	f000 80fd 	beq.w	800e638 <_svfprintf_r+0x15b8>
 800e43e:	f344 16c0 	sbfx	r6, r4, #7, #1
 800e442:	b264      	sxtb	r4, r4
 800e444:	4633      	mov	r3, r6
 800e446:	f7fe bf09 	b.w	800d25c <_svfprintf_r+0x1dc>
 800e44a:	9b03      	ldr	r3, [sp, #12]
 800e44c:	f413 7600 	ands.w	r6, r3, #512	; 0x200
 800e450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e452:	f000 80f9 	beq.w	800e648 <_svfprintf_r+0x15c8>
 800e456:	f853 4b04 	ldr.w	r4, [r3], #4
 800e45a:	4616      	mov	r6, r2
 800e45c:	b2e4      	uxtb	r4, r4
 800e45e:	930a      	str	r3, [sp, #40]	; 0x28
 800e460:	f7fe bf26 	b.w	800d2b0 <_svfprintf_r+0x230>
 800e464:	08013cb8 	.word	0x08013cb8
 800e468:	08013cb0 	.word	0x08013cb0
 800e46c:	1c7a      	adds	r2, r7, #1
 800e46e:	f000 80fc 	beq.w	800e66a <_svfprintf_r+0x15ea>
 800e472:	9b04      	ldr	r3, [sp, #16]
 800e474:	2b47      	cmp	r3, #71	; 0x47
 800e476:	f040 80f9 	bne.w	800e66c <_svfprintf_r+0x15ec>
 800e47a:	2f00      	cmp	r7, #0
 800e47c:	f040 80f6 	bne.w	800e66c <_svfprintf_r+0x15ec>
 800e480:	9a03      	ldr	r2, [sp, #12]
 800e482:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	; 0x38
 800e486:	f442 7680 	orr.w	r6, r2, #256	; 0x100
 800e48a:	4663      	mov	r3, ip
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	f2c0 82a3 	blt.w	800e9d8 <_svfprintf_r+0x1958>
 800e492:	2701      	movs	r7, #1
 800e494:	9018      	str	r0, [sp, #96]	; 0x60
 800e496:	463c      	mov	r4, r7
 800e498:	ec4c bb1b 	vmov	d11, fp, ip
 800e49c:	ab22      	add	r3, sp, #136	; 0x88
 800e49e:	eeb0 0a4b 	vmov.f32	s0, s22
 800e4a2:	eef0 0a6b 	vmov.f32	s1, s23
 800e4a6:	4622      	mov	r2, r4
 800e4a8:	2102      	movs	r1, #2
 800e4aa:	9301      	str	r3, [sp, #4]
 800e4ac:	ab1f      	add	r3, sp, #124	; 0x7c
 800e4ae:	4650      	mov	r0, sl
 800e4b0:	9300      	str	r3, [sp, #0]
 800e4b2:	ab1e      	add	r3, sp, #120	; 0x78
 800e4b4:	f000 fbd0 	bl	800ec58 <_dtoa_r>
 800e4b8:	9b04      	ldr	r3, [sp, #16]
 800e4ba:	9009      	str	r0, [sp, #36]	; 0x24
 800e4bc:	2b47      	cmp	r3, #71	; 0x47
 800e4be:	f040 81e7 	bne.w	800e890 <_svfprintf_r+0x1810>
 800e4c2:	9b03      	ldr	r3, [sp, #12]
 800e4c4:	07db      	lsls	r3, r3, #31
 800e4c6:	f100 81e3 	bmi.w	800e890 <_svfprintf_r+0x1810>
 800e4ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e4cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4ce:	1a9b      	subs	r3, r3, r2
 800e4d0:	930d      	str	r3, [sp, #52]	; 0x34
 800e4d2:	9b04      	ldr	r3, [sp, #16]
 800e4d4:	2b47      	cmp	r3, #71	; 0x47
 800e4d6:	f040 813f 	bne.w	800e758 <_svfprintf_r+0x16d8>
 800e4da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e4dc:	1cd8      	adds	r0, r3, #3
 800e4de:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4e0:	db02      	blt.n	800e4e8 <_svfprintf_r+0x1468>
 800e4e2:	42bb      	cmp	r3, r7
 800e4e4:	f340 8114 	ble.w	800e710 <_svfprintf_r+0x1690>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	3d02      	subs	r5, #2
 800e4ec:	9308      	str	r3, [sp, #32]
 800e4ee:	f025 0320 	bic.w	r3, r5, #32
 800e4f2:	9304      	str	r3, [sp, #16]
 800e4f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4f6:	9a04      	ldr	r2, [sp, #16]
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	2a41      	cmp	r2, #65	; 0x41
 800e4fc:	931e      	str	r3, [sp, #120]	; 0x78
 800e4fe:	f040 8289 	bne.w	800ea14 <_svfprintf_r+0x1994>
 800e502:	f105 020f 	add.w	r2, r5, #15
 800e506:	b2d2      	uxtb	r2, r2
 800e508:	2b00      	cmp	r3, #0
 800e50a:	f88d 2080 	strb.w	r2, [sp, #128]	; 0x80
 800e50e:	f2c0 82a2 	blt.w	800ea56 <_svfprintf_r+0x19d6>
 800e512:	222b      	movs	r2, #43	; 0x2b
 800e514:	2b09      	cmp	r3, #9
 800e516:	f88d 2081 	strb.w	r2, [sp, #129]	; 0x81
 800e51a:	f340 826c 	ble.w	800e9f6 <_svfprintf_r+0x1976>
 800e51e:	f10d 0c8f 	add.w	ip, sp, #143	; 0x8f
 800e522:	4fb1      	ldr	r7, [pc, #708]	; (800e7e8 <_svfprintf_r+0x1768>)
 800e524:	4660      	mov	r0, ip
 800e526:	fb87 1203 	smull	r1, r2, r7, r3
 800e52a:	17d9      	asrs	r1, r3, #31
 800e52c:	461e      	mov	r6, r3
 800e52e:	4604      	mov	r4, r0
 800e530:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
 800e534:	3801      	subs	r0, #1
 800e536:	2e63      	cmp	r6, #99	; 0x63
 800e538:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800e53c:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 800e540:	460b      	mov	r3, r1
 800e542:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800e546:	f804 2c01 	strb.w	r2, [r4, #-1]
 800e54a:	dcec      	bgt.n	800e526 <_svfprintf_r+0x14a6>
 800e54c:	3330      	adds	r3, #48	; 0x30
 800e54e:	b2da      	uxtb	r2, r3
 800e550:	1ea3      	subs	r3, r4, #2
 800e552:	459c      	cmp	ip, r3
 800e554:	f800 2c01 	strb.w	r2, [r0, #-1]
 800e558:	f240 82ca 	bls.w	800eaf0 <_svfprintf_r+0x1a70>
 800e55c:	f10d 0382 	add.w	r3, sp, #130	; 0x82
 800e560:	e001      	b.n	800e566 <_svfprintf_r+0x14e6>
 800e562:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e566:	4584      	cmp	ip, r0
 800e568:	f803 2b01 	strb.w	r2, [r3], #1
 800e56c:	d1f9      	bne.n	800e562 <_svfprintf_r+0x14e2>
 800e56e:	f10d 0391 	add.w	r3, sp, #145	; 0x91
 800e572:	f10d 0282 	add.w	r2, sp, #130	; 0x82
 800e576:	1b1b      	subs	r3, r3, r4
 800e578:	4413      	add	r3, r2
 800e57a:	aa20      	add	r2, sp, #128	; 0x80
 800e57c:	1a9b      	subs	r3, r3, r2
 800e57e:	9314      	str	r3, [sp, #80]	; 0x50
 800e580:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e582:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e584:	2b01      	cmp	r3, #1
 800e586:	441a      	add	r2, r3
 800e588:	9207      	str	r2, [sp, #28]
 800e58a:	f340 8269 	ble.w	800ea60 <_svfprintf_r+0x19e0>
 800e58e:	9b07      	ldr	r3, [sp, #28]
 800e590:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e592:	4413      	add	r3, r2
 800e594:	9307      	str	r3, [sp, #28]
 800e596:	9b03      	ldr	r3, [sp, #12]
 800e598:	9a07      	ldr	r2, [sp, #28]
 800e59a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e59e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800e5a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e5a6:	9204      	str	r2, [sp, #16]
 800e5a8:	9303      	str	r3, [sp, #12]
 800e5aa:	2300      	movs	r3, #0
 800e5ac:	9310      	str	r3, [sp, #64]	; 0x40
 800e5ae:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 800e5b2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f040 80c9 	bne.w	800e74c <_svfprintf_r+0x16cc>
 800e5ba:	461f      	mov	r7, r3
 800e5bc:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800e5c0:	f7fe bea7 	b.w	800d312 <_svfprintf_r+0x292>
 800e5c4:	222d      	movs	r2, #45	; 0x2d
 800e5c6:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 800e5ca:	f7fe bf8f 	b.w	800d4ec <_svfprintf_r+0x46c>
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	442c      	add	r4, r5
 800e5d2:	f8c9 6000 	str.w	r6, [r9]
 800e5d6:	2b07      	cmp	r3, #7
 800e5d8:	f8c9 5004 	str.w	r5, [r9, #4]
 800e5dc:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800e5e0:	dc7c      	bgt.n	800e6dc <_svfprintf_r+0x165c>
 800e5e2:	f109 0908 	add.w	r9, r9, #8
 800e5e6:	f7ff badf 	b.w	800dba8 <_svfprintf_r+0xb28>
 800e5ea:	aa24      	add	r2, sp, #144	; 0x90
 800e5ec:	ee19 1a10 	vmov	r1, s18
 800e5f0:	4650      	mov	r0, sl
 800e5f2:	f002 f8b3 	bl	801075c <__ssprint_r>
 800e5f6:	2800      	cmp	r0, #0
 800e5f8:	f47e aeab 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e5fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e5fe:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e602:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e604:	e60f      	b.n	800e226 <_svfprintf_r+0x11a6>
 800e606:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e608:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e60a:	1b5d      	subs	r5, r3, r5
 800e60c:	441e      	add	r6, r3
 800e60e:	eba6 060b 	sub.w	r6, r6, fp
 800e612:	42ae      	cmp	r6, r5
 800e614:	bfa8      	it	ge
 800e616:	462e      	movge	r6, r5
 800e618:	f7ff bafd 	b.w	800dc16 <_svfprintf_r+0xb96>
 800e61c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e61e:	9905      	ldr	r1, [sp, #20]
 800e620:	f853 2b04 	ldr.w	r2, [r3], #4
 800e624:	8011      	strh	r1, [r2, #0]
 800e626:	930a      	str	r3, [sp, #40]	; 0x28
 800e628:	f7fe bd56 	b.w	800d0d8 <_svfprintf_r+0x58>
 800e62c:	f853 4b04 	ldr.w	r4, [r3], #4
 800e630:	2201      	movs	r2, #1
 800e632:	930a      	str	r3, [sp, #40]	; 0x28
 800e634:	f7fe be40 	b.w	800d2b8 <_svfprintf_r+0x238>
 800e638:	17e6      	asrs	r6, r4, #31
 800e63a:	4633      	mov	r3, r6
 800e63c:	f7fe be0e 	b.w	800d25c <_svfprintf_r+0x1dc>
 800e640:	f853 4b04 	ldr.w	r4, [r3], #4
 800e644:	930a      	str	r3, [sp, #40]	; 0x28
 800e646:	e4a9      	b.n	800df9c <_svfprintf_r+0xf1c>
 800e648:	f853 4b04 	ldr.w	r4, [r3], #4
 800e64c:	930a      	str	r3, [sp, #40]	; 0x28
 800e64e:	f7fe be2f 	b.w	800d2b0 <_svfprintf_r+0x230>
 800e652:	1c79      	adds	r1, r7, #1
 800e654:	4650      	mov	r0, sl
 800e656:	f7fe f91d 	bl	800c894 <_malloc_r>
 800e65a:	9009      	str	r0, [sp, #36]	; 0x24
 800e65c:	2800      	cmp	r0, #0
 800e65e:	f000 822d 	beq.w	800eabc <_svfprintf_r+0x1a3c>
 800e662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e664:	9308      	str	r3, [sp, #32]
 800e666:	f7ff bbef 	b.w	800de48 <_svfprintf_r+0xdc8>
 800e66a:	2706      	movs	r7, #6
 800e66c:	9a03      	ldr	r2, [sp, #12]
 800e66e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e672:	f442 7680 	orr.w	r6, r2, #256	; 0x100
 800e676:	2900      	cmp	r1, #0
 800e678:	f2c0 81af 	blt.w	800e9da <_svfprintf_r+0x195a>
 800e67c:	2300      	movs	r3, #0
 800e67e:	ec41 0b1b 	vmov	d11, r0, r1
 800e682:	9318      	str	r3, [sp, #96]	; 0x60
 800e684:	9b04      	ldr	r3, [sp, #16]
 800e686:	2b46      	cmp	r3, #70	; 0x46
 800e688:	f040 80ef 	bne.w	800e86a <_svfprintf_r+0x17ea>
 800e68c:	ab22      	add	r3, sp, #136	; 0x88
 800e68e:	eeb0 0a4b 	vmov.f32	s0, s22
 800e692:	eef0 0a6b 	vmov.f32	s1, s23
 800e696:	463a      	mov	r2, r7
 800e698:	2103      	movs	r1, #3
 800e69a:	9301      	str	r3, [sp, #4]
 800e69c:	ab1f      	add	r3, sp, #124	; 0x7c
 800e69e:	4650      	mov	r0, sl
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	ab1e      	add	r3, sp, #120	; 0x78
 800e6a4:	f000 fad8 	bl	800ec58 <_dtoa_r>
 800e6a8:	7803      	ldrb	r3, [r0, #0]
 800e6aa:	9009      	str	r0, [sp, #36]	; 0x24
 800e6ac:	2b30      	cmp	r3, #48	; 0x30
 800e6ae:	d108      	bne.n	800e6c2 <_svfprintf_r+0x1642>
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	ec51 0b1b 	vmov	r0, r1, d11
 800e6b8:	f7f2 fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6bc:	2800      	cmp	r0, #0
 800e6be:	f000 81f6 	beq.w	800eaae <_svfprintf_r+0x1a2e>
 800e6c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800e6c4:	443b      	add	r3, r7
 800e6c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6c8:	18d4      	adds	r4, r2, r3
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	ec51 0b1b 	vmov	r0, r1, d11
 800e6d2:	f7f2 fa01 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6d6:	b178      	cbz	r0, 800e6f8 <_svfprintf_r+0x1678>
 800e6d8:	4623      	mov	r3, r4
 800e6da:	e6f7      	b.n	800e4cc <_svfprintf_r+0x144c>
 800e6dc:	aa24      	add	r2, sp, #144	; 0x90
 800e6de:	ee19 1a10 	vmov	r1, s18
 800e6e2:	4650      	mov	r0, sl
 800e6e4:	f002 f83a 	bl	801075c <__ssprint_r>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	f47e ae32 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e6ee:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e6f0:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e6f4:	f7ff ba58 	b.w	800dba8 <_svfprintf_r+0xb28>
 800e6f8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e6fa:	42a3      	cmp	r3, r4
 800e6fc:	f4bf aee6 	bcs.w	800e4cc <_svfprintf_r+0x144c>
 800e700:	2130      	movs	r1, #48	; 0x30
 800e702:	1c5a      	adds	r2, r3, #1
 800e704:	9222      	str	r2, [sp, #136]	; 0x88
 800e706:	7019      	strb	r1, [r3, #0]
 800e708:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e70a:	429c      	cmp	r4, r3
 800e70c:	d8f9      	bhi.n	800e702 <_svfprintf_r+0x1682>
 800e70e:	e6dd      	b.n	800e4cc <_svfprintf_r+0x144c>
 800e710:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e712:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e714:	4293      	cmp	r3, r2
 800e716:	f2c0 80cf 	blt.w	800e8b8 <_svfprintf_r+0x1838>
 800e71a:	9a03      	ldr	r2, [sp, #12]
 800e71c:	07d2      	lsls	r2, r2, #31
 800e71e:	f140 8167 	bpl.w	800e9f0 <_svfprintf_r+0x1970>
 800e722:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e724:	4413      	add	r3, r2
 800e726:	9307      	str	r3, [sp, #28]
 800e728:	9b03      	ldr	r3, [sp, #12]
 800e72a:	055f      	lsls	r7, r3, #21
 800e72c:	d503      	bpl.n	800e736 <_svfprintf_r+0x16b6>
 800e72e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e730:	2b00      	cmp	r3, #0
 800e732:	f300 810c 	bgt.w	800e94e <_svfprintf_r+0x18ce>
 800e736:	9b07      	ldr	r3, [sp, #28]
 800e738:	2567      	movs	r5, #103	; 0x67
 800e73a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e73e:	9304      	str	r3, [sp, #16]
 800e740:	2300      	movs	r3, #0
 800e742:	9603      	str	r6, [sp, #12]
 800e744:	9308      	str	r3, [sp, #32]
 800e746:	9310      	str	r3, [sp, #64]	; 0x40
 800e748:	930c      	str	r3, [sp, #48]	; 0x30
 800e74a:	e732      	b.n	800e5b2 <_svfprintf_r+0x1532>
 800e74c:	222d      	movs	r2, #45	; 0x2d
 800e74e:	2700      	movs	r7, #0
 800e750:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 800e754:	f7fe bddf 	b.w	800d316 <_svfprintf_r+0x296>
 800e758:	9b04      	ldr	r3, [sp, #16]
 800e75a:	2b46      	cmp	r3, #70	; 0x46
 800e75c:	f040 81bb 	bne.w	800ead6 <_svfprintf_r+0x1a56>
 800e760:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e762:	9b03      	ldr	r3, [sp, #12]
 800e764:	2a00      	cmp	r2, #0
 800e766:	920b      	str	r2, [sp, #44]	; 0x2c
 800e768:	f003 0301 	and.w	r3, r3, #1
 800e76c:	f340 818f 	ble.w	800ea8e <_svfprintf_r+0x1a0e>
 800e770:	433b      	orrs	r3, r7
 800e772:	f040 815a 	bne.w	800ea2a <_svfprintf_r+0x19aa>
 800e776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e778:	2566      	movs	r5, #102	; 0x66
 800e77a:	9307      	str	r3, [sp, #28]
 800e77c:	9b03      	ldr	r3, [sp, #12]
 800e77e:	0559      	lsls	r1, r3, #21
 800e780:	f100 80e6 	bmi.w	800e950 <_svfprintf_r+0x18d0>
 800e784:	9b07      	ldr	r3, [sp, #28]
 800e786:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e78a:	9304      	str	r3, [sp, #16]
 800e78c:	e7d8      	b.n	800e740 <_svfprintf_r+0x16c0>
 800e78e:	aa24      	add	r2, sp, #144	; 0x90
 800e790:	ee19 1a10 	vmov	r1, s18
 800e794:	4650      	mov	r0, sl
 800e796:	f001 ffe1 	bl	801075c <__ssprint_r>
 800e79a:	2800      	cmp	r0, #0
 800e79c:	f47e add9 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e7a0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e7a2:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e7a6:	f7ff b9f8 	b.w	800db9a <_svfprintf_r+0xb1a>
 800e7aa:	aa24      	add	r2, sp, #144	; 0x90
 800e7ac:	ee19 1a10 	vmov	r1, s18
 800e7b0:	4650      	mov	r0, sl
 800e7b2:	f001 ffd3 	bl	801075c <__ssprint_r>
 800e7b6:	2800      	cmp	r0, #0
 800e7b8:	f47e adcb 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e7bc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e7be:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e7c2:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
 800e7c6:	e540      	b.n	800e24a <_svfprintf_r+0x11ca>
 800e7c8:	aa24      	add	r2, sp, #144	; 0x90
 800e7ca:	ee19 1a10 	vmov	r1, s18
 800e7ce:	4650      	mov	r0, sl
 800e7d0:	f001 ffc4 	bl	801075c <__ssprint_r>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f47e adbc 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e7da:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800e7dc:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e7e0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e7e2:	f7ff b9ff 	b.w	800dbe4 <_svfprintf_r+0xb64>
 800e7e6:	bf00      	nop
 800e7e8:	66666667 	.word	0x66666667
 800e7ec:	9b03      	ldr	r3, [sp, #12]
 800e7ee:	07db      	lsls	r3, r3, #31
 800e7f0:	f57e ae29 	bpl.w	800d446 <_svfprintf_r+0x3c6>
 800e7f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e7f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e7f8:	441c      	add	r4, r3
 800e7fa:	e9c9 2300 	strd	r2, r3, [r9]
 800e7fe:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800e800:	9426      	str	r4, [sp, #152]	; 0x98
 800e802:	3301      	adds	r3, #1
 800e804:	2b07      	cmp	r3, #7
 800e806:	9325      	str	r3, [sp, #148]	; 0x94
 800e808:	dccf      	bgt.n	800e7aa <_svfprintf_r+0x172a>
 800e80a:	f109 0908 	add.w	r9, r9, #8
 800e80e:	e51f      	b.n	800e250 <_svfprintf_r+0x11d0>
 800e810:	aa24      	add	r2, sp, #144	; 0x90
 800e812:	4649      	mov	r1, r9
 800e814:	4650      	mov	r0, sl
 800e816:	f001 ffa1 	bl	801075c <__ssprint_r>
 800e81a:	2800      	cmp	r0, #0
 800e81c:	f47e ad99 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e820:	f898 2000 	ldrb.w	r2, [r8]
 800e824:	ab27      	add	r3, sp, #156	; 0x9c
 800e826:	9826      	ldr	r0, [sp, #152]	; 0x98
 800e828:	e47c      	b.n	800e124 <_svfprintf_r+0x10a4>
 800e82a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e82c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800e82e:	ebab 0b03 	sub.w	fp, fp, r3
 800e832:	461a      	mov	r2, r3
 800e834:	4658      	mov	r0, fp
 800e836:	f001 ff5f 	bl	80106f8 <strncpy>
 800e83a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800e83e:	b10b      	cbz	r3, 800e844 <_svfprintf_r+0x17c4>
 800e840:	f10a 0a01 	add.w	sl, sl, #1
 800e844:	4620      	mov	r0, r4
 800e846:	4631      	mov	r1, r6
 800e848:	220a      	movs	r2, #10
 800e84a:	2300      	movs	r3, #0
 800e84c:	2700      	movs	r7, #0
 800e84e:	f7f2 f9ed 	bl	8000c2c <__aeabi_uldivmod>
 800e852:	e54f      	b.n	800e2f4 <_svfprintf_r+0x1274>
 800e854:	9704      	str	r7, [sp, #16]
 800e856:	9707      	str	r7, [sp, #28]
 800e858:	4607      	mov	r7, r0
 800e85a:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800e85e:	940a      	str	r4, [sp, #40]	; 0x28
 800e860:	9010      	str	r0, [sp, #64]	; 0x40
 800e862:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 800e866:	f7fe bd54 	b.w	800d312 <_svfprintf_r+0x292>
 800e86a:	2b45      	cmp	r3, #69	; 0x45
 800e86c:	f040 813e 	bne.w	800eaec <_svfprintf_r+0x1a6c>
 800e870:	ab22      	add	r3, sp, #136	; 0x88
 800e872:	1c7c      	adds	r4, r7, #1
 800e874:	eeb0 0a4b 	vmov.f32	s0, s22
 800e878:	eef0 0a6b 	vmov.f32	s1, s23
 800e87c:	2102      	movs	r1, #2
 800e87e:	9301      	str	r3, [sp, #4]
 800e880:	ab1f      	add	r3, sp, #124	; 0x7c
 800e882:	4622      	mov	r2, r4
 800e884:	4650      	mov	r0, sl
 800e886:	9300      	str	r3, [sp, #0]
 800e888:	ab1e      	add	r3, sp, #120	; 0x78
 800e88a:	f000 f9e5 	bl	800ec58 <_dtoa_r>
 800e88e:	9009      	str	r0, [sp, #36]	; 0x24
 800e890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e892:	441c      	add	r4, r3
 800e894:	e719      	b.n	800e6ca <_svfprintf_r+0x164a>
 800e896:	aa24      	add	r2, sp, #144	; 0x90
 800e898:	ee19 1a10 	vmov	r1, s18
 800e89c:	4650      	mov	r0, sl
 800e89e:	f001 ff5d 	bl	801075c <__ssprint_r>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	f47e ad55 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e8a8:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800e8aa:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e8ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8b0:	9c26      	ldr	r4, [sp, #152]	; 0x98
 800e8b2:	1b5d      	subs	r5, r3, r5
 800e8b4:	f7ff b9af 	b.w	800dc16 <_svfprintf_r+0xb96>
 800e8b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e8ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e8bc:	189a      	adds	r2, r3, r2
 800e8be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	9207      	str	r2, [sp, #28]
 800e8c4:	f340 80a8 	ble.w	800ea18 <_svfprintf_r+0x1998>
 800e8c8:	2567      	movs	r5, #103	; 0x67
 800e8ca:	e757      	b.n	800e77c <_svfprintf_r+0x16fc>
 800e8cc:	4255      	negs	r5, r2
 800e8ce:	3210      	adds	r2, #16
 800e8d0:	4e89      	ldr	r6, [pc, #548]	; (800eaf8 <_svfprintf_r+0x1a78>)
 800e8d2:	da23      	bge.n	800e91c <_svfprintf_r+0x189c>
 800e8d4:	2710      	movs	r7, #16
 800e8d6:	ee19 ba10 	vmov	fp, s18
 800e8da:	e002      	b.n	800e8e2 <_svfprintf_r+0x1862>
 800e8dc:	3d10      	subs	r5, #16
 800e8de:	2d10      	cmp	r5, #16
 800e8e0:	dd1c      	ble.n	800e91c <_svfprintf_r+0x189c>
 800e8e2:	3301      	adds	r3, #1
 800e8e4:	3410      	adds	r4, #16
 800e8e6:	2b07      	cmp	r3, #7
 800e8e8:	e9c9 6700 	strd	r6, r7, [r9]
 800e8ec:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800e8f0:	f109 0908 	add.w	r9, r9, #8
 800e8f4:	ddf2      	ble.n	800e8dc <_svfprintf_r+0x185c>
 800e8f6:	aa24      	add	r2, sp, #144	; 0x90
 800e8f8:	4659      	mov	r1, fp
 800e8fa:	4650      	mov	r0, sl
 800e8fc:	f001 ff2e 	bl	801075c <__ssprint_r>
 800e900:	2800      	cmp	r0, #0
 800e902:	f47e ad26 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e906:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e90a:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
 800e90e:	e7e5      	b.n	800e8dc <_svfprintf_r+0x185c>
 800e910:	2300      	movs	r3, #0
 800e912:	e9cd 121a 	strd	r1, r2, [sp, #104]	; 0x68
 800e916:	9318      	str	r3, [sp, #96]	; 0x60
 800e918:	f7ff baa3 	b.w	800de62 <_svfprintf_r+0xde2>
 800e91c:	3301      	adds	r3, #1
 800e91e:	442c      	add	r4, r5
 800e920:	f8c9 6000 	str.w	r6, [r9]
 800e924:	2b07      	cmp	r3, #7
 800e926:	f8c9 5004 	str.w	r5, [r9, #4]
 800e92a:	e9cd 3425 	strd	r3, r4, [sp, #148]	; 0x94
 800e92e:	f77f af6c 	ble.w	800e80a <_svfprintf_r+0x178a>
 800e932:	aa24      	add	r2, sp, #144	; 0x90
 800e934:	ee19 1a10 	vmov	r1, s18
 800e938:	4650      	mov	r0, sl
 800e93a:	f001 ff0f 	bl	801075c <__ssprint_r>
 800e93e:	2800      	cmp	r0, #0
 800e940:	f47e ad07 	bne.w	800d352 <_svfprintf_r+0x2d2>
 800e944:	f10d 099c 	add.w	r9, sp, #156	; 0x9c
 800e948:	e9dd 3425 	ldrd	r3, r4, [sp, #148]	; 0x94
 800e94c:	e480      	b.n	800e250 <_svfprintf_r+0x11d0>
 800e94e:	2567      	movs	r5, #103	; 0x67
 800e950:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800e952:	780b      	ldrb	r3, [r1, #0]
 800e954:	2bff      	cmp	r3, #255	; 0xff
 800e956:	f000 80ba 	beq.w	800eace <_svfprintf_r+0x1a4e>
 800e95a:	2400      	movs	r4, #0
 800e95c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e95e:	4620      	mov	r0, r4
 800e960:	e003      	b.n	800e96a <_svfprintf_r+0x18ea>
 800e962:	3001      	adds	r0, #1
 800e964:	3101      	adds	r1, #1
 800e966:	2bff      	cmp	r3, #255	; 0xff
 800e968:	d008      	beq.n	800e97c <_svfprintf_r+0x18fc>
 800e96a:	4293      	cmp	r3, r2
 800e96c:	da06      	bge.n	800e97c <_svfprintf_r+0x18fc>
 800e96e:	1ad2      	subs	r2, r2, r3
 800e970:	784b      	ldrb	r3, [r1, #1]
 800e972:	2b00      	cmp	r3, #0
 800e974:	d1f5      	bne.n	800e962 <_svfprintf_r+0x18e2>
 800e976:	780b      	ldrb	r3, [r1, #0]
 800e978:	3401      	adds	r4, #1
 800e97a:	e7f4      	b.n	800e966 <_svfprintf_r+0x18e6>
 800e97c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e97e:	9117      	str	r1, [sp, #92]	; 0x5c
 800e980:	900c      	str	r0, [sp, #48]	; 0x30
 800e982:	9410      	str	r4, [sp, #64]	; 0x40
 800e984:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e988:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e98a:	4413      	add	r3, r2
 800e98c:	9a07      	ldr	r2, [sp, #28]
 800e98e:	9603      	str	r6, [sp, #12]
 800e990:	fb01 2303 	mla	r3, r1, r3, r2
 800e994:	2200      	movs	r2, #0
 800e996:	9307      	str	r3, [sp, #28]
 800e998:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e99c:	9208      	str	r2, [sp, #32]
 800e99e:	9304      	str	r3, [sp, #16]
 800e9a0:	e607      	b.n	800e5b2 <_svfprintf_r+0x1532>
 800e9a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9a4:	9322      	str	r3, [sp, #136]	; 0x88
 800e9a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9a8:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
 800e9ac:	7bd9      	ldrb	r1, [r3, #15]
 800e9ae:	465b      	mov	r3, fp
 800e9b0:	4291      	cmp	r1, r2
 800e9b2:	d109      	bne.n	800e9c8 <_svfprintf_r+0x1948>
 800e9b4:	2030      	movs	r0, #48	; 0x30
 800e9b6:	f803 0c01 	strb.w	r0, [r3, #-1]
 800e9ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e9bc:	1e5a      	subs	r2, r3, #1
 800e9be:	9222      	str	r2, [sp, #136]	; 0x88
 800e9c0:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800e9c4:	4291      	cmp	r1, r2
 800e9c6:	d0f6      	beq.n	800e9b6 <_svfprintf_r+0x1936>
 800e9c8:	2a39      	cmp	r2, #57	; 0x39
 800e9ca:	d074      	beq.n	800eab6 <_svfprintf_r+0x1a36>
 800e9cc:	3201      	adds	r2, #1
 800e9ce:	b2d2      	uxtb	r2, r2
 800e9d0:	f803 2c01 	strb.w	r2, [r3, #-1]
 800e9d4:	f7ff babe 	b.w	800df54 <_svfprintf_r+0xed4>
 800e9d8:	2701      	movs	r7, #1
 800e9da:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800e9de:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800e9e2:	ee0b 1a10 	vmov	s22, r1
 800e9e6:	ee0b 3a90 	vmov	s23, r3
 800e9ea:	232d      	movs	r3, #45	; 0x2d
 800e9ec:	9318      	str	r3, [sp, #96]	; 0x60
 800e9ee:	e649      	b.n	800e684 <_svfprintf_r+0x1604>
 800e9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9f2:	9307      	str	r3, [sp, #28]
 800e9f4:	e698      	b.n	800e728 <_svfprintf_r+0x16a8>
 800e9f6:	9a04      	ldr	r2, [sp, #16]
 800e9f8:	2a41      	cmp	r2, #65	; 0x41
 800e9fa:	d036      	beq.n	800ea6a <_svfprintf_r+0x19ea>
 800e9fc:	2230      	movs	r2, #48	; 0x30
 800e9fe:	f88d 2082 	strb.w	r2, [sp, #130]	; 0x82
 800ea02:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 800ea06:	3330      	adds	r3, #48	; 0x30
 800ea08:	f802 3b01 	strb.w	r3, [r2], #1
 800ea0c:	ab20      	add	r3, sp, #128	; 0x80
 800ea0e:	1ad3      	subs	r3, r2, r3
 800ea10:	9314      	str	r3, [sp, #80]	; 0x50
 800ea12:	e5b5      	b.n	800e580 <_svfprintf_r+0x1500>
 800ea14:	b2ea      	uxtb	r2, r5
 800ea16:	e577      	b.n	800e508 <_svfprintf_r+0x1488>
 800ea18:	f1c3 0301 	rsb	r3, r3, #1
 800ea1c:	2567      	movs	r5, #103	; 0x67
 800ea1e:	441a      	add	r2, r3
 800ea20:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ea24:	9207      	str	r2, [sp, #28]
 800ea26:	9304      	str	r3, [sp, #16]
 800ea28:	e68a      	b.n	800e740 <_svfprintf_r+0x16c0>
 800ea2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea2c:	2566      	movs	r5, #102	; 0x66
 800ea2e:	18d3      	adds	r3, r2, r3
 800ea30:	443b      	add	r3, r7
 800ea32:	9307      	str	r3, [sp, #28]
 800ea34:	e6a2      	b.n	800e77c <_svfprintf_r+0x16fc>
 800ea36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	db19      	blt.n	800ea70 <_svfprintf_r+0x19f0>
 800ea3c:	f89d 2073 	ldrb.w	r2, [sp, #115]	; 0x73
 800ea40:	9b03      	ldr	r3, [sp, #12]
 800ea42:	492e      	ldr	r1, [pc, #184]	; (800eafc <_svfprintf_r+0x1a7c>)
 800ea44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea48:	9303      	str	r3, [sp, #12]
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	9308      	str	r3, [sp, #32]
 800ea50:	4b2b      	ldr	r3, [pc, #172]	; (800eb00 <_svfprintf_r+0x1a80>)
 800ea52:	f7fe bd53 	b.w	800d4fc <_svfprintf_r+0x47c>
 800ea56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea58:	222d      	movs	r2, #45	; 0x2d
 800ea5a:	f1c3 0301 	rsb	r3, r3, #1
 800ea5e:	e559      	b.n	800e514 <_svfprintf_r+0x1494>
 800ea60:	9b03      	ldr	r3, [sp, #12]
 800ea62:	07d9      	lsls	r1, r3, #31
 800ea64:	f57f ad97 	bpl.w	800e596 <_svfprintf_r+0x1516>
 800ea68:	e591      	b.n	800e58e <_svfprintf_r+0x150e>
 800ea6a:	f10d 0282 	add.w	r2, sp, #130	; 0x82
 800ea6e:	e7ca      	b.n	800ea06 <_svfprintf_r+0x1986>
 800ea70:	222d      	movs	r2, #45	; 0x2d
 800ea72:	f88d 2073 	strb.w	r2, [sp, #115]	; 0x73
 800ea76:	e7e3      	b.n	800ea40 <_svfprintf_r+0x19c0>
 800ea78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea7a:	f898 5001 	ldrb.w	r5, [r8, #1]
 800ea7e:	4690      	mov	r8, r2
 800ea80:	f853 7b04 	ldr.w	r7, [r3], #4
 800ea84:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
 800ea88:	930a      	str	r3, [sp, #40]	; 0x28
 800ea8a:	f7fe bb53 	b.w	800d134 <_svfprintf_r+0xb4>
 800ea8e:	433b      	orrs	r3, r7
 800ea90:	d104      	bne.n	800ea9c <_svfprintf_r+0x1a1c>
 800ea92:	2301      	movs	r3, #1
 800ea94:	2566      	movs	r5, #102	; 0x66
 800ea96:	9304      	str	r3, [sp, #16]
 800ea98:	9307      	str	r3, [sp, #28]
 800ea9a:	e651      	b.n	800e740 <_svfprintf_r+0x16c0>
 800ea9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea9e:	2566      	movs	r5, #102	; 0x66
 800eaa0:	3301      	adds	r3, #1
 800eaa2:	443b      	add	r3, r7
 800eaa4:	9307      	str	r3, [sp, #28]
 800eaa6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800eaaa:	9304      	str	r3, [sp, #16]
 800eaac:	e648      	b.n	800e740 <_svfprintf_r+0x16c0>
 800eaae:	f1c7 0301 	rsb	r3, r7, #1
 800eab2:	931e      	str	r3, [sp, #120]	; 0x78
 800eab4:	e606      	b.n	800e6c4 <_svfprintf_r+0x1644>
 800eab6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eab8:	7a92      	ldrb	r2, [r2, #10]
 800eaba:	e789      	b.n	800e9d0 <_svfprintf_r+0x1950>
 800eabc:	ee19 1a10 	vmov	r1, s18
 800eac0:	898b      	ldrh	r3, [r1, #12]
 800eac2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800eac6:	4613      	mov	r3, r2
 800eac8:	818a      	strh	r2, [r1, #12]
 800eaca:	f7fe bc4b 	b.w	800d364 <_svfprintf_r+0x2e4>
 800eace:	2300      	movs	r3, #0
 800ead0:	9310      	str	r3, [sp, #64]	; 0x40
 800ead2:	930c      	str	r3, [sp, #48]	; 0x30
 800ead4:	e756      	b.n	800e984 <_svfprintf_r+0x1904>
 800ead6:	2300      	movs	r3, #0
 800ead8:	9308      	str	r3, [sp, #32]
 800eada:	f7ff ba43 	b.w	800df64 <_svfprintf_r+0xee4>
 800eade:	230c      	movs	r3, #12
 800eae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eae4:	603b      	str	r3, [r7, #0]
 800eae6:	9205      	str	r2, [sp, #20]
 800eae8:	f7fe bc43 	b.w	800d372 <_svfprintf_r+0x2f2>
 800eaec:	463c      	mov	r4, r7
 800eaee:	e4d5      	b.n	800e49c <_svfprintf_r+0x141c>
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	9314      	str	r3, [sp, #80]	; 0x50
 800eaf4:	e544      	b.n	800e580 <_svfprintf_r+0x1500>
 800eaf6:	bf00      	nop
 800eaf8:	08013ccc 	.word	0x08013ccc
 800eafc:	08013c84 	.word	0x08013c84
 800eb00:	08013b7c 	.word	0x08013b7c

0800eb04 <register_fini>:
 800eb04:	4b02      	ldr	r3, [pc, #8]	; (800eb10 <register_fini+0xc>)
 800eb06:	b113      	cbz	r3, 800eb0e <register_fini+0xa>
 800eb08:	4802      	ldr	r0, [pc, #8]	; (800eb14 <register_fini+0x10>)
 800eb0a:	f000 b805 	b.w	800eb18 <atexit>
 800eb0e:	4770      	bx	lr
 800eb10:	00000000 	.word	0x00000000
 800eb14:	0800fbad 	.word	0x0800fbad

0800eb18 <atexit>:
 800eb18:	2300      	movs	r3, #0
 800eb1a:	4601      	mov	r1, r0
 800eb1c:	461a      	mov	r2, r3
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f001 be9c 	b.w	801085c <__register_exitproc>

0800eb24 <quorem>:
 800eb24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb28:	6903      	ldr	r3, [r0, #16]
 800eb2a:	b085      	sub	sp, #20
 800eb2c:	690c      	ldr	r4, [r1, #16]
 800eb2e:	9101      	str	r1, [sp, #4]
 800eb30:	42a3      	cmp	r3, r4
 800eb32:	f2c0 808c 	blt.w	800ec4e <quorem+0x12a>
 800eb36:	3c01      	subs	r4, #1
 800eb38:	f101 0514 	add.w	r5, r1, #20
 800eb3c:	f100 0814 	add.w	r8, r0, #20
 800eb40:	4681      	mov	r9, r0
 800eb42:	00a3      	lsls	r3, r4, #2
 800eb44:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800eb48:	eb08 0184 	add.w	r1, r8, r4, lsl #2
 800eb4c:	9302      	str	r3, [sp, #8]
 800eb4e:	eb05 0784 	add.w	r7, r5, r4, lsl #2
 800eb52:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800eb56:	9103      	str	r1, [sp, #12]
 800eb58:	3301      	adds	r3, #1
 800eb5a:	429a      	cmp	r2, r3
 800eb5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800eb60:	d33c      	bcc.n	800ebdc <quorem+0xb8>
 800eb62:	2100      	movs	r1, #0
 800eb64:	46ae      	mov	lr, r5
 800eb66:	4640      	mov	r0, r8
 800eb68:	460a      	mov	r2, r1
 800eb6a:	f85e 3b04 	ldr.w	r3, [lr], #4
 800eb6e:	f8d0 a000 	ldr.w	sl, [r0]
 800eb72:	fa1f fc83 	uxth.w	ip, r3
 800eb76:	4577      	cmp	r7, lr
 800eb78:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800eb7c:	fb06 110c 	mla	r1, r6, ip, r1
 800eb80:	fa1f fb8a 	uxth.w	fp, sl
 800eb84:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eb88:	fb06 cc03 	mla	ip, r6, r3, ip
 800eb8c:	b28b      	uxth	r3, r1
 800eb8e:	eba2 0203 	sub.w	r2, r2, r3
 800eb92:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800eb96:	eb02 030b 	add.w	r3, r2, fp
 800eb9a:	fa1f f28c 	uxth.w	r2, ip
 800eb9e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eba2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebac:	ea4f 4222 	mov.w	r2, r2, asr #16
 800ebb0:	f840 3b04 	str.w	r3, [r0], #4
 800ebb4:	d2d9      	bcs.n	800eb6a <quorem+0x46>
 800ebb6:	9b02      	ldr	r3, [sp, #8]
 800ebb8:	f858 3003 	ldr.w	r3, [r8, r3]
 800ebbc:	b973      	cbnz	r3, 800ebdc <quorem+0xb8>
 800ebbe:	9b03      	ldr	r3, [sp, #12]
 800ebc0:	3b04      	subs	r3, #4
 800ebc2:	4598      	cmp	r8, r3
 800ebc4:	d304      	bcc.n	800ebd0 <quorem+0xac>
 800ebc6:	e007      	b.n	800ebd8 <quorem+0xb4>
 800ebc8:	4598      	cmp	r8, r3
 800ebca:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ebce:	d203      	bcs.n	800ebd8 <quorem+0xb4>
 800ebd0:	f853 2904 	ldr.w	r2, [r3], #-4
 800ebd4:	2a00      	cmp	r2, #0
 800ebd6:	d0f7      	beq.n	800ebc8 <quorem+0xa4>
 800ebd8:	f8c9 4010 	str.w	r4, [r9, #16]
 800ebdc:	9901      	ldr	r1, [sp, #4]
 800ebde:	4648      	mov	r0, r9
 800ebe0:	f001 fc24 	bl	801042c <__mcmp>
 800ebe4:	2800      	cmp	r0, #0
 800ebe6:	db2e      	blt.n	800ec46 <quorem+0x122>
 800ebe8:	3601      	adds	r6, #1
 800ebea:	4640      	mov	r0, r8
 800ebec:	2300      	movs	r3, #0
 800ebee:	f855 1b04 	ldr.w	r1, [r5], #4
 800ebf2:	f8d0 c000 	ldr.w	ip, [r0]
 800ebf6:	b28a      	uxth	r2, r1
 800ebf8:	42af      	cmp	r7, r5
 800ebfa:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800ebfe:	eba3 0202 	sub.w	r2, r3, r2
 800ec02:	fa1f fe8c 	uxth.w	lr, ip
 800ec06:	ebc1 431c 	rsb	r3, r1, ip, lsr #16
 800ec0a:	4472      	add	r2, lr
 800ec0c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800ec10:	b292      	uxth	r2, r2
 800ec12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ec16:	ea4f 4323 	mov.w	r3, r3, asr #16
 800ec1a:	f840 2b04 	str.w	r2, [r0], #4
 800ec1e:	d2e6      	bcs.n	800ebee <quorem+0xca>
 800ec20:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
 800ec24:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800ec28:	b96a      	cbnz	r2, 800ec46 <quorem+0x122>
 800ec2a:	3b04      	subs	r3, #4
 800ec2c:	4598      	cmp	r8, r3
 800ec2e:	d304      	bcc.n	800ec3a <quorem+0x116>
 800ec30:	e007      	b.n	800ec42 <quorem+0x11e>
 800ec32:	4598      	cmp	r8, r3
 800ec34:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800ec38:	d203      	bcs.n	800ec42 <quorem+0x11e>
 800ec3a:	f853 2904 	ldr.w	r2, [r3], #-4
 800ec3e:	2a00      	cmp	r2, #0
 800ec40:	d0f7      	beq.n	800ec32 <quorem+0x10e>
 800ec42:	f8c9 4010 	str.w	r4, [r9, #16]
 800ec46:	4630      	mov	r0, r6
 800ec48:	b005      	add	sp, #20
 800ec4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec4e:	2000      	movs	r0, #0
 800ec50:	b005      	add	sp, #20
 800ec52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec56:	bf00      	nop

0800ec58 <_dtoa_r>:
 800ec58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec5c:	ed2d 8b06 	vpush	{d8-d10}
 800ec60:	b097      	sub	sp, #92	; 0x5c
 800ec62:	4604      	mov	r4, r0
 800ec64:	9101      	str	r1, [sp, #4]
 800ec66:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800ec68:	9d26      	ldr	r5, [sp, #152]	; 0x98
 800ec6a:	920a      	str	r2, [sp, #40]	; 0x28
 800ec6c:	9307      	str	r3, [sp, #28]
 800ec6e:	ec57 6b10 	vmov	r6, r7, d0
 800ec72:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ec76:	b141      	cbz	r1, 800ec8a <_dtoa_r+0x32>
 800ec78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	4093      	lsls	r3, r2
 800ec7e:	604a      	str	r2, [r1, #4]
 800ec80:	608b      	str	r3, [r1, #8]
 800ec82:	f001 f971 	bl	800ff68 <_Bfree>
 800ec86:	2300      	movs	r3, #0
 800ec88:	6423      	str	r3, [r4, #64]	; 0x40
 800ec8a:	f1b7 0900 	subs.w	r9, r7, #0
 800ec8e:	f2c0 80b9 	blt.w	800ee04 <_dtoa_r+0x1ac>
 800ec92:	2300      	movs	r3, #0
 800ec94:	602b      	str	r3, [r5, #0]
 800ec96:	4b7c      	ldr	r3, [pc, #496]	; (800ee88 <_dtoa_r+0x230>)
 800ec98:	ea33 0309 	bics.w	r3, r3, r9
 800ec9c:	f000 80bd 	beq.w	800ee1a <_dtoa_r+0x1c2>
 800eca0:	2200      	movs	r2, #0
 800eca2:	2300      	movs	r3, #0
 800eca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eca8:	ec51 0b17 	vmov	r0, r1, d7
 800ecac:	eeb0 8a47 	vmov.f32	s16, s14
 800ecb0:	eef0 8a67 	vmov.f32	s17, s15
 800ecb4:	f7f1 ff10 	bl	8000ad8 <__aeabi_dcmpeq>
 800ecb8:	4680      	mov	r8, r0
 800ecba:	b188      	cbz	r0, 800ece0 <_dtoa_r+0x88>
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	9a07      	ldr	r2, [sp, #28]
 800ecc0:	6013      	str	r3, [r2, #0]
 800ecc2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	f000 826b 	beq.w	800f1a0 <_dtoa_r+0x548>
 800ecca:	4b70      	ldr	r3, [pc, #448]	; (800ee8c <_dtoa_r+0x234>)
 800eccc:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800ecd0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 800ecd2:	6013      	str	r3, [r2, #0]
 800ecd4:	4648      	mov	r0, r9
 800ecd6:	b017      	add	sp, #92	; 0x5c
 800ecd8:	ecbd 8b06 	vpop	{d8-d10}
 800ecdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ece0:	eeb0 0a48 	vmov.f32	s0, s16
 800ece4:	eef0 0a68 	vmov.f32	s1, s17
 800ece8:	aa14      	add	r2, sp, #80	; 0x50
 800ecea:	a915      	add	r1, sp, #84	; 0x54
 800ecec:	4620      	mov	r0, r4
 800ecee:	f001 fc63 	bl	80105b8 <__d2b>
 800ecf2:	ee09 0a10 	vmov	s18, r0
 800ecf6:	ea5f 5519 	movs.w	r5, r9, lsr #20
 800ecfa:	ec5b ab18 	vmov	sl, fp, d8
 800ecfe:	f040 809e 	bne.w	800ee3e <_dtoa_r+0x1e6>
 800ed02:	e9dd 8514 	ldrd	r8, r5, [sp, #80]	; 0x50
 800ed06:	4445      	add	r5, r8
 800ed08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ed0c:	2820      	cmp	r0, #32
 800ed0e:	f340 824f 	ble.w	800f1b0 <_dtoa_r+0x558>
 800ed12:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ed16:	fa09 f900 	lsl.w	r9, r9, r0
 800ed1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ed1e:	fa26 f000 	lsr.w	r0, r6, r0
 800ed22:	ea49 0000 	orr.w	r0, r9, r0
 800ed26:	f7f1 fbf5 	bl	8000514 <__aeabi_ui2d>
 800ed2a:	3d01      	subs	r5, #1
 800ed2c:	2301      	movs	r3, #1
 800ed2e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800ed32:	9311      	str	r3, [sp, #68]	; 0x44
 800ed34:	2200      	movs	r2, #0
 800ed36:	4b56      	ldr	r3, [pc, #344]	; (800ee90 <_dtoa_r+0x238>)
 800ed38:	f7f1 faae 	bl	8000298 <__aeabi_dsub>
 800ed3c:	a34c      	add	r3, pc, #304	; (adr r3, 800ee70 <_dtoa_r+0x218>)
 800ed3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed42:	f7f1 fc61 	bl	8000608 <__aeabi_dmul>
 800ed46:	a34c      	add	r3, pc, #304	; (adr r3, 800ee78 <_dtoa_r+0x220>)
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	f7f1 faa6 	bl	800029c <__adddf3>
 800ed50:	4606      	mov	r6, r0
 800ed52:	460f      	mov	r7, r1
 800ed54:	4628      	mov	r0, r5
 800ed56:	f7f1 fbed 	bl	8000534 <__aeabi_i2d>
 800ed5a:	a349      	add	r3, pc, #292	; (adr r3, 800ee80 <_dtoa_r+0x228>)
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	f7f1 fc52 	bl	8000608 <__aeabi_dmul>
 800ed64:	4602      	mov	r2, r0
 800ed66:	460b      	mov	r3, r1
 800ed68:	4630      	mov	r0, r6
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f7f1 fa96 	bl	800029c <__adddf3>
 800ed70:	4606      	mov	r6, r0
 800ed72:	460f      	mov	r7, r1
 800ed74:	f7f1 fee2 	bl	8000b3c <__aeabi_d2iz>
 800ed78:	2200      	movs	r2, #0
 800ed7a:	4681      	mov	r9, r0
 800ed7c:	9005      	str	r0, [sp, #20]
 800ed7e:	2300      	movs	r3, #0
 800ed80:	4630      	mov	r0, r6
 800ed82:	4639      	mov	r1, r7
 800ed84:	f7f1 feb2 	bl	8000aec <__aeabi_dcmplt>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	f040 81fb 	bne.w	800f184 <_dtoa_r+0x52c>
 800ed8e:	9e05      	ldr	r6, [sp, #20]
 800ed90:	2e16      	cmp	r6, #22
 800ed92:	f200 81e9 	bhi.w	800f168 <_dtoa_r+0x510>
 800ed96:	4b3f      	ldr	r3, [pc, #252]	; (800ee94 <_dtoa_r+0x23c>)
 800ed98:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ed9c:	ec51 0b18 	vmov	r0, r1, d8
 800eda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eda4:	f7f1 fea2 	bl	8000aec <__aeabi_dcmplt>
 800eda8:	2800      	cmp	r0, #0
 800edaa:	d079      	beq.n	800eea0 <_dtoa_r+0x248>
 800edac:	1e73      	subs	r3, r6, #1
 800edae:	eba8 0505 	sub.w	r5, r8, r5
 800edb2:	9305      	str	r3, [sp, #20]
 800edb4:	2300      	movs	r3, #0
 800edb6:	9310      	str	r3, [sp, #64]	; 0x40
 800edb8:	1e6b      	subs	r3, r5, #1
 800edba:	9308      	str	r3, [sp, #32]
 800edbc:	f100 81dc 	bmi.w	800f178 <_dtoa_r+0x520>
 800edc0:	2300      	movs	r3, #0
 800edc2:	930b      	str	r3, [sp, #44]	; 0x2c
 800edc4:	9b05      	ldr	r3, [sp, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	da72      	bge.n	800eeb0 <_dtoa_r+0x258>
 800edca:	9b05      	ldr	r3, [sp, #20]
 800edcc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800edce:	9306      	str	r3, [sp, #24]
 800edd0:	1ad2      	subs	r2, r2, r3
 800edd2:	920b      	str	r2, [sp, #44]	; 0x2c
 800edd4:	425a      	negs	r2, r3
 800edd6:	2300      	movs	r3, #0
 800edd8:	920d      	str	r2, [sp, #52]	; 0x34
 800edda:	9305      	str	r3, [sp, #20]
 800eddc:	9b01      	ldr	r3, [sp, #4]
 800edde:	2b09      	cmp	r3, #9
 800ede0:	d870      	bhi.n	800eec4 <_dtoa_r+0x26c>
 800ede2:	2b05      	cmp	r3, #5
 800ede4:	f340 81e9 	ble.w	800f1ba <_dtoa_r+0x562>
 800ede8:	3b04      	subs	r3, #4
 800edea:	2500      	movs	r5, #0
 800edec:	9301      	str	r3, [sp, #4]
 800edee:	9b01      	ldr	r3, [sp, #4]
 800edf0:	3b02      	subs	r3, #2
 800edf2:	2b03      	cmp	r3, #3
 800edf4:	f200 8555 	bhi.w	800f8a2 <_dtoa_r+0xc4a>
 800edf8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800edfc:	03b303b6 	.word	0x03b303b6
 800ee00:	038e03aa 	.word	0x038e03aa
 800ee04:	2301      	movs	r3, #1
 800ee06:	f029 4900 	bic.w	r9, r9, #2147483648	; 0x80000000
 800ee0a:	602b      	str	r3, [r5, #0]
 800ee0c:	4b1e      	ldr	r3, [pc, #120]	; (800ee88 <_dtoa_r+0x230>)
 800ee0e:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee12:	ea33 0309 	bics.w	r3, r3, r9
 800ee16:	f47f af43 	bne.w	800eca0 <_dtoa_r+0x48>
 800ee1a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ee1e:	f3c9 0913 	ubfx	r9, r9, #0, #20
 800ee22:	9a07      	ldr	r2, [sp, #28]
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	ea59 0306 	orrs.w	r3, r9, r6
 800ee2a:	d117      	bne.n	800ee5c <_dtoa_r+0x204>
 800ee2c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ee2e:	f8df 9068 	ldr.w	r9, [pc, #104]	; 800ee98 <_dtoa_r+0x240>
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	f43f af4e 	beq.w	800ecd4 <_dtoa_r+0x7c>
 800ee38:	f109 0308 	add.w	r3, r9, #8
 800ee3c:	e748      	b.n	800ecd0 <_dtoa_r+0x78>
 800ee3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ee42:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 800ee46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ee4a:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800ee4e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800ee52:	ee18 0a10 	vmov	r0, s16
 800ee56:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800ee5a:	e76b      	b.n	800ed34 <_dtoa_r+0xdc>
 800ee5c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800ee5e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 800ee9c <_dtoa_r+0x244>
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	f43f af36 	beq.w	800ecd4 <_dtoa_r+0x7c>
 800ee68:	f109 0303 	add.w	r3, r9, #3
 800ee6c:	e730      	b.n	800ecd0 <_dtoa_r+0x78>
 800ee6e:	bf00      	nop
 800ee70:	636f4361 	.word	0x636f4361
 800ee74:	3fd287a7 	.word	0x3fd287a7
 800ee78:	8b60c8b3 	.word	0x8b60c8b3
 800ee7c:	3fc68a28 	.word	0x3fc68a28
 800ee80:	509f79fb 	.word	0x509f79fb
 800ee84:	3fd34413 	.word	0x3fd34413
 800ee88:	7ff00000 	.word	0x7ff00000
 800ee8c:	08013cb9 	.word	0x08013cb9
 800ee90:	3ff80000 	.word	0x3ff80000
 800ee94:	08013e28 	.word	0x08013e28
 800ee98:	08013ce0 	.word	0x08013ce0
 800ee9c:	08013cdc 	.word	0x08013cdc
 800eea0:	eba8 0505 	sub.w	r5, r8, r5
 800eea4:	1e6b      	subs	r3, r5, #1
 800eea6:	9308      	str	r3, [sp, #32]
 800eea8:	f100 84e1 	bmi.w	800f86e <_dtoa_r+0xc16>
 800eeac:	9010      	str	r0, [sp, #64]	; 0x40
 800eeae:	900b      	str	r0, [sp, #44]	; 0x2c
 800eeb0:	9b08      	ldr	r3, [sp, #32]
 800eeb2:	9a05      	ldr	r2, [sp, #20]
 800eeb4:	4413      	add	r3, r2
 800eeb6:	9206      	str	r2, [sp, #24]
 800eeb8:	9308      	str	r3, [sp, #32]
 800eeba:	2300      	movs	r3, #0
 800eebc:	930d      	str	r3, [sp, #52]	; 0x34
 800eebe:	9b01      	ldr	r3, [sp, #4]
 800eec0:	2b09      	cmp	r3, #9
 800eec2:	d98e      	bls.n	800ede2 <_dtoa_r+0x18a>
 800eec4:	2300      	movs	r3, #0
 800eec6:	2501      	movs	r5, #1
 800eec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eecc:	9301      	str	r3, [sp, #4]
 800eece:	9209      	str	r2, [sp, #36]	; 0x24
 800eed0:	950c      	str	r5, [sp, #48]	; 0x30
 800eed2:	930a      	str	r3, [sp, #40]	; 0x28
 800eed4:	2100      	movs	r1, #0
 800eed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eed8:	6461      	str	r1, [r4, #68]	; 0x44
 800eeda:	9312      	str	r3, [sp, #72]	; 0x48
 800eedc:	4620      	mov	r0, r4
 800eede:	f001 f81d 	bl	800ff1c <_Balloc>
 800eee2:	9004      	str	r0, [sp, #16]
 800eee4:	2800      	cmp	r0, #0
 800eee6:	f000 864c 	beq.w	800fb82 <_dtoa_r+0xf2a>
 800eeea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eeec:	2b0e      	cmp	r3, #14
 800eeee:	bf8c      	ite	hi
 800eef0:	2500      	movhi	r5, #0
 800eef2:	f005 0501 	andls.w	r5, r5, #1
 800eef6:	9b04      	ldr	r3, [sp, #16]
 800eef8:	6423      	str	r3, [r4, #64]	; 0x40
 800eefa:	2d00      	cmp	r5, #0
 800eefc:	f000 8108 	beq.w	800f110 <_dtoa_r+0x4b8>
 800ef00:	9906      	ldr	r1, [sp, #24]
 800ef02:	2900      	cmp	r1, #0
 800ef04:	f340 8272 	ble.w	800f3ec <_dtoa_r+0x794>
 800ef08:	f001 020f 	and.w	r2, r1, #15
 800ef0c:	4bac      	ldr	r3, [pc, #688]	; (800f1c0 <_dtoa_r+0x568>)
 800ef0e:	110d      	asrs	r5, r1, #4
 800ef10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ef14:	460a      	mov	r2, r1
 800ef16:	05d2      	lsls	r2, r2, #23
 800ef18:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ef1c:	f140 82f7 	bpl.w	800f50e <_dtoa_r+0x8b6>
 800ef20:	4ba8      	ldr	r3, [pc, #672]	; (800f1c4 <_dtoa_r+0x56c>)
 800ef22:	f005 050f 	and.w	r5, r5, #15
 800ef26:	f04f 0803 	mov.w	r8, #3
 800ef2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ef2e:	ec51 0b18 	vmov	r0, r1, d8
 800ef32:	f7f1 fc93 	bl	800085c <__aeabi_ddiv>
 800ef36:	4682      	mov	sl, r0
 800ef38:	468b      	mov	fp, r1
 800ef3a:	b18d      	cbz	r5, 800ef60 <_dtoa_r+0x308>
 800ef3c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800f1c4 <_dtoa_r+0x56c>
 800ef40:	07eb      	lsls	r3, r5, #31
 800ef42:	d509      	bpl.n	800ef58 <_dtoa_r+0x300>
 800ef44:	4630      	mov	r0, r6
 800ef46:	4639      	mov	r1, r7
 800ef48:	f108 0801 	add.w	r8, r8, #1
 800ef4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ef50:	f7f1 fb5a 	bl	8000608 <__aeabi_dmul>
 800ef54:	4606      	mov	r6, r0
 800ef56:	460f      	mov	r7, r1
 800ef58:	106d      	asrs	r5, r5, #1
 800ef5a:	f109 0908 	add.w	r9, r9, #8
 800ef5e:	d1ef      	bne.n	800ef40 <_dtoa_r+0x2e8>
 800ef60:	4632      	mov	r2, r6
 800ef62:	463b      	mov	r3, r7
 800ef64:	4650      	mov	r0, sl
 800ef66:	4659      	mov	r1, fp
 800ef68:	f7f1 fc78 	bl	800085c <__aeabi_ddiv>
 800ef6c:	4606      	mov	r6, r0
 800ef6e:	460f      	mov	r7, r1
 800ef70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ef72:	b143      	cbz	r3, 800ef86 <_dtoa_r+0x32e>
 800ef74:	2200      	movs	r2, #0
 800ef76:	4b94      	ldr	r3, [pc, #592]	; (800f1c8 <_dtoa_r+0x570>)
 800ef78:	4630      	mov	r0, r6
 800ef7a:	4639      	mov	r1, r7
 800ef7c:	f7f1 fdb6 	bl	8000aec <__aeabi_dcmplt>
 800ef80:	2800      	cmp	r0, #0
 800ef82:	f040 844f 	bne.w	800f824 <_dtoa_r+0xbcc>
 800ef86:	4640      	mov	r0, r8
 800ef88:	f7f1 fad4 	bl	8000534 <__aeabi_i2d>
 800ef8c:	4632      	mov	r2, r6
 800ef8e:	463b      	mov	r3, r7
 800ef90:	f7f1 fb3a 	bl	8000608 <__aeabi_dmul>
 800ef94:	4b8d      	ldr	r3, [pc, #564]	; (800f1cc <_dtoa_r+0x574>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	f7f1 f980 	bl	800029c <__adddf3>
 800ef9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef9e:	4680      	mov	r8, r0
 800efa0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	f000 809a 	beq.w	800f0de <_dtoa_r+0x486>
 800efaa:	9b06      	ldr	r3, [sp, #24]
 800efac:	9313      	str	r3, [sp, #76]	; 0x4c
 800efae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800efb0:	930e      	str	r3, [sp, #56]	; 0x38
 800efb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	f000 82da 	beq.w	800f56e <_dtoa_r+0x916>
 800efba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800efbc:	2000      	movs	r0, #0
 800efbe:	4b80      	ldr	r3, [pc, #512]	; (800f1c0 <_dtoa_r+0x568>)
 800efc0:	4983      	ldr	r1, [pc, #524]	; (800f1d0 <_dtoa_r+0x578>)
 800efc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800efc6:	9d04      	ldr	r5, [sp, #16]
 800efc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800efcc:	f7f1 fc46 	bl	800085c <__aeabi_ddiv>
 800efd0:	4642      	mov	r2, r8
 800efd2:	464b      	mov	r3, r9
 800efd4:	f7f1 f960 	bl	8000298 <__aeabi_dsub>
 800efd8:	4682      	mov	sl, r0
 800efda:	468b      	mov	fp, r1
 800efdc:	4630      	mov	r0, r6
 800efde:	4639      	mov	r1, r7
 800efe0:	f7f1 fdac 	bl	8000b3c <__aeabi_d2iz>
 800efe4:	4680      	mov	r8, r0
 800efe6:	f7f1 faa5 	bl	8000534 <__aeabi_i2d>
 800efea:	4602      	mov	r2, r0
 800efec:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800eff0:	460b      	mov	r3, r1
 800eff2:	4630      	mov	r0, r6
 800eff4:	4639      	mov	r1, r7
 800eff6:	f7f1 f94f 	bl	8000298 <__aeabi_dsub>
 800effa:	f805 8b01 	strb.w	r8, [r5], #1
 800effe:	4606      	mov	r6, r0
 800f000:	460f      	mov	r7, r1
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	4650      	mov	r0, sl
 800f008:	4659      	mov	r1, fp
 800f00a:	f7f1 fd8d 	bl	8000b28 <__aeabi_dcmpgt>
 800f00e:	2800      	cmp	r0, #0
 800f010:	f040 8508 	bne.w	800fa24 <_dtoa_r+0xdcc>
 800f014:	f04f 0800 	mov.w	r8, #0
 800f018:	ee0a 4a10 	vmov	s20, r4
 800f01c:	462c      	mov	r4, r5
 800f01e:	4645      	mov	r5, r8
 800f020:	e02b      	b.n	800f07a <_dtoa_r+0x422>
 800f022:	3501      	adds	r5, #1
 800f024:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f026:	429d      	cmp	r5, r3
 800f028:	f280 851d 	bge.w	800fa66 <_dtoa_r+0xe0e>
 800f02c:	4650      	mov	r0, sl
 800f02e:	4659      	mov	r1, fp
 800f030:	2200      	movs	r2, #0
 800f032:	4b68      	ldr	r3, [pc, #416]	; (800f1d4 <_dtoa_r+0x57c>)
 800f034:	f7f1 fae8 	bl	8000608 <__aeabi_dmul>
 800f038:	2200      	movs	r2, #0
 800f03a:	4b66      	ldr	r3, [pc, #408]	; (800f1d4 <_dtoa_r+0x57c>)
 800f03c:	4682      	mov	sl, r0
 800f03e:	468b      	mov	fp, r1
 800f040:	4630      	mov	r0, r6
 800f042:	4639      	mov	r1, r7
 800f044:	f7f1 fae0 	bl	8000608 <__aeabi_dmul>
 800f048:	4689      	mov	r9, r1
 800f04a:	4680      	mov	r8, r0
 800f04c:	f7f1 fd76 	bl	8000b3c <__aeabi_d2iz>
 800f050:	4607      	mov	r7, r0
 800f052:	f7f1 fa6f 	bl	8000534 <__aeabi_i2d>
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	3730      	adds	r7, #48	; 0x30
 800f05c:	4640      	mov	r0, r8
 800f05e:	4649      	mov	r1, r9
 800f060:	f7f1 f91a 	bl	8000298 <__aeabi_dsub>
 800f064:	f804 7b01 	strb.w	r7, [r4], #1
 800f068:	4652      	mov	r2, sl
 800f06a:	465b      	mov	r3, fp
 800f06c:	4606      	mov	r6, r0
 800f06e:	460f      	mov	r7, r1
 800f070:	f7f1 fd3c 	bl	8000aec <__aeabi_dcmplt>
 800f074:	2800      	cmp	r0, #0
 800f076:	f040 84d2 	bne.w	800fa1e <_dtoa_r+0xdc6>
 800f07a:	4632      	mov	r2, r6
 800f07c:	463b      	mov	r3, r7
 800f07e:	2000      	movs	r0, #0
 800f080:	4951      	ldr	r1, [pc, #324]	; (800f1c8 <_dtoa_r+0x570>)
 800f082:	f7f1 f909 	bl	8000298 <__aeabi_dsub>
 800f086:	4652      	mov	r2, sl
 800f088:	465b      	mov	r3, fp
 800f08a:	f7f1 fd2f 	bl	8000aec <__aeabi_dcmplt>
 800f08e:	2800      	cmp	r0, #0
 800f090:	d0c7      	beq.n	800f022 <_dtoa_r+0x3ca>
 800f092:	4625      	mov	r5, r4
 800f094:	9904      	ldr	r1, [sp, #16]
 800f096:	ee1a 4a10 	vmov	r4, s20
 800f09a:	e002      	b.n	800f0a2 <_dtoa_r+0x44a>
 800f09c:	42a9      	cmp	r1, r5
 800f09e:	f000 8493 	beq.w	800f9c8 <_dtoa_r+0xd70>
 800f0a2:	462a      	mov	r2, r5
 800f0a4:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 800f0a8:	2b39      	cmp	r3, #57	; 0x39
 800f0aa:	d0f7      	beq.n	800f09c <_dtoa_r+0x444>
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	9104      	str	r1, [sp, #16]
 800f0b0:	b2db      	uxtb	r3, r3
 800f0b2:	702b      	strb	r3, [r5, #0]
 800f0b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f0b6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800f0ba:	3301      	adds	r3, #1
 800f0bc:	9204      	str	r2, [sp, #16]
 800f0be:	9306      	str	r3, [sp, #24]
 800f0c0:	e104      	b.n	800f2cc <_dtoa_r+0x674>
 800f0c2:	4640      	mov	r0, r8
 800f0c4:	f7f1 fa36 	bl	8000534 <__aeabi_i2d>
 800f0c8:	4632      	mov	r2, r6
 800f0ca:	463b      	mov	r3, r7
 800f0cc:	f7f1 fa9c 	bl	8000608 <__aeabi_dmul>
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	4b3e      	ldr	r3, [pc, #248]	; (800f1cc <_dtoa_r+0x574>)
 800f0d4:	f7f1 f8e2 	bl	800029c <__adddf3>
 800f0d8:	4680      	mov	r8, r0
 800f0da:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800f0de:	4630      	mov	r0, r6
 800f0e0:	4639      	mov	r1, r7
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	4b3c      	ldr	r3, [pc, #240]	; (800f1d8 <_dtoa_r+0x580>)
 800f0e6:	f7f1 f8d7 	bl	8000298 <__aeabi_dsub>
 800f0ea:	4642      	mov	r2, r8
 800f0ec:	464b      	mov	r3, r9
 800f0ee:	4606      	mov	r6, r0
 800f0f0:	460f      	mov	r7, r1
 800f0f2:	f7f1 fd19 	bl	8000b28 <__aeabi_dcmpgt>
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	f040 8386 	bne.w	800f808 <_dtoa_r+0xbb0>
 800f0fc:	4630      	mov	r0, r6
 800f0fe:	4639      	mov	r1, r7
 800f100:	4642      	mov	r2, r8
 800f102:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f106:	f7f1 fcf1 	bl	8000aec <__aeabi_dcmplt>
 800f10a:	2800      	cmp	r0, #0
 800f10c:	f040 8342 	bne.w	800f794 <_dtoa_r+0xb3c>
 800f110:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f112:	2b00      	cmp	r3, #0
 800f114:	db03      	blt.n	800f11e <_dtoa_r+0x4c6>
 800f116:	9a06      	ldr	r2, [sp, #24]
 800f118:	2a0e      	cmp	r2, #14
 800f11a:	f340 819d 	ble.w	800f458 <_dtoa_r+0x800>
 800f11e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f120:	2a00      	cmp	r2, #0
 800f122:	d05d      	beq.n	800f1e0 <_dtoa_r+0x588>
 800f124:	9a01      	ldr	r2, [sp, #4]
 800f126:	2a01      	cmp	r2, #1
 800f128:	f340 83a3 	ble.w	800f872 <_dtoa_r+0xc1a>
 800f12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f12e:	1e5a      	subs	r2, r3, #1
 800f130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f132:	4293      	cmp	r3, r2
 800f134:	f280 8345 	bge.w	800f7c2 <_dtoa_r+0xb6a>
 800f138:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f13a:	2700      	movs	r7, #0
 800f13c:	9905      	ldr	r1, [sp, #20]
 800f13e:	1ad3      	subs	r3, r2, r3
 800f140:	920d      	str	r2, [sp, #52]	; 0x34
 800f142:	4419      	add	r1, r3
 800f144:	9105      	str	r1, [sp, #20]
 800f146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f148:	2b00      	cmp	r3, #0
 800f14a:	f2c0 8438 	blt.w	800f9be <_dtoa_r+0xd66>
 800f14e:	9a08      	ldr	r2, [sp, #32]
 800f150:	441a      	add	r2, r3
 800f152:	9208      	str	r2, [sp, #32]
 800f154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f156:	4616      	mov	r6, r2
 800f158:	441a      	add	r2, r3
 800f15a:	920b      	str	r2, [sp, #44]	; 0x2c
 800f15c:	2101      	movs	r1, #1
 800f15e:	4620      	mov	r0, r4
 800f160:	f000 ffb2 	bl	80100c8 <__i2b>
 800f164:	4605      	mov	r5, r0
 800f166:	e03e      	b.n	800f1e6 <_dtoa_r+0x58e>
 800f168:	2301      	movs	r3, #1
 800f16a:	eba8 0505 	sub.w	r5, r8, r5
 800f16e:	9310      	str	r3, [sp, #64]	; 0x40
 800f170:	1e6b      	subs	r3, r5, #1
 800f172:	9308      	str	r3, [sp, #32]
 800f174:	f57f ae24 	bpl.w	800edc0 <_dtoa_r+0x168>
 800f178:	f1c5 0301 	rsb	r3, r5, #1
 800f17c:	930b      	str	r3, [sp, #44]	; 0x2c
 800f17e:	2300      	movs	r3, #0
 800f180:	9308      	str	r3, [sp, #32]
 800f182:	e61f      	b.n	800edc4 <_dtoa_r+0x16c>
 800f184:	4648      	mov	r0, r9
 800f186:	f7f1 f9d5 	bl	8000534 <__aeabi_i2d>
 800f18a:	4632      	mov	r2, r6
 800f18c:	463b      	mov	r3, r7
 800f18e:	f7f1 fca3 	bl	8000ad8 <__aeabi_dcmpeq>
 800f192:	2800      	cmp	r0, #0
 800f194:	f47f adfb 	bne.w	800ed8e <_dtoa_r+0x136>
 800f198:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800f19c:	9305      	str	r3, [sp, #20]
 800f19e:	e5f6      	b.n	800ed8e <_dtoa_r+0x136>
 800f1a0:	f8df 9038 	ldr.w	r9, [pc, #56]	; 800f1dc <_dtoa_r+0x584>
 800f1a4:	4648      	mov	r0, r9
 800f1a6:	b017      	add	sp, #92	; 0x5c
 800f1a8:	ecbd 8b06 	vpop	{d8-d10}
 800f1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1b0:	f1c0 0020 	rsb	r0, r0, #32
 800f1b4:	fa06 f000 	lsl.w	r0, r6, r0
 800f1b8:	e5b5      	b.n	800ed26 <_dtoa_r+0xce>
 800f1ba:	2501      	movs	r5, #1
 800f1bc:	e617      	b.n	800edee <_dtoa_r+0x196>
 800f1be:	bf00      	nop
 800f1c0:	08013e28 	.word	0x08013e28
 800f1c4:	08013e00 	.word	0x08013e00
 800f1c8:	3ff00000 	.word	0x3ff00000
 800f1cc:	401c0000 	.word	0x401c0000
 800f1d0:	3fe00000 	.word	0x3fe00000
 800f1d4:	40240000 	.word	0x40240000
 800f1d8:	40140000 	.word	0x40140000
 800f1dc:	08013cb8 	.word	0x08013cb8
 800f1e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f1e2:	e9dd 650b 	ldrd	r6, r5, [sp, #44]	; 0x2c
 800f1e6:	2e00      	cmp	r6, #0
 800f1e8:	dd0c      	ble.n	800f204 <_dtoa_r+0x5ac>
 800f1ea:	9a08      	ldr	r2, [sp, #32]
 800f1ec:	2a00      	cmp	r2, #0
 800f1ee:	dd09      	ble.n	800f204 <_dtoa_r+0x5ac>
 800f1f0:	42b2      	cmp	r2, r6
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1f6:	bfa8      	it	ge
 800f1f8:	4633      	movge	r3, r6
 800f1fa:	1ac9      	subs	r1, r1, r3
 800f1fc:	1af6      	subs	r6, r6, r3
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	910b      	str	r1, [sp, #44]	; 0x2c
 800f202:	9308      	str	r3, [sp, #32]
 800f204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f206:	b153      	cbz	r3, 800f21e <_dtoa_r+0x5c6>
 800f208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f000 8340 	beq.w	800f890 <_dtoa_r+0xc38>
 800f210:	2f00      	cmp	r7, #0
 800f212:	f300 82c2 	bgt.w	800f79a <_dtoa_r+0xb42>
 800f216:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f218:	1bda      	subs	r2, r3, r7
 800f21a:	f040 82d4 	bne.w	800f7c6 <_dtoa_r+0xb6e>
 800f21e:	2101      	movs	r1, #1
 800f220:	4620      	mov	r0, r4
 800f222:	f000 ff51 	bl	80100c8 <__i2b>
 800f226:	9a05      	ldr	r2, [sp, #20]
 800f228:	4607      	mov	r7, r0
 800f22a:	2a00      	cmp	r2, #0
 800f22c:	f300 8136 	bgt.w	800f49c <_dtoa_r+0x844>
 800f230:	9b01      	ldr	r3, [sp, #4]
 800f232:	2b01      	cmp	r3, #1
 800f234:	f340 82eb 	ble.w	800f80e <_dtoa_r+0xbb6>
 800f238:	f04f 0800 	mov.w	r8, #0
 800f23c:	9b05      	ldr	r3, [sp, #20]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	f040 8137 	bne.w	800f4b2 <_dtoa_r+0x85a>
 800f244:	2301      	movs	r3, #1
 800f246:	9908      	ldr	r1, [sp, #32]
 800f248:	440b      	add	r3, r1
 800f24a:	f013 031f 	ands.w	r3, r3, #31
 800f24e:	d053      	beq.n	800f2f8 <_dtoa_r+0x6a0>
 800f250:	f1c3 0220 	rsb	r2, r3, #32
 800f254:	2a04      	cmp	r2, #4
 800f256:	f340 8481 	ble.w	800fb5c <_dtoa_r+0xf04>
 800f25a:	f1c3 031c 	rsb	r3, r3, #28
 800f25e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f260:	4419      	add	r1, r3
 800f262:	441a      	add	r2, r3
 800f264:	441e      	add	r6, r3
 800f266:	920b      	str	r2, [sp, #44]	; 0x2c
 800f268:	9108      	str	r1, [sp, #32]
 800f26a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	dd07      	ble.n	800f280 <_dtoa_r+0x628>
 800f270:	ee19 1a10 	vmov	r1, s18
 800f274:	461a      	mov	r2, r3
 800f276:	4620      	mov	r0, r4
 800f278:	f001 f864 	bl	8010344 <__lshift>
 800f27c:	ee09 0a10 	vmov	s18, r0
 800f280:	9b08      	ldr	r3, [sp, #32]
 800f282:	2b00      	cmp	r3, #0
 800f284:	dd05      	ble.n	800f292 <_dtoa_r+0x63a>
 800f286:	4639      	mov	r1, r7
 800f288:	461a      	mov	r2, r3
 800f28a:	4620      	mov	r0, r4
 800f28c:	f001 f85a 	bl	8010344 <__lshift>
 800f290:	4607      	mov	r7, r0
 800f292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f294:	2b00      	cmp	r3, #0
 800f296:	f040 8115 	bne.w	800f4c4 <_dtoa_r+0x86c>
 800f29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	dc34      	bgt.n	800f30a <_dtoa_r+0x6b2>
 800f2a0:	9b01      	ldr	r3, [sp, #4]
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	dd31      	ble.n	800f30a <_dtoa_r+0x6b2>
 800f2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	f000 81d4 	beq.w	800f656 <_dtoa_r+0x9fe>
 800f2ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2b0:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800f2b4:	43de      	mvns	r6, r3
 800f2b6:	4639      	mov	r1, r7
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	f000 fe55 	bl	800ff68 <_Bfree>
 800f2be:	1c73      	adds	r3, r6, #1
 800f2c0:	9306      	str	r3, [sp, #24]
 800f2c2:	b11d      	cbz	r5, 800f2cc <_dtoa_r+0x674>
 800f2c4:	4629      	mov	r1, r5
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f000 fe4e 	bl	800ff68 <_Bfree>
 800f2cc:	ee19 1a10 	vmov	r1, s18
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	f000 fe49 	bl	800ff68 <_Bfree>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	9a04      	ldr	r2, [sp, #16]
 800f2da:	7013      	strb	r3, [r2, #0]
 800f2dc:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 800f2e0:	6019      	str	r1, [r3, #0]
 800f2e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f43f acf5 	beq.w	800ecd4 <_dtoa_r+0x7c>
 800f2ea:	4648      	mov	r0, r9
 800f2ec:	601a      	str	r2, [r3, #0]
 800f2ee:	b017      	add	sp, #92	; 0x5c
 800f2f0:	ecbd 8b06 	vpop	{d8-d10}
 800f2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f8:	231c      	movs	r3, #28
 800f2fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2fc:	441e      	add	r6, r3
 800f2fe:	441a      	add	r2, r3
 800f300:	920b      	str	r2, [sp, #44]	; 0x2c
 800f302:	9a08      	ldr	r2, [sp, #32]
 800f304:	441a      	add	r2, r3
 800f306:	9208      	str	r2, [sp, #32]
 800f308:	e7af      	b.n	800f26a <_dtoa_r+0x612>
 800f30a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	f000 81b9 	beq.w	800f684 <_dtoa_r+0xa2c>
 800f312:	2e00      	cmp	r6, #0
 800f314:	f300 825f 	bgt.w	800f7d6 <_dtoa_r+0xb7e>
 800f318:	f1b8 0f00 	cmp.w	r8, #0
 800f31c:	f040 838c 	bne.w	800fa38 <_dtoa_r+0xde0>
 800f320:	46aa      	mov	sl, r5
 800f322:	9b02      	ldr	r3, [sp, #8]
 800f324:	ee19 ba10 	vmov	fp, s18
 800f328:	9a04      	ldr	r2, [sp, #16]
 800f32a:	f003 0301 	and.w	r3, r3, #1
 800f32e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f330:	4690      	mov	r8, r2
 800f332:	9302      	str	r3, [sp, #8]
 800f334:	1e53      	subs	r3, r2, #1
 800f336:	4419      	add	r1, r3
 800f338:	9109      	str	r1, [sp, #36]	; 0x24
 800f33a:	4639      	mov	r1, r7
 800f33c:	4658      	mov	r0, fp
 800f33e:	f7ff fbf1 	bl	800eb24 <quorem>
 800f342:	4629      	mov	r1, r5
 800f344:	4681      	mov	r9, r0
 800f346:	4658      	mov	r0, fp
 800f348:	f001 f870 	bl	801042c <__mcmp>
 800f34c:	4652      	mov	r2, sl
 800f34e:	4639      	mov	r1, r7
 800f350:	4606      	mov	r6, r0
 800f352:	4620      	mov	r0, r4
 800f354:	f001 f88c 	bl	8010470 <__mdiff>
 800f358:	68c2      	ldr	r2, [r0, #12]
 800f35a:	4601      	mov	r1, r0
 800f35c:	f109 0330 	add.w	r3, r9, #48	; 0x30
 800f360:	2a00      	cmp	r2, #0
 800f362:	f040 823f 	bne.w	800f7e4 <_dtoa_r+0xb8c>
 800f366:	9005      	str	r0, [sp, #20]
 800f368:	4658      	mov	r0, fp
 800f36a:	9308      	str	r3, [sp, #32]
 800f36c:	f001 f85e 	bl	801042c <__mcmp>
 800f370:	9905      	ldr	r1, [sp, #20]
 800f372:	9005      	str	r0, [sp, #20]
 800f374:	4620      	mov	r0, r4
 800f376:	f000 fdf7 	bl	800ff68 <_Bfree>
 800f37a:	9b01      	ldr	r3, [sp, #4]
 800f37c:	9a05      	ldr	r2, [sp, #20]
 800f37e:	ea42 0103 	orr.w	r1, r2, r3
 800f382:	9b02      	ldr	r3, [sp, #8]
 800f384:	430b      	orrs	r3, r1
 800f386:	9b08      	ldr	r3, [sp, #32]
 800f388:	f000 83b8 	beq.w	800fafc <_dtoa_r+0xea4>
 800f38c:	2e00      	cmp	r6, #0
 800f38e:	f2c0 8326 	blt.w	800f9de <_dtoa_r+0xd86>
 800f392:	9901      	ldr	r1, [sp, #4]
 800f394:	430e      	orrs	r6, r1
 800f396:	9902      	ldr	r1, [sp, #8]
 800f398:	4331      	orrs	r1, r6
 800f39a:	f000 8320 	beq.w	800f9de <_dtoa_r+0xd86>
 800f39e:	2a00      	cmp	r2, #0
 800f3a0:	f300 838d 	bgt.w	800fabe <_dtoa_r+0xe66>
 800f3a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3a6:	f108 0601 	add.w	r6, r8, #1
 800f3aa:	f888 3000 	strb.w	r3, [r8]
 800f3ae:	4541      	cmp	r1, r8
 800f3b0:	f000 838d 	beq.w	800face <_dtoa_r+0xe76>
 800f3b4:	4659      	mov	r1, fp
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	220a      	movs	r2, #10
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f000 fdde 	bl	800ff7c <__multadd>
 800f3c0:	4555      	cmp	r5, sl
 800f3c2:	4683      	mov	fp, r0
 800f3c4:	4629      	mov	r1, r5
 800f3c6:	f04f 0300 	mov.w	r3, #0
 800f3ca:	f04f 020a 	mov.w	r2, #10
 800f3ce:	4620      	mov	r0, r4
 800f3d0:	f000 820f 	beq.w	800f7f2 <_dtoa_r+0xb9a>
 800f3d4:	f000 fdd2 	bl	800ff7c <__multadd>
 800f3d8:	4651      	mov	r1, sl
 800f3da:	4605      	mov	r5, r0
 800f3dc:	2300      	movs	r3, #0
 800f3de:	220a      	movs	r2, #10
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	f000 fdcb 	bl	800ff7c <__multadd>
 800f3e6:	46b0      	mov	r8, r6
 800f3e8:	4682      	mov	sl, r0
 800f3ea:	e7a6      	b.n	800f33a <_dtoa_r+0x6e2>
 800f3ec:	f000 81b4 	beq.w	800f758 <_dtoa_r+0xb00>
 800f3f0:	9b06      	ldr	r3, [sp, #24]
 800f3f2:	f1c3 0900 	rsb	r9, r3, #0
 800f3f6:	4bc2      	ldr	r3, [pc, #776]	; (800f700 <_dtoa_r+0xaa8>)
 800f3f8:	f009 020f 	and.w	r2, r9, #15
 800f3fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f400:	ec51 0b18 	vmov	r0, r1, d8
 800f404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f408:	f7f1 f8fe 	bl	8000608 <__aeabi_dmul>
 800f40c:	ea5f 1929 	movs.w	r9, r9, asr #4
 800f410:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800f414:	f000 839c 	beq.w	800fb50 <_dtoa_r+0xef8>
 800f418:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 800f70c <_dtoa_r+0xab4>
 800f41c:	2300      	movs	r3, #0
 800f41e:	f04f 0802 	mov.w	r8, #2
 800f422:	4606      	mov	r6, r0
 800f424:	460f      	mov	r7, r1
 800f426:	f019 0f01 	tst.w	r9, #1
 800f42a:	d00a      	beq.n	800f442 <_dtoa_r+0x7ea>
 800f42c:	4630      	mov	r0, r6
 800f42e:	4639      	mov	r1, r7
 800f430:	f108 0801 	add.w	r8, r8, #1
 800f434:	e9da 2300 	ldrd	r2, r3, [sl]
 800f438:	f7f1 f8e6 	bl	8000608 <__aeabi_dmul>
 800f43c:	462b      	mov	r3, r5
 800f43e:	4606      	mov	r6, r0
 800f440:	460f      	mov	r7, r1
 800f442:	ea5f 0969 	movs.w	r9, r9, asr #1
 800f446:	f10a 0a08 	add.w	sl, sl, #8
 800f44a:	d1ec      	bne.n	800f426 <_dtoa_r+0x7ce>
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	f47f ad8f 	bne.w	800ef70 <_dtoa_r+0x318>
 800f452:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800f456:	e58b      	b.n	800ef70 <_dtoa_r+0x318>
 800f458:	4ba9      	ldr	r3, [pc, #676]	; (800f700 <_dtoa_r+0xaa8>)
 800f45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f45e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800f462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f464:	2b00      	cmp	r3, #0
 800f466:	f280 8238 	bge.w	800f8da <_dtoa_r+0xc82>
 800f46a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f46c:	2f00      	cmp	r7, #0
 800f46e:	f300 8234 	bgt.w	800f8da <_dtoa_r+0xc82>
 800f472:	2f00      	cmp	r7, #0
 800f474:	f040 818e 	bne.w	800f794 <_dtoa_r+0xb3c>
 800f478:	2200      	movs	r2, #0
 800f47a:	4ba2      	ldr	r3, [pc, #648]	; (800f704 <_dtoa_r+0xaac>)
 800f47c:	4650      	mov	r0, sl
 800f47e:	4659      	mov	r1, fp
 800f480:	f7f1 f8c2 	bl	8000608 <__aeabi_dmul>
 800f484:	4602      	mov	r2, r0
 800f486:	460b      	mov	r3, r1
 800f488:	ec51 0b18 	vmov	r0, r1, d8
 800f48c:	f7f1 fb38 	bl	8000b00 <__aeabi_dcmple>
 800f490:	2800      	cmp	r0, #0
 800f492:	f000 81ba 	beq.w	800f80a <_dtoa_r+0xbb2>
 800f496:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f498:	463d      	mov	r5, r7
 800f49a:	e708      	b.n	800f2ae <_dtoa_r+0x656>
 800f49c:	4601      	mov	r1, r0
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f000 fef0 	bl	8010284 <__pow5mult>
 800f4a4:	9b01      	ldr	r3, [sp, #4]
 800f4a6:	4607      	mov	r7, r0
 800f4a8:	2b01      	cmp	r3, #1
 800f4aa:	f340 815a 	ble.w	800f762 <_dtoa_r+0xb0a>
 800f4ae:	f04f 0800 	mov.w	r8, #0
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f4b8:	6918      	ldr	r0, [r3, #16]
 800f4ba:	f000 fdb3 	bl	8010024 <__hi0bits>
 800f4be:	f1c0 0320 	rsb	r3, r0, #32
 800f4c2:	e6c0      	b.n	800f246 <_dtoa_r+0x5ee>
 800f4c4:	4639      	mov	r1, r7
 800f4c6:	ee19 0a10 	vmov	r0, s18
 800f4ca:	f000 ffaf 	bl	801042c <__mcmp>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	f6bf aee3 	bge.w	800f29a <_dtoa_r+0x642>
 800f4d4:	ee19 1a10 	vmov	r1, s18
 800f4d8:	2300      	movs	r3, #0
 800f4da:	220a      	movs	r2, #10
 800f4dc:	4620      	mov	r0, r4
 800f4de:	f000 fd4d 	bl	800ff7c <__multadd>
 800f4e2:	9b06      	ldr	r3, [sp, #24]
 800f4e4:	ee09 0a10 	vmov	s18, r0
 800f4e8:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
 800f4ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	f040 8311 	bne.w	800fb16 <_dtoa_r+0xebe>
 800f4f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f300 830a 	bgt.w	800fb10 <_dtoa_r+0xeb8>
 800f4fc:	9b01      	ldr	r3, [sp, #4]
 800f4fe:	2b02      	cmp	r3, #2
 800f500:	f340 8306 	ble.w	800fb10 <_dtoa_r+0xeb8>
 800f504:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f506:	f8cd 9018 	str.w	r9, [sp, #24]
 800f50a:	9309      	str	r3, [sp, #36]	; 0x24
 800f50c:	e6cb      	b.n	800f2a6 <_dtoa_r+0x64e>
 800f50e:	f04f 0802 	mov.w	r8, #2
 800f512:	ec5b ab18 	vmov	sl, fp, d8
 800f516:	e510      	b.n	800ef3a <_dtoa_r+0x2e2>
 800f518:	2301      	movs	r3, #1
 800f51a:	930c      	str	r3, [sp, #48]	; 0x30
 800f51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f51e:	9a06      	ldr	r2, [sp, #24]
 800f520:	4413      	add	r3, r2
 800f522:	9312      	str	r3, [sp, #72]	; 0x48
 800f524:	3301      	adds	r3, #1
 800f526:	2b01      	cmp	r3, #1
 800f528:	4618      	mov	r0, r3
 800f52a:	9309      	str	r3, [sp, #36]	; 0x24
 800f52c:	bfb8      	it	lt
 800f52e:	2001      	movlt	r0, #1
 800f530:	2100      	movs	r1, #0
 800f532:	2817      	cmp	r0, #23
 800f534:	6461      	str	r1, [r4, #68]	; 0x44
 800f536:	f77f acd1 	ble.w	800eedc <_dtoa_r+0x284>
 800f53a:	2201      	movs	r2, #1
 800f53c:	2304      	movs	r3, #4
 800f53e:	005b      	lsls	r3, r3, #1
 800f540:	4611      	mov	r1, r2
 800f542:	3201      	adds	r2, #1
 800f544:	f103 0614 	add.w	r6, r3, #20
 800f548:	4286      	cmp	r6, r0
 800f54a:	d9f8      	bls.n	800f53e <_dtoa_r+0x8e6>
 800f54c:	6461      	str	r1, [r4, #68]	; 0x44
 800f54e:	e4c5      	b.n	800eedc <_dtoa_r+0x284>
 800f550:	2301      	movs	r3, #1
 800f552:	930c      	str	r3, [sp, #48]	; 0x30
 800f554:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f556:	2800      	cmp	r0, #0
 800f558:	f340 8151 	ble.w	800f7fe <_dtoa_r+0xba6>
 800f55c:	9012      	str	r0, [sp, #72]	; 0x48
 800f55e:	9009      	str	r0, [sp, #36]	; 0x24
 800f560:	e7e6      	b.n	800f530 <_dtoa_r+0x8d8>
 800f562:	2300      	movs	r3, #0
 800f564:	930c      	str	r3, [sp, #48]	; 0x30
 800f566:	e7d9      	b.n	800f51c <_dtoa_r+0x8c4>
 800f568:	2300      	movs	r3, #0
 800f56a:	930c      	str	r3, [sp, #48]	; 0x30
 800f56c:	e7f2      	b.n	800f554 <_dtoa_r+0x8fc>
 800f56e:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f570:	4642      	mov	r2, r8
 800f572:	4963      	ldr	r1, [pc, #396]	; (800f700 <_dtoa_r+0xaa8>)
 800f574:	464b      	mov	r3, r9
 800f576:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f57a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800f57e:	e951 0102 	ldrd	r0, r1, [r1, #-8]
 800f582:	f7f1 f841 	bl	8000608 <__aeabi_dmul>
 800f586:	ec41 0b1a 	vmov	d10, r0, r1
 800f58a:	4639      	mov	r1, r7
 800f58c:	4630      	mov	r0, r6
 800f58e:	f7f1 fad5 	bl	8000b3c <__aeabi_d2iz>
 800f592:	4605      	mov	r5, r0
 800f594:	f7f0 ffce 	bl	8000534 <__aeabi_i2d>
 800f598:	4602      	mov	r2, r0
 800f59a:	460b      	mov	r3, r1
 800f59c:	4630      	mov	r0, r6
 800f59e:	4639      	mov	r1, r7
 800f5a0:	3530      	adds	r5, #48	; 0x30
 800f5a2:	f7f0 fe79 	bl	8000298 <__aeabi_dsub>
 800f5a6:	4606      	mov	r6, r0
 800f5a8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f5aa:	460f      	mov	r7, r1
 800f5ac:	f808 5b01 	strb.w	r5, [r8], #1
 800f5b0:	2801      	cmp	r0, #1
 800f5b2:	f000 82c4 	beq.w	800fb3e <_dtoa_r+0xee6>
 800f5b6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800f5b8:	ee09 4a90 	vmov	s19, r4
 800f5bc:	9b04      	ldr	r3, [sp, #16]
 800f5be:	f04f 0a00 	mov.w	sl, #0
 800f5c2:	f8df b14c 	ldr.w	fp, [pc, #332]	; 800f710 <_dtoa_r+0xab8>
 800f5c6:	441d      	add	r5, r3
 800f5c8:	462c      	mov	r4, r5
 800f5ca:	4645      	mov	r5, r8
 800f5cc:	4652      	mov	r2, sl
 800f5ce:	465b      	mov	r3, fp
 800f5d0:	4630      	mov	r0, r6
 800f5d2:	4639      	mov	r1, r7
 800f5d4:	f7f1 f818 	bl	8000608 <__aeabi_dmul>
 800f5d8:	4689      	mov	r9, r1
 800f5da:	4680      	mov	r8, r0
 800f5dc:	f7f1 faae 	bl	8000b3c <__aeabi_d2iz>
 800f5e0:	4607      	mov	r7, r0
 800f5e2:	f7f0 ffa7 	bl	8000534 <__aeabi_i2d>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	3730      	adds	r7, #48	; 0x30
 800f5ec:	4640      	mov	r0, r8
 800f5ee:	4649      	mov	r1, r9
 800f5f0:	f7f0 fe52 	bl	8000298 <__aeabi_dsub>
 800f5f4:	f805 7b01 	strb.w	r7, [r5], #1
 800f5f8:	42a5      	cmp	r5, r4
 800f5fa:	4606      	mov	r6, r0
 800f5fc:	460f      	mov	r7, r1
 800f5fe:	d1e5      	bne.n	800f5cc <_dtoa_r+0x974>
 800f600:	4625      	mov	r5, r4
 800f602:	ee19 4a90 	vmov	r4, s19
 800f606:	2200      	movs	r2, #0
 800f608:	4b3f      	ldr	r3, [pc, #252]	; (800f708 <_dtoa_r+0xab0>)
 800f60a:	ee1a 0a10 	vmov	r0, s20
 800f60e:	ec59 8b1a 	vmov	r8, r9, d10
 800f612:	4649      	mov	r1, r9
 800f614:	f7f0 fe42 	bl	800029c <__adddf3>
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	4630      	mov	r0, r6
 800f61e:	4639      	mov	r1, r7
 800f620:	f7f1 fa82 	bl	8000b28 <__aeabi_dcmpgt>
 800f624:	2800      	cmp	r0, #0
 800f626:	f040 8204 	bne.w	800fa32 <_dtoa_r+0xdda>
 800f62a:	ee1a 2a10 	vmov	r2, s20
 800f62e:	464b      	mov	r3, r9
 800f630:	2000      	movs	r0, #0
 800f632:	4935      	ldr	r1, [pc, #212]	; (800f708 <_dtoa_r+0xab0>)
 800f634:	f7f0 fe30 	bl	8000298 <__aeabi_dsub>
 800f638:	4602      	mov	r2, r0
 800f63a:	460b      	mov	r3, r1
 800f63c:	4630      	mov	r0, r6
 800f63e:	4639      	mov	r1, r7
 800f640:	f7f1 fa54 	bl	8000aec <__aeabi_dcmplt>
 800f644:	2800      	cmp	r0, #0
 800f646:	f43f ad63 	beq.w	800f110 <_dtoa_r+0x4b8>
 800f64a:	462a      	mov	r2, r5
 800f64c:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
 800f650:	2b30      	cmp	r3, #48	; 0x30
 800f652:	d0fa      	beq.n	800f64a <_dtoa_r+0x9f2>
 800f654:	e52e      	b.n	800f0b4 <_dtoa_r+0x45c>
 800f656:	4639      	mov	r1, r7
 800f658:	2205      	movs	r2, #5
 800f65a:	4620      	mov	r0, r4
 800f65c:	f000 fc8e 	bl	800ff7c <__multadd>
 800f660:	4607      	mov	r7, r0
 800f662:	ee19 0a10 	vmov	r0, s18
 800f666:	4639      	mov	r1, r7
 800f668:	f000 fee0 	bl	801042c <__mcmp>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	f77f ae1e 	ble.w	800f2ae <_dtoa_r+0x656>
 800f672:	9804      	ldr	r0, [sp, #16]
 800f674:	2331      	movs	r3, #49	; 0x31
 800f676:	9e06      	ldr	r6, [sp, #24]
 800f678:	4681      	mov	r9, r0
 800f67a:	f800 3b01 	strb.w	r3, [r0], #1
 800f67e:	3601      	adds	r6, #1
 800f680:	9004      	str	r0, [sp, #16]
 800f682:	e618      	b.n	800f2b6 <_dtoa_r+0x65e>
 800f684:	9b06      	ldr	r3, [sp, #24]
 800f686:	3301      	adds	r3, #1
 800f688:	9306      	str	r3, [sp, #24]
 800f68a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f68e:	2601      	movs	r6, #1
 800f690:	ee19 aa10 	vmov	sl, s18
 800f694:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 800f698:	e007      	b.n	800f6aa <_dtoa_r+0xa52>
 800f69a:	4651      	mov	r1, sl
 800f69c:	2300      	movs	r3, #0
 800f69e:	220a      	movs	r2, #10
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f000 fc6b 	bl	800ff7c <__multadd>
 800f6a6:	3601      	adds	r6, #1
 800f6a8:	4682      	mov	sl, r0
 800f6aa:	4639      	mov	r1, r7
 800f6ac:	4650      	mov	r0, sl
 800f6ae:	f7ff fa39 	bl	800eb24 <quorem>
 800f6b2:	455e      	cmp	r6, fp
 800f6b4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 800f6b8:	f808 0b01 	strb.w	r0, [r8], #1
 800f6bc:	dbed      	blt.n	800f69a <_dtoa_r+0xa42>
 800f6be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6c0:	4681      	mov	r9, r0
 800f6c2:	ee09 aa10 	vmov	s18, sl
 800f6c6:	2600      	movs	r6, #0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	bfcc      	ite	gt
 800f6cc:	469b      	movgt	fp, r3
 800f6ce:	f04f 0b01 	movle.w	fp, #1
 800f6d2:	9b04      	ldr	r3, [sp, #16]
 800f6d4:	449b      	add	fp, r3
 800f6d6:	ee19 1a10 	vmov	r1, s18
 800f6da:	2201      	movs	r2, #1
 800f6dc:	4620      	mov	r0, r4
 800f6de:	f000 fe31 	bl	8010344 <__lshift>
 800f6e2:	4639      	mov	r1, r7
 800f6e4:	ee09 0a10 	vmov	s18, r0
 800f6e8:	f000 fea0 	bl	801042c <__mcmp>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	f340 815b 	ble.w	800f9a8 <_dtoa_r+0xd50>
 800f6f2:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
 800f6f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f6fa:	9a04      	ldr	r2, [sp, #16]
 800f6fc:	e00f      	b.n	800f71e <_dtoa_r+0xac6>
 800f6fe:	bf00      	nop
 800f700:	08013e28 	.word	0x08013e28
 800f704:	40140000 	.word	0x40140000
 800f708:	3fe00000 	.word	0x3fe00000
 800f70c:	08013e00 	.word	0x08013e00
 800f710:	40240000 	.word	0x40240000
 800f714:	455a      	cmp	r2, fp
 800f716:	f000 8140 	beq.w	800f99a <_dtoa_r+0xd42>
 800f71a:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 800f71e:	2b39      	cmp	r3, #57	; 0x39
 800f720:	f10b 0801 	add.w	r8, fp, #1
 800f724:	d0f6      	beq.n	800f714 <_dtoa_r+0xabc>
 800f726:	3301      	adds	r3, #1
 800f728:	f88b 3000 	strb.w	r3, [fp]
 800f72c:	4639      	mov	r1, r7
 800f72e:	4620      	mov	r0, r4
 800f730:	f000 fc1a 	bl	800ff68 <_Bfree>
 800f734:	2d00      	cmp	r5, #0
 800f736:	f000 812b 	beq.w	800f990 <_dtoa_r+0xd38>
 800f73a:	2e00      	cmp	r6, #0
 800f73c:	f000 821b 	beq.w	800fb76 <_dtoa_r+0xf1e>
 800f740:	42ae      	cmp	r6, r5
 800f742:	f000 8218 	beq.w	800fb76 <_dtoa_r+0xf1e>
 800f746:	4631      	mov	r1, r6
 800f748:	4620      	mov	r0, r4
 800f74a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800f74e:	f8cd 8010 	str.w	r8, [sp, #16]
 800f752:	f000 fc09 	bl	800ff68 <_Bfree>
 800f756:	e5b5      	b.n	800f2c4 <_dtoa_r+0x66c>
 800f758:	f04f 0802 	mov.w	r8, #2
 800f75c:	ec57 6b18 	vmov	r6, r7, d8
 800f760:	e406      	b.n	800ef70 <_dtoa_r+0x318>
 800f762:	9b02      	ldr	r3, [sp, #8]
 800f764:	2b00      	cmp	r3, #0
 800f766:	f47f aea2 	bne.w	800f4ae <_dtoa_r+0x856>
 800f76a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f76e:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800f772:	2b00      	cmp	r3, #0
 800f774:	f47f ae9b 	bne.w	800f4ae <_dtoa_r+0x856>
 800f778:	4bbd      	ldr	r3, [pc, #756]	; (800fa70 <_dtoa_r+0xe18>)
 800f77a:	4013      	ands	r3, r2
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f000 81b0 	beq.w	800fae2 <_dtoa_r+0xe8a>
 800f782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f784:	f04f 0801 	mov.w	r8, #1
 800f788:	3301      	adds	r3, #1
 800f78a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f78c:	9b08      	ldr	r3, [sp, #32]
 800f78e:	3301      	adds	r3, #1
 800f790:	9308      	str	r3, [sp, #32]
 800f792:	e553      	b.n	800f23c <_dtoa_r+0x5e4>
 800f794:	2700      	movs	r7, #0
 800f796:	463d      	mov	r5, r7
 800f798:	e589      	b.n	800f2ae <_dtoa_r+0x656>
 800f79a:	4629      	mov	r1, r5
 800f79c:	463a      	mov	r2, r7
 800f79e:	4620      	mov	r0, r4
 800f7a0:	f000 fd70 	bl	8010284 <__pow5mult>
 800f7a4:	4605      	mov	r5, r0
 800f7a6:	ee19 2a10 	vmov	r2, s18
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	4629      	mov	r1, r5
 800f7ae:	f000 fcb9 	bl	8010124 <__multiply>
 800f7b2:	ee19 1a10 	vmov	r1, s18
 800f7b6:	ee09 0a10 	vmov	s18, r0
 800f7ba:	4620      	mov	r0, r4
 800f7bc:	f000 fbd4 	bl	800ff68 <_Bfree>
 800f7c0:	e529      	b.n	800f216 <_dtoa_r+0x5be>
 800f7c2:	1a9f      	subs	r7, r3, r2
 800f7c4:	e4bf      	b.n	800f146 <_dtoa_r+0x4ee>
 800f7c6:	ee19 1a10 	vmov	r1, s18
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f000 fd5a 	bl	8010284 <__pow5mult>
 800f7d0:	ee09 0a10 	vmov	s18, r0
 800f7d4:	e523      	b.n	800f21e <_dtoa_r+0x5c6>
 800f7d6:	4629      	mov	r1, r5
 800f7d8:	4632      	mov	r2, r6
 800f7da:	4620      	mov	r0, r4
 800f7dc:	f000 fdb2 	bl	8010344 <__lshift>
 800f7e0:	4605      	mov	r5, r0
 800f7e2:	e599      	b.n	800f318 <_dtoa_r+0x6c0>
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	9305      	str	r3, [sp, #20]
 800f7e8:	f000 fbbe 	bl	800ff68 <_Bfree>
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	9b05      	ldr	r3, [sp, #20]
 800f7f0:	e5cc      	b.n	800f38c <_dtoa_r+0x734>
 800f7f2:	f000 fbc3 	bl	800ff7c <__multadd>
 800f7f6:	46b0      	mov	r8, r6
 800f7f8:	4605      	mov	r5, r0
 800f7fa:	4682      	mov	sl, r0
 800f7fc:	e59d      	b.n	800f33a <_dtoa_r+0x6e2>
 800f7fe:	2301      	movs	r3, #1
 800f800:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 800f804:	f7ff bb66 	b.w	800eed4 <_dtoa_r+0x27c>
 800f808:	2700      	movs	r7, #0
 800f80a:	463d      	mov	r5, r7
 800f80c:	e731      	b.n	800f672 <_dtoa_r+0xa1a>
 800f80e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f812:	2900      	cmp	r1, #0
 800f814:	f47f ad10 	bne.w	800f238 <_dtoa_r+0x5e0>
 800f818:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	f47f ad0b 	bne.w	800f238 <_dtoa_r+0x5e0>
 800f822:	e7a9      	b.n	800f778 <_dtoa_r+0xb20>
 800f824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f826:	2b00      	cmp	r3, #0
 800f828:	f43f ac4b 	beq.w	800f0c2 <_dtoa_r+0x46a>
 800f82c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f82e:	2b00      	cmp	r3, #0
 800f830:	f77f ac6e 	ble.w	800f110 <_dtoa_r+0x4b8>
 800f834:	9a06      	ldr	r2, [sp, #24]
 800f836:	4630      	mov	r0, r6
 800f838:	4639      	mov	r1, r7
 800f83a:	930e      	str	r3, [sp, #56]	; 0x38
 800f83c:	3a01      	subs	r2, #1
 800f83e:	4b8d      	ldr	r3, [pc, #564]	; (800fa74 <_dtoa_r+0xe1c>)
 800f840:	9213      	str	r2, [sp, #76]	; 0x4c
 800f842:	2200      	movs	r2, #0
 800f844:	f7f0 fee0 	bl	8000608 <__aeabi_dmul>
 800f848:	4606      	mov	r6, r0
 800f84a:	460f      	mov	r7, r1
 800f84c:	f108 0001 	add.w	r0, r8, #1
 800f850:	f7f0 fe70 	bl	8000534 <__aeabi_i2d>
 800f854:	4632      	mov	r2, r6
 800f856:	463b      	mov	r3, r7
 800f858:	f7f0 fed6 	bl	8000608 <__aeabi_dmul>
 800f85c:	2200      	movs	r2, #0
 800f85e:	4b86      	ldr	r3, [pc, #536]	; (800fa78 <_dtoa_r+0xe20>)
 800f860:	f7f0 fd1c 	bl	800029c <__adddf3>
 800f864:	4680      	mov	r8, r0
 800f866:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800f86a:	f7ff bba2 	b.w	800efb2 <_dtoa_r+0x35a>
 800f86e:	9010      	str	r0, [sp, #64]	; 0x40
 800f870:	e482      	b.n	800f178 <_dtoa_r+0x520>
 800f872:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f874:	2a00      	cmp	r2, #0
 800f876:	f000 80ae 	beq.w	800f9d6 <_dtoa_r+0xd7e>
 800f87a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f87e:	9a08      	ldr	r2, [sp, #32]
 800f880:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800f882:	441a      	add	r2, r3
 800f884:	9208      	str	r2, [sp, #32]
 800f886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f888:	4616      	mov	r6, r2
 800f88a:	441a      	add	r2, r3
 800f88c:	920b      	str	r2, [sp, #44]	; 0x2c
 800f88e:	e465      	b.n	800f15c <_dtoa_r+0x504>
 800f890:	ee19 1a10 	vmov	r1, s18
 800f894:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f896:	4620      	mov	r0, r4
 800f898:	f000 fcf4 	bl	8010284 <__pow5mult>
 800f89c:	ee09 0a10 	vmov	s18, r0
 800f8a0:	e4bd      	b.n	800f21e <_dtoa_r+0x5c6>
 800f8a2:	2100      	movs	r1, #0
 800f8a4:	4620      	mov	r0, r4
 800f8a6:	6461      	str	r1, [r4, #68]	; 0x44
 800f8a8:	f000 fb38 	bl	800ff1c <_Balloc>
 800f8ac:	9004      	str	r0, [sp, #16]
 800f8ae:	2800      	cmp	r0, #0
 800f8b0:	f000 8167 	beq.w	800fb82 <_dtoa_r+0xf2a>
 800f8b4:	9a06      	ldr	r2, [sp, #24]
 800f8b6:	9b04      	ldr	r3, [sp, #16]
 800f8b8:	2a0e      	cmp	r2, #14
 800f8ba:	6423      	str	r3, [r4, #64]	; 0x40
 800f8bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f8be:	f300 8167 	bgt.w	800fb90 <_dtoa_r+0xf38>
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	f2c0 8164 	blt.w	800fb90 <_dtoa_r+0xf38>
 800f8c8:	9a06      	ldr	r2, [sp, #24]
 800f8ca:	4b6c      	ldr	r3, [pc, #432]	; (800fa7c <_dtoa_r+0xe24>)
 800f8cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f8d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f8d4:	e9d3 ab00 	ldrd	sl, fp, [r3]
 800f8d8:	9209      	str	r2, [sp, #36]	; 0x24
 800f8da:	4652      	mov	r2, sl
 800f8dc:	465b      	mov	r3, fp
 800f8de:	ee18 0a10 	vmov	r0, s16
 800f8e2:	9d04      	ldr	r5, [sp, #16]
 800f8e4:	ec57 6b18 	vmov	r6, r7, d8
 800f8e8:	4639      	mov	r1, r7
 800f8ea:	f7f0 ffb7 	bl	800085c <__aeabi_ddiv>
 800f8ee:	f7f1 f925 	bl	8000b3c <__aeabi_d2iz>
 800f8f2:	4680      	mov	r8, r0
 800f8f4:	f7f0 fe1e 	bl	8000534 <__aeabi_i2d>
 800f8f8:	4652      	mov	r2, sl
 800f8fa:	465b      	mov	r3, fp
 800f8fc:	f7f0 fe84 	bl	8000608 <__aeabi_dmul>
 800f900:	460b      	mov	r3, r1
 800f902:	4602      	mov	r2, r0
 800f904:	4639      	mov	r1, r7
 800f906:	ee18 0a10 	vmov	r0, s16
 800f90a:	f7f0 fcc5 	bl	8000298 <__aeabi_dsub>
 800f90e:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800f912:	f805 3b01 	strb.w	r3, [r5], #1
 800f916:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f918:	2b01      	cmp	r3, #1
 800f91a:	f000 80b3 	beq.w	800fa84 <_dtoa_r+0xe2c>
 800f91e:	ee08 4a10 	vmov	s16, r4
 800f922:	f04f 0901 	mov.w	r9, #1
 800f926:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f928:	e01d      	b.n	800f966 <_dtoa_r+0xd0e>
 800f92a:	4652      	mov	r2, sl
 800f92c:	465b      	mov	r3, fp
 800f92e:	4630      	mov	r0, r6
 800f930:	4639      	mov	r1, r7
 800f932:	f7f0 ff93 	bl	800085c <__aeabi_ddiv>
 800f936:	f109 0901 	add.w	r9, r9, #1
 800f93a:	f7f1 f8ff 	bl	8000b3c <__aeabi_d2iz>
 800f93e:	4680      	mov	r8, r0
 800f940:	f7f0 fdf8 	bl	8000534 <__aeabi_i2d>
 800f944:	4652      	mov	r2, sl
 800f946:	465b      	mov	r3, fp
 800f948:	f7f0 fe5e 	bl	8000608 <__aeabi_dmul>
 800f94c:	460b      	mov	r3, r1
 800f94e:	4602      	mov	r2, r0
 800f950:	4639      	mov	r1, r7
 800f952:	4630      	mov	r0, r6
 800f954:	f7f0 fca0 	bl	8000298 <__aeabi_dsub>
 800f958:	f108 0330 	add.w	r3, r8, #48	; 0x30
 800f95c:	45a1      	cmp	r9, r4
 800f95e:	f805 3b01 	strb.w	r3, [r5], #1
 800f962:	f000 808d 	beq.w	800fa80 <_dtoa_r+0xe28>
 800f966:	2200      	movs	r2, #0
 800f968:	4b42      	ldr	r3, [pc, #264]	; (800fa74 <_dtoa_r+0xe1c>)
 800f96a:	f7f0 fe4d 	bl	8000608 <__aeabi_dmul>
 800f96e:	2200      	movs	r2, #0
 800f970:	2300      	movs	r3, #0
 800f972:	4606      	mov	r6, r0
 800f974:	460f      	mov	r7, r1
 800f976:	f7f1 f8af 	bl	8000ad8 <__aeabi_dcmpeq>
 800f97a:	2800      	cmp	r0, #0
 800f97c:	d0d5      	beq.n	800f92a <_dtoa_r+0xcd2>
 800f97e:	ee18 4a10 	vmov	r4, s16
 800f982:	9b06      	ldr	r3, [sp, #24]
 800f984:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800f988:	3301      	adds	r3, #1
 800f98a:	9504      	str	r5, [sp, #16]
 800f98c:	9306      	str	r3, [sp, #24]
 800f98e:	e49d      	b.n	800f2cc <_dtoa_r+0x674>
 800f990:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800f994:	f8cd 8010 	str.w	r8, [sp, #16]
 800f998:	e498      	b.n	800f2cc <_dtoa_r+0x674>
 800f99a:	9b06      	ldr	r3, [sp, #24]
 800f99c:	9a04      	ldr	r2, [sp, #16]
 800f99e:	3301      	adds	r3, #1
 800f9a0:	9306      	str	r3, [sp, #24]
 800f9a2:	2331      	movs	r3, #49	; 0x31
 800f9a4:	7013      	strb	r3, [r2, #0]
 800f9a6:	e6c1      	b.n	800f72c <_dtoa_r+0xad4>
 800f9a8:	d103      	bne.n	800f9b2 <_dtoa_r+0xd5a>
 800f9aa:	f019 0f01 	tst.w	r9, #1
 800f9ae:	f47f aea0 	bne.w	800f6f2 <_dtoa_r+0xa9a>
 800f9b2:	46d8      	mov	r8, fp
 800f9b4:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
 800f9b8:	2b30      	cmp	r3, #48	; 0x30
 800f9ba:	d0fa      	beq.n	800f9b2 <_dtoa_r+0xd5a>
 800f9bc:	e6b6      	b.n	800f72c <_dtoa_r+0xad4>
 800f9be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9c2:	1a9e      	subs	r6, r3, r2
 800f9c4:	f7ff bbca 	b.w	800f15c <_dtoa_r+0x504>
 800f9c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f9ca:	9104      	str	r1, [sp, #16]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	9313      	str	r3, [sp, #76]	; 0x4c
 800f9d0:	2331      	movs	r3, #49	; 0x31
 800f9d2:	f7ff bb6e 	b.w	800f0b2 <_dtoa_r+0x45a>
 800f9d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f9dc:	e74f      	b.n	800f87e <_dtoa_r+0xc26>
 800f9de:	2a00      	cmp	r2, #0
 800f9e0:	4659      	mov	r1, fp
 800f9e2:	ee09 ba10 	vmov	s18, fp
 800f9e6:	46cb      	mov	fp, r9
 800f9e8:	4699      	mov	r9, r3
 800f9ea:	dd10      	ble.n	800fa0e <_dtoa_r+0xdb6>
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f000 fca8 	bl	8010344 <__lshift>
 800f9f4:	4639      	mov	r1, r7
 800f9f6:	ee09 0a10 	vmov	s18, r0
 800f9fa:	f000 fd17 	bl	801042c <__mcmp>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f340 809f 	ble.w	800fb42 <_dtoa_r+0xeea>
 800fa04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fa08:	d06e      	beq.n	800fae8 <_dtoa_r+0xe90>
 800fa0a:	f10b 0931 	add.w	r9, fp, #49	; 0x31
 800fa0e:	f808 9b01 	strb.w	r9, [r8], #1
 800fa12:	9b06      	ldr	r3, [sp, #24]
 800fa14:	462e      	mov	r6, r5
 800fa16:	4655      	mov	r5, sl
 800fa18:	3301      	adds	r3, #1
 800fa1a:	9306      	str	r3, [sp, #24]
 800fa1c:	e686      	b.n	800f72c <_dtoa_r+0xad4>
 800fa1e:	4625      	mov	r5, r4
 800fa20:	ee1a 4a10 	vmov	r4, s20
 800fa24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa26:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800fa2a:	3301      	adds	r3, #1
 800fa2c:	9504      	str	r5, [sp, #16]
 800fa2e:	9306      	str	r3, [sp, #24]
 800fa30:	e44c      	b.n	800f2cc <_dtoa_r+0x674>
 800fa32:	9904      	ldr	r1, [sp, #16]
 800fa34:	f7ff bb35 	b.w	800f0a2 <_dtoa_r+0x44a>
 800fa38:	6869      	ldr	r1, [r5, #4]
 800fa3a:	4620      	mov	r0, r4
 800fa3c:	f000 fa6e 	bl	800ff1c <_Balloc>
 800fa40:	4606      	mov	r6, r0
 800fa42:	2800      	cmp	r0, #0
 800fa44:	f000 8090 	beq.w	800fb68 <_dtoa_r+0xf10>
 800fa48:	692b      	ldr	r3, [r5, #16]
 800fa4a:	f105 010c 	add.w	r1, r5, #12
 800fa4e:	300c      	adds	r0, #12
 800fa50:	3302      	adds	r3, #2
 800fa52:	009a      	lsls	r2, r3, #2
 800fa54:	f7f1 fad0 	bl	8000ff8 <memcpy>
 800fa58:	4631      	mov	r1, r6
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	f000 fc71 	bl	8010344 <__lshift>
 800fa62:	4682      	mov	sl, r0
 800fa64:	e45d      	b.n	800f322 <_dtoa_r+0x6ca>
 800fa66:	ee1a 4a10 	vmov	r4, s20
 800fa6a:	f7ff bb51 	b.w	800f110 <_dtoa_r+0x4b8>
 800fa6e:	bf00      	nop
 800fa70:	7ff00000 	.word	0x7ff00000
 800fa74:	40240000 	.word	0x40240000
 800fa78:	401c0000 	.word	0x401c0000
 800fa7c:	08013e28 	.word	0x08013e28
 800fa80:	ee18 4a10 	vmov	r4, s16
 800fa84:	4602      	mov	r2, r0
 800fa86:	460b      	mov	r3, r1
 800fa88:	f7f0 fc08 	bl	800029c <__adddf3>
 800fa8c:	4652      	mov	r2, sl
 800fa8e:	465b      	mov	r3, fp
 800fa90:	4606      	mov	r6, r0
 800fa92:	460f      	mov	r7, r1
 800fa94:	f7f1 f848 	bl	8000b28 <__aeabi_dcmpgt>
 800fa98:	b960      	cbnz	r0, 800fab4 <_dtoa_r+0xe5c>
 800fa9a:	4652      	mov	r2, sl
 800fa9c:	465b      	mov	r3, fp
 800fa9e:	4630      	mov	r0, r6
 800faa0:	4639      	mov	r1, r7
 800faa2:	f7f1 f819 	bl	8000ad8 <__aeabi_dcmpeq>
 800faa6:	2800      	cmp	r0, #0
 800faa8:	f43f af6b 	beq.w	800f982 <_dtoa_r+0xd2a>
 800faac:	f018 0f01 	tst.w	r8, #1
 800fab0:	f43f af67 	beq.w	800f982 <_dtoa_r+0xd2a>
 800fab4:	9b06      	ldr	r3, [sp, #24]
 800fab6:	9904      	ldr	r1, [sp, #16]
 800fab8:	9313      	str	r3, [sp, #76]	; 0x4c
 800faba:	f7ff baf2 	b.w	800f0a2 <_dtoa_r+0x44a>
 800fabe:	2b39      	cmp	r3, #57	; 0x39
 800fac0:	ee09 ba10 	vmov	s18, fp
 800fac4:	d010      	beq.n	800fae8 <_dtoa_r+0xe90>
 800fac6:	3301      	adds	r3, #1
 800fac8:	f808 3b01 	strb.w	r3, [r8], #1
 800facc:	e7a1      	b.n	800fa12 <_dtoa_r+0xdba>
 800face:	4699      	mov	r9, r3
 800fad0:	9b06      	ldr	r3, [sp, #24]
 800fad2:	ee09 ba10 	vmov	s18, fp
 800fad6:	46b3      	mov	fp, r6
 800fad8:	3301      	adds	r3, #1
 800fada:	462e      	mov	r6, r5
 800fadc:	4655      	mov	r5, sl
 800fade:	9306      	str	r3, [sp, #24]
 800fae0:	e5f9      	b.n	800f6d6 <_dtoa_r+0xa7e>
 800fae2:	4698      	mov	r8, r3
 800fae4:	f7ff bbaa 	b.w	800f23c <_dtoa_r+0x5e4>
 800fae8:	9b06      	ldr	r3, [sp, #24]
 800faea:	46c3      	mov	fp, r8
 800faec:	462e      	mov	r6, r5
 800faee:	4655      	mov	r5, sl
 800faf0:	3301      	adds	r3, #1
 800faf2:	9306      	str	r3, [sp, #24]
 800faf4:	2339      	movs	r3, #57	; 0x39
 800faf6:	f80b 3b01 	strb.w	r3, [fp], #1
 800fafa:	e5fc      	b.n	800f6f6 <_dtoa_r+0xa9e>
 800fafc:	2b39      	cmp	r3, #57	; 0x39
 800fafe:	ee09 ba10 	vmov	s18, fp
 800fb02:	46cb      	mov	fp, r9
 800fb04:	4699      	mov	r9, r3
 800fb06:	d0ef      	beq.n	800fae8 <_dtoa_r+0xe90>
 800fb08:	2e00      	cmp	r6, #0
 800fb0a:	f73f af7e 	bgt.w	800fa0a <_dtoa_r+0xdb2>
 800fb0e:	e77e      	b.n	800fa0e <_dtoa_r+0xdb6>
 800fb10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb12:	9309      	str	r3, [sp, #36]	; 0x24
 800fb14:	e5b9      	b.n	800f68a <_dtoa_r+0xa32>
 800fb16:	4629      	mov	r1, r5
 800fb18:	2300      	movs	r3, #0
 800fb1a:	220a      	movs	r2, #10
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	f000 fa2d 	bl	800ff7c <__multadd>
 800fb22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb24:	4605      	mov	r5, r0
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	dc03      	bgt.n	800fb32 <_dtoa_r+0xeda>
 800fb2a:	9b01      	ldr	r3, [sp, #4]
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	f73f ace9 	bgt.w	800f504 <_dtoa_r+0x8ac>
 800fb32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb34:	f8cd 9018 	str.w	r9, [sp, #24]
 800fb38:	9309      	str	r3, [sp, #36]	; 0x24
 800fb3a:	f7ff bbea 	b.w	800f312 <_dtoa_r+0x6ba>
 800fb3e:	4645      	mov	r5, r8
 800fb40:	e561      	b.n	800f606 <_dtoa_r+0x9ae>
 800fb42:	f47f af64 	bne.w	800fa0e <_dtoa_r+0xdb6>
 800fb46:	f019 0f01 	tst.w	r9, #1
 800fb4a:	f47f af5b 	bne.w	800fa04 <_dtoa_r+0xdac>
 800fb4e:	e75e      	b.n	800fa0e <_dtoa_r+0xdb6>
 800fb50:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 800fb54:	f04f 0802 	mov.w	r8, #2
 800fb58:	f7ff ba0a 	b.w	800ef70 <_dtoa_r+0x318>
 800fb5c:	f43f ab85 	beq.w	800f26a <_dtoa_r+0x612>
 800fb60:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 800fb64:	f7ff bbc9 	b.w	800f2fa <_dtoa_r+0x6a2>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	4b0e      	ldr	r3, [pc, #56]	; (800fba4 <_dtoa_r+0xf4c>)
 800fb6c:	f240 21ea 	movw	r1, #746	; 0x2ea
 800fb70:	480d      	ldr	r0, [pc, #52]	; (800fba8 <_dtoa_r+0xf50>)
 800fb72:	f000 febb 	bl	80108ec <__assert_func>
 800fb76:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800fb7a:	f8cd 8010 	str.w	r8, [sp, #16]
 800fb7e:	f7ff bba1 	b.w	800f2c4 <_dtoa_r+0x66c>
 800fb82:	4b08      	ldr	r3, [pc, #32]	; (800fba4 <_dtoa_r+0xf4c>)
 800fb84:	2200      	movs	r2, #0
 800fb86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fb8a:	4807      	ldr	r0, [pc, #28]	; (800fba8 <_dtoa_r+0xf50>)
 800fb8c:	f000 feae 	bl	80108ec <__assert_func>
 800fb90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb94:	2100      	movs	r1, #0
 800fb96:	e9cd 2109 	strd	r2, r1, [sp, #36]	; 0x24
 800fb9a:	2101      	movs	r1, #1
 800fb9c:	9212      	str	r2, [sp, #72]	; 0x48
 800fb9e:	910c      	str	r1, [sp, #48]	; 0x30
 800fba0:	f7ff bac0 	b.w	800f124 <_dtoa_r+0x4cc>
 800fba4:	08013cec 	.word	0x08013cec
 800fba8:	08013d00 	.word	0x08013d00

0800fbac <__libc_fini_array>:
 800fbac:	b538      	push	{r3, r4, r5, lr}
 800fbae:	4b08      	ldr	r3, [pc, #32]	; (800fbd0 <__libc_fini_array+0x24>)
 800fbb0:	4d08      	ldr	r5, [pc, #32]	; (800fbd4 <__libc_fini_array+0x28>)
 800fbb2:	1b5b      	subs	r3, r3, r5
 800fbb4:	109c      	asrs	r4, r3, #2
 800fbb6:	d007      	beq.n	800fbc8 <__libc_fini_array+0x1c>
 800fbb8:	3b04      	subs	r3, #4
 800fbba:	441d      	add	r5, r3
 800fbbc:	3c01      	subs	r4, #1
 800fbbe:	f855 3904 	ldr.w	r3, [r5], #-4
 800fbc2:	4798      	blx	r3
 800fbc4:	2c00      	cmp	r4, #0
 800fbc6:	d1f9      	bne.n	800fbbc <__libc_fini_array+0x10>
 800fbc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbcc:	f002 bf0e 	b.w	80129ec <_fini>
 800fbd0:	08014084 	.word	0x08014084
 800fbd4:	08014080 	.word	0x08014080

0800fbd8 <_malloc_trim_r>:
 800fbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbda:	4f23      	ldr	r7, [pc, #140]	; (800fc68 <_malloc_trim_r+0x90>)
 800fbdc:	460c      	mov	r4, r1
 800fbde:	4606      	mov	r6, r0
 800fbe0:	f7fd f9e0 	bl	800cfa4 <__malloc_lock>
 800fbe4:	68ba      	ldr	r2, [r7, #8]
 800fbe6:	f640 73ef 	movw	r3, #4079	; 0xfef
 800fbea:	6855      	ldr	r5, [r2, #4]
 800fbec:	1b1b      	subs	r3, r3, r4
 800fbee:	4c1f      	ldr	r4, [pc, #124]	; (800fc6c <_malloc_trim_r+0x94>)
 800fbf0:	f025 0503 	bic.w	r5, r5, #3
 800fbf4:	442b      	add	r3, r5
 800fbf6:	401c      	ands	r4, r3
 800fbf8:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 800fbfc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800fc00:	db07      	blt.n	800fc12 <_malloc_trim_r+0x3a>
 800fc02:	2100      	movs	r1, #0
 800fc04:	4630      	mov	r0, r6
 800fc06:	f7fd f9d9 	bl	800cfbc <_sbrk_r>
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	442b      	add	r3, r5
 800fc0e:	4298      	cmp	r0, r3
 800fc10:	d004      	beq.n	800fc1c <_malloc_trim_r+0x44>
 800fc12:	4630      	mov	r0, r6
 800fc14:	f7fd f9cc 	bl	800cfb0 <__malloc_unlock>
 800fc18:	2000      	movs	r0, #0
 800fc1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc1c:	4261      	negs	r1, r4
 800fc1e:	4630      	mov	r0, r6
 800fc20:	f7fd f9cc 	bl	800cfbc <_sbrk_r>
 800fc24:	3001      	adds	r0, #1
 800fc26:	d00d      	beq.n	800fc44 <_malloc_trim_r+0x6c>
 800fc28:	1b2d      	subs	r5, r5, r4
 800fc2a:	4b11      	ldr	r3, [pc, #68]	; (800fc70 <_malloc_trim_r+0x98>)
 800fc2c:	68ba      	ldr	r2, [r7, #8]
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f045 0501 	orr.w	r5, r5, #1
 800fc34:	6055      	str	r5, [r2, #4]
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	1b12      	subs	r2, r2, r4
 800fc3a:	601a      	str	r2, [r3, #0]
 800fc3c:	f7fd f9b8 	bl	800cfb0 <__malloc_unlock>
 800fc40:	2001      	movs	r0, #1
 800fc42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc44:	2100      	movs	r1, #0
 800fc46:	4630      	mov	r0, r6
 800fc48:	f7fd f9b8 	bl	800cfbc <_sbrk_r>
 800fc4c:	68ba      	ldr	r2, [r7, #8]
 800fc4e:	1a83      	subs	r3, r0, r2
 800fc50:	2b0f      	cmp	r3, #15
 800fc52:	ddde      	ble.n	800fc12 <_malloc_trim_r+0x3a>
 800fc54:	f043 0301 	orr.w	r3, r3, #1
 800fc58:	4905      	ldr	r1, [pc, #20]	; (800fc70 <_malloc_trim_r+0x98>)
 800fc5a:	6053      	str	r3, [r2, #4]
 800fc5c:	4b05      	ldr	r3, [pc, #20]	; (800fc74 <_malloc_trim_r+0x9c>)
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	1ac0      	subs	r0, r0, r3
 800fc62:	6008      	str	r0, [r1, #0]
 800fc64:	e7d5      	b.n	800fc12 <_malloc_trim_r+0x3a>
 800fc66:	bf00      	nop
 800fc68:	20000618 	.word	0x20000618
 800fc6c:	fffff000 	.word	0xfffff000
 800fc70:	200067a4 	.word	0x200067a4
 800fc74:	20000a20 	.word	0x20000a20

0800fc78 <_free_r>:
 800fc78:	2900      	cmp	r1, #0
 800fc7a:	d061      	beq.n	800fd40 <_free_r+0xc8>
 800fc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7e:	460c      	mov	r4, r1
 800fc80:	4606      	mov	r6, r0
 800fc82:	f7fd f98f 	bl	800cfa4 <__malloc_lock>
 800fc86:	4f7c      	ldr	r7, [pc, #496]	; (800fe78 <_free_r+0x200>)
 800fc88:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800fc8c:	f1a4 0508 	sub.w	r5, r4, #8
 800fc90:	68b8      	ldr	r0, [r7, #8]
 800fc92:	f022 0101 	bic.w	r1, r2, #1
 800fc96:	eb05 0c01 	add.w	ip, r5, r1
 800fc9a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800fc9e:	4560      	cmp	r0, ip
 800fca0:	f023 0303 	bic.w	r3, r3, #3
 800fca4:	f000 808b 	beq.w	800fdbe <_free_r+0x146>
 800fca8:	07d2      	lsls	r2, r2, #31
 800fcaa:	f8cc 3004 	str.w	r3, [ip, #4]
 800fcae:	d432      	bmi.n	800fd16 <_free_r+0x9e>
 800fcb0:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800fcb4:	f107 0008 	add.w	r0, r7, #8
 800fcb8:	1aad      	subs	r5, r5, r2
 800fcba:	4411      	add	r1, r2
 800fcbc:	68aa      	ldr	r2, [r5, #8]
 800fcbe:	4282      	cmp	r2, r0
 800fcc0:	d06a      	beq.n	800fd98 <_free_r+0x120>
 800fcc2:	eb0c 0403 	add.w	r4, ip, r3
 800fcc6:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800fcca:	68ec      	ldr	r4, [r5, #12]
 800fccc:	f01e 0f01 	tst.w	lr, #1
 800fcd0:	60d4      	str	r4, [r2, #12]
 800fcd2:	60a2      	str	r2, [r4, #8]
 800fcd4:	f000 8097 	beq.w	800fe06 <_free_r+0x18e>
 800fcd8:	f041 0301 	orr.w	r3, r1, #1
 800fcdc:	606b      	str	r3, [r5, #4]
 800fcde:	f8cc 1000 	str.w	r1, [ip]
 800fce2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fce6:	d235      	bcs.n	800fd54 <_free_r+0xdc>
 800fce8:	094a      	lsrs	r2, r1, #5
 800fcea:	08cb      	lsrs	r3, r1, #3
 800fcec:	2101      	movs	r1, #1
 800fcee:	3301      	adds	r3, #1
 800fcf0:	4091      	lsls	r1, r2
 800fcf2:	687a      	ldr	r2, [r7, #4]
 800fcf4:	4311      	orrs	r1, r2
 800fcf6:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 800fcfa:	6079      	str	r1, [r7, #4]
 800fcfc:	3a08      	subs	r2, #8
 800fcfe:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 800fd02:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800fd06:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 800fd0a:	60cd      	str	r5, [r1, #12]
 800fd0c:	4630      	mov	r0, r6
 800fd0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd12:	f7fd b94d 	b.w	800cfb0 <__malloc_unlock>
 800fd16:	eb0c 0203 	add.w	r2, ip, r3
 800fd1a:	6852      	ldr	r2, [r2, #4]
 800fd1c:	07d0      	lsls	r0, r2, #31
 800fd1e:	d410      	bmi.n	800fd42 <_free_r+0xca>
 800fd20:	4419      	add	r1, r3
 800fd22:	f107 0008 	add.w	r0, r7, #8
 800fd26:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800fd2a:	4283      	cmp	r3, r0
 800fd2c:	d073      	beq.n	800fe16 <_free_r+0x19e>
 800fd2e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800fd32:	60da      	str	r2, [r3, #12]
 800fd34:	6093      	str	r3, [r2, #8]
 800fd36:	f041 0301 	orr.w	r3, r1, #1
 800fd3a:	606b      	str	r3, [r5, #4]
 800fd3c:	5069      	str	r1, [r5, r1]
 800fd3e:	e7d0      	b.n	800fce2 <_free_r+0x6a>
 800fd40:	4770      	bx	lr
 800fd42:	f041 0301 	orr.w	r3, r1, #1
 800fd46:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800fd4a:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd4e:	f8cc 1000 	str.w	r1, [ip]
 800fd52:	d3c9      	bcc.n	800fce8 <_free_r+0x70>
 800fd54:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800fd58:	ea4f 2351 	mov.w	r3, r1, lsr #9
 800fd5c:	d248      	bcs.n	800fdf0 <_free_r+0x178>
 800fd5e:	098b      	lsrs	r3, r1, #6
 800fd60:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800fd64:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800fd68:	00c3      	lsls	r3, r0, #3
 800fd6a:	18f8      	adds	r0, r7, r3
 800fd6c:	58fb      	ldr	r3, [r7, r3]
 800fd6e:	3808      	subs	r0, #8
 800fd70:	4298      	cmp	r0, r3
 800fd72:	d059      	beq.n	800fe28 <_free_r+0x1b0>
 800fd74:	685a      	ldr	r2, [r3, #4]
 800fd76:	f022 0203 	bic.w	r2, r2, #3
 800fd7a:	428a      	cmp	r2, r1
 800fd7c:	d902      	bls.n	800fd84 <_free_r+0x10c>
 800fd7e:	689b      	ldr	r3, [r3, #8]
 800fd80:	4298      	cmp	r0, r3
 800fd82:	d1f7      	bne.n	800fd74 <_free_r+0xfc>
 800fd84:	68d8      	ldr	r0, [r3, #12]
 800fd86:	e9c5 3002 	strd	r3, r0, [r5, #8]
 800fd8a:	6085      	str	r5, [r0, #8]
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	60dd      	str	r5, [r3, #12]
 800fd90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd94:	f7fd b90c 	b.w	800cfb0 <__malloc_unlock>
 800fd98:	eb0c 0203 	add.w	r2, ip, r3
 800fd9c:	6852      	ldr	r2, [r2, #4]
 800fd9e:	07d2      	lsls	r2, r2, #31
 800fda0:	d463      	bmi.n	800fe6a <_free_r+0x1f2>
 800fda2:	440b      	add	r3, r1
 800fda4:	4630      	mov	r0, r6
 800fda6:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 800fdaa:	60ca      	str	r2, [r1, #12]
 800fdac:	6091      	str	r1, [r2, #8]
 800fdae:	f043 0201 	orr.w	r2, r3, #1
 800fdb2:	606a      	str	r2, [r5, #4]
 800fdb4:	50eb      	str	r3, [r5, r3]
 800fdb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fdba:	f7fd b8f9 	b.w	800cfb0 <__malloc_unlock>
 800fdbe:	440b      	add	r3, r1
 800fdc0:	07d1      	lsls	r1, r2, #31
 800fdc2:	d407      	bmi.n	800fdd4 <_free_r+0x15c>
 800fdc4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800fdc8:	1aad      	subs	r5, r5, r2
 800fdca:	4413      	add	r3, r2
 800fdcc:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 800fdd0:	60ca      	str	r2, [r1, #12]
 800fdd2:	6091      	str	r1, [r2, #8]
 800fdd4:	f043 0201 	orr.w	r2, r3, #1
 800fdd8:	606a      	str	r2, [r5, #4]
 800fdda:	4a28      	ldr	r2, [pc, #160]	; (800fe7c <_free_r+0x204>)
 800fddc:	60bd      	str	r5, [r7, #8]
 800fdde:	6812      	ldr	r2, [r2, #0]
 800fde0:	429a      	cmp	r2, r3
 800fde2:	d893      	bhi.n	800fd0c <_free_r+0x94>
 800fde4:	4b26      	ldr	r3, [pc, #152]	; (800fe80 <_free_r+0x208>)
 800fde6:	4630      	mov	r0, r6
 800fde8:	6819      	ldr	r1, [r3, #0]
 800fdea:	f7ff fef5 	bl	800fbd8 <_malloc_trim_r>
 800fdee:	e78d      	b.n	800fd0c <_free_r+0x94>
 800fdf0:	2b14      	cmp	r3, #20
 800fdf2:	d90a      	bls.n	800fe0a <_free_r+0x192>
 800fdf4:	2b54      	cmp	r3, #84	; 0x54
 800fdf6:	d81f      	bhi.n	800fe38 <_free_r+0x1c0>
 800fdf8:	0b0b      	lsrs	r3, r1, #12
 800fdfa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800fdfe:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800fe02:	00c3      	lsls	r3, r0, #3
 800fe04:	e7b1      	b.n	800fd6a <_free_r+0xf2>
 800fe06:	4419      	add	r1, r3
 800fe08:	e78d      	b.n	800fd26 <_free_r+0xae>
 800fe0a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800fe0e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800fe12:	00c3      	lsls	r3, r0, #3
 800fe14:	e7a9      	b.n	800fd6a <_free_r+0xf2>
 800fe16:	f041 0301 	orr.w	r3, r1, #1
 800fe1a:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800fe1e:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800fe22:	606b      	str	r3, [r5, #4]
 800fe24:	5069      	str	r1, [r5, r1]
 800fe26:	e771      	b.n	800fd0c <_free_r+0x94>
 800fe28:	2101      	movs	r1, #1
 800fe2a:	1092      	asrs	r2, r2, #2
 800fe2c:	fa01 f202 	lsl.w	r2, r1, r2
 800fe30:	6879      	ldr	r1, [r7, #4]
 800fe32:	430a      	orrs	r2, r1
 800fe34:	607a      	str	r2, [r7, #4]
 800fe36:	e7a6      	b.n	800fd86 <_free_r+0x10e>
 800fe38:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800fe3c:	d806      	bhi.n	800fe4c <_free_r+0x1d4>
 800fe3e:	0bcb      	lsrs	r3, r1, #15
 800fe40:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800fe44:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800fe48:	00c3      	lsls	r3, r0, #3
 800fe4a:	e78e      	b.n	800fd6a <_free_r+0xf2>
 800fe4c:	f240 5254 	movw	r2, #1364	; 0x554
 800fe50:	4293      	cmp	r3, r2
 800fe52:	d806      	bhi.n	800fe62 <_free_r+0x1ea>
 800fe54:	0c8b      	lsrs	r3, r1, #18
 800fe56:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800fe5a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800fe5e:	00c3      	lsls	r3, r0, #3
 800fe60:	e783      	b.n	800fd6a <_free_r+0xf2>
 800fe62:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800fe66:	227e      	movs	r2, #126	; 0x7e
 800fe68:	e77f      	b.n	800fd6a <_free_r+0xf2>
 800fe6a:	f041 0301 	orr.w	r3, r1, #1
 800fe6e:	606b      	str	r3, [r5, #4]
 800fe70:	f8cc 1000 	str.w	r1, [ip]
 800fe74:	e74a      	b.n	800fd0c <_free_r+0x94>
 800fe76:	bf00      	nop
 800fe78:	20000618 	.word	0x20000618
 800fe7c:	20000a24 	.word	0x20000a24
 800fe80:	200067d4 	.word	0x200067d4

0800fe84 <_localeconv_r>:
 800fe84:	4800      	ldr	r0, [pc, #0]	; (800fe88 <_localeconv_r+0x4>)
 800fe86:	4770      	bx	lr
 800fe88:	20000b1c 	.word	0x20000b1c

0800fe8c <__retarget_lock_init_recursive>:
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop

0800fe90 <__retarget_lock_close_recursive>:
 800fe90:	4770      	bx	lr
 800fe92:	bf00      	nop

0800fe94 <__retarget_lock_acquire_recursive>:
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop

0800fe98 <__retarget_lock_release_recursive>:
 800fe98:	4770      	bx	lr
 800fe9a:	bf00      	nop

0800fe9c <memchr>:
 800fe9c:	b510      	push	{r4, lr}
 800fe9e:	fa5f fe81 	uxtb.w	lr, r1
 800fea2:	0781      	lsls	r1, r0, #30
 800fea4:	d013      	beq.n	800fece <memchr+0x32>
 800fea6:	4603      	mov	r3, r0
 800fea8:	1e51      	subs	r1, r2, #1
 800feaa:	b922      	cbnz	r2, 800feb6 <memchr+0x1a>
 800feac:	e00b      	b.n	800fec6 <memchr+0x2a>
 800feae:	079a      	lsls	r2, r3, #30
 800feb0:	d00e      	beq.n	800fed0 <memchr+0x34>
 800feb2:	3901      	subs	r1, #1
 800feb4:	d307      	bcc.n	800fec6 <memchr+0x2a>
 800feb6:	469c      	mov	ip, r3
 800feb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800febc:	4572      	cmp	r2, lr
 800febe:	4618      	mov	r0, r3
 800fec0:	d1f5      	bne.n	800feae <memchr+0x12>
 800fec2:	4660      	mov	r0, ip
 800fec4:	bd10      	pop	{r4, pc}
 800fec6:	f04f 0c00 	mov.w	ip, #0
 800feca:	4660      	mov	r0, ip
 800fecc:	bd10      	pop	{r4, pc}
 800fece:	4611      	mov	r1, r2
 800fed0:	2903      	cmp	r1, #3
 800fed2:	d80d      	bhi.n	800fef0 <memchr+0x54>
 800fed4:	2900      	cmp	r1, #0
 800fed6:	d0f6      	beq.n	800fec6 <memchr+0x2a>
 800fed8:	4602      	mov	r2, r0
 800feda:	1843      	adds	r3, r0, r1
 800fedc:	e001      	b.n	800fee2 <memchr+0x46>
 800fede:	429a      	cmp	r2, r3
 800fee0:	d0f1      	beq.n	800fec6 <memchr+0x2a>
 800fee2:	4694      	mov	ip, r2
 800fee4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800fee8:	4571      	cmp	r1, lr
 800feea:	d1f8      	bne.n	800fede <memchr+0x42>
 800feec:	4660      	mov	r0, ip
 800feee:	bd10      	pop	{r4, pc}
 800fef0:	ea4e 240e 	orr.w	r4, lr, lr, lsl #8
 800fef4:	4602      	mov	r2, r0
 800fef6:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
 800fefa:	4610      	mov	r0, r2
 800fefc:	3204      	adds	r2, #4
 800fefe:	6803      	ldr	r3, [r0, #0]
 800ff00:	4063      	eors	r3, r4
 800ff02:	f1a3 3c01 	sub.w	ip, r3, #16843009	; 0x1010101
 800ff06:	ea2c 0303 	bic.w	r3, ip, r3
 800ff0a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 800ff0e:	d1e3      	bne.n	800fed8 <memchr+0x3c>
 800ff10:	3904      	subs	r1, #4
 800ff12:	4610      	mov	r0, r2
 800ff14:	2903      	cmp	r1, #3
 800ff16:	d8f0      	bhi.n	800fefa <memchr+0x5e>
 800ff18:	e7dc      	b.n	800fed4 <memchr+0x38>
 800ff1a:	bf00      	nop

0800ff1c <_Balloc>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ff20:	4605      	mov	r5, r0
 800ff22:	460c      	mov	r4, r1
 800ff24:	b14b      	cbz	r3, 800ff3a <_Balloc+0x1e>
 800ff26:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ff2a:	b180      	cbz	r0, 800ff4e <_Balloc+0x32>
 800ff2c:	6802      	ldr	r2, [r0, #0]
 800ff2e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800ff32:	2300      	movs	r3, #0
 800ff34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff38:	bd38      	pop	{r3, r4, r5, pc}
 800ff3a:	2221      	movs	r2, #33	; 0x21
 800ff3c:	2104      	movs	r1, #4
 800ff3e:	f000 fcf3 	bl	8010928 <_calloc_r>
 800ff42:	4603      	mov	r3, r0
 800ff44:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ff46:	2800      	cmp	r0, #0
 800ff48:	d1ed      	bne.n	800ff26 <_Balloc+0xa>
 800ff4a:	2000      	movs	r0, #0
 800ff4c:	bd38      	pop	{r3, r4, r5, pc}
 800ff4e:	2101      	movs	r1, #1
 800ff50:	4628      	mov	r0, r5
 800ff52:	fa01 f504 	lsl.w	r5, r1, r4
 800ff56:	1d6a      	adds	r2, r5, #5
 800ff58:	0092      	lsls	r2, r2, #2
 800ff5a:	f000 fce5 	bl	8010928 <_calloc_r>
 800ff5e:	2800      	cmp	r0, #0
 800ff60:	d0f3      	beq.n	800ff4a <_Balloc+0x2e>
 800ff62:	e9c0 4501 	strd	r4, r5, [r0, #4]
 800ff66:	e7e4      	b.n	800ff32 <_Balloc+0x16>

0800ff68 <_Bfree>:
 800ff68:	b131      	cbz	r1, 800ff78 <_Bfree+0x10>
 800ff6a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ff6c:	684a      	ldr	r2, [r1, #4]
 800ff6e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ff72:	6008      	str	r0, [r1, #0]
 800ff74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop

0800ff7c <__multadd>:
 800ff7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff7e:	4607      	mov	r7, r0
 800ff80:	b083      	sub	sp, #12
 800ff82:	460e      	mov	r6, r1
 800ff84:	690d      	ldr	r5, [r1, #16]
 800ff86:	f101 0e14 	add.w	lr, r1, #20
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	f8de 1000 	ldr.w	r1, [lr]
 800ff90:	3001      	adds	r0, #1
 800ff92:	b28c      	uxth	r4, r1
 800ff94:	4285      	cmp	r5, r0
 800ff96:	ea4f 4111 	mov.w	r1, r1, lsr #16
 800ff9a:	fb02 3304 	mla	r3, r2, r4, r3
 800ff9e:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800ffa2:	b29b      	uxth	r3, r3
 800ffa4:	fb02 cc01 	mla	ip, r2, r1, ip
 800ffa8:	eb03 440c 	add.w	r4, r3, ip, lsl #16
 800ffac:	ea4f 431c 	mov.w	r3, ip, lsr #16
 800ffb0:	f84e 4b04 	str.w	r4, [lr], #4
 800ffb4:	dcea      	bgt.n	800ff8c <__multadd+0x10>
 800ffb6:	b13b      	cbz	r3, 800ffc8 <__multadd+0x4c>
 800ffb8:	68b2      	ldr	r2, [r6, #8]
 800ffba:	42aa      	cmp	r2, r5
 800ffbc:	dd07      	ble.n	800ffce <__multadd+0x52>
 800ffbe:	eb06 0285 	add.w	r2, r6, r5, lsl #2
 800ffc2:	3501      	adds	r5, #1
 800ffc4:	6153      	str	r3, [r2, #20]
 800ffc6:	6135      	str	r5, [r6, #16]
 800ffc8:	4630      	mov	r0, r6
 800ffca:	b003      	add	sp, #12
 800ffcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffce:	6871      	ldr	r1, [r6, #4]
 800ffd0:	4638      	mov	r0, r7
 800ffd2:	9301      	str	r3, [sp, #4]
 800ffd4:	3101      	adds	r1, #1
 800ffd6:	f7ff ffa1 	bl	800ff1c <_Balloc>
 800ffda:	9b01      	ldr	r3, [sp, #4]
 800ffdc:	4604      	mov	r4, r0
 800ffde:	b1b8      	cbz	r0, 8010010 <__multadd+0x94>
 800ffe0:	6932      	ldr	r2, [r6, #16]
 800ffe2:	f106 010c 	add.w	r1, r6, #12
 800ffe6:	300c      	adds	r0, #12
 800ffe8:	9301      	str	r3, [sp, #4]
 800ffea:	3202      	adds	r2, #2
 800ffec:	0092      	lsls	r2, r2, #2
 800ffee:	f7f1 f803 	bl	8000ff8 <memcpy>
 800fff2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fff4:	6871      	ldr	r1, [r6, #4]
 800fff6:	9b01      	ldr	r3, [sp, #4]
 800fff8:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800fffc:	6030      	str	r0, [r6, #0]
 800fffe:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
 8010002:	4626      	mov	r6, r4
 8010004:	eb06 0285 	add.w	r2, r6, r5, lsl #2
 8010008:	3501      	adds	r5, #1
 801000a:	6153      	str	r3, [r2, #20]
 801000c:	6135      	str	r5, [r6, #16]
 801000e:	e7db      	b.n	800ffc8 <__multadd+0x4c>
 8010010:	4602      	mov	r2, r0
 8010012:	4b02      	ldr	r3, [pc, #8]	; (801001c <__multadd+0xa0>)
 8010014:	21b5      	movs	r1, #181	; 0xb5
 8010016:	4802      	ldr	r0, [pc, #8]	; (8010020 <__multadd+0xa4>)
 8010018:	f000 fc68 	bl	80108ec <__assert_func>
 801001c:	08013cec 	.word	0x08013cec
 8010020:	08013d80 	.word	0x08013d80

08010024 <__hi0bits>:
 8010024:	4b0f      	ldr	r3, [pc, #60]	; (8010064 <__hi0bits+0x40>)
 8010026:	4003      	ands	r3, r0
 8010028:	b9d3      	cbnz	r3, 8010060 <__hi0bits+0x3c>
 801002a:	0400      	lsls	r0, r0, #16
 801002c:	2310      	movs	r3, #16
 801002e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010032:	d101      	bne.n	8010038 <__hi0bits+0x14>
 8010034:	3308      	adds	r3, #8
 8010036:	0200      	lsls	r0, r0, #8
 8010038:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801003c:	d101      	bne.n	8010042 <__hi0bits+0x1e>
 801003e:	3304      	adds	r3, #4
 8010040:	0100      	lsls	r0, r0, #4
 8010042:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010046:	d101      	bne.n	801004c <__hi0bits+0x28>
 8010048:	3302      	adds	r3, #2
 801004a:	0080      	lsls	r0, r0, #2
 801004c:	2800      	cmp	r0, #0
 801004e:	db05      	blt.n	801005c <__hi0bits+0x38>
 8010050:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010054:	f103 0301 	add.w	r3, r3, #1
 8010058:	bf08      	it	eq
 801005a:	2320      	moveq	r3, #32
 801005c:	4618      	mov	r0, r3
 801005e:	4770      	bx	lr
 8010060:	2300      	movs	r3, #0
 8010062:	e7e4      	b.n	801002e <__hi0bits+0xa>
 8010064:	ffff0000 	.word	0xffff0000

08010068 <__lo0bits>:
 8010068:	6803      	ldr	r3, [r0, #0]
 801006a:	4601      	mov	r1, r0
 801006c:	f013 0207 	ands.w	r2, r3, #7
 8010070:	d007      	beq.n	8010082 <__lo0bits+0x1a>
 8010072:	07da      	lsls	r2, r3, #31
 8010074:	d41f      	bmi.n	80100b6 <__lo0bits+0x4e>
 8010076:	0798      	lsls	r0, r3, #30
 8010078:	d521      	bpl.n	80100be <__lo0bits+0x56>
 801007a:	085b      	lsrs	r3, r3, #1
 801007c:	2001      	movs	r0, #1
 801007e:	600b      	str	r3, [r1, #0]
 8010080:	4770      	bx	lr
 8010082:	b298      	uxth	r0, r3
 8010084:	b1a0      	cbz	r0, 80100b0 <__lo0bits+0x48>
 8010086:	4610      	mov	r0, r2
 8010088:	b2da      	uxtb	r2, r3
 801008a:	b90a      	cbnz	r2, 8010090 <__lo0bits+0x28>
 801008c:	3008      	adds	r0, #8
 801008e:	0a1b      	lsrs	r3, r3, #8
 8010090:	071a      	lsls	r2, r3, #28
 8010092:	d101      	bne.n	8010098 <__lo0bits+0x30>
 8010094:	3004      	adds	r0, #4
 8010096:	091b      	lsrs	r3, r3, #4
 8010098:	079a      	lsls	r2, r3, #30
 801009a:	d101      	bne.n	80100a0 <__lo0bits+0x38>
 801009c:	3002      	adds	r0, #2
 801009e:	089b      	lsrs	r3, r3, #2
 80100a0:	07da      	lsls	r2, r3, #31
 80100a2:	d403      	bmi.n	80100ac <__lo0bits+0x44>
 80100a4:	085b      	lsrs	r3, r3, #1
 80100a6:	f100 0001 	add.w	r0, r0, #1
 80100aa:	d006      	beq.n	80100ba <__lo0bits+0x52>
 80100ac:	600b      	str	r3, [r1, #0]
 80100ae:	4770      	bx	lr
 80100b0:	0c1b      	lsrs	r3, r3, #16
 80100b2:	2010      	movs	r0, #16
 80100b4:	e7e8      	b.n	8010088 <__lo0bits+0x20>
 80100b6:	2000      	movs	r0, #0
 80100b8:	4770      	bx	lr
 80100ba:	2020      	movs	r0, #32
 80100bc:	4770      	bx	lr
 80100be:	089b      	lsrs	r3, r3, #2
 80100c0:	2002      	movs	r0, #2
 80100c2:	600b      	str	r3, [r1, #0]
 80100c4:	4770      	bx	lr
 80100c6:	bf00      	nop

080100c8 <__i2b>:
 80100c8:	b538      	push	{r3, r4, r5, lr}
 80100ca:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80100cc:	4604      	mov	r4, r0
 80100ce:	460d      	mov	r5, r1
 80100d0:	b14b      	cbz	r3, 80100e6 <__i2b+0x1e>
 80100d2:	6858      	ldr	r0, [r3, #4]
 80100d4:	b1b0      	cbz	r0, 8010104 <__i2b+0x3c>
 80100d6:	6802      	ldr	r2, [r0, #0]
 80100d8:	605a      	str	r2, [r3, #4]
 80100da:	2200      	movs	r2, #0
 80100dc:	2301      	movs	r3, #1
 80100de:	6145      	str	r5, [r0, #20]
 80100e0:	e9c0 2303 	strd	r2, r3, [r0, #12]
 80100e4:	bd38      	pop	{r3, r4, r5, pc}
 80100e6:	2221      	movs	r2, #33	; 0x21
 80100e8:	2104      	movs	r1, #4
 80100ea:	f000 fc1d 	bl	8010928 <_calloc_r>
 80100ee:	4603      	mov	r3, r0
 80100f0:	64e0      	str	r0, [r4, #76]	; 0x4c
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d1ed      	bne.n	80100d2 <__i2b+0xa>
 80100f6:	4b09      	ldr	r3, [pc, #36]	; (801011c <__i2b+0x54>)
 80100f8:	2200      	movs	r2, #0
 80100fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80100fe:	4808      	ldr	r0, [pc, #32]	; (8010120 <__i2b+0x58>)
 8010100:	f000 fbf4 	bl	80108ec <__assert_func>
 8010104:	221c      	movs	r2, #28
 8010106:	2101      	movs	r1, #1
 8010108:	4620      	mov	r0, r4
 801010a:	f000 fc0d 	bl	8010928 <_calloc_r>
 801010e:	2800      	cmp	r0, #0
 8010110:	d0f1      	beq.n	80100f6 <__i2b+0x2e>
 8010112:	2201      	movs	r2, #1
 8010114:	2302      	movs	r3, #2
 8010116:	e9c0 2301 	strd	r2, r3, [r0, #4]
 801011a:	e7de      	b.n	80100da <__i2b+0x12>
 801011c:	08013cec 	.word	0x08013cec
 8010120:	08013d80 	.word	0x08013d80

08010124 <__multiply>:
 8010124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010128:	690e      	ldr	r6, [r1, #16]
 801012a:	b085      	sub	sp, #20
 801012c:	6915      	ldr	r5, [r2, #16]
 801012e:	4688      	mov	r8, r1
 8010130:	4614      	mov	r4, r2
 8010132:	42ae      	cmp	r6, r5
 8010134:	db05      	blt.n	8010142 <__multiply+0x1e>
 8010136:	462a      	mov	r2, r5
 8010138:	4623      	mov	r3, r4
 801013a:	4635      	mov	r5, r6
 801013c:	460c      	mov	r4, r1
 801013e:	4616      	mov	r6, r2
 8010140:	4698      	mov	r8, r3
 8010142:	19af      	adds	r7, r5, r6
 8010144:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
 8010148:	42bb      	cmp	r3, r7
 801014a:	bfb8      	it	lt
 801014c:	3101      	addlt	r1, #1
 801014e:	f7ff fee5 	bl	800ff1c <_Balloc>
 8010152:	9001      	str	r0, [sp, #4]
 8010154:	2800      	cmp	r0, #0
 8010156:	f000 8089 	beq.w	801026c <__multiply+0x148>
 801015a:	9b01      	ldr	r3, [sp, #4]
 801015c:	f103 0914 	add.w	r9, r3, #20
 8010160:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
 8010164:	45d1      	cmp	r9, sl
 8010166:	d205      	bcs.n	8010174 <__multiply+0x50>
 8010168:	464b      	mov	r3, r9
 801016a:	2200      	movs	r2, #0
 801016c:	f843 2b04 	str.w	r2, [r3], #4
 8010170:	459a      	cmp	sl, r3
 8010172:	d8fb      	bhi.n	801016c <__multiply+0x48>
 8010174:	f108 0814 	add.w	r8, r8, #20
 8010178:	f104 0314 	add.w	r3, r4, #20
 801017c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
 8010180:	461a      	mov	r2, r3
 8010182:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8010186:	45d8      	cmp	r8, fp
 8010188:	d261      	bcs.n	801024e <__multiply+0x12a>
 801018a:	1b2b      	subs	r3, r5, r4
 801018c:	3415      	adds	r4, #21
 801018e:	46ac      	mov	ip, r5
 8010190:	3b15      	subs	r3, #21
 8010192:	f023 0303 	bic.w	r3, r3, #3
 8010196:	3304      	adds	r3, #4
 8010198:	42a5      	cmp	r5, r4
 801019a:	bf38      	it	cc
 801019c:	2304      	movcc	r3, #4
 801019e:	e9cd a702 	strd	sl, r7, [sp, #8]
 80101a2:	461f      	mov	r7, r3
 80101a4:	4692      	mov	sl, r2
 80101a6:	e005      	b.n	80101b4 <__multiply+0x90>
 80101a8:	0c00      	lsrs	r0, r0, #16
 80101aa:	d12b      	bne.n	8010204 <__multiply+0xe0>
 80101ac:	45c3      	cmp	fp, r8
 80101ae:	f109 0904 	add.w	r9, r9, #4
 80101b2:	d94a      	bls.n	801024a <__multiply+0x126>
 80101b4:	f858 0b04 	ldr.w	r0, [r8], #4
 80101b8:	b285      	uxth	r5, r0
 80101ba:	2d00      	cmp	r5, #0
 80101bc:	d0f4      	beq.n	80101a8 <__multiply+0x84>
 80101be:	4656      	mov	r6, sl
 80101c0:	464c      	mov	r4, r9
 80101c2:	2300      	movs	r3, #0
 80101c4:	f856 0b04 	ldr.w	r0, [r6], #4
 80101c8:	6821      	ldr	r1, [r4, #0]
 80101ca:	b282      	uxth	r2, r0
 80101cc:	45b4      	cmp	ip, r6
 80101ce:	fa1f fe81 	uxth.w	lr, r1
 80101d2:	ea4f 4010 	mov.w	r0, r0, lsr #16
 80101d6:	fb05 ee02 	mla	lr, r5, r2, lr
 80101da:	ea4f 4211 	mov.w	r2, r1, lsr #16
 80101de:	4473      	add	r3, lr
 80101e0:	fb05 2200 	mla	r2, r5, r0, r2
 80101e4:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80101e8:	b29b      	uxth	r3, r3
 80101ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101ee:	f844 3b04 	str.w	r3, [r4], #4
 80101f2:	ea4f 4312 	mov.w	r3, r2, lsr #16
 80101f6:	d8e5      	bhi.n	80101c4 <__multiply+0xa0>
 80101f8:	f849 3007 	str.w	r3, [r9, r7]
 80101fc:	f858 0c04 	ldr.w	r0, [r8, #-4]
 8010200:	0c00      	lsrs	r0, r0, #16
 8010202:	d0d3      	beq.n	80101ac <__multiply+0x88>
 8010204:	f8d9 3000 	ldr.w	r3, [r9]
 8010208:	4654      	mov	r4, sl
 801020a:	464d      	mov	r5, r9
 801020c:	2200      	movs	r2, #0
 801020e:	4619      	mov	r1, r3
 8010210:	8826      	ldrh	r6, [r4, #0]
 8010212:	0c09      	lsrs	r1, r1, #16
 8010214:	b29b      	uxth	r3, r3
 8010216:	fb00 1106 	mla	r1, r0, r6, r1
 801021a:	440a      	add	r2, r1
 801021c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010220:	f845 3b04 	str.w	r3, [r5], #4
 8010224:	f854 6b04 	ldr.w	r6, [r4], #4
 8010228:	6829      	ldr	r1, [r5, #0]
 801022a:	0c36      	lsrs	r6, r6, #16
 801022c:	45a4      	cmp	ip, r4
 801022e:	b28b      	uxth	r3, r1
 8010230:	fb00 3306 	mla	r3, r0, r6, r3
 8010234:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010238:	ea4f 4213 	mov.w	r2, r3, lsr #16
 801023c:	d8e8      	bhi.n	8010210 <__multiply+0xec>
 801023e:	45c3      	cmp	fp, r8
 8010240:	f849 3007 	str.w	r3, [r9, r7]
 8010244:	f109 0904 	add.w	r9, r9, #4
 8010248:	d8b4      	bhi.n	80101b4 <__multiply+0x90>
 801024a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
 801024e:	2f00      	cmp	r7, #0
 8010250:	dc02      	bgt.n	8010258 <__multiply+0x134>
 8010252:	e005      	b.n	8010260 <__multiply+0x13c>
 8010254:	3f01      	subs	r7, #1
 8010256:	d003      	beq.n	8010260 <__multiply+0x13c>
 8010258:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
 801025c:	2b00      	cmp	r3, #0
 801025e:	d0f9      	beq.n	8010254 <__multiply+0x130>
 8010260:	9b01      	ldr	r3, [sp, #4]
 8010262:	4618      	mov	r0, r3
 8010264:	611f      	str	r7, [r3, #16]
 8010266:	b005      	add	sp, #20
 8010268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801026c:	4602      	mov	r2, r0
 801026e:	4b03      	ldr	r3, [pc, #12]	; (801027c <__multiply+0x158>)
 8010270:	f240 115d 	movw	r1, #349	; 0x15d
 8010274:	4802      	ldr	r0, [pc, #8]	; (8010280 <__multiply+0x15c>)
 8010276:	f000 fb39 	bl	80108ec <__assert_func>
 801027a:	bf00      	nop
 801027c:	08013cec 	.word	0x08013cec
 8010280:	08013d80 	.word	0x08013d80

08010284 <__pow5mult>:
 8010284:	f012 0303 	ands.w	r3, r2, #3
 8010288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801028c:	4614      	mov	r4, r2
 801028e:	4606      	mov	r6, r0
 8010290:	d132      	bne.n	80102f8 <__pow5mult+0x74>
 8010292:	460d      	mov	r5, r1
 8010294:	10a4      	asrs	r4, r4, #2
 8010296:	d020      	beq.n	80102da <__pow5mult+0x56>
 8010298:	f8d6 8048 	ldr.w	r8, [r6, #72]	; 0x48
 801029c:	f1b8 0f00 	cmp.w	r8, #0
 80102a0:	d033      	beq.n	801030a <__pow5mult+0x86>
 80102a2:	07e3      	lsls	r3, r4, #31
 80102a4:	f04f 0700 	mov.w	r7, #0
 80102a8:	d407      	bmi.n	80102ba <__pow5mult+0x36>
 80102aa:	1064      	asrs	r4, r4, #1
 80102ac:	d015      	beq.n	80102da <__pow5mult+0x56>
 80102ae:	f8d8 0000 	ldr.w	r0, [r8]
 80102b2:	b1a8      	cbz	r0, 80102e0 <__pow5mult+0x5c>
 80102b4:	4680      	mov	r8, r0
 80102b6:	07e3      	lsls	r3, r4, #31
 80102b8:	d5f7      	bpl.n	80102aa <__pow5mult+0x26>
 80102ba:	4642      	mov	r2, r8
 80102bc:	4629      	mov	r1, r5
 80102be:	4630      	mov	r0, r6
 80102c0:	f7ff ff30 	bl	8010124 <__multiply>
 80102c4:	b1b5      	cbz	r5, 80102f4 <__pow5mult+0x70>
 80102c6:	6869      	ldr	r1, [r5, #4]
 80102c8:	1064      	asrs	r4, r4, #1
 80102ca:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80102cc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 80102d0:	602a      	str	r2, [r5, #0]
 80102d2:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
 80102d6:	4605      	mov	r5, r0
 80102d8:	d1e9      	bne.n	80102ae <__pow5mult+0x2a>
 80102da:	4628      	mov	r0, r5
 80102dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e0:	4642      	mov	r2, r8
 80102e2:	4641      	mov	r1, r8
 80102e4:	4630      	mov	r0, r6
 80102e6:	f7ff ff1d 	bl	8010124 <__multiply>
 80102ea:	f8c8 0000 	str.w	r0, [r8]
 80102ee:	4680      	mov	r8, r0
 80102f0:	6007      	str	r7, [r0, #0]
 80102f2:	e7e0      	b.n	80102b6 <__pow5mult+0x32>
 80102f4:	4605      	mov	r5, r0
 80102f6:	e7d8      	b.n	80102aa <__pow5mult+0x26>
 80102f8:	3b01      	subs	r3, #1
 80102fa:	4a0f      	ldr	r2, [pc, #60]	; (8010338 <__pow5mult+0xb4>)
 80102fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010300:	2300      	movs	r3, #0
 8010302:	f7ff fe3b 	bl	800ff7c <__multadd>
 8010306:	4605      	mov	r5, r0
 8010308:	e7c4      	b.n	8010294 <__pow5mult+0x10>
 801030a:	2101      	movs	r1, #1
 801030c:	4630      	mov	r0, r6
 801030e:	f7ff fe05 	bl	800ff1c <_Balloc>
 8010312:	4680      	mov	r8, r0
 8010314:	b140      	cbz	r0, 8010328 <__pow5mult+0xa4>
 8010316:	2301      	movs	r3, #1
 8010318:	f240 2271 	movw	r2, #625	; 0x271
 801031c:	e9c0 3204 	strd	r3, r2, [r0, #16]
 8010320:	2300      	movs	r3, #0
 8010322:	64b0      	str	r0, [r6, #72]	; 0x48
 8010324:	6003      	str	r3, [r0, #0]
 8010326:	e7bc      	b.n	80102a2 <__pow5mult+0x1e>
 8010328:	4602      	mov	r2, r0
 801032a:	4b04      	ldr	r3, [pc, #16]	; (801033c <__pow5mult+0xb8>)
 801032c:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010330:	4803      	ldr	r0, [pc, #12]	; (8010340 <__pow5mult+0xbc>)
 8010332:	f000 fadb 	bl	80108ec <__assert_func>
 8010336:	bf00      	nop
 8010338:	08013ef0 	.word	0x08013ef0
 801033c:	08013cec 	.word	0x08013cec
 8010340:	08013d80 	.word	0x08013d80

08010344 <__lshift>:
 8010344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010348:	460c      	mov	r4, r1
 801034a:	4690      	mov	r8, r2
 801034c:	4607      	mov	r7, r0
 801034e:	ea4f 1962 	mov.w	r9, r2, asr #5
 8010352:	6926      	ldr	r6, [r4, #16]
 8010354:	68a3      	ldr	r3, [r4, #8]
 8010356:	eb06 1662 	add.w	r6, r6, r2, asr #5
 801035a:	6849      	ldr	r1, [r1, #4]
 801035c:	1c75      	adds	r5, r6, #1
 801035e:	429d      	cmp	r5, r3
 8010360:	dd03      	ble.n	801036a <__lshift+0x26>
 8010362:	005b      	lsls	r3, r3, #1
 8010364:	3101      	adds	r1, #1
 8010366:	429d      	cmp	r5, r3
 8010368:	dcfb      	bgt.n	8010362 <__lshift+0x1e>
 801036a:	4638      	mov	r0, r7
 801036c:	f7ff fdd6 	bl	800ff1c <_Balloc>
 8010370:	2800      	cmp	r0, #0
 8010372:	d050      	beq.n	8010416 <__lshift+0xd2>
 8010374:	f1b9 0f00 	cmp.w	r9, #0
 8010378:	f100 0c14 	add.w	ip, r0, #20
 801037c:	dd0e      	ble.n	801039c <__lshift+0x58>
 801037e:	f109 0205 	add.w	r2, r9, #5
 8010382:	4663      	mov	r3, ip
 8010384:	2100      	movs	r1, #0
 8010386:	ea4f 0e82 	mov.w	lr, r2, lsl #2
 801038a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801038e:	f843 1b04 	str.w	r1, [r3], #4
 8010392:	4293      	cmp	r3, r2
 8010394:	d1fb      	bne.n	801038e <__lshift+0x4a>
 8010396:	f1ae 0314 	sub.w	r3, lr, #20
 801039a:	449c      	add	ip, r3
 801039c:	f104 0314 	add.w	r3, r4, #20
 80103a0:	6921      	ldr	r1, [r4, #16]
 80103a2:	f018 081f 	ands.w	r8, r8, #31
 80103a6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80103aa:	d02b      	beq.n	8010404 <__lshift+0xc0>
 80103ac:	f1c8 0920 	rsb	r9, r8, #32
 80103b0:	46e6      	mov	lr, ip
 80103b2:	f04f 0a00 	mov.w	sl, #0
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	fa02 f208 	lsl.w	r2, r2, r8
 80103bc:	ea42 020a 	orr.w	r2, r2, sl
 80103c0:	f84e 2b04 	str.w	r2, [lr], #4
 80103c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80103c8:	4299      	cmp	r1, r3
 80103ca:	fa22 fa09 	lsr.w	sl, r2, r9
 80103ce:	d8f2      	bhi.n	80103b6 <__lshift+0x72>
 80103d0:	1b0b      	subs	r3, r1, r4
 80103d2:	f104 0215 	add.w	r2, r4, #21
 80103d6:	f1ba 0f00 	cmp.w	sl, #0
 80103da:	bf18      	it	ne
 80103dc:	462e      	movne	r6, r5
 80103de:	3b15      	subs	r3, #21
 80103e0:	f023 0303 	bic.w	r3, r3, #3
 80103e4:	3304      	adds	r3, #4
 80103e6:	4291      	cmp	r1, r2
 80103e8:	bf38      	it	cc
 80103ea:	2304      	movcc	r3, #4
 80103ec:	f84c a003 	str.w	sl, [ip, r3]
 80103f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103f2:	6862      	ldr	r2, [r4, #4]
 80103f4:	6106      	str	r6, [r0, #16]
 80103f6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80103fa:	6021      	str	r1, [r4, #0]
 80103fc:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010404:	f1ac 0c04 	sub.w	ip, ip, #4
 8010408:	f853 2b04 	ldr.w	r2, [r3], #4
 801040c:	4299      	cmp	r1, r3
 801040e:	f84c 2f04 	str.w	r2, [ip, #4]!
 8010412:	d8f9      	bhi.n	8010408 <__lshift+0xc4>
 8010414:	e7ec      	b.n	80103f0 <__lshift+0xac>
 8010416:	4602      	mov	r2, r0
 8010418:	4b02      	ldr	r3, [pc, #8]	; (8010424 <__lshift+0xe0>)
 801041a:	f240 11d9 	movw	r1, #473	; 0x1d9
 801041e:	4802      	ldr	r0, [pc, #8]	; (8010428 <__lshift+0xe4>)
 8010420:	f000 fa64 	bl	80108ec <__assert_func>
 8010424:	08013cec 	.word	0x08013cec
 8010428:	08013d80 	.word	0x08013d80

0801042c <__mcmp>:
 801042c:	4684      	mov	ip, r0
 801042e:	690b      	ldr	r3, [r1, #16]
 8010430:	6900      	ldr	r0, [r0, #16]
 8010432:	1ac0      	subs	r0, r0, r3
 8010434:	d116      	bne.n	8010464 <__mcmp+0x38>
 8010436:	f10c 0c14 	add.w	ip, ip, #20
 801043a:	3114      	adds	r1, #20
 801043c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8010440:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010444:	b410      	push	{r4}
 8010446:	e001      	b.n	801044c <__mcmp+0x20>
 8010448:	4594      	cmp	ip, r2
 801044a:	d208      	bcs.n	801045e <__mcmp+0x32>
 801044c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 8010450:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010454:	428c      	cmp	r4, r1
 8010456:	d0f7      	beq.n	8010448 <__mcmp+0x1c>
 8010458:	d205      	bcs.n	8010466 <__mcmp+0x3a>
 801045a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801045e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010462:	4770      	bx	lr
 8010464:	4770      	bx	lr
 8010466:	2001      	movs	r0, #1
 8010468:	f85d 4b04 	ldr.w	r4, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop

08010470 <__mdiff>:
 8010470:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010474:	690e      	ldr	r6, [r1, #16]
 8010476:	460d      	mov	r5, r1
 8010478:	6913      	ldr	r3, [r2, #16]
 801047a:	4617      	mov	r7, r2
 801047c:	1af6      	subs	r6, r6, r3
 801047e:	2e00      	cmp	r6, #0
 8010480:	d17a      	bne.n	8010578 <__mdiff+0x108>
 8010482:	f101 0c14 	add.w	ip, r1, #20
 8010486:	3214      	adds	r2, #20
 8010488:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801048c:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8010490:	e001      	b.n	8010496 <__mdiff+0x26>
 8010492:	459c      	cmp	ip, r3
 8010494:	d273      	bcs.n	801057e <__mdiff+0x10e>
 8010496:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801049a:	f852 4d04 	ldr.w	r4, [r2, #-4]!
 801049e:	42a1      	cmp	r1, r4
 80104a0:	d0f7      	beq.n	8010492 <__mdiff+0x22>
 80104a2:	d364      	bcc.n	801056e <__mdiff+0xfe>
 80104a4:	6869      	ldr	r1, [r5, #4]
 80104a6:	f7ff fd39 	bl	800ff1c <_Balloc>
 80104aa:	2800      	cmp	r0, #0
 80104ac:	d071      	beq.n	8010592 <__mdiff+0x122>
 80104ae:	692c      	ldr	r4, [r5, #16]
 80104b0:	f105 0814 	add.w	r8, r5, #20
 80104b4:	f107 0e14 	add.w	lr, r7, #20
 80104b8:	693a      	ldr	r2, [r7, #16]
 80104ba:	f100 0914 	add.w	r9, r0, #20
 80104be:	f105 0c10 	add.w	ip, r5, #16
 80104c2:	60c6      	str	r6, [r0, #12]
 80104c4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
 80104c8:	eb08 0684 	add.w	r6, r8, r4, lsl #2
 80104cc:	f04f 0a00 	mov.w	sl, #0
 80104d0:	464d      	mov	r5, r9
 80104d2:	f85c bf04 	ldr.w	fp, [ip, #4]!
 80104d6:	f85e 1b04 	ldr.w	r1, [lr], #4
 80104da:	fa1f f38b 	uxth.w	r3, fp
 80104de:	4572      	cmp	r2, lr
 80104e0:	4453      	add	r3, sl
 80104e2:	fa1f fa81 	uxth.w	sl, r1
 80104e6:	ea4f 4111 	mov.w	r1, r1, lsr #16
 80104ea:	eba3 030a 	sub.w	r3, r3, sl
 80104ee:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
 80104f2:	eb01 4123 	add.w	r1, r1, r3, asr #16
 80104f6:	b29b      	uxth	r3, r3
 80104f8:	ea4f 4a21 	mov.w	sl, r1, asr #16
 80104fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010500:	f845 3b04 	str.w	r3, [r5], #4
 8010504:	d8e5      	bhi.n	80104d2 <__mdiff+0x62>
 8010506:	1bd1      	subs	r1, r2, r7
 8010508:	3715      	adds	r7, #21
 801050a:	42ba      	cmp	r2, r7
 801050c:	f1a1 0215 	sub.w	r2, r1, #21
 8010510:	f022 0103 	bic.w	r1, r2, #3
 8010514:	460a      	mov	r2, r1
 8010516:	f101 0104 	add.w	r1, r1, #4
 801051a:	bf3c      	itt	cc
 801051c:	2104      	movcc	r1, #4
 801051e:	2200      	movcc	r2, #0
 8010520:	4488      	add	r8, r1
 8010522:	444a      	add	r2, r9
 8010524:	4489      	add	r9, r1
 8010526:	4546      	cmp	r6, r8
 8010528:	d918      	bls.n	801055c <__mdiff+0xec>
 801052a:	464d      	mov	r5, r9
 801052c:	4642      	mov	r2, r8
 801052e:	f852 1b04 	ldr.w	r1, [r2], #4
 8010532:	b28b      	uxth	r3, r1
 8010534:	4296      	cmp	r6, r2
 8010536:	4453      	add	r3, sl
 8010538:	ea4f 4a23 	mov.w	sl, r3, asr #16
 801053c:	b29b      	uxth	r3, r3
 801053e:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
 8010542:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8010546:	ea4f 4a21 	mov.w	sl, r1, asr #16
 801054a:	f845 3b04 	str.w	r3, [r5], #4
 801054e:	d8ee      	bhi.n	801052e <__mdiff+0xbe>
 8010550:	1e72      	subs	r2, r6, #1
 8010552:	eba2 0808 	sub.w	r8, r2, r8
 8010556:	f028 0203 	bic.w	r2, r8, #3
 801055a:	444a      	add	r2, r9
 801055c:	b923      	cbnz	r3, 8010568 <__mdiff+0xf8>
 801055e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010562:	3c01      	subs	r4, #1
 8010564:	2b00      	cmp	r3, #0
 8010566:	d0fa      	beq.n	801055e <__mdiff+0xee>
 8010568:	6104      	str	r4, [r0, #16]
 801056a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801056e:	462b      	mov	r3, r5
 8010570:	2601      	movs	r6, #1
 8010572:	463d      	mov	r5, r7
 8010574:	461f      	mov	r7, r3
 8010576:	e795      	b.n	80104a4 <__mdiff+0x34>
 8010578:	dbf9      	blt.n	801056e <__mdiff+0xfe>
 801057a:	2600      	movs	r6, #0
 801057c:	e792      	b.n	80104a4 <__mdiff+0x34>
 801057e:	2100      	movs	r1, #0
 8010580:	f7ff fccc 	bl	800ff1c <_Balloc>
 8010584:	b160      	cbz	r0, 80105a0 <__mdiff+0x130>
 8010586:	2201      	movs	r2, #1
 8010588:	2300      	movs	r3, #0
 801058a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801058e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010592:	4602      	mov	r2, r0
 8010594:	4b06      	ldr	r3, [pc, #24]	; (80105b0 <__mdiff+0x140>)
 8010596:	f44f 7110 	mov.w	r1, #576	; 0x240
 801059a:	4806      	ldr	r0, [pc, #24]	; (80105b4 <__mdiff+0x144>)
 801059c:	f000 f9a6 	bl	80108ec <__assert_func>
 80105a0:	4602      	mov	r2, r0
 80105a2:	4b03      	ldr	r3, [pc, #12]	; (80105b0 <__mdiff+0x140>)
 80105a4:	f240 2132 	movw	r1, #562	; 0x232
 80105a8:	4802      	ldr	r0, [pc, #8]	; (80105b4 <__mdiff+0x144>)
 80105aa:	f000 f99f 	bl	80108ec <__assert_func>
 80105ae:	bf00      	nop
 80105b0:	08013cec 	.word	0x08013cec
 80105b4:	08013d80 	.word	0x08013d80

080105b8 <__d2b>:
 80105b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105bc:	4688      	mov	r8, r1
 80105be:	b083      	sub	sp, #12
 80105c0:	2101      	movs	r1, #1
 80105c2:	4615      	mov	r5, r2
 80105c4:	ec57 6b10 	vmov	r6, r7, d0
 80105c8:	f7ff fca8 	bl	800ff1c <_Balloc>
 80105cc:	4604      	mov	r4, r0
 80105ce:	2800      	cmp	r0, #0
 80105d0:	d04f      	beq.n	8010672 <__d2b+0xba>
 80105d2:	f3c7 590a 	ubfx	r9, r7, #20, #11
 80105d6:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80105da:	f1b9 0f00 	cmp.w	r9, #0
 80105de:	d001      	beq.n	80105e4 <__d2b+0x2c>
 80105e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105e4:	2e00      	cmp	r6, #0
 80105e6:	9301      	str	r3, [sp, #4]
 80105e8:	d024      	beq.n	8010634 <__d2b+0x7c>
 80105ea:	4668      	mov	r0, sp
 80105ec:	9600      	str	r6, [sp, #0]
 80105ee:	f7ff fd3b 	bl	8010068 <__lo0bits>
 80105f2:	2800      	cmp	r0, #0
 80105f4:	d039      	beq.n	801066a <__d2b+0xb2>
 80105f6:	9b01      	ldr	r3, [sp, #4]
 80105f8:	f1c0 0220 	rsb	r2, r0, #32
 80105fc:	9900      	ldr	r1, [sp, #0]
 80105fe:	fa03 f202 	lsl.w	r2, r3, r2
 8010602:	40c3      	lsrs	r3, r0
 8010604:	430a      	orrs	r2, r1
 8010606:	9301      	str	r3, [sp, #4]
 8010608:	6162      	str	r2, [r4, #20]
 801060a:	2b00      	cmp	r3, #0
 801060c:	61a3      	str	r3, [r4, #24]
 801060e:	bf14      	ite	ne
 8010610:	2202      	movne	r2, #2
 8010612:	2201      	moveq	r2, #1
 8010614:	6122      	str	r2, [r4, #16]
 8010616:	f1b9 0f00 	cmp.w	r9, #0
 801061a:	d016      	beq.n	801064a <__d2b+0x92>
 801061c:	f2a9 4333 	subw	r3, r9, #1075	; 0x433
 8010620:	4403      	add	r3, r0
 8010622:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010626:	f8c8 3000 	str.w	r3, [r8]
 801062a:	6028      	str	r0, [r5, #0]
 801062c:	4620      	mov	r0, r4
 801062e:	b003      	add	sp, #12
 8010630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010634:	a801      	add	r0, sp, #4
 8010636:	f7ff fd17 	bl	8010068 <__lo0bits>
 801063a:	2201      	movs	r2, #1
 801063c:	9b01      	ldr	r3, [sp, #4]
 801063e:	3020      	adds	r0, #32
 8010640:	6122      	str	r2, [r4, #16]
 8010642:	6163      	str	r3, [r4, #20]
 8010644:	f1b9 0f00 	cmp.w	r9, #0
 8010648:	d1e8      	bne.n	801061c <__d2b+0x64>
 801064a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801064e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010652:	f8c8 0000 	str.w	r0, [r8]
 8010656:	6918      	ldr	r0, [r3, #16]
 8010658:	f7ff fce4 	bl	8010024 <__hi0bits>
 801065c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010660:	6028      	str	r0, [r5, #0]
 8010662:	4620      	mov	r0, r4
 8010664:	b003      	add	sp, #12
 8010666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801066a:	9b00      	ldr	r3, [sp, #0]
 801066c:	6163      	str	r3, [r4, #20]
 801066e:	9b01      	ldr	r3, [sp, #4]
 8010670:	e7cb      	b.n	801060a <__d2b+0x52>
 8010672:	4602      	mov	r2, r0
 8010674:	4b02      	ldr	r3, [pc, #8]	; (8010680 <__d2b+0xc8>)
 8010676:	f240 310a 	movw	r1, #778	; 0x30a
 801067a:	4802      	ldr	r0, [pc, #8]	; (8010684 <__d2b+0xcc>)
 801067c:	f000 f936 	bl	80108ec <__assert_func>
 8010680:	08013cec 	.word	0x08013cec
 8010684:	08013d80 	.word	0x08013d80

08010688 <frexp>:
 8010688:	b538      	push	{r3, r4, r5, lr}
 801068a:	ec53 2b10 	vmov	r2, r3, d0
 801068e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010692:	4d15      	ldr	r5, [pc, #84]	; (80106e8 <frexp+0x60>)
 8010694:	4604      	mov	r4, r0
 8010696:	2000      	movs	r0, #0
 8010698:	42a9      	cmp	r1, r5
 801069a:	6020      	str	r0, [r4, #0]
 801069c:	dc20      	bgt.n	80106e0 <frexp+0x58>
 801069e:	ee10 5a10 	vmov	r5, s0
 80106a2:	430d      	orrs	r5, r1
 80106a4:	d01c      	beq.n	80106e0 <frexp+0x58>
 80106a6:	4d11      	ldr	r5, [pc, #68]	; (80106ec <frexp+0x64>)
 80106a8:	469c      	mov	ip, r3
 80106aa:	401d      	ands	r5, r3
 80106ac:	b965      	cbnz	r5, 80106c8 <frexp+0x40>
 80106ae:	4619      	mov	r1, r3
 80106b0:	2200      	movs	r2, #0
 80106b2:	ee10 0a10 	vmov	r0, s0
 80106b6:	4b0e      	ldr	r3, [pc, #56]	; (80106f0 <frexp+0x68>)
 80106b8:	f7ef ffa6 	bl	8000608 <__aeabi_dmul>
 80106bc:	4602      	mov	r2, r0
 80106be:	468c      	mov	ip, r1
 80106c0:	f06f 0035 	mvn.w	r0, #53	; 0x35
 80106c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80106c8:	1509      	asrs	r1, r1, #20
 80106ca:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 80106ce:	4401      	add	r1, r0
 80106d0:	6021      	str	r1, [r4, #0]
 80106d2:	4908      	ldr	r1, [pc, #32]	; (80106f4 <frexp+0x6c>)
 80106d4:	ea0c 0101 	and.w	r1, ip, r1
 80106d8:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 80106dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80106e0:	ec43 2b10 	vmov	d0, r2, r3
 80106e4:	bd38      	pop	{r3, r4, r5, pc}
 80106e6:	bf00      	nop
 80106e8:	7fefffff 	.word	0x7fefffff
 80106ec:	7ff00000 	.word	0x7ff00000
 80106f0:	43500000 	.word	0x43500000
 80106f4:	800fffff 	.word	0x800fffff

080106f8 <strncpy>:
 80106f8:	b530      	push	{r4, r5, lr}
 80106fa:	ea40 0401 	orr.w	r4, r0, r1
 80106fe:	07a3      	lsls	r3, r4, #30
 8010700:	d101      	bne.n	8010706 <strncpy+0xe>
 8010702:	2a03      	cmp	r2, #3
 8010704:	d80f      	bhi.n	8010726 <strncpy+0x2e>
 8010706:	4684      	mov	ip, r0
 8010708:	f101 3eff 	add.w	lr, r1, #4294967295	; 0xffffffff
 801070c:	e007      	b.n	801071e <strncpy+0x26>
 801070e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
 8010712:	1e54      	subs	r4, r2, #1
 8010714:	f803 1b01 	strb.w	r1, [r3], #1
 8010718:	b1c1      	cbz	r1, 801074c <strncpy+0x54>
 801071a:	4622      	mov	r2, r4
 801071c:	469c      	mov	ip, r3
 801071e:	4663      	mov	r3, ip
 8010720:	2a00      	cmp	r2, #0
 8010722:	d1f4      	bne.n	801070e <strncpy+0x16>
 8010724:	bd30      	pop	{r4, r5, pc}
 8010726:	460b      	mov	r3, r1
 8010728:	4684      	mov	ip, r0
 801072a:	4619      	mov	r1, r3
 801072c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010730:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
 8010734:	ea24 0405 	bic.w	r4, r4, r5
 8010738:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
 801073c:	d1e4      	bne.n	8010708 <strncpy+0x10>
 801073e:	3a04      	subs	r2, #4
 8010740:	4619      	mov	r1, r3
 8010742:	f84c 5b04 	str.w	r5, [ip], #4
 8010746:	2a03      	cmp	r2, #3
 8010748:	d8ef      	bhi.n	801072a <strncpy+0x32>
 801074a:	e7dd      	b.n	8010708 <strncpy+0x10>
 801074c:	2c00      	cmp	r4, #0
 801074e:	d0e9      	beq.n	8010724 <strncpy+0x2c>
 8010750:	4462      	add	r2, ip
 8010752:	f803 1b01 	strb.w	r1, [r3], #1
 8010756:	4293      	cmp	r3, r2
 8010758:	d1fb      	bne.n	8010752 <strncpy+0x5a>
 801075a:	bd30      	pop	{r4, r5, pc}

0801075c <__ssprint_r>:
 801075c:	6893      	ldr	r3, [r2, #8]
 801075e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010762:	4691      	mov	r9, r2
 8010764:	b083      	sub	sp, #12
 8010766:	2b00      	cmp	r3, #0
 8010768:	d071      	beq.n	801084e <__ssprint_r+0xf2>
 801076a:	6817      	ldr	r7, [r2, #0]
 801076c:	4680      	mov	r8, r0
 801076e:	460c      	mov	r4, r1
 8010770:	6808      	ldr	r0, [r1, #0]
 8010772:	688d      	ldr	r5, [r1, #8]
 8010774:	3708      	adds	r7, #8
 8010776:	e047      	b.n	8010808 <__ssprint_r+0xac>
 8010778:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
 801077c:	f41c 6f90 	tst.w	ip, #1152	; 0x480
 8010780:	d030      	beq.n	80107e4 <__ssprint_r+0x88>
 8010782:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
 8010786:	eb13 0343 	adds.w	r3, r3, r3, lsl #1
 801078a:	eba0 0501 	sub.w	r5, r0, r1
 801078e:	bf48      	it	mi
 8010790:	3301      	addmi	r3, #1
 8010792:	19aa      	adds	r2, r5, r6
 8010794:	ea4f 0a63 	mov.w	sl, r3, asr #1
 8010798:	4613      	mov	r3, r2
 801079a:	3301      	adds	r3, #1
 801079c:	4652      	mov	r2, sl
 801079e:	4553      	cmp	r3, sl
 80107a0:	d901      	bls.n	80107a6 <__ssprint_r+0x4a>
 80107a2:	469a      	mov	sl, r3
 80107a4:	461a      	mov	r2, r3
 80107a6:	f41c 6f80 	tst.w	ip, #1024	; 0x400
 80107aa:	d037      	beq.n	801081c <__ssprint_r+0xc0>
 80107ac:	4611      	mov	r1, r2
 80107ae:	4640      	mov	r0, r8
 80107b0:	f7fc f870 	bl	800c894 <_malloc_r>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	d03b      	beq.n	8010830 <__ssprint_r+0xd4>
 80107b8:	462a      	mov	r2, r5
 80107ba:	6921      	ldr	r1, [r4, #16]
 80107bc:	9001      	str	r0, [sp, #4]
 80107be:	f7f0 fc1b 	bl	8000ff8 <memcpy>
 80107c2:	89a2      	ldrh	r2, [r4, #12]
 80107c4:	9b01      	ldr	r3, [sp, #4]
 80107c6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80107ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80107ce:	81a2      	strh	r2, [r4, #12]
 80107d0:	1958      	adds	r0, r3, r5
 80107d2:	ebaa 0505 	sub.w	r5, sl, r5
 80107d6:	f8c4 a014 	str.w	sl, [r4, #20]
 80107da:	46b2      	mov	sl, r6
 80107dc:	60a5      	str	r5, [r4, #8]
 80107de:	4635      	mov	r5, r6
 80107e0:	6123      	str	r3, [r4, #16]
 80107e2:	6020      	str	r0, [r4, #0]
 80107e4:	4659      	mov	r1, fp
 80107e6:	4652      	mov	r2, sl
 80107e8:	f7fc fb0e 	bl	800ce08 <memmove>
 80107ec:	68a0      	ldr	r0, [r4, #8]
 80107ee:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80107f2:	6823      	ldr	r3, [r4, #0]
 80107f4:	1b45      	subs	r5, r0, r5
 80107f6:	1b8e      	subs	r6, r1, r6
 80107f8:	eb03 000a 	add.w	r0, r3, sl
 80107fc:	60a5      	str	r5, [r4, #8]
 80107fe:	6020      	str	r0, [r4, #0]
 8010800:	f8c9 6008 	str.w	r6, [r9, #8]
 8010804:	b31e      	cbz	r6, 801084e <__ssprint_r+0xf2>
 8010806:	3708      	adds	r7, #8
 8010808:	e957 b602 	ldrd	fp, r6, [r7, #-8]
 801080c:	2e00      	cmp	r6, #0
 801080e:	d0fa      	beq.n	8010806 <__ssprint_r+0xaa>
 8010810:	42b5      	cmp	r5, r6
 8010812:	46aa      	mov	sl, r5
 8010814:	d9b0      	bls.n	8010778 <__ssprint_r+0x1c>
 8010816:	4635      	mov	r5, r6
 8010818:	46b2      	mov	sl, r6
 801081a:	e7e3      	b.n	80107e4 <__ssprint_r+0x88>
 801081c:	4640      	mov	r0, r8
 801081e:	f000 f8ef 	bl	8010a00 <_realloc_r>
 8010822:	4603      	mov	r3, r0
 8010824:	2800      	cmp	r0, #0
 8010826:	d1d3      	bne.n	80107d0 <__ssprint_r+0x74>
 8010828:	6921      	ldr	r1, [r4, #16]
 801082a:	4640      	mov	r0, r8
 801082c:	f7ff fa24 	bl	800fc78 <_free_r>
 8010830:	230c      	movs	r3, #12
 8010832:	2200      	movs	r2, #0
 8010834:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010838:	f8c8 3000 	str.w	r3, [r8]
 801083c:	89a3      	ldrh	r3, [r4, #12]
 801083e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010842:	81a3      	strh	r3, [r4, #12]
 8010844:	e9c9 2201 	strd	r2, r2, [r9, #4]
 8010848:	b003      	add	sp, #12
 801084a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801084e:	2300      	movs	r3, #0
 8010850:	4618      	mov	r0, r3
 8010852:	f8c9 3004 	str.w	r3, [r9, #4]
 8010856:	b003      	add	sp, #12
 8010858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801085c <__register_exitproc>:
 801085c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010860:	f8df a084 	ldr.w	sl, [pc, #132]	; 80108e8 <__register_exitproc+0x8c>
 8010864:	4606      	mov	r6, r0
 8010866:	4698      	mov	r8, r3
 8010868:	460f      	mov	r7, r1
 801086a:	f8da 0000 	ldr.w	r0, [sl]
 801086e:	4691      	mov	r9, r2
 8010870:	f7ff fb10 	bl	800fe94 <__retarget_lock_acquire_recursive>
 8010874:	4b1b      	ldr	r3, [pc, #108]	; (80108e4 <__register_exitproc+0x88>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 801087c:	b334      	cbz	r4, 80108cc <__register_exitproc+0x70>
 801087e:	6865      	ldr	r5, [r4, #4]
 8010880:	2d1f      	cmp	r5, #31
 8010882:	dc28      	bgt.n	80108d6 <__register_exitproc+0x7a>
 8010884:	b95e      	cbnz	r6, 801089e <__register_exitproc+0x42>
 8010886:	1c6b      	adds	r3, r5, #1
 8010888:	3502      	adds	r5, #2
 801088a:	f8da 0000 	ldr.w	r0, [sl]
 801088e:	6063      	str	r3, [r4, #4]
 8010890:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8010894:	f7ff fb00 	bl	800fe98 <__retarget_lock_release_recursive>
 8010898:	2000      	movs	r0, #0
 801089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801089e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 80108a2:	2301      	movs	r3, #1
 80108a4:	2e02      	cmp	r6, #2
 80108a6:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 80108aa:	fa03 f305 	lsl.w	r3, r3, r5
 80108ae:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 80108b2:	ea42 0203 	orr.w	r2, r2, r3
 80108b6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 80108ba:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 80108be:	d1e2      	bne.n	8010886 <__register_exitproc+0x2a>
 80108c0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 80108c4:	4313      	orrs	r3, r2
 80108c6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 80108ca:	e7dc      	b.n	8010886 <__register_exitproc+0x2a>
 80108cc:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 80108d0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 80108d4:	e7d3      	b.n	801087e <__register_exitproc+0x22>
 80108d6:	f8da 0000 	ldr.w	r0, [sl]
 80108da:	f7ff fadd 	bl	800fe98 <__retarget_lock_release_recursive>
 80108de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80108e2:	e7da      	b.n	801089a <__register_exitproc+0x3e>
 80108e4:	08013c78 	.word	0x08013c78
 80108e8:	20000a28 	.word	0x20000a28

080108ec <__assert_func>:
 80108ec:	4d0a      	ldr	r5, [pc, #40]	; (8010918 <__assert_func+0x2c>)
 80108ee:	4614      	mov	r4, r2
 80108f0:	461a      	mov	r2, r3
 80108f2:	4603      	mov	r3, r0
 80108f4:	682e      	ldr	r6, [r5, #0]
 80108f6:	460d      	mov	r5, r1
 80108f8:	b500      	push	{lr}
 80108fa:	68f0      	ldr	r0, [r6, #12]
 80108fc:	b085      	sub	sp, #20
 80108fe:	b144      	cbz	r4, 8010912 <__assert_func+0x26>
 8010900:	4906      	ldr	r1, [pc, #24]	; (801091c <__assert_func+0x30>)
 8010902:	9500      	str	r5, [sp, #0]
 8010904:	e9cd 1401 	strd	r1, r4, [sp, #4]
 8010908:	4905      	ldr	r1, [pc, #20]	; (8010920 <__assert_func+0x34>)
 801090a:	f000 f849 	bl	80109a0 <fiprintf>
 801090e:	f001 fa2b 	bl	8011d68 <abort>
 8010912:	4904      	ldr	r1, [pc, #16]	; (8010924 <__assert_func+0x38>)
 8010914:	460c      	mov	r4, r1
 8010916:	e7f4      	b.n	8010902 <__assert_func+0x16>
 8010918:	200001ec 	.word	0x200001ec
 801091c:	08013efc 	.word	0x08013efc
 8010920:	08013f0c 	.word	0x08013f0c
 8010924:	08013f08 	.word	0x08013f08

08010928 <_calloc_r>:
 8010928:	b538      	push	{r3, r4, r5, lr}
 801092a:	fba1 1402 	umull	r1, r4, r1, r2
 801092e:	bb5c      	cbnz	r4, 8010988 <_calloc_r+0x60>
 8010930:	f7fb ffb0 	bl	800c894 <_malloc_r>
 8010934:	4605      	mov	r5, r0
 8010936:	b1c0      	cbz	r0, 801096a <_calloc_r+0x42>
 8010938:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801093c:	f022 0203 	bic.w	r2, r2, #3
 8010940:	3a04      	subs	r2, #4
 8010942:	2a24      	cmp	r2, #36	; 0x24
 8010944:	d813      	bhi.n	801096e <_calloc_r+0x46>
 8010946:	2a13      	cmp	r2, #19
 8010948:	d90a      	bls.n	8010960 <_calloc_r+0x38>
 801094a:	2a1b      	cmp	r2, #27
 801094c:	e9c0 4400 	strd	r4, r4, [r0]
 8010950:	d912      	bls.n	8010978 <_calloc_r+0x50>
 8010952:	2a24      	cmp	r2, #36	; 0x24
 8010954:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8010958:	d011      	beq.n	801097e <_calloc_r+0x56>
 801095a:	f100 0210 	add.w	r2, r0, #16
 801095e:	e000      	b.n	8010962 <_calloc_r+0x3a>
 8010960:	4602      	mov	r2, r0
 8010962:	2300      	movs	r3, #0
 8010964:	e9c2 3300 	strd	r3, r3, [r2]
 8010968:	6093      	str	r3, [r2, #8]
 801096a:	4628      	mov	r0, r5
 801096c:	bd38      	pop	{r3, r4, r5, pc}
 801096e:	4621      	mov	r1, r4
 8010970:	f7fc fac6 	bl	800cf00 <memset>
 8010974:	4628      	mov	r0, r5
 8010976:	bd38      	pop	{r3, r4, r5, pc}
 8010978:	f100 0208 	add.w	r2, r0, #8
 801097c:	e7f1      	b.n	8010962 <_calloc_r+0x3a>
 801097e:	f100 0218 	add.w	r2, r0, #24
 8010982:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8010986:	e7ec      	b.n	8010962 <_calloc_r+0x3a>
 8010988:	f000 f804 	bl	8010994 <__errno>
 801098c:	230c      	movs	r3, #12
 801098e:	2500      	movs	r5, #0
 8010990:	6003      	str	r3, [r0, #0]
 8010992:	e7ea      	b.n	801096a <_calloc_r+0x42>

08010994 <__errno>:
 8010994:	4b01      	ldr	r3, [pc, #4]	; (801099c <__errno+0x8>)
 8010996:	6818      	ldr	r0, [r3, #0]
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	200001ec 	.word	0x200001ec

080109a0 <fiprintf>:
 80109a0:	b40e      	push	{r1, r2, r3}
 80109a2:	b510      	push	{r4, lr}
 80109a4:	b083      	sub	sp, #12
 80109a6:	4c07      	ldr	r4, [pc, #28]	; (80109c4 <fiprintf+0x24>)
 80109a8:	4601      	mov	r1, r0
 80109aa:	ab05      	add	r3, sp, #20
 80109ac:	6820      	ldr	r0, [r4, #0]
 80109ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80109b2:	9301      	str	r3, [sp, #4]
 80109b4:	f000 fa52 	bl	8010e5c <_vfiprintf_r>
 80109b8:	b003      	add	sp, #12
 80109ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109be:	b003      	add	sp, #12
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	200001ec 	.word	0x200001ec

080109c8 <__locale_mb_cur_max>:
 80109c8:	4b01      	ldr	r3, [pc, #4]	; (80109d0 <__locale_mb_cur_max+0x8>)
 80109ca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80109ce:	4770      	bx	lr
 80109d0:	20000a2c 	.word	0x20000a2c

080109d4 <__ascii_mbtowc>:
 80109d4:	b082      	sub	sp, #8
 80109d6:	b149      	cbz	r1, 80109ec <__ascii_mbtowc+0x18>
 80109d8:	b15a      	cbz	r2, 80109f2 <__ascii_mbtowc+0x1e>
 80109da:	b16b      	cbz	r3, 80109f8 <__ascii_mbtowc+0x24>
 80109dc:	7813      	ldrb	r3, [r2, #0]
 80109de:	600b      	str	r3, [r1, #0]
 80109e0:	7812      	ldrb	r2, [r2, #0]
 80109e2:	1e10      	subs	r0, r2, #0
 80109e4:	bf18      	it	ne
 80109e6:	2001      	movne	r0, #1
 80109e8:	b002      	add	sp, #8
 80109ea:	4770      	bx	lr
 80109ec:	a901      	add	r1, sp, #4
 80109ee:	2a00      	cmp	r2, #0
 80109f0:	d1f3      	bne.n	80109da <__ascii_mbtowc+0x6>
 80109f2:	4610      	mov	r0, r2
 80109f4:	b002      	add	sp, #8
 80109f6:	4770      	bx	lr
 80109f8:	f06f 0001 	mvn.w	r0, #1
 80109fc:	e7f4      	b.n	80109e8 <__ascii_mbtowc+0x14>
 80109fe:	bf00      	nop

08010a00 <_realloc_r>:
 8010a00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a04:	4617      	mov	r7, r2
 8010a06:	2900      	cmp	r1, #0
 8010a08:	f000 8096 	beq.w	8010b38 <_realloc_r+0x138>
 8010a0c:	460c      	mov	r4, r1
 8010a0e:	f107 060b 	add.w	r6, r7, #11
 8010a12:	4680      	mov	r8, r0
 8010a14:	f7fc fac6 	bl	800cfa4 <__malloc_lock>
 8010a18:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8010a1c:	2e16      	cmp	r6, #22
 8010a1e:	f1a4 0908 	sub.w	r9, r4, #8
 8010a22:	f021 0503 	bic.w	r5, r1, #3
 8010a26:	d85c      	bhi.n	8010ae2 <_realloc_r+0xe2>
 8010a28:	2210      	movs	r2, #16
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	4616      	mov	r6, r2
 8010a2e:	42be      	cmp	r6, r7
 8010a30:	f0c0 809d 	bcc.w	8010b6e <_realloc_r+0x16e>
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	f040 809a 	bne.w	8010b6e <_realloc_r+0x16e>
 8010a3a:	4295      	cmp	r5, r2
 8010a3c:	da5b      	bge.n	8010af6 <_realloc_r+0xf6>
 8010a3e:	4bbd      	ldr	r3, [pc, #756]	; (8010d34 <_realloc_r+0x334>)
 8010a40:	eb09 0005 	add.w	r0, r9, r5
 8010a44:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8010a48:	4584      	cmp	ip, r0
 8010a4a:	f000 8097 	beq.w	8010b7c <_realloc_r+0x17c>
 8010a4e:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8010a52:	f02c 0301 	bic.w	r3, ip, #1
 8010a56:	4403      	add	r3, r0
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	07db      	lsls	r3, r3, #31
 8010a5c:	d461      	bmi.n	8010b22 <_realloc_r+0x122>
 8010a5e:	f02c 0c03 	bic.w	ip, ip, #3
 8010a62:	eb05 030c 	add.w	r3, r5, ip
 8010a66:	4293      	cmp	r3, r2
 8010a68:	da40      	bge.n	8010aec <_realloc_r+0xec>
 8010a6a:	07cb      	lsls	r3, r1, #31
 8010a6c:	d410      	bmi.n	8010a90 <_realloc_r+0x90>
 8010a6e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8010a72:	eba9 0a03 	sub.w	sl, r9, r3
 8010a76:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010a7a:	f023 0103 	bic.w	r1, r3, #3
 8010a7e:	448c      	add	ip, r1
 8010a80:	44ac      	add	ip, r5
 8010a82:	4594      	cmp	ip, r2
 8010a84:	f280 80fe 	bge.w	8010c84 <_realloc_r+0x284>
 8010a88:	186b      	adds	r3, r5, r1
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	f280 80d5 	bge.w	8010c3a <_realloc_r+0x23a>
 8010a90:	4639      	mov	r1, r7
 8010a92:	4640      	mov	r0, r8
 8010a94:	f7fb fefe 	bl	800c894 <_malloc_r>
 8010a98:	4607      	mov	r7, r0
 8010a9a:	b1e0      	cbz	r0, 8010ad6 <_realloc_r+0xd6>
 8010a9c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010aa0:	f1a0 0208 	sub.w	r2, r0, #8
 8010aa4:	f023 0301 	bic.w	r3, r3, #1
 8010aa8:	444b      	add	r3, r9
 8010aaa:	4293      	cmp	r3, r2
 8010aac:	f000 80b4 	beq.w	8010c18 <_realloc_r+0x218>
 8010ab0:	1f2a      	subs	r2, r5, #4
 8010ab2:	2a24      	cmp	r2, #36	; 0x24
 8010ab4:	f200 80e2 	bhi.w	8010c7c <_realloc_r+0x27c>
 8010ab8:	2a13      	cmp	r2, #19
 8010aba:	f200 80b3 	bhi.w	8010c24 <_realloc_r+0x224>
 8010abe:	4603      	mov	r3, r0
 8010ac0:	4622      	mov	r2, r4
 8010ac2:	6811      	ldr	r1, [r2, #0]
 8010ac4:	6019      	str	r1, [r3, #0]
 8010ac6:	6851      	ldr	r1, [r2, #4]
 8010ac8:	6059      	str	r1, [r3, #4]
 8010aca:	6892      	ldr	r2, [r2, #8]
 8010acc:	609a      	str	r2, [r3, #8]
 8010ace:	4621      	mov	r1, r4
 8010ad0:	4640      	mov	r0, r8
 8010ad2:	f7ff f8d1 	bl	800fc78 <_free_r>
 8010ad6:	4640      	mov	r0, r8
 8010ad8:	f7fc fa6a 	bl	800cfb0 <__malloc_unlock>
 8010adc:	4638      	mov	r0, r7
 8010ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ae2:	f026 0607 	bic.w	r6, r6, #7
 8010ae6:	4632      	mov	r2, r6
 8010ae8:	0ff3      	lsrs	r3, r6, #31
 8010aea:	e7a0      	b.n	8010a2e <_realloc_r+0x2e>
 8010aec:	461d      	mov	r5, r3
 8010aee:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 8010af2:	60d3      	str	r3, [r2, #12]
 8010af4:	609a      	str	r2, [r3, #8]
 8010af6:	1bab      	subs	r3, r5, r6
 8010af8:	2b0f      	cmp	r3, #15
 8010afa:	d822      	bhi.n	8010b42 <_realloc_r+0x142>
 8010afc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8010b00:	f003 0301 	and.w	r3, r3, #1
 8010b04:	432b      	orrs	r3, r5
 8010b06:	444d      	add	r5, r9
 8010b08:	f8c9 3004 	str.w	r3, [r9, #4]
 8010b0c:	686b      	ldr	r3, [r5, #4]
 8010b0e:	f043 0301 	orr.w	r3, r3, #1
 8010b12:	606b      	str	r3, [r5, #4]
 8010b14:	4640      	mov	r0, r8
 8010b16:	4627      	mov	r7, r4
 8010b18:	f7fc fa4a 	bl	800cfb0 <__malloc_unlock>
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b22:	07c9      	lsls	r1, r1, #31
 8010b24:	d4b4      	bmi.n	8010a90 <_realloc_r+0x90>
 8010b26:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8010b2a:	eba9 0a03 	sub.w	sl, r9, r3
 8010b2e:	f8da 1004 	ldr.w	r1, [sl, #4]
 8010b32:	f021 0103 	bic.w	r1, r1, #3
 8010b36:	e7a7      	b.n	8010a88 <_realloc_r+0x88>
 8010b38:	4611      	mov	r1, r2
 8010b3a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3e:	f7fb bea9 	b.w	800c894 <_malloc_r>
 8010b42:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010b46:	444d      	add	r5, r9
 8010b48:	f043 0301 	orr.w	r3, r3, #1
 8010b4c:	4640      	mov	r0, r8
 8010b4e:	f001 0101 	and.w	r1, r1, #1
 8010b52:	4331      	orrs	r1, r6
 8010b54:	f8c9 1004 	str.w	r1, [r9, #4]
 8010b58:	eb09 0106 	add.w	r1, r9, r6
 8010b5c:	604b      	str	r3, [r1, #4]
 8010b5e:	3108      	adds	r1, #8
 8010b60:	686b      	ldr	r3, [r5, #4]
 8010b62:	f043 0301 	orr.w	r3, r3, #1
 8010b66:	606b      	str	r3, [r5, #4]
 8010b68:	f7ff f886 	bl	800fc78 <_free_r>
 8010b6c:	e7d2      	b.n	8010b14 <_realloc_r+0x114>
 8010b6e:	230c      	movs	r3, #12
 8010b70:	2700      	movs	r7, #0
 8010b72:	f8c8 3000 	str.w	r3, [r8]
 8010b76:	4638      	mov	r0, r7
 8010b78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b7c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8010b80:	f020 0b03 	bic.w	fp, r0, #3
 8010b84:	f106 0010 	add.w	r0, r6, #16
 8010b88:	eb05 0c0b 	add.w	ip, r5, fp
 8010b8c:	4584      	cmp	ip, r0
 8010b8e:	f280 80b3 	bge.w	8010cf8 <_realloc_r+0x2f8>
 8010b92:	07c9      	lsls	r1, r1, #31
 8010b94:	f53f af7c 	bmi.w	8010a90 <_realloc_r+0x90>
 8010b98:	f854 1c08 	ldr.w	r1, [r4, #-8]
 8010b9c:	eba9 0a01 	sub.w	sl, r9, r1
 8010ba0:	f8da 1004 	ldr.w	r1, [sl, #4]
 8010ba4:	f021 0103 	bic.w	r1, r1, #3
 8010ba8:	448b      	add	fp, r1
 8010baa:	44ab      	add	fp, r5
 8010bac:	4558      	cmp	r0, fp
 8010bae:	f73f af6b 	bgt.w	8010a88 <_realloc_r+0x88>
 8010bb2:	1f2a      	subs	r2, r5, #4
 8010bb4:	4657      	mov	r7, sl
 8010bb6:	f8da 100c 	ldr.w	r1, [sl, #12]
 8010bba:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8010bbe:	2a24      	cmp	r2, #36	; 0x24
 8010bc0:	60c1      	str	r1, [r0, #12]
 8010bc2:	6088      	str	r0, [r1, #8]
 8010bc4:	f200 80db 	bhi.w	8010d7e <_realloc_r+0x37e>
 8010bc8:	2a13      	cmp	r2, #19
 8010bca:	f240 80d6 	bls.w	8010d7a <_realloc_r+0x37a>
 8010bce:	6821      	ldr	r1, [r4, #0]
 8010bd0:	2a1b      	cmp	r2, #27
 8010bd2:	f8ca 1008 	str.w	r1, [sl, #8]
 8010bd6:	6861      	ldr	r1, [r4, #4]
 8010bd8:	f8ca 100c 	str.w	r1, [sl, #12]
 8010bdc:	f200 80e0 	bhi.w	8010da0 <_realloc_r+0x3a0>
 8010be0:	3408      	adds	r4, #8
 8010be2:	f10a 0210 	add.w	r2, sl, #16
 8010be6:	6821      	ldr	r1, [r4, #0]
 8010be8:	6011      	str	r1, [r2, #0]
 8010bea:	6861      	ldr	r1, [r4, #4]
 8010bec:	6051      	str	r1, [r2, #4]
 8010bee:	68a1      	ldr	r1, [r4, #8]
 8010bf0:	6091      	str	r1, [r2, #8]
 8010bf2:	ebab 0206 	sub.w	r2, fp, r6
 8010bf6:	eb0a 0106 	add.w	r1, sl, r6
 8010bfa:	4640      	mov	r0, r8
 8010bfc:	f042 0201 	orr.w	r2, r2, #1
 8010c00:	6099      	str	r1, [r3, #8]
 8010c02:	604a      	str	r2, [r1, #4]
 8010c04:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010c08:	f003 0301 	and.w	r3, r3, #1
 8010c0c:	431e      	orrs	r6, r3
 8010c0e:	f8ca 6004 	str.w	r6, [sl, #4]
 8010c12:	f7fc f9cd 	bl	800cfb0 <__malloc_unlock>
 8010c16:	e781      	b.n	8010b1c <_realloc_r+0x11c>
 8010c18:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010c1c:	f023 0303 	bic.w	r3, r3, #3
 8010c20:	441d      	add	r5, r3
 8010c22:	e768      	b.n	8010af6 <_realloc_r+0xf6>
 8010c24:	6823      	ldr	r3, [r4, #0]
 8010c26:	2a1b      	cmp	r2, #27
 8010c28:	6003      	str	r3, [r0, #0]
 8010c2a:	6863      	ldr	r3, [r4, #4]
 8010c2c:	6043      	str	r3, [r0, #4]
 8010c2e:	d84e      	bhi.n	8010cce <_realloc_r+0x2ce>
 8010c30:	f104 0208 	add.w	r2, r4, #8
 8010c34:	f100 0308 	add.w	r3, r0, #8
 8010c38:	e743      	b.n	8010ac2 <_realloc_r+0xc2>
 8010c3a:	1f2a      	subs	r2, r5, #4
 8010c3c:	4657      	mov	r7, sl
 8010c3e:	f8da 100c 	ldr.w	r1, [sl, #12]
 8010c42:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8010c46:	2a24      	cmp	r2, #36	; 0x24
 8010c48:	60c1      	str	r1, [r0, #12]
 8010c4a:	6088      	str	r0, [r1, #8]
 8010c4c:	d84c      	bhi.n	8010ce8 <_realloc_r+0x2e8>
 8010c4e:	2a13      	cmp	r2, #19
 8010c50:	d948      	bls.n	8010ce4 <_realloc_r+0x2e4>
 8010c52:	6821      	ldr	r1, [r4, #0]
 8010c54:	2a1b      	cmp	r2, #27
 8010c56:	f8ca 1008 	str.w	r1, [sl, #8]
 8010c5a:	6861      	ldr	r1, [r4, #4]
 8010c5c:	f8ca 100c 	str.w	r1, [sl, #12]
 8010c60:	d86a      	bhi.n	8010d38 <_realloc_r+0x338>
 8010c62:	3408      	adds	r4, #8
 8010c64:	f10a 0210 	add.w	r2, sl, #16
 8010c68:	461d      	mov	r5, r3
 8010c6a:	6823      	ldr	r3, [r4, #0]
 8010c6c:	46d1      	mov	r9, sl
 8010c6e:	6013      	str	r3, [r2, #0]
 8010c70:	6863      	ldr	r3, [r4, #4]
 8010c72:	6053      	str	r3, [r2, #4]
 8010c74:	68a3      	ldr	r3, [r4, #8]
 8010c76:	463c      	mov	r4, r7
 8010c78:	6093      	str	r3, [r2, #8]
 8010c7a:	e73c      	b.n	8010af6 <_realloc_r+0xf6>
 8010c7c:	4621      	mov	r1, r4
 8010c7e:	f7fc f8c3 	bl	800ce08 <memmove>
 8010c82:	e724      	b.n	8010ace <_realloc_r+0xce>
 8010c84:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
 8010c88:	1f2a      	subs	r2, r5, #4
 8010c8a:	4657      	mov	r7, sl
 8010c8c:	60cb      	str	r3, [r1, #12]
 8010c8e:	6099      	str	r1, [r3, #8]
 8010c90:	2a24      	cmp	r2, #36	; 0x24
 8010c92:	f8da 300c 	ldr.w	r3, [sl, #12]
 8010c96:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8010c9a:	60cb      	str	r3, [r1, #12]
 8010c9c:	6099      	str	r1, [r3, #8]
 8010c9e:	d841      	bhi.n	8010d24 <_realloc_r+0x324>
 8010ca0:	2a13      	cmp	r2, #19
 8010ca2:	d93d      	bls.n	8010d20 <_realloc_r+0x320>
 8010ca4:	6823      	ldr	r3, [r4, #0]
 8010ca6:	2a1b      	cmp	r2, #27
 8010ca8:	f8ca 3008 	str.w	r3, [sl, #8]
 8010cac:	6863      	ldr	r3, [r4, #4]
 8010cae:	f8ca 300c 	str.w	r3, [sl, #12]
 8010cb2:	d856      	bhi.n	8010d62 <_realloc_r+0x362>
 8010cb4:	3408      	adds	r4, #8
 8010cb6:	f10a 0310 	add.w	r3, sl, #16
 8010cba:	6822      	ldr	r2, [r4, #0]
 8010cbc:	4665      	mov	r5, ip
 8010cbe:	46d1      	mov	r9, sl
 8010cc0:	601a      	str	r2, [r3, #0]
 8010cc2:	6862      	ldr	r2, [r4, #4]
 8010cc4:	605a      	str	r2, [r3, #4]
 8010cc6:	68a2      	ldr	r2, [r4, #8]
 8010cc8:	463c      	mov	r4, r7
 8010cca:	609a      	str	r2, [r3, #8]
 8010ccc:	e713      	b.n	8010af6 <_realloc_r+0xf6>
 8010cce:	68a3      	ldr	r3, [r4, #8]
 8010cd0:	2a24      	cmp	r2, #36	; 0x24
 8010cd2:	6083      	str	r3, [r0, #8]
 8010cd4:	68e3      	ldr	r3, [r4, #12]
 8010cd6:	60c3      	str	r3, [r0, #12]
 8010cd8:	d03a      	beq.n	8010d50 <_realloc_r+0x350>
 8010cda:	f104 0210 	add.w	r2, r4, #16
 8010cde:	f100 0310 	add.w	r3, r0, #16
 8010ce2:	e6ee      	b.n	8010ac2 <_realloc_r+0xc2>
 8010ce4:	463a      	mov	r2, r7
 8010ce6:	e7bf      	b.n	8010c68 <_realloc_r+0x268>
 8010ce8:	4621      	mov	r1, r4
 8010cea:	4638      	mov	r0, r7
 8010cec:	461d      	mov	r5, r3
 8010cee:	46d1      	mov	r9, sl
 8010cf0:	463c      	mov	r4, r7
 8010cf2:	f7fc f889 	bl	800ce08 <memmove>
 8010cf6:	e6fe      	b.n	8010af6 <_realloc_r+0xf6>
 8010cf8:	eb09 0206 	add.w	r2, r9, r6
 8010cfc:	ebac 0c06 	sub.w	ip, ip, r6
 8010d00:	4640      	mov	r0, r8
 8010d02:	4627      	mov	r7, r4
 8010d04:	609a      	str	r2, [r3, #8]
 8010d06:	f04c 0301 	orr.w	r3, ip, #1
 8010d0a:	6053      	str	r3, [r2, #4]
 8010d0c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010d10:	f003 0301 	and.w	r3, r3, #1
 8010d14:	431e      	orrs	r6, r3
 8010d16:	f844 6c04 	str.w	r6, [r4, #-4]
 8010d1a:	f7fc f949 	bl	800cfb0 <__malloc_unlock>
 8010d1e:	e6fd      	b.n	8010b1c <_realloc_r+0x11c>
 8010d20:	463b      	mov	r3, r7
 8010d22:	e7ca      	b.n	8010cba <_realloc_r+0x2ba>
 8010d24:	4621      	mov	r1, r4
 8010d26:	4638      	mov	r0, r7
 8010d28:	4665      	mov	r5, ip
 8010d2a:	46d1      	mov	r9, sl
 8010d2c:	463c      	mov	r4, r7
 8010d2e:	f7fc f86b 	bl	800ce08 <memmove>
 8010d32:	e6e0      	b.n	8010af6 <_realloc_r+0xf6>
 8010d34:	20000618 	.word	0x20000618
 8010d38:	68a1      	ldr	r1, [r4, #8]
 8010d3a:	2a24      	cmp	r2, #36	; 0x24
 8010d3c:	f8ca 1010 	str.w	r1, [sl, #16]
 8010d40:	68e1      	ldr	r1, [r4, #12]
 8010d42:	f8ca 1014 	str.w	r1, [sl, #20]
 8010d46:	d020      	beq.n	8010d8a <_realloc_r+0x38a>
 8010d48:	3410      	adds	r4, #16
 8010d4a:	f10a 0218 	add.w	r2, sl, #24
 8010d4e:	e78b      	b.n	8010c68 <_realloc_r+0x268>
 8010d50:	6923      	ldr	r3, [r4, #16]
 8010d52:	f104 0218 	add.w	r2, r4, #24
 8010d56:	6103      	str	r3, [r0, #16]
 8010d58:	6963      	ldr	r3, [r4, #20]
 8010d5a:	6143      	str	r3, [r0, #20]
 8010d5c:	f100 0318 	add.w	r3, r0, #24
 8010d60:	e6af      	b.n	8010ac2 <_realloc_r+0xc2>
 8010d62:	68a3      	ldr	r3, [r4, #8]
 8010d64:	2a24      	cmp	r2, #36	; 0x24
 8010d66:	f8ca 3010 	str.w	r3, [sl, #16]
 8010d6a:	68e3      	ldr	r3, [r4, #12]
 8010d6c:	f8ca 3014 	str.w	r3, [sl, #20]
 8010d70:	d022      	beq.n	8010db8 <_realloc_r+0x3b8>
 8010d72:	3410      	adds	r4, #16
 8010d74:	f10a 0318 	add.w	r3, sl, #24
 8010d78:	e79f      	b.n	8010cba <_realloc_r+0x2ba>
 8010d7a:	463a      	mov	r2, r7
 8010d7c:	e733      	b.n	8010be6 <_realloc_r+0x1e6>
 8010d7e:	4621      	mov	r1, r4
 8010d80:	4638      	mov	r0, r7
 8010d82:	f7fc f841 	bl	800ce08 <memmove>
 8010d86:	4b17      	ldr	r3, [pc, #92]	; (8010de4 <_realloc_r+0x3e4>)
 8010d88:	e733      	b.n	8010bf2 <_realloc_r+0x1f2>
 8010d8a:	6922      	ldr	r2, [r4, #16]
 8010d8c:	3418      	adds	r4, #24
 8010d8e:	f8ca 2018 	str.w	r2, [sl, #24]
 8010d92:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8010d96:	f8ca 201c 	str.w	r2, [sl, #28]
 8010d9a:	f10a 0220 	add.w	r2, sl, #32
 8010d9e:	e763      	b.n	8010c68 <_realloc_r+0x268>
 8010da0:	68a1      	ldr	r1, [r4, #8]
 8010da2:	2a24      	cmp	r2, #36	; 0x24
 8010da4:	f8ca 1010 	str.w	r1, [sl, #16]
 8010da8:	68e1      	ldr	r1, [r4, #12]
 8010daa:	f8ca 1014 	str.w	r1, [sl, #20]
 8010dae:	d00e      	beq.n	8010dce <_realloc_r+0x3ce>
 8010db0:	3410      	adds	r4, #16
 8010db2:	f10a 0218 	add.w	r2, sl, #24
 8010db6:	e716      	b.n	8010be6 <_realloc_r+0x1e6>
 8010db8:	6923      	ldr	r3, [r4, #16]
 8010dba:	3418      	adds	r4, #24
 8010dbc:	f8ca 3018 	str.w	r3, [sl, #24]
 8010dc0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8010dc4:	f8ca 301c 	str.w	r3, [sl, #28]
 8010dc8:	f10a 0320 	add.w	r3, sl, #32
 8010dcc:	e775      	b.n	8010cba <_realloc_r+0x2ba>
 8010dce:	6922      	ldr	r2, [r4, #16]
 8010dd0:	3418      	adds	r4, #24
 8010dd2:	f8ca 2018 	str.w	r2, [sl, #24]
 8010dd6:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8010dda:	f8ca 201c 	str.w	r2, [sl, #28]
 8010dde:	f10a 0220 	add.w	r2, sl, #32
 8010de2:	e700      	b.n	8010be6 <_realloc_r+0x1e6>
 8010de4:	20000618 	.word	0x20000618

08010de8 <__sprint_r.part.0>:
 8010de8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dec:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010dee:	4690      	mov	r8, r2
 8010df0:	049c      	lsls	r4, r3, #18
 8010df2:	d52c      	bpl.n	8010e4e <__sprint_r.part.0+0x66>
 8010df4:	6893      	ldr	r3, [r2, #8]
 8010df6:	6812      	ldr	r2, [r2, #0]
 8010df8:	b33b      	cbz	r3, 8010e4a <__sprint_r.part.0+0x62>
 8010dfa:	468b      	mov	fp, r1
 8010dfc:	4606      	mov	r6, r0
 8010dfe:	f102 0908 	add.w	r9, r2, #8
 8010e02:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
 8010e06:	ea5f 079a 	movs.w	r7, sl, lsr #2
 8010e0a:	d014      	beq.n	8010e36 <__sprint_r.part.0+0x4e>
 8010e0c:	3d04      	subs	r5, #4
 8010e0e:	2400      	movs	r4, #0
 8010e10:	e001      	b.n	8010e16 <__sprint_r.part.0+0x2e>
 8010e12:	42a7      	cmp	r7, r4
 8010e14:	d00d      	beq.n	8010e32 <__sprint_r.part.0+0x4a>
 8010e16:	465a      	mov	r2, fp
 8010e18:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	3401      	adds	r4, #1
 8010e20:	f001 f966 	bl	80120f0 <_fputwc_r>
 8010e24:	1c43      	adds	r3, r0, #1
 8010e26:	d1f4      	bne.n	8010e12 <__sprint_r.part.0+0x2a>
 8010e28:	2300      	movs	r3, #0
 8010e2a:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8010e2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e36:	f02a 0a03 	bic.w	sl, sl, #3
 8010e3a:	f109 0908 	add.w	r9, r9, #8
 8010e3e:	eba3 030a 	sub.w	r3, r3, sl
 8010e42:	f8c8 3008 	str.w	r3, [r8, #8]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d1db      	bne.n	8010e02 <__sprint_r.part.0+0x1a>
 8010e4a:	2000      	movs	r0, #0
 8010e4c:	e7ec      	b.n	8010e28 <__sprint_r.part.0+0x40>
 8010e4e:	f001 f983 	bl	8012158 <__sfvwrite_r>
 8010e52:	2300      	movs	r3, #0
 8010e54:	e9c8 3301 	strd	r3, r3, [r8, #4]
 8010e58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010e5c <_vfiprintf_r>:
 8010e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e60:	ed2d 8b04 	vpush	{d8-d9}
 8010e64:	b0bb      	sub	sp, #236	; 0xec
 8010e66:	461c      	mov	r4, r3
 8010e68:	ee08 1a90 	vmov	s17, r1
 8010e6c:	4691      	mov	r9, r2
 8010e6e:	ee08 0a10 	vmov	s16, r0
 8010e72:	9304      	str	r3, [sp, #16]
 8010e74:	b118      	cbz	r0, 8010e7e <_vfiprintf_r+0x22>
 8010e76:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f000 8285 	beq.w	8011388 <_vfiprintf_r+0x52c>
 8010e7e:	ee18 2a90 	vmov	r2, s17
 8010e82:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8010e84:	07de      	lsls	r6, r3, #31
 8010e86:	f140 8191 	bpl.w	80111ac <_vfiprintf_r+0x350>
 8010e8a:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 8010e8e:	b28a      	uxth	r2, r1
 8010e90:	0490      	lsls	r0, r2, #18
 8010e92:	d409      	bmi.n	8010ea8 <_vfiprintf_r+0x4c>
 8010e94:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
 8010e98:	ee18 1a90 	vmov	r1, s17
 8010e9c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8010e9e:	818a      	strh	r2, [r1, #12]
 8010ea0:	b292      	uxth	r2, r2
 8010ea2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010ea6:	664b      	str	r3, [r1, #100]	; 0x64
 8010ea8:	0711      	lsls	r1, r2, #28
 8010eaa:	f140 80ef 	bpl.w	801108c <_vfiprintf_r+0x230>
 8010eae:	ee18 3a90 	vmov	r3, s17
 8010eb2:	691b      	ldr	r3, [r3, #16]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	f000 80e9 	beq.w	801108c <_vfiprintf_r+0x230>
 8010eba:	f002 031a 	and.w	r3, r2, #26
 8010ebe:	2b0a      	cmp	r3, #10
 8010ec0:	f000 80f5 	beq.w	80110ae <_vfiprintf_r+0x252>
 8010ec4:	ab11      	add	r3, sp, #68	; 0x44
 8010ec6:	af11      	add	r7, sp, #68	; 0x44
 8010ec8:	ee18 ba90 	vmov	fp, s17
 8010ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8010ece:	2300      	movs	r3, #0
 8010ed0:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 8010ed4:	9307      	str	r3, [sp, #28]
 8010ed6:	9308      	str	r3, [sp, #32]
 8010ed8:	9303      	str	r3, [sp, #12]
 8010eda:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8010ede:	f899 3000 	ldrb.w	r3, [r9]
 8010ee2:	464c      	mov	r4, r9
 8010ee4:	2b25      	cmp	r3, #37	; 0x25
 8010ee6:	d019      	beq.n	8010f1c <_vfiprintf_r+0xc0>
 8010ee8:	b1c3      	cbz	r3, 8010f1c <_vfiprintf_r+0xc0>
 8010eea:	4625      	mov	r5, r4
 8010eec:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8010ef0:	b10b      	cbz	r3, 8010ef6 <_vfiprintf_r+0x9a>
 8010ef2:	2b25      	cmp	r3, #37	; 0x25
 8010ef4:	d1f9      	bne.n	8010eea <_vfiprintf_r+0x8e>
 8010ef6:	ebb4 0609 	subs.w	r6, r4, r9
 8010efa:	d00f      	beq.n	8010f1c <_vfiprintf_r+0xc0>
 8010efc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010efe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8010f00:	3301      	adds	r3, #1
 8010f02:	4432      	add	r2, r6
 8010f04:	2b07      	cmp	r3, #7
 8010f06:	930f      	str	r3, [sp, #60]	; 0x3c
 8010f08:	9210      	str	r2, [sp, #64]	; 0x40
 8010f0a:	e9c7 9600 	strd	r9, r6, [r7]
 8010f0e:	f300 812b 	bgt.w	8011168 <_vfiprintf_r+0x30c>
 8010f12:	3708      	adds	r7, #8
 8010f14:	9b03      	ldr	r3, [sp, #12]
 8010f16:	4433      	add	r3, r6
 8010f18:	9303      	str	r3, [sp, #12]
 8010f1a:	786b      	ldrb	r3, [r5, #1]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	f000 812f 	beq.w	8011180 <_vfiprintf_r+0x324>
 8010f22:	f04f 0300 	mov.w	r3, #0
 8010f26:	2200      	movs	r2, #0
 8010f28:	f104 0901 	add.w	r9, r4, #1
 8010f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010f30:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8010f34:	252b      	movs	r5, #43	; 0x2b
 8010f36:	7863      	ldrb	r3, [r4, #1]
 8010f38:	4614      	mov	r4, r2
 8010f3a:	9202      	str	r2, [sp, #8]
 8010f3c:	9100      	str	r1, [sp, #0]
 8010f3e:	f109 0901 	add.w	r9, r9, #1
 8010f42:	f1a3 0220 	sub.w	r2, r3, #32
 8010f46:	2a5a      	cmp	r2, #90	; 0x5a
 8010f48:	f200 8141 	bhi.w	80111ce <_vfiprintf_r+0x372>
 8010f4c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8010f50:	013f006a 	.word	0x013f006a
 8010f54:	029c013f 	.word	0x029c013f
 8010f58:	013f013f 	.word	0x013f013f
 8010f5c:	027b013f 	.word	0x027b013f
 8010f60:	013f013f 	.word	0x013f013f
 8010f64:	0251021f 	.word	0x0251021f
 8010f68:	022a013f 	.word	0x022a013f
 8010f6c:	013f02a6 	.word	0x013f02a6
 8010f70:	005b02a1 	.word	0x005b02a1
 8010f74:	005b005b 	.word	0x005b005b
 8010f78:	005b005b 	.word	0x005b005b
 8010f7c:	005b005b 	.word	0x005b005b
 8010f80:	005b005b 	.word	0x005b005b
 8010f84:	013f013f 	.word	0x013f013f
 8010f88:	013f013f 	.word	0x013f013f
 8010f8c:	013f013f 	.word	0x013f013f
 8010f90:	013f013f 	.word	0x013f013f
 8010f94:	020c013f 	.word	0x020c013f
 8010f98:	013f0077 	.word	0x013f0077
 8010f9c:	013f013f 	.word	0x013f013f
 8010fa0:	013f013f 	.word	0x013f013f
 8010fa4:	013f013f 	.word	0x013f013f
 8010fa8:	013f013f 	.word	0x013f013f
 8010fac:	00c9013f 	.word	0x00c9013f
 8010fb0:	013f013f 	.word	0x013f013f
 8010fb4:	01f0013f 	.word	0x01f0013f
 8010fb8:	023f013f 	.word	0x023f013f
 8010fbc:	013f013f 	.word	0x013f013f
 8010fc0:	013f04f7 	.word	0x013f04f7
 8010fc4:	013f013f 	.word	0x013f013f
 8010fc8:	013f013f 	.word	0x013f013f
 8010fcc:	013f013f 	.word	0x013f013f
 8010fd0:	013f013f 	.word	0x013f013f
 8010fd4:	020c013f 	.word	0x020c013f
 8010fd8:	013f0079 	.word	0x013f0079
 8010fdc:	013f013f 	.word	0x013f013f
 8010fe0:	00790237 	.word	0x00790237
 8010fe4:	013f0072 	.word	0x013f0072
 8010fe8:	013f022f 	.word	0x013f022f
 8010fec:	00cb0268 	.word	0x00cb0268
 8010ff0:	00720256 	.word	0x00720256
 8010ff4:	01f0013f 	.word	0x01f0013f
 8010ff8:	0517006f 	.word	0x0517006f
 8010ffc:	013f013f 	.word	0x013f013f
 8011000:	013f0519 	.word	0x013f0519
 8011004:	006f      	.short	0x006f
 8011006:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801100a:	2100      	movs	r1, #0
 801100c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8011010:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011014:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011018:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801101c:	2a09      	cmp	r2, #9
 801101e:	d9f5      	bls.n	801100c <_vfiprintf_r+0x1b0>
 8011020:	9102      	str	r1, [sp, #8]
 8011022:	e78e      	b.n	8010f42 <_vfiprintf_r+0xe6>
 8011024:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011028:	2b00      	cmp	r3, #0
 801102a:	f000 8475 	beq.w	8011918 <_vfiprintf_r+0xabc>
 801102e:	f899 3000 	ldrb.w	r3, [r9]
 8011032:	e784      	b.n	8010f3e <_vfiprintf_r+0xe2>
 8011034:	f044 0420 	orr.w	r4, r4, #32
 8011038:	f899 3000 	ldrb.w	r3, [r9]
 801103c:	e77f      	b.n	8010f3e <_vfiprintf_r+0xe2>
 801103e:	f044 0410 	orr.w	r4, r4, #16
 8011042:	06a5      	lsls	r5, r4, #26
 8011044:	9e04      	ldr	r6, [sp, #16]
 8011046:	f140 8165 	bpl.w	8011314 <_vfiprintf_r+0x4b8>
 801104a:	3607      	adds	r6, #7
 801104c:	f026 0607 	bic.w	r6, r6, #7
 8011050:	4632      	mov	r2, r6
 8011052:	6873      	ldr	r3, [r6, #4]
 8011054:	f852 6b08 	ldr.w	r6, [r2], #8
 8011058:	4698      	mov	r8, r3
 801105a:	9204      	str	r2, [sp, #16]
 801105c:	2b00      	cmp	r3, #0
 801105e:	f2c0 841b 	blt.w	8011898 <_vfiprintf_r+0xa3c>
 8011062:	9b00      	ldr	r3, [sp, #0]
 8011064:	3301      	adds	r3, #1
 8011066:	f000 83dc 	beq.w	8011822 <_vfiprintf_r+0x9c6>
 801106a:	ea56 0308 	orrs.w	r3, r6, r8
 801106e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 8011072:	f040 83d6 	bne.w	8011822 <_vfiprintf_r+0x9c6>
 8011076:	9a00      	ldr	r2, [sp, #0]
 8011078:	1e13      	subs	r3, r2, #0
 801107a:	bf18      	it	ne
 801107c:	2301      	movne	r3, #1
 801107e:	2a00      	cmp	r2, #0
 8011080:	f040 83cf 	bne.w	8011822 <_vfiprintf_r+0x9c6>
 8011084:	ad3a      	add	r5, sp, #232	; 0xe8
 8011086:	9300      	str	r3, [sp, #0]
 8011088:	9301      	str	r3, [sp, #4]
 801108a:	e060      	b.n	801114e <_vfiprintf_r+0x2f2>
 801108c:	ee18 1a90 	vmov	r1, s17
 8011090:	ee18 0a10 	vmov	r0, s16
 8011094:	ee18 5a90 	vmov	r5, s17
 8011098:	f000 fdfc 	bl	8011c94 <__swsetup_r>
 801109c:	2800      	cmp	r0, #0
 801109e:	f040 8593 	bne.w	8011bc8 <_vfiprintf_r+0xd6c>
 80110a2:	89aa      	ldrh	r2, [r5, #12]
 80110a4:	f002 031a 	and.w	r3, r2, #26
 80110a8:	2b0a      	cmp	r3, #10
 80110aa:	f47f af0b 	bne.w	8010ec4 <_vfiprintf_r+0x68>
 80110ae:	ee18 1a90 	vmov	r1, s17
 80110b2:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	f6ff af04 	blt.w	8010ec4 <_vfiprintf_r+0x68>
 80110bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80110be:	07df      	lsls	r7, r3, #31
 80110c0:	d402      	bmi.n	80110c8 <_vfiprintf_r+0x26c>
 80110c2:	0596      	lsls	r6, r2, #22
 80110c4:	f140 8531 	bpl.w	8011b2a <_vfiprintf_r+0xcce>
 80110c8:	4623      	mov	r3, r4
 80110ca:	464a      	mov	r2, r9
 80110cc:	ee18 1a90 	vmov	r1, s17
 80110d0:	ee18 0a10 	vmov	r0, s16
 80110d4:	b03b      	add	sp, #236	; 0xec
 80110d6:	ecbd 8b04 	vpop	{d8-d9}
 80110da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110de:	f000 bd8b 	b.w	8011bf8 <__sbprintf>
 80110e2:	f044 0410 	orr.w	r4, r4, #16
 80110e6:	f014 0820 	ands.w	r8, r4, #32
 80110ea:	f000 8104 	beq.w	80112f6 <_vfiprintf_r+0x49a>
 80110ee:	9e04      	ldr	r6, [sp, #16]
 80110f0:	3607      	adds	r6, #7
 80110f2:	f026 0607 	bic.w	r6, r6, #7
 80110f6:	4633      	mov	r3, r6
 80110f8:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80110fc:	f853 6b08 	ldr.w	r6, [r3], #8
 8011100:	9304      	str	r3, [sp, #16]
 8011102:	f424 6a80 	bic.w	sl, r4, #1024	; 0x400
 8011106:	2300      	movs	r3, #0
 8011108:	f04f 0200 	mov.w	r2, #0
 801110c:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8011110:	9a00      	ldr	r2, [sp, #0]
 8011112:	1c51      	adds	r1, r2, #1
 8011114:	f000 81e5 	beq.w	80114e2 <_vfiprintf_r+0x686>
 8011118:	ea56 0108 	orrs.w	r1, r6, r8
 801111c:	f02a 0480 	bic.w	r4, sl, #128	; 0x80
 8011120:	f040 81de 	bne.w	80114e0 <_vfiprintf_r+0x684>
 8011124:	4611      	mov	r1, r2
 8011126:	3a00      	subs	r2, #0
 8011128:	bf18      	it	ne
 801112a:	2201      	movne	r2, #1
 801112c:	2900      	cmp	r1, #0
 801112e:	f040 81d7 	bne.w	80114e0 <_vfiprintf_r+0x684>
 8011132:	2b00      	cmp	r3, #0
 8011134:	f040 8371 	bne.w	801181a <_vfiprintf_r+0x9be>
 8011138:	f01a 0201 	ands.w	r2, sl, #1
 801113c:	e9cd 3200 	strd	r3, r2, [sp]
 8011140:	f000 839a 	beq.w	8011878 <_vfiprintf_r+0xa1c>
 8011144:	2330      	movs	r3, #48	; 0x30
 8011146:	f10d 05e7 	add.w	r5, sp, #231	; 0xe7
 801114a:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 801114e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8011152:	e9dd 2100 	ldrd	r2, r1, [sp]
 8011156:	428a      	cmp	r2, r1
 8011158:	bfb8      	it	lt
 801115a:	460a      	movlt	r2, r1
 801115c:	4690      	mov	r8, r2
 801115e:	2b00      	cmp	r3, #0
 8011160:	d044      	beq.n	80111ec <_vfiprintf_r+0x390>
 8011162:	f102 0801 	add.w	r8, r2, #1
 8011166:	e041      	b.n	80111ec <_vfiprintf_r+0x390>
 8011168:	2a00      	cmp	r2, #0
 801116a:	f000 8381 	beq.w	8011870 <_vfiprintf_r+0xa14>
 801116e:	aa0e      	add	r2, sp, #56	; 0x38
 8011170:	4659      	mov	r1, fp
 8011172:	ee18 0a10 	vmov	r0, s16
 8011176:	f7ff fe37 	bl	8010de8 <__sprint_r.part.0>
 801117a:	b938      	cbnz	r0, 801118c <_vfiprintf_r+0x330>
 801117c:	af11      	add	r7, sp, #68	; 0x44
 801117e:	e6c9      	b.n	8010f14 <_vfiprintf_r+0xb8>
 8011180:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011182:	2b00      	cmp	r3, #0
 8011184:	f040 8500 	bne.w	8011b88 <_vfiprintf_r+0xd2c>
 8011188:	2300      	movs	r3, #0
 801118a:	930f      	str	r3, [sp, #60]	; 0x3c
 801118c:	ee18 2a90 	vmov	r2, s17
 8011190:	6e53      	ldr	r3, [r2, #100]	; 0x64
 8011192:	07d9      	lsls	r1, r3, #31
 8011194:	f140 80a4 	bpl.w	80112e0 <_vfiprintf_r+0x484>
 8011198:	8993      	ldrh	r3, [r2, #12]
 801119a:	065b      	lsls	r3, r3, #25
 801119c:	f100 8500 	bmi.w	8011ba0 <_vfiprintf_r+0xd44>
 80111a0:	9803      	ldr	r0, [sp, #12]
 80111a2:	b03b      	add	sp, #236	; 0xec
 80111a4:	ecbd 8b04 	vpop	{d8-d9}
 80111a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ac:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
 80111b0:	ee18 3a90 	vmov	r3, s17
 80111b4:	058d      	lsls	r5, r1, #22
 80111b6:	b28a      	uxth	r2, r1
 80111b8:	f53f ae6a 	bmi.w	8010e90 <_vfiprintf_r+0x34>
 80111bc:	ee18 5a90 	vmov	r5, s17
 80111c0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80111c2:	f7fe fe67 	bl	800fe94 <__retarget_lock_acquire_recursive>
 80111c6:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
 80111ca:	b28a      	uxth	r2, r1
 80111cc:	e660      	b.n	8010e90 <_vfiprintf_r+0x34>
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d0d6      	beq.n	8011180 <_vfiprintf_r+0x324>
 80111d2:	f04f 0801 	mov.w	r8, #1
 80111d6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 80111da:	ad21      	add	r5, sp, #132	; 0x84
 80111dc:	f04f 0300 	mov.w	r3, #0
 80111e0:	f8cd 8004 	str.w	r8, [sp, #4]
 80111e4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80111e8:	2300      	movs	r3, #0
 80111ea:	9300      	str	r3, [sp, #0]
 80111ec:	f014 0302 	ands.w	r3, r4, #2
 80111f0:	bf18      	it	ne
 80111f2:	f108 0802 	addne.w	r8, r8, #2
 80111f6:	9305      	str	r3, [sp, #20]
 80111f8:	f014 0384 	ands.w	r3, r4, #132	; 0x84
 80111fc:	9306      	str	r3, [sp, #24]
 80111fe:	d105      	bne.n	801120c <_vfiprintf_r+0x3b0>
 8011200:	9b02      	ldr	r3, [sp, #8]
 8011202:	eba3 0608 	sub.w	r6, r3, r8
 8011206:	2e00      	cmp	r6, #0
 8011208:	f300 826c 	bgt.w	80116e4 <_vfiprintf_r+0x888>
 801120c:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 8011210:	1c51      	adds	r1, r2, #1
 8011212:	f89d 6033 	ldrb.w	r6, [sp, #51]	; 0x33
 8011216:	b176      	cbz	r6, 8011236 <_vfiprintf_r+0x3da>
 8011218:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 801121c:	3001      	adds	r0, #1
 801121e:	2907      	cmp	r1, #7
 8011220:	603a      	str	r2, [r7, #0]
 8011222:	f04f 0201 	mov.w	r2, #1
 8011226:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 801122a:	607a      	str	r2, [r7, #4]
 801122c:	f300 823f 	bgt.w	80116ae <_vfiprintf_r+0x852>
 8011230:	460a      	mov	r2, r1
 8011232:	3708      	adds	r7, #8
 8011234:	3101      	adds	r1, #1
 8011236:	9b05      	ldr	r3, [sp, #20]
 8011238:	b1cb      	cbz	r3, 801126e <_vfiprintf_r+0x412>
 801123a:	ab0d      	add	r3, sp, #52	; 0x34
 801123c:	3002      	adds	r0, #2
 801123e:	2907      	cmp	r1, #7
 8011240:	603b      	str	r3, [r7, #0]
 8011242:	f04f 0302 	mov.w	r3, #2
 8011246:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 801124a:	607b      	str	r3, [r7, #4]
 801124c:	f340 8246 	ble.w	80116dc <_vfiprintf_r+0x880>
 8011250:	2800      	cmp	r0, #0
 8011252:	f000 8309 	beq.w	8011868 <_vfiprintf_r+0xa0c>
 8011256:	aa0e      	add	r2, sp, #56	; 0x38
 8011258:	4659      	mov	r1, fp
 801125a:	ee18 0a10 	vmov	r0, s16
 801125e:	f7ff fdc3 	bl	8010de8 <__sprint_r.part.0>
 8011262:	2800      	cmp	r0, #0
 8011264:	d192      	bne.n	801118c <_vfiprintf_r+0x330>
 8011266:	af11      	add	r7, sp, #68	; 0x44
 8011268:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 801126c:	1c51      	adds	r1, r2, #1
 801126e:	9b06      	ldr	r3, [sp, #24]
 8011270:	2b80      	cmp	r3, #128	; 0x80
 8011272:	f000 816c 	beq.w	801154e <_vfiprintf_r+0x6f2>
 8011276:	e9dd 3600 	ldrd	r3, r6, [sp]
 801127a:	eba3 0a06 	sub.w	sl, r3, r6
 801127e:	f1ba 0f00 	cmp.w	sl, #0
 8011282:	f300 81c7 	bgt.w	8011614 <_vfiprintf_r+0x7b8>
 8011286:	9b01      	ldr	r3, [sp, #4]
 8011288:	2907      	cmp	r1, #7
 801128a:	603d      	str	r5, [r7, #0]
 801128c:	4418      	add	r0, r3
 801128e:	607b      	str	r3, [r7, #4]
 8011290:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 8011294:	f340 8122 	ble.w	80114dc <_vfiprintf_r+0x680>
 8011298:	2800      	cmp	r0, #0
 801129a:	f000 826c 	beq.w	8011776 <_vfiprintf_r+0x91a>
 801129e:	aa0e      	add	r2, sp, #56	; 0x38
 80112a0:	4659      	mov	r1, fp
 80112a2:	ee18 0a10 	vmov	r0, s16
 80112a6:	f7ff fd9f 	bl	8010de8 <__sprint_r.part.0>
 80112aa:	2800      	cmp	r0, #0
 80112ac:	f47f af6e 	bne.w	801118c <_vfiprintf_r+0x330>
 80112b0:	9810      	ldr	r0, [sp, #64]	; 0x40
 80112b2:	af11      	add	r7, sp, #68	; 0x44
 80112b4:	0764      	lsls	r4, r4, #29
 80112b6:	d505      	bpl.n	80112c4 <_vfiprintf_r+0x468>
 80112b8:	9b02      	ldr	r3, [sp, #8]
 80112ba:	eba3 0408 	sub.w	r4, r3, r8
 80112be:	2c00      	cmp	r4, #0
 80112c0:	f300 8262 	bgt.w	8011788 <_vfiprintf_r+0x92c>
 80112c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80112c8:	4542      	cmp	r2, r8
 80112ca:	bfac      	ite	ge
 80112cc:	189b      	addge	r3, r3, r2
 80112ce:	4443      	addlt	r3, r8
 80112d0:	9303      	str	r3, [sp, #12]
 80112d2:	2800      	cmp	r0, #0
 80112d4:	f040 81e1 	bne.w	801169a <_vfiprintf_r+0x83e>
 80112d8:	2300      	movs	r3, #0
 80112da:	af11      	add	r7, sp, #68	; 0x44
 80112dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80112de:	e5fe      	b.n	8010ede <_vfiprintf_r+0x82>
 80112e0:	8993      	ldrh	r3, [r2, #12]
 80112e2:	059a      	lsls	r2, r3, #22
 80112e4:	f53f af59 	bmi.w	801119a <_vfiprintf_r+0x33e>
 80112e8:	ee18 4a90 	vmov	r4, s17
 80112ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80112ee:	f7fe fdd3 	bl	800fe98 <__retarget_lock_release_recursive>
 80112f2:	89a3      	ldrh	r3, [r4, #12]
 80112f4:	e751      	b.n	801119a <_vfiprintf_r+0x33e>
 80112f6:	f014 0310 	ands.w	r3, r4, #16
 80112fa:	f040 8314 	bne.w	8011926 <_vfiprintf_r+0xaca>
 80112fe:	f014 0240 	ands.w	r2, r4, #64	; 0x40
 8011302:	f000 83d9 	beq.w	8011ab8 <_vfiprintf_r+0xc5c>
 8011306:	9a04      	ldr	r2, [sp, #16]
 8011308:	4698      	mov	r8, r3
 801130a:	f852 6b04 	ldr.w	r6, [r2], #4
 801130e:	b2b6      	uxth	r6, r6
 8011310:	9204      	str	r2, [sp, #16]
 8011312:	e6f6      	b.n	8011102 <_vfiprintf_r+0x2a6>
 8011314:	f856 3b04 	ldr.w	r3, [r6], #4
 8011318:	06e0      	lsls	r0, r4, #27
 801131a:	9604      	str	r6, [sp, #16]
 801131c:	f100 82ec 	bmi.w	80118f8 <_vfiprintf_r+0xa9c>
 8011320:	0661      	lsls	r1, r4, #25
 8011322:	f140 82e6 	bpl.w	80118f2 <_vfiprintf_r+0xa96>
 8011326:	f343 38c0 	sbfx	r8, r3, #15, #1
 801132a:	b21e      	sxth	r6, r3
 801132c:	4643      	mov	r3, r8
 801132e:	e695      	b.n	801105c <_vfiprintf_r+0x200>
 8011330:	9e04      	ldr	r6, [sp, #16]
 8011332:	f04f 0300 	mov.w	r3, #0
 8011336:	f856 5b04 	ldr.w	r5, [r6], #4
 801133a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801133e:	9b00      	ldr	r3, [sp, #0]
 8011340:	2d00      	cmp	r5, #0
 8011342:	f000 83a6 	beq.w	8011a92 <_vfiprintf_r+0xc36>
 8011346:	1c5a      	adds	r2, r3, #1
 8011348:	f000 831e 	beq.w	8011988 <_vfiprintf_r+0xb2c>
 801134c:	461a      	mov	r2, r3
 801134e:	2100      	movs	r1, #0
 8011350:	4628      	mov	r0, r5
 8011352:	f7fe fda3 	bl	800fe9c <memchr>
 8011356:	2800      	cmp	r0, #0
 8011358:	f000 8401 	beq.w	8011b5e <_vfiprintf_r+0xd02>
 801135c:	1b43      	subs	r3, r0, r5
 801135e:	9604      	str	r6, [sp, #16]
 8011360:	9301      	str	r3, [sp, #4]
 8011362:	2300      	movs	r3, #0
 8011364:	9300      	str	r3, [sp, #0]
 8011366:	e6f2      	b.n	801114e <_vfiprintf_r+0x2f2>
 8011368:	9e04      	ldr	r6, [sp, #16]
 801136a:	f04f 0300 	mov.w	r3, #0
 801136e:	f04f 0801 	mov.w	r8, #1
 8011372:	ad21      	add	r5, sp, #132	; 0x84
 8011374:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8011378:	f856 3b04 	ldr.w	r3, [r6], #4
 801137c:	f8cd 8004 	str.w	r8, [sp, #4]
 8011380:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8011384:	9604      	str	r6, [sp, #16]
 8011386:	e72f      	b.n	80111e8 <_vfiprintf_r+0x38c>
 8011388:	f000 fdce 	bl	8011f28 <__sinit>
 801138c:	e577      	b.n	8010e7e <_vfiprintf_r+0x22>
 801138e:	9b04      	ldr	r3, [sp, #16]
 8011390:	f853 2b04 	ldr.w	r2, [r3], #4
 8011394:	2a00      	cmp	r2, #0
 8011396:	9202      	str	r2, [sp, #8]
 8011398:	f280 8297 	bge.w	80118ca <_vfiprintf_r+0xa6e>
 801139c:	9a02      	ldr	r2, [sp, #8]
 801139e:	9304      	str	r3, [sp, #16]
 80113a0:	4252      	negs	r2, r2
 80113a2:	9202      	str	r2, [sp, #8]
 80113a4:	f044 0404 	orr.w	r4, r4, #4
 80113a8:	f899 3000 	ldrb.w	r3, [r9]
 80113ac:	e5c7      	b.n	8010f3e <_vfiprintf_r+0xe2>
 80113ae:	f899 3000 	ldrb.w	r3, [r9]
 80113b2:	2b6c      	cmp	r3, #108	; 0x6c
 80113b4:	f000 835d 	beq.w	8011a72 <_vfiprintf_r+0xc16>
 80113b8:	f044 0410 	orr.w	r4, r4, #16
 80113bc:	e5bf      	b.n	8010f3e <_vfiprintf_r+0xe2>
 80113be:	f899 3000 	ldrb.w	r3, [r9]
 80113c2:	2b68      	cmp	r3, #104	; 0x68
 80113c4:	f000 834d 	beq.w	8011a62 <_vfiprintf_r+0xc06>
 80113c8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80113cc:	e5b7      	b.n	8010f3e <_vfiprintf_r+0xe2>
 80113ce:	f044 0a10 	orr.w	sl, r4, #16
 80113d2:	f01a 0820 	ands.w	r8, sl, #32
 80113d6:	f000 8251 	beq.w	801187c <_vfiprintf_r+0xa20>
 80113da:	9e04      	ldr	r6, [sp, #16]
 80113dc:	2301      	movs	r3, #1
 80113de:	3607      	adds	r6, #7
 80113e0:	f026 0607 	bic.w	r6, r6, #7
 80113e4:	4632      	mov	r2, r6
 80113e6:	f8d6 8004 	ldr.w	r8, [r6, #4]
 80113ea:	f852 6b08 	ldr.w	r6, [r2], #8
 80113ee:	9204      	str	r2, [sp, #16]
 80113f0:	e68a      	b.n	8011108 <_vfiprintf_r+0x2ac>
 80113f2:	f899 3000 	ldrb.w	r3, [r9]
 80113f6:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 80113fa:	e5a0      	b.n	8010f3e <_vfiprintf_r+0xe2>
 80113fc:	9b04      	ldr	r3, [sp, #16]
 80113fe:	2230      	movs	r2, #48	; 0x30
 8011400:	f044 0a02 	orr.w	sl, r4, #2
 8011404:	f04f 0800 	mov.w	r8, #0
 8011408:	f853 6b04 	ldr.w	r6, [r3], #4
 801140c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8011410:	9304      	str	r3, [sp, #16]
 8011412:	2378      	movs	r3, #120	; 0x78
 8011414:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 8011418:	4bb9      	ldr	r3, [pc, #740]	; (8011700 <_vfiprintf_r+0x8a4>)
 801141a:	9307      	str	r3, [sp, #28]
 801141c:	2302      	movs	r3, #2
 801141e:	e673      	b.n	8011108 <_vfiprintf_r+0x2ac>
 8011420:	06a6      	lsls	r6, r4, #26
 8011422:	f100 826f 	bmi.w	8011904 <_vfiprintf_r+0xaa8>
 8011426:	06e5      	lsls	r5, r4, #27
 8011428:	f100 832b 	bmi.w	8011a82 <_vfiprintf_r+0xc26>
 801142c:	0660      	lsls	r0, r4, #25
 801142e:	f100 835c 	bmi.w	8011aea <_vfiprintf_r+0xc8e>
 8011432:	05a1      	lsls	r1, r4, #22
 8011434:	f140 8325 	bpl.w	8011a82 <_vfiprintf_r+0xc26>
 8011438:	9e04      	ldr	r6, [sp, #16]
 801143a:	9a03      	ldr	r2, [sp, #12]
 801143c:	f856 3b04 	ldr.w	r3, [r6], #4
 8011440:	701a      	strb	r2, [r3, #0]
 8011442:	9604      	str	r6, [sp, #16]
 8011444:	e54b      	b.n	8010ede <_vfiprintf_r+0x82>
 8011446:	ee18 0a10 	vmov	r0, s16
 801144a:	f7fe fd1b 	bl	800fe84 <_localeconv_r>
 801144e:	6843      	ldr	r3, [r0, #4]
 8011450:	4618      	mov	r0, r3
 8011452:	9309      	str	r3, [sp, #36]	; 0x24
 8011454:	f7fb fde6 	bl	800d024 <strlen>
 8011458:	900a      	str	r0, [sp, #40]	; 0x28
 801145a:	4606      	mov	r6, r0
 801145c:	ee18 0a10 	vmov	r0, s16
 8011460:	f7fe fd10 	bl	800fe84 <_localeconv_r>
 8011464:	6883      	ldr	r3, [r0, #8]
 8011466:	9308      	str	r3, [sp, #32]
 8011468:	2e00      	cmp	r6, #0
 801146a:	f43f ade0 	beq.w	801102e <_vfiprintf_r+0x1d2>
 801146e:	2b00      	cmp	r3, #0
 8011470:	f43f addd 	beq.w	801102e <_vfiprintf_r+0x1d2>
 8011474:	9b08      	ldr	r3, [sp, #32]
 8011476:	781b      	ldrb	r3, [r3, #0]
 8011478:	2b00      	cmp	r3, #0
 801147a:	f43f add8 	beq.w	801102e <_vfiprintf_r+0x1d2>
 801147e:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8011482:	f899 3000 	ldrb.w	r3, [r9]
 8011486:	e55a      	b.n	8010f3e <_vfiprintf_r+0xe2>
 8011488:	f044 0401 	orr.w	r4, r4, #1
 801148c:	f899 3000 	ldrb.w	r3, [r9]
 8011490:	e555      	b.n	8010f3e <_vfiprintf_r+0xe2>
 8011492:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8011496:	f899 3000 	ldrb.w	r3, [r9]
 801149a:	e550      	b.n	8010f3e <_vfiprintf_r+0xe2>
 801149c:	4649      	mov	r1, r9
 801149e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80114a2:	2b2a      	cmp	r3, #42	; 0x2a
 80114a4:	f000 8384 	beq.w	8011bb0 <_vfiprintf_r+0xd54>
 80114a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80114ac:	4689      	mov	r9, r1
 80114ae:	2a09      	cmp	r2, #9
 80114b0:	f200 8361 	bhi.w	8011b76 <_vfiprintf_r+0xd1a>
 80114b4:	2100      	movs	r1, #0
 80114b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80114ba:	f819 3b01 	ldrb.w	r3, [r9], #1
 80114be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80114c2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80114c6:	2a09      	cmp	r2, #9
 80114c8:	d9f5      	bls.n	80114b6 <_vfiprintf_r+0x65a>
 80114ca:	9100      	str	r1, [sp, #0]
 80114cc:	e539      	b.n	8010f42 <_vfiprintf_r+0xe6>
 80114ce:	9801      	ldr	r0, [sp, #4]
 80114d0:	2301      	movs	r3, #1
 80114d2:	af11      	add	r7, sp, #68	; 0x44
 80114d4:	9511      	str	r5, [sp, #68]	; 0x44
 80114d6:	9012      	str	r0, [sp, #72]	; 0x48
 80114d8:	9010      	str	r0, [sp, #64]	; 0x40
 80114da:	930f      	str	r3, [sp, #60]	; 0x3c
 80114dc:	3708      	adds	r7, #8
 80114de:	e6e9      	b.n	80112b4 <_vfiprintf_r+0x458>
 80114e0:	46a2      	mov	sl, r4
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	f000 819e 	beq.w	8011824 <_vfiprintf_r+0x9c8>
 80114e8:	2b02      	cmp	r3, #2
 80114ea:	ad3a      	add	r5, sp, #232	; 0xe8
 80114ec:	d112      	bne.n	8011514 <_vfiprintf_r+0x6b8>
 80114ee:	9a07      	ldr	r2, [sp, #28]
 80114f0:	f006 030f 	and.w	r3, r6, #15
 80114f4:	0936      	lsrs	r6, r6, #4
 80114f6:	5cd3      	ldrb	r3, [r2, r3]
 80114f8:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
 80114fc:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8011500:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011504:	ea56 0308 	orrs.w	r3, r6, r8
 8011508:	d1f2      	bne.n	80114f0 <_vfiprintf_r+0x694>
 801150a:	ab3a      	add	r3, sp, #232	; 0xe8
 801150c:	4654      	mov	r4, sl
 801150e:	1b5b      	subs	r3, r3, r5
 8011510:	9301      	str	r3, [sp, #4]
 8011512:	e61c      	b.n	801114e <_vfiprintf_r+0x2f2>
 8011514:	f006 0307 	and.w	r3, r6, #7
 8011518:	08f6      	lsrs	r6, r6, #3
 801151a:	462a      	mov	r2, r5
 801151c:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
 8011520:	3330      	adds	r3, #48	; 0x30
 8011522:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8011526:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801152a:	ea56 0108 	orrs.w	r1, r6, r8
 801152e:	d1f1      	bne.n	8011514 <_vfiprintf_r+0x6b8>
 8011530:	2b30      	cmp	r3, #48	; 0x30
 8011532:	d0ea      	beq.n	801150a <_vfiprintf_r+0x6ae>
 8011534:	f01a 0f01 	tst.w	sl, #1
 8011538:	d0e7      	beq.n	801150a <_vfiprintf_r+0x6ae>
 801153a:	2330      	movs	r3, #48	; 0x30
 801153c:	3a02      	subs	r2, #2
 801153e:	4654      	mov	r4, sl
 8011540:	f805 3c01 	strb.w	r3, [r5, #-1]
 8011544:	ab3a      	add	r3, sp, #232	; 0xe8
 8011546:	4615      	mov	r5, r2
 8011548:	1a9b      	subs	r3, r3, r2
 801154a:	9301      	str	r3, [sp, #4]
 801154c:	e5ff      	b.n	801114e <_vfiprintf_r+0x2f2>
 801154e:	9b02      	ldr	r3, [sp, #8]
 8011550:	eba3 0a08 	sub.w	sl, r3, r8
 8011554:	f1ba 0f00 	cmp.w	sl, #0
 8011558:	f77f ae8d 	ble.w	8011276 <_vfiprintf_r+0x41a>
 801155c:	f1ba 0f10 	cmp.w	sl, #16
 8011560:	f340 8323 	ble.w	8011baa <_vfiprintf_r+0xd4e>
 8011564:	465b      	mov	r3, fp
 8011566:	9405      	str	r4, [sp, #20]
 8011568:	46ab      	mov	fp, r5
 801156a:	4e66      	ldr	r6, [pc, #408]	; (8011704 <_vfiprintf_r+0x8a8>)
 801156c:	ee18 4a10 	vmov	r4, s16
 8011570:	461d      	mov	r5, r3
 8011572:	e00f      	b.n	8011594 <_vfiprintf_r+0x738>
 8011574:	4629      	mov	r1, r5
 8011576:	4620      	mov	r0, r4
 8011578:	f7ff fc36 	bl	8010de8 <__sprint_r.part.0>
 801157c:	2800      	cmp	r0, #0
 801157e:	f47f ae05 	bne.w	801118c <_vfiprintf_r+0x330>
 8011582:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 8011586:	f102 0c01 	add.w	ip, r2, #1
 801158a:	f1aa 0a10 	sub.w	sl, sl, #16
 801158e:	f1ba 0f10 	cmp.w	sl, #16
 8011592:	dd19      	ble.n	80115c8 <_vfiprintf_r+0x76c>
 8011594:	1c53      	adds	r3, r2, #1
 8011596:	3010      	adds	r0, #16
 8011598:	2110      	movs	r1, #16
 801159a:	f102 0c02 	add.w	ip, r2, #2
 801159e:	2b07      	cmp	r3, #7
 80115a0:	603e      	str	r6, [r7, #0]
 80115a2:	6079      	str	r1, [r7, #4]
 80115a4:	461a      	mov	r2, r3
 80115a6:	f107 0708 	add.w	r7, r7, #8
 80115aa:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
 80115ae:	ddec      	ble.n	801158a <_vfiprintf_r+0x72e>
 80115b0:	aa0e      	add	r2, sp, #56	; 0x38
 80115b2:	af11      	add	r7, sp, #68	; 0x44
 80115b4:	2800      	cmp	r0, #0
 80115b6:	d1dd      	bne.n	8011574 <_vfiprintf_r+0x718>
 80115b8:	f1aa 0a10 	sub.w	sl, sl, #16
 80115bc:	f04f 0c01 	mov.w	ip, #1
 80115c0:	4602      	mov	r2, r0
 80115c2:	f1ba 0f10 	cmp.w	sl, #16
 80115c6:	dce5      	bgt.n	8011594 <_vfiprintf_r+0x738>
 80115c8:	462b      	mov	r3, r5
 80115ca:	9c05      	ldr	r4, [sp, #20]
 80115cc:	465d      	mov	r5, fp
 80115ce:	469b      	mov	fp, r3
 80115d0:	4450      	add	r0, sl
 80115d2:	f1bc 0f07 	cmp.w	ip, #7
 80115d6:	603e      	str	r6, [r7, #0]
 80115d8:	f8c7 a004 	str.w	sl, [r7, #4]
 80115dc:	e9cd c00f 	strd	ip, r0, [sp, #60]	; 0x3c
 80115e0:	f340 8178 	ble.w	80118d4 <_vfiprintf_r+0xa78>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	f000 8272 	beq.w	8011ace <_vfiprintf_r+0xc72>
 80115ea:	aa0e      	add	r2, sp, #56	; 0x38
 80115ec:	4659      	mov	r1, fp
 80115ee:	ee18 0a10 	vmov	r0, s16
 80115f2:	f7ff fbf9 	bl	8010de8 <__sprint_r.part.0>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	f47f adc8 	bne.w	801118c <_vfiprintf_r+0x330>
 80115fc:	af11      	add	r7, sp, #68	; 0x44
 80115fe:	e9dd 3600 	ldrd	r3, r6, [sp]
 8011602:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 8011606:	eba3 0a06 	sub.w	sl, r3, r6
 801160a:	1c51      	adds	r1, r2, #1
 801160c:	f1ba 0f00 	cmp.w	sl, #0
 8011610:	f77f ae39 	ble.w	8011286 <_vfiprintf_r+0x42a>
 8011614:	f1ba 0f10 	cmp.w	sl, #16
 8011618:	4e3a      	ldr	r6, [pc, #232]	; (8011704 <_vfiprintf_r+0x8a8>)
 801161a:	dd32      	ble.n	8011682 <_vfiprintf_r+0x826>
 801161c:	f8cd 9000 	str.w	r9, [sp]
 8011620:	46c1      	mov	r9, r8
 8011622:	46a0      	mov	r8, r4
 8011624:	ee18 4a10 	vmov	r4, s16
 8011628:	e00d      	b.n	8011646 <_vfiprintf_r+0x7ea>
 801162a:	4620      	mov	r0, r4
 801162c:	f7ff fbdc 	bl	8010de8 <__sprint_r.part.0>
 8011630:	2800      	cmp	r0, #0
 8011632:	f47f adab 	bne.w	801118c <_vfiprintf_r+0x330>
 8011636:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 801163a:	1c51      	adds	r1, r2, #1
 801163c:	f1aa 0a10 	sub.w	sl, sl, #16
 8011640:	f1ba 0f10 	cmp.w	sl, #16
 8011644:	dd19      	ble.n	801167a <_vfiprintf_r+0x81e>
 8011646:	1c53      	adds	r3, r2, #1
 8011648:	2110      	movs	r1, #16
 801164a:	3010      	adds	r0, #16
 801164c:	603e      	str	r6, [r7, #0]
 801164e:	2b07      	cmp	r3, #7
 8011650:	6079      	str	r1, [r7, #4]
 8011652:	f102 0102 	add.w	r1, r2, #2
 8011656:	f107 0708 	add.w	r7, r7, #8
 801165a:	461a      	mov	r2, r3
 801165c:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
 8011660:	ddec      	ble.n	801163c <_vfiprintf_r+0x7e0>
 8011662:	aa0e      	add	r2, sp, #56	; 0x38
 8011664:	4659      	mov	r1, fp
 8011666:	af11      	add	r7, sp, #68	; 0x44
 8011668:	2800      	cmp	r0, #0
 801166a:	d1de      	bne.n	801162a <_vfiprintf_r+0x7ce>
 801166c:	f1aa 0a10 	sub.w	sl, sl, #16
 8011670:	2101      	movs	r1, #1
 8011672:	4602      	mov	r2, r0
 8011674:	f1ba 0f10 	cmp.w	sl, #16
 8011678:	dce5      	bgt.n	8011646 <_vfiprintf_r+0x7ea>
 801167a:	4644      	mov	r4, r8
 801167c:	46c8      	mov	r8, r9
 801167e:	f8dd 9000 	ldr.w	r9, [sp]
 8011682:	4450      	add	r0, sl
 8011684:	2907      	cmp	r1, #7
 8011686:	603e      	str	r6, [r7, #0]
 8011688:	f8c7 a004 	str.w	sl, [r7, #4]
 801168c:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 8011690:	f300 80d6 	bgt.w	8011840 <_vfiprintf_r+0x9e4>
 8011694:	3708      	adds	r7, #8
 8011696:	3101      	adds	r1, #1
 8011698:	e5f5      	b.n	8011286 <_vfiprintf_r+0x42a>
 801169a:	aa0e      	add	r2, sp, #56	; 0x38
 801169c:	4659      	mov	r1, fp
 801169e:	ee18 0a10 	vmov	r0, s16
 80116a2:	f7ff fba1 	bl	8010de8 <__sprint_r.part.0>
 80116a6:	2800      	cmp	r0, #0
 80116a8:	f43f ae16 	beq.w	80112d8 <_vfiprintf_r+0x47c>
 80116ac:	e56e      	b.n	801118c <_vfiprintf_r+0x330>
 80116ae:	2800      	cmp	r0, #0
 80116b0:	f000 80d7 	beq.w	8011862 <_vfiprintf_r+0xa06>
 80116b4:	aa0e      	add	r2, sp, #56	; 0x38
 80116b6:	4659      	mov	r1, fp
 80116b8:	ee18 0a10 	vmov	r0, s16
 80116bc:	f7ff fb94 	bl	8010de8 <__sprint_r.part.0>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	f47f ad63 	bne.w	801118c <_vfiprintf_r+0x330>
 80116c6:	af11      	add	r7, sp, #68	; 0x44
 80116c8:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 80116cc:	1c51      	adds	r1, r2, #1
 80116ce:	e5b2      	b.n	8011236 <_vfiprintf_r+0x3da>
 80116d0:	2002      	movs	r0, #2
 80116d2:	ab0d      	add	r3, sp, #52	; 0x34
 80116d4:	2101      	movs	r1, #1
 80116d6:	af11      	add	r7, sp, #68	; 0x44
 80116d8:	9012      	str	r0, [sp, #72]	; 0x48
 80116da:	9311      	str	r3, [sp, #68]	; 0x44
 80116dc:	460a      	mov	r2, r1
 80116de:	3708      	adds	r7, #8
 80116e0:	1c51      	adds	r1, r2, #1
 80116e2:	e5c4      	b.n	801126e <_vfiprintf_r+0x412>
 80116e4:	2e10      	cmp	r6, #16
 80116e6:	f340 8240 	ble.w	8011b6a <_vfiprintf_r+0xd0e>
 80116ea:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8011708 <_vfiprintf_r+0x8ac>
 80116ee:	2310      	movs	r3, #16
 80116f0:	950b      	str	r5, [sp, #44]	; 0x2c
 80116f2:	4655      	mov	r5, sl
 80116f4:	ee18 aa10 	vmov	sl, s16
 80116f8:	e9dd c00f 	ldrd	ip, r0, [sp, #60]	; 0x3c
 80116fc:	4662      	mov	r2, ip
 80116fe:	e013      	b.n	8011728 <_vfiprintf_r+0x8cc>
 8011700:	08013c88 	.word	0x08013c88
 8011704:	08013f5c 	.word	0x08013f5c
 8011708:	08013f4c 	.word	0x08013f4c
 801170c:	4650      	mov	r0, sl
 801170e:	f7ff fb6b 	bl	8010de8 <__sprint_r.part.0>
 8011712:	2800      	cmp	r0, #0
 8011714:	f47f ad3a 	bne.w	801118c <_vfiprintf_r+0x330>
 8011718:	2310      	movs	r3, #16
 801171a:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 801171e:	f102 0c01 	add.w	ip, r2, #1
 8011722:	3e10      	subs	r6, #16
 8011724:	2e10      	cmp	r6, #16
 8011726:	dd17      	ble.n	8011758 <_vfiprintf_r+0x8fc>
 8011728:	1c51      	adds	r1, r2, #1
 801172a:	3010      	adds	r0, #16
 801172c:	f102 0c02 	add.w	ip, r2, #2
 8011730:	2907      	cmp	r1, #7
 8011732:	460a      	mov	r2, r1
 8011734:	e9c7 5300 	strd	r5, r3, [r7]
 8011738:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 801173c:	f107 0708 	add.w	r7, r7, #8
 8011740:	ddef      	ble.n	8011722 <_vfiprintf_r+0x8c6>
 8011742:	aa0e      	add	r2, sp, #56	; 0x38
 8011744:	4659      	mov	r1, fp
 8011746:	af11      	add	r7, sp, #68	; 0x44
 8011748:	2800      	cmp	r0, #0
 801174a:	d1df      	bne.n	801170c <_vfiprintf_r+0x8b0>
 801174c:	3e10      	subs	r6, #16
 801174e:	4602      	mov	r2, r0
 8011750:	f04f 0c01 	mov.w	ip, #1
 8011754:	2e10      	cmp	r6, #16
 8011756:	dce7      	bgt.n	8011728 <_vfiprintf_r+0x8cc>
 8011758:	46aa      	mov	sl, r5
 801175a:	4662      	mov	r2, ip
 801175c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801175e:	4430      	add	r0, r6
 8011760:	2a07      	cmp	r2, #7
 8011762:	f8c7 a000 	str.w	sl, [r7]
 8011766:	607e      	str	r6, [r7, #4]
 8011768:	e9cd 200f 	strd	r2, r0, [sp, #60]	; 0x3c
 801176c:	f300 809d 	bgt.w	80118aa <_vfiprintf_r+0xa4e>
 8011770:	3708      	adds	r7, #8
 8011772:	1c51      	adds	r1, r2, #1
 8011774:	e54d      	b.n	8011212 <_vfiprintf_r+0x3b6>
 8011776:	0765      	lsls	r5, r4, #29
 8011778:	900f      	str	r0, [sp, #60]	; 0x3c
 801177a:	d546      	bpl.n	801180a <_vfiprintf_r+0x9ae>
 801177c:	9b02      	ldr	r3, [sp, #8]
 801177e:	eba3 0408 	sub.w	r4, r3, r8
 8011782:	2c00      	cmp	r4, #0
 8011784:	dd41      	ble.n	801180a <_vfiprintf_r+0x9ae>
 8011786:	af11      	add	r7, sp, #68	; 0x44
 8011788:	2c10      	cmp	r4, #16
 801178a:	f340 81f8 	ble.w	8011b7e <_vfiprintf_r+0xd22>
 801178e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011790:	2510      	movs	r5, #16
 8011792:	f8df a460 	ldr.w	sl, [pc, #1120]	; 8011bf4 <_vfiprintf_r+0xd98>
 8011796:	ee18 6a10 	vmov	r6, s16
 801179a:	e00d      	b.n	80117b8 <_vfiprintf_r+0x95c>
 801179c:	4659      	mov	r1, fp
 801179e:	4630      	mov	r0, r6
 80117a0:	f7ff fb22 	bl	8010de8 <__sprint_r.part.0>
 80117a4:	2800      	cmp	r0, #0
 80117a6:	f47f acf1 	bne.w	801118c <_vfiprintf_r+0x330>
 80117aa:	af11      	add	r7, sp, #68	; 0x44
 80117ac:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 80117b0:	1c51      	adds	r1, r2, #1
 80117b2:	3c10      	subs	r4, #16
 80117b4:	2c10      	cmp	r4, #16
 80117b6:	dd14      	ble.n	80117e2 <_vfiprintf_r+0x986>
 80117b8:	1c53      	adds	r3, r2, #1
 80117ba:	3010      	adds	r0, #16
 80117bc:	1c91      	adds	r1, r2, #2
 80117be:	2b07      	cmp	r3, #7
 80117c0:	461a      	mov	r2, r3
 80117c2:	e9c7 a500 	strd	sl, r5, [r7]
 80117c6:	e9cd 300f 	strd	r3, r0, [sp, #60]	; 0x3c
 80117ca:	f107 0708 	add.w	r7, r7, #8
 80117ce:	ddf0      	ble.n	80117b2 <_vfiprintf_r+0x956>
 80117d0:	aa0e      	add	r2, sp, #56	; 0x38
 80117d2:	2800      	cmp	r0, #0
 80117d4:	d1e2      	bne.n	801179c <_vfiprintf_r+0x940>
 80117d6:	3c10      	subs	r4, #16
 80117d8:	2101      	movs	r1, #1
 80117da:	4602      	mov	r2, r0
 80117dc:	af11      	add	r7, sp, #68	; 0x44
 80117de:	2c10      	cmp	r4, #16
 80117e0:	dcea      	bgt.n	80117b8 <_vfiprintf_r+0x95c>
 80117e2:	4420      	add	r0, r4
 80117e4:	2907      	cmp	r1, #7
 80117e6:	e9c7 a400 	strd	sl, r4, [r7]
 80117ea:	e9cd 100f 	strd	r1, r0, [sp, #60]	; 0x3c
 80117ee:	f77f ad69 	ble.w	80112c4 <_vfiprintf_r+0x468>
 80117f2:	b150      	cbz	r0, 801180a <_vfiprintf_r+0x9ae>
 80117f4:	aa0e      	add	r2, sp, #56	; 0x38
 80117f6:	4659      	mov	r1, fp
 80117f8:	ee18 0a10 	vmov	r0, s16
 80117fc:	f7ff faf4 	bl	8010de8 <__sprint_r.part.0>
 8011800:	2800      	cmp	r0, #0
 8011802:	f47f acc3 	bne.w	801118c <_vfiprintf_r+0x330>
 8011806:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011808:	e55c      	b.n	80112c4 <_vfiprintf_r+0x468>
 801180a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801180e:	4542      	cmp	r2, r8
 8011810:	bfac      	ite	ge
 8011812:	189b      	addge	r3, r3, r2
 8011814:	4443      	addlt	r3, r8
 8011816:	9303      	str	r3, [sp, #12]
 8011818:	e55e      	b.n	80112d8 <_vfiprintf_r+0x47c>
 801181a:	ad3a      	add	r5, sp, #232	; 0xe8
 801181c:	9200      	str	r2, [sp, #0]
 801181e:	9201      	str	r2, [sp, #4]
 8011820:	e495      	b.n	801114e <_vfiprintf_r+0x2f2>
 8011822:	46a2      	mov	sl, r4
 8011824:	2e0a      	cmp	r6, #10
 8011826:	f178 0300 	sbcs.w	r3, r8, #0
 801182a:	f080 80d5 	bcs.w	80119d8 <_vfiprintf_r+0xb7c>
 801182e:	3630      	adds	r6, #48	; 0x30
 8011830:	2301      	movs	r3, #1
 8011832:	4654      	mov	r4, sl
 8011834:	f10d 05e7 	add.w	r5, sp, #231	; 0xe7
 8011838:	f88d 60e7 	strb.w	r6, [sp, #231]	; 0xe7
 801183c:	9301      	str	r3, [sp, #4]
 801183e:	e486      	b.n	801114e <_vfiprintf_r+0x2f2>
 8011840:	2800      	cmp	r0, #0
 8011842:	f43f ae44 	beq.w	80114ce <_vfiprintf_r+0x672>
 8011846:	aa0e      	add	r2, sp, #56	; 0x38
 8011848:	4659      	mov	r1, fp
 801184a:	ee18 0a10 	vmov	r0, s16
 801184e:	f7ff facb 	bl	8010de8 <__sprint_r.part.0>
 8011852:	2800      	cmp	r0, #0
 8011854:	f47f ac9a 	bne.w	801118c <_vfiprintf_r+0x330>
 8011858:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801185a:	af11      	add	r7, sp, #68	; 0x44
 801185c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801185e:	3101      	adds	r1, #1
 8011860:	e511      	b.n	8011286 <_vfiprintf_r+0x42a>
 8011862:	9b05      	ldr	r3, [sp, #20]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d164      	bne.n	8011932 <_vfiprintf_r+0xad6>
 8011868:	2101      	movs	r1, #1
 801186a:	4602      	mov	r2, r0
 801186c:	af11      	add	r7, sp, #68	; 0x44
 801186e:	e4fe      	b.n	801126e <_vfiprintf_r+0x412>
 8011870:	af11      	add	r7, sp, #68	; 0x44
 8011872:	920f      	str	r2, [sp, #60]	; 0x3c
 8011874:	f7ff bb4e 	b.w	8010f14 <_vfiprintf_r+0xb8>
 8011878:	ad3a      	add	r5, sp, #232	; 0xe8
 801187a:	e468      	b.n	801114e <_vfiprintf_r+0x2f2>
 801187c:	f01a 0310 	ands.w	r3, sl, #16
 8011880:	d131      	bne.n	80118e6 <_vfiprintf_r+0xa8a>
 8011882:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8011886:	d02a      	beq.n	80118de <_vfiprintf_r+0xa82>
 8011888:	9a04      	ldr	r2, [sp, #16]
 801188a:	4698      	mov	r8, r3
 801188c:	2301      	movs	r3, #1
 801188e:	f852 6b04 	ldr.w	r6, [r2], #4
 8011892:	b2b6      	uxth	r6, r6
 8011894:	9204      	str	r2, [sp, #16]
 8011896:	e437      	b.n	8011108 <_vfiprintf_r+0x2ac>
 8011898:	232d      	movs	r3, #45	; 0x2d
 801189a:	4276      	negs	r6, r6
 801189c:	46a2      	mov	sl, r4
 801189e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80118a2:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 80118a6:	2301      	movs	r3, #1
 80118a8:	e432      	b.n	8011110 <_vfiprintf_r+0x2b4>
 80118aa:	2800      	cmp	r0, #0
 80118ac:	d075      	beq.n	801199a <_vfiprintf_r+0xb3e>
 80118ae:	aa0e      	add	r2, sp, #56	; 0x38
 80118b0:	4659      	mov	r1, fp
 80118b2:	ee18 0a10 	vmov	r0, s16
 80118b6:	f7ff fa97 	bl	8010de8 <__sprint_r.part.0>
 80118ba:	2800      	cmp	r0, #0
 80118bc:	f47f ac66 	bne.w	801118c <_vfiprintf_r+0x330>
 80118c0:	af11      	add	r7, sp, #68	; 0x44
 80118c2:	e9dd 200f 	ldrd	r2, r0, [sp, #60]	; 0x3c
 80118c6:	1c51      	adds	r1, r2, #1
 80118c8:	e4a3      	b.n	8011212 <_vfiprintf_r+0x3b6>
 80118ca:	9304      	str	r3, [sp, #16]
 80118cc:	f899 3000 	ldrb.w	r3, [r9]
 80118d0:	f7ff bb35 	b.w	8010f3e <_vfiprintf_r+0xe2>
 80118d4:	3708      	adds	r7, #8
 80118d6:	f10c 0101 	add.w	r1, ip, #1
 80118da:	4662      	mov	r2, ip
 80118dc:	e4cb      	b.n	8011276 <_vfiprintf_r+0x41a>
 80118de:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
 80118e2:	f040 8110 	bne.w	8011b06 <_vfiprintf_r+0xcaa>
 80118e6:	9a04      	ldr	r2, [sp, #16]
 80118e8:	2301      	movs	r3, #1
 80118ea:	f852 6b04 	ldr.w	r6, [r2], #4
 80118ee:	9204      	str	r2, [sp, #16]
 80118f0:	e40a      	b.n	8011108 <_vfiprintf_r+0x2ac>
 80118f2:	05a2      	lsls	r2, r4, #22
 80118f4:	f100 8101 	bmi.w	8011afa <_vfiprintf_r+0xc9e>
 80118f8:	ea4f 78e3 	mov.w	r8, r3, asr #31
 80118fc:	461e      	mov	r6, r3
 80118fe:	4643      	mov	r3, r8
 8011900:	f7ff bbac 	b.w	801105c <_vfiprintf_r+0x200>
 8011904:	e9dd 1603 	ldrd	r1, r6, [sp, #12]
 8011908:	f856 2b04 	ldr.w	r2, [r6], #4
 801190c:	17cb      	asrs	r3, r1, #31
 801190e:	9604      	str	r6, [sp, #16]
 8011910:	e9c2 1300 	strd	r1, r3, [r2]
 8011914:	f7ff bae3 	b.w	8010ede <_vfiprintf_r+0x82>
 8011918:	2320      	movs	r3, #32
 801191a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 801191e:	f899 3000 	ldrb.w	r3, [r9]
 8011922:	f7ff bb0c 	b.w	8010f3e <_vfiprintf_r+0xe2>
 8011926:	9b04      	ldr	r3, [sp, #16]
 8011928:	f853 6b04 	ldr.w	r6, [r3], #4
 801192c:	9304      	str	r3, [sp, #16]
 801192e:	f7ff bbe8 	b.w	8011102 <_vfiprintf_r+0x2a6>
 8011932:	2002      	movs	r0, #2
 8011934:	ab0d      	add	r3, sp, #52	; 0x34
 8011936:	af11      	add	r7, sp, #68	; 0x44
 8011938:	9012      	str	r0, [sp, #72]	; 0x48
 801193a:	9311      	str	r3, [sp, #68]	; 0x44
 801193c:	e6cf      	b.n	80116de <_vfiprintf_r+0x882>
 801193e:	4aa9      	ldr	r2, [pc, #676]	; (8011be4 <_vfiprintf_r+0xd88>)
 8011940:	9207      	str	r2, [sp, #28]
 8011942:	f014 0820 	ands.w	r8, r4, #32
 8011946:	d035      	beq.n	80119b4 <_vfiprintf_r+0xb58>
 8011948:	9e04      	ldr	r6, [sp, #16]
 801194a:	3607      	adds	r6, #7
 801194c:	f026 0607 	bic.w	r6, r6, #7
 8011950:	4632      	mov	r2, r6
 8011952:	f8d6 8004 	ldr.w	r8, [r6, #4]
 8011956:	f852 6b08 	ldr.w	r6, [r2], #8
 801195a:	9204      	str	r2, [sp, #16]
 801195c:	ea56 0208 	orrs.w	r2, r6, r8
 8011960:	d008      	beq.n	8011974 <_vfiprintf_r+0xb18>
 8011962:	07e0      	lsls	r0, r4, #31
 8011964:	d506      	bpl.n	8011974 <_vfiprintf_r+0xb18>
 8011966:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 801196a:	f044 0402 	orr.w	r4, r4, #2
 801196e:	2330      	movs	r3, #48	; 0x30
 8011970:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8011974:	f424 6a80 	bic.w	sl, r4, #1024	; 0x400
 8011978:	2302      	movs	r3, #2
 801197a:	f7ff bbc5 	b.w	8011108 <_vfiprintf_r+0x2ac>
 801197e:	46a2      	mov	sl, r4
 8011980:	e527      	b.n	80113d2 <_vfiprintf_r+0x576>
 8011982:	4a99      	ldr	r2, [pc, #612]	; (8011be8 <_vfiprintf_r+0xd8c>)
 8011984:	9207      	str	r2, [sp, #28]
 8011986:	e7dc      	b.n	8011942 <_vfiprintf_r+0xae6>
 8011988:	4628      	mov	r0, r5
 801198a:	9604      	str	r6, [sp, #16]
 801198c:	f7fb fb4a 	bl	800d024 <strlen>
 8011990:	2300      	movs	r3, #0
 8011992:	9001      	str	r0, [sp, #4]
 8011994:	9300      	str	r3, [sp, #0]
 8011996:	f7ff bbda 	b.w	801114e <_vfiprintf_r+0x2f2>
 801199a:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 801199e:	2a00      	cmp	r2, #0
 80119a0:	f040 809a 	bne.w	8011ad8 <_vfiprintf_r+0xc7c>
 80119a4:	9b05      	ldr	r3, [sp, #20]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	f47f ae92 	bne.w	80116d0 <_vfiprintf_r+0x874>
 80119ac:	4602      	mov	r2, r0
 80119ae:	2101      	movs	r1, #1
 80119b0:	af11      	add	r7, sp, #68	; 0x44
 80119b2:	e460      	b.n	8011276 <_vfiprintf_r+0x41a>
 80119b4:	f014 0210 	ands.w	r2, r4, #16
 80119b8:	d004      	beq.n	80119c4 <_vfiprintf_r+0xb68>
 80119ba:	9a04      	ldr	r2, [sp, #16]
 80119bc:	f852 6b04 	ldr.w	r6, [r2], #4
 80119c0:	9204      	str	r2, [sp, #16]
 80119c2:	e7cb      	b.n	801195c <_vfiprintf_r+0xb00>
 80119c4:	f014 0140 	ands.w	r1, r4, #64	; 0x40
 80119c8:	d06c      	beq.n	8011aa4 <_vfiprintf_r+0xc48>
 80119ca:	9904      	ldr	r1, [sp, #16]
 80119cc:	4690      	mov	r8, r2
 80119ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80119d2:	b2b6      	uxth	r6, r6
 80119d4:	9104      	str	r1, [sp, #16]
 80119d6:	e7c1      	b.n	801195c <_vfiprintf_r+0xb00>
 80119d8:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 80119dc:	2200      	movs	r2, #0
 80119de:	ee09 ba10 	vmov	s18, fp
 80119e2:	f8cd a004 	str.w	sl, [sp, #4]
 80119e6:	f8cd 9014 	str.w	r9, [sp, #20]
 80119ea:	ac3a      	add	r4, sp, #232	; 0xe8
 80119ec:	46b9      	mov	r9, r7
 80119ee:	4692      	mov	sl, r2
 80119f0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80119f4:	461f      	mov	r7, r3
 80119f6:	e00a      	b.n	8011a0e <_vfiprintf_r+0xbb2>
 80119f8:	4630      	mov	r0, r6
 80119fa:	4641      	mov	r1, r8
 80119fc:	f7ef f916 	bl	8000c2c <__aeabi_uldivmod>
 8011a00:	2e0a      	cmp	r6, #10
 8011a02:	f178 0300 	sbcs.w	r3, r8, #0
 8011a06:	d31d      	bcc.n	8011a44 <_vfiprintf_r+0xbe8>
 8011a08:	4606      	mov	r6, r0
 8011a0a:	4688      	mov	r8, r1
 8011a0c:	462c      	mov	r4, r5
 8011a0e:	220a      	movs	r2, #10
 8011a10:	2300      	movs	r3, #0
 8011a12:	4630      	mov	r0, r6
 8011a14:	4641      	mov	r1, r8
 8011a16:	f7ef f909 	bl	8000c2c <__aeabi_uldivmod>
 8011a1a:	4611      	mov	r1, r2
 8011a1c:	1e65      	subs	r5, r4, #1
 8011a1e:	f10a 0a01 	add.w	sl, sl, #1
 8011a22:	3130      	adds	r1, #48	; 0x30
 8011a24:	220a      	movs	r2, #10
 8011a26:	2300      	movs	r3, #0
 8011a28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011a2c:	2f00      	cmp	r7, #0
 8011a2e:	d0e3      	beq.n	80119f8 <_vfiprintf_r+0xb9c>
 8011a30:	f89b 1000 	ldrb.w	r1, [fp]
 8011a34:	4551      	cmp	r1, sl
 8011a36:	d1df      	bne.n	80119f8 <_vfiprintf_r+0xb9c>
 8011a38:	29ff      	cmp	r1, #255	; 0xff
 8011a3a:	d0dd      	beq.n	80119f8 <_vfiprintf_r+0xb9c>
 8011a3c:	2e0a      	cmp	r6, #10
 8011a3e:	f178 0300 	sbcs.w	r3, r8, #0
 8011a42:	d277      	bcs.n	8011b34 <_vfiprintf_r+0xcd8>
 8011a44:	ab3a      	add	r3, sp, #232	; 0xe8
 8011a46:	f8dd a004 	ldr.w	sl, [sp, #4]
 8011a4a:	464f      	mov	r7, r9
 8011a4c:	f8cd b020 	str.w	fp, [sp, #32]
 8011a50:	1b5b      	subs	r3, r3, r5
 8011a52:	ee19 ba10 	vmov	fp, s18
 8011a56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011a5a:	4654      	mov	r4, sl
 8011a5c:	9301      	str	r3, [sp, #4]
 8011a5e:	f7ff bb76 	b.w	801114e <_vfiprintf_r+0x2f2>
 8011a62:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011a66:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8011a6a:	f109 0901 	add.w	r9, r9, #1
 8011a6e:	f7ff ba66 	b.w	8010f3e <_vfiprintf_r+0xe2>
 8011a72:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011a76:	f044 0420 	orr.w	r4, r4, #32
 8011a7a:	f109 0901 	add.w	r9, r9, #1
 8011a7e:	f7ff ba5e 	b.w	8010f3e <_vfiprintf_r+0xe2>
 8011a82:	9e04      	ldr	r6, [sp, #16]
 8011a84:	9a03      	ldr	r2, [sp, #12]
 8011a86:	f856 3b04 	ldr.w	r3, [r6], #4
 8011a8a:	601a      	str	r2, [r3, #0]
 8011a8c:	9604      	str	r6, [sp, #16]
 8011a8e:	f7ff ba26 	b.w	8010ede <_vfiprintf_r+0x82>
 8011a92:	2b06      	cmp	r3, #6
 8011a94:	4d55      	ldr	r5, [pc, #340]	; (8011bec <_vfiprintf_r+0xd90>)
 8011a96:	9604      	str	r6, [sp, #16]
 8011a98:	bf28      	it	cs
 8011a9a:	2306      	movcs	r3, #6
 8011a9c:	4698      	mov	r8, r3
 8011a9e:	9301      	str	r3, [sp, #4]
 8011aa0:	f7ff bba2 	b.w	80111e8 <_vfiprintf_r+0x38c>
 8011aa4:	f414 7800 	ands.w	r8, r4, #512	; 0x200
 8011aa8:	9a04      	ldr	r2, [sp, #16]
 8011aaa:	d03a      	beq.n	8011b22 <_vfiprintf_r+0xcc6>
 8011aac:	f852 6b04 	ldr.w	r6, [r2], #4
 8011ab0:	4688      	mov	r8, r1
 8011ab2:	b2f6      	uxtb	r6, r6
 8011ab4:	9204      	str	r2, [sp, #16]
 8011ab6:	e751      	b.n	801195c <_vfiprintf_r+0xb00>
 8011ab8:	f414 7800 	ands.w	r8, r4, #512	; 0x200
 8011abc:	9b04      	ldr	r3, [sp, #16]
 8011abe:	d02b      	beq.n	8011b18 <_vfiprintf_r+0xcbc>
 8011ac0:	f853 6b04 	ldr.w	r6, [r3], #4
 8011ac4:	4690      	mov	r8, r2
 8011ac6:	b2f6      	uxtb	r6, r6
 8011ac8:	9304      	str	r3, [sp, #16]
 8011aca:	f7ff bb1a 	b.w	8011102 <_vfiprintf_r+0x2a6>
 8011ace:	2101      	movs	r1, #1
 8011ad0:	4602      	mov	r2, r0
 8011ad2:	af11      	add	r7, sp, #68	; 0x44
 8011ad4:	f7ff bbcf 	b.w	8011276 <_vfiprintf_r+0x41a>
 8011ad8:	2101      	movs	r1, #1
 8011ada:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8011ade:	af11      	add	r7, sp, #68	; 0x44
 8011ae0:	4608      	mov	r0, r1
 8011ae2:	9112      	str	r1, [sp, #72]	; 0x48
 8011ae4:	9211      	str	r2, [sp, #68]	; 0x44
 8011ae6:	f7ff bba3 	b.w	8011230 <_vfiprintf_r+0x3d4>
 8011aea:	9e04      	ldr	r6, [sp, #16]
 8011aec:	9a03      	ldr	r2, [sp, #12]
 8011aee:	f856 3b04 	ldr.w	r3, [r6], #4
 8011af2:	801a      	strh	r2, [r3, #0]
 8011af4:	9604      	str	r6, [sp, #16]
 8011af6:	f7ff b9f2 	b.w	8010ede <_vfiprintf_r+0x82>
 8011afa:	f343 18c0 	sbfx	r8, r3, #7, #1
 8011afe:	b25e      	sxtb	r6, r3
 8011b00:	4643      	mov	r3, r8
 8011b02:	f7ff baab 	b.w	801105c <_vfiprintf_r+0x200>
 8011b06:	9904      	ldr	r1, [sp, #16]
 8011b08:	4690      	mov	r8, r2
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8011b10:	b2f6      	uxtb	r6, r6
 8011b12:	9104      	str	r1, [sp, #16]
 8011b14:	f7ff baf8 	b.w	8011108 <_vfiprintf_r+0x2ac>
 8011b18:	f853 6b04 	ldr.w	r6, [r3], #4
 8011b1c:	9304      	str	r3, [sp, #16]
 8011b1e:	f7ff baf0 	b.w	8011102 <_vfiprintf_r+0x2a6>
 8011b22:	f852 6b04 	ldr.w	r6, [r2], #4
 8011b26:	9204      	str	r2, [sp, #16]
 8011b28:	e718      	b.n	801195c <_vfiprintf_r+0xb00>
 8011b2a:	6d88      	ldr	r0, [r1, #88]	; 0x58
 8011b2c:	f7fe f9b4 	bl	800fe98 <__retarget_lock_release_recursive>
 8011b30:	f7ff baca 	b.w	80110c8 <_vfiprintf_r+0x26c>
 8011b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b38:	1aed      	subs	r5, r5, r3
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	4628      	mov	r0, r5
 8011b3e:	f7fe fddb 	bl	80106f8 <strncpy>
 8011b42:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8011b46:	b10b      	cbz	r3, 8011b4c <_vfiprintf_r+0xcf0>
 8011b48:	f10b 0b01 	add.w	fp, fp, #1
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	4641      	mov	r1, r8
 8011b50:	220a      	movs	r2, #10
 8011b52:	2300      	movs	r3, #0
 8011b54:	f04f 0a00 	mov.w	sl, #0
 8011b58:	f7ef f868 	bl	8000c2c <__aeabi_uldivmod>
 8011b5c:	e754      	b.n	8011a08 <_vfiprintf_r+0xbac>
 8011b5e:	9b00      	ldr	r3, [sp, #0]
 8011b60:	9604      	str	r6, [sp, #16]
 8011b62:	9301      	str	r3, [sp, #4]
 8011b64:	9000      	str	r0, [sp, #0]
 8011b66:	f7ff baf2 	b.w	801114e <_vfiprintf_r+0x2f2>
 8011b6a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b6c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011b6e:	3201      	adds	r2, #1
 8011b70:	f8df a080 	ldr.w	sl, [pc, #128]	; 8011bf4 <_vfiprintf_r+0xd98>
 8011b74:	e5f3      	b.n	801175e <_vfiprintf_r+0x902>
 8011b76:	2200      	movs	r2, #0
 8011b78:	9200      	str	r2, [sp, #0]
 8011b7a:	f7ff b9e2 	b.w	8010f42 <_vfiprintf_r+0xe6>
 8011b7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011b80:	f8df a070 	ldr.w	sl, [pc, #112]	; 8011bf4 <_vfiprintf_r+0xd98>
 8011b84:	3101      	adds	r1, #1
 8011b86:	e62c      	b.n	80117e2 <_vfiprintf_r+0x986>
 8011b88:	aa0e      	add	r2, sp, #56	; 0x38
 8011b8a:	ee18 1a90 	vmov	r1, s17
 8011b8e:	ee18 0a10 	vmov	r0, s16
 8011b92:	f7ff f929 	bl	8010de8 <__sprint_r.part.0>
 8011b96:	2800      	cmp	r0, #0
 8011b98:	f43f aaf6 	beq.w	8011188 <_vfiprintf_r+0x32c>
 8011b9c:	f7ff baf6 	b.w	801118c <_vfiprintf_r+0x330>
 8011ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011ba4:	9303      	str	r3, [sp, #12]
 8011ba6:	f7ff bafb 	b.w	80111a0 <_vfiprintf_r+0x344>
 8011baa:	468c      	mov	ip, r1
 8011bac:	4e10      	ldr	r6, [pc, #64]	; (8011bf0 <_vfiprintf_r+0xd94>)
 8011bae:	e50f      	b.n	80115d0 <_vfiprintf_r+0x774>
 8011bb0:	9a04      	ldr	r2, [sp, #16]
 8011bb2:	f899 3001 	ldrb.w	r3, [r9, #1]
 8011bb6:	4689      	mov	r9, r1
 8011bb8:	f852 1b04 	ldr.w	r1, [r2], #4
 8011bbc:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 8011bc0:	9204      	str	r2, [sp, #16]
 8011bc2:	9100      	str	r1, [sp, #0]
 8011bc4:	f7ff b9bb 	b.w	8010f3e <_vfiprintf_r+0xe2>
 8011bc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011bca:	07da      	lsls	r2, r3, #31
 8011bcc:	d4e8      	bmi.n	8011ba0 <_vfiprintf_r+0xd44>
 8011bce:	89ab      	ldrh	r3, [r5, #12]
 8011bd0:	059b      	lsls	r3, r3, #22
 8011bd2:	d4e5      	bmi.n	8011ba0 <_vfiprintf_r+0xd44>
 8011bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bda:	9303      	str	r3, [sp, #12]
 8011bdc:	f7fe f95c 	bl	800fe98 <__retarget_lock_release_recursive>
 8011be0:	f7ff bade 	b.w	80111a0 <_vfiprintf_r+0x344>
 8011be4:	08013c9c 	.word	0x08013c9c
 8011be8:	08013c88 	.word	0x08013c88
 8011bec:	08013cb0 	.word	0x08013cb0
 8011bf0:	08013f5c 	.word	0x08013f5c
 8011bf4:	08013f4c 	.word	0x08013f4c

08011bf8 <__sbprintf>:
 8011bf8:	b570      	push	{r4, r5, r6, lr}
 8011bfa:	460c      	mov	r4, r1
 8011bfc:	8989      	ldrh	r1, [r1, #12]
 8011bfe:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8011c02:	4606      	mov	r6, r0
 8011c04:	f021 0102 	bic.w	r1, r1, #2
 8011c08:	a818      	add	r0, sp, #96	; 0x60
 8011c0a:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011c0e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8011c10:	911b      	str	r1, [sp, #108]	; 0x6c
 8011c12:	89e1      	ldrh	r1, [r4, #14]
 8011c14:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011c18:	69e1      	ldr	r1, [r4, #28]
 8011c1a:	9109      	str	r1, [sp, #36]	; 0x24
 8011c1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011c1e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011c20:	a91c      	add	r1, sp, #112	; 0x70
 8011c22:	9102      	str	r1, [sp, #8]
 8011c24:	9106      	str	r1, [sp, #24]
 8011c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011c2a:	9104      	str	r1, [sp, #16]
 8011c2c:	9107      	str	r1, [sp, #28]
 8011c2e:	2100      	movs	r1, #0
 8011c30:	e9cd 3200 	strd	r3, r2, [sp]
 8011c34:	9108      	str	r1, [sp, #32]
 8011c36:	f7fe f929 	bl	800fe8c <__retarget_lock_init_recursive>
 8011c3a:	a902      	add	r1, sp, #8
 8011c3c:	4630      	mov	r0, r6
 8011c3e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011c42:	f7ff f90b 	bl	8010e5c <_vfiprintf_r>
 8011c46:	1e05      	subs	r5, r0, #0
 8011c48:	db07      	blt.n	8011c5a <__sbprintf+0x62>
 8011c4a:	a902      	add	r1, sp, #8
 8011c4c:	4630      	mov	r0, r6
 8011c4e:	f000 f937 	bl	8011ec0 <_fflush_r>
 8011c52:	2800      	cmp	r0, #0
 8011c54:	bf18      	it	ne
 8011c56:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 8011c5a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8011c5e:	065b      	lsls	r3, r3, #25
 8011c60:	d503      	bpl.n	8011c6a <__sbprintf+0x72>
 8011c62:	89a3      	ldrh	r3, [r4, #12]
 8011c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011c68:	81a3      	strh	r3, [r4, #12]
 8011c6a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8011c6c:	f7fe f910 	bl	800fe90 <__retarget_lock_close_recursive>
 8011c70:	4628      	mov	r0, r5
 8011c72:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 8011c76:	bd70      	pop	{r4, r5, r6, pc}

08011c78 <__ascii_wctomb>:
 8011c78:	4603      	mov	r3, r0
 8011c7a:	b149      	cbz	r1, 8011c90 <__ascii_wctomb+0x18>
 8011c7c:	2aff      	cmp	r2, #255	; 0xff
 8011c7e:	d802      	bhi.n	8011c86 <__ascii_wctomb+0xe>
 8011c80:	2001      	movs	r0, #1
 8011c82:	700a      	strb	r2, [r1, #0]
 8011c84:	4770      	bx	lr
 8011c86:	228a      	movs	r2, #138	; 0x8a
 8011c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c8c:	601a      	str	r2, [r3, #0]
 8011c8e:	4770      	bx	lr
 8011c90:	4608      	mov	r0, r1
 8011c92:	4770      	bx	lr

08011c94 <__swsetup_r>:
 8011c94:	b538      	push	{r3, r4, r5, lr}
 8011c96:	4b33      	ldr	r3, [pc, #204]	; (8011d64 <__swsetup_r+0xd0>)
 8011c98:	4605      	mov	r5, r0
 8011c9a:	460c      	mov	r4, r1
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	b10b      	cbz	r3, 8011ca4 <__swsetup_r+0x10>
 8011ca0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ca2:	b1da      	cbz	r2, 8011cdc <__swsetup_r+0x48>
 8011ca4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ca8:	0718      	lsls	r0, r3, #28
 8011caa:	b29a      	uxth	r2, r3
 8011cac:	d51e      	bpl.n	8011cec <__swsetup_r+0x58>
 8011cae:	6921      	ldr	r1, [r4, #16]
 8011cb0:	b339      	cbz	r1, 8011d02 <__swsetup_r+0x6e>
 8011cb2:	f012 0001 	ands.w	r0, r2, #1
 8011cb6:	d007      	beq.n	8011cc8 <__swsetup_r+0x34>
 8011cb8:	2000      	movs	r0, #0
 8011cba:	60a0      	str	r0, [r4, #8]
 8011cbc:	6960      	ldr	r0, [r4, #20]
 8011cbe:	4240      	negs	r0, r0
 8011cc0:	61a0      	str	r0, [r4, #24]
 8011cc2:	b139      	cbz	r1, 8011cd4 <__swsetup_r+0x40>
 8011cc4:	2000      	movs	r0, #0
 8011cc6:	bd38      	pop	{r3, r4, r5, pc}
 8011cc8:	0795      	lsls	r5, r2, #30
 8011cca:	bf58      	it	pl
 8011ccc:	6960      	ldrpl	r0, [r4, #20]
 8011cce:	60a0      	str	r0, [r4, #8]
 8011cd0:	2900      	cmp	r1, #0
 8011cd2:	d1f7      	bne.n	8011cc4 <__swsetup_r+0x30>
 8011cd4:	0612      	lsls	r2, r2, #24
 8011cd6:	d43e      	bmi.n	8011d56 <__swsetup_r+0xc2>
 8011cd8:	4608      	mov	r0, r1
 8011cda:	bd38      	pop	{r3, r4, r5, pc}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f000 f923 	bl	8011f28 <__sinit>
 8011ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ce6:	0718      	lsls	r0, r3, #28
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	d4e0      	bmi.n	8011cae <__swsetup_r+0x1a>
 8011cec:	06d1      	lsls	r1, r2, #27
 8011cee:	d52a      	bpl.n	8011d46 <__swsetup_r+0xb2>
 8011cf0:	0752      	lsls	r2, r2, #29
 8011cf2:	d414      	bmi.n	8011d1e <__swsetup_r+0x8a>
 8011cf4:	6921      	ldr	r1, [r4, #16]
 8011cf6:	f043 0308 	orr.w	r3, r3, #8
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	81a3      	strh	r3, [r4, #12]
 8011cfe:	2900      	cmp	r1, #0
 8011d00:	d1d7      	bne.n	8011cb2 <__swsetup_r+0x1e>
 8011d02:	f402 7020 	and.w	r0, r2, #640	; 0x280
 8011d06:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8011d0a:	d0d2      	beq.n	8011cb2 <__swsetup_r+0x1e>
 8011d0c:	4621      	mov	r1, r4
 8011d0e:	4628      	mov	r0, r5
 8011d10:	f000 fbbe 	bl	8012490 <__smakebuf_r>
 8011d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d18:	6921      	ldr	r1, [r4, #16]
 8011d1a:	b29a      	uxth	r2, r3
 8011d1c:	e7c9      	b.n	8011cb2 <__swsetup_r+0x1e>
 8011d1e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011d20:	b151      	cbz	r1, 8011d38 <__swsetup_r+0xa4>
 8011d22:	f104 0240 	add.w	r2, r4, #64	; 0x40
 8011d26:	4291      	cmp	r1, r2
 8011d28:	d004      	beq.n	8011d34 <__swsetup_r+0xa0>
 8011d2a:	4628      	mov	r0, r5
 8011d2c:	f7fd ffa4 	bl	800fc78 <_free_r>
 8011d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d34:	2200      	movs	r2, #0
 8011d36:	6322      	str	r2, [r4, #48]	; 0x30
 8011d38:	2200      	movs	r2, #0
 8011d3a:	6921      	ldr	r1, [r4, #16]
 8011d3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d40:	e9c4 1200 	strd	r1, r2, [r4]
 8011d44:	e7d7      	b.n	8011cf6 <__swsetup_r+0x62>
 8011d46:	2209      	movs	r2, #9
 8011d48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d50:	602a      	str	r2, [r5, #0]
 8011d52:	81a3      	strh	r3, [r4, #12]
 8011d54:	bd38      	pop	{r3, r4, r5, pc}
 8011d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d5e:	81a3      	strh	r3, [r4, #12]
 8011d60:	bd38      	pop	{r3, r4, r5, pc}
 8011d62:	bf00      	nop
 8011d64:	200001ec 	.word	0x200001ec

08011d68 <abort>:
 8011d68:	2006      	movs	r0, #6
 8011d6a:	b508      	push	{r3, lr}
 8011d6c:	f000 fc00 	bl	8012570 <raise>
 8011d70:	2001      	movs	r0, #1
 8011d72:	f000 fe33 	bl	80129dc <_exit>
 8011d76:	bf00      	nop

08011d78 <__sflush_r>:
 8011d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d80:	460c      	mov	r4, r1
 8011d82:	0711      	lsls	r1, r2, #28
 8011d84:	4680      	mov	r8, r0
 8011d86:	d431      	bmi.n	8011dec <__sflush_r+0x74>
 8011d88:	6863      	ldr	r3, [r4, #4]
 8011d8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	81a2      	strh	r2, [r4, #12]
 8011d92:	dd49      	ble.n	8011e28 <__sflush_r+0xb0>
 8011d94:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011d96:	2d00      	cmp	r5, #0
 8011d98:	d043      	beq.n	8011e22 <__sflush_r+0xaa>
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	f8d8 6000 	ldr.w	r6, [r8]
 8011da0:	f8c8 3000 	str.w	r3, [r8]
 8011da4:	b293      	uxth	r3, r2
 8011da6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011daa:	d141      	bne.n	8011e30 <__sflush_r+0xb8>
 8011dac:	2301      	movs	r3, #1
 8011dae:	69e1      	ldr	r1, [r4, #28]
 8011db0:	4640      	mov	r0, r8
 8011db2:	47a8      	blx	r5
 8011db4:	1c43      	adds	r3, r0, #1
 8011db6:	d075      	beq.n	8011ea4 <__sflush_r+0x12c>
 8011db8:	89a3      	ldrh	r3, [r4, #12]
 8011dba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8011dbc:	075f      	lsls	r7, r3, #29
 8011dbe:	d505      	bpl.n	8011dcc <__sflush_r+0x54>
 8011dc0:	6863      	ldr	r3, [r4, #4]
 8011dc2:	1ac0      	subs	r0, r0, r3
 8011dc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011dc6:	b10b      	cbz	r3, 8011dcc <__sflush_r+0x54>
 8011dc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011dca:	1ac0      	subs	r0, r0, r3
 8011dcc:	4602      	mov	r2, r0
 8011dce:	2300      	movs	r3, #0
 8011dd0:	69e1      	ldr	r1, [r4, #28]
 8011dd2:	4640      	mov	r0, r8
 8011dd4:	47a8      	blx	r5
 8011dd6:	1c45      	adds	r5, r0, #1
 8011dd8:	d134      	bne.n	8011e44 <__sflush_r+0xcc>
 8011dda:	f8d8 2000 	ldr.w	r2, [r8]
 8011dde:	2a1d      	cmp	r2, #29
 8011de0:	d94d      	bls.n	8011e7e <__sflush_r+0x106>
 8011de2:	89a3      	ldrh	r3, [r4, #12]
 8011de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011de8:	81a3      	strh	r3, [r4, #12]
 8011dea:	e01b      	b.n	8011e24 <__sflush_r+0xac>
 8011dec:	6926      	ldr	r6, [r4, #16]
 8011dee:	b1c6      	cbz	r6, 8011e22 <__sflush_r+0xaa>
 8011df0:	b293      	uxth	r3, r2
 8011df2:	6825      	ldr	r5, [r4, #0]
 8011df4:	6026      	str	r6, [r4, #0]
 8011df6:	0799      	lsls	r1, r3, #30
 8011df8:	eba5 0506 	sub.w	r5, r5, r6
 8011dfc:	bf0c      	ite	eq
 8011dfe:	6963      	ldreq	r3, [r4, #20]
 8011e00:	2300      	movne	r3, #0
 8011e02:	60a3      	str	r3, [r4, #8]
 8011e04:	e00b      	b.n	8011e1e <__sflush_r+0xa6>
 8011e06:	462b      	mov	r3, r5
 8011e08:	4632      	mov	r2, r6
 8011e0a:	69e1      	ldr	r1, [r4, #28]
 8011e0c:	4640      	mov	r0, r8
 8011e0e:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8011e10:	47b8      	blx	r7
 8011e12:	f1b0 0c00 	subs.w	ip, r0, #0
 8011e16:	eba5 050c 	sub.w	r5, r5, ip
 8011e1a:	4466      	add	r6, ip
 8011e1c:	dd0a      	ble.n	8011e34 <__sflush_r+0xbc>
 8011e1e:	2d00      	cmp	r5, #0
 8011e20:	dcf1      	bgt.n	8011e06 <__sflush_r+0x8e>
 8011e22:	2000      	movs	r0, #0
 8011e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	dcb2      	bgt.n	8011d94 <__sflush_r+0x1c>
 8011e2e:	e7f8      	b.n	8011e22 <__sflush_r+0xaa>
 8011e30:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011e32:	e7c3      	b.n	8011dbc <__sflush_r+0x44>
 8011e34:	89a3      	ldrh	r3, [r4, #12]
 8011e36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e3e:	81a3      	strh	r3, [r4, #12]
 8011e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e48:	2200      	movs	r2, #0
 8011e4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e4e:	6062      	str	r2, [r4, #4]
 8011e50:	6922      	ldr	r2, [r4, #16]
 8011e52:	81a3      	strh	r3, [r4, #12]
 8011e54:	6022      	str	r2, [r4, #0]
 8011e56:	04da      	lsls	r2, r3, #19
 8011e58:	d500      	bpl.n	8011e5c <__sflush_r+0xe4>
 8011e5a:	6520      	str	r0, [r4, #80]	; 0x50
 8011e5c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011e5e:	f8c8 6000 	str.w	r6, [r8]
 8011e62:	2900      	cmp	r1, #0
 8011e64:	d0dd      	beq.n	8011e22 <__sflush_r+0xaa>
 8011e66:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8011e6a:	4299      	cmp	r1, r3
 8011e6c:	d002      	beq.n	8011e74 <__sflush_r+0xfc>
 8011e6e:	4640      	mov	r0, r8
 8011e70:	f7fd ff02 	bl	800fc78 <_free_r>
 8011e74:	2300      	movs	r3, #0
 8011e76:	4618      	mov	r0, r3
 8011e78:	6323      	str	r3, [r4, #48]	; 0x30
 8011e7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e7e:	4b0f      	ldr	r3, [pc, #60]	; (8011ebc <__sflush_r+0x144>)
 8011e80:	40d3      	lsrs	r3, r2
 8011e82:	43db      	mvns	r3, r3
 8011e84:	f013 0301 	ands.w	r3, r3, #1
 8011e88:	d1ab      	bne.n	8011de2 <__sflush_r+0x6a>
 8011e8a:	6063      	str	r3, [r4, #4]
 8011e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011e90:	6921      	ldr	r1, [r4, #16]
 8011e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011e96:	6021      	str	r1, [r4, #0]
 8011e98:	81a3      	strh	r3, [r4, #12]
 8011e9a:	04db      	lsls	r3, r3, #19
 8011e9c:	d5de      	bpl.n	8011e5c <__sflush_r+0xe4>
 8011e9e:	2a00      	cmp	r2, #0
 8011ea0:	d1dc      	bne.n	8011e5c <__sflush_r+0xe4>
 8011ea2:	e7da      	b.n	8011e5a <__sflush_r+0xe2>
 8011ea4:	f8d8 3000 	ldr.w	r3, [r8]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d085      	beq.n	8011db8 <__sflush_r+0x40>
 8011eac:	2b1d      	cmp	r3, #29
 8011eae:	d001      	beq.n	8011eb4 <__sflush_r+0x13c>
 8011eb0:	2b16      	cmp	r3, #22
 8011eb2:	d196      	bne.n	8011de2 <__sflush_r+0x6a>
 8011eb4:	2000      	movs	r0, #0
 8011eb6:	f8c8 6000 	str.w	r6, [r8]
 8011eba:	e7b3      	b.n	8011e24 <__sflush_r+0xac>
 8011ebc:	20400001 	.word	0x20400001

08011ec0 <_fflush_r>:
 8011ec0:	b538      	push	{r3, r4, r5, lr}
 8011ec2:	4605      	mov	r5, r0
 8011ec4:	460c      	mov	r4, r1
 8011ec6:	b108      	cbz	r0, 8011ecc <_fflush_r+0xc>
 8011ec8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8011eca:	b1a3      	cbz	r3, 8011ef6 <_fflush_r+0x36>
 8011ecc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8011ed0:	b1b8      	cbz	r0, 8011f02 <_fflush_r+0x42>
 8011ed2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ed4:	07db      	lsls	r3, r3, #31
 8011ed6:	d401      	bmi.n	8011edc <_fflush_r+0x1c>
 8011ed8:	0581      	lsls	r1, r0, #22
 8011eda:	d515      	bpl.n	8011f08 <_fflush_r+0x48>
 8011edc:	4628      	mov	r0, r5
 8011ede:	4621      	mov	r1, r4
 8011ee0:	f7ff ff4a 	bl	8011d78 <__sflush_r>
 8011ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011ee6:	4605      	mov	r5, r0
 8011ee8:	07da      	lsls	r2, r3, #31
 8011eea:	d402      	bmi.n	8011ef2 <_fflush_r+0x32>
 8011eec:	89a3      	ldrh	r3, [r4, #12]
 8011eee:	059b      	lsls	r3, r3, #22
 8011ef0:	d50e      	bpl.n	8011f10 <_fflush_r+0x50>
 8011ef2:	4628      	mov	r0, r5
 8011ef4:	bd38      	pop	{r3, r4, r5, pc}
 8011ef6:	f000 f817 	bl	8011f28 <__sinit>
 8011efa:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8011efe:	2800      	cmp	r0, #0
 8011f00:	d1e7      	bne.n	8011ed2 <_fflush_r+0x12>
 8011f02:	4605      	mov	r5, r0
 8011f04:	4628      	mov	r0, r5
 8011f06:	bd38      	pop	{r3, r4, r5, pc}
 8011f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f0a:	f7fd ffc3 	bl	800fe94 <__retarget_lock_acquire_recursive>
 8011f0e:	e7e5      	b.n	8011edc <_fflush_r+0x1c>
 8011f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f12:	f7fd ffc1 	bl	800fe98 <__retarget_lock_release_recursive>
 8011f16:	4628      	mov	r0, r5
 8011f18:	bd38      	pop	{r3, r4, r5, pc}
 8011f1a:	bf00      	nop

08011f1c <_cleanup_r>:
 8011f1c:	4901      	ldr	r1, [pc, #4]	; (8011f24 <_cleanup_r+0x8>)
 8011f1e:	f000 ba95 	b.w	801244c <_fwalk_reent>
 8011f22:	bf00      	nop
 8011f24:	080127c9 	.word	0x080127c9

08011f28 <__sinit>:
 8011f28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f2c:	4682      	mov	sl, r0
 8011f2e:	483a      	ldr	r0, [pc, #232]	; (8012018 <__sinit+0xf0>)
 8011f30:	f7fd ffb0 	bl	800fe94 <__retarget_lock_acquire_recursive>
 8011f34:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
 8011f38:	2c00      	cmp	r4, #0
 8011f3a:	d168      	bne.n	801200e <__sinit+0xe6>
 8011f3c:	4a37      	ldr	r2, [pc, #220]	; (801201c <__sinit+0xf4>)
 8011f3e:	2303      	movs	r3, #3
 8011f40:	f8da 5004 	ldr.w	r5, [sl, #4]
 8011f44:	4621      	mov	r1, r4
 8011f46:	f8ca 203c 	str.w	r2, [sl, #60]	; 0x3c
 8011f4a:	f50a 723b 	add.w	r2, sl, #748	; 0x2ec
 8011f4e:	f8ca 32e4 	str.w	r3, [sl, #740]	; 0x2e4
 8011f52:	2304      	movs	r3, #4
 8011f54:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8012030 <__sinit+0x108>
 8011f58:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8011f5c:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8012034 <__sinit+0x10c>
 8011f60:	4f2f      	ldr	r7, [pc, #188]	; (8012020 <__sinit+0xf8>)
 8011f62:	4e30      	ldr	r6, [pc, #192]	; (8012024 <__sinit+0xfc>)
 8011f64:	f8ca 22e8 	str.w	r2, [sl, #744]	; 0x2e8
 8011f68:	2208      	movs	r2, #8
 8011f6a:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
 8011f6e:	666c      	str	r4, [r5, #100]	; 0x64
 8011f70:	61ac      	str	r4, [r5, #24]
 8011f72:	e9c5 4302 	strd	r4, r3, [r5, #8]
 8011f76:	e9c5 4400 	strd	r4, r4, [r5]
 8011f7a:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8011f7e:	f7fa ffbf 	bl	800cf00 <memset>
 8011f82:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8011f86:	62ee      	str	r6, [r5, #44]	; 0x2c
 8011f88:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8011f8c:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8011f90:	f7fd ff7c 	bl	800fe8c <__retarget_lock_init_recursive>
 8011f94:	f8da 5008 	ldr.w	r5, [sl, #8]
 8011f98:	4b23      	ldr	r3, [pc, #140]	; (8012028 <__sinit+0x100>)
 8011f9a:	4621      	mov	r1, r4
 8011f9c:	2208      	movs	r2, #8
 8011f9e:	666c      	str	r4, [r5, #100]	; 0x64
 8011fa0:	60eb      	str	r3, [r5, #12]
 8011fa2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8011fa6:	60ac      	str	r4, [r5, #8]
 8011fa8:	61ac      	str	r4, [r5, #24]
 8011faa:	e9c5 4400 	strd	r4, r4, [r5]
 8011fae:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8011fb2:	f7fa ffa5 	bl	800cf00 <memset>
 8011fb6:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8011fba:	62ee      	str	r6, [r5, #44]	; 0x2c
 8011fbc:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8011fc0:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
 8011fc4:	f7fd ff62 	bl	800fe8c <__retarget_lock_init_recursive>
 8011fc8:	f8da 500c 	ldr.w	r5, [sl, #12]
 8011fcc:	4b17      	ldr	r3, [pc, #92]	; (801202c <__sinit+0x104>)
 8011fce:	4621      	mov	r1, r4
 8011fd0:	2208      	movs	r2, #8
 8011fd2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8011fd6:	60eb      	str	r3, [r5, #12]
 8011fd8:	666c      	str	r4, [r5, #100]	; 0x64
 8011fda:	60ac      	str	r4, [r5, #8]
 8011fdc:	61ac      	str	r4, [r5, #24]
 8011fde:	e9c5 4400 	strd	r4, r4, [r5]
 8011fe2:	e9c5 4404 	strd	r4, r4, [r5, #16]
 8011fe6:	f7fa ff8b 	bl	800cf00 <memset>
 8011fea:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8011fee:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
 8011ff2:	e9c5 5907 	strd	r5, r9, [r5, #28]
 8011ff6:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
 8011ffa:	f7fd ff47 	bl	800fe8c <__retarget_lock_init_recursive>
 8011ffe:	2301      	movs	r3, #1
 8012000:	4805      	ldr	r0, [pc, #20]	; (8012018 <__sinit+0xf0>)
 8012002:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
 8012006:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801200a:	f7fd bf45 	b.w	800fe98 <__retarget_lock_release_recursive>
 801200e:	4802      	ldr	r0, [pc, #8]	; (8012018 <__sinit+0xf0>)
 8012010:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012014:	f7fd bf40 	b.w	800fe98 <__retarget_lock_release_recursive>
 8012018:	200067e4 	.word	0x200067e4
 801201c:	08011f1d 	.word	0x08011f1d
 8012020:	08012661 	.word	0x08012661
 8012024:	08012685 	.word	0x08012685
 8012028:	00010009 	.word	0x00010009
 801202c:	00020012 	.word	0x00020012
 8012030:	080125fd 	.word	0x080125fd
 8012034:	08012621 	.word	0x08012621

08012038 <__sfp_lock_acquire>:
 8012038:	4801      	ldr	r0, [pc, #4]	; (8012040 <__sfp_lock_acquire+0x8>)
 801203a:	f7fd bf2b 	b.w	800fe94 <__retarget_lock_acquire_recursive>
 801203e:	bf00      	nop
 8012040:	200067e0 	.word	0x200067e0

08012044 <__sfp_lock_release>:
 8012044:	4801      	ldr	r0, [pc, #4]	; (801204c <__sfp_lock_release+0x8>)
 8012046:	f7fd bf27 	b.w	800fe98 <__retarget_lock_release_recursive>
 801204a:	bf00      	nop
 801204c:	200067e0 	.word	0x200067e0

08012050 <__fputwc>:
 8012050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012054:	b082      	sub	sp, #8
 8012056:	4682      	mov	sl, r0
 8012058:	4688      	mov	r8, r1
 801205a:	4614      	mov	r4, r2
 801205c:	f7fe fcb4 	bl	80109c8 <__locale_mb_cur_max>
 8012060:	2801      	cmp	r0, #1
 8012062:	d103      	bne.n	801206c <__fputwc+0x1c>
 8012064:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8012068:	2bfe      	cmp	r3, #254	; 0xfe
 801206a:	d931      	bls.n	80120d0 <__fputwc+0x80>
 801206c:	4642      	mov	r2, r8
 801206e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8012072:	a901      	add	r1, sp, #4
 8012074:	4650      	mov	r0, sl
 8012076:	f000 fb61 	bl	801273c <_wcrtomb_r>
 801207a:	1c42      	adds	r2, r0, #1
 801207c:	4606      	mov	r6, r0
 801207e:	d032      	beq.n	80120e6 <__fputwc+0x96>
 8012080:	b360      	cbz	r0, 80120dc <__fputwc+0x8c>
 8012082:	f89d c004 	ldrb.w	ip, [sp, #4]
 8012086:	f10d 0905 	add.w	r9, sp, #5
 801208a:	2500      	movs	r5, #0
 801208c:	e00c      	b.n	80120a8 <__fputwc+0x58>
 801208e:	f1bc 0f0a 	cmp.w	ip, #10
 8012092:	d014      	beq.n	80120be <__fputwc+0x6e>
 8012094:	6823      	ldr	r3, [r4, #0]
 8012096:	1c5a      	adds	r2, r3, #1
 8012098:	6022      	str	r2, [r4, #0]
 801209a:	f883 c000 	strb.w	ip, [r3]
 801209e:	3501      	adds	r5, #1
 80120a0:	42b5      	cmp	r5, r6
 80120a2:	d21b      	bcs.n	80120dc <__fputwc+0x8c>
 80120a4:	f819 cb01 	ldrb.w	ip, [r9], #1
 80120a8:	68a3      	ldr	r3, [r4, #8]
 80120aa:	3b01      	subs	r3, #1
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	60a3      	str	r3, [r4, #8]
 80120b0:	daf0      	bge.n	8012094 <__fputwc+0x44>
 80120b2:	69a7      	ldr	r7, [r4, #24]
 80120b4:	4661      	mov	r1, ip
 80120b6:	4622      	mov	r2, r4
 80120b8:	4650      	mov	r0, sl
 80120ba:	42bb      	cmp	r3, r7
 80120bc:	dae7      	bge.n	801208e <__fputwc+0x3e>
 80120be:	f000 fae5 	bl	801268c <__swbuf_r>
 80120c2:	1c43      	adds	r3, r0, #1
 80120c4:	d1eb      	bne.n	801209e <__fputwc+0x4e>
 80120c6:	4606      	mov	r6, r0
 80120c8:	4630      	mov	r0, r6
 80120ca:	b002      	add	sp, #8
 80120cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120d0:	fa5f fc88 	uxtb.w	ip, r8
 80120d4:	4606      	mov	r6, r0
 80120d6:	f88d c004 	strb.w	ip, [sp, #4]
 80120da:	e7d4      	b.n	8012086 <__fputwc+0x36>
 80120dc:	4646      	mov	r6, r8
 80120de:	4630      	mov	r0, r6
 80120e0:	b002      	add	sp, #8
 80120e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120e6:	89a3      	ldrh	r3, [r4, #12]
 80120e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80120ec:	81a3      	strh	r3, [r4, #12]
 80120ee:	e7eb      	b.n	80120c8 <__fputwc+0x78>

080120f0 <_fputwc_r>:
 80120f0:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80120f2:	f013 0f01 	tst.w	r3, #1
 80120f6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80120fa:	b530      	push	{r4, r5, lr}
 80120fc:	4614      	mov	r4, r2
 80120fe:	b083      	sub	sp, #12
 8012100:	4605      	mov	r5, r0
 8012102:	b29a      	uxth	r2, r3
 8012104:	d101      	bne.n	801210a <_fputwc_r+0x1a>
 8012106:	0598      	lsls	r0, r3, #22
 8012108:	d51c      	bpl.n	8012144 <_fputwc_r+0x54>
 801210a:	0490      	lsls	r0, r2, #18
 801210c:	d406      	bmi.n	801211c <_fputwc_r+0x2c>
 801210e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012110:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012114:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012118:	81a3      	strh	r3, [r4, #12]
 801211a:	6662      	str	r2, [r4, #100]	; 0x64
 801211c:	4622      	mov	r2, r4
 801211e:	4628      	mov	r0, r5
 8012120:	f7ff ff96 	bl	8012050 <__fputwc>
 8012124:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012126:	4605      	mov	r5, r0
 8012128:	07da      	lsls	r2, r3, #31
 801212a:	d402      	bmi.n	8012132 <_fputwc_r+0x42>
 801212c:	89a3      	ldrh	r3, [r4, #12]
 801212e:	059b      	lsls	r3, r3, #22
 8012130:	d502      	bpl.n	8012138 <_fputwc_r+0x48>
 8012132:	4628      	mov	r0, r5
 8012134:	b003      	add	sp, #12
 8012136:	bd30      	pop	{r4, r5, pc}
 8012138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801213a:	f7fd fead 	bl	800fe98 <__retarget_lock_release_recursive>
 801213e:	4628      	mov	r0, r5
 8012140:	b003      	add	sp, #12
 8012142:	bd30      	pop	{r4, r5, pc}
 8012144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012146:	9101      	str	r1, [sp, #4]
 8012148:	f7fd fea4 	bl	800fe94 <__retarget_lock_acquire_recursive>
 801214c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012150:	9901      	ldr	r1, [sp, #4]
 8012152:	b29a      	uxth	r2, r3
 8012154:	e7d9      	b.n	801210a <_fputwc_r+0x1a>
 8012156:	bf00      	nop

08012158 <__sfvwrite_r>:
 8012158:	6893      	ldr	r3, [r2, #8]
 801215a:	2b00      	cmp	r3, #0
 801215c:	f000 8085 	beq.w	801226a <__sfvwrite_r+0x112>
 8012160:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8012164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012168:	460c      	mov	r4, r1
 801216a:	0719      	lsls	r1, r3, #28
 801216c:	4680      	mov	r8, r0
 801216e:	b083      	sub	sp, #12
 8012170:	4617      	mov	r7, r2
 8012172:	b298      	uxth	r0, r3
 8012174:	d525      	bpl.n	80121c2 <__sfvwrite_r+0x6a>
 8012176:	6923      	ldr	r3, [r4, #16]
 8012178:	b31b      	cbz	r3, 80121c2 <__sfvwrite_r+0x6a>
 801217a:	f010 0302 	ands.w	r3, r0, #2
 801217e:	683d      	ldr	r5, [r7, #0]
 8012180:	d02d      	beq.n	80121de <__sfvwrite_r+0x86>
 8012182:	f04f 0a00 	mov.w	sl, #0
 8012186:	f8df b2c0 	ldr.w	fp, [pc, #704]	; 8012448 <__sfvwrite_r+0x2f0>
 801218a:	46b9      	mov	r9, r7
 801218c:	4656      	mov	r6, sl
 801218e:	455e      	cmp	r6, fp
 8012190:	4633      	mov	r3, r6
 8012192:	4652      	mov	r2, sl
 8012194:	4640      	mov	r0, r8
 8012196:	bf28      	it	cs
 8012198:	465b      	movcs	r3, fp
 801219a:	2e00      	cmp	r6, #0
 801219c:	d052      	beq.n	8012244 <__sfvwrite_r+0xec>
 801219e:	69e1      	ldr	r1, [r4, #28]
 80121a0:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80121a2:	47b8      	blx	r7
 80121a4:	2800      	cmp	r0, #0
 80121a6:	dd56      	ble.n	8012256 <__sfvwrite_r+0xfe>
 80121a8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80121ac:	4482      	add	sl, r0
 80121ae:	1a36      	subs	r6, r6, r0
 80121b0:	1a18      	subs	r0, r3, r0
 80121b2:	f8c9 0008 	str.w	r0, [r9, #8]
 80121b6:	2800      	cmp	r0, #0
 80121b8:	d1e9      	bne.n	801218e <__sfvwrite_r+0x36>
 80121ba:	2000      	movs	r0, #0
 80121bc:	b003      	add	sp, #12
 80121be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121c2:	4621      	mov	r1, r4
 80121c4:	4640      	mov	r0, r8
 80121c6:	f7ff fd65 	bl	8011c94 <__swsetup_r>
 80121ca:	2800      	cmp	r0, #0
 80121cc:	f040 8139 	bne.w	8012442 <__sfvwrite_r+0x2ea>
 80121d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80121d4:	683d      	ldr	r5, [r7, #0]
 80121d6:	b298      	uxth	r0, r3
 80121d8:	f010 0302 	ands.w	r3, r0, #2
 80121dc:	d1d1      	bne.n	8012182 <__sfvwrite_r+0x2a>
 80121de:	f010 0901 	ands.w	r9, r0, #1
 80121e2:	d144      	bne.n	801226e <__sfvwrite_r+0x116>
 80121e4:	464e      	mov	r6, r9
 80121e6:	9700      	str	r7, [sp, #0]
 80121e8:	b346      	cbz	r6, 801223c <__sfvwrite_r+0xe4>
 80121ea:	0582      	lsls	r2, r0, #22
 80121ec:	f8d4 b008 	ldr.w	fp, [r4, #8]
 80121f0:	f140 8086 	bpl.w	8012300 <__sfvwrite_r+0x1a8>
 80121f4:	45b3      	cmp	fp, r6
 80121f6:	465a      	mov	r2, fp
 80121f8:	f200 80b5 	bhi.w	8012366 <__sfvwrite_r+0x20e>
 80121fc:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8012200:	f040 80c2 	bne.w	8012388 <__sfvwrite_r+0x230>
 8012204:	6820      	ldr	r0, [r4, #0]
 8012206:	4649      	mov	r1, r9
 8012208:	9201      	str	r2, [sp, #4]
 801220a:	f7fa fdfd 	bl	800ce08 <memmove>
 801220e:	68a3      	ldr	r3, [r4, #8]
 8012210:	9a01      	ldr	r2, [sp, #4]
 8012212:	46b2      	mov	sl, r6
 8012214:	eba3 010b 	sub.w	r1, r3, fp
 8012218:	6823      	ldr	r3, [r4, #0]
 801221a:	2600      	movs	r6, #0
 801221c:	4413      	add	r3, r2
 801221e:	60a1      	str	r1, [r4, #8]
 8012220:	6023      	str	r3, [r4, #0]
 8012222:	9b00      	ldr	r3, [sp, #0]
 8012224:	44d1      	add	r9, sl
 8012226:	6898      	ldr	r0, [r3, #8]
 8012228:	eba0 000a 	sub.w	r0, r0, sl
 801222c:	6098      	str	r0, [r3, #8]
 801222e:	2800      	cmp	r0, #0
 8012230:	d0c3      	beq.n	80121ba <__sfvwrite_r+0x62>
 8012232:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8012236:	b280      	uxth	r0, r0
 8012238:	2e00      	cmp	r6, #0
 801223a:	d1d6      	bne.n	80121ea <__sfvwrite_r+0x92>
 801223c:	e9d5 9600 	ldrd	r9, r6, [r5]
 8012240:	3508      	adds	r5, #8
 8012242:	e7d1      	b.n	80121e8 <__sfvwrite_r+0x90>
 8012244:	e9d5 a600 	ldrd	sl, r6, [r5]
 8012248:	3508      	adds	r5, #8
 801224a:	e7a0      	b.n	801218e <__sfvwrite_r+0x36>
 801224c:	4621      	mov	r1, r4
 801224e:	4640      	mov	r0, r8
 8012250:	f7ff fe36 	bl	8011ec0 <_fflush_r>
 8012254:	b388      	cbz	r0, 80122ba <__sfvwrite_r+0x162>
 8012256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801225a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801225e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012262:	81a3      	strh	r3, [r4, #12]
 8012264:	b003      	add	sp, #12
 8012266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801226a:	2000      	movs	r0, #0
 801226c:	4770      	bx	lr
 801226e:	461e      	mov	r6, r3
 8012270:	46aa      	mov	sl, r5
 8012272:	4699      	mov	r9, r3
 8012274:	4618      	mov	r0, r3
 8012276:	461d      	mov	r5, r3
 8012278:	9700      	str	r7, [sp, #0]
 801227a:	b35e      	cbz	r6, 80122d4 <__sfvwrite_r+0x17c>
 801227c:	2800      	cmp	r0, #0
 801227e:	d033      	beq.n	80122e8 <__sfvwrite_r+0x190>
 8012280:	464a      	mov	r2, r9
 8012282:	68a1      	ldr	r1, [r4, #8]
 8012284:	42b2      	cmp	r2, r6
 8012286:	6963      	ldr	r3, [r4, #20]
 8012288:	6820      	ldr	r0, [r4, #0]
 801228a:	bf28      	it	cs
 801228c:	4632      	movcs	r2, r6
 801228e:	eb03 0b01 	add.w	fp, r3, r1
 8012292:	6921      	ldr	r1, [r4, #16]
 8012294:	4288      	cmp	r0, r1
 8012296:	d902      	bls.n	801229e <__sfvwrite_r+0x146>
 8012298:	455a      	cmp	r2, fp
 801229a:	f300 80a8 	bgt.w	80123ee <__sfvwrite_r+0x296>
 801229e:	4293      	cmp	r3, r2
 80122a0:	dc65      	bgt.n	801236e <__sfvwrite_r+0x216>
 80122a2:	462a      	mov	r2, r5
 80122a4:	69e1      	ldr	r1, [r4, #28]
 80122a6:	4640      	mov	r0, r8
 80122a8:	6a67      	ldr	r7, [r4, #36]	; 0x24
 80122aa:	47b8      	blx	r7
 80122ac:	f1b0 0b00 	subs.w	fp, r0, #0
 80122b0:	ddd1      	ble.n	8012256 <__sfvwrite_r+0xfe>
 80122b2:	ebb9 090b 	subs.w	r9, r9, fp
 80122b6:	d0c9      	beq.n	801224c <__sfvwrite_r+0xf4>
 80122b8:	2001      	movs	r0, #1
 80122ba:	9b00      	ldr	r3, [sp, #0]
 80122bc:	445d      	add	r5, fp
 80122be:	eba6 060b 	sub.w	r6, r6, fp
 80122c2:	689a      	ldr	r2, [r3, #8]
 80122c4:	eba2 020b 	sub.w	r2, r2, fp
 80122c8:	609a      	str	r2, [r3, #8]
 80122ca:	2a00      	cmp	r2, #0
 80122cc:	f43f af75 	beq.w	80121ba <__sfvwrite_r+0x62>
 80122d0:	2e00      	cmp	r6, #0
 80122d2:	d1d3      	bne.n	801227c <__sfvwrite_r+0x124>
 80122d4:	f10a 0308 	add.w	r3, sl, #8
 80122d8:	f853 6c04 	ldr.w	r6, [r3, #-4]
 80122dc:	469a      	mov	sl, r3
 80122de:	f853 5c08 	ldr.w	r5, [r3, #-8]
 80122e2:	3308      	adds	r3, #8
 80122e4:	2e00      	cmp	r6, #0
 80122e6:	d0f7      	beq.n	80122d8 <__sfvwrite_r+0x180>
 80122e8:	4632      	mov	r2, r6
 80122ea:	210a      	movs	r1, #10
 80122ec:	4628      	mov	r0, r5
 80122ee:	f7fd fdd5 	bl	800fe9c <memchr>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	f000 809c 	beq.w	8012430 <__sfvwrite_r+0x2d8>
 80122f8:	3001      	adds	r0, #1
 80122fa:	eba0 0905 	sub.w	r9, r0, r5
 80122fe:	e7bf      	b.n	8012280 <__sfvwrite_r+0x128>
 8012300:	6820      	ldr	r0, [r4, #0]
 8012302:	6923      	ldr	r3, [r4, #16]
 8012304:	4298      	cmp	r0, r3
 8012306:	d816      	bhi.n	8012336 <__sfvwrite_r+0x1de>
 8012308:	6963      	ldr	r3, [r4, #20]
 801230a:	42b3      	cmp	r3, r6
 801230c:	d813      	bhi.n	8012336 <__sfvwrite_r+0x1de>
 801230e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012312:	69e1      	ldr	r1, [r4, #28]
 8012314:	4640      	mov	r0, r8
 8012316:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8012318:	42b2      	cmp	r2, r6
 801231a:	bf28      	it	cs
 801231c:	4632      	movcs	r2, r6
 801231e:	fb92 f2f3 	sdiv	r2, r2, r3
 8012322:	fb02 f303 	mul.w	r3, r2, r3
 8012326:	464a      	mov	r2, r9
 8012328:	47b8      	blx	r7
 801232a:	f1b0 0a00 	subs.w	sl, r0, #0
 801232e:	dd92      	ble.n	8012256 <__sfvwrite_r+0xfe>
 8012330:	eba6 060a 	sub.w	r6, r6, sl
 8012334:	e775      	b.n	8012222 <__sfvwrite_r+0xca>
 8012336:	45b3      	cmp	fp, r6
 8012338:	46da      	mov	sl, fp
 801233a:	4649      	mov	r1, r9
 801233c:	bf28      	it	cs
 801233e:	46b2      	movcs	sl, r6
 8012340:	4652      	mov	r2, sl
 8012342:	f7fa fd61 	bl	800ce08 <memmove>
 8012346:	68a3      	ldr	r3, [r4, #8]
 8012348:	6822      	ldr	r2, [r4, #0]
 801234a:	eba3 030a 	sub.w	r3, r3, sl
 801234e:	4452      	add	r2, sl
 8012350:	60a3      	str	r3, [r4, #8]
 8012352:	6022      	str	r2, [r4, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d1eb      	bne.n	8012330 <__sfvwrite_r+0x1d8>
 8012358:	4621      	mov	r1, r4
 801235a:	4640      	mov	r0, r8
 801235c:	f7ff fdb0 	bl	8011ec0 <_fflush_r>
 8012360:	2800      	cmp	r0, #0
 8012362:	d0e5      	beq.n	8012330 <__sfvwrite_r+0x1d8>
 8012364:	e777      	b.n	8012256 <__sfvwrite_r+0xfe>
 8012366:	46b3      	mov	fp, r6
 8012368:	6820      	ldr	r0, [r4, #0]
 801236a:	4632      	mov	r2, r6
 801236c:	e74b      	b.n	8012206 <__sfvwrite_r+0xae>
 801236e:	4629      	mov	r1, r5
 8012370:	9201      	str	r2, [sp, #4]
 8012372:	f7fa fd49 	bl	800ce08 <memmove>
 8012376:	9a01      	ldr	r2, [sp, #4]
 8012378:	68a3      	ldr	r3, [r4, #8]
 801237a:	4693      	mov	fp, r2
 801237c:	1a9b      	subs	r3, r3, r2
 801237e:	60a3      	str	r3, [r4, #8]
 8012380:	6823      	ldr	r3, [r4, #0]
 8012382:	4413      	add	r3, r2
 8012384:	6023      	str	r3, [r4, #0]
 8012386:	e794      	b.n	80122b2 <__sfvwrite_r+0x15a>
 8012388:	6823      	ldr	r3, [r4, #0]
 801238a:	6921      	ldr	r1, [r4, #16]
 801238c:	eba3 0b01 	sub.w	fp, r3, r1
 8012390:	6963      	ldr	r3, [r4, #20]
 8012392:	eb13 0343 	adds.w	r3, r3, r3, lsl #1
 8012396:	bf48      	it	mi
 8012398:	3301      	addmi	r3, #1
 801239a:	ea4f 0a63 	mov.w	sl, r3, asr #1
 801239e:	f10b 0301 	add.w	r3, fp, #1
 80123a2:	4433      	add	r3, r6
 80123a4:	4652      	mov	r2, sl
 80123a6:	4553      	cmp	r3, sl
 80123a8:	d901      	bls.n	80123ae <__sfvwrite_r+0x256>
 80123aa:	469a      	mov	sl, r3
 80123ac:	461a      	mov	r2, r3
 80123ae:	0543      	lsls	r3, r0, #21
 80123b0:	d52c      	bpl.n	801240c <__sfvwrite_r+0x2b4>
 80123b2:	4611      	mov	r1, r2
 80123b4:	4640      	mov	r0, r8
 80123b6:	f7fa fa6d 	bl	800c894 <_malloc_r>
 80123ba:	2800      	cmp	r0, #0
 80123bc:	d03b      	beq.n	8012436 <__sfvwrite_r+0x2de>
 80123be:	465a      	mov	r2, fp
 80123c0:	6921      	ldr	r1, [r4, #16]
 80123c2:	9001      	str	r0, [sp, #4]
 80123c4:	f7ee fe18 	bl	8000ff8 <memcpy>
 80123c8:	89a2      	ldrh	r2, [r4, #12]
 80123ca:	9b01      	ldr	r3, [sp, #4]
 80123cc:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80123d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80123d4:	81a2      	strh	r2, [r4, #12]
 80123d6:	eb03 000b 	add.w	r0, r3, fp
 80123da:	6123      	str	r3, [r4, #16]
 80123dc:	ebaa 030b 	sub.w	r3, sl, fp
 80123e0:	4632      	mov	r2, r6
 80123e2:	46b3      	mov	fp, r6
 80123e4:	f8c4 a014 	str.w	sl, [r4, #20]
 80123e8:	60a3      	str	r3, [r4, #8]
 80123ea:	6020      	str	r0, [r4, #0]
 80123ec:	e70b      	b.n	8012206 <__sfvwrite_r+0xae>
 80123ee:	4629      	mov	r1, r5
 80123f0:	465a      	mov	r2, fp
 80123f2:	f7fa fd09 	bl	800ce08 <memmove>
 80123f6:	6823      	ldr	r3, [r4, #0]
 80123f8:	4621      	mov	r1, r4
 80123fa:	4640      	mov	r0, r8
 80123fc:	445b      	add	r3, fp
 80123fe:	6023      	str	r3, [r4, #0]
 8012400:	f7ff fd5e 	bl	8011ec0 <_fflush_r>
 8012404:	2800      	cmp	r0, #0
 8012406:	f43f af54 	beq.w	80122b2 <__sfvwrite_r+0x15a>
 801240a:	e724      	b.n	8012256 <__sfvwrite_r+0xfe>
 801240c:	4640      	mov	r0, r8
 801240e:	f7fe faf7 	bl	8010a00 <_realloc_r>
 8012412:	4603      	mov	r3, r0
 8012414:	2800      	cmp	r0, #0
 8012416:	d1de      	bne.n	80123d6 <__sfvwrite_r+0x27e>
 8012418:	6921      	ldr	r1, [r4, #16]
 801241a:	4640      	mov	r0, r8
 801241c:	f7fd fc2c 	bl	800fc78 <_free_r>
 8012420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012424:	220c      	movs	r2, #12
 8012426:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801242a:	f8c8 2000 	str.w	r2, [r8]
 801242e:	e714      	b.n	801225a <__sfvwrite_r+0x102>
 8012430:	1c72      	adds	r2, r6, #1
 8012432:	4691      	mov	r9, r2
 8012434:	e725      	b.n	8012282 <__sfvwrite_r+0x12a>
 8012436:	220c      	movs	r2, #12
 8012438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801243c:	f8c8 2000 	str.w	r2, [r8]
 8012440:	e70b      	b.n	801225a <__sfvwrite_r+0x102>
 8012442:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012446:	e6b9      	b.n	80121bc <__sfvwrite_r+0x64>
 8012448:	7ffffc00 	.word	0x7ffffc00

0801244c <_fwalk_reent>:
 801244c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012450:	2600      	movs	r6, #0
 8012452:	4681      	mov	r9, r0
 8012454:	4688      	mov	r8, r1
 8012456:	f500 7738 	add.w	r7, r0, #736	; 0x2e0
 801245a:	e9d7 5401 	ldrd	r5, r4, [r7, #4]
 801245e:	3d01      	subs	r5, #1
 8012460:	d40f      	bmi.n	8012482 <_fwalk_reent+0x36>
 8012462:	89a3      	ldrh	r3, [r4, #12]
 8012464:	3d01      	subs	r5, #1
 8012466:	2b01      	cmp	r3, #1
 8012468:	d907      	bls.n	801247a <_fwalk_reent+0x2e>
 801246a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801246e:	4621      	mov	r1, r4
 8012470:	4648      	mov	r0, r9
 8012472:	3301      	adds	r3, #1
 8012474:	d001      	beq.n	801247a <_fwalk_reent+0x2e>
 8012476:	47c0      	blx	r8
 8012478:	4306      	orrs	r6, r0
 801247a:	1c6b      	adds	r3, r5, #1
 801247c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8012480:	d1ef      	bne.n	8012462 <_fwalk_reent+0x16>
 8012482:	683f      	ldr	r7, [r7, #0]
 8012484:	2f00      	cmp	r7, #0
 8012486:	d1e8      	bne.n	801245a <_fwalk_reent+0xe>
 8012488:	4630      	mov	r0, r6
 801248a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801248e:	bf00      	nop

08012490 <__smakebuf_r>:
 8012490:	898b      	ldrh	r3, [r1, #12]
 8012492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012496:	460c      	mov	r4, r1
 8012498:	0799      	lsls	r1, r3, #30
 801249a:	b096      	sub	sp, #88	; 0x58
 801249c:	d508      	bpl.n	80124b0 <__smakebuf_r+0x20>
 801249e:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80124a2:	2201      	movs	r2, #1
 80124a4:	6023      	str	r3, [r4, #0]
 80124a6:	e9c4 3204 	strd	r3, r2, [r4, #16]
 80124aa:	b016      	add	sp, #88	; 0x58
 80124ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124b4:	4606      	mov	r6, r0
 80124b6:	2900      	cmp	r1, #0
 80124b8:	db27      	blt.n	801250a <__smakebuf_r+0x7a>
 80124ba:	466a      	mov	r2, sp
 80124bc:	f000 f9ea 	bl	8012894 <_fstat_r>
 80124c0:	2800      	cmp	r0, #0
 80124c2:	db21      	blt.n	8012508 <__smakebuf_r+0x78>
 80124c4:	9d01      	ldr	r5, [sp, #4]
 80124c6:	f44f 6880 	mov.w	r8, #1024	; 0x400
 80124ca:	f44f 6700 	mov.w	r7, #2048	; 0x800
 80124ce:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80124d2:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
 80124d6:	fab5 f585 	clz	r5, r5
 80124da:	096d      	lsrs	r5, r5, #5
 80124dc:	4641      	mov	r1, r8
 80124de:	4630      	mov	r0, r6
 80124e0:	f7fa f9d8 	bl	800c894 <_malloc_r>
 80124e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80124e8:	b1f0      	cbz	r0, 8012528 <__smakebuf_r+0x98>
 80124ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124ee:	4a1f      	ldr	r2, [pc, #124]	; (801256c <__smakebuf_r+0xdc>)
 80124f0:	63f2      	str	r2, [r6, #60]	; 0x3c
 80124f2:	f8c4 8014 	str.w	r8, [r4, #20]
 80124f6:	81a3      	strh	r3, [r4, #12]
 80124f8:	6020      	str	r0, [r4, #0]
 80124fa:	6120      	str	r0, [r4, #16]
 80124fc:	bb35      	cbnz	r5, 801254c <__smakebuf_r+0xbc>
 80124fe:	433b      	orrs	r3, r7
 8012500:	81a3      	strh	r3, [r4, #12]
 8012502:	b016      	add	sp, #88	; 0x58
 8012504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012508:	89a3      	ldrh	r3, [r4, #12]
 801250a:	f013 0580 	ands.w	r5, r3, #128	; 0x80
 801250e:	d019      	beq.n	8012544 <__smakebuf_r+0xb4>
 8012510:	f04f 0840 	mov.w	r8, #64	; 0x40
 8012514:	2500      	movs	r5, #0
 8012516:	4630      	mov	r0, r6
 8012518:	4641      	mov	r1, r8
 801251a:	462f      	mov	r7, r5
 801251c:	f7fa f9ba 	bl	800c894 <_malloc_r>
 8012520:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012524:	2800      	cmp	r0, #0
 8012526:	d1e0      	bne.n	80124ea <__smakebuf_r+0x5a>
 8012528:	059a      	lsls	r2, r3, #22
 801252a:	d4be      	bmi.n	80124aa <__smakebuf_r+0x1a>
 801252c:	f023 0303 	bic.w	r3, r3, #3
 8012530:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012534:	2101      	movs	r1, #1
 8012536:	f043 0302 	orr.w	r3, r3, #2
 801253a:	6022      	str	r2, [r4, #0]
 801253c:	e9c4 2104 	strd	r2, r1, [r4, #16]
 8012540:	81a3      	strh	r3, [r4, #12]
 8012542:	e7b2      	b.n	80124aa <__smakebuf_r+0x1a>
 8012544:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8012548:	462f      	mov	r7, r5
 801254a:	e7c7      	b.n	80124dc <__smakebuf_r+0x4c>
 801254c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012550:	4630      	mov	r0, r6
 8012552:	f000 f9b5 	bl	80128c0 <_isatty_r>
 8012556:	b910      	cbnz	r0, 801255e <__smakebuf_r+0xce>
 8012558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801255c:	e7cf      	b.n	80124fe <__smakebuf_r+0x6e>
 801255e:	89a3      	ldrh	r3, [r4, #12]
 8012560:	f023 0303 	bic.w	r3, r3, #3
 8012564:	f043 0301 	orr.w	r3, r3, #1
 8012568:	b21b      	sxth	r3, r3
 801256a:	e7c8      	b.n	80124fe <__smakebuf_r+0x6e>
 801256c:	08011f1d 	.word	0x08011f1d

08012570 <raise>:
 8012570:	b538      	push	{r3, r4, r5, lr}
 8012572:	281f      	cmp	r0, #31
 8012574:	4b14      	ldr	r3, [pc, #80]	; (80125c8 <raise+0x58>)
 8012576:	681d      	ldr	r5, [r3, #0]
 8012578:	d820      	bhi.n	80125bc <raise+0x4c>
 801257a:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
 801257e:	4604      	mov	r4, r0
 8012580:	b162      	cbz	r2, 801259c <raise+0x2c>
 8012582:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8012586:	b14b      	cbz	r3, 801259c <raise+0x2c>
 8012588:	2b01      	cmp	r3, #1
 801258a:	d015      	beq.n	80125b8 <raise+0x48>
 801258c:	1c59      	adds	r1, r3, #1
 801258e:	d00f      	beq.n	80125b0 <raise+0x40>
 8012590:	2500      	movs	r5, #0
 8012592:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
 8012596:	4798      	blx	r3
 8012598:	4628      	mov	r0, r5
 801259a:	bd38      	pop	{r3, r4, r5, pc}
 801259c:	4628      	mov	r0, r5
 801259e:	f000 f82b 	bl	80125f8 <_getpid_r>
 80125a2:	4622      	mov	r2, r4
 80125a4:	4601      	mov	r1, r0
 80125a6:	4628      	mov	r0, r5
 80125a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125ac:	f000 b80e 	b.w	80125cc <_kill_r>
 80125b0:	2316      	movs	r3, #22
 80125b2:	2001      	movs	r0, #1
 80125b4:	602b      	str	r3, [r5, #0]
 80125b6:	bd38      	pop	{r3, r4, r5, pc}
 80125b8:	2000      	movs	r0, #0
 80125ba:	bd38      	pop	{r3, r4, r5, pc}
 80125bc:	2316      	movs	r3, #22
 80125be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125c2:	602b      	str	r3, [r5, #0]
 80125c4:	bd38      	pop	{r3, r4, r5, pc}
 80125c6:	bf00      	nop
 80125c8:	200001ec 	.word	0x200001ec

080125cc <_kill_r>:
 80125cc:	b570      	push	{r4, r5, r6, lr}
 80125ce:	460c      	mov	r4, r1
 80125d0:	4603      	mov	r3, r0
 80125d2:	4d08      	ldr	r5, [pc, #32]	; (80125f4 <_kill_r+0x28>)
 80125d4:	2600      	movs	r6, #0
 80125d6:	4620      	mov	r0, r4
 80125d8:	4611      	mov	r1, r2
 80125da:	461c      	mov	r4, r3
 80125dc:	602e      	str	r6, [r5, #0]
 80125de:	f000 f9cd 	bl	801297c <_kill>
 80125e2:	1c43      	adds	r3, r0, #1
 80125e4:	d000      	beq.n	80125e8 <_kill_r+0x1c>
 80125e6:	bd70      	pop	{r4, r5, r6, pc}
 80125e8:	682b      	ldr	r3, [r5, #0]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d0fb      	beq.n	80125e6 <_kill_r+0x1a>
 80125ee:	6023      	str	r3, [r4, #0]
 80125f0:	bd70      	pop	{r4, r5, r6, pc}
 80125f2:	bf00      	nop
 80125f4:	200067e8 	.word	0x200067e8

080125f8 <_getpid_r>:
 80125f8:	f000 b9b0 	b.w	801295c <_getpid>

080125fc <__sread>:
 80125fc:	b510      	push	{r4, lr}
 80125fe:	460c      	mov	r4, r1
 8012600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012604:	f000 f984 	bl	8012910 <_read_r>
 8012608:	2800      	cmp	r0, #0
 801260a:	db03      	blt.n	8012614 <__sread+0x18>
 801260c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801260e:	4403      	add	r3, r0
 8012610:	6523      	str	r3, [r4, #80]	; 0x50
 8012612:	bd10      	pop	{r4, pc}
 8012614:	89a3      	ldrh	r3, [r4, #12]
 8012616:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801261a:	81a3      	strh	r3, [r4, #12]
 801261c:	bd10      	pop	{r4, pc}
 801261e:	bf00      	nop

08012620 <__swrite>:
 8012620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012624:	460c      	mov	r4, r1
 8012626:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
 801262a:	461f      	mov	r7, r3
 801262c:	4605      	mov	r5, r0
 801262e:	05cb      	lsls	r3, r1, #23
 8012630:	4616      	mov	r6, r2
 8012632:	d40b      	bmi.n	801264c <__swrite+0x2c>
 8012634:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8012638:	463b      	mov	r3, r7
 801263a:	4632      	mov	r2, r6
 801263c:	4628      	mov	r0, r5
 801263e:	81a1      	strh	r1, [r4, #12]
 8012640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012648:	f000 b896 	b.w	8012778 <_write_r>
 801264c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012650:	2302      	movs	r3, #2
 8012652:	2200      	movs	r2, #0
 8012654:	f000 f946 	bl	80128e4 <_lseek_r>
 8012658:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801265c:	e7ea      	b.n	8012634 <__swrite+0x14>
 801265e:	bf00      	nop

08012660 <__sseek>:
 8012660:	b510      	push	{r4, lr}
 8012662:	460c      	mov	r4, r1
 8012664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012668:	f000 f93c 	bl	80128e4 <_lseek_r>
 801266c:	1c42      	adds	r2, r0, #1
 801266e:	89a3      	ldrh	r3, [r4, #12]
 8012670:	d004      	beq.n	801267c <__sseek+0x1c>
 8012672:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8012676:	6520      	str	r0, [r4, #80]	; 0x50
 8012678:	81a3      	strh	r3, [r4, #12]
 801267a:	bd10      	pop	{r4, pc}
 801267c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012680:	81a3      	strh	r3, [r4, #12]
 8012682:	bd10      	pop	{r4, pc}

08012684 <__sclose>:
 8012684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012688:	f000 b88c 	b.w	80127a4 <_close_r>

0801268c <__swbuf_r>:
 801268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801268e:	460d      	mov	r5, r1
 8012690:	4606      	mov	r6, r0
 8012692:	4614      	mov	r4, r2
 8012694:	b110      	cbz	r0, 801269c <__swbuf_r+0x10>
 8012696:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8012698:	2b00      	cmp	r3, #0
 801269a:	d043      	beq.n	8012724 <__swbuf_r+0x98>
 801269c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126a0:	69a3      	ldr	r3, [r4, #24]
 80126a2:	0717      	lsls	r7, r2, #28
 80126a4:	b290      	uxth	r0, r2
 80126a6:	60a3      	str	r3, [r4, #8]
 80126a8:	d51b      	bpl.n	80126e2 <__swbuf_r+0x56>
 80126aa:	6923      	ldr	r3, [r4, #16]
 80126ac:	b1cb      	cbz	r3, 80126e2 <__swbuf_r+0x56>
 80126ae:	b2ed      	uxtb	r5, r5
 80126b0:	0481      	lsls	r1, r0, #18
 80126b2:	462f      	mov	r7, r5
 80126b4:	d522      	bpl.n	80126fc <__swbuf_r+0x70>
 80126b6:	6822      	ldr	r2, [r4, #0]
 80126b8:	6961      	ldr	r1, [r4, #20]
 80126ba:	1ad3      	subs	r3, r2, r3
 80126bc:	4299      	cmp	r1, r3
 80126be:	dd29      	ble.n	8012714 <__swbuf_r+0x88>
 80126c0:	3301      	adds	r3, #1
 80126c2:	68a1      	ldr	r1, [r4, #8]
 80126c4:	3901      	subs	r1, #1
 80126c6:	60a1      	str	r1, [r4, #8]
 80126c8:	1c51      	adds	r1, r2, #1
 80126ca:	6021      	str	r1, [r4, #0]
 80126cc:	7015      	strb	r5, [r2, #0]
 80126ce:	6962      	ldr	r2, [r4, #20]
 80126d0:	429a      	cmp	r2, r3
 80126d2:	d02a      	beq.n	801272a <__swbuf_r+0x9e>
 80126d4:	2d0a      	cmp	r5, #10
 80126d6:	d102      	bne.n	80126de <__swbuf_r+0x52>
 80126d8:	89a3      	ldrh	r3, [r4, #12]
 80126da:	07db      	lsls	r3, r3, #31
 80126dc:	d425      	bmi.n	801272a <__swbuf_r+0x9e>
 80126de:	4638      	mov	r0, r7
 80126e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126e2:	4621      	mov	r1, r4
 80126e4:	4630      	mov	r0, r6
 80126e6:	f7ff fad5 	bl	8011c94 <__swsetup_r>
 80126ea:	bb20      	cbnz	r0, 8012736 <__swbuf_r+0xaa>
 80126ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80126f0:	b2ed      	uxtb	r5, r5
 80126f2:	6923      	ldr	r3, [r4, #16]
 80126f4:	b290      	uxth	r0, r2
 80126f6:	462f      	mov	r7, r5
 80126f8:	0481      	lsls	r1, r0, #18
 80126fa:	d4dc      	bmi.n	80126b6 <__swbuf_r+0x2a>
 80126fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012700:	6961      	ldr	r1, [r4, #20]
 8012702:	81a2      	strh	r2, [r4, #12]
 8012704:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801270a:	6662      	str	r2, [r4, #100]	; 0x64
 801270c:	6822      	ldr	r2, [r4, #0]
 801270e:	1ad3      	subs	r3, r2, r3
 8012710:	4299      	cmp	r1, r3
 8012712:	dcd5      	bgt.n	80126c0 <__swbuf_r+0x34>
 8012714:	4621      	mov	r1, r4
 8012716:	4630      	mov	r0, r6
 8012718:	f7ff fbd2 	bl	8011ec0 <_fflush_r>
 801271c:	b958      	cbnz	r0, 8012736 <__swbuf_r+0xaa>
 801271e:	6822      	ldr	r2, [r4, #0]
 8012720:	2301      	movs	r3, #1
 8012722:	e7ce      	b.n	80126c2 <__swbuf_r+0x36>
 8012724:	f7ff fc00 	bl	8011f28 <__sinit>
 8012728:	e7b8      	b.n	801269c <__swbuf_r+0x10>
 801272a:	4621      	mov	r1, r4
 801272c:	4630      	mov	r0, r6
 801272e:	f7ff fbc7 	bl	8011ec0 <_fflush_r>
 8012732:	2800      	cmp	r0, #0
 8012734:	d0d3      	beq.n	80126de <__swbuf_r+0x52>
 8012736:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801273a:	e7d0      	b.n	80126de <__swbuf_r+0x52>

0801273c <_wcrtomb_r>:
 801273c:	b570      	push	{r4, r5, r6, lr}
 801273e:	4605      	mov	r5, r0
 8012740:	b084      	sub	sp, #16
 8012742:	461c      	mov	r4, r3
 8012744:	b139      	cbz	r1, 8012756 <_wcrtomb_r+0x1a>
 8012746:	4e0b      	ldr	r6, [pc, #44]	; (8012774 <_wcrtomb_r+0x38>)
 8012748:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
 801274c:	47b0      	blx	r6
 801274e:	1c43      	adds	r3, r0, #1
 8012750:	d009      	beq.n	8012766 <_wcrtomb_r+0x2a>
 8012752:	b004      	add	sp, #16
 8012754:	bd70      	pop	{r4, r5, r6, pc}
 8012756:	460a      	mov	r2, r1
 8012758:	4906      	ldr	r1, [pc, #24]	; (8012774 <_wcrtomb_r+0x38>)
 801275a:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
 801275e:	a901      	add	r1, sp, #4
 8012760:	47b0      	blx	r6
 8012762:	1c43      	adds	r3, r0, #1
 8012764:	d1f5      	bne.n	8012752 <_wcrtomb_r+0x16>
 8012766:	2200      	movs	r2, #0
 8012768:	238a      	movs	r3, #138	; 0x8a
 801276a:	6022      	str	r2, [r4, #0]
 801276c:	602b      	str	r3, [r5, #0]
 801276e:	b004      	add	sp, #16
 8012770:	bd70      	pop	{r4, r5, r6, pc}
 8012772:	bf00      	nop
 8012774:	20000a2c 	.word	0x20000a2c

08012778 <_write_r>:
 8012778:	b538      	push	{r3, r4, r5, lr}
 801277a:	460c      	mov	r4, r1
 801277c:	4684      	mov	ip, r0
 801277e:	4611      	mov	r1, r2
 8012780:	4d07      	ldr	r5, [pc, #28]	; (80127a0 <_write_r+0x28>)
 8012782:	461a      	mov	r2, r3
 8012784:	2300      	movs	r3, #0
 8012786:	4620      	mov	r0, r4
 8012788:	4664      	mov	r4, ip
 801278a:	602b      	str	r3, [r5, #0]
 801278c:	f000 f91e 	bl	80129cc <_write>
 8012790:	1c43      	adds	r3, r0, #1
 8012792:	d000      	beq.n	8012796 <_write_r+0x1e>
 8012794:	bd38      	pop	{r3, r4, r5, pc}
 8012796:	682b      	ldr	r3, [r5, #0]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d0fb      	beq.n	8012794 <_write_r+0x1c>
 801279c:	6023      	str	r3, [r4, #0]
 801279e:	bd38      	pop	{r3, r4, r5, pc}
 80127a0:	200067e8 	.word	0x200067e8

080127a4 <_close_r>:
 80127a4:	b538      	push	{r3, r4, r5, lr}
 80127a6:	2200      	movs	r2, #0
 80127a8:	4d06      	ldr	r5, [pc, #24]	; (80127c4 <_close_r+0x20>)
 80127aa:	4604      	mov	r4, r0
 80127ac:	4608      	mov	r0, r1
 80127ae:	602a      	str	r2, [r5, #0]
 80127b0:	f000 f8c4 	bl	801293c <_close>
 80127b4:	1c43      	adds	r3, r0, #1
 80127b6:	d000      	beq.n	80127ba <_close_r+0x16>
 80127b8:	bd38      	pop	{r3, r4, r5, pc}
 80127ba:	682b      	ldr	r3, [r5, #0]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d0fb      	beq.n	80127b8 <_close_r+0x14>
 80127c0:	6023      	str	r3, [r4, #0]
 80127c2:	bd38      	pop	{r3, r4, r5, pc}
 80127c4:	200067e8 	.word	0x200067e8

080127c8 <_fclose_r>:
 80127c8:	b570      	push	{r4, r5, r6, lr}
 80127ca:	2900      	cmp	r1, #0
 80127cc:	d04b      	beq.n	8012866 <_fclose_r+0x9e>
 80127ce:	4606      	mov	r6, r0
 80127d0:	460c      	mov	r4, r1
 80127d2:	b110      	cbz	r0, 80127da <_fclose_r+0x12>
 80127d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d048      	beq.n	801286c <_fclose_r+0xa4>
 80127da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80127dc:	07d8      	lsls	r0, r3, #31
 80127de:	d534      	bpl.n	801284a <_fclose_r+0x82>
 80127e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d03e      	beq.n	8012866 <_fclose_r+0x9e>
 80127e8:	4621      	mov	r1, r4
 80127ea:	4630      	mov	r0, r6
 80127ec:	f7ff fac4 	bl	8011d78 <__sflush_r>
 80127f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80127f2:	4605      	mov	r5, r0
 80127f4:	b133      	cbz	r3, 8012804 <_fclose_r+0x3c>
 80127f6:	69e1      	ldr	r1, [r4, #28]
 80127f8:	4630      	mov	r0, r6
 80127fa:	4798      	blx	r3
 80127fc:	2800      	cmp	r0, #0
 80127fe:	bfb8      	it	lt
 8012800:	f04f 35ff 	movlt.w	r5, #4294967295	; 0xffffffff
 8012804:	89a3      	ldrh	r3, [r4, #12]
 8012806:	061a      	lsls	r2, r3, #24
 8012808:	d43b      	bmi.n	8012882 <_fclose_r+0xba>
 801280a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801280c:	b141      	cbz	r1, 8012820 <_fclose_r+0x58>
 801280e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8012812:	4299      	cmp	r1, r3
 8012814:	d002      	beq.n	801281c <_fclose_r+0x54>
 8012816:	4630      	mov	r0, r6
 8012818:	f7fd fa2e 	bl	800fc78 <_free_r>
 801281c:	2300      	movs	r3, #0
 801281e:	6323      	str	r3, [r4, #48]	; 0x30
 8012820:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012822:	b121      	cbz	r1, 801282e <_fclose_r+0x66>
 8012824:	4630      	mov	r0, r6
 8012826:	f7fd fa27 	bl	800fc78 <_free_r>
 801282a:	2300      	movs	r3, #0
 801282c:	6463      	str	r3, [r4, #68]	; 0x44
 801282e:	f7ff fc03 	bl	8012038 <__sfp_lock_acquire>
 8012832:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012834:	2200      	movs	r2, #0
 8012836:	07db      	lsls	r3, r3, #31
 8012838:	81a2      	strh	r2, [r4, #12]
 801283a:	d527      	bpl.n	801288c <_fclose_r+0xc4>
 801283c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801283e:	f7fd fb27 	bl	800fe90 <__retarget_lock_close_recursive>
 8012842:	f7ff fbff 	bl	8012044 <__sfp_lock_release>
 8012846:	4628      	mov	r0, r5
 8012848:	bd70      	pop	{r4, r5, r6, pc}
 801284a:	89a3      	ldrh	r3, [r4, #12]
 801284c:	0599      	lsls	r1, r3, #22
 801284e:	d4cb      	bmi.n	80127e8 <_fclose_r+0x20>
 8012850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012852:	f7fd fb1f 	bl	800fe94 <__retarget_lock_acquire_recursive>
 8012856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d1c4      	bne.n	80127e8 <_fclose_r+0x20>
 801285e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8012860:	f015 0501 	ands.w	r5, r5, #1
 8012864:	d008      	beq.n	8012878 <_fclose_r+0xb0>
 8012866:	2500      	movs	r5, #0
 8012868:	4628      	mov	r0, r5
 801286a:	bd70      	pop	{r4, r5, r6, pc}
 801286c:	f7ff fb5c 	bl	8011f28 <__sinit>
 8012870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012872:	07d8      	lsls	r0, r3, #31
 8012874:	d4b4      	bmi.n	80127e0 <_fclose_r+0x18>
 8012876:	e7e8      	b.n	801284a <_fclose_r+0x82>
 8012878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801287a:	f7fd fb0d 	bl	800fe98 <__retarget_lock_release_recursive>
 801287e:	4628      	mov	r0, r5
 8012880:	bd70      	pop	{r4, r5, r6, pc}
 8012882:	6921      	ldr	r1, [r4, #16]
 8012884:	4630      	mov	r0, r6
 8012886:	f7fd f9f7 	bl	800fc78 <_free_r>
 801288a:	e7be      	b.n	801280a <_fclose_r+0x42>
 801288c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801288e:	f7fd fb03 	bl	800fe98 <__retarget_lock_release_recursive>
 8012892:	e7d3      	b.n	801283c <_fclose_r+0x74>

08012894 <_fstat_r>:
 8012894:	b570      	push	{r4, r5, r6, lr}
 8012896:	460c      	mov	r4, r1
 8012898:	4603      	mov	r3, r0
 801289a:	4d08      	ldr	r5, [pc, #32]	; (80128bc <_fstat_r+0x28>)
 801289c:	2600      	movs	r6, #0
 801289e:	4620      	mov	r0, r4
 80128a0:	4611      	mov	r1, r2
 80128a2:	461c      	mov	r4, r3
 80128a4:	602e      	str	r6, [r5, #0]
 80128a6:	f000 f851 	bl	801294c <_fstat>
 80128aa:	1c43      	adds	r3, r0, #1
 80128ac:	d000      	beq.n	80128b0 <_fstat_r+0x1c>
 80128ae:	bd70      	pop	{r4, r5, r6, pc}
 80128b0:	682b      	ldr	r3, [r5, #0]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d0fb      	beq.n	80128ae <_fstat_r+0x1a>
 80128b6:	6023      	str	r3, [r4, #0]
 80128b8:	bd70      	pop	{r4, r5, r6, pc}
 80128ba:	bf00      	nop
 80128bc:	200067e8 	.word	0x200067e8

080128c0 <_isatty_r>:
 80128c0:	b538      	push	{r3, r4, r5, lr}
 80128c2:	2200      	movs	r2, #0
 80128c4:	4d06      	ldr	r5, [pc, #24]	; (80128e0 <_isatty_r+0x20>)
 80128c6:	4604      	mov	r4, r0
 80128c8:	4608      	mov	r0, r1
 80128ca:	602a      	str	r2, [r5, #0]
 80128cc:	f000 f84e 	bl	801296c <_isatty>
 80128d0:	1c43      	adds	r3, r0, #1
 80128d2:	d000      	beq.n	80128d6 <_isatty_r+0x16>
 80128d4:	bd38      	pop	{r3, r4, r5, pc}
 80128d6:	682b      	ldr	r3, [r5, #0]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d0fb      	beq.n	80128d4 <_isatty_r+0x14>
 80128dc:	6023      	str	r3, [r4, #0]
 80128de:	bd38      	pop	{r3, r4, r5, pc}
 80128e0:	200067e8 	.word	0x200067e8

080128e4 <_lseek_r>:
 80128e4:	b538      	push	{r3, r4, r5, lr}
 80128e6:	460c      	mov	r4, r1
 80128e8:	4684      	mov	ip, r0
 80128ea:	4611      	mov	r1, r2
 80128ec:	4d07      	ldr	r5, [pc, #28]	; (801290c <_lseek_r+0x28>)
 80128ee:	461a      	mov	r2, r3
 80128f0:	2300      	movs	r3, #0
 80128f2:	4620      	mov	r0, r4
 80128f4:	4664      	mov	r4, ip
 80128f6:	602b      	str	r3, [r5, #0]
 80128f8:	f000 f848 	bl	801298c <_lseek>
 80128fc:	1c43      	adds	r3, r0, #1
 80128fe:	d000      	beq.n	8012902 <_lseek_r+0x1e>
 8012900:	bd38      	pop	{r3, r4, r5, pc}
 8012902:	682b      	ldr	r3, [r5, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d0fb      	beq.n	8012900 <_lseek_r+0x1c>
 8012908:	6023      	str	r3, [r4, #0]
 801290a:	bd38      	pop	{r3, r4, r5, pc}
 801290c:	200067e8 	.word	0x200067e8

08012910 <_read_r>:
 8012910:	b538      	push	{r3, r4, r5, lr}
 8012912:	460c      	mov	r4, r1
 8012914:	4684      	mov	ip, r0
 8012916:	4611      	mov	r1, r2
 8012918:	4d07      	ldr	r5, [pc, #28]	; (8012938 <_read_r+0x28>)
 801291a:	461a      	mov	r2, r3
 801291c:	2300      	movs	r3, #0
 801291e:	4620      	mov	r0, r4
 8012920:	4664      	mov	r4, ip
 8012922:	602b      	str	r3, [r5, #0]
 8012924:	f000 f83a 	bl	801299c <_read>
 8012928:	1c43      	adds	r3, r0, #1
 801292a:	d000      	beq.n	801292e <_read_r+0x1e>
 801292c:	bd38      	pop	{r3, r4, r5, pc}
 801292e:	682b      	ldr	r3, [r5, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d0fb      	beq.n	801292c <_read_r+0x1c>
 8012934:	6023      	str	r3, [r4, #0]
 8012936:	bd38      	pop	{r3, r4, r5, pc}
 8012938:	200067e8 	.word	0x200067e8

0801293c <_close>:
 801293c:	4b02      	ldr	r3, [pc, #8]	; (8012948 <_close+0xc>)
 801293e:	2258      	movs	r2, #88	; 0x58
 8012940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012944:	601a      	str	r2, [r3, #0]
 8012946:	4770      	bx	lr
 8012948:	200067e8 	.word	0x200067e8

0801294c <_fstat>:
 801294c:	4b02      	ldr	r3, [pc, #8]	; (8012958 <_fstat+0xc>)
 801294e:	2258      	movs	r2, #88	; 0x58
 8012950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012954:	601a      	str	r2, [r3, #0]
 8012956:	4770      	bx	lr
 8012958:	200067e8 	.word	0x200067e8

0801295c <_getpid>:
 801295c:	4b02      	ldr	r3, [pc, #8]	; (8012968 <_getpid+0xc>)
 801295e:	2258      	movs	r2, #88	; 0x58
 8012960:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012964:	601a      	str	r2, [r3, #0]
 8012966:	4770      	bx	lr
 8012968:	200067e8 	.word	0x200067e8

0801296c <_isatty>:
 801296c:	4b02      	ldr	r3, [pc, #8]	; (8012978 <_isatty+0xc>)
 801296e:	2258      	movs	r2, #88	; 0x58
 8012970:	2000      	movs	r0, #0
 8012972:	601a      	str	r2, [r3, #0]
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop
 8012978:	200067e8 	.word	0x200067e8

0801297c <_kill>:
 801297c:	4b02      	ldr	r3, [pc, #8]	; (8012988 <_kill+0xc>)
 801297e:	2258      	movs	r2, #88	; 0x58
 8012980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012984:	601a      	str	r2, [r3, #0]
 8012986:	4770      	bx	lr
 8012988:	200067e8 	.word	0x200067e8

0801298c <_lseek>:
 801298c:	4b02      	ldr	r3, [pc, #8]	; (8012998 <_lseek+0xc>)
 801298e:	2258      	movs	r2, #88	; 0x58
 8012990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012994:	601a      	str	r2, [r3, #0]
 8012996:	4770      	bx	lr
 8012998:	200067e8 	.word	0x200067e8

0801299c <_read>:
 801299c:	4b02      	ldr	r3, [pc, #8]	; (80129a8 <_read+0xc>)
 801299e:	2258      	movs	r2, #88	; 0x58
 80129a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129a4:	601a      	str	r2, [r3, #0]
 80129a6:	4770      	bx	lr
 80129a8:	200067e8 	.word	0x200067e8

080129ac <_sbrk>:
 80129ac:	4a05      	ldr	r2, [pc, #20]	; (80129c4 <_sbrk+0x18>)
 80129ae:	4603      	mov	r3, r0
 80129b0:	6810      	ldr	r0, [r2, #0]
 80129b2:	b110      	cbz	r0, 80129ba <_sbrk+0xe>
 80129b4:	4403      	add	r3, r0
 80129b6:	6013      	str	r3, [r2, #0]
 80129b8:	4770      	bx	lr
 80129ba:	4803      	ldr	r0, [pc, #12]	; (80129c8 <_sbrk+0x1c>)
 80129bc:	4403      	add	r3, r0
 80129be:	6013      	str	r3, [r2, #0]
 80129c0:	4770      	bx	lr
 80129c2:	bf00      	nop
 80129c4:	200067ec 	.word	0x200067ec
 80129c8:	200067f0 	.word	0x200067f0

080129cc <_write>:
 80129cc:	4b02      	ldr	r3, [pc, #8]	; (80129d8 <_write+0xc>)
 80129ce:	2258      	movs	r2, #88	; 0x58
 80129d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129d4:	601a      	str	r2, [r3, #0]
 80129d6:	4770      	bx	lr
 80129d8:	200067e8 	.word	0x200067e8

080129dc <_exit>:
 80129dc:	e7fe      	b.n	80129dc <_exit>
 80129de:	bf00      	nop

080129e0 <_init>:
 80129e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e2:	bf00      	nop
 80129e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129e6:	bc08      	pop	{r3}
 80129e8:	469e      	mov	lr, r3
 80129ea:	4770      	bx	lr

080129ec <_fini>:
 80129ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ee:	bf00      	nop
 80129f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129f2:	bc08      	pop	{r3}
 80129f4:	469e      	mov	lr, r3
 80129f6:	4770      	bx	lr
