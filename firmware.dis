
firmware.elf:     file format elf32-littlearm


Disassembly of section .text:

0800024c <__do_global_dtors_aux>:
 800024c:	b510      	push	{r4, lr}
 800024e:	4c05      	ldr	r4, [pc, #20]	; (8000264 <__do_global_dtors_aux+0x18>)
 8000250:	7823      	ldrb	r3, [r4, #0]
 8000252:	b933      	cbnz	r3, 8000262 <__do_global_dtors_aux+0x16>
 8000254:	4b04      	ldr	r3, [pc, #16]	; (8000268 <__do_global_dtors_aux+0x1c>)
 8000256:	b113      	cbz	r3, 800025e <__do_global_dtors_aux+0x12>
 8000258:	4804      	ldr	r0, [pc, #16]	; (800026c <__do_global_dtors_aux+0x20>)
 800025a:	e000      	b.n	800025e <__do_global_dtors_aux+0x12>
 800025c:	bf00      	nop
 800025e:	2301      	movs	r3, #1
 8000260:	7023      	strb	r3, [r4, #0]
 8000262:	bd10      	pop	{r4, pc}
 8000264:	2000084c 	.word	0x2000084c
 8000268:	00000000 	.word	0x00000000
 800026c:	08005080 	.word	0x08005080

08000270 <frame_dummy>:
 8000270:	b508      	push	{r3, lr}
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <frame_dummy+0x10>)
 8000274:	b11b      	cbz	r3, 800027e <frame_dummy+0xe>
 8000276:	4903      	ldr	r1, [pc, #12]	; (8000284 <frame_dummy+0x14>)
 8000278:	4803      	ldr	r0, [pc, #12]	; (8000288 <frame_dummy+0x18>)
 800027a:	e000      	b.n	800027e <frame_dummy+0xe>
 800027c:	bf00      	nop
 800027e:	bd08      	pop	{r3, pc}
 8000280:	00000000 	.word	0x00000000
 8000284:	20000850 	.word	0x20000850
 8000288:	08005080 	.word	0x08005080

0800028c <MX_SPI2_Init>:
#include "draw.h"

SPI_HandleTypeDef hspi2;

void MX_SPI2_Init(void)
{
 800028c:	b538      	push	{r3, r4, r5, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800028e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000292:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 8000294:	4813      	ldr	r0, [pc, #76]	; (80002e4 <MX_SPI2_Init+0x58>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000296:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000298:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800029c:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80002a0:	e9c0 3105 	strd	r3, r1, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x7;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002a4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80002a8:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002ac:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002b0:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002b4:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80002b8:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80002bc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80002c0:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80002c4:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80002c8:	6603      	str	r3, [r0, #96]	; 0x60
  hspi2.Instance = SPI2;
 80002ca:	4b07      	ldr	r3, [pc, #28]	; (80002e8 <MX_SPI2_Init+0x5c>)
  hspi2.Init.CRCPolynomial = 0x7;
 80002cc:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002ce:	6341      	str	r1, [r0, #52]	; 0x34
  hspi2.Instance = SPI2;
 80002d0:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80002d2:	f003 fe2b 	bl	8003f2c <HAL_SPI_Init>
 80002d6:	b900      	cbnz	r0, 80002da <MX_SPI2_Init+0x4e>
  {
    Error_Handler();
  }
}
 80002d8:	bd38      	pop	{r3, r4, r5, pc}
 80002da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80002de:	f000 bc85 	b.w	8000bec <Error_Handler>
 80002e2:	bf00      	nop
 80002e4:	20000868 	.word	0x20000868
 80002e8:	40003800 	.word	0x40003800

080002ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80002ec:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ee:	2100      	movs	r1, #0
{
 80002f0:	4604      	mov	r4, r0
 80002f2:	b0cb      	sub	sp, #300	; 0x12c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80002f4:	f44f 7284 	mov.w	r2, #264	; 0x108
 80002f8:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002fa:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80002fe:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8000302:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000304:	f004 fc46 	bl	8004b94 <memset>
  if(spiHandle->Instance==SPI2)
 8000308:	4b28      	ldr	r3, [pc, #160]	; (80003ac <HAL_SPI_MspInit+0xc0>)
 800030a:	6822      	ldr	r2, [r4, #0]
 800030c:	429a      	cmp	r2, r3
 800030e:	d001      	beq.n	8000314 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000310:	b04b      	add	sp, #300	; 0x12c
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000318:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800031a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800031c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000320:	f001 fe94 	bl	800204c <HAL_RCCEx_PeriphCLKConfig>
 8000324:	2800      	cmp	r0, #0
 8000326:	d13d      	bne.n	80003a4 <HAL_SPI_MspInit+0xb8>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000328:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800032a:	2106      	movs	r1, #6
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800032e:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000330:	2405      	movs	r4, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <HAL_SPI_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000334:	481f      	ldr	r0, [pc, #124]	; (80003b4 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000336:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800033a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800033e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8000342:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8000346:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800034a:	9200      	str	r2, [sp, #0]
 800034c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800034e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000352:	f042 0204 	orr.w	r2, r2, #4
 8000356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800035a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800035e:	f002 0204 	and.w	r2, r2, #4
 8000362:	9201      	str	r2, [sp, #4]
 8000364:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000366:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800036a:	433a      	orrs	r2, r7
 800036c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000370:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000374:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	403b      	ands	r3, r7
 8000378:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800037a:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800037c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	e9cd 7604 	strd	r7, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000382:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000384:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000386:	f000 ff89 	bl	800129c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800038a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800038e:	480a      	ldr	r0, [pc, #40]	; (80003b8 <HAL_SPI_MspInit+0xcc>)
 8000390:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000392:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000396:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000398:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800039a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039c:	f000 ff7e 	bl	800129c <HAL_GPIO_Init>
}
 80003a0:	b04b      	add	sp, #300	; 0x12c
 80003a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 80003a4:	f000 fc22 	bl	8000bec <Error_Handler>
 80003a8:	e7be      	b.n	8000328 <HAL_SPI_MspInit+0x3c>
 80003aa:	bf00      	nop
 80003ac:	40003800 	.word	0x40003800
 80003b0:	44020c00 	.word	0x44020c00
 80003b4:	42020800 	.word	0x42020800
 80003b8:	42020400 	.word	0x42020400

080003bc <bsp_lcd_init>:
  }
}


void bsp_lcd_init(void)
{
 80003bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	2400      	movs	r4, #0
{
 80003c0:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c2:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80003c6:	e9cd 4405 	strd	r4, r4, [sp, #20]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003ca:	4b20      	ldr	r3, [pc, #128]	; (800044c <bsp_lcd_init+0x90>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003cc:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003ce:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_GPIOD_CLK_ENABLE();
	
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80003d2:	4f1f      	ldr	r7, [pc, #124]	; (8000450 <bsp_lcd_init+0x94>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	f042 0202 	orr.w	r2, r2, #2
 80003d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80003dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80003e0:	4e1c      	ldr	r6, [pc, #112]	; (8000454 <bsp_lcd_init+0x98>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80003e2:	f002 0202 	and.w	r2, r2, #2
 80003e6:	9201      	str	r2, [sp, #4]
 80003e8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80003ee:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003f0:	f042 0208 	orr.w	r2, r2, #8
 80003f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80003f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80003fc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003fe:	f003 0308 	and.w	r3, r3, #8
 8000402:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 8000404:	f44f 6101 	mov.w	r1, #2064	; 0x810
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000408:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 800040a:	f001 f81d 	bl	8001448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800040e:	4622      	mov	r2, r4
 8000410:	4630      	mov	r0, r6
 8000412:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000416:	f001 f817 	bl	8001448 <HAL_GPIO_WritePin>
	
	/*Configure GPIO pins : PB11 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 800041c:	f44f 6301 	mov.w	r3, #2064	; 0x810
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000420:	4638      	mov	r0, r7
 8000422:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 8000424:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000426:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800042a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042c:	f000 ff36 	bl	800129c <HAL_GPIO_Init>
	
	/*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000430:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000434:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 8000436:	4630      	mov	r0, r6
 8000438:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800043a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800043c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800043e:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000440:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 8000442:	f000 ff2b 	bl	800129c <HAL_GPIO_Init>
  
  
}
 8000446:	b009      	add	sp, #36	; 0x24
 8000448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800044a:	bf00      	nop
 800044c:	44020c00 	.word	0x44020c00
 8000450:	42020400 	.word	0x42020400
 8000454:	42020c00 	.word	0x42020c00

08000458 <bsp_test_lcd>:

void bsp_test_lcd(void)
{
 8000458:	b530      	push	{r4, r5, lr}

#if 1

	Draw_String(0, 0, "www.100ask.net\r\n10ask.taobao.com", 0x0000ff00, 0); /* 绘制字符丿 */
 800045a:	2400      	movs	r4, #0
	extern const unsigned char gImage_100ask[36968]; 
	Draw_Picture(0, 100, gImage_100ask);  /* 绘制图片 */

	Draw_Circle(60, 250, 50, 0xffffff); /* 画圆 */

	Draw_Rectangle(180, 200, 280, 300, 0xffffff); /* 画矩彿 */
 800045c:	f06f 457f 	mvn.w	r5, #4278190080	; 0xff000000
{
 8000460:	b083      	sub	sp, #12
	Draw_String(0, 0, "www.100ask.net\r\n10ask.taobao.com", 0x0000ff00, 0); /* 绘制字符丿 */
 8000462:	4621      	mov	r1, r4
 8000464:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000468:	4620      	mov	r0, r4
 800046a:	4a1c      	ldr	r2, [pc, #112]	; (80004dc <bsp_test_lcd+0x84>)
 800046c:	9400      	str	r4, [sp, #0]
 800046e:	f000 f923 	bl	80006b8 <Draw_String>
	Draw_ChineseFont(0, 40, "悦己之作方能悦人", 0xff0000, 0); /* 绘制汉字 */
 8000472:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8000476:	4620      	mov	r0, r4
 8000478:	2128      	movs	r1, #40	; 0x28
 800047a:	4a19      	ldr	r2, [pc, #100]	; (80004e0 <bsp_test_lcd+0x88>)
 800047c:	9400      	str	r4, [sp, #0]
 800047e:	f000 fa5d 	bl	800093c <Draw_ChineseFont>
	Draw_Picture(0, 100, gImage_100ask);  /* 绘制图片 */
 8000482:	4620      	mov	r0, r4
 8000484:	2164      	movs	r1, #100	; 0x64
 8000486:	4a17      	ldr	r2, [pc, #92]	; (80004e4 <bsp_test_lcd+0x8c>)
 8000488:	f000 fb20 	bl	8000acc <Draw_Picture>
	Draw_Circle(60, 250, 50, 0xffffff); /* 画圆 */
 800048c:	462b      	mov	r3, r5
 800048e:	2232      	movs	r2, #50	; 0x32
 8000490:	21fa      	movs	r1, #250	; 0xfa
 8000492:	203c      	movs	r0, #60	; 0x3c
 8000494:	f000 f9d0 	bl	8000838 <Draw_Circle>
	Draw_Rectangle(180, 200, 280, 300, 0xffffff); /* 画矩彿 */
 8000498:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800049c:	f44f 728c 	mov.w	r2, #280	; 0x118
 80004a0:	21c8      	movs	r1, #200	; 0xc8
 80004a2:	20b4      	movs	r0, #180	; 0xb4
 80004a4:	9500      	str	r5, [sp, #0]
 80004a6:	f000 f9a3 	bl	80007f0 <Draw_Rectangle>
	
	Draw_String(240, 160, "Hello", 0x00ff0000, 0x00ffffff);
 80004aa:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80004ae:	21a0      	movs	r1, #160	; 0xa0
 80004b0:	4a0d      	ldr	r2, [pc, #52]	; (80004e8 <bsp_test_lcd+0x90>)
 80004b2:	9500      	str	r5, [sp, #0]
 80004b4:	20f0      	movs	r0, #240	; 0xf0
 80004b6:	f000 f8ff 	bl	80006b8 <Draw_String>
	
	Draw_ChineseFont(200, 200, "百问网悦己之使", 0xff0000, 0); /* 绘制汉字 */
 80004ba:	21c8      	movs	r1, #200	; 0xc8
 80004bc:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80004c0:	4608      	mov	r0, r1
 80004c2:	4a0a      	ldr	r2, [pc, #40]	; (80004ec <bsp_test_lcd+0x94>)
 80004c4:	9400      	str	r4, [sp, #0]
 80004c6:	f000 fa39 	bl	800093c <Draw_ChineseFont>
	
	extern const unsigned char gImage_ufo[19888];
	Draw_Picture(300, 50, gImage_ufo);  /* 绘制图片 */
 80004ca:	2132      	movs	r1, #50	; 0x32
 80004cc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80004d0:	4a07      	ldr	r2, [pc, #28]	; (80004f0 <bsp_test_lcd+0x98>)
#endif
}
 80004d2:	b003      	add	sp, #12
 80004d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	Draw_Picture(300, 50, gImage_ufo);  /* 绘制图片 */
 80004d8:	f000 baf8 	b.w	8000acc <Draw_Picture>
 80004dc:	08005098 	.word	0x08005098
 80004e0:	080050bc 	.word	0x080050bc
 80004e4:	08006788 	.word	0x08006788
 80004e8:	080050d8 	.word	0x080050d8
 80004ec:	080050e0 	.word	0x080050e0
 80004f0:	0800f7f0 	.word	0x0800f7f0

080004f4 <bsp_led_init>:
#include "bsp_led.h"

//PC12
void bsp_led_init()
{
 80004f4:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 80004f6:	2400      	movs	r4, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();	
	__HAL_RCC_GPIOC_CLK_ENABLE();

	
	/*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80004f8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fc:	2601      	movs	r6, #1
{
 80004fe:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8000500:	e9cd 4405 	strd	r4, r4, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8000504:	4b13      	ldr	r3, [pc, #76]	; (8000554 <bsp_led_init+0x60>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 8000506:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8000508:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050c:	a903      	add	r1, sp, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 800050e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000512:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000516:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800051a:	480f      	ldr	r0, [pc, #60]	; (8000558 <bsp_led_init+0x64>)
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 800051c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000520:	9201      	str	r2, [sp, #4]
 8000522:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000524:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8000528:	f042 0204 	orr.w	r2, r2, #4
 800052c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8000530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000534:	9604      	str	r6, [sp, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	f003 0304 	and.w	r3, r3, #4
 800053a:	9302      	str	r3, [sp, #8]
 800053c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800053e:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000540:	f000 feac 	bl	800129c <HAL_GPIO_Init>
	
	/*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);	
 8000544:	4622      	mov	r2, r4
 8000546:	4629      	mov	r1, r5
 8000548:	4803      	ldr	r0, [pc, #12]	; (8000558 <bsp_led_init+0x64>)
 800054a:	f000 ff7d 	bl	8001448 <HAL_GPIO_WritePin>
}
 800054e:	b008      	add	sp, #32
 8000550:	bd70      	pop	{r4, r5, r6, pc}
 8000552:	bf00      	nop
 8000554:	44020c00 	.word	0x44020c00
 8000558:	42020800 	.word	0x42020800

0800055c <bsp_led_toggle>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}

void bsp_led_toggle()
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 800055c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000560:	4801      	ldr	r0, [pc, #4]	; (8000568 <bsp_led_toggle+0xc>)
 8000562:	f000 bf77 	b.w	8001454 <HAL_GPIO_TogglePin>
 8000566:	bf00      	nop
 8000568:	42020800 	.word	0x42020800

0800056c <Draw_Init>:
{
#ifdef FERRRTOS_FLAG
	/* 创建mutex */
	g_spi_lcd_lock = xSemaphoreCreateMutex();
#endif
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 800056c:	4901      	ldr	r1, [pc, #4]	; (8000574 <Draw_Init+0x8>)
 800056e:	4802      	ldr	r0, [pc, #8]	; (8000578 <Draw_Init+0xc>)
 8000570:	f000 bce2 	b.w	8000f38 <LCD_GetInfo>
 8000574:	200008fc 	.word	0x200008fc
 8000578:	20000900 	.word	0x20000900

0800057c <Draw_Clear>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Clear(uint32_t dwColor)
{
 800057c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057e:	4606      	mov	r6, r0
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);

    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8000580:	2100      	movs	r1, #0
 8000582:	4f17      	ldr	r7, [pc, #92]	; (80005e0 <Draw_Clear+0x64>)
    g = g >> 2;
 8000584:	f3c6 2485 	ubfx	r4, r6, #10, #6
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8000588:	4d16      	ldr	r5, [pc, #88]	; (80005e4 <Draw_Clear+0x68>)
    r = r >> 3;
 800058a:	f3c6 4cc4 	ubfx	ip, r6, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800058e:	0164      	lsls	r4, r4, #5
 8000590:	ea44 24cc 	orr.w	r4, r4, ip, lsl #11
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8000594:	682b      	ldr	r3, [r5, #0]
 8000596:	683a      	ldr	r2, [r7, #0]
    b = b >> 2;
 8000598:	f3c6 0685 	ubfx	r6, r6, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800059c:	4334      	orrs	r4, r6
{
 800059e:	b083      	sub	sp, #12
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 80005a0:	3b01      	subs	r3, #1
 80005a2:	4608      	mov	r0, r1
 80005a4:	3a01      	subs	r2, #1
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 80005a6:	ba64      	rev16	r4, r4
 80005a8:	f8ad 4006 	strh.w	r4, [sp, #6]
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 80005ac:	f000 fcd0 	bl	8000f50 <LCD_SetWindows>
    LCD_SetDataLine();
 80005b0:	f000 fb6a 	bl	8000c88 <LCD_SetDataLine>
    
    for(uint32_t x = 0; x < g_lcd_width; x++)
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	2600      	movs	r6, #0
 80005b8:	b17b      	cbz	r3, 80005da <Draw_Clear+0x5e>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 80005ba:	682b      	ldr	r3, [r5, #0]
 80005bc:	2400      	movs	r4, #0
 80005be:	b143      	cbz	r3, 80005d2 <Draw_Clear+0x56>
            LCD_WriteDatas((uint8_t *)&wColor, 2);
 80005c0:	2102      	movs	r1, #2
 80005c2:	f10d 0006 	add.w	r0, sp, #6
 80005c6:	f000 fb67 	bl	8000c98 <LCD_WriteDatas>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 80005ca:	682b      	ldr	r3, [r5, #0]
 80005cc:	3401      	adds	r4, #1
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d8f6      	bhi.n	80005c0 <Draw_Clear+0x44>
    for(uint32_t x = 0; x < g_lcd_width; x++)
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	3601      	adds	r6, #1
 80005d6:	42b3      	cmp	r3, r6
 80005d8:	d8ef      	bhi.n	80005ba <Draw_Clear+0x3e>
}
 80005da:	b003      	add	sp, #12
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000900 	.word	0x20000900
 80005e4:	200008fc 	.word	0x200008fc

080005e8 <Draw_Pixel>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Pixel(int x, int y, uint32_t dwColor)
{
 80005e8:	b510      	push	{r4, lr}
 80005ea:	4696      	mov	lr, r2
    g = g >> 2;
 80005ec:	f3ce 2c85 	ubfx	ip, lr, #10, #6
    r = r >> 3;
 80005f0:	f3ce 44c4 	ubfx	r4, lr, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80005f4:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    b = b >> 2;
 80005f8:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80005fc:	ea4c 2cc4 	orr.w	ip, ip, r4, lsl #11
 8000600:	ea4c 0c0e 	orr.w	ip, ip, lr
{
 8000604:	b082      	sub	sp, #8
 8000606:	4602      	mov	r2, r0
 8000608:	460b      	mov	r3, r1
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 800060a:	fa9c fc9c 	rev16.w	ip, ip
 800060e:	f8ad c006 	strh.w	ip, [sp, #6]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8000612:	f000 fc9d 	bl	8000f50 <LCD_SetWindows>
    LCD_SetDataLine();
 8000616:	f000 fb37 	bl	8000c88 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 800061a:	2102      	movs	r1, #2
 800061c:	f10d 0006 	add.w	r0, sp, #6
 8000620:	f000 fb3a 	bl	8000c98 <LCD_WriteDatas>
    bitmap.width = 1;
    bitmap.height = 1;
    bitmap.datas = (uint8_t *)&wColor;
    
    Draw_Region(x, y, &bitmap);
}
 8000624:	b002      	add	sp, #8
 8000626:	bd10      	pop	{r4, pc}

08000628 <Draw_ASCII>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_ASCII(uint32_t x, uint32_t y, char c, uint32_t front_color, uint32_t back_color)
{
 8000628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800062c:	b0c0      	sub	sp, #256	; 0x100
 800062e:	466e      	mov	r6, sp
 8000630:	9c46      	ldr	r4, [sp, #280]	; 0x118
 8000632:	f50d 7880 	add.w	r8, sp, #256	; 0x100
    g = g >> 2;
 8000636:	f3c4 2585 	ubfx	r5, r4, #10, #6
    r = r >> 3;
 800063a:	f3c4 47c4 	ubfx	r7, r4, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800063e:	016d      	lsls	r5, r5, #5
 8000640:	ea45 25c7 	orr.w	r5, r5, r7, lsl #11
    b = b >> 2;
 8000644:	f3c4 0485 	ubfx	r4, r4, #2, #6
 8000648:	4f1a      	ldr	r7, [pc, #104]	; (80006b4 <Draw_ASCII+0x8c>)
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800064a:	4325      	orrs	r5, r4
    g = g >> 2;
 800064c:	f3c3 2485 	ubfx	r4, r3, #10, #6
 8000650:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000654:	0164      	lsls	r4, r4, #5
    r = r >> 3;
 8000656:	f3c3 42c4 	ubfx	r2, r3, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800065a:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
    b = b >> 2;
 800065e:	f3c3 0385 	ubfx	r3, r3, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000662:	431c      	orrs	r4, r3
 8000664:	ba6d      	rev16	r5, r5
 8000666:	ba64      	rev16	r4, r4
 8000668:	b2ad      	uxth	r5, r5
    wColor = (wColor >> 8) | (wColor << 8);
 800066a:	b2a4      	uxth	r4, r4
    for (i = 0; i < 16; i++)
    {
        data = fontdata_8x16[c*16+i];
        for (bit = 7; bit >= 0; bit--)
        {
            if (data & (1<<bit))
 800066c:	46b4      	mov	ip, r6
        for (bit = 7; bit >= 0; bit--)
 800066e:	2307      	movs	r3, #7
        data = fontdata_8x16[c*16+i];
 8000670:	f817 2b01 	ldrb.w	r2, [r7], #1
            if (data & (1<<bit))
 8000674:	fa42 fe03 	asr.w	lr, r2, r3
 8000678:	f01e 0f01 	tst.w	lr, #1
 800067c:	bf14      	ite	ne
 800067e:	46a6      	movne	lr, r4
 8000680:	46ae      	moveq	lr, r5
        for (bit = 7; bit >= 0; bit--)
 8000682:	3b01      	subs	r3, #1
 8000684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
            else
            {
                color = back_color;
            }
            
            buf[i * 8 + (7-bit)] = color;
 8000688:	f82c eb02 	strh.w	lr, [ip], #2
        for (bit = 7; bit >= 0; bit--)
 800068c:	d1f2      	bne.n	8000674 <Draw_ASCII+0x4c>
    for (i = 0; i < 16; i++)
 800068e:	3610      	adds	r6, #16
 8000690:	4546      	cmp	r6, r8
 8000692:	d1eb      	bne.n	800066c <Draw_ASCII+0x44>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8000694:	f101 030f 	add.w	r3, r1, #15
 8000698:	1dc2      	adds	r2, r0, #7
 800069a:	f000 fc59 	bl	8000f50 <LCD_SetWindows>
    LCD_SetDataLine();
 800069e:	f000 faf3 	bl	8000c88 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80006a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006a6:	4668      	mov	r0, sp
 80006a8:	f000 faf6 	bl	8000c98 <LCD_WriteDatas>
    bitmap.datas = (uint8_t *)buf;
    
    Draw_Region(x, y, &bitmap);

    return 8; /* 这个字符宽度为8 */
}
 80006ac:	2008      	movs	r0, #8
 80006ae:	b040      	add	sp, #256	; 0x100
 80006b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006b4:	080050f8 	.word	0x080050f8

080006b8 <Draw_String>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_String(uint32_t x, uint32_t y, char *str, uint32_t front_color, uint32_t back_color)
{
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006bc:	468b      	mov	fp, r1
 80006be:	469a      	mov	sl, r3
    size_t i;
    int line_width = 0;
 80006c0:	2700      	movs	r7, #0
{
 80006c2:	b085      	sub	sp, #20
 80006c4:	4605      	mov	r5, r0
    for (i = 0; i < strlen(str); i++)
 80006c6:	4610      	mov	r0, r2
{
 80006c8:	4616      	mov	r6, r2
    for (i = 0; i < strlen(str); i++)
 80006ca:	463c      	mov	r4, r7
 80006cc:	f004 fad2 	bl	8004c74 <strlen>
            if (x >= 8)
                x -= 8;
        }
        else
        {
            if (x + 8 >= g_lcd_width)
 80006d0:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800074c <Draw_String+0x94>
 80006d4:	4653      	mov	r3, sl
            {
                x = 0;
                y += 16;
            }

            if (y + 16 >= g_lcd_height)
 80006d6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8000750 <Draw_String+0x98>
 80006da:	46da      	mov	sl, fp
 80006dc:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    for (i = 0; i < strlen(str); i++)
 80006e0:	e022      	b.n	8000728 <Draw_String+0x70>
        else if (str[i] == '\n')
 80006e2:	2a0a      	cmp	r2, #10
 80006e4:	d027      	beq.n	8000736 <Draw_String+0x7e>
        else if (str[i] == '\b')
 80006e6:	2a08      	cmp	r2, #8
 80006e8:	d028      	beq.n	800073c <Draw_String+0x84>
            if (x + 8 >= g_lcd_width)
 80006ea:	f8d9 1000 	ldr.w	r1, [r9]
 80006ee:	f105 0008 	add.w	r0, r5, #8
 80006f2:	4288      	cmp	r0, r1
                y += 16;
 80006f4:	bf28      	it	cs
 80006f6:	f10a 0a10 	addcs.w	sl, sl, #16
            if (y + 16 >= g_lcd_height)
 80006fa:	f8d8 1000 	ldr.w	r1, [r8]
 80006fe:	f10a 0010 	add.w	r0, sl, #16
                x = 0;
 8000702:	bf28      	it	cs
 8000704:	2500      	movcs	r5, #0
            if (y + 16 >= g_lcd_height)
 8000706:	4288      	cmp	r0, r1
 8000708:	d21c      	bcs.n	8000744 <Draw_String+0x8c>
                return line_width;

            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 800070a:	4651      	mov	r1, sl
 800070c:	4628      	mov	r0, r5
 800070e:	f8cd b000 	str.w	fp, [sp]
 8000712:	9303      	str	r3, [sp, #12]
 8000714:	f7ff ff88 	bl	8000628 <Draw_ASCII>
 8000718:	4602      	mov	r2, r0
    for (i = 0; i < strlen(str); i++)
 800071a:	4630      	mov	r0, r6
            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 800071c:	4417      	add	r7, r2
    for (i = 0; i < strlen(str); i++)
 800071e:	f004 faa9 	bl	8004c74 <strlen>
 8000722:	9b03      	ldr	r3, [sp, #12]
            x += 8;
 8000724:	3508      	adds	r5, #8
    for (i = 0; i < strlen(str); i++)
 8000726:	3401      	adds	r4, #1
 8000728:	4284      	cmp	r4, r0
 800072a:	d20b      	bcs.n	8000744 <Draw_String+0x8c>
        if (str[i] == '\r')
 800072c:	5d32      	ldrb	r2, [r6, r4]
 800072e:	2a0d      	cmp	r2, #13
 8000730:	d1d7      	bne.n	80006e2 <Draw_String+0x2a>
            x = 0;
 8000732:	2500      	movs	r5, #0
 8000734:	e7f7      	b.n	8000726 <Draw_String+0x6e>
            y += 16;
 8000736:	f10a 0a10 	add.w	sl, sl, #16
 800073a:	e7f4      	b.n	8000726 <Draw_String+0x6e>
            if (x >= 8)
 800073c:	2d07      	cmp	r5, #7
 800073e:	d9f2      	bls.n	8000726 <Draw_String+0x6e>
                x -= 8;
 8000740:	3d08      	subs	r5, #8
 8000742:	e7f0      	b.n	8000726 <Draw_String+0x6e>
        }
    }

    return line_width;
}
 8000744:	4638      	mov	r0, r7
 8000746:	b005      	add	sp, #20
 8000748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800074c:	20000900 	.word	0x20000900
 8000750:	200008fc 	.word	0x200008fc

08000754 <Draw_Line>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Line(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint32_t front_color)
{
 8000754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t t;
    uint32_t yerr=0,delta_x,delta_y;
	uint32_t xerr = 0;
 8000758:	2400      	movs	r4, #0
{
 800075a:	b087      	sub	sp, #28
 800075c:	9e10      	ldr	r6, [sp, #64]	; 0x40
    int incx,incy,uRow,uCol; 
    delta_x=x2-x1; //计算坐标增量
    delta_y=y2-y1; 
    uRow=x1; 
    uCol=y1; 
    if(delta_x>0)incx=1; //设置单步方向
 800075e:	ebb2 0900 	subs.w	r9, r2, r0
    g = g >> 2;
 8000762:	f3c6 2585 	ubfx	r5, r6, #10, #6
    r = r >> 3;
 8000766:	f3c6 47c4 	ubfx	r7, r6, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800076a:	ea4f 1545 	mov.w	r5, r5, lsl #5
    uRow=x1; 
 800076e:	4602      	mov	r2, r0
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000770:	ea45 25c7 	orr.w	r5, r5, r7, lsl #11
    if(delta_x>0)incx=1; //设置单步方向
 8000774:	bf14      	ite	ne
 8000776:	2001      	movne	r0, #1
 8000778:	4620      	moveq	r0, r4
    b = b >> 2;
 800077a:	f3c6 0685 	ubfx	r6, r6, #2, #6
    else if(delta_x==0)incx=0;//垂直线
    else {incx=-1;delta_x=-delta_x;} 
    if(delta_y>0)incy=1; 
 800077e:	ebb3 0801 	subs.w	r8, r3, r1
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000782:	ea45 0506 	orr.w	r5, r5, r6
    uCol=y1; 
 8000786:	460b      	mov	r3, r1
    if(delta_y>0)incy=1; 
 8000788:	bf14      	ite	ne
 800078a:	2101      	movne	r1, #1
 800078c:	4621      	moveq	r1, r4
 800078e:	45c1      	cmp	r9, r8
 8000790:	464e      	mov	r6, r9
 8000792:	ba6d      	rev16	r5, r5
 8000794:	bf38      	it	cc
 8000796:	4646      	movcc	r6, r8
 8000798:	fa1f fb85 	uxth.w	fp, r5
    else if(delta_y==0)incy=0;//水平线
    else{incy=-1;delta_y=-delta_y;} 
    if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
    else distance=delta_y; 
    for(t=0;t<=distance+1;t++ )//画线输出
 800079c:	4627      	mov	r7, r4
    uint32_t yerr=0,delta_x,delta_y;
 800079e:	4625      	mov	r5, r4
    if(delta_x>0)incx=1; //设置单步方向
 80007a0:	9002      	str	r0, [sp, #8]
    if(delta_y>0)incy=1; 
 80007a2:	9103      	str	r1, [sp, #12]
    for(t=0;t<=distance+1;t++ )//画线输出
 80007a4:	f106 0a01 	add.w	sl, r6, #1
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80007a8:	4619      	mov	r1, r3
 80007aa:	4610      	mov	r0, r2
 80007ac:	9301      	str	r3, [sp, #4]
 80007ae:	9200      	str	r2, [sp, #0]
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 80007b0:	f8ad b016 	strh.w	fp, [sp, #22]
    {  
        Draw_Pixel(uRow, uCol, front_color);//画点
        xerr+=delta_x ; 
 80007b4:	444c      	add	r4, r9
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80007b6:	f000 fbcb 	bl	8000f50 <LCD_SetWindows>
    LCD_SetDataLine();
 80007ba:	f000 fa65 	bl	8000c88 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80007be:	2102      	movs	r1, #2
 80007c0:	f10d 0016 	add.w	r0, sp, #22
 80007c4:	f000 fa68 	bl	8000c98 <LCD_WriteDatas>
        yerr+=delta_y ; 
        if(xerr>distance) 
 80007c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80007cc:	42a6      	cmp	r6, r4
    for(t=0;t<=distance+1;t++ )//画线输出
 80007ce:	f107 0701 	add.w	r7, r7, #1
        yerr+=delta_y ; 
 80007d2:	4445      	add	r5, r8
        if(xerr>distance) 
 80007d4:	d202      	bcs.n	80007dc <Draw_Line+0x88>
        { 
            xerr-=distance; 
            uRow+=incx; 
 80007d6:	9902      	ldr	r1, [sp, #8]
            xerr-=distance; 
 80007d8:	1ba4      	subs	r4, r4, r6
            uRow+=incx; 
 80007da:	440a      	add	r2, r1
        } 
        if(yerr>distance) 
 80007dc:	42ae      	cmp	r6, r5
 80007de:	d202      	bcs.n	80007e6 <Draw_Line+0x92>
        { 
            yerr-=distance; 
            uCol+=incy; 
 80007e0:	9903      	ldr	r1, [sp, #12]
            yerr-=distance; 
 80007e2:	1bad      	subs	r5, r5, r6
            uCol+=incy; 
 80007e4:	440b      	add	r3, r1
    for(t=0;t<=distance+1;t++ )//画线输出
 80007e6:	4557      	cmp	r7, sl
 80007e8:	d9de      	bls.n	80007a8 <Draw_Line+0x54>
        } 
    }  
} 
 80007ea:	b007      	add	sp, #28
 80007ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007f0 <Draw_Rectangle>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Rectangle(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint32_t front_color)
{
 80007f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007f4:	461c      	mov	r4, r3
 80007f6:	4606      	mov	r6, r0
 80007f8:	460d      	mov	r5, r1
 80007fa:	4690      	mov	r8, r2
 80007fc:	b082      	sub	sp, #8
 80007fe:	9f08      	ldr	r7, [sp, #32]
    Draw_Line(x1,y1,x2,y1,front_color);
 8000800:	460b      	mov	r3, r1
 8000802:	9700      	str	r7, [sp, #0]
 8000804:	f7ff ffa6 	bl	8000754 <Draw_Line>
    Draw_Line(x1,y1,x1,y2,front_color);
 8000808:	4623      	mov	r3, r4
 800080a:	4632      	mov	r2, r6
 800080c:	4629      	mov	r1, r5
 800080e:	4630      	mov	r0, r6
 8000810:	9700      	str	r7, [sp, #0]
 8000812:	f7ff ff9f 	bl	8000754 <Draw_Line>
    Draw_Line(x1,y2,x2,y2,front_color);
 8000816:	4630      	mov	r0, r6
 8000818:	4623      	mov	r3, r4
 800081a:	4642      	mov	r2, r8
 800081c:	4621      	mov	r1, r4
 800081e:	9700      	str	r7, [sp, #0]
 8000820:	f7ff ff98 	bl	8000754 <Draw_Line>
    Draw_Line(x2,y1,x2,y2,front_color);
 8000824:	4623      	mov	r3, r4
 8000826:	4642      	mov	r2, r8
 8000828:	4629      	mov	r1, r5
 800082a:	4640      	mov	r0, r8
 800082c:	9708      	str	r7, [sp, #32]
}
 800082e:	b002      	add	sp, #8
 8000830:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Draw_Line(x2,y1,x2,y2,front_color);
 8000834:	f7ff bf8e 	b.w	8000754 <Draw_Line>

08000838 <Draw_Circle>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Circle(uint32_t x0, uint32_t y0, uint32_t r, uint32_t front_color)
{
 8000838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800083c:	461d      	mov	r5, r3
    int a,b;
    int di;
    a=0;b=r;      
    di=3-(r<<1);             //判断下个点位置的标志
 800083e:	0053      	lsls	r3, r2, #1
{
 8000840:	b089      	sub	sp, #36	; 0x24
    di=3-(r<<1);             //判断下个点位置的标志
 8000842:	f1c3 0303 	rsb	r3, r3, #3
    while(a<=b)
 8000846:	2a00      	cmp	r2, #0
{
 8000848:	e9cd 0100 	strd	r0, r1, [sp]
    di=3-(r<<1);             //判断下个点位置的标志
 800084c:	9302      	str	r3, [sp, #8]
    while(a<=b)
 800084e:	db71      	blt.n	8000934 <Draw_Circle+0xfc>
    g = g >> 2;
 8000850:	f3c5 2385 	ubfx	r3, r5, #10, #6
 8000854:	4616      	mov	r6, r2
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000856:	015b      	lsls	r3, r3, #5
    r = r >> 3;
 8000858:	f3c5 42c4 	ubfx	r2, r5, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800085c:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    b = b >> 2;
 8000860:	f3c5 0285 	ubfx	r2, r5, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000864:	4313      	orrs	r3, r2
 8000866:	ba5b      	rev16	r3, r3
 8000868:	b29b      	uxth	r3, r3
    a=0;b=r;      
 800086a:	2400      	movs	r4, #0
 800086c:	9305      	str	r3, [sp, #20]
 800086e:	e008      	b.n	8000882 <Draw_Circle+0x4a>
        a++;
        //使用Bresenham算法画圆
        if(di<0)di +=4*a+6;   
        else
        {
            di+=10+4*(a-b);   
 8000870:	9a02      	ldr	r2, [sp, #8]
 8000872:	1ba3      	subs	r3, r4, r6
 8000874:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            b--;
 8000878:	3e01      	subs	r6, #1
            di+=10+4*(a-b);   
 800087a:	330a      	adds	r3, #10
    while(a<=b)
 800087c:	42a6      	cmp	r6, r4
            di+=10+4*(a-b);   
 800087e:	9302      	str	r3, [sp, #8]
    while(a<=b)
 8000880:	db58      	blt.n	8000934 <Draw_Circle+0xfc>
        Draw_Pixel(x0+a, y0-b, front_color);             //5
 8000882:	9f00      	ldr	r7, [sp, #0]
 8000884:	9b01      	ldr	r3, [sp, #4]
 8000886:	eb07 0904 	add.w	r9, r7, r4
 800088a:	eba3 0b06 	sub.w	fp, r3, r6
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 800088e:	9f05      	ldr	r7, [sp, #20]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8000890:	464a      	mov	r2, r9
 8000892:	4659      	mov	r1, fp
 8000894:	4648      	mov	r0, r9
 8000896:	465b      	mov	r3, fp
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 8000898:	f8ad 701e 	strh.w	r7, [sp, #30]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 800089c:	f000 fb58 	bl	8000f50 <LCD_SetWindows>
    LCD_SetDataLine();
 80008a0:	9b01      	ldr	r3, [sp, #4]
 80008a2:	eba3 0a04 	sub.w	sl, r3, r4
 80008a6:	f000 f9ef 	bl	8000c88 <LCD_SetDataLine>
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 80008aa:	9f00      	ldr	r7, [sp, #0]
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80008ac:	2102      	movs	r1, #2
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 80008ae:	19f7      	adds	r7, r6, r7
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80008b0:	f10d 001e 	add.w	r0, sp, #30
 80008b4:	f000 f9f0 	bl	8000c98 <LCD_WriteDatas>
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 80008b8:	eb0a 0344 	add.w	r3, sl, r4, lsl #1
 80008bc:	4638      	mov	r0, r7
 80008be:	462a      	mov	r2, r5
 80008c0:	4651      	mov	r1, sl
 80008c2:	9304      	str	r3, [sp, #16]
 80008c4:	9703      	str	r7, [sp, #12]
 80008c6:	f7ff fe8f 	bl	80005e8 <Draw_Pixel>
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 80008ca:	9b04      	ldr	r3, [sp, #16]
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 80008cc:	9a01      	ldr	r2, [sp, #4]
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 80008ce:	4619      	mov	r1, r3
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 80008d0:	eb06 0802 	add.w	r8, r6, r2
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 80008d4:	9803      	ldr	r0, [sp, #12]
 80008d6:	462a      	mov	r2, r5
 80008d8:	f7ff fe86 	bl	80005e8 <Draw_Pixel>
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 80008dc:	0067      	lsls	r7, r4, #1
 80008de:	4641      	mov	r1, r8
 80008e0:	4648      	mov	r0, r9
 80008e2:	462a      	mov	r2, r5
 80008e4:	eba9 0707 	sub.w	r7, r9, r7
 80008e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80008ec:	f7ff fe7c 	bl	80005e8 <Draw_Pixel>
        Draw_Pixel(x0-b, y0+a, front_color);             
 80008f0:	9b00      	ldr	r3, [sp, #0]
        Draw_Pixel(x0-a, y0+b, front_color);             //1       
 80008f2:	462a      	mov	r2, r5
 80008f4:	4638      	mov	r0, r7
 80008f6:	9903      	ldr	r1, [sp, #12]
        Draw_Pixel(x0-b, y0+a, front_color);             
 80008f8:	eba3 0806 	sub.w	r8, r3, r6
        Draw_Pixel(x0-a, y0+b, front_color);             //1       
 80008fc:	f7ff fe74 	bl	80005e8 <Draw_Pixel>
        Draw_Pixel(x0-b, y0+a, front_color);             
 8000900:	9b04      	ldr	r3, [sp, #16]
 8000902:	462a      	mov	r2, r5
 8000904:	4619      	mov	r1, r3
 8000906:	4640      	mov	r0, r8
 8000908:	f7ff fe6e 	bl	80005e8 <Draw_Pixel>
        Draw_Pixel(x0-a, y0-b, front_color);             //2             
 800090c:	462a      	mov	r2, r5
 800090e:	4659      	mov	r1, fp
 8000910:	4638      	mov	r0, r7
 8000912:	f7ff fe69 	bl	80005e8 <Draw_Pixel>
        Draw_Pixel(x0-b, y0-a, front_color);             //7                 
 8000916:	462a      	mov	r2, r5
 8000918:	4651      	mov	r1, sl
 800091a:	4640      	mov	r0, r8
 800091c:	f7ff fe64 	bl	80005e8 <Draw_Pixel>
        if(di<0)di +=4*a+6;   
 8000920:	9b02      	ldr	r3, [sp, #8]
        a++;
 8000922:	3401      	adds	r4, #1
        if(di<0)di +=4*a+6;   
 8000924:	2b00      	cmp	r3, #0
 8000926:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800092a:	daa1      	bge.n	8000870 <Draw_Circle+0x38>
 800092c:	3306      	adds	r3, #6
    while(a<=b)
 800092e:	42a6      	cmp	r6, r4
        if(di<0)di +=4*a+6;   
 8000930:	9302      	str	r3, [sp, #8]
    while(a<=b)
 8000932:	daa6      	bge.n	8000882 <Draw_Circle+0x4a>
        }                           
    }
} 
 8000934:	b009      	add	sp, #36	; 0x24
 8000936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800093a:	bf00      	nop

0800093c <Draw_ChineseFont>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_ChineseFont(uint32_t x, uint32_t y, char *cn, uint32_t front_color, uint32_t back_color)
{
 800093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000940:	ed2d 8b02 	vpush	{d8}
    uint32_t x0=x;
    uint32_t y0=y;
    static uint8_t *buf;
    BitMap bitmap; 

    if (!buf)
 8000944:	4c5d      	ldr	r4, [pc, #372]	; (8000abc <Draw_ChineseFont+0x180>)
{
 8000946:	b083      	sub	sp, #12
    if (!buf)
 8000948:	6824      	ldr	r4, [r4, #0]
{
 800094a:	4606      	mov	r6, r0
    if (!buf)
 800094c:	9400      	str	r4, [sp, #0]
{
 800094e:	461c      	mov	r4, r3
    if (!buf)
 8000950:	9b00      	ldr	r3, [sp, #0]
{
 8000952:	460f      	mov	r7, r1
 8000954:	4615      	mov	r5, r2
 8000956:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!buf)
 800095a:	2b00      	cmp	r3, #0
 800095c:	f000 80a4 	beq.w	8000aa8 <Draw_ChineseFont+0x16c>
 8000960:	1ceb      	adds	r3, r5, #3
    g = g >> 2;
 8000962:	f3c8 2a85 	ubfx	sl, r8, #10, #6
 8000966:	f3c4 2985 	ubfx	r9, r4, #10, #6
 800096a:	9300      	str	r3, [sp, #0]
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800096c:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    r = r >> 3;
 8000970:	f3c8 43c4 	ubfx	r3, r8, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000974:	ea4a 2ac3 	orr.w	sl, sl, r3, lsl #11
 8000978:	ea4f 1949 	mov.w	r9, r9, lsl #5
    r = r >> 3;
 800097c:	f3c4 43c4 	ubfx	r3, r4, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000980:	ea49 29c3 	orr.w	r9, r9, r3, lsl #11
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8000984:	f107 031c 	add.w	r3, r7, #28
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000988:	463d      	mov	r5, r7
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 800098a:	ee08 3a10 	vmov	s16, r3
    b = b >> 2;
 800098e:	f3c8 0885 	ubfx	r8, r8, #2, #6
 8000992:	f3c4 0485 	ubfx	r4, r4, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8000996:	ea4a 0a08 	orr.w	sl, sl, r8
 800099a:	ea49 0904 	orr.w	r9, r9, r4
 800099e:	fa9a fa9a 	rev16.w	sl, sl
 80009a2:	fa99 f999 	rev16.w	r9, r9
 80009a6:	fa1f fa8a 	uxth.w	sl, sl
 80009aa:	fa1f f989 	uxth.w	r9, r9
        buf = malloc(32*29*2);
        if (!buf)
            return;
    }
    
    while (*cn != '\0')
 80009ae:	9b00      	ldr	r3, [sp, #0]
 80009b0:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 80009b4:	2900      	cmp	r1, #0
 80009b6:	d072      	beq.n	8000a9e <Draw_ChineseFont+0x162>
    {
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 80009b8:	4b41      	ldr	r3, [pc, #260]	; (8000ac0 <Draw_ChineseFont+0x184>)
 80009ba:	4634      	mov	r4, r6
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d05d      	beq.n	8000a7e <Draw_ChineseFont+0x142>
 80009c2:	f8df b104 	ldr.w	fp, [pc, #260]	; 8000ac8 <Draw_ChineseFont+0x18c>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80009c6:	f106 021f 	add.w	r2, r6, #31
 80009ca:	e008      	b.n	80009de <Draw_ChineseFont+0xa2>
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 80009cc:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80009d0:	f10b 0b78 	add.w	fp, fp, #120	; 0x78
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d052      	beq.n	8000a7e <Draw_ChineseFont+0x142>
        {   //wordNum扫描字库CnChar32x29的字数
            if ((CnChar32x29[wordNum].Index[0]==*cn)
 80009d8:	9900      	ldr	r1, [sp, #0]
 80009da:	f811 1c03 	ldrb.w	r1, [r1, #-3]
 80009de:	4299      	cmp	r1, r3
 80009e0:	d1f4      	bne.n	80009cc <Draw_ChineseFont+0x90>
                 &&(CnChar32x29[wordNum].Index[1]==*(cn+1))
 80009e2:	9b00      	ldr	r3, [sp, #0]
 80009e4:	f81b 1c76 	ldrb.w	r1, [fp, #-118]
 80009e8:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d1ed      	bne.n	80009cc <Draw_ChineseFont+0x90>
                 &&(CnChar32x29[wordNum].Index[2]==*(cn+2)))
 80009f0:	9b00      	ldr	r3, [sp, #0]
 80009f2:	f81b 1c75 	ldrb.w	r1, [fp, #-117]
 80009f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80009fa:	4299      	cmp	r1, r3
 80009fc:	d1e6      	bne.n	80009cc <Draw_ChineseFont+0x90>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, front_color);
                        }                       
                        else
                        {
                            //Draw_Pixel(x,y,back_color);
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, back_color);
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <Draw_ChineseFont+0x180>)
 8000a00:	f1ab 0e74 	sub.w	lr, fp, #116	; 0x74
 8000a04:	f8d3 8000 	ldr.w	r8, [r3]
                    color=CnChar32x29[wordNum].Msk[i];
 8000a08:	f04f 0c08 	mov.w	ip, #8
 8000a0c:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
                    for(j=0;j<8;j++) 
 8000a10:	e010      	b.n	8000a34 <Draw_ChineseFont+0xf8>
    tmpBuf[y*w + x] = dwColor;    
 8000a12:	f828 9013 	strh.w	r9, [r8, r3, lsl #1]
                        } 
                        color<<=1;
                        x++;
 8000a16:	3401      	adds	r4, #1
                        if((x-x0)==32)
 8000a18:	1ba3      	subs	r3, r4, r6
 8000a1a:	2b20      	cmp	r3, #32
                        color<<=1;
 8000a1c:	ea4f 0040 	mov.w	r0, r0, lsl #1
                        if((x-x0)==32)
 8000a20:	d105      	bne.n	8000a2e <Draw_ChineseFont+0xf2>
                        {
                            x=x0;
                            y++;
 8000a22:	3501      	adds	r5, #1
                            if((y-y0)==29)
 8000a24:	1beb      	subs	r3, r5, r7
                            {
                                y=y0;
 8000a26:	2b1d      	cmp	r3, #29
 8000a28:	bf08      	it	eq
 8000a2a:	463d      	moveq	r5, r7
 8000a2c:	4634      	mov	r4, r6
                    for(j=0;j<8;j++) 
 8000a2e:	f1bc 0c01 	subs.w	ip, ip, #1
 8000a32:	d00d      	beq.n	8000a50 <Draw_ChineseFont+0x114>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, front_color);
 8000a34:	1be9      	subs	r1, r5, r7
 8000a36:	1ba3      	subs	r3, r4, r6
                        if((color&0x80)==0x80)
 8000a38:	f010 0f80 	tst.w	r0, #128	; 0x80
    tmpBuf[y*w + x] = dwColor;    
 8000a3c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
                        if((color&0x80)==0x80)
 8000a40:	d1e7      	bne.n	8000a12 <Draw_ChineseFont+0xd6>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, back_color);
 8000a42:	1beb      	subs	r3, r5, r7
 8000a44:	1ba1      	subs	r1, r4, r6
    tmpBuf[y*w + x] = dwColor;    
 8000a46:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 8000a4a:	f828 a013 	strh.w	sl, [r8, r3, lsl #1]
}
 8000a4e:	e7e2      	b.n	8000a16 <Draw_ChineseFont+0xda>
                for(i=0; i<116; i++) 
 8000a50:	45de      	cmp	lr, fp
 8000a52:	d1d9      	bne.n	8000a08 <Draw_ChineseFont+0xcc>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8000a54:	ee18 3a10 	vmov	r3, s16
 8000a58:	4639      	mov	r1, r7
 8000a5a:	4630      	mov	r0, r6
 8000a5c:	9201      	str	r2, [sp, #4]
 8000a5e:	f000 fa77 	bl	8000f50 <LCD_SetWindows>
    LCD_SetDataLine();
 8000a62:	f000 f911 	bl	8000c88 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8000a66:	4640      	mov	r0, r8
 8000a68:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8000a6c:	f000 f914 	bl	8000c98 <LCD_WriteDatas>
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8000a70:	f89b 3001 	ldrb.w	r3, [fp, #1]
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8000a74:	9a01      	ldr	r2, [sp, #4]
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8000a76:	f10b 0b78 	add.w	fp, fp, #120	; 0x78
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d1ac      	bne.n	80009d8 <Draw_ChineseFont+0x9c>
            
        } //for (wordNum=0; wordNum<20; wordNum++)结束
        cn += 3;  /* 一个汉字的UTF8编码占据3字节 */
        x += 32;
        
        if (x >= g_lcd_width)
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <Draw_ChineseFont+0x188>)
        x += 32;
 8000a80:	f104 0620 	add.w	r6, r4, #32
        if (x >= g_lcd_width)
 8000a84:	681a      	ldr	r2, [r3, #0]
        {
            x = 0;
            y += 29;
        }

        if (y + 29 >= g_lcd_width)
 8000a86:	9900      	ldr	r1, [sp, #0]
        if (x >= g_lcd_width)
 8000a88:	42b2      	cmp	r2, r6
            y += 29;
 8000a8a:	bf98      	it	ls
 8000a8c:	351d      	addls	r5, #29
        if (y + 29 >= g_lcd_width)
 8000a8e:	f105 031d 	add.w	r3, r5, #29
            x = 0;
 8000a92:	bf98      	it	ls
 8000a94:	2600      	movls	r6, #0
        if (y + 29 >= g_lcd_width)
 8000a96:	3103      	adds	r1, #3
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	9100      	str	r1, [sp, #0]
 8000a9c:	d887      	bhi.n	80009ae <Draw_ChineseFont+0x72>
            return;
        
        x0=x;
    }
}   
 8000a9e:	b003      	add	sp, #12
 8000aa0:	ecbd 8b02 	vpop	{d8}
 8000aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buf = malloc(32*29*2);
 8000aa8:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8000aac:	f003 fdb0 	bl	8004610 <malloc>
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <Draw_ChineseFont+0x180>)
 8000ab2:	6018      	str	r0, [r3, #0]
        if (!buf)
 8000ab4:	2800      	cmp	r0, #0
 8000ab6:	f47f af53 	bne.w	8000960 <Draw_ChineseFont+0x24>
 8000aba:	e7f0      	b.n	8000a9e <Draw_ChineseFont+0x162>
 8000abc:	200008f8 	.word	0x200008f8
 8000ac0:	080060f8 	.word	0x080060f8
 8000ac4:	20000900 	.word	0x20000900
 8000ac8:	0800616f 	.word	0x0800616f

08000acc <Draw_Picture>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Picture(uint32_t x, uint32_t y, const uint8_t *pic)
{
 8000acc:	b570      	push	{r4, r5, r6, lr}
 8000ace:	4616      	mov	r6, r2
    P_HEADCOLOR pHead = (P_HEADCOLOR)pic;
    BitMap bitmap; 

    int w = pHead->w;
 8000ad0:	8875      	ldrh	r5, [r6, #2]
    int h = pHead->h;
 8000ad2:	f8b6 c004 	ldrh.w	ip, [r6, #4]

    /* 转为小字节序 */
    w = ((w<<8)|(w>>8)) & 0xffff;
 8000ad6:	122c      	asrs	r4, r5, #8
 8000ad8:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    h = ((h<<8)|(h>>8)) & 0xffff;
 8000adc:	ea4f 252c 	mov.w	r5, ip, asr #8
 8000ae0:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8000ae4:	1e42      	subs	r2, r0, #1
 8000ae6:	1e4b      	subs	r3, r1, #1
    w = ((w<<8)|(w>>8)) & 0xffff;
 8000ae8:	b2a4      	uxth	r4, r4
    h = ((h<<8)|(h>>8)) & 0xffff;
 8000aea:	b2ad      	uxth	r5, r5
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8000aec:	4422      	add	r2, r4
 8000aee:	442b      	add	r3, r5
 8000af0:	f000 fa2e 	bl	8000f50 <LCD_SetWindows>
    LCD_SetDataLine();
 8000af4:	f000 f8c8 	bl	8000c88 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8000af8:	fb05 f104 	mul.w	r1, r5, r4
 8000afc:	f106 0008 	add.w	r0, r6, #8
 8000b00:	0049      	lsls	r1, r1, #1

    bitmap.width = w;
    bitmap.height = h;        
    bitmap.datas = (uint8_t *)pic;
    Draw_Region(x, y, &bitmap);
}
 8000b02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8000b06:	f000 b8c7 	b.w	8000c98 <LCD_WriteDatas>
 8000b0a:	bf00      	nop

08000b0c <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000b0c:	b500      	push	{lr}
 8000b0e:	b09d      	sub	sp, #116	; 0x74

  HAL_Init();
 8000b10:	f000 fac4 	bl	800109c <HAL_Init>
  }
}

static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b14:	2300      	movs	r3, #0
 8000b16:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8000b1a:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8000b1e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b22:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8000b26:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b2a:	4a2e      	ldr	r2, [pc, #184]	; (8000be4 <main+0xd8>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2c:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	9307      	str	r3, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b32:	6913      	ldr	r3, [r2, #16]
 8000b34:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000b38:	6113      	str	r3, [r2, #16]
 8000b3a:	6913      	ldr	r3, [r2, #16]
 8000b3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000b40:	9301      	str	r3, [sp, #4]
 8000b42:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b44:	6953      	ldr	r3, [r2, #20]
 8000b46:	071b      	lsls	r3, r3, #28
 8000b48:	d5fc      	bpl.n	8000b44 <main+0x38>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4a:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b4e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b52:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b56:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8000b5a:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b5c:	2128      	movs	r1, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b5e:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b62:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b64:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b66:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b68:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000b6a:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000b6c:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b6e:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8000b70:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b72:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8000b76:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000b78:	9115      	str	r1, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7a:	f000 fe95 	bl	80018a8 <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	b100      	cbz	r0, 8000b84 <main+0x78>
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 8000b82:	e7fe      	b.n	8000b82 <main+0x76>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	221f      	movs	r2, #31
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b86:	2105      	movs	r1, #5
 8000b88:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8a:	e9cd 4303 	strd	r4, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000b92:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b94:	9202      	str	r2, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b96:	f000 fd27 	bl	80015e8 <HAL_RCC_ClockConfig>
 8000b9a:	bb00      	cbnz	r0, 8000bde <main+0xd2>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 8000b9c:	4a12      	ldr	r2, [pc, #72]	; (8000be8 <main+0xdc>)
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ba4:	f043 0320 	orr.w	r3, r3, #32
 8000ba8:	6013      	str	r3, [r2, #0]
  bsp_led_init();
 8000baa:	f7ff fca3 	bl	80004f4 <bsp_led_init>
  bsp_lcd_init();
 8000bae:	f7ff fc05 	bl	80003bc <bsp_lcd_init>
  MX_SPI2_Init();
 8000bb2:	f7ff fb6b 	bl	800028c <MX_SPI2_Init>
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000bb6:	f000 fc57 	bl	8001468 <HAL_ICACHE_Enable>
 8000bba:	4604      	mov	r4, r0
 8000bbc:	b980      	cbnz	r0, 8000be0 <main+0xd4>
  LCD_Init(1);
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	f000 f888 	bl	8000cd4 <LCD_Init>
  Draw_Init();
 8000bc4:	f7ff fcd2 	bl	800056c <Draw_Init>
  Draw_Clear(0);
 8000bc8:	4620      	mov	r0, r4
 8000bca:	f7ff fcd7 	bl	800057c <Draw_Clear>
  bsp_test_lcd();
 8000bce:	f7ff fc43 	bl	8000458 <bsp_test_lcd>
	bsp_led_toggle();
 8000bd2:	f7ff fcc3 	bl	800055c <bsp_led_toggle>
    HAL_Delay(200);
 8000bd6:	20c8      	movs	r0, #200	; 0xc8
 8000bd8:	f000 fa98 	bl	800110c <HAL_Delay>
  while (1)
 8000bdc:	e7f9      	b.n	8000bd2 <main+0xc6>
  while(1)
 8000bde:	e7fe      	b.n	8000bde <main+0xd2>
 8000be0:	e7fe      	b.n	8000be0 <main+0xd4>
 8000be2:	bf00      	nop
 8000be4:	44020800 	.word	0x44020800
 8000be8:	40022000 	.word	0x40022000

08000bec <Error_Handler>:
 8000bec:	e7fe      	b.n	8000bec <Error_Handler>
 8000bee:	bf00      	nop

08000bf0 <LCD_WritePara.isra.0>:
    LCD_SetCmdLine();
    return SPI_WriteDatas(&cmd, 1);
}

/* 给SPI LCD发送1个参数,通常是先调用LCD_WriteCmd,再调用LCD_WritePara */
static int LCD_WritePara(uint8_t data)
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8000bf4:	4c0f      	ldr	r4, [pc, #60]	; (8000c34 <LCD_WritePara.isra.0+0x44>)
static int LCD_WritePara(uint8_t data)
 8000bf6:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WritePara(uint8_t data)
 8000c00:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8000c04:	f000 fc20 	bl	8001448 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8000c08:	4620      	mov	r0, r4
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c10:	f000 fc1a 	bl	8001448 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8000c14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c18:	f10d 0107 	add.w	r1, sp, #7
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4806      	ldr	r0, [pc, #24]	; (8000c38 <LCD_WritePara.isra.0+0x48>)
 8000c20:	f003 fb12 	bl	8004248 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f000 fc0c 	bl	8001448 <HAL_GPIO_WritePin>
{
    LCD_SetDataLine();
    return SPI_WriteDatas(&data, 1);
}
 8000c30:	b002      	add	sp, #8
 8000c32:	bd10      	pop	{r4, pc}
 8000c34:	42020c00 	.word	0x42020c00
 8000c38:	20000868 	.word	0x20000868

08000c3c <LCD_WriteCmd.isra.0>:
static int LCD_WriteCmd(uint8_t cmd)
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8000c40:	4c0f      	ldr	r4, [pc, #60]	; (8000c80 <LCD_WriteCmd.isra.0+0x44>)
static int LCD_WriteCmd(uint8_t cmd)
 8000c42:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8000c44:	4620      	mov	r0, r4
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WriteCmd(uint8_t cmd)
 8000c4c:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8000c50:	f000 fbfa 	bl	8001448 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8000c54:	4620      	mov	r0, r4
 8000c56:	2200      	movs	r2, #0
 8000c58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c5c:	f000 fbf4 	bl	8001448 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8000c60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c64:	f10d 0107 	add.w	r1, sp, #7
 8000c68:	2201      	movs	r2, #1
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <LCD_WriteCmd.isra.0+0x48>)
 8000c6c:	f003 faec 	bl	8004248 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8000c70:	2201      	movs	r2, #1
 8000c72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c76:	4620      	mov	r0, r4
 8000c78:	f000 fbe6 	bl	8001448 <HAL_GPIO_WritePin>
}
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd10      	pop	{r4, pc}
 8000c80:	42020c00 	.word	0x42020c00
 8000c84:	20000868 	.word	0x20000868

08000c88 <LCD_SetDataLine>:
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8e:	4801      	ldr	r0, [pc, #4]	; (8000c94 <LCD_SetDataLine+0xc>)
 8000c90:	f000 bbda 	b.w	8001448 <HAL_GPIO_WritePin>
 8000c94:	42020c00 	.word	0x42020c00

08000c98 <LCD_WriteDatas>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int LCD_WriteDatas(uint8_t *datas, uint32_t count)
{
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	4605      	mov	r5, r0
 8000c9c:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8000c9e:	4e0b      	ldr	r6, [pc, #44]	; (8000ccc <LCD_WriteDatas+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ca8:	f000 fbce 	bl	8001448 <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8000cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb0:	4629      	mov	r1, r5
 8000cb2:	b2a2      	uxth	r2, r4
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <LCD_WriteDatas+0x38>)
 8000cb6:	f003 fac7 	bl	8004248 <HAL_SPI_Transmit>
 8000cba:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc4:	f000 fbc0 	bl	8001448 <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);  /* 由调用者设置RS引脚 */
    return SPI_WriteDatas(datas, count);
}
 8000cc8:	4260      	negs	r0, r4
 8000cca:	bd70      	pop	{r4, r5, r6, pc}
 8000ccc:	42020c00 	.word	0x42020c00
 8000cd0:	20000868 	.word	0x20000868

08000cd4 <LCD_Init>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_Init(lcd_display_rotation_t rotation)
{       
 8000cd4:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2110      	movs	r1, #16
{       
 8000cda:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 8000cdc:	4893      	ldr	r0, [pc, #588]	; (8000f2c <LCD_Init+0x258>)
 8000cde:	f000 fbb3 	bl	8001448 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000ce2:	2064      	movs	r0, #100	; 0x64
 8000ce4:	f000 fa12 	bl	800110c <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	488f      	ldr	r0, [pc, #572]	; (8000f2c <LCD_Init+0x258>)
 8000cee:	f000 fbab 	bl	8001448 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000cf2:	2064      	movs	r0, #100	; 0x64
 8000cf4:	f000 fa0a 	bl	800110c <HAL_Delay>
        HAL_GPIO_WritePin(PWM_GPIO_Port,PWM_Pin,GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cfe:	488b      	ldr	r0, [pc, #556]	; (8000f2c <LCD_Init+0x258>)
 8000d00:	f000 fba2 	bl	8001448 <HAL_GPIO_WritePin>
    LCD_Reset();    
    LCD_BackLightControl(1);
    
#if 1   
    // Positive Gamma Control
    LCD_WriteCmd( 0xe0);
 8000d04:	20e0      	movs	r0, #224	; 0xe0
 8000d06:	f7ff ff99 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xf0);
 8000d0a:	20f0      	movs	r0, #240	; 0xf0
 8000d0c:	f7ff ff70 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3e);
 8000d10:	203e      	movs	r0, #62	; 0x3e
 8000d12:	f7ff ff6d 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x30);
 8000d16:	2030      	movs	r0, #48	; 0x30
 8000d18:	f7ff ff6a 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8000d1c:	2006      	movs	r0, #6
 8000d1e:	f7ff ff67 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0a);
 8000d22:	200a      	movs	r0, #10
 8000d24:	f7ff ff64 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x03);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f7ff ff61 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 8000d2e:	204d      	movs	r0, #77	; 0x4d
 8000d30:	f7ff ff5e 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x56);
 8000d34:	2056      	movs	r0, #86	; 0x56
 8000d36:	f7ff ff5b 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3a);
 8000d3a:	203a      	movs	r0, #58	; 0x3a
 8000d3c:	f7ff ff58 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8000d40:	2006      	movs	r0, #6
 8000d42:	f7ff ff55 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0f);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f7ff ff52 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x04);
 8000d4c:	2004      	movs	r0, #4
 8000d4e:	f7ff ff4f 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 8000d52:	2018      	movs	r0, #24
 8000d54:	f7ff ff4c 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8000d58:	2013      	movs	r0, #19
 8000d5a:	f7ff ff49 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff ff46 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Negative Gamma Control
    LCD_WriteCmd(0xe1);
 8000d64:	20e1      	movs	r0, #225	; 0xe1
 8000d66:	f7ff ff69 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x0f);
 8000d6a:	200f      	movs	r0, #15
 8000d6c:	f7ff ff40 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x37);
 8000d70:	2037      	movs	r0, #55	; 0x37
 8000d72:	f7ff ff3d 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x31);
 8000d76:	2031      	movs	r0, #49	; 0x31
 8000d78:	f7ff ff3a 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0b);
 8000d7c:	200b      	movs	r0, #11
 8000d7e:	f7ff ff37 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0d);
 8000d82:	200d      	movs	r0, #13
 8000d84:	f7ff ff34 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8000d88:	2006      	movs	r0, #6
 8000d8a:	f7ff ff31 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 8000d8e:	204d      	movs	r0, #77	; 0x4d
 8000d90:	f7ff ff2e 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x34);
 8000d94:	2034      	movs	r0, #52	; 0x34
 8000d96:	f7ff ff2b 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x38);
 8000d9a:	2038      	movs	r0, #56	; 0x38
 8000d9c:	f7ff ff28 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8000da0:	2006      	movs	r0, #6
 8000da2:	f7ff ff25 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x11);
 8000da6:	2011      	movs	r0, #17
 8000da8:	f7ff ff22 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 8000dac:	2001      	movs	r0, #1
 8000dae:	f7ff ff1f 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 8000db2:	2018      	movs	r0, #24
 8000db4:	f7ff ff1c 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8000db8:	2013      	movs	r0, #19
 8000dba:	f7ff ff19 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f7ff ff16 	bl	8000bf0 <LCD_WritePara.isra.0>
    
    // Power Control 1
    LCD_WriteCmd(0xc0);
 8000dc4:	20c0      	movs	r0, #192	; 0xc0
 8000dc6:	f7ff ff39 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x18);
 8000dca:	2018      	movs	r0, #24
 8000dcc:	f7ff ff10 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x17);
 8000dd0:	2017      	movs	r0, #23
 8000dd2:	f7ff ff0d 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Power Control 2
    LCD_WriteCmd(0xc1);
 8000dd6:	20c1      	movs	r0, #193	; 0xc1
 8000dd8:	f7ff ff30 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x41);
 8000ddc:	2041      	movs	r0, #65	; 0x41
 8000dde:	f7ff ff07 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Power Control 3
    LCD_WriteCmd(0xc5);
 8000de2:	20c5      	movs	r0, #197	; 0xc5
 8000de4:	f7ff ff2a 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff ff01 	bl	8000bf0 <LCD_WritePara.isra.0>

    // VCOM Control
    LCD_WriteCmd(0x1a);
 8000dee:	201a      	movs	r0, #26
 8000df0:	f7ff ff24 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x80);
 8000df4:	2080      	movs	r0, #128	; 0x80
 8000df6:	f7ff fefb 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Memory Access Control
    LCD_WriteCmd(0x36);
 8000dfa:	2036      	movs	r0, #54	; 0x36
 8000dfc:	f7ff ff1e 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x48);
 8000e00:	2048      	movs	r0, #72	; 0x48
 8000e02:	f7ff fef5 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Pixel Interface Format
    LCD_WriteCmd(0x3a);
 8000e06:	203a      	movs	r0, #58	; 0x3a
 8000e08:	f7ff ff18 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x55);
 8000e0c:	2055      	movs	r0, #85	; 0x55
 8000e0e:	f7ff feef 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Interface Mode Control
    LCD_WriteCmd(0xb0);
 8000e12:	20b0      	movs	r0, #176	; 0xb0
 8000e14:	f7ff ff12 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8000e18:	2000      	movs	r0, #0
 8000e1a:	f7ff fee9 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Frame Rate Control
    LCD_WriteCmd(0xb1);
 8000e1e:	20b1      	movs	r0, #177	; 0xb1
 8000e20:	f7ff ff0c 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa0);
 8000e24:	20a0      	movs	r0, #160	; 0xa0
 8000e26:	f7ff fee3 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Display Inversion Control
    LCD_WriteCmd(0xb4);
 8000e2a:	20b4      	movs	r0, #180	; 0xb4
 8000e2c:	f7ff ff06 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 8000e30:	2002      	movs	r0, #2
 8000e32:	f7ff fedd 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Display Function Control
    LCD_WriteCmd(0xb6);
 8000e36:	20b6      	movs	r0, #182	; 0xb6
 8000e38:	f7ff ff00 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f7ff fed7 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x02);
 8000e42:	2002      	movs	r0, #2
 8000e44:	f7ff fed4 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Set image function
    LCD_WriteCmd(0xe9);
 8000e48:	20e9      	movs	r0, #233	; 0xe9
 8000e4a:	f7ff fef7 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fece 	bl	8000bf0 <LCD_WritePara.isra.0>

    //Adjust Control 3
    LCD_WriteCmd(0xf7);
 8000e54:	20f7      	movs	r0, #247	; 0xf7
 8000e56:	f7ff fef1 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa9);
 8000e5a:	20a9      	movs	r0, #169	; 0xa9
 8000e5c:	f7ff fec8 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x51);
 8000e60:	2051      	movs	r0, #81	; 0x51
 8000e62:	f7ff fec5 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x2c);
 8000e66:	202c      	movs	r0, #44	; 0x2c
 8000e68:	f7ff fec2 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x82);
 8000e6c:	2082      	movs	r0, #130	; 0x82
 8000e6e:	f7ff febf 	bl	8000bf0 <LCD_WritePara.isra.0>

    // Write_memory_start
    LCD_WriteCmd(0x21);
 8000e72:	2021      	movs	r0, #33	; 0x21
 8000e74:	f7ff fee2 	bl	8000c3c <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 8000e78:	2078      	movs	r0, #120	; 0x78
 8000e7a:	f000 f947 	bl	800110c <HAL_Delay>
    //Exit Sleep
    LCD_WriteCmd(0x11);
 8000e7e:	2011      	movs	r0, #17
 8000e80:	f7ff fedc 	bl	8000c3c <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 8000e84:	2078      	movs	r0, #120	; 0x78
 8000e86:	f000 f941 	bl	800110c <HAL_Delay>

    switch (rotation)
 8000e8a:	2c02      	cmp	r4, #2
    {
        case LCD_DISPLAY_ROTATION_0:
            LCD_WriteCmd(0x36);
 8000e8c:	f04f 0036 	mov.w	r0, #54	; 0x36
    switch (rotation)
 8000e90:	d036      	beq.n	8000f00 <LCD_Init+0x22c>
 8000e92:	2c03      	cmp	r4, #3
 8000e94:	d046      	beq.n	8000f24 <LCD_Init+0x250>
 8000e96:	2c01      	cmp	r4, #1
 8000e98:	d036      	beq.n	8000f08 <LCD_Init+0x234>
            LCD_WriteCmd(0x36);
 8000e9a:	f7ff fecf 	bl	8000c3c <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x48);
 8000e9e:	2048      	movs	r0, #72	; 0x48
            g_lcd_height = 320;
            g_lcd_width  = 480;
            break;
        case LCD_DISPLAY_ROTATION_180:
            LCD_WriteCmd(0x36);
            LCD_WritePara(0x88);
 8000ea0:	f7ff fea6 	bl	8000bf0 <LCD_WritePara.isra.0>
            g_lcd_height = 480;
 8000ea4:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
            g_lcd_width  = 320;
 8000ea8:	f44f 72a0 	mov.w	r2, #320	; 0x140
            g_lcd_height = 480;
 8000eac:	4920      	ldr	r1, [pc, #128]	; (8000f30 <LCD_Init+0x25c>)
            g_lcd_width  = 320;
 8000eae:	4b21      	ldr	r3, [pc, #132]	; (8000f34 <LCD_Init+0x260>)
            g_lcd_height = 480;
 8000eb0:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 320;
 8000eb2:	601a      	str	r2, [r3, #0]
            g_lcd_width  = 320;
            break;
    }

    // set_screen_size
    LCD_WriteCmd(0x2a);
 8000eb4:	202a      	movs	r0, #42	; 0x2a
 8000eb6:	f7ff fec1 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fe98 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8000ec0:	2000      	movs	r0, #0
 8000ec2:	f7ff fe95 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff fe92 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3f);
 8000ecc:	203f      	movs	r0, #63	; 0x3f
 8000ece:	f7ff fe8f 	bl	8000bf0 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2b);
 8000ed2:	202b      	movs	r0, #43	; 0x2b
 8000ed4:	f7ff feb2 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8000ed8:	2000      	movs	r0, #0
 8000eda:	f7ff fe89 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff fe86 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff fe83 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(0xdf);
 8000eea:	20df      	movs	r0, #223	; 0xdf
 8000eec:	f7ff fe80 	bl	8000bf0 <LCD_WritePara.isra.0>

    //Display on
    LCD_WriteCmd(0x29);
 8000ef0:	2029      	movs	r0, #41	; 0x29
 8000ef2:	f7ff fea3 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WriteCmd(0x21);     

    LCD_WriteCmd(0x29);     
#endif  

}
 8000ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(120);
 8000efa:	2078      	movs	r0, #120	; 0x78
 8000efc:	f000 b906 	b.w	800110c <HAL_Delay>
            LCD_WriteCmd(0x36);
 8000f00:	f7ff fe9c 	bl	8000c3c <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x88);
 8000f04:	2088      	movs	r0, #136	; 0x88
 8000f06:	e7cb      	b.n	8000ea0 <LCD_Init+0x1cc>
            LCD_WriteCmd(0x36);
 8000f08:	f7ff fe98 	bl	8000c3c <LCD_WriteCmd.isra.0>
            LCD_WritePara(0xe8);
 8000f0c:	20e8      	movs	r0, #232	; 0xe8
            LCD_WritePara(0x28);
 8000f0e:	f7ff fe6f 	bl	8000bf0 <LCD_WritePara.isra.0>
            g_lcd_height = 320;
 8000f12:	f44f 70a0 	mov.w	r0, #320	; 0x140
            g_lcd_width  = 480;
 8000f16:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
            g_lcd_height = 320;
 8000f1a:	4905      	ldr	r1, [pc, #20]	; (8000f30 <LCD_Init+0x25c>)
            g_lcd_width  = 480;
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <LCD_Init+0x260>)
            g_lcd_height = 320;
 8000f1e:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 480;
 8000f20:	601a      	str	r2, [r3, #0]
            break;
 8000f22:	e7c7      	b.n	8000eb4 <LCD_Init+0x1e0>
            LCD_WriteCmd(0x36);
 8000f24:	f7ff fe8a 	bl	8000c3c <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x28);
 8000f28:	2028      	movs	r0, #40	; 0x28
 8000f2a:	e7f0      	b.n	8000f0e <LCD_Init+0x23a>
 8000f2c:	42020400 	.word	0x42020400
 8000f30:	20000904 	.word	0x20000904
 8000f34:	20000908 	.word	0x20000908

08000f38 <LCD_GetInfo>:
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_GetInfo(uint32_t *pWidth, uint32_t *pHeight)
{
    *pHeight = g_lcd_height;
 8000f38:	4a03      	ldr	r2, [pc, #12]	; (8000f48 <LCD_GetInfo+0x10>)
    *pWidth  = g_lcd_width;
 8000f3a:	4b04      	ldr	r3, [pc, #16]	; (8000f4c <LCD_GetInfo+0x14>)
    *pHeight = g_lcd_height;
 8000f3c:	6812      	ldr	r2, [r2, #0]
    *pWidth  = g_lcd_width;
 8000f3e:	681b      	ldr	r3, [r3, #0]
    *pHeight = g_lcd_height;
 8000f40:	600a      	str	r2, [r1, #0]
    *pWidth  = g_lcd_width;
 8000f42:	6003      	str	r3, [r0, #0]
}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000904 	.word	0x20000904
 8000f4c:	20000908 	.word	0x20000908

08000f50 <LCD_SetWindows>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_SetWindows(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2)
{
 8000f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f52:	4607      	mov	r7, r0
 8000f54:	4616      	mov	r6, r2
 8000f56:	460d      	mov	r5, r1
 8000f58:	461c      	mov	r4, r3
    LCD_WriteCmd(0x2a);
 8000f5a:	202a      	movs	r0, #42	; 0x2a
 8000f5c:	f7ff fe6e 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara((x1 >> 8) & 0xFF);
 8000f60:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8000f64:	f7ff fe44 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(x1 & 0xFF);
 8000f68:	b2f8      	uxtb	r0, r7
 8000f6a:	f7ff fe41 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara((x2 >> 8) & 0xFF);
 8000f6e:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8000f72:	f7ff fe3d 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(x2 & 0xFF);
 8000f76:	b2f0      	uxtb	r0, r6
 8000f78:	f7ff fe3a 	bl	8000bf0 <LCD_WritePara.isra.0>
    

    LCD_WriteCmd(0x2b);
 8000f7c:	202b      	movs	r0, #43	; 0x2b
 8000f7e:	f7ff fe5d 	bl	8000c3c <LCD_WriteCmd.isra.0>
    LCD_WritePara((y1 >> 8) & 0xFF);
 8000f82:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8000f86:	f7ff fe33 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(y1 & 0xFF);
 8000f8a:	b2e8      	uxtb	r0, r5
 8000f8c:	f7ff fe30 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara((y2 >> 8) & 0xFF);
 8000f90:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8000f94:	f7ff fe2c 	bl	8000bf0 <LCD_WritePara.isra.0>
    LCD_WritePara(y2 & 0xFF);
 8000f98:	b2e0      	uxtb	r0, r4
 8000f9a:	f7ff fe29 	bl	8000bf0 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2C);
}
 8000f9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_WriteCmd(0x2C);
 8000fa2:	202c      	movs	r0, #44	; 0x2c
 8000fa4:	f7ff be4a 	b.w	8000c3c <LCD_WriteCmd.isra.0>

08000fa8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000faa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fac:	f003 fabe 	bl	800452c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb0:	480c      	ldr	r0, [pc, #48]	; (8000fe4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fb2:	490d      	ldr	r1, [pc, #52]	; (8000fe8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <LoopForever+0xe>)
  movs r3, #0
 8000fb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb8:	e002      	b.n	8000fc0 <LoopCopyDataInit>

08000fba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fbe:	3304      	adds	r3, #4

08000fc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc4:	d3f9      	bcc.n	8000fba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	; (8000ff0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fc8:	4c0a      	ldr	r4, [pc, #40]	; (8000ff4 <LoopForever+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fcc:	e001      	b.n	8000fd2 <LoopFillZerobss>

08000fce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd0:	3204      	adds	r2, #4

08000fd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd4:	d3fb      	bcc.n	8000fce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fd6:	f003 faf7 	bl	80045c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fda:	f7ff fd97 	bl	8000b0c <main>

08000fde <LoopForever>:

LoopForever:
    b LoopForever
 8000fde:	e7fe      	b.n	8000fde <LoopForever>
  ldr   r0, =_estack
 8000fe0:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000fe4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fe8:	2000084c 	.word	0x2000084c
  ldr r2, =_sidata
 8000fec:	080145c0 	.word	0x080145c0
  ldr r2, =_sbss
 8000ff0:	2000084c 	.word	0x2000084c
  ldr r4, =_ebss
 8000ff4:	20000954 	.word	0x20000954

08000ff8 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ff8:	e7fe      	b.n	8000ff8 <ADC1_IRQHandler>
	...

08000ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ffc:	b570      	push	{r4, r5, r6, lr}
  uint32_t ticknumber = 0U;
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000ffe:	4e24      	ldr	r6, [pc, #144]	; (8001090 <HAL_InitTick+0x94>)
 8001000:	7832      	ldrb	r2, [r6, #0]
 8001002:	b1ea      	cbz	r2, 8001040 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8001004:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001008:	691c      	ldr	r4, [r3, #16]
 800100a:	4605      	mov	r5, r0
 800100c:	f014 0404 	ands.w	r4, r4, #4
 8001010:	d018      	beq.n	8001044 <HAL_InitTick+0x48>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8001012:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001016:	fbb4 f2f2 	udiv	r2, r4, r2
 800101a:	4b1e      	ldr	r3, [pc, #120]	; (8001094 <HAL_InitTick+0x98>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	fbb3 f4f2 	udiv	r4, r3, r2
        break;
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 8001022:	4620      	mov	r0, r4
 8001024:	f000 f8d4 	bl	80011d0 <HAL_SYSTICK_Config>
 8001028:	4604      	mov	r4, r0
 800102a:	b948      	cbnz	r0, 8001040 <HAL_InitTick+0x44>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800102c:	4602      	mov	r2, r0
 800102e:	4629      	mov	r1, r5
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001034:	f000 f88e 	bl	8001154 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 8001038:	4b17      	ldr	r3, [pc, #92]	; (8001098 <HAL_InitTick+0x9c>)

  /* Return function status */
  return HAL_OK;
 800103a:	4620      	mov	r0, r4
  uwTickPrio = TickPriority;
 800103c:	601d      	str	r5, [r3, #0]
}
 800103e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001040:	2001      	movs	r0, #1
}
 8001042:	bd70      	pop	{r4, r5, r6, pc}
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 8001044:	f000 f912 	bl	800126c <HAL_SYSTICK_GetCLKSourceConfig>
    switch (systicksel)
 8001048:	2801      	cmp	r0, #1
 800104a:	d017      	beq.n	800107c <HAL_InitTick+0x80>
 800104c:	2802      	cmp	r0, #2
 800104e:	d00b      	beq.n	8001068 <HAL_InitTick+0x6c>
 8001050:	2800      	cmp	r0, #0
 8001052:	d1e6      	bne.n	8001022 <HAL_InitTick+0x26>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 8001054:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8001058:	7832      	ldrb	r2, [r6, #0]
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_InitTick+0x98>)
 800105c:	fbb4 f4f2 	udiv	r4, r4, r2
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	fbb3 f4f4 	udiv	r4, r3, r4
        break;
 8001066:	e7dc      	b.n	8001022 <HAL_InitTick+0x26>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 8001068:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800106c:	7832      	ldrb	r2, [r6, #0]
 800106e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001072:	fbb4 f4f2 	udiv	r4, r4, r2
 8001076:	fbb3 f4f4 	udiv	r4, r3, r4
        break;
 800107a:	e7d2      	b.n	8001022 <HAL_InitTick+0x26>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 800107c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8001080:	7832      	ldrb	r2, [r6, #0]
 8001082:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8001086:	fbb4 f4f2 	udiv	r4, r4, r2
 800108a:	fbb3 f4f4 	udiv	r4, r3, r4
        break;
 800108e:	e7c8      	b.n	8001022 <HAL_InitTick+0x26>
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008
 8001098:	20000004 	.word	0x20000004

0800109c <HAL_Init>:
{
 800109c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800109e:	2003      	movs	r0, #3
 80010a0:	f000 f846 	bl	8001130 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80010a4:	f000 fa7c 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4a0c      	ldr	r2, [pc, #48]	; (80010dc <HAL_Init+0x40>)
 80010ac:	480c      	ldr	r0, [pc, #48]	; (80010e0 <HAL_Init+0x44>)
 80010ae:	6a12      	ldr	r2, [r2, #32]
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <HAL_Init+0x48>)
 80010b2:	f002 020f 	and.w	r2, r2, #15
 80010b6:	5c82      	ldrb	r2, [r0, r2]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010b8:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80010ba:	40d3      	lsrs	r3, r2
 80010bc:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80010be:	f000 f897 	bl	80011f0 <HAL_SYSTICK_CLKSourceConfig>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010c2:	200f      	movs	r0, #15
 80010c4:	f7ff ff9a 	bl	8000ffc <HAL_InitTick>
 80010c8:	b110      	cbz	r0, 80010d0 <HAL_Init+0x34>
    return HAL_ERROR;
 80010ca:	2401      	movs	r4, #1
}
 80010cc:	4620      	mov	r0, r4
 80010ce:	bd10      	pop	{r4, pc}
 80010d0:	4604      	mov	r4, r0
  HAL_MspInit();
 80010d2:	f000 f9d3 	bl	800147c <HAL_MspInit>
}
 80010d6:	4620      	mov	r0, r4
 80010d8:	bd10      	pop	{r4, pc}
 80010da:	bf00      	nop
 80010dc:	44020c00 	.word	0x44020c00
 80010e0:	080145a0 	.word	0x080145a0
 80010e4:	20000008 	.word	0x20000008

080010e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80010e8:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <HAL_IncTick+0x10>)
 80010ea:	4b04      	ldr	r3, [pc, #16]	; (80010fc <HAL_IncTick+0x14>)
 80010ec:	6811      	ldr	r1, [r2, #0]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	440b      	add	r3, r1
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	2000090c 	.word	0x2000090c
 80010fc:	20000000 	.word	0x20000000

08001100 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001100:	4b01      	ldr	r3, [pc, #4]	; (8001108 <HAL_GetTick+0x8>)
 8001102:	6818      	ldr	r0, [r3, #0]
}
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2000090c 	.word	0x2000090c

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b538      	push	{r3, r4, r5, lr}
 800110e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff fff6 	bl	8001100 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001114:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001116:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001118:	d002      	beq.n	8001120 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <HAL_Delay+0x20>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001120:	f7ff ffee 	bl	8001100 <HAL_GetTick>
 8001124:	1b43      	subs	r3, r0, r5
 8001126:	42a3      	cmp	r3, r4
 8001128:	d3fa      	bcc.n	8001120 <HAL_Delay+0x14>
  {
  }
}
 800112a:	bd38      	pop	{r3, r4, r5, pc}
 800112c:	20000000 	.word	0x20000000

08001130 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001130:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4906      	ldr	r1, [pc, #24]	; (8001150 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001136:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001138:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800113a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001142:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001144:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800114c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001156:	b500      	push	{lr}
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115e:	f1c3 0e07 	rsb	lr, r3, #7
 8001162:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001166:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800116a:	bf28      	it	cs
 800116c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001170:	f1bc 0f06 	cmp.w	ip, #6
 8001174:	d91b      	bls.n	80011ae <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001176:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	fa0c fc03 	lsl.w	ip, ip, r3
 8001180:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001188:	fa0c fc0e 	lsl.w	ip, ip, lr
 800118c:	ea21 010c 	bic.w	r1, r1, ip
 8001190:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001192:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001198:	db0c      	blt.n	80011b4 <HAL_NVIC_SetPriority+0x60>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119a:	0109      	lsls	r1, r1, #4
 800119c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80011a0:	b2c9      	uxtb	r1, r1
 80011a2:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80011a6:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80011aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80011ae:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b0:	4613      	mov	r3, r2
 80011b2:	e7e7      	b.n	8001184 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <HAL_NVIC_SetPriority+0x78>)
 80011b6:	f000 000f 	and.w	r0, r0, #15
 80011ba:	0109      	lsls	r1, r1, #4
 80011bc:	b2c9      	uxtb	r1, r1
 80011be:	4403      	add	r3, r0
 80011c0:	7619      	strb	r1, [r3, #24]
 80011c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011c6:	bf00      	nop
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	e000ecfc 	.word	0xe000ecfc

080011d0 <HAL_SYSTICK_Config>:
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d0:	1e43      	subs	r3, r0, #1
 80011d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d6:	d209      	bcs.n	80011ec <HAL_SYSTICK_Config+0x1c>
    /* Reload value impossible */
    return (1UL);
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80011d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 80011dc:	2000      	movs	r0, #0
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 80011de:	6153      	str	r3, [r2, #20]
  WRITE_REG(SysTick->VAL, 0UL);
 80011e0:	6190      	str	r0, [r2, #24]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 80011e2:	6913      	ldr	r3, [r2, #16]
 80011e4:	f043 0303 	orr.w	r3, r3, #3
 80011e8:	6113      	str	r3, [r2, #16]

  /* Function successful */
  return (0UL);
 80011ea:	4770      	bx	lr
    return (1UL);
 80011ec:	2001      	movs	r0, #1
}
 80011ee:	4770      	bx	lr

080011f0 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 80011f0:	2804      	cmp	r0, #4
 80011f2:	d813      	bhi.n	800121c <HAL_SYSTICK_CLKSourceConfig+0x2c>
 80011f4:	e8df f000 	tbb	[pc, r0]
 80011f8:	12031a2a 	.word	0x12031a2a
 80011fc:	13          	.byte	0x13
 80011fd:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80011fe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8001202:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 8001204:	4a18      	ldr	r2, [pc, #96]	; (8001268 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001206:	f023 0304 	bic.w	r3, r3, #4
 800120a:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800120c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8001210:	f023 030c 	bic.w	r3, r3, #12
 8001214:	f043 0308 	orr.w	r3, r3, #8
 8001218:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 800121c:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800121e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8001222:	6913      	ldr	r3, [r2, #16]
 8001224:	f043 0304 	orr.w	r3, r3, #4
 8001228:	6113      	str	r3, [r2, #16]
      break;
 800122a:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800122c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8001230:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 8001232:	4a0d      	ldr	r2, [pc, #52]	; (8001268 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001234:	f023 0304 	bic.w	r3, r3, #4
 8001238:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 800123a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800123e:	f023 030c 	bic.w	r3, r3, #12
 8001242:	f043 0304 	orr.w	r3, r3, #4
 8001246:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 800124a:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800124c:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 8001250:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8001254:	f023 0304 	bic.w	r3, r3, #4
 8001258:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 800125a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 800125e:	f023 030c 	bic.w	r3, r3, #12
 8001262:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 8001266:	4770      	bx	lr
 8001268:	44020c00 	.word	0x44020c00

0800126c <HAL_SYSTICK_GetCLKSourceConfig>:
{
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 800126c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001270:	6918      	ldr	r0, [r3, #16]
 8001272:	f010 0004 	ands.w	r0, r0, #4
 8001276:	d10c      	bne.n	8001292 <HAL_SYSTICK_GetCLKSourceConfig+0x26>
    systick_source = SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL);
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_SYSTICK_GetCLKSourceConfig+0x2c>)
 800127a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800127e:	f003 030c 	and.w	r3, r3, #12

    switch (systick_rcc_source)
 8001282:	2b04      	cmp	r3, #4
 8001284:	d003      	beq.n	800128e <HAL_SYSTICK_GetCLKSourceConfig+0x22>
      case (RCC_CCIPR4_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
        break;

      case (RCC_CCIPR4_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8001286:	2b08      	cmp	r3, #8
 8001288:	bf08      	it	eq
 800128a:	2002      	moveq	r0, #2
 800128c:	4770      	bx	lr
    switch (systick_rcc_source)
 800128e:	2001      	movs	r0, #1
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
        break;
    }
  }
  return systick_source;
}
 8001290:	4770      	bx	lr
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8001292:	2004      	movs	r0, #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	44020c00 	.word	0x44020c00

0800129c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800129c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012a0:	680c      	ldr	r4, [r1, #0]
{
 80012a2:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012a4:	2c00      	cmp	r4, #0
 80012a6:	f000 80c8 	beq.w	800143a <HAL_GPIO_Init+0x19e>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80012aa:	4a65      	ldr	r2, [pc, #404]	; (8001440 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0U;
 80012ac:	2300      	movs	r3, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80012ae:	ea02 2290 	and.w	r2, r2, r0, lsr #10
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80012b2:	4e64      	ldr	r6, [pc, #400]	; (8001444 <HAL_GPIO_Init+0x1a8>)
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80012b4:	9201      	str	r2, [sp, #4]
 80012b6:	e068      	b.n	800138a <HAL_GPIO_Init+0xee>
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80012b8:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 80012ba:	f8d0 b000 	ldr.w	fp, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80012be:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80012c2:	fa07 f70c 	lsl.w	r7, r7, ip
 80012c6:	ea2b 0b07 	bic.w	fp, fp, r7
 80012ca:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80012cc:	f002 0903 	and.w	r9, r2, #3
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d0:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80012d4:	fa09 fa0c 	lsl.w	sl, r9, ip
 80012d8:	ea4a 0a0b 	orr.w	sl, sl, fp
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012dc:	f1be 0f01 	cmp.w	lr, #1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80012e0:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 80012e2:	f8c0 a000 	str.w	sl, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012e6:	f240 8088 	bls.w	80013fa <HAL_GPIO_Init+0x15e>
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80012ea:	f1b9 0f03 	cmp.w	r9, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 80012ee:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 80012f0:	f000 809f 	beq.w	8001432 <HAL_GPIO_Init+0x196>
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80012f4:	fa05 f50c 	lsl.w	r5, r5, ip
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80012f8:	9f00      	ldr	r7, [sp, #0]
        tmp = GPIOx->PUPDR;
 80012fa:	f8d0 c00c 	ldr.w	ip, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80012fe:	ea0c 0707 	and.w	r7, ip, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001302:	433d      	orrs	r5, r7
        GPIOx->PUPDR = tmp;
 8001304:	60c5      	str	r5, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001306:	00d5      	lsls	r5, r2, #3
 8001308:	d53b      	bpl.n	8001382 <HAL_GPIO_Init+0xe6>
        tmp = EXTI->EXTICR[position >> 2U];
 800130a:	f023 0703 	bic.w	r7, r3, #3
 800130e:	f107 4988 	add.w	r9, r7, #1140850688	; 0x44000000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001312:	270f      	movs	r7, #15
 8001314:	f003 0503 	and.w	r5, r3, #3
 8001318:	00ed      	lsls	r5, r5, #3
 800131a:	fa07 fe05 	lsl.w	lr, r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800131e:	9f01      	ldr	r7, [sp, #4]
 8001320:	f509 3908 	add.w	r9, r9, #139264	; 0x22000
 8001324:	fa07 f505 	lsl.w	r5, r7, r5
        tmp &= ~((uint32_t)iocurrent);
 8001328:	ea6f 0708 	mvn.w	r7, r8
        tmp = EXTI->EXTICR[position >> 2U];
 800132c:	f8d9 c060 	ldr.w	ip, [r9, #96]	; 0x60
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001330:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001334:	ea2c 0c0e 	bic.w	ip, ip, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001338:	ea45 050c 	orr.w	r5, r5, ip
        EXTI->EXTICR[position >> 2U] = tmp;
 800133c:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
        tmp = EXTI->RTSR1;
 8001340:	6835      	ldr	r5, [r6, #0]
        tmp &= ~((uint32_t)iocurrent);
 8001342:	bf0c      	ite	eq
 8001344:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8001346:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->RTSR1 = tmp;
 800134a:	6035      	str	r5, [r6, #0]

        tmp = EXTI->FTSR1;
 800134c:	6875      	ldr	r5, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800134e:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8001352:	bf0c      	ite	eq
 8001354:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8001356:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->FTSR1 = tmp;
 800135a:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800135c:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001360:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8001364:	bf0c      	ite	eq
 8001366:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8001368:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->EMR1 = tmp;
 800136c:	f8c6 5084 	str.w	r5, [r6, #132]	; 0x84

        tmp = EXTI->IMR1;
 8001370:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001374:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8001376:	bf54      	ite	pl
 8001378:	403d      	andpl	r5, r7
        {
          tmp |= iocurrent;
 800137a:	ea48 0505 	orrmi.w	r5, r8, r5
        }
        EXTI->IMR1 = tmp;
 800137e:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
      }
    }

    position++;
 8001382:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001384:	fa34 f203 	lsrs.w	r2, r4, r3
 8001388:	d057      	beq.n	800143a <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800138a:	2201      	movs	r2, #1
 800138c:	fa02 f503 	lsl.w	r5, r2, r3
    if (iocurrent != 0U)
 8001390:	ea15 0804 	ands.w	r8, r5, r4
 8001394:	d0f5      	beq.n	8001382 <HAL_GPIO_Init+0xe6>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001396:	684a      	ldr	r2, [r1, #4]
 8001398:	f022 0e10 	bic.w	lr, r2, #16
 800139c:	f1be 0f02 	cmp.w	lr, #2
 80013a0:	d18a      	bne.n	80012b8 <HAL_GPIO_Init+0x1c>
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013a2:	f04f 090f 	mov.w	r9, #15
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013a6:	690f      	ldr	r7, [r1, #16]
        tmp = GPIOx->AFR[position >> 3U];
 80013a8:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013ac:	f003 0c07 	and.w	ip, r3, #7
 80013b0:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80013b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013b8:	f007 070f 	and.w	r7, r7, #15
 80013bc:	fa07 f70c 	lsl.w	r7, r7, ip
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013c0:	fa09 fc0c 	lsl.w	ip, r9, ip
        tmp = GPIOx->AFR[position >> 3U];
 80013c4:	f8de 9020 	ldr.w	r9, [lr, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013c8:	ea29 0c0c 	bic.w	ip, r9, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80013cc:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = tmp;
 80013d0:	f8ce 7020 	str.w	r7, [lr, #32]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80013d4:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 80013d6:	f8d0 a000 	ldr.w	sl, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80013da:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80013de:	fa07 f70c 	lsl.w	r7, r7, ip
 80013e2:	ea2a 0a07 	bic.w	sl, sl, r7
 80013e6:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80013e8:	f002 0903 	and.w	r9, r2, #3
 80013ec:	fa09 fe0c 	lsl.w	lr, r9, ip
 80013f0:	ea4e 0e0a 	orr.w	lr, lr, sl
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80013f4:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 80013f6:	f8c0 e000 	str.w	lr, [r0]
        tmp = GPIOx->OSPEEDR;
 80013fa:	f8d0 e008 	ldr.w	lr, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80013fe:	9f00      	ldr	r7, [sp, #0]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8001400:	f1b9 0f03 	cmp.w	r9, #3
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001404:	ea0e 0e07 	and.w	lr, lr, r7
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001408:	68cf      	ldr	r7, [r1, #12]
 800140a:	fa07 fa0c 	lsl.w	sl, r7, ip
 800140e:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = tmp;
 8001412:	f8c0 e008 	str.w	lr, [r0, #8]
        tmp = GPIOx->OTYPER;
 8001416:	f8d0 e004 	ldr.w	lr, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800141a:	ea2e 0e05 	bic.w	lr, lr, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800141e:	f3c2 1500 	ubfx	r5, r2, #4, #1
 8001422:	fa05 f503 	lsl.w	r5, r5, r3
 8001426:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = tmp;
 800142a:	6045      	str	r5, [r0, #4]
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 800142c:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 800142e:	f47f af61 	bne.w	80012f4 <HAL_GPIO_Init+0x58>
 8001432:	2d01      	cmp	r5, #1
 8001434:	f47f af5e 	bne.w	80012f4 <HAL_GPIO_Init+0x58>
 8001438:	e765      	b.n	8001306 <HAL_GPIO_Init+0x6a>
  }
}
 800143a:	b003      	add	sp, #12
 800143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001440:	002f7f7f 	.word	0x002f7f7f
 8001444:	44022000 	.word	0x44022000

08001448 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001448:	b10a      	cbz	r2, 800144e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800144a:	6181      	str	r1, [r0, #24]
 800144c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop

08001454 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001454:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001456:	ea01 0203 	and.w	r2, r1, r3
 800145a:	ea21 0103 	bic.w	r1, r1, r3
 800145e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001462:	6181      	str	r1, [r0, #24]
}
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop

08001468 <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8001468:	4a03      	ldr	r2, [pc, #12]	; (8001478 <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 800146a:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6013      	str	r3, [r2, #0]
}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40030400 	.word	0x40030400

0800147c <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop

08001480 <HAL_RCC_GetSysClockFreq.part.0>:
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001480:	4b42      	ldr	r3, [pc, #264]	; (800158c <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 8001482:	69da      	ldr	r2, [r3, #28]
 8001484:	f002 0218 	and.w	r2, r2, #24
 8001488:	2a18      	cmp	r2, #24
 800148a:	d001      	beq.n	8001490 <HAL_RCC_GetSysClockFreq.part.0+0x10>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 800148c:	4840      	ldr	r0, [pc, #256]	; (8001590 <HAL_RCC_GetSysClockFreq.part.0+0x110>)
  }

  return sysclockfreq;
}
 800148e:	4770      	bx	lr
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8001490:	6a99      	ldr	r1, [r3, #40]	; 0x28
uint32_t HAL_RCC_GetSysClockFreq(void)
 8001492:	b430      	push	{r4, r5}
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8001494:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8001496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if (pllm != 0U)
 8001498:	f414 5f7c 	tst.w	r4, #16128	; 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 800149c:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 800149e:	f3c4 2005 	ubfx	r0, r4, #8, #6
    if (pllm != 0U)
 80014a2:	d039      	beq.n	8001518 <HAL_RCC_GetSysClockFreq.part.0+0x98>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80014a4:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 80014a8:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80014ac:	fb05 f202 	mul.w	r2, r5, r2
 80014b0:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80014b4:	f001 0103 	and.w	r1, r1, #3
      switch (pllsource)
 80014b8:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      switch (pllsource)
 80014be:	d03f      	beq.n	8001540 <HAL_RCC_GetSysClockFreq.part.0+0xc0>
 80014c0:	2903      	cmp	r1, #3
 80014c2:	d12b      	bne.n	800151c <HAL_RCC_GetSysClockFreq.part.0+0x9c>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	ee05 0a90 	vmov	s11, r0
 80014ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014ce:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80014d2:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001594 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 80014d6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80014da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014de:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80014e2:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8001598 <HAL_RCC_GetSysClockFreq.part.0+0x118>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80014e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80014ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ee:	eec5 6a25 	vdiv.f32	s13, s10, s11
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80014f2:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80014f6:	ee67 7aa6 	vmul.f32	s15, s15, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 80014fa:	4b24      	ldr	r3, [pc, #144]	; (800158c <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 80014fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fe:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8001502:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8001504:	ee07 3a10 	vmov	s14, r3
 8001508:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800150c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001510:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8001514:	ee17 0a90 	vmov	r0, s15
}
 8001518:	bc30      	pop	{r4, r5}
 800151a:	4770      	bx	lr
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800151c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151e:	ee05 0a90 	vmov	s11, r0
 8001522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001526:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800152a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001594 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 800152e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001532:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001536:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800153a:	ed9f 5a18 	vldr	s10, [pc, #96]	; 800159c <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 800153e:	e7d2      	b.n	80014e6 <HAL_RCC_GetSysClockFreq.part.0+0x66>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	0692      	lsls	r2, r2, #26
 8001544:	d5be      	bpl.n	80014c4 <HAL_RCC_GetSysClockFreq.part.0+0x44>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001546:	6819      	ldr	r1, [r3, #0]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 800154a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001594 <HAL_RCC_GetSysClockFreq.part.0+0x114>
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800154e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001552:	ee06 3a90 	vmov	s13, r3
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_RCC_GetSysClockFreq.part.0+0x110>)
 8001558:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 800155c:	40da      	lsrs	r2, r3
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800155e:	ee05 0a90 	vmov	s11, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001562:	ee67 7a87 	vmul.f32	s15, s15, s14
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001566:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800156a:	ee06 2a10 	vmov	s12, r2
 800156e:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8001572:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001576:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800157a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800157e:	ee86 7a05 	vdiv.f32	s14, s12, s10
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8001582:	ee77 7aa5 	vadd.f32	s15, s15, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8001586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158a:	e7b6      	b.n	80014fa <HAL_RCC_GetSysClockFreq.part.0+0x7a>
 800158c:	44020c00 	.word	0x44020c00
 8001590:	017d7840 	.word	0x017d7840
 8001594:	39000000 	.word	0x39000000
 8001598:	4bbebc20 	.word	0x4bbebc20
 800159c:	4a742400 	.word	0x4a742400

080015a0 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80015a0:	4a0e      	ldr	r2, [pc, #56]	; (80015dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80015a2:	69d3      	ldr	r3, [r2, #28]
 80015a4:	f003 0318 	and.w	r3, r3, #24
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d015      	beq.n	80015d8 <HAL_RCC_GetSysClockFreq+0x38>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ac:	69d3      	ldr	r3, [r2, #28]
 80015ae:	f013 0f18 	tst.w	r3, #24
 80015b2:	d108      	bne.n	80015c6 <HAL_RCC_GetSysClockFreq+0x26>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80015b4:	6813      	ldr	r3, [r2, #0]
 80015b6:	069b      	lsls	r3, r3, #26
 80015b8:	d50c      	bpl.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80015ba:	6813      	ldr	r3, [r2, #0]
 80015bc:	4808      	ldr	r0, [pc, #32]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x40>)
 80015be:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80015c2:	40d8      	lsrs	r0, r3
 80015c4:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015c6:	69d3      	ldr	r3, [r2, #28]
 80015c8:	f003 0318 	and.w	r3, r3, #24
 80015cc:	2b10      	cmp	r3, #16
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_GetSysClockFreq+0x34>
 80015d0:	f7ff bf56 	b.w	8001480 <HAL_RCC_GetSysClockFreq.part.0>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80015d6:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 80015d8:	4802      	ldr	r0, [pc, #8]	; (80015e4 <HAL_RCC_GetSysClockFreq+0x44>)
 80015da:	4770      	bx	lr
 80015dc:	44020c00 	.word	0x44020c00
 80015e0:	017d7840 	.word	0x017d7840
 80015e4:	003d0900 	.word	0x003d0900

080015e8 <HAL_RCC_ClockConfig>:
  if (pClkInitStruct == NULL)
 80015e8:	2800      	cmp	r0, #0
 80015ea:	f000 8115 	beq.w	8001818 <HAL_RCC_ClockConfig+0x230>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ee:	4a8e      	ldr	r2, [pc, #568]	; (8001828 <HAL_RCC_ClockConfig+0x240>)
{
 80015f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	6813      	ldr	r3, [r2, #0]
 80015f6:	4604      	mov	r4, r0
 80015f8:	f003 030f 	and.w	r3, r3, #15
 80015fc:	428b      	cmp	r3, r1
 80015fe:	460d      	mov	r5, r1
 8001600:	d20c      	bcs.n	800161c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	6813      	ldr	r3, [r2, #0]
 8001604:	f023 030f 	bic.w	r3, r3, #15
 8001608:	430b      	orrs	r3, r1
 800160a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160c:	6813      	ldr	r3, [r2, #0]
 800160e:	f003 030f 	and.w	r3, r3, #15
 8001612:	428b      	cmp	r3, r1
 8001614:	d002      	beq.n	800161c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8001616:	2001      	movs	r0, #1
}
 8001618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	06de      	lsls	r6, r3, #27
 8001620:	d50d      	bpl.n	800163e <HAL_RCC_ClockConfig+0x56>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8001622:	4982      	ldr	r1, [pc, #520]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 8001624:	6960      	ldr	r0, [r4, #20]
 8001626:	6a0a      	ldr	r2, [r1, #32]
 8001628:	0a12      	lsrs	r2, r2, #8
 800162a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800162e:	4290      	cmp	r0, r2
 8001630:	d905      	bls.n	800163e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8001632:	6a0a      	ldr	r2, [r1, #32]
 8001634:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001638:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800163c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800163e:	0718      	lsls	r0, r3, #28
 8001640:	d50d      	bpl.n	800165e <HAL_RCC_ClockConfig+0x76>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001642:	497a      	ldr	r1, [pc, #488]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 8001644:	6920      	ldr	r0, [r4, #16]
 8001646:	6a0a      	ldr	r2, [r1, #32]
 8001648:	0912      	lsrs	r2, r2, #4
 800164a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800164e:	4290      	cmp	r0, r2
 8001650:	d905      	bls.n	800165e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8001652:	6a0a      	ldr	r2, [r1, #32]
 8001654:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001658:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 800165c:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165e:	0759      	lsls	r1, r3, #29
 8001660:	d50b      	bpl.n	800167a <HAL_RCC_ClockConfig+0x92>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001662:	4972      	ldr	r1, [pc, #456]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 8001664:	68e0      	ldr	r0, [r4, #12]
 8001666:	6a0a      	ldr	r2, [r1, #32]
 8001668:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800166c:	4290      	cmp	r0, r2
 800166e:	d904      	bls.n	800167a <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8001670:	6a0a      	ldr	r2, [r1, #32]
 8001672:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001676:	4302      	orrs	r2, r0
 8001678:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167a:	079a      	lsls	r2, r3, #30
 800167c:	f140 8095 	bpl.w	80017aa <HAL_RCC_ClockConfig+0x1c2>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001680:	486a      	ldr	r0, [pc, #424]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 8001682:	68a1      	ldr	r1, [r4, #8]
 8001684:	6a02      	ldr	r2, [r0, #32]
 8001686:	f002 020f 	and.w	r2, r2, #15
 800168a:	4291      	cmp	r1, r2
 800168c:	d904      	bls.n	8001698 <HAL_RCC_ClockConfig+0xb0>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 800168e:	6a02      	ldr	r2, [r0, #32]
 8001690:	f022 020f 	bic.w	r2, r2, #15
 8001694:	430a      	orrs	r2, r1
 8001696:	6202      	str	r2, [r0, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001698:	07d8      	lsls	r0, r3, #31
 800169a:	d52f      	bpl.n	80016fc <HAL_RCC_ClockConfig+0x114>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169c:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800169e:	4b63      	ldr	r3, [pc, #396]	; (800182c <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a0:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80016a2:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016a4:	f000 8089 	beq.w	80017ba <HAL_RCC_ClockConfig+0x1d2>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a8:	2a02      	cmp	r2, #2
 80016aa:	f000 80b1 	beq.w	8001810 <HAL_RCC_ClockConfig+0x228>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80016ae:	2a01      	cmp	r2, #1
 80016b0:	f000 80b6 	beq.w	8001820 <HAL_RCC_ClockConfig+0x238>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	0799      	lsls	r1, r3, #30
 80016b6:	d5ae      	bpl.n	8001616 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80016b8:	4e5c      	ldr	r6, [pc, #368]	; (800182c <HAL_RCC_ClockConfig+0x244>)
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016ba:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 80016be:	69f3      	ldr	r3, [r6, #28]
 80016c0:	f023 0303 	bic.w	r3, r3, #3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 80016c8:	f7ff fd1a 	bl	8001100 <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016cc:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80016ce:	4607      	mov	r7, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016d0:	2b03      	cmp	r3, #3
 80016d2:	d07b      	beq.n	80017cc <HAL_RCC_ClockConfig+0x1e4>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	f000 8084 	beq.w	80017e2 <HAL_RCC_ClockConfig+0x1fa>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d106      	bne.n	80016ec <HAL_RCC_ClockConfig+0x104>
 80016de:	e08b      	b.n	80017f8 <HAL_RCC_ClockConfig+0x210>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016e0:	f7ff fd0e 	bl	8001100 <HAL_GetTick>
 80016e4:	1bc0      	subs	r0, r0, r7
 80016e6:	4540      	cmp	r0, r8
 80016e8:	f200 8098 	bhi.w	800181c <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016ec:	69f3      	ldr	r3, [r6, #28]
 80016ee:	f013 0f18 	tst.w	r3, #24
 80016f2:	d1f5      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xf8>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f4:	6823      	ldr	r3, [r4, #0]
 80016f6:	079a      	lsls	r2, r3, #30
 80016f8:	d506      	bpl.n	8001708 <HAL_RCC_ClockConfig+0x120>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80016fa:	68a1      	ldr	r1, [r4, #8]
 80016fc:	484b      	ldr	r0, [pc, #300]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 80016fe:	6a02      	ldr	r2, [r0, #32]
 8001700:	f002 020f 	and.w	r2, r2, #15
 8001704:	428a      	cmp	r2, r1
 8001706:	d87d      	bhi.n	8001804 <HAL_RCC_ClockConfig+0x21c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001708:	4947      	ldr	r1, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x240>)
 800170a:	680a      	ldr	r2, [r1, #0]
 800170c:	f002 020f 	and.w	r2, r2, #15
 8001710:	42aa      	cmp	r2, r5
 8001712:	d90a      	bls.n	800172a <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001714:	680a      	ldr	r2, [r1, #0]
 8001716:	f022 020f 	bic.w	r2, r2, #15
 800171a:	432a      	orrs	r2, r5
 800171c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	680a      	ldr	r2, [r1, #0]
 8001720:	f002 020f 	and.w	r2, r2, #15
 8001724:	42aa      	cmp	r2, r5
 8001726:	f47f af76 	bne.w	8001616 <HAL_RCC_ClockConfig+0x2e>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172a:	075f      	lsls	r7, r3, #29
 800172c:	d50b      	bpl.n	8001746 <HAL_RCC_ClockConfig+0x15e>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800172e:	493f      	ldr	r1, [pc, #252]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 8001730:	68e0      	ldr	r0, [r4, #12]
 8001732:	6a0a      	ldr	r2, [r1, #32]
 8001734:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001738:	4290      	cmp	r0, r2
 800173a:	d204      	bcs.n	8001746 <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 800173c:	6a0a      	ldr	r2, [r1, #32]
 800173e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001742:	4302      	orrs	r2, r0
 8001744:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	071e      	lsls	r6, r3, #28
 8001748:	d50d      	bpl.n	8001766 <HAL_RCC_ClockConfig+0x17e>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800174a:	4938      	ldr	r1, [pc, #224]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 800174c:	6920      	ldr	r0, [r4, #16]
 800174e:	6a0a      	ldr	r2, [r1, #32]
 8001750:	0912      	lsrs	r2, r2, #4
 8001752:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001756:	4290      	cmp	r0, r2
 8001758:	d205      	bcs.n	8001766 <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 800175a:	6a0a      	ldr	r2, [r1, #32]
 800175c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001760:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8001764:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001766:	06dd      	lsls	r5, r3, #27
 8001768:	d50d      	bpl.n	8001786 <HAL_RCC_ClockConfig+0x19e>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 800176a:	4a30      	ldr	r2, [pc, #192]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 800176c:	6961      	ldr	r1, [r4, #20]
 800176e:	6a13      	ldr	r3, [r2, #32]
 8001770:	0a1b      	lsrs	r3, r3, #8
 8001772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001776:	4299      	cmp	r1, r3
 8001778:	d205      	bcs.n	8001786 <HAL_RCC_ClockConfig+0x19e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 800177a:	6a13      	ldr	r3, [r2, #32]
 800177c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001780:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001784:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001786:	f7ff ff0b 	bl	80015a0 <HAL_RCC_GetSysClockFreq>
}
 800178a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800178e:	4603      	mov	r3, r0
 8001790:	4a26      	ldr	r2, [pc, #152]	; (800182c <HAL_RCC_ClockConfig+0x244>)
 8001792:	4927      	ldr	r1, [pc, #156]	; (8001830 <HAL_RCC_ClockConfig+0x248>)
 8001794:	6a12      	ldr	r2, [r2, #32]
  halstatus = HAL_InitTick(uwTickPrio);
 8001796:	4827      	ldr	r0, [pc, #156]	; (8001834 <HAL_RCC_ClockConfig+0x24c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001798:	f002 020f 	and.w	r2, r2, #15
 800179c:	5c89      	ldrb	r1, [r1, r2]
 800179e:	4a26      	ldr	r2, [pc, #152]	; (8001838 <HAL_RCC_ClockConfig+0x250>)
 80017a0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 80017a2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80017a4:	6013      	str	r3, [r2, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 80017a6:	f7ff bc29 	b.w	8000ffc <HAL_InitTick>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	07da      	lsls	r2, r3, #31
 80017ac:	d5ac      	bpl.n	8001708 <HAL_RCC_ClockConfig+0x120>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ae:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b2:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80017b4:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017b6:	f47f af77 	bne.w	80016a8 <HAL_RCC_ClockConfig+0xc0>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80017ba:	019f      	lsls	r7, r3, #6
 80017bc:	f53f af7c 	bmi.w	80016b8 <HAL_RCC_ClockConfig+0xd0>
 80017c0:	e729      	b.n	8001616 <HAL_RCC_ClockConfig+0x2e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017c2:	f7ff fc9d 	bl	8001100 <HAL_GetTick>
 80017c6:	1bc3      	subs	r3, r0, r7
 80017c8:	4543      	cmp	r3, r8
 80017ca:	d827      	bhi.n	800181c <HAL_RCC_ClockConfig+0x234>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017cc:	69f3      	ldr	r3, [r6, #28]
 80017ce:	f003 0318 	and.w	r3, r3, #24
 80017d2:	2b18      	cmp	r3, #24
 80017d4:	d1f5      	bne.n	80017c2 <HAL_RCC_ClockConfig+0x1da>
 80017d6:	e78d      	b.n	80016f4 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fc92 	bl	8001100 <HAL_GetTick>
 80017dc:	1bc0      	subs	r0, r0, r7
 80017de:	4540      	cmp	r0, r8
 80017e0:	d81c      	bhi.n	800181c <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e2:	69f3      	ldr	r3, [r6, #28]
 80017e4:	f003 0318 	and.w	r3, r3, #24
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d1f5      	bne.n	80017d8 <HAL_RCC_ClockConfig+0x1f0>
 80017ec:	e782      	b.n	80016f4 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017ee:	f7ff fc87 	bl	8001100 <HAL_GetTick>
 80017f2:	1bc0      	subs	r0, r0, r7
 80017f4:	4540      	cmp	r0, r8
 80017f6:	d811      	bhi.n	800181c <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 80017f8:	69f3      	ldr	r3, [r6, #28]
 80017fa:	f003 0318 	and.w	r3, r3, #24
 80017fe:	2b08      	cmp	r3, #8
 8001800:	d1f5      	bne.n	80017ee <HAL_RCC_ClockConfig+0x206>
 8001802:	e777      	b.n	80016f4 <HAL_RCC_ClockConfig+0x10c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8001804:	6a02      	ldr	r2, [r0, #32]
 8001806:	f022 020f 	bic.w	r2, r2, #15
 800180a:	4311      	orrs	r1, r2
 800180c:	6201      	str	r1, [r0, #32]
 800180e:	e77b      	b.n	8001708 <HAL_RCC_ClockConfig+0x120>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001810:	039e      	lsls	r6, r3, #14
 8001812:	f53f af51 	bmi.w	80016b8 <HAL_RCC_ClockConfig+0xd0>
 8001816:	e6fe      	b.n	8001616 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
}
 800181a:	4770      	bx	lr
          return HAL_TIMEOUT;
 800181c:	2003      	movs	r0, #3
 800181e:	e6fb      	b.n	8001618 <HAL_RCC_ClockConfig+0x30>
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8001820:	0598      	lsls	r0, r3, #22
 8001822:	f53f af49 	bmi.w	80016b8 <HAL_RCC_ClockConfig+0xd0>
 8001826:	e6f6      	b.n	8001616 <HAL_RCC_ClockConfig+0x2e>
 8001828:	40022000 	.word	0x40022000
 800182c:	44020c00 	.word	0x44020c00
 8001830:	080145a0 	.word	0x080145a0
 8001834:	20000004 	.word	0x20000004
 8001838:	20000008 	.word	0x20000008

0800183c <HAL_RCC_GetHCLKFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 800183c:	4a15      	ldr	r2, [pc, #84]	; (8001894 <HAL_RCC_GetHCLKFreq+0x58>)
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800183e:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8001840:	69d3      	ldr	r3, [r2, #28]
 8001842:	f003 0318 	and.w	r3, r3, #24
 8001846:	2b08      	cmp	r3, #8
 8001848:	d021      	beq.n	800188e <HAL_RCC_GetHCLKFreq+0x52>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800184a:	69d3      	ldr	r3, [r2, #28]
 800184c:	f013 0f18 	tst.w	r3, #24
 8001850:	d012      	beq.n	8001878 <HAL_RCC_GetHCLKFreq+0x3c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001852:	69d3      	ldr	r3, [r2, #28]
 8001854:	f003 0318 	and.w	r3, r3, #24
 8001858:	2b10      	cmp	r3, #16
 800185a:	d016      	beq.n	800188a <HAL_RCC_GetHCLKFreq+0x4e>
 800185c:	f7ff fe10 	bl	8001480 <HAL_RCC_GetSysClockFreq.part.0>

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_RCC_GetHCLKFreq+0x58>)
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <HAL_RCC_GetHCLKFreq+0x5c>)
 8001864:	6a1b      	ldr	r3, [r3, #32]
 8001866:	4a0d      	ldr	r2, [pc, #52]	; (800189c <HAL_RCC_GetHCLKFreq+0x60>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8001872:	40d8      	lsrs	r0, r3
 8001874:	6010      	str	r0, [r2, #0]

  return SystemCoreClock;
}
 8001876:	bd08      	pop	{r3, pc}
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8001878:	6813      	ldr	r3, [r2, #0]
 800187a:	069b      	lsls	r3, r3, #26
 800187c:	d505      	bpl.n	800188a <HAL_RCC_GetHCLKFreq+0x4e>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800187e:	6813      	ldr	r3, [r2, #0]
 8001880:	4807      	ldr	r0, [pc, #28]	; (80018a0 <HAL_RCC_GetHCLKFreq+0x64>)
 8001882:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001886:	40d8      	lsrs	r0, r3
 8001888:	e7ea      	b.n	8001860 <HAL_RCC_GetHCLKFreq+0x24>
      sysclockfreq = (uint32_t) HSI_VALUE;
 800188a:	4805      	ldr	r0, [pc, #20]	; (80018a0 <HAL_RCC_GetHCLKFreq+0x64>)
 800188c:	e7e8      	b.n	8001860 <HAL_RCC_GetHCLKFreq+0x24>
    sysclockfreq = CSI_VALUE;
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <HAL_RCC_GetHCLKFreq+0x68>)
 8001890:	e7e6      	b.n	8001860 <HAL_RCC_GetHCLKFreq+0x24>
 8001892:	bf00      	nop
 8001894:	44020c00 	.word	0x44020c00
 8001898:	080145a0 	.word	0x080145a0
 800189c:	20000008 	.word	0x20000008
 80018a0:	017d7840 	.word	0x017d7840
 80018a4:	003d0900 	.word	0x003d0900

080018a8 <HAL_RCC_OscConfig>:
  if (pOscInitStruct == NULL)
 80018a8:	2800      	cmp	r0, #0
 80018aa:	f000 8258 	beq.w	8001d5e <HAL_RCC_OscConfig+0x4b6>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ae:	4aaa      	ldr	r2, [pc, #680]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018b0:	6803      	ldr	r3, [r0, #0]
{
 80018b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018b6:	69d5      	ldr	r5, [r2, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80018b8:	6a96      	ldr	r6, [r2, #40]	; 0x28
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018ba:	06df      	lsls	r7, r3, #27
 80018bc:	4604      	mov	r4, r0
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018be:	f005 0518 	and.w	r5, r5, #24
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 80018c2:	f006 0603 	and.w	r6, r6, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018c6:	d524      	bpl.n	8001912 <HAL_RCC_OscConfig+0x6a>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 80018c8:	2d08      	cmp	r5, #8
 80018ca:	f000 8157 	beq.w	8001b7c <HAL_RCC_OscConfig+0x2d4>
 80018ce:	2d18      	cmp	r5, #24
 80018d0:	f000 8151 	beq.w	8001b76 <HAL_RCC_OscConfig+0x2ce>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80018d4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80018d6:	4fa0      	ldr	r7, [pc, #640]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f000 8134 	beq.w	8001b46 <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80018e6:	f7ff fc0b 	bl	8001100 <HAL_GetTick>
 80018ea:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80018ec:	e006      	b.n	80018fc <HAL_RCC_OscConfig+0x54>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80018ee:	f7ff fc07 	bl	8001100 <HAL_GetTick>
 80018f2:	eba0 0008 	sub.w	r0, r0, r8
 80018f6:	2802      	cmp	r0, #2
 80018f8:	f200 818b 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	0598      	lsls	r0, r3, #22
 8001900:	d5f5      	bpl.n	80018ee <HAL_RCC_OscConfig+0x46>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	6a22      	ldr	r2, [r4, #32]
 8001906:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800190a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800190e:	61bb      	str	r3, [r7, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	07da      	lsls	r2, r3, #31
 8001914:	d538      	bpl.n	8001988 <HAL_RCC_OscConfig+0xe0>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001916:	2d10      	cmp	r5, #16
 8001918:	f000 8141 	beq.w	8001b9e <HAL_RCC_OscConfig+0x2f6>
 800191c:	2d18      	cmp	r5, #24
 800191e:	f000 813b 	beq.w	8001b98 <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d018      	beq.n	800195c <HAL_RCC_OscConfig+0xb4>
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8174 	beq.w	8001c18 <HAL_RCC_OscConfig+0x370>
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	f000 8284 	beq.w	8001e40 <HAL_RCC_OscConfig+0x598>
 8001938:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800193c:	4b86      	ldr	r3, [pc, #536]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	f000 829c 	beq.w	8001e7c <HAL_RCC_OscConfig+0x5d4>
 8001944:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e004      	b.n	8001966 <HAL_RCC_OscConfig+0xbe>
 800195c:	4a7e      	ldr	r2, [pc, #504]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
 800195e:	6813      	ldr	r3, [r2, #0]
 8001960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001964:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001966:	f7ff fbcb 	bl	8001100 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800196a:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8001b58 <HAL_RCC_OscConfig+0x2b0>
        tickstart = HAL_GetTick();
 800196e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001970:	e005      	b.n	800197e <HAL_RCC_OscConfig+0xd6>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001972:	f7ff fbc5 	bl	8001100 <HAL_GetTick>
 8001976:	1bc0      	subs	r0, r0, r7
 8001978:	2864      	cmp	r0, #100	; 0x64
 800197a:	f200 814a 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800197e:	f8d8 3000 	ldr.w	r3, [r8]
 8001982:	039b      	lsls	r3, r3, #14
 8001984:	d5f5      	bpl.n	8001972 <HAL_RCC_OscConfig+0xca>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	0799      	lsls	r1, r3, #30
 800198a:	d529      	bpl.n	80019e0 <HAL_RCC_OscConfig+0x138>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800198c:	2d00      	cmp	r5, #0
 800198e:	f000 80b9 	beq.w	8001b04 <HAL_RCC_OscConfig+0x25c>
 8001992:	2d18      	cmp	r5, #24
 8001994:	f000 8262 	beq.w	8001e5c <HAL_RCC_OscConfig+0x5b4>
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8001998:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800199a:	4e6f      	ldr	r6, [pc, #444]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 81cb 	beq.w	8001d38 <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80019a2:	6833      	ldr	r3, [r6, #0]
 80019a4:	6922      	ldr	r2, [r4, #16]
 80019a6:	f023 0318 	bic.w	r3, r3, #24
 80019aa:	4313      	orrs	r3, r2
 80019ac:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 80019ae:	6833      	ldr	r3, [r6, #0]
 80019b0:	f043 0301 	orr.w	r3, r3, #1
 80019b4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80019b6:	f7ff fba3 	bl	8001100 <HAL_GetTick>
 80019ba:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019bc:	e005      	b.n	80019ca <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019be:	f7ff fb9f 	bl	8001100 <HAL_GetTick>
 80019c2:	1bc0      	subs	r0, r0, r7
 80019c4:	2802      	cmp	r0, #2
 80019c6:	f200 8124 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ca:	6833      	ldr	r3, [r6, #0]
 80019cc:	079b      	lsls	r3, r3, #30
 80019ce:	d5f6      	bpl.n	80019be <HAL_RCC_OscConfig+0x116>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80019d0:	6933      	ldr	r3, [r6, #16]
 80019d2:	6962      	ldr	r2, [r4, #20]
 80019d4:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80019dc:	6133      	str	r3, [r6, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019de:	6823      	ldr	r3, [r4, #0]
 80019e0:	0719      	lsls	r1, r3, #28
 80019e2:	d519      	bpl.n	8001a18 <HAL_RCC_OscConfig+0x170>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80019e4:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_LSI_ENABLE();
 80019e6:	4e5c      	ldr	r6, [pc, #368]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8130 	beq.w	8001c4e <HAL_RCC_OscConfig+0x3a6>
      __HAL_RCC_LSI_ENABLE();
 80019ee:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80019f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019f6:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 80019fa:	f7ff fb81 	bl	8001100 <HAL_GetTick>
 80019fe:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001a00:	e005      	b.n	8001a0e <HAL_RCC_OscConfig+0x166>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a02:	f7ff fb7d 	bl	8001100 <HAL_GetTick>
 8001a06:	1bc0      	subs	r0, r0, r7
 8001a08:	2802      	cmp	r0, #2
 8001a0a:	f200 8102 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001a0e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8001a12:	011a      	lsls	r2, r3, #4
 8001a14:	d5f5      	bpl.n	8001a02 <HAL_RCC_OscConfig+0x15a>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a16:	6823      	ldr	r3, [r4, #0]
 8001a18:	075e      	lsls	r6, r3, #29
 8001a1a:	d536      	bpl.n	8001a8a <HAL_RCC_OscConfig+0x1e2>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001a1c:	4e4f      	ldr	r6, [pc, #316]	; (8001b5c <HAL_RCC_OscConfig+0x2b4>)
 8001a1e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001a20:	07d8      	lsls	r0, r3, #31
 8001a22:	f140 80e6 	bpl.w	8001bf2 <HAL_RCC_OscConfig+0x34a>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001a26:	68a3      	ldr	r3, [r4, #8]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	f000 821f 	beq.w	8001e6c <HAL_RCC_OscConfig+0x5c4>
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80bc 	beq.w	8001bac <HAL_RCC_OscConfig+0x304>
 8001a34:	2b05      	cmp	r3, #5
 8001a36:	f000 822d 	beq.w	8001e94 <HAL_RCC_OscConfig+0x5ec>
 8001a3a:	2b85      	cmp	r3, #133	; 0x85
 8001a3c:	4b46      	ldr	r3, [pc, #280]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
 8001a3e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001a42:	f000 823b 	beq.w	8001ebc <HAL_RCC_OscConfig+0x614>
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001a4e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001a52:	f022 0204 	bic.w	r2, r2, #4
 8001a56:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001a5a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001a5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a62:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8001a66:	f7ff fb4b 	bl	8001100 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a6e:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a70:	4f39      	ldr	r7, [pc, #228]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
 8001a72:	e005      	b.n	8001a80 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff fb44 	bl	8001100 <HAL_GetTick>
 8001a78:	1b80      	subs	r0, r0, r6
 8001a7a:	4540      	cmp	r0, r8
 8001a7c:	f200 80c9 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001a84:	079a      	lsls	r2, r3, #30
 8001a86:	d5f5      	bpl.n	8001a74 <HAL_RCC_OscConfig+0x1cc>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	069e      	lsls	r6, r3, #26
 8001a8c:	d515      	bpl.n	8001aba <HAL_RCC_OscConfig+0x212>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8001a90:	4e31      	ldr	r6, [pc, #196]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8165 	beq.w	8001d62 <HAL_RCC_OscConfig+0x4ba>
      __HAL_RCC_HSI48_ENABLE();
 8001a98:	6833      	ldr	r3, [r6, #0]
 8001a9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a9e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001aa0:	f7ff fb2e 	bl	8001100 <HAL_GetTick>
 8001aa4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001aa6:	e005      	b.n	8001ab4 <HAL_RCC_OscConfig+0x20c>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001aa8:	f7ff fb2a 	bl	8001100 <HAL_GetTick>
 8001aac:	1bc0      	subs	r0, r0, r7
 8001aae:	2802      	cmp	r0, #2
 8001ab0:	f200 80af 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001ab4:	6833      	ldr	r3, [r6, #0]
 8001ab6:	0498      	lsls	r0, r3, #18
 8001ab8:	d5f6      	bpl.n	8001aa8 <HAL_RCC_OscConfig+0x200>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8139 	beq.w	8001d34 <HAL_RCC_OscConfig+0x48c>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac2:	2d18      	cmp	r5, #24
 8001ac4:	f000 816e 	beq.w	8001da4 <HAL_RCC_OscConfig+0x4fc>
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	f000 80d4 	beq.w	8001c76 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_PLL1_DISABLE();
 8001ace:	4c22      	ldr	r4, [pc, #136]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
 8001ad0:	6823      	ldr	r3, [r4, #0]
 8001ad2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fb12 	bl	8001100 <HAL_GetTick>
 8001adc:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001ade:	e005      	b.n	8001aec <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff fb0e 	bl	8001100 <HAL_GetTick>
 8001ae4:	1b40      	subs	r0, r0, r5
 8001ae6:	2802      	cmp	r0, #2
 8001ae8:	f200 8093 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001aec:	6823      	ldr	r3, [r4, #0]
 8001aee:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8001af2:	d1f5      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x238>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001af4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  return HAL_OK;
 8001af6:	4618      	mov	r0, r3
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001af8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8001afc:	f022 0203 	bic.w	r2, r2, #3
 8001b00:	62a2      	str	r2, [r4, #40]	; 0x28
 8001b02:	e051      	b.n	8001ba8 <HAL_RCC_OscConfig+0x300>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001b04:	68e3      	ldr	r3, [r4, #12]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d04d      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x2fe>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 8001b0a:	4a13      	ldr	r2, [pc, #76]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
 8001b0c:	6921      	ldr	r1, [r4, #16]
 8001b0e:	6813      	ldr	r3, [r2, #0]
 8001b10:	f003 0318 	and.w	r3, r3, #24
 8001b14:	428b      	cmp	r3, r1
 8001b16:	f040 8136 	bne.w	8001d86 <HAL_RCC_OscConfig+0x4de>
        tickstart = HAL_GetTick();
 8001b1a:	f7ff faf1 	bl	8001100 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b1e:	4f0e      	ldr	r7, [pc, #56]	; (8001b58 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8001b20:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b22:	e004      	b.n	8001b2e <HAL_RCC_OscConfig+0x286>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b24:	f7ff faec 	bl	8001100 <HAL_GetTick>
 8001b28:	1b80      	subs	r0, r0, r6
 8001b2a:	2802      	cmp	r0, #2
 8001b2c:	d871      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	079a      	lsls	r2, r3, #30
 8001b32:	d5f7      	bpl.n	8001b24 <HAL_RCC_OscConfig+0x27c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	6962      	ldr	r2, [r4, #20]
 8001b38:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b40:	613b      	str	r3, [r7, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b42:	6823      	ldr	r3, [r4, #0]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001b44:	e74c      	b.n	80019e0 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_CSI_DISABLE();
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b4c:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001b4e:	f7ff fad7 	bl	8001100 <HAL_GetTick>
 8001b52:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b54:	e00a      	b.n	8001b6c <HAL_RCC_OscConfig+0x2c4>
 8001b56:	bf00      	nop
 8001b58:	44020c00 	.word	0x44020c00
 8001b5c:	44020800 	.word	0x44020800
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8001b60:	f7ff face 	bl	8001100 <HAL_GetTick>
 8001b64:	eba0 0008 	sub.w	r0, r0, r8
 8001b68:	2802      	cmp	r0, #2
 8001b6a:	d852      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	0599      	lsls	r1, r3, #22
 8001b70:	d4f6      	bmi.n	8001b60 <HAL_RCC_OscConfig+0x2b8>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	e6cd      	b.n	8001912 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 8001b76:	2e02      	cmp	r6, #2
 8001b78:	f47f aeac 	bne.w	80018d4 <HAL_RCC_OscConfig+0x2c>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 8001b7c:	69e2      	ldr	r2, [r4, #28]
 8001b7e:	b192      	cbz	r2, 8001ba6 <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8001b80:	49ad      	ldr	r1, [pc, #692]	; (8001e38 <HAL_RCC_OscConfig+0x590>)
 8001b82:	6a20      	ldr	r0, [r4, #32]
 8001b84:	698a      	ldr	r2, [r1, #24]
 8001b86:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001b8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001b8e:	618a      	str	r2, [r1, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b90:	07da      	lsls	r2, r3, #31
 8001b92:	f57f aef9 	bpl.w	8001988 <HAL_RCC_OscConfig+0xe0>
 8001b96:	e6be      	b.n	8001916 <HAL_RCC_OscConfig+0x6e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 8001b98:	2e03      	cmp	r6, #3
 8001b9a:	f47f aec2 	bne.w	8001922 <HAL_RCC_OscConfig+0x7a>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8001b9e:	6862      	ldr	r2, [r4, #4]
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	f47f aef1 	bne.w	8001988 <HAL_RCC_OscConfig+0xe0>
        return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
}
 8001ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001bac:	4ea2      	ldr	r6, [pc, #648]	; (8001e38 <HAL_RCC_OscConfig+0x590>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001bb2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8001bb6:	f023 0301 	bic.w	r3, r3, #1
 8001bba:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8001bbe:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8001bc2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001bc6:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8001bca:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8001bce:	f023 0304 	bic.w	r3, r3, #4
 8001bd2:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fa93 	bl	8001100 <HAL_GetTick>
 8001bda:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bdc:	e004      	b.n	8001be8 <HAL_RCC_OscConfig+0x340>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff fa8f 	bl	8001100 <HAL_GetTick>
 8001be2:	1bc0      	subs	r0, r0, r7
 8001be4:	4540      	cmp	r0, r8
 8001be6:	d814      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001be8:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8001bec:	079b      	lsls	r3, r3, #30
 8001bee:	d4f6      	bmi.n	8001bde <HAL_RCC_OscConfig+0x336>
 8001bf0:	e74a      	b.n	8001a88 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8001bf2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6273      	str	r3, [r6, #36]	; 0x24
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fa81 	bl	8001100 <HAL_GetTick>
 8001bfe:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8001c00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001c02:	07d9      	lsls	r1, r3, #31
 8001c04:	f53f af0f 	bmi.w	8001a26 <HAL_RCC_OscConfig+0x17e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c08:	f7ff fa7a 	bl	8001100 <HAL_GetTick>
 8001c0c:	1bc0      	subs	r0, r0, r7
 8001c0e:	2802      	cmp	r0, #2
 8001c10:	d9f6      	bls.n	8001c00 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8001c12:	2003      	movs	r0, #3
}
 8001c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001c18:	4f87      	ldr	r7, [pc, #540]	; (8001e38 <HAL_RCC_OscConfig+0x590>)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c30:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8001c32:	f7ff fa65 	bl	8001100 <HAL_GetTick>
 8001c36:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c38:	e005      	b.n	8001c46 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001c3a:	f7ff fa61 	bl	8001100 <HAL_GetTick>
 8001c3e:	eba0 0008 	sub.w	r0, r0, r8
 8001c42:	2864      	cmp	r0, #100	; 0x64
 8001c44:	d8e5      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	0398      	lsls	r0, r3, #14
 8001c4a:	d4f6      	bmi.n	8001c3a <HAL_RCC_OscConfig+0x392>
 8001c4c:	e69b      	b.n	8001986 <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_LSI_DISABLE();
 8001c4e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8001c52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001c56:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fa51 	bl	8001100 <HAL_GetTick>
 8001c5e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c60:	e004      	b.n	8001c6c <HAL_RCC_OscConfig+0x3c4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c62:	f7ff fa4d 	bl	8001100 <HAL_GetTick>
 8001c66:	1bc0      	subs	r0, r0, r7
 8001c68:	2802      	cmp	r0, #2
 8001c6a:	d8d2      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c6c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	d4f6      	bmi.n	8001c62 <HAL_RCC_OscConfig+0x3ba>
 8001c74:	e6cf      	b.n	8001a16 <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL1_DISABLE();
 8001c76:	4d70      	ldr	r5, [pc, #448]	; (8001e38 <HAL_RCC_OscConfig+0x590>)
 8001c78:	682b      	ldr	r3, [r5, #0]
 8001c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001c80:	f7ff fa3e 	bl	8001100 <HAL_GetTick>
 8001c84:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001c86:	e004      	b.n	8001c92 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001c88:	f7ff fa3a 	bl	8001100 <HAL_GetTick>
 8001c8c:	1b80      	subs	r0, r0, r6
 8001c8e:	2802      	cmp	r0, #2
 8001c90:	d8bf      	bhi.n	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	019a      	lsls	r2, r3, #6
 8001c96:	d4f7      	bmi.n	8001c88 <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001c98:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001c9a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001c9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ca0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001ca2:	f023 0303 	bic.w	r3, r3, #3
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001cac:	62ab      	str	r3, [r5, #40]	; 0x28
 8001cae:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
 8001cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	025b      	lsls	r3, r3, #9
 8001cba:	0412      	lsls	r2, r2, #16
 8001cbc:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001cc0:	3901      	subs	r1, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	f3c1 0208 	ubfx	r2, r1, #0, #9
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	6c22      	ldr	r2, [r4, #64]	; 0x40
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cce:	4e5a      	ldr	r6, [pc, #360]	; (8001e38 <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8001cd0:	3a01      	subs	r2, #1
 8001cd2:	0612      	lsls	r2, r2, #24
 8001cd4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001cdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001cde:	f023 0310 	bic.w	r3, r3, #16
 8001ce2:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001ce4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001ce6:	00db      	lsls	r3, r3, #3
 8001ce8:	63ab      	str	r3, [r5, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001cea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8001cf2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001cf4:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001cf6:	f023 030c 	bic.w	r3, r3, #12
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8001cfe:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d00:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001d02:	f023 0320 	bic.w	r3, r3, #32
 8001d06:	4313      	orrs	r3, r2
 8001d08:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001d0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d10:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_ENABLE();
 8001d12:	682b      	ldr	r3, [r5, #0]
 8001d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d18:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f9f1 	bl	8001100 <HAL_GetTick>
 8001d1e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001d20:	e005      	b.n	8001d2e <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8001d22:	f7ff f9ed 	bl	8001100 <HAL_GetTick>
 8001d26:	1b00      	subs	r0, r0, r4
 8001d28:	2802      	cmp	r0, #2
 8001d2a:	f63f af72 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001d2e:	6833      	ldr	r3, [r6, #0]
 8001d30:	019b      	lsls	r3, r3, #6
 8001d32:	d5f6      	bpl.n	8001d22 <HAL_RCC_OscConfig+0x47a>
  return HAL_OK;
 8001d34:	2000      	movs	r0, #0
 8001d36:	e737      	b.n	8001ba8 <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_DISABLE();
 8001d38:	6833      	ldr	r3, [r6, #0]
 8001d3a:	f023 0301 	bic.w	r3, r3, #1
 8001d3e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001d40:	f7ff f9de 	bl	8001100 <HAL_GetTick>
 8001d44:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d46:	e005      	b.n	8001d54 <HAL_RCC_OscConfig+0x4ac>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001d48:	f7ff f9da 	bl	8001100 <HAL_GetTick>
 8001d4c:	1bc0      	subs	r0, r0, r7
 8001d4e:	2802      	cmp	r0, #2
 8001d50:	f63f af5f 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d54:	6833      	ldr	r3, [r6, #0]
 8001d56:	0798      	lsls	r0, r3, #30
 8001d58:	d4f6      	bmi.n	8001d48 <HAL_RCC_OscConfig+0x4a0>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	e640      	b.n	80019e0 <HAL_RCC_OscConfig+0x138>
    return HAL_ERROR;
 8001d5e:	2001      	movs	r0, #1
}
 8001d60:	4770      	bx	lr
      __HAL_RCC_HSI48_DISABLE();
 8001d62:	6833      	ldr	r3, [r6, #0]
 8001d64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d68:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001d6a:	f7ff f9c9 	bl	8001100 <HAL_GetTick>
 8001d6e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d70:	e005      	b.n	8001d7e <HAL_RCC_OscConfig+0x4d6>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 8001d72:	f7ff f9c5 	bl	8001100 <HAL_GetTick>
 8001d76:	1bc0      	subs	r0, r0, r7
 8001d78:	2802      	cmp	r0, #2
 8001d7a:	f63f af4a 	bhi.w	8001c12 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001d7e:	6833      	ldr	r3, [r6, #0]
 8001d80:	0499      	lsls	r1, r3, #18
 8001d82:	d4f6      	bmi.n	8001d72 <HAL_RCC_OscConfig+0x4ca>
 8001d84:	e699      	b.n	8001aba <HAL_RCC_OscConfig+0x212>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8001d86:	6813      	ldr	r3, [r2, #0]
 8001d88:	f023 0318 	bic.w	r3, r3, #24
 8001d8c:	430b      	orrs	r3, r1
 8001d8e:	6013      	str	r3, [r2, #0]
            (void) HAL_RCC_GetHCLKFreq();
 8001d90:	f7ff fd54 	bl	800183c <HAL_RCC_GetHCLKFreq>
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d94:	4b29      	ldr	r3, [pc, #164]	; (8001e3c <HAL_RCC_OscConfig+0x594>)
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	f7ff f930 	bl	8000ffc <HAL_InitTick>
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	f43f aebc 	beq.w	8001b1a <HAL_RCC_OscConfig+0x272>
 8001da2:	e700      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2fe>
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001da4:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <HAL_RCC_OscConfig+0x590>)
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001da6:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001da8:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001daa:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dac:	f43f aefb 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x2fe>
 8001db0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001db2:	f001 0303 	and.w	r3, r1, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001db6:	4283      	cmp	r3, r0
 8001db8:	f47f aef5 	bne.w	8001ba6 <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001dbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001dbe:	f3c1 2105 	ubfx	r1, r1, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8001dc2:	4299      	cmp	r1, r3
 8001dc4:	f47f aeef 	bne.w	8001ba6 <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001dc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001dca:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8001dce:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8001dd0:	4299      	cmp	r1, r3
 8001dd2:	f47f aee8 	bne.w	8001ba6 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001dd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001dd8:	f3c5 2146 	ubfx	r1, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001ddc:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8001dde:	4299      	cmp	r1, r3
 8001de0:	f47f aee1 	bne.w	8001ba6 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001de4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001de6:	f3c5 4106 	ubfx	r1, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001dea:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8001dec:	4299      	cmp	r1, r3
 8001dee:	f47f aeda 	bne.w	8001ba6 <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001df2:	6c23      	ldr	r3, [r4, #64]	; 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001df4:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8001df8:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8001dfa:	429d      	cmp	r5, r3
 8001dfc:	f47f aed3 	bne.w	8001ba6 <HAL_RCC_OscConfig+0x2fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001e00:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8001e02:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001e04:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d093      	beq.n	8001d34 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8001e0c:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_RCC_OscConfig+0x590>)
 8001e0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8001e10:	f023 0310 	bic.w	r3, r3, #16
 8001e14:	6293      	str	r3, [r2, #40]	; 0x28
        tickstart = HAL_GetTick();
 8001e16:	f7ff f973 	bl	8001100 <HAL_GetTick>
 8001e1a:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8001e1c:	f7ff f970 	bl	8001100 <HAL_GetTick>
 8001e20:	42a8      	cmp	r0, r5
 8001e22:	d0fb      	beq.n	8001e1c <HAL_RCC_OscConfig+0x574>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8001e24:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001e26:	4b04      	ldr	r3, [pc, #16]	; (8001e38 <HAL_RCC_OscConfig+0x590>)
 8001e28:	00d2      	lsls	r2, r2, #3
 8001e2a:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001e2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return HAL_OK;
 8001e2e:	2000      	movs	r0, #0
        __HAL_RCC_PLL1_FRACN_ENABLE();
 8001e30:	f042 0210 	orr.w	r2, r2, #16
 8001e34:	629a      	str	r2, [r3, #40]	; 0x28
 8001e36:	e6b7      	b.n	8001ba8 <HAL_RCC_OscConfig+0x300>
 8001e38:	44020c00 	.word	0x44020c00
 8001e3c:	20000004 	.word	0x20000004
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001e40:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RCC_OscConfig+0x638>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e584      	b.n	8001966 <HAL_RCC_OscConfig+0xbe>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 8001e5c:	2e01      	cmp	r6, #1
 8001e5e:	f47f ad9b 	bne.w	8001998 <HAL_RCC_OscConfig+0xf0>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8001e62:	68e3      	ldr	r3, [r4, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f47f ae58 	bne.w	8001b1a <HAL_RCC_OscConfig+0x272>
 8001e6a:	e69c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2fe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001e6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_RCC_OscConfig+0x638>)
 8001e6e:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 8001e7a:	e5f4      	b.n	8001a66 <HAL_RCC_OscConfig+0x1be>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8001e7c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	e568      	b.n	8001966 <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_RCC_OscConfig+0x638>)
 8001e96:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e9a:	f042 0204 	orr.w	r2, r2, #4
 8001e9e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001ea2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ea6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eaa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001eae:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001eba:	e5d4      	b.n	8001a66 <HAL_RCC_OscConfig+0x1be>
 8001ebc:	f042 0204 	orr.w	r2, r2, #4
 8001ec0:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001ec4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ecc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001ed0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001edc:	e5c3      	b.n	8001a66 <HAL_RCC_OscConfig+0x1be>
 8001ede:	bf00      	nop
 8001ee0:	44020c00 	.word	0x44020c00

08001ee4 <RCCEx_PLL2_Config.part.0>:
  * @param  pll2  pointer to an RCC_PLL2InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
 8001ee4:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8001ee6:	e9d0 1200 	ldrd	r1, r2, [r0]
 8001eea:	4c2a      	ldr	r4, [pc, #168]	; (8001f94 <RCCEx_PLL2_Config.part.0+0xb0>)
 8001eec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001eee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ef2:	f023 0303 	bic.w	r3, r3, #3
 8001ef6:	430b      	orrs	r3, r1
 8001ef8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001efc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001efe:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	3a01      	subs	r2, #1
 8001f06:	025b      	lsls	r3, r3, #9
 8001f08:	0412      	lsls	r2, r2, #16
 8001f0a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	6881      	ldr	r1, [r0, #8]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	6942      	ldr	r2, [r0, #20]
 8001f16:	3901      	subs	r1, #1
 8001f18:	3a01      	subs	r2, #1
 8001f1a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001f1e:	0612      	lsls	r2, r2, #24
 8001f20:	430b      	orrs	r3, r1
 8001f22:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001f26:	4313      	orrs	r3, r2
 8001f28:	63e3      	str	r3, [r4, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8001f2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f2c:	6982      	ldr	r2, [r0, #24]
 8001f2e:	f023 030c 	bic.w	r3, r3, #12
 8001f32:	4313      	orrs	r3, r2
 8001f34:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 8001f36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f38:	69c2      	ldr	r2, [r0, #28]
 8001f3a:	f023 0320 	bic.w	r3, r3, #32
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8001f42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f44:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001f46:	4313      	orrs	r3, r2
 8001f48:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 8001f4a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f4c:	f023 0310 	bic.w	r3, r3, #16
 8001f50:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 8001f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f54:	6a02      	ldr	r2, [r0, #32]
 8001f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001f5a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f5e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f62:	6423      	str	r3, [r4, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 8001f64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001f66:	f043 0310 	orr.w	r3, r3, #16
 8001f6a:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 8001f6c:	6823      	ldr	r3, [r4, #0]
 8001f6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f72:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001f74:	f7ff f8c4 	bl	8001100 <HAL_GetTick>
 8001f78:	4605      	mov	r5, r0

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001f7a:	e004      	b.n	8001f86 <RCCEx_PLL2_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f7c:	f7ff f8c0 	bl	8001100 <HAL_GetTick>
 8001f80:	1b40      	subs	r0, r0, r5
 8001f82:	2802      	cmp	r0, #2
 8001f84:	d804      	bhi.n	8001f90 <RCCEx_PLL2_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	d5f7      	bpl.n	8001f7c <RCCEx_PLL2_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8001f8c:	2000      	movs	r0, #0

}
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8001f90:	2003      	movs	r0, #3
}
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
 8001f94:	44020c00 	.word	0x44020c00

08001f98 <RCCEx_PLL3_Config.part.0>:
  * @param  pll3  pointer to an RCC_PLL3InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
 8001f98:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8001f9a:	e9d0 1200 	ldrd	r1, r2, [r0]
 8001f9e:	4c2a      	ldr	r4, [pc, #168]	; (8002048 <RCCEx_PLL3_Config.part.0+0xb0>)
 8001fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fa2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001fa6:	f023 0303 	bic.w	r3, r3, #3
 8001faa:	430b      	orrs	r3, r1
 8001fac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001fb0:	6323      	str	r3, [r4, #48]	; 0x30
 8001fb2:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	3a01      	subs	r2, #1
 8001fba:	025b      	lsls	r3, r3, #9
 8001fbc:	0412      	lsls	r2, r2, #16
 8001fbe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	6881      	ldr	r1, [r0, #8]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	6942      	ldr	r2, [r0, #20]
 8001fca:	3901      	subs	r1, #1
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001fd2:	0612      	lsls	r2, r2, #24
 8001fd4:	430b      	orrs	r3, r1
 8001fd6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	6463      	str	r3, [r4, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001fde:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fe0:	6982      	ldr	r2, [r0, #24]
 8001fe2:	f023 030c 	bic.w	r3, r3, #12
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	6323      	str	r3, [r4, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8001fea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fec:	69c2      	ldr	r2, [r0, #28]
 8001fee:	f023 0320 	bic.w	r3, r3, #32
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8001ff6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001ff8:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8001ffe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002000:	f023 0310 	bic.w	r3, r3, #16
 8002004:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8002006:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002008:	6a02      	ldr	r2, [r0, #32]
 800200a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800200e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002012:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002016:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8002018:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800201a:	f043 0310 	orr.w	r3, r3, #16
 800201e:	6323      	str	r3, [r4, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8002020:	6823      	ldr	r3, [r4, #0]
 8002022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002026:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002028:	f7ff f86a 	bl	8001100 <HAL_GetTick>
 800202c:	4605      	mov	r5, r0

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800202e:	e004      	b.n	800203a <RCCEx_PLL3_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8002030:	f7ff f866 	bl	8001100 <HAL_GetTick>
 8002034:	1b40      	subs	r0, r0, r5
 8002036:	2802      	cmp	r0, #2
 8002038:	d804      	bhi.n	8002044 <RCCEx_PLL3_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	d5f7      	bpl.n	8002030 <RCCEx_PLL3_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002040:	2000      	movs	r0, #0
}
 8002042:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8002044:	2003      	movs	r0, #3
}
 8002046:	bd38      	pop	{r3, r4, r5, pc}
 8002048:	44020c00 	.word	0x44020c00

0800204c <HAL_RCCEx_PeriphCLKConfig>:
{
 800204c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002050:	e9d0 3200 	ldrd	r3, r2, [r0]
 8002054:	01d9      	lsls	r1, r3, #7
{
 8002056:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002058:	d508      	bpl.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 800205a:	488f      	ldr	r0, [pc, #572]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800205c:	6da5      	ldr	r5, [r4, #88]	; 0x58
 800205e:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8002062:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002066:	4329      	orrs	r1, r5
 8002068:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800206c:	f013 0601 	ands.w	r6, r3, #1
 8002070:	d031      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8002072:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002074:	2905      	cmp	r1, #5
 8002076:	f201 86dd 	bhi.w	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 800207a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800207e:	0023      	.short	0x0023
 8002080:	00060d13 	.word	0x00060d13
 8002084:	00230023 	.word	0x00230023
 8002088:	0023      	.short	0x0023
  __HAL_RCC_PLL3_DISABLE();
 800208a:	4d83      	ldr	r5, [pc, #524]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800208c:	682b      	ldr	r3, [r5, #0]
 800208e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002092:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002094:	f7ff f834 	bl	8001100 <HAL_GetTick>
 8002098:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800209a:	e005      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800209c:	f7ff f830 	bl	8001100 <HAL_GetTick>
 80020a0:	1b80      	subs	r0, r0, r6
 80020a2:	2802      	cmp	r0, #2
 80020a4:	f201 85c6 	bhi.w	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80020a8:	682b      	ldr	r3, [r5, #0]
 80020aa:	0098      	lsls	r0, r3, #2
 80020ac:	d4f6      	bmi.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x50>
 80020ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80020b2:	f7ff ff71 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
 80020b6:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 80020b8:	2e00      	cmp	r6, #0
 80020ba:	f041 86b4 	bne.w	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1dda>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020be:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80020c2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80020c4:	2600      	movs	r6, #0
 80020c6:	4d74      	ldr	r5, [pc, #464]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020c8:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
 80020cc:	f020 0007 	bic.w	r0, r0, #7
 80020d0:	4301      	orrs	r1, r0
 80020d2:	f8c5 10d8 	str.w	r1, [r5, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020d6:	0799      	lsls	r1, r3, #30
 80020d8:	d52e      	bpl.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (pPeriphClkInit->Usart2ClockSelection)
 80020da:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80020dc:	2928      	cmp	r1, #40	; 0x28
 80020de:	d82a      	bhi.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80020e0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80020e4:	00290cb4 	.word	0x00290cb4
 80020e8:	00290029 	.word	0x00290029
 80020ec:	00290029 	.word	0x00290029
 80020f0:	00290029 	.word	0x00290029
 80020f4:	00290d6f 	.word	0x00290d6f
 80020f8:	00290029 	.word	0x00290029
 80020fc:	00290029 	.word	0x00290029
 8002100:	00290029 	.word	0x00290029
 8002104:	00290d89 	.word	0x00290d89
 8002108:	00290029 	.word	0x00290029
 800210c:	00290029 	.word	0x00290029
 8002110:	00290029 	.word	0x00290029
 8002114:	00290cb4 	.word	0x00290cb4
 8002118:	00290029 	.word	0x00290029
 800211c:	00290029 	.word	0x00290029
 8002120:	00290029 	.word	0x00290029
 8002124:	00290cb4 	.word	0x00290cb4
 8002128:	00290029 	.word	0x00290029
 800212c:	00290029 	.word	0x00290029
 8002130:	00290029 	.word	0x00290029
 8002134:	0cb4      	.short	0x0cb4
 8002136:	2601      	movs	r6, #1
 8002138:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800213a:	0759      	lsls	r1, r3, #29
 800213c:	d52e      	bpl.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Usart3ClockSelection)
 800213e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002140:	2980      	cmp	r1, #128	; 0x80
 8002142:	f001 8285 	beq.w	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1604>
 8002146:	f200 81a2 	bhi.w	800248e <HAL_RCCEx_PeriphCLKConfig+0x442>
 800214a:	b1d9      	cbz	r1, 8002184 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800214c:	2940      	cmp	r1, #64	; 0x40
 800214e:	f040 81a7 	bne.w	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  __HAL_RCC_PLL2_DISABLE();
 8002152:	4d51      	ldr	r5, [pc, #324]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002154:	682b      	ldr	r3, [r5, #0]
 8002156:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800215a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800215c:	f7fe ffd0 	bl	8001100 <HAL_GetTick>
 8002160:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002162:	e005      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x124>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002164:	f7fe ffcc 	bl	8001100 <HAL_GetTick>
 8002168:	1bc0      	subs	r0, r0, r7
 800216a:	2802      	cmp	r0, #2
 800216c:	f201 85a8 	bhi.w	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002170:	682b      	ldr	r3, [r5, #0]
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	d4f6      	bmi.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8002176:	f104 0008 	add.w	r0, r4, #8
 800217a:	f7ff feb3 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800217e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002182:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002184:	2d00      	cmp	r5, #0
 8002186:	f041 84b8 	bne.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1aae>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800218a:	4f43      	ldr	r7, [pc, #268]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800218c:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800218e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002192:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8002196:	4301      	orrs	r1, r0
 8002198:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800219c:	0719      	lsls	r1, r3, #28
 800219e:	d530      	bpl.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart4ClockSelection)
 80021a0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80021a2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80021a6:	f001 8378 	beq.w	800389a <HAL_RCCEx_PeriphCLKConfig+0x184e>
 80021aa:	f200 817c 	bhi.w	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 80021ae:	b1e1      	cbz	r1, 80021ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80021b0:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80021b4:	f040 8181 	bne.w	80024ba <HAL_RCCEx_PeriphCLKConfig+0x46e>
  __HAL_RCC_PLL2_DISABLE();
 80021b8:	4d37      	ldr	r5, [pc, #220]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021ba:	682b      	ldr	r3, [r5, #0]
 80021bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021c0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80021c2:	f7fe ff9d 	bl	8001100 <HAL_GetTick>
 80021c6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80021c8:	e005      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80021ca:	f7fe ff99 	bl	8001100 <HAL_GetTick>
 80021ce:	1bc0      	subs	r0, r0, r7
 80021d0:	2802      	cmp	r0, #2
 80021d2:	f201 8534 	bhi.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80021d6:	682b      	ldr	r3, [r5, #0]
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	d4f6      	bmi.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
 80021dc:	f104 0008 	add.w	r0, r4, #8
 80021e0:	f7ff fe80 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021e4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80021e8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	f041 8473 	bne.w	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80021f0:	4f29      	ldr	r7, [pc, #164]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80021f4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80021f8:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 80021fc:	4301      	orrs	r1, r0
 80021fe:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002202:	06d9      	lsls	r1, r3, #27
 8002204:	d530      	bpl.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8002206:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002208:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800220c:	f001 8156 	beq.w	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1470>
 8002210:	f200 8156 	bhi.w	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8002214:	b1e1      	cbz	r1, 8002250 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002216:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800221a:	f040 815b 	bne.w	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x488>
  __HAL_RCC_PLL2_DISABLE();
 800221e:	4d1e      	ldr	r5, [pc, #120]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002220:	682b      	ldr	r3, [r5, #0]
 8002222:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002226:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002228:	f7fe ff6a 	bl	8001100 <HAL_GetTick>
 800222c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800222e:	e005      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002230:	f7fe ff66 	bl	8001100 <HAL_GetTick>
 8002234:	1bc0      	subs	r0, r0, r7
 8002236:	2802      	cmp	r0, #2
 8002238:	f201 8548 	bhi.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800223c:	682b      	ldr	r3, [r5, #0]
 800223e:	011b      	lsls	r3, r3, #4
 8002240:	d4f6      	bmi.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8002242:	f104 0008 	add.w	r0, r4, #8
 8002246:	f7ff fe4d 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800224a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800224e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002250:	2d00      	cmp	r5, #0
 8002252:	f041 8479 	bne.w	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1afc>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002256:	4f10      	ldr	r7, [pc, #64]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002258:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800225a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 800225e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002262:	4301      	orrs	r1, r0
 8002264:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002268:	0699      	lsls	r1, r3, #26
 800226a:	d533      	bpl.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Usart6ClockSelection)
 800226c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800226e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002272:	f001 8179 	beq.w	8003568 <HAL_RCCEx_PeriphCLKConfig+0x151c>
 8002276:	f200 8130 	bhi.w	80024da <HAL_RCCEx_PeriphCLKConfig+0x48e>
 800227a:	b1f9      	cbz	r1, 80022bc <HAL_RCCEx_PeriphCLKConfig+0x270>
 800227c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002280:	f040 8135 	bne.w	80024ee <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  __HAL_RCC_PLL2_DISABLE();
 8002284:	4d04      	ldr	r5, [pc, #16]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002286:	682b      	ldr	r3, [r5, #0]
 8002288:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800228c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800228e:	f7fe ff37 	bl	8001100 <HAL_GetTick>
 8002292:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002294:	e008      	b.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8002296:	bf00      	nop
 8002298:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800229c:	f7fe ff30 	bl	8001100 <HAL_GetTick>
 80022a0:	1bc0      	subs	r0, r0, r7
 80022a2:	2802      	cmp	r0, #2
 80022a4:	f201 84dd 	bhi.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80022a8:	682b      	ldr	r3, [r5, #0]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	d4f6      	bmi.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x250>
 80022ae:	f104 0008 	add.w	r0, r4, #8
 80022b2:	f7ff fe17 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80022ba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80022bc:	2d00      	cmp	r5, #0
 80022be:	f041 843d 	bne.w	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1af0>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80022c2:	4fb1      	ldr	r7, [pc, #708]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80022c4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80022c6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80022ca:	f421 3160 	bic.w	r1, r1, #229376	; 0x38000
 80022ce:	4301      	orrs	r1, r0
 80022d0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80022d4:	0659      	lsls	r1, r3, #25
 80022d6:	d530      	bpl.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart7ClockSelection)
 80022d8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80022da:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80022de:	f001 8286 	beq.w	80037ee <HAL_RCCEx_PeriphCLKConfig+0x17a2>
 80022e2:	f200 8107 	bhi.w	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80022e6:	b1e1      	cbz	r1, 8002322 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80022e8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80022ec:	f040 810c 	bne.w	8002508 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
  __HAL_RCC_PLL2_DISABLE();
 80022f0:	4da5      	ldr	r5, [pc, #660]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80022f2:	682b      	ldr	r3, [r5, #0]
 80022f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80022f8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80022fa:	f7fe ff01 	bl	8001100 <HAL_GetTick>
 80022fe:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002300:	e005      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002302:	f7fe fefd 	bl	8001100 <HAL_GetTick>
 8002306:	1bc0      	subs	r0, r0, r7
 8002308:	2802      	cmp	r0, #2
 800230a:	f201 84cd 	bhi.w	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800230e:	682b      	ldr	r3, [r5, #0]
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	d4f6      	bmi.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8002314:	f104 0008 	add.w	r0, r4, #8
 8002318:	f7ff fde4 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800231c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002320:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002322:	2d00      	cmp	r5, #0
 8002324:	f041 83f5 	bne.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8002328:	4f97      	ldr	r7, [pc, #604]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800232a:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800232c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002330:	f421 11e0 	bic.w	r1, r1, #1835008	; 0x1c0000
 8002334:	4301      	orrs	r1, r0
 8002336:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800233a:	0619      	lsls	r1, r3, #24
 800233c:	d530      	bpl.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart8ClockSelection)
 800233e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002340:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002344:	f001 8167 	beq.w	8003616 <HAL_RCCEx_PeriphCLKConfig+0x15ca>
 8002348:	f200 80e1 	bhi.w	800250e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800234c:	b1e1      	cbz	r1, 8002388 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800234e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002352:	f040 80e6 	bne.w	8002522 <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  __HAL_RCC_PLL2_DISABLE();
 8002356:	4d8c      	ldr	r5, [pc, #560]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002358:	682b      	ldr	r3, [r5, #0]
 800235a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800235e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002360:	f7fe fece 	bl	8001100 <HAL_GetTick>
 8002364:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002366:	e005      	b.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x328>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002368:	f7fe feca 	bl	8001100 <HAL_GetTick>
 800236c:	1bc0      	subs	r0, r0, r7
 800236e:	2802      	cmp	r0, #2
 8002370:	f201 8483 	bhi.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002374:	682b      	ldr	r3, [r5, #0]
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	d4f6      	bmi.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 800237a:	f104 0008 	add.w	r0, r4, #8
 800237e:	f7ff fdb1 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8002382:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002386:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002388:	2d00      	cmp	r5, #0
 800238a:	f041 83da 	bne.w	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1af6>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 800238e:	4f7e      	ldr	r7, [pc, #504]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002390:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8002392:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002396:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 800239a:	4301      	orrs	r1, r0
 800239c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80023a0:	05d9      	lsls	r1, r3, #23
 80023a2:	d530      	bpl.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Uart9ClockSelection)
 80023a4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80023a6:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80023aa:	f001 818d 	beq.w	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x167c>
 80023ae:	f200 80bb 	bhi.w	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 80023b2:	b1e1      	cbz	r1, 80023ee <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 80023b4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80023b8:	f040 80c0 	bne.w	800253c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  __HAL_RCC_PLL2_DISABLE();
 80023bc:	4d72      	ldr	r5, [pc, #456]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80023be:	682b      	ldr	r3, [r5, #0]
 80023c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023c4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80023c6:	f7fe fe9b 	bl	8001100 <HAL_GetTick>
 80023ca:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80023cc:	e005      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80023ce:	f7fe fe97 	bl	8001100 <HAL_GetTick>
 80023d2:	1bc0      	subs	r0, r0, r7
 80023d4:	2802      	cmp	r0, #2
 80023d6:	f201 846d 	bhi.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80023da:	682b      	ldr	r3, [r5, #0]
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	d4f6      	bmi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 80023e0:	f104 0008 	add.w	r0, r4, #8
 80023e4:	f7ff fd7e 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80023e8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80023ec:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80023ee:	2d00      	cmp	r5, #0
 80023f0:	f041 838c 	bne.w	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 80023f4:	4f64      	ldr	r7, [pc, #400]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80023f6:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80023f8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80023fc:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8002400:	4301      	orrs	r1, r0
 8002402:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8002406:	0599      	lsls	r1, r3, #22
 8002408:	d532      	bpl.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (pPeriphClkInit->Usart10ClockSelection)
 800240a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800240e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8002412:	f001 80c6 	beq.w	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1556>
 8002416:	f200 8094 	bhi.w	8002542 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800241a:	b1e1      	cbz	r1, 8002456 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800241c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8002420:	f040 8097 	bne.w	8002552 <HAL_RCCEx_PeriphCLKConfig+0x506>
  __HAL_RCC_PLL2_DISABLE();
 8002424:	4d58      	ldr	r5, [pc, #352]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002426:	682b      	ldr	r3, [r5, #0]
 8002428:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800242c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800242e:	f7fe fe67 	bl	8001100 <HAL_GetTick>
 8002432:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002434:	e005      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002436:	f7fe fe63 	bl	8001100 <HAL_GetTick>
 800243a:	1bc0      	subs	r0, r0, r7
 800243c:	2802      	cmp	r0, #2
 800243e:	f201 842d 	bhi.w	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002442:	682b      	ldr	r3, [r5, #0]
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	d4f6      	bmi.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8002448:	f104 0008 	add.w	r0, r4, #8
 800244c:	f7ff fd4a 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002450:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002454:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002456:	2d00      	cmp	r5, #0
 8002458:	f041 8352 	bne.w	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 800245c:	4f4a      	ldr	r7, [pc, #296]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800245e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8002462:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8002466:	f021 5160 	bic.w	r1, r1, #939524096	; 0x38000000
 800246a:	4301      	orrs	r1, r0
 800246c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002470:	0559      	lsls	r1, r3, #21
 8002472:	d572      	bpl.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8002474:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8002478:	2905      	cmp	r1, #5
 800247a:	f201 84e2 	bhi.w	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 800247e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002482:	05f0      	.short	0x05f0
 8002484:	05d70af4 	.word	0x05d70af4
 8002488:	05f005f0 	.word	0x05f005f0
 800248c:	05f0      	.short	0x05f0
    switch (pPeriphClkInit->Usart3ClockSelection)
 800248e:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 8002492:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002496:	f43f ae75 	beq.w	8002184 <HAL_RCCEx_PeriphCLKConfig+0x138>
 800249a:	29c0      	cmp	r1, #192	; 0xc0
 800249c:	f43f ae72 	beq.w	8002184 <HAL_RCCEx_PeriphCLKConfig+0x138>
 80024a0:	2601      	movs	r6, #1
 80024a2:	4635      	mov	r5, r6
 80024a4:	e67a      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Uart4ClockSelection)
 80024a6:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 80024aa:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 80024ae:	f43f ae9c 	beq.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80024b2:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 80024b6:	f43f ae98 	beq.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x19e>
 80024ba:	2601      	movs	r6, #1
 80024bc:	4635      	mov	r5, r6
 80024be:	e6a0      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart5ClockSelection)
 80024c0:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 80024c4:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80024c8:	f43f aec2 	beq.w	8002250 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80024cc:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 80024d0:	f43f aebe 	beq.w	8002250 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80024d4:	2601      	movs	r6, #1
 80024d6:	4635      	mov	r5, r6
 80024d8:	e6c6      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Usart6ClockSelection)
 80024da:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 80024de:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 80024e2:	f43f aeeb 	beq.w	80022bc <HAL_RCCEx_PeriphCLKConfig+0x270>
 80024e6:	f5b1 3fc0 	cmp.w	r1, #98304	; 0x18000
 80024ea:	f43f aee7 	beq.w	80022bc <HAL_RCCEx_PeriphCLKConfig+0x270>
 80024ee:	2601      	movs	r6, #1
 80024f0:	4635      	mov	r5, r6
 80024f2:	e6ef      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Uart7ClockSelection)
 80024f4:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 80024f8:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 80024fc:	f43f af11 	beq.w	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8002500:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8002504:	f43f af0d 	beq.w	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8002508:	2601      	movs	r6, #1
 800250a:	4635      	mov	r5, r6
 800250c:	e715      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart8ClockSelection)
 800250e:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8002512:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8002516:	f43f af37 	beq.w	8002388 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800251a:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800251e:	f43f af33 	beq.w	8002388 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002522:	2601      	movs	r6, #1
 8002524:	4635      	mov	r5, r6
 8002526:	e73b      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8002528:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 800252c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002530:	f43f af5d 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8002534:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002538:	f43f af59 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 800253c:	2601      	movs	r6, #1
 800253e:	4635      	mov	r5, r6
 8002540:	e761      	b.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8002542:	f021 6000 	bic.w	r0, r1, #134217728	; 0x8000000
 8002546:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 800254a:	d084      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800254c:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 8002550:	d081      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8002552:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002554:	0559      	lsls	r1, r3, #21
    switch (pPeriphClkInit->Usart10ClockSelection)
 8002556:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8002558:	d48c      	bmi.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x428>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800255a:	0519      	lsls	r1, r3, #20
 800255c:	d533      	bpl.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Uart12ClockSelection)
 800255e:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8002562:	2920      	cmp	r1, #32
 8002564:	f001 8126 	beq.w	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1768>
 8002568:	f200 831e 	bhi.w	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 800256c:	b1f1      	cbz	r1, 80025ac <HAL_RCCEx_PeriphCLKConfig+0x560>
 800256e:	2910      	cmp	r1, #16
 8002570:	f040 8322 	bne.w	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  __HAL_RCC_PLL2_DISABLE();
 8002574:	4d04      	ldr	r5, [pc, #16]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002576:	682b      	ldr	r3, [r5, #0]
 8002578:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800257c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800257e:	f7fe fdbf 	bl	8001100 <HAL_GetTick>
 8002582:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002584:	e008      	b.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8002586:	bf00      	nop
 8002588:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800258c:	f7fe fdb8 	bl	8001100 <HAL_GetTick>
 8002590:	1bc0      	subs	r0, r0, r7
 8002592:	2802      	cmp	r0, #2
 8002594:	f201 83a0 	bhi.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002598:	682b      	ldr	r3, [r5, #0]
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	d4f6      	bmi.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x540>
 800259e:	f104 0008 	add.w	r0, r4, #8
 80025a2:	f7ff fc9f 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025a6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80025aa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80025ac:	2d00      	cmp	r5, #0
 80025ae:	f041 82b6 	bne.w	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 80025b2:	4fac      	ldr	r7, [pc, #688]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80025b4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80025b8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80025bc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80025c0:	4301      	orrs	r1, r0
 80025c2:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025c6:	04d9      	lsls	r1, r3, #19
 80025c8:	d532      	bpl.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 80025ca:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80025ce:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80025d2:	f001 8129 	beq.w	8003828 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
 80025d6:	f200 82f2 	bhi.w	8002bbe <HAL_RCCEx_PeriphCLKConfig+0xb72>
 80025da:	b1e1      	cbz	r1, 8002616 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80025dc:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80025e0:	f040 82f7 	bne.w	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
  __HAL_RCC_PLL2_DISABLE();
 80025e4:	4d9f      	ldr	r5, [pc, #636]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80025e6:	682b      	ldr	r3, [r5, #0]
 80025e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80025ec:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80025ee:	f7fe fd87 	bl	8001100 <HAL_GetTick>
 80025f2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80025f4:	e005      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80025f6:	f7fe fd83 	bl	8001100 <HAL_GetTick>
 80025fa:	1bc0      	subs	r0, r0, r7
 80025fc:	2802      	cmp	r0, #2
 80025fe:	f201 8324 	bhi.w	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002602:	682b      	ldr	r3, [r5, #0]
 8002604:	011b      	lsls	r3, r3, #4
 8002606:	d4f6      	bmi.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8002608:	f104 0008 	add.w	r0, r4, #8
 800260c:	f7ff fc6a 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002610:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002614:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002616:	2d00      	cmp	r5, #0
 8002618:	f041 826c 	bne.w	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800261c:	4f91      	ldr	r7, [pc, #580]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800261e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8002622:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8002626:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 800262a:	4301      	orrs	r1, r0
 800262c:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002630:	0499      	lsls	r1, r3, #18
 8002632:	d50f      	bpl.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8002634:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002638:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800263c:	f000 86a0 	beq.w	8003380 <HAL_RCCEx_PeriphCLKConfig+0x1334>
 8002640:	f240 82ec 	bls.w	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 8002644:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002648:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800264c:	f000 82e9 	beq.w	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8002650:	2601      	movs	r6, #1
 8002652:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002654:	045f      	lsls	r7, r3, #17
 8002656:	d50f      	bpl.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8002658:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800265c:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002660:	f000 86b0 	beq.w	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x1378>
 8002664:	f240 82eb 	bls.w	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 8002668:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800266c:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8002670:	f000 82e8 	beq.w	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
 8002674:	2601      	movs	r6, #1
 8002676:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002678:	0419      	lsls	r1, r3, #16
 800267a:	d50f      	bpl.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c3ClockSelection)
 800267c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8002680:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002684:	f000 8642 	beq.w	800330c <HAL_RCCEx_PeriphCLKConfig+0x12c0>
 8002688:	f240 82b7 	bls.w	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xbae>
 800268c:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 8002690:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002694:	f000 82b4 	beq.w	8002c00 <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8002698:	2601      	movs	r6, #1
 800269a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800269c:	0557      	lsls	r7, r2, #21
 800269e:	d50f      	bpl.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c4ClockSelection)
 80026a0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 80026a4:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80026a8:	f000 864d 	beq.w	8003346 <HAL_RCCEx_PeriphCLKConfig+0x12fa>
 80026ac:	f240 8294 	bls.w	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 80026b0:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 80026b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80026b8:	f000 8291 	beq.w	8002bde <HAL_RCCEx_PeriphCLKConfig+0xb92>
 80026bc:	2601      	movs	r6, #1
 80026be:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 80026c0:	03d9      	lsls	r1, r3, #15
 80026c2:	d50b      	bpl.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x690>
    switch (pPeriphClkInit->I3c1ClockSelection)
 80026c4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80026c8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80026cc:	f000 851d 	beq.w	800310a <HAL_RCCEx_PeriphCLKConfig+0x10be>
 80026d0:	f031 7100 	bics.w	r1, r1, #33554432	; 0x2000000
 80026d4:	f000 8532 	beq.w	800313c <HAL_RCCEx_PeriphCLKConfig+0x10f0>
 80026d8:	2601      	movs	r6, #1
 80026da:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80026dc:	0510      	lsls	r0, r2, #20
 80026de:	d509      	bpl.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 80026e0:	4960      	ldr	r1, [pc, #384]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80026e2:	69c8      	ldr	r0, [r1, #28]
 80026e4:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 80026e8:	61c8      	str	r0, [r1, #28]
 80026ea:	69c8      	ldr	r0, [r1, #28]
 80026ec:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
 80026f0:	4338      	orrs	r0, r7
 80026f2:	61c8      	str	r0, [r1, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026f4:	0399      	lsls	r1, r3, #14
 80026f6:	d532      	bpl.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 80026f8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80026fc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002700:	f000 87ff 	beq.w	8003702 <HAL_RCCEx_PeriphCLKConfig+0x16b6>
 8002704:	f200 82ac 	bhi.w	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8002708:	b1e1      	cbz	r1, 8002744 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800270a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800270e:	f040 82b1 	bne.w	8002c74 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  __HAL_RCC_PLL2_DISABLE();
 8002712:	4d54      	ldr	r5, [pc, #336]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002714:	682b      	ldr	r3, [r5, #0]
 8002716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800271a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800271c:	f7fe fcf0 	bl	8001100 <HAL_GetTick>
 8002720:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002722:	e005      	b.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002724:	f7fe fcec 	bl	8001100 <HAL_GetTick>
 8002728:	1bc0      	subs	r0, r0, r7
 800272a:	2802      	cmp	r0, #2
 800272c:	f201 82da 	bhi.w	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002730:	682b      	ldr	r3, [r5, #0]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	d4f6      	bmi.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8002736:	f104 0008 	add.w	r0, r4, #8
 800273a:	f7ff fbd3 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800273e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002742:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002744:	2d00      	cmp	r5, #0
 8002746:	f041 81cf 	bne.w	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800274a:	4f46      	ldr	r7, [pc, #280]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800274c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 8002750:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002754:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8002758:	4301      	orrs	r1, r0
 800275a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800275e:	0359      	lsls	r1, r3, #13
 8002760:	d532      	bpl.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002762:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8002766:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800276a:	f000 866d 	beq.w	8003448 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
 800276e:	f200 8284 	bhi.w	8002c7a <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8002772:	b1e1      	cbz	r1, 80027ae <HAL_RCCEx_PeriphCLKConfig+0x762>
 8002774:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002778:	f040 8289 	bne.w	8002c8e <HAL_RCCEx_PeriphCLKConfig+0xc42>
  __HAL_RCC_PLL2_DISABLE();
 800277c:	4d39      	ldr	r5, [pc, #228]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800277e:	682b      	ldr	r3, [r5, #0]
 8002780:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002784:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002786:	f7fe fcbb 	bl	8001100 <HAL_GetTick>
 800278a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800278c:	e005      	b.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x74e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800278e:	f7fe fcb7 	bl	8001100 <HAL_GetTick>
 8002792:	1bc0      	subs	r0, r0, r7
 8002794:	2802      	cmp	r0, #2
 8002796:	f201 826a 	bhi.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800279a:	682b      	ldr	r3, [r5, #0]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	d4f6      	bmi.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x742>
 80027a0:	f104 0008 	add.w	r0, r4, #8
 80027a4:	f7ff fb9e 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80027a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80027ac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80027ae:	2d00      	cmp	r5, #0
 80027b0:	f041 81be 	bne.w	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80027b4:	4f2b      	ldr	r7, [pc, #172]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80027b6:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 80027ba:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80027be:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 80027c2:	4301      	orrs	r1, r0
 80027c4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80027c8:	0691      	lsls	r1, r2, #26
 80027ca:	d532      	bpl.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 80027cc:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 80027d0:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80027d4:	f000 8655 	beq.w	8003482 <HAL_RCCEx_PeriphCLKConfig+0x1436>
 80027d8:	f200 825c 	bhi.w	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80027dc:	b1e1      	cbz	r1, 8002818 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 80027de:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80027e2:	f040 8261 	bne.w	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  __HAL_RCC_PLL2_DISABLE();
 80027e6:	4d1f      	ldr	r5, [pc, #124]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80027e8:	682b      	ldr	r3, [r5, #0]
 80027ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027ee:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80027f0:	f7fe fc86 	bl	8001100 <HAL_GetTick>
 80027f4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80027f6:	e005      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80027f8:	f7fe fc82 	bl	8001100 <HAL_GetTick>
 80027fc:	1bc0      	subs	r0, r0, r7
 80027fe:	2802      	cmp	r0, #2
 8002800:	f201 827e 	bhi.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002804:	682b      	ldr	r3, [r5, #0]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	d4f6      	bmi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 800280a:	f104 0008 	add.w	r0, r4, #8
 800280e:	f7ff fb69 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8002812:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002816:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002818:	2d00      	cmp	r5, #0
 800281a:	f041 8186 	bne.w	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1ade>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800281e:	4f11      	ldr	r7, [pc, #68]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002820:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 8002824:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002828:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800282c:	4301      	orrs	r1, r0
 800282e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8002832:	0651      	lsls	r1, r2, #25
 8002834:	d535      	bpl.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8002836:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800283a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800283e:	f000 86cd 	beq.w	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1590>
 8002842:	f200 8234 	bhi.w	8002cae <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8002846:	b1f9      	cbz	r1, 8002888 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002848:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800284c:	f040 8239 	bne.w	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
  __HAL_RCC_PLL2_DISABLE();
 8002850:	4d04      	ldr	r5, [pc, #16]	; (8002864 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8002852:	682b      	ldr	r3, [r5, #0]
 8002854:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002858:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800285a:	f7fe fc51 	bl	8001100 <HAL_GetTick>
 800285e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002860:	e008      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x828>
 8002862:	bf00      	nop
 8002864:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002868:	f7fe fc4a 	bl	8001100 <HAL_GetTick>
 800286c:	1bc0      	subs	r0, r0, r7
 800286e:	2802      	cmp	r0, #2
 8002870:	f201 8209 	bhi.w	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002874:	682b      	ldr	r3, [r5, #0]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	d4f6      	bmi.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 800287a:	f104 0008 	add.w	r0, r4, #8
 800287e:	f7ff fb31 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8002882:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002886:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002888:	2d00      	cmp	r5, #0
 800288a:	f041 813c 	bne.w	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800288e:	4faf      	ldr	r7, [pc, #700]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8002890:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8002894:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002898:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800289c:	4301      	orrs	r1, r0
 800289e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80028a2:	0611      	lsls	r1, r2, #24
 80028a4:	d532      	bpl.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 80028a6:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 80028aa:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80028ae:	f000 86ec 	beq.w	800368a <HAL_RCCEx_PeriphCLKConfig+0x163e>
 80028b2:	f200 8209 	bhi.w	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 80028b6:	b1e1      	cbz	r1, 80028f2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 80028b8:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80028bc:	f040 820e 	bne.w	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xc90>
  __HAL_RCC_PLL2_DISABLE();
 80028c0:	4da2      	ldr	r5, [pc, #648]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80028c2:	682b      	ldr	r3, [r5, #0]
 80028c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028c8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80028ca:	f7fe fc19 	bl	8001100 <HAL_GetTick>
 80028ce:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80028d0:	e005      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x892>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80028d2:	f7fe fc15 	bl	8001100 <HAL_GetTick>
 80028d6:	1bc0      	subs	r0, r0, r7
 80028d8:	2802      	cmp	r0, #2
 80028da:	f201 81bc 	bhi.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80028de:	682b      	ldr	r3, [r5, #0]
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	d4f6      	bmi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x886>
 80028e4:	f104 0008 	add.w	r0, r4, #8
 80028e8:	f7ff fafc 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80028ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80028f0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80028f2:	2d00      	cmp	r5, #0
 80028f4:	f041 80f2 	bne.w	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1a90>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 80028f8:	4f94      	ldr	r7, [pc, #592]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80028fa:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 80028fe:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8002902:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8002906:	4301      	orrs	r1, r0
 8002908:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 800290c:	05d1      	lsls	r1, r2, #23
 800290e:	d532      	bpl.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8002910:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8002914:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8002918:	f000 872c 	beq.w	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1728>
 800291c:	f200 81e1 	bhi.w	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8002920:	b1e1      	cbz	r1, 800295c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002922:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8002926:	f040 81e6 	bne.w	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  __HAL_RCC_PLL2_DISABLE();
 800292a:	4d88      	ldr	r5, [pc, #544]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 800292c:	682b      	ldr	r3, [r5, #0]
 800292e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002932:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002934:	f7fe fbe4 	bl	8001100 <HAL_GetTick>
 8002938:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800293a:	e005      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800293c:	f7fe fbe0 	bl	8001100 <HAL_GetTick>
 8002940:	1bc0      	subs	r0, r0, r7
 8002942:	2802      	cmp	r0, #2
 8002944:	f201 81e8 	bhi.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002948:	682b      	ldr	r3, [r5, #0]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	d4f6      	bmi.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 800294e:	f104 0008 	add.w	r0, r4, #8
 8002952:	f7ff fac7 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002956:	e9d4 3200 	ldrd	r3, r2, [r4]
 800295a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800295c:	2d00      	cmp	r5, #0
 800295e:	f041 80c6 	bne.w	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 8002962:	4f7a      	ldr	r7, [pc, #488]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8002964:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 8002968:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800296c:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 8002970:	4301      	orrs	r1, r0
 8002972:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002976:	0319      	lsls	r1, r3, #12
 8002978:	d536      	bpl.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai1ClockSelection)
 800297a:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 800297e:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002982:	f000 87f9 	beq.w	8003978 <HAL_RCCEx_PeriphCLKConfig+0x192c>
 8002986:	f200 81b9 	bhi.w	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 800298a:	2900      	cmp	r1, #0
 800298c:	f000 8476 	beq.w	800327c <HAL_RCCEx_PeriphCLKConfig+0x1230>
 8002990:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8002994:	f040 81ba 	bne.w	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
  __HAL_RCC_PLL2_DISABLE();
 8002998:	4d6c      	ldr	r5, [pc, #432]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 800299a:	682b      	ldr	r3, [r5, #0]
 800299c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029a0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80029a2:	f7fe fbad 	bl	8001100 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80029a6:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80029a8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	d508      	bpl.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x974>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80029ae:	f7fe fba7 	bl	8001100 <HAL_GetTick>
 80029b2:	1bc0      	subs	r0, r0, r7
 80029b4:	2802      	cmp	r0, #2
 80029b6:	f201 81cd 	bhi.w	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80029ba:	682b      	ldr	r3, [r5, #0]
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	d4f6      	bmi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x962>
 80029c0:	f104 0008 	add.w	r0, r4, #8
 80029c4:	f7ff fa8e 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80029c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80029cc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80029ce:	2d00      	cmp	r5, #0
 80029d0:	f040 845c 	bne.w	800328c <HAL_RCCEx_PeriphCLKConfig+0x1240>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80029d4:	4f5d      	ldr	r7, [pc, #372]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80029d6:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 80029da:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80029de:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80029e2:	4301      	orrs	r1, r0
 80029e4:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80029e8:	02d9      	lsls	r1, r3, #11
 80029ea:	d536      	bpl.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->Sai2ClockSelection)
 80029ec:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 80029f0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80029f4:	f000 87a5 	beq.w	8003942 <HAL_RCCEx_PeriphCLKConfig+0x18f6>
 80029f8:	f200 818b 	bhi.w	8002d12 <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 80029fc:	2900      	cmp	r1, #0
 80029fe:	f000 8448 	beq.w	8003292 <HAL_RCCEx_PeriphCLKConfig+0x1246>
 8002a02:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8002a06:	f040 818c 	bne.w	8002d22 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
  __HAL_RCC_PLL2_DISABLE();
 8002a0a:	4d50      	ldr	r5, [pc, #320]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8002a0c:	682b      	ldr	r3, [r5, #0]
 8002a0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a12:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002a14:	f7fe fb74 	bl	8001100 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002a18:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002a1a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	d508      	bpl.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002a20:	f7fe fb6e 	bl	8001100 <HAL_GetTick>
 8002a24:	1bc0      	subs	r0, r0, r7
 8002a26:	2802      	cmp	r0, #2
 8002a28:	f201 8188 	bhi.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002a2c:	682b      	ldr	r3, [r5, #0]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	d4f6      	bmi.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002a32:	f104 0008 	add.w	r0, r4, #8
 8002a36:	f7ff fa55 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002a3a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002a3e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002a40:	2d00      	cmp	r5, #0
 8002a42:	f040 842e 	bne.w	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x1256>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002a46:	4f41      	ldr	r7, [pc, #260]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8002a48:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 8002a4c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002a50:	f421 1160 	bic.w	r1, r1, #3670016	; 0x380000
 8002a54:	4301      	orrs	r1, r0
 8002a56:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002a5a:	0299      	lsls	r1, r3, #10
 8002a5c:	d516      	bpl.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8002a5e:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 8002a62:	2902      	cmp	r1, #2
 8002a64:	f000 8435 	beq.w	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1286>
 8002a68:	d903      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xa26>
 8002a6a:	3903      	subs	r1, #3
 8002a6c:	2902      	cmp	r1, #2
 8002a6e:	f200 831a 	bhi.w	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x105a>
    if (ret == HAL_OK)
 8002a72:	2d00      	cmp	r5, #0
 8002a74:	f040 87d8 	bne.w	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002a78:	4f34      	ldr	r7, [pc, #208]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8002a7a:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 8002a7e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002a82:	f021 0107 	bic.w	r1, r1, #7
 8002a86:	4301      	orrs	r1, r0
 8002a88:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8002a8c:	0590      	lsls	r0, r2, #22
 8002a8e:	d507      	bpl.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 8002a90:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8002a94:	f031 0008 	bics.w	r0, r1, #8
 8002a98:	f000 835f 	beq.w	800315a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8002a9c:	2601      	movs	r6, #1
 8002a9e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa0:	0199      	lsls	r1, r3, #6
 8002aa2:	f100 8368 	bmi.w	8003176 <HAL_RCCEx_PeriphCLKConfig+0x112a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002aa6:	0158      	lsls	r0, r3, #5
 8002aa8:	d50d      	bpl.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    switch (pPeriphClkInit->RngClockSelection)
 8002aaa:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 8002aae:	2910      	cmp	r1, #16
 8002ab0:	f000 8406 	beq.w	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x1274>
 8002ab4:	f240 8138 	bls.w	8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8002ab8:	f021 0010 	bic.w	r0, r1, #16
 8002abc:	2820      	cmp	r0, #32
 8002abe:	f000 8136 	beq.w	8002d2e <HAL_RCCEx_PeriphCLKConfig+0xce2>
 8002ac2:	2601      	movs	r6, #1
 8002ac4:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ac6:	0259      	lsls	r1, r3, #9
 8002ac8:	d52d      	bpl.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xada>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8002aca:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	f000 83f0 	beq.w	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1268>
 8002ad4:	2940      	cmp	r1, #64	; 0x40
 8002ad6:	f040 82ef 	bne.w	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  __HAL_RCC_PLL2_DISABLE();
 8002ada:	4d1c      	ldr	r5, [pc, #112]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8002adc:	682b      	ldr	r3, [r5, #0]
 8002ade:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ae2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002ae4:	f7fe fb0c 	bl	8001100 <HAL_GetTick>
 8002ae8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002aea:	e005      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002aec:	f7fe fb08 	bl	8001100 <HAL_GetTick>
 8002af0:	1bc0      	subs	r0, r0, r7
 8002af2:	2802      	cmp	r0, #2
 8002af4:	f201 8146 	bhi.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x1d38>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002af8:	682b      	ldr	r3, [r5, #0]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	d4f6      	bmi.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 8002afe:	f104 0008 	add.w	r0, r4, #8
 8002b02:	f7ff f9ef 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b06:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002b0a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002b0c:	2d00      	cmp	r5, #0
 8002b0e:	f041 8136 	bne.w	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x1d32>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 8002b12:	4f0e      	ldr	r7, [pc, #56]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8002b14:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8002b18:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002b1c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002b20:	4301      	orrs	r1, r0
 8002b22:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002b26:	021f      	lsls	r7, r3, #8
 8002b28:	d52f      	bpl.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xb3e>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8002b2a:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 8002b2e:	2900      	cmp	r1, #0
 8002b30:	f000 83ba 	beq.w	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 8002b34:	2980      	cmp	r1, #128	; 0x80
 8002b36:	f040 82b9 	bne.w	80030ac <HAL_RCCEx_PeriphCLKConfig+0x1060>
  __HAL_RCC_PLL2_DISABLE();
 8002b3a:	4d04      	ldr	r5, [pc, #16]	; (8002b4c <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b42:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002b44:	f7fe fadc 	bl	8001100 <HAL_GetTick>
 8002b48:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002b4a:	e007      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0xb10>
 8002b4c:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002b50:	f7fe fad6 	bl	8001100 <HAL_GetTick>
 8002b54:	1bc0      	subs	r0, r0, r7
 8002b56:	2802      	cmp	r0, #2
 8002b58:	f201 8120 	bhi.w	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x1d50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002b5c:	682b      	ldr	r3, [r5, #0]
 8002b5e:	0118      	lsls	r0, r3, #4
 8002b60:	d4f6      	bmi.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0xb04>
 8002b62:	f104 0008 	add.w	r0, r4, #8
 8002b66:	f7ff f9bd 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002b6a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002b6e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002b70:	2d00      	cmp	r5, #0
 8002b72:	f041 8101 	bne.w	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x1d2c>
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 8002b76:	4f91      	ldr	r7, [pc, #580]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8002b78:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 8002b7c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002b80:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002b84:	4301      	orrs	r1, r0
 8002b86:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002b8a:	0119      	lsls	r1, r3, #4
 8002b8c:	f140 80ed 	bpl.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8002b90:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8002b94:	2904      	cmp	r1, #4
 8002b96:	f201 8150 	bhi.w	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1dee>
 8002b9a:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002b9e:	00d4      	.short	0x00d4
 8002ba0:	070b072a 	.word	0x070b072a
 8002ba4:	00d900d9 	.word	0x00d900d9
    switch (pPeriphClkInit->Uart12ClockSelection)
 8002ba8:	f021 0010 	bic.w	r0, r1, #16
 8002bac:	2840      	cmp	r0, #64	; 0x40
 8002bae:	f43f acfd 	beq.w	80025ac <HAL_RCCEx_PeriphCLKConfig+0x560>
 8002bb2:	2930      	cmp	r1, #48	; 0x30
 8002bb4:	f43f acfa 	beq.w	80025ac <HAL_RCCEx_PeriphCLKConfig+0x560>
 8002bb8:	2601      	movs	r6, #1
 8002bba:	4635      	mov	r5, r6
 8002bbc:	e503      	b.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8002bbe:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8002bc2:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002bc6:	f43f ad26 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002bca:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002bce:	f43f ad22 	beq.w	8002616 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002bd2:	2601      	movs	r6, #1
 8002bd4:	4635      	mov	r5, r6
 8002bd6:	e52b      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8002bd8:	2900      	cmp	r1, #0
 8002bda:	f47f ad6f 	bne.w	80026bc <HAL_RCCEx_PeriphCLKConfig+0x670>
    if (ret == HAL_OK)
 8002bde:	2d00      	cmp	r5, #0
 8002be0:	f040 8725 	bne.w	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x19e2>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002be4:	4f75      	ldr	r7, [pc, #468]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8002be6:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8002bea:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002bee:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 8002bf2:	4301      	orrs	r1, r0
 8002bf4:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8002bf8:	e562      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8002bfa:	2900      	cmp	r1, #0
 8002bfc:	f47f ad4c 	bne.w	8002698 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    if (ret == HAL_OK)
 8002c00:	2d00      	cmp	r5, #0
 8002c02:	f040 8720 	bne.w	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002c06:	4f6d      	ldr	r7, [pc, #436]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8002c08:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8002c0c:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002c10:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8002c14:	4301      	orrs	r1, r0
 8002c16:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8002c1a:	e53f      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8002c1c:	2900      	cmp	r1, #0
 8002c1e:	f47f ad17 	bne.w	8002650 <HAL_RCCEx_PeriphCLKConfig+0x604>
    if (ret == HAL_OK)
 8002c22:	2d00      	cmp	r5, #0
 8002c24:	f040 8709 	bne.w	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x19ee>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002c28:	4f64      	ldr	r7, [pc, #400]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8002c2a:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 8002c2e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002c32:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8002c36:	4301      	orrs	r1, r0
 8002c38:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8002c3c:	e50a      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c2ClockSelection)
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	f47f ad18 	bne.w	8002674 <HAL_RCCEx_PeriphCLKConfig+0x628>
    if (ret == HAL_OK)
 8002c44:	2d00      	cmp	r5, #0
 8002c46:	f040 86fb 	bne.w	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x19f4>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002c4a:	4f5c      	ldr	r7, [pc, #368]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8002c4c:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8002c50:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8002c54:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 8002c58:	4301      	orrs	r1, r0
 8002c5a:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8002c5e:	e50b      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8002c60:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8002c64:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8002c68:	f43f ad6c 	beq.w	8002744 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002c6c:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002c70:	f43f ad68 	beq.w	8002744 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8002c74:	2601      	movs	r6, #1
 8002c76:	4635      	mov	r5, r6
 8002c78:	e571      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 8002c7a:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 8002c7e:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8002c82:	f43f ad94 	beq.w	80027ae <HAL_RCCEx_PeriphCLKConfig+0x762>
 8002c86:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8002c8a:	f43f ad90 	beq.w	80027ae <HAL_RCCEx_PeriphCLKConfig+0x762>
 8002c8e:	2601      	movs	r6, #1
 8002c90:	4635      	mov	r5, r6
 8002c92:	e599      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8002c94:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8002c98:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8002c9c:	f43f adbc 	beq.w	8002818 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8002ca0:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8002ca4:	f43f adb8 	beq.w	8002818 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8002ca8:	2601      	movs	r6, #1
 8002caa:	4635      	mov	r5, r6
 8002cac:	e5c1      	b.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 8002cae:	f421 1080 	bic.w	r0, r1, #1048576	; 0x100000
 8002cb2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8002cb6:	f43f ade7 	beq.w	8002888 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002cba:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8002cbe:	f43f ade3 	beq.w	8002888 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002cc2:	2601      	movs	r6, #1
 8002cc4:	4635      	mov	r5, r6
 8002cc6:	e5ec      	b.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8002cc8:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8002ccc:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8002cd0:	f43f ae0f 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8002cd4:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002cd8:	f43f ae0b 	beq.w	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8002cdc:	2601      	movs	r6, #1
 8002cde:	4635      	mov	r5, r6
 8002ce0:	e614      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 8002ce2:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8002ce6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cea:	f43f ae37 	beq.w	800295c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002cee:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8002cf2:	f43f ae33 	beq.w	800295c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002cf6:	2601      	movs	r6, #1
 8002cf8:	4635      	mov	r5, r6
 8002cfa:	e63c      	b.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8002cfc:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8002d00:	f43f ae65 	beq.w	80029ce <HAL_RCCEx_PeriphCLKConfig+0x982>
 8002d04:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8002d08:	f43f ae61 	beq.w	80029ce <HAL_RCCEx_PeriphCLKConfig+0x982>
 8002d0c:	2601      	movs	r6, #1
 8002d0e:	4635      	mov	r5, r6
 8002d10:	e66a      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8002d12:	f5b1 1fc0 	cmp.w	r1, #1572864	; 0x180000
 8002d16:	f43f ae93 	beq.w	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8002d1a:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002d1e:	f43f ae8f 	beq.w	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8002d22:	2601      	movs	r6, #1
 8002d24:	4635      	mov	r5, r6
 8002d26:	e698      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->RngClockSelection)
 8002d28:	2900      	cmp	r1, #0
 8002d2a:	f47f aeca 	bne.w	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
    if (ret == HAL_OK)
 8002d2e:	2d00      	cmp	r5, #0
 8002d30:	f040 8365 	bne.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002d34:	4f21      	ldr	r7, [pc, #132]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8002d36:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8002d3a:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 8002d3e:	4301      	orrs	r1, r0
 8002d40:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8002d44:	e6bf      	b.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d46:	481d      	ldr	r0, [pc, #116]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8002d48:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002d4a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8002d4e:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8002d50:	2d00      	cmp	r5, #0
 8002d52:	f040 864b 	bne.w	80039ec <HAL_RCCEx_PeriphCLKConfig+0x19a0>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002d56:	4f19      	ldr	r7, [pc, #100]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8002d58:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 8002d5c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8002d60:	f021 0107 	bic.w	r1, r1, #7
 8002d64:	4301      	orrs	r1, r0
 8002d66:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002d6a:	00d9      	lsls	r1, r3, #3
 8002d6c:	d52a      	bpl.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    switch (pPeriphClkInit->Spi2ClockSelection)
 8002d6e:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 8002d72:	2920      	cmp	r1, #32
 8002d74:	d824      	bhi.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
 8002d76:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002d7a:	0264      	.short	0x0264
 8002d7c:	00230023 	.word	0x00230023
 8002d80:	00230023 	.word	0x00230023
 8002d84:	00230023 	.word	0x00230023
 8002d88:	07090023 	.word	0x07090023
 8002d8c:	00230023 	.word	0x00230023
 8002d90:	00230023 	.word	0x00230023
 8002d94:	00230023 	.word	0x00230023
 8002d98:	06ea0023 	.word	0x06ea0023
 8002d9c:	00230023 	.word	0x00230023
 8002da0:	00230023 	.word	0x00230023
 8002da4:	00230023 	.word	0x00230023
 8002da8:	02690023 	.word	0x02690023
 8002dac:	00230023 	.word	0x00230023
 8002db0:	00230023 	.word	0x00230023
 8002db4:	00230023 	.word	0x00230023
 8002db8:	02690023 	.word	0x02690023
 8002dbc:	44020c00 	.word	0x44020c00
 8002dc0:	2601      	movs	r6, #1
 8002dc2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002dc4:	0099      	lsls	r1, r3, #2
 8002dc6:	d534      	bpl.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8002dc8:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8002dcc:	2980      	cmp	r1, #128	; 0x80
 8002dce:	f000 859d 	beq.w	800390c <HAL_RCCEx_PeriphCLKConfig+0x18c0>
 8002dd2:	f200 80d5 	bhi.w	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	f000 8246 	beq.w	8003268 <HAL_RCCEx_PeriphCLKConfig+0x121c>
 8002ddc:	2940      	cmp	r1, #64	; 0x40
 8002dde:	f040 80d6 	bne.w	8002f8e <HAL_RCCEx_PeriphCLKConfig+0xf42>
  __HAL_RCC_PLL2_DISABLE();
 8002de2:	4db4      	ldr	r5, [pc, #720]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002dea:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002dec:	f7fe f988 	bl	8001100 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002df0:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002df2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002df4:	011a      	lsls	r2, r3, #4
 8002df6:	d508      	bpl.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002df8:	f7fe f982 	bl	8001100 <HAL_GetTick>
 8002dfc:	1bc0      	subs	r0, r0, r7
 8002dfe:	2802      	cmp	r0, #2
 8002e00:	f200 87a2 	bhi.w	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	011a      	lsls	r2, r3, #4
 8002e08:	d4f6      	bmi.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8002e0a:	f104 0008 	add.w	r0, r4, #8
 8002e0e:	f7ff f869 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8002e12:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002e16:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002e18:	2d00      	cmp	r5, #0
 8002e1a:	f040 822d 	bne.w	8003278 <HAL_RCCEx_PeriphCLKConfig+0x122c>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8002e1e:	4fa5      	ldr	r7, [pc, #660]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8002e20:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 8002e24:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8002e28:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8002e2c:	4301      	orrs	r1, r0
 8002e2e:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8002e32:	0058      	lsls	r0, r3, #1
 8002e34:	d532      	bpl.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8002e36:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 8002e3a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8002e3e:	f000 8376 	beq.w	800352e <HAL_RCCEx_PeriphCLKConfig+0x14e2>
 8002e42:	f200 80a7 	bhi.w	8002f94 <HAL_RCCEx_PeriphCLKConfig+0xf48>
 8002e46:	b1e1      	cbz	r1, 8002e82 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8002e48:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8002e4c:	f040 80ac 	bne.w	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
  __HAL_RCC_PLL2_DISABLE();
 8002e50:	4d98      	ldr	r5, [pc, #608]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e58:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002e5a:	f7fe f951 	bl	8001100 <HAL_GetTick>
 8002e5e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e60:	e005      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xe22>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002e62:	f7fe f94d 	bl	8001100 <HAL_GetTick>
 8002e66:	1bc0      	subs	r0, r0, r7
 8002e68:	2802      	cmp	r0, #2
 8002e6a:	f200 8761 	bhi.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002e6e:	682b      	ldr	r3, [r5, #0]
 8002e70:	0119      	lsls	r1, r3, #4
 8002e72:	d4f6      	bmi.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xe16>
 8002e74:	f104 0008 	add.w	r0, r4, #8
 8002e78:	f7ff f834 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8002e7c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8002e80:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8002e82:	2d00      	cmp	r5, #0
 8002e84:	f040 864e 	bne.w	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8002e88:	4f8a      	ldr	r7, [pc, #552]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8002e8a:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 8002e8e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8002e92:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8002e96:	4301      	orrs	r1, r0
 8002e98:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	da30      	bge.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8002ea0:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8002ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ea8:	f000 8325 	beq.w	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x14aa>
 8002eac:	d87f      	bhi.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0xf62>
 8002eae:	b1db      	cbz	r3, 8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8002eb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eb4:	f040 8083 	bne.w	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xf72>
  __HAL_RCC_PLL2_DISABLE();
 8002eb8:	4d7e      	ldr	r5, [pc, #504]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8002eba:	682b      	ldr	r3, [r5, #0]
 8002ebc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002ec0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002ec2:	f7fe f91d 	bl	8001100 <HAL_GetTick>
 8002ec6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002ec8:	e005      	b.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002eca:	f7fe f919 	bl	8001100 <HAL_GetTick>
 8002ece:	1bc0      	subs	r0, r0, r7
 8002ed0:	2802      	cmp	r0, #2
 8002ed2:	f200 870d 	bhi.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	d4f6      	bmi.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xe7e>
 8002edc:	f104 0008 	add.w	r0, r4, #8
 8002ee0:	f7ff f800 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
 8002ee4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ee6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8002ee8:	2d00      	cmp	r5, #0
 8002eea:	f040 8615 	bne.w	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 8002eee:	4971      	ldr	r1, [pc, #452]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8002ef0:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8002ef4:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 8002ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002efc:	4303      	orrs	r3, r0
 8002efe:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002f02:	07d1      	lsls	r1, r2, #31
 8002f04:	d52f      	bpl.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8002f06:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8002f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0e:	f000 84a8 	beq.w	8003862 <HAL_RCCEx_PeriphCLKConfig+0x1816>
 8002f12:	d857      	bhi.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0xf78>
 8002f14:	b1d3      	cbz	r3, 8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8002f16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1a:	d15b      	bne.n	8002fd4 <HAL_RCCEx_PeriphCLKConfig+0xf88>
  __HAL_RCC_PLL2_DISABLE();
 8002f1c:	4d65      	ldr	r5, [pc, #404]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8002f1e:	682b      	ldr	r3, [r5, #0]
 8002f20:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f24:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8002f26:	f7fe f8eb 	bl	8001100 <HAL_GetTick>
 8002f2a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f2c:	e005      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xeee>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002f2e:	f7fe f8e7 	bl	8001100 <HAL_GetTick>
 8002f32:	1bc0      	subs	r0, r0, r7
 8002f34:	2802      	cmp	r0, #2
 8002f36:	f200 86ac 	bhi.w	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f3a:	682b      	ldr	r3, [r5, #0]
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	d4f6      	bmi.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0xee2>
 8002f40:	f104 0008 	add.w	r0, r4, #8
 8002f44:	f7fe ffce 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
 8002f48:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f4a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8002f4c:	2d00      	cmp	r5, #0
 8002f4e:	f040 85c8 	bne.w	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a96>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 8002f52:	4958      	ldr	r1, [pc, #352]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8002f54:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 8002f58:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 8002f5c:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 8002f60:	4303      	orrs	r3, r0
 8002f62:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f66:	0791      	lsls	r1, r2, #30
 8002f68:	d538      	bpl.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->OspiClockSelection)
 8002f6a:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 8002f6e:	2b03      	cmp	r3, #3
 8002f70:	f200 876b 	bhi.w	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x1dfe>
 8002f74:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002f78:	00840089 	.word	0x00840089
 8002f7c:	008904ae 	.word	0x008904ae
    switch (pPeriphClkInit->Spi3ClockSelection)
 8002f80:	29c0      	cmp	r1, #192	; 0xc0
 8002f82:	f43f af49 	beq.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 8002f86:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002f8a:	f43f af45 	beq.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 8002f8e:	2601      	movs	r6, #1
 8002f90:	4635      	mov	r5, r6
 8002f92:	e74e      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8002f94:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 8002f98:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8002f9c:	f43f af71 	beq.w	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8002fa0:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8002fa4:	f43f af6d 	beq.w	8002e82 <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8002fa8:	2601      	movs	r6, #1
 8002faa:	4635      	mov	r5, r6
 8002fac:	e776      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8002fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fb2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8002fb6:	d097      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8002fb8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002fbc:	d094      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8002fbe:	2601      	movs	r6, #1
 8002fc0:	4635      	mov	r5, r6
 8002fc2:	e79e      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8002fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fc8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8002fcc:	d0be      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8002fce:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8002fd2:	d0bb      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8002fd4:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002fd6:	0791      	lsls	r1, r2, #30
    switch (pPeriphClkInit->Spi6ClockSelection)
 8002fd8:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002fda:	d4c6      	bmi.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002fdc:	0757      	lsls	r7, r2, #29
 8002fde:	d50c      	bpl.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xfae>
    switch (pPeriphClkInit->FdcanClockSelection)
 8002fe0:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8002fe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe8:	d069      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1072>
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fee:	f000 8209 	beq.w	8003404 <HAL_RCCEx_PeriphCLKConfig+0x13b8>
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d068      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8002ff6:	2601      	movs	r6, #1
 8002ff8:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ffa:	06d1      	lsls	r1, r2, #27
 8002ffc:	d509      	bpl.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
    switch (pPeriphClkInit->UsbClockSelection)
 8002ffe:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003002:	2b20      	cmp	r3, #32
 8003004:	f000 839a 	beq.w	800373c <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8003008:	2b30      	cmp	r3, #48	; 0x30
 800300a:	d070      	beq.n	80030ee <HAL_RCCEx_PeriphCLKConfig+0x10a2>
 800300c:	2b10      	cmp	r3, #16
 800300e:	d069      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1098>
 8003010:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003012:	0713      	lsls	r3, r2, #28
 8003014:	d509      	bpl.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xfde>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8003016:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8003018:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 800301c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8003020:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003024:	430b      	orrs	r3, r1
 8003026:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 800302a:	4630      	mov	r0, r6
 800302c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_RCC_PLL3_DISABLE();
 8003030:	4d20      	ldr	r5, [pc, #128]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003038:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800303a:	f7fe f861 	bl	8001100 <HAL_GetTick>
 800303e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003040:	e005      	b.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x1002>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003042:	f7fe f85d 	bl	8001100 <HAL_GetTick>
 8003046:	1bc0      	subs	r0, r0, r7
 8003048:	2802      	cmp	r0, #2
 800304a:	f200 866b 	bhi.w	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800304e:	682b      	ldr	r3, [r5, #0]
 8003050:	0098      	lsls	r0, r3, #2
 8003052:	d4f6      	bmi.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0xff6>
 8003054:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003058:	f7fe ff9e 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 800305c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003060:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003062:	2d00      	cmp	r5, #0
 8003064:	f040 8567 	bne.w	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8003068:	4f12      	ldr	r7, [pc, #72]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800306a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 800306e:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8003072:	f021 0107 	bic.w	r1, r1, #7
 8003076:	4301      	orrs	r1, r0
 8003078:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 800307c:	f7ff ba6d 	b.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003080:	490c      	ldr	r1, [pc, #48]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8003082:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003088:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 800308a:	2d00      	cmp	r5, #0
 800308c:	f040 81d6 	bne.w	800343c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8003090:	4908      	ldr	r1, [pc, #32]	; (80030b4 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8003092:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8003096:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	4303      	orrs	r3, r0
 80030a0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80030a4:	e79a      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->AdcDacClockSelection)
 80030a6:	2601      	movs	r6, #1
 80030a8:	4635      	mov	r5, r6
 80030aa:	e4ef      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80030ac:	2601      	movs	r6, #1
 80030ae:	4635      	mov	r5, r6
 80030b0:	e56b      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 80030b2:	bf00      	nop
 80030b4:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 80030b8:	2601      	movs	r6, #1
 80030ba:	4635      	mov	r5, r6
 80030bc:	e533      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xada>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030be:	49b5      	ldr	r1, [pc, #724]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80030c0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80030c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c6:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	f040 81b9 	bne.w	8003440 <HAL_RCCEx_PeriphCLKConfig+0x13f4>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 80030ce:	49b1      	ldr	r1, [pc, #708]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80030d0:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 80030d4:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
 80030d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030dc:	4303      	orrs	r3, r0
 80030de:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 80030e2:	e78a      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xfae>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030e4:	49ab      	ldr	r1, [pc, #684]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80030e6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80030e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030ec:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 80030ee:	2d00      	cmp	r5, #0
 80030f0:	f040 81a8 	bne.w	8003444 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 80030f4:	49a7      	ldr	r1, [pc, #668]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80030f6:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 80030fa:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 80030fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003102:	4303      	orrs	r3, r0
 8003104:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003108:	e783      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 800310a:	4da2      	ldr	r5, [pc, #648]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003112:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003114:	f7fd fff4 	bl	8001100 <HAL_GetTick>
 8003118:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800311a:	e005      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800311c:	f7fd fff0 	bl	8001100 <HAL_GetTick>
 8003120:	1bc0      	subs	r0, r0, r7
 8003122:	2802      	cmp	r0, #2
 8003124:	f200 8646 	bhi.w	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003128:	682b      	ldr	r3, [r5, #0]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	d4f6      	bmi.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x10d0>
 800312e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003132:	f7fe ff31 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003136:	e9d4 3200 	ldrd	r3, r2, [r4]
 800313a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800313c:	2d00      	cmp	r5, #0
 800313e:	f040 8479 	bne.w	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x19e8>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8003142:	4f94      	ldr	r7, [pc, #592]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003144:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8003148:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800314c:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8003150:	4301      	orrs	r1, r0
 8003152:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8003156:	f7ff bac1 	b.w	80026dc <HAL_RCCEx_PeriphCLKConfig+0x690>
    if (ret == HAL_OK)
 800315a:	2d00      	cmp	r5, #0
 800315c:	f040 8327 	bne.w	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1762>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8003160:	4f8c      	ldr	r7, [pc, #560]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003162:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003166:	f020 0008 	bic.w	r0, r0, #8
 800316a:	4301      	orrs	r1, r0
 800316c:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003170:	0199      	lsls	r1, r3, #6
 8003172:	f57f ac98 	bpl.w	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8003176:	4f88      	ldr	r7, [pc, #544]	; (8003398 <HAL_RCCEx_PeriphCLKConfig+0x134c>)
 8003178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
    tickstart = HAL_GetTick();
 8003180:	f7fd ffbe 	bl	8001100 <HAL_GetTick>
 8003184:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003186:	e006      	b.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x114a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fd ffba 	bl	8001100 <HAL_GetTick>
 800318c:	eba0 0008 	sub.w	r0, r0, r8
 8003190:	2802      	cmp	r0, #2
 8003192:	f200 8549 	bhi.w	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	07db      	lsls	r3, r3, #31
 800319a:	d5f5      	bpl.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x113c>
    if (ret == HAL_OK)
 800319c:	2d00      	cmp	r5, #0
 800319e:	f040 863d 	bne.w	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031a2:	4f7c      	ldr	r7, [pc, #496]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 80031a4:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK)
 80031ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80031b0:	d02b      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x11be>
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 80031b2:	f402 7140 	and.w	r1, r2, #768	; 0x300
 80031b6:	4299      	cmp	r1, r3
 80031b8:	d029      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031ba:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 80031be:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031ca:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031d6:	f420 7340 	bic.w	r3, r0, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031da:	07c0      	lsls	r0, r0, #31
        RCC->BDCR = tmpregister;
 80031dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80031e0:	f140 8625 	bpl.w	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1de2>
        tickstart = HAL_GetTick();
 80031e4:	f7fd ff8c 	bl	8001100 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031e8:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80031ec:	4680      	mov	r8, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ee:	e006      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x11b2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f0:	f7fd ff86 	bl	8001100 <HAL_GetTick>
 80031f4:	eba0 0008 	sub.w	r0, r0, r8
 80031f8:	4548      	cmp	r0, r9
 80031fa:	f200 8515 	bhi.w	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031fe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003202:	079b      	lsls	r3, r3, #30
 8003204:	d5f4      	bpl.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x11a4>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003206:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 800320a:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800320e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003212:	f000 85f8 	beq.w	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1dba>
 8003216:	495f      	ldr	r1, [pc, #380]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003218:	69cb      	ldr	r3, [r1, #28]
 800321a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800321e:	61cb      	str	r3, [r1, #28]
 8003220:	4b5c      	ldr	r3, [pc, #368]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003222:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003226:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 800322a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 800322e:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 8003232:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8003236:	430a      	orrs	r2, r1
 8003238:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800323c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003240:	e431      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003242:	4854      	ldr	r0, [pc, #336]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003244:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003246:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800324a:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 800324c:	2d00      	cmp	r5, #0
 800324e:	f040 849a 	bne.w	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8003252:	4f50      	ldr	r7, [pc, #320]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003254:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8003258:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800325c:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8003260:	4301      	orrs	r1, r0
 8003262:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8003266:	e5ad      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003268:	484a      	ldr	r0, [pc, #296]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800326a:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800326c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003270:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8003272:	2d00      	cmp	r5, #0
 8003274:	f43f add3 	beq.w	8002e1e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003278:	462e      	mov	r6, r5
 800327a:	e5da      	b.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327c:	4845      	ldr	r0, [pc, #276]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800327e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003280:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8003284:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8003286:	2d00      	cmp	r5, #0
 8003288:	f43f aba4 	beq.w	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800328c:	462e      	mov	r6, r5
 800328e:	f7ff bbab 	b.w	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x99c>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003292:	4840      	ldr	r0, [pc, #256]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003294:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8003296:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800329a:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 800329c:	2d00      	cmp	r5, #0
 800329e:	f43f abd2 	beq.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80032a2:	462e      	mov	r6, r5
 80032a4:	f7ff bbd9 	b.w	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a8:	483a      	ldr	r0, [pc, #232]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80032aa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80032ac:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80032b0:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 80032b2:	e45d      	b.n	8002b70 <HAL_RCCEx_PeriphCLKConfig+0xb24>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032b4:	4837      	ldr	r0, [pc, #220]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80032b6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80032b8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80032bc:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 80032be:	e425      	b.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0xac0>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032c0:	4f34      	ldr	r7, [pc, #208]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80032c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80032c4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 80032c8:	62b8      	str	r0, [r7, #40]	; 0x28
    if (ret == HAL_OK)
 80032ca:	2d00      	cmp	r5, #0
 80032cc:	f040 8097 	bne.w	80033fe <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 80032d0:	e530      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  __HAL_RCC_PLL2_DISABLE();
 80032d2:	4d30      	ldr	r5, [pc, #192]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 80032d4:	682b      	ldr	r3, [r5, #0]
 80032d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032da:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80032dc:	f7fd ff10 	bl	8001100 <HAL_GetTick>
 80032e0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032e2:	e005      	b.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x12a4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80032e4:	f7fd ff0c 	bl	8001100 <HAL_GetTick>
 80032e8:	1bc0      	subs	r0, r0, r7
 80032ea:	2802      	cmp	r0, #2
 80032ec:	f200 8574 	bhi.w	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032f0:	682b      	ldr	r3, [r5, #0]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	d4f6      	bmi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x1298>
 80032f6:	f104 0008 	add.w	r0, r4, #8
 80032fa:	f7fe fdf3 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 80032fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003302:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003304:	2d00      	cmp	r5, #0
 8003306:	f43f abb7 	beq.w	8002a78 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800330a:	e38d      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
  __HAL_RCC_PLL3_DISABLE();
 800330c:	4d21      	ldr	r5, [pc, #132]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 800330e:	682b      	ldr	r3, [r5, #0]
 8003310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003314:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003316:	f7fd fef3 	bl	8001100 <HAL_GetTick>
 800331a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800331c:	e005      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x12de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800331e:	f7fd feef 	bl	8001100 <HAL_GetTick>
 8003322:	1bc0      	subs	r0, r0, r7
 8003324:	2802      	cmp	r0, #2
 8003326:	f200 853f 	bhi.w	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800332a:	682b      	ldr	r3, [r5, #0]
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	d4f6      	bmi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8003330:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003334:	f7fe fe30 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003338:	e9d4 3200 	ldrd	r3, r2, [r4]
 800333c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800333e:	2d00      	cmp	r5, #0
 8003340:	f43f ac61 	beq.w	8002c06 <HAL_RCCEx_PeriphCLKConfig+0xbba>
 8003344:	e37f      	b.n	8003a46 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
  __HAL_RCC_PLL3_DISABLE();
 8003346:	4d13      	ldr	r5, [pc, #76]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800334e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003350:	f7fd fed6 	bl	8001100 <HAL_GetTick>
 8003354:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003356:	e005      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x1318>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003358:	f7fd fed2 	bl	8001100 <HAL_GetTick>
 800335c:	1bc0      	subs	r0, r0, r7
 800335e:	2802      	cmp	r0, #2
 8003360:	f200 8534 	bhi.w	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x1d80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003364:	682b      	ldr	r3, [r5, #0]
 8003366:	0098      	lsls	r0, r3, #2
 8003368:	d4f6      	bmi.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 800336a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800336e:	f7fe fe13 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003372:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003376:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003378:	2d00      	cmp	r5, #0
 800337a:	f43f ac33 	beq.w	8002be4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800337e:	e356      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x19e2>
  __HAL_RCC_PLL3_DISABLE();
 8003380:	4d04      	ldr	r5, [pc, #16]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8003382:	682b      	ldr	r3, [r5, #0]
 8003384:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003388:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800338a:	f7fd feb9 	bl	8001100 <HAL_GetTick>
 800338e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003390:	e00a      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x135c>
 8003392:	bf00      	nop
 8003394:	44020c00 	.word	0x44020c00
 8003398:	44020800 	.word	0x44020800
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800339c:	f7fd feb0 	bl	8001100 <HAL_GetTick>
 80033a0:	1bc0      	subs	r0, r0, r7
 80033a2:	2802      	cmp	r0, #2
 80033a4:	f200 850c 	bhi.w	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033a8:	682b      	ldr	r3, [r5, #0]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	d4f6      	bmi.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x1350>
 80033ae:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80033b2:	f7fe fdf1 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80033ba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80033bc:	2d00      	cmp	r5, #0
 80033be:	f43f ac33 	beq.w	8002c28 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
 80033c2:	e33a      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x19ee>
  __HAL_RCC_PLL3_DISABLE();
 80033c4:	4db5      	ldr	r5, [pc, #724]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80033c6:	682b      	ldr	r3, [r5, #0]
 80033c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033cc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80033ce:	f7fd fe97 	bl	8001100 <HAL_GetTick>
 80033d2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033d4:	e005      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1396>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80033d6:	f7fd fe93 	bl	8001100 <HAL_GetTick>
 80033da:	1bc0      	subs	r0, r0, r7
 80033dc:	2802      	cmp	r0, #2
 80033de:	f200 84d7 	bhi.w	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x1d44>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80033e2:	682b      	ldr	r3, [r5, #0]
 80033e4:	0098      	lsls	r0, r3, #2
 80033e6:	d4f6      	bmi.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x138a>
 80033e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80033ec:	f7fe fdd4 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033f0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80033f4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80033f6:	2d00      	cmp	r5, #0
 80033f8:	f43f ac27 	beq.w	8002c4a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80033fc:	e320      	b.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x19f4>
 80033fe:	462e      	mov	r6, r5
 8003400:	f7ff bb61 	b.w	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
  __HAL_RCC_PLL2_DISABLE();
 8003404:	4da5      	ldr	r5, [pc, #660]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8003406:	682b      	ldr	r3, [r5, #0]
 8003408:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800340c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800340e:	f7fd fe77 	bl	8001100 <HAL_GetTick>
 8003412:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003414:	e005      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003416:	f7fd fe73 	bl	8001100 <HAL_GetTick>
 800341a:	1bc0      	subs	r0, r0, r7
 800341c:	2802      	cmp	r0, #2
 800341e:	f200 84e9 	bhi.w	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	0118      	lsls	r0, r3, #4
 8003426:	d4f6      	bmi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
 8003428:	f104 0008 	add.w	r0, r4, #8
 800342c:	f7fe fd5a 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
 8003430:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003432:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003434:	2d00      	cmp	r5, #0
 8003436:	f43f ae4a 	beq.w	80030ce <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800343a:	e001      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x13f4>
 800343c:	462e      	mov	r6, r5
 800343e:	e5cd      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8003440:	462e      	mov	r6, r5
 8003442:	e5da      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xfae>
 8003444:	462e      	mov	r6, r5
 8003446:	e5e4      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 8003448:	4d94      	ldr	r5, [pc, #592]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800344a:	682b      	ldr	r3, [r5, #0]
 800344c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003450:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003452:	f7fd fe55 	bl	8001100 <HAL_GetTick>
 8003456:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003458:	e005      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800345a:	f7fd fe51 	bl	8001100 <HAL_GetTick>
 800345e:	1bc0      	subs	r0, r0, r7
 8003460:	2802      	cmp	r0, #2
 8003462:	f200 8404 	bhi.w	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003466:	682b      	ldr	r3, [r5, #0]
 8003468:	0098      	lsls	r0, r3, #2
 800346a:	d4f6      	bmi.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x140e>
 800346c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003470:	f7fe fd92 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003474:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003478:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800347a:	2d00      	cmp	r5, #0
 800347c:	f43f a99a 	beq.w	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8003480:	e356      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
  __HAL_RCC_PLL3_DISABLE();
 8003482:	4d86      	ldr	r5, [pc, #536]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800348c:	f7fd fe38 	bl	8001100 <HAL_GetTick>
 8003490:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003492:	e005      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1454>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003494:	f7fd fe34 	bl	8001100 <HAL_GetTick>
 8003498:	1bc0      	subs	r0, r0, r7
 800349a:	2802      	cmp	r0, #2
 800349c:	f200 8430 	bhi.w	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80034a0:	682b      	ldr	r3, [r5, #0]
 80034a2:	0098      	lsls	r0, r3, #2
 80034a4:	d4f6      	bmi.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1448>
 80034a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80034aa:	f7fe fd75 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80034ae:	e9d4 3200 	ldrd	r3, r2, [r4]
 80034b2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80034b4:	2d00      	cmp	r5, #0
 80034b6:	f43f a9b2 	beq.w	800281e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80034ba:	e336      	b.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x1ade>
  __HAL_RCC_PLL3_DISABLE();
 80034bc:	4d77      	ldr	r5, [pc, #476]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80034be:	682b      	ldr	r3, [r5, #0]
 80034c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80034c6:	f7fd fe1b 	bl	8001100 <HAL_GetTick>
 80034ca:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80034cc:	e005      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x148e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80034ce:	f7fd fe17 	bl	8001100 <HAL_GetTick>
 80034d2:	1bc0      	subs	r0, r0, r7
 80034d4:	2802      	cmp	r0, #2
 80034d6:	f200 83f9 	bhi.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80034da:	682b      	ldr	r3, [r5, #0]
 80034dc:	0098      	lsls	r0, r3, #2
 80034de:	d4f6      	bmi.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1482>
 80034e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80034e4:	f7fe fd58 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80034e8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80034ec:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80034ee:	2d00      	cmp	r5, #0
 80034f0:	f43e aeb1 	beq.w	8002256 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80034f4:	e328      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1afc>
  __HAL_RCC_PLL3_DISABLE();
 80034f6:	4d69      	ldr	r5, [pc, #420]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80034f8:	682b      	ldr	r3, [r5, #0]
 80034fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fe:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003500:	f7fd fdfe 	bl	8001100 <HAL_GetTick>
 8003504:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x14c8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003508:	f7fd fdfa 	bl	8001100 <HAL_GetTick>
 800350c:	1bc0      	subs	r0, r0, r7
 800350e:	2802      	cmp	r0, #2
 8003510:	f200 83ee 	bhi.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003514:	682b      	ldr	r3, [r5, #0]
 8003516:	0098      	lsls	r0, r3, #2
 8003518:	d4f6      	bmi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x14bc>
 800351a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800351e:	f7fe fd3b 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
 8003522:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003524:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003526:	2d00      	cmp	r5, #0
 8003528:	f43f ace1 	beq.w	8002eee <HAL_RCCEx_PeriphCLKConfig+0xea2>
 800352c:	e2f4      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
  __HAL_RCC_PLL3_DISABLE();
 800352e:	4d5b      	ldr	r5, [pc, #364]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003536:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003538:	f7fd fde2 	bl	8001100 <HAL_GetTick>
 800353c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800353e:	e005      	b.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x1500>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003540:	f7fd fdde 	bl	8001100 <HAL_GetTick>
 8003544:	1bc0      	subs	r0, r0, r7
 8003546:	2802      	cmp	r0, #2
 8003548:	f200 83f2 	bhi.w	8003d30 <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800354c:	682b      	ldr	r3, [r5, #0]
 800354e:	009a      	lsls	r2, r3, #2
 8003550:	d4f6      	bmi.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x14f4>
 8003552:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003556:	f7fe fd1f 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 800355a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800355e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003560:	2d00      	cmp	r5, #0
 8003562:	f43f ac91 	beq.w	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8003566:	e2dd      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
  __HAL_RCC_PLL3_DISABLE();
 8003568:	4d4c      	ldr	r5, [pc, #304]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800356a:	682b      	ldr	r3, [r5, #0]
 800356c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003570:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003572:	f7fd fdc5 	bl	8001100 <HAL_GetTick>
 8003576:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003578:	e005      	b.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x153a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800357a:	f7fd fdc1 	bl	8001100 <HAL_GetTick>
 800357e:	1bc0      	subs	r0, r0, r7
 8003580:	2802      	cmp	r0, #2
 8003582:	f200 836e 	bhi.w	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003586:	682b      	ldr	r3, [r5, #0]
 8003588:	0098      	lsls	r0, r3, #2
 800358a:	d4f6      	bmi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x152e>
 800358c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003590:	f7fe fd02 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003594:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003598:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800359a:	2d00      	cmp	r5, #0
 800359c:	f43e ae91 	beq.w	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x276>
 80035a0:	e2cc      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1af0>
  __HAL_RCC_PLL3_DISABLE();
 80035a2:	4d3e      	ldr	r5, [pc, #248]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035aa:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80035ac:	f7fd fda8 	bl	8001100 <HAL_GetTick>
 80035b0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80035b2:	e005      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x1574>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80035b4:	f7fd fda4 	bl	8001100 <HAL_GetTick>
 80035b8:	1bc0      	subs	r0, r0, r7
 80035ba:	2802      	cmp	r0, #2
 80035bc:	f200 836e 	bhi.w	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80035c0:	682b      	ldr	r3, [r5, #0]
 80035c2:	0098      	lsls	r0, r3, #2
 80035c4:	d4f6      	bmi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1568>
 80035c6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80035ca:	f7fe fce5 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 80035ce:	e9d4 3200 	ldrd	r3, r2, [r4]
 80035d2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80035d4:	2d00      	cmp	r5, #0
 80035d6:	f43e af41 	beq.w	800245c <HAL_RCCEx_PeriphCLKConfig+0x410>
 80035da:	e291      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
  __HAL_RCC_PLL3_DISABLE();
 80035dc:	4d2f      	ldr	r5, [pc, #188]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80035de:	682b      	ldr	r3, [r5, #0]
 80035e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035e4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80035e6:	f7fd fd8b 	bl	8001100 <HAL_GetTick>
 80035ea:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80035ec:	e005      	b.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x15ae>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80035ee:	f7fd fd87 	bl	8001100 <HAL_GetTick>
 80035f2:	1bc0      	subs	r0, r0, r7
 80035f4:	2802      	cmp	r0, #2
 80035f6:	f200 8346 	bhi.w	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80035fa:	682b      	ldr	r3, [r5, #0]
 80035fc:	0098      	lsls	r0, r3, #2
 80035fe:	d4f6      	bmi.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x15a2>
 8003600:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003604:	f7fe fcc8 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003608:	e9d4 3200 	ldrd	r3, r2, [r4]
 800360c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800360e:	2d00      	cmp	r5, #0
 8003610:	f43f a93d 	beq.w	800288e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003614:	e277      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
  __HAL_RCC_PLL3_DISABLE();
 8003616:	4d21      	ldr	r5, [pc, #132]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8003618:	682b      	ldr	r3, [r5, #0]
 800361a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800361e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003620:	f7fd fd6e 	bl	8001100 <HAL_GetTick>
 8003624:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003626:	e005      	b.n	8003634 <HAL_RCCEx_PeriphCLKConfig+0x15e8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003628:	f7fd fd6a 	bl	8001100 <HAL_GetTick>
 800362c:	1bc0      	subs	r0, r0, r7
 800362e:	2802      	cmp	r0, #2
 8003630:	f200 8323 	bhi.w	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003634:	682b      	ldr	r3, [r5, #0]
 8003636:	0098      	lsls	r0, r3, #2
 8003638:	d4f6      	bmi.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
 800363a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800363e:	f7fe fcab 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003642:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003646:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003648:	2d00      	cmp	r5, #0
 800364a:	f43e aea0 	beq.w	800238e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800364e:	e278      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1af6>
  __HAL_RCC_PLL3_DISABLE();
 8003650:	4d12      	ldr	r5, [pc, #72]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8003652:	682b      	ldr	r3, [r5, #0]
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800365a:	f7fd fd51 	bl	8001100 <HAL_GetTick>
 800365e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003660:	e005      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1622>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003662:	f7fd fd4d 	bl	8001100 <HAL_GetTick>
 8003666:	1bc0      	subs	r0, r0, r7
 8003668:	2802      	cmp	r0, #2
 800366a:	f200 8329 	bhi.w	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800366e:	682b      	ldr	r3, [r5, #0]
 8003670:	0098      	lsls	r0, r3, #2
 8003672:	d4f6      	bmi.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1616>
 8003674:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003678:	f7fe fc8e 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800367c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003680:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003682:	2d00      	cmp	r5, #0
 8003684:	f43e ad81 	beq.w	800218a <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8003688:	e237      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x1aae>
  __HAL_RCC_PLL3_DISABLE();
 800368a:	4d04      	ldr	r5, [pc, #16]	; (800369c <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800368c:	682b      	ldr	r3, [r5, #0]
 800368e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003692:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003694:	f7fd fd34 	bl	8001100 <HAL_GetTick>
 8003698:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800369a:	e007      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1660>
 800369c:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80036a0:	f7fd fd2e 	bl	8001100 <HAL_GetTick>
 80036a4:	1bc0      	subs	r0, r0, r7
 80036a6:	2802      	cmp	r0, #2
 80036a8:	f200 82d5 	bhi.w	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036ac:	682b      	ldr	r3, [r5, #0]
 80036ae:	0098      	lsls	r0, r3, #2
 80036b0:	d4f6      	bmi.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1654>
 80036b2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80036b6:	f7fe fc6f 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80036ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80036be:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80036c0:	2d00      	cmp	r5, #0
 80036c2:	f43f a919 	beq.w	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 80036c6:	e209      	b.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x1a90>
  __HAL_RCC_PLL3_DISABLE();
 80036c8:	4db0      	ldr	r5, [pc, #704]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80036ca:	682b      	ldr	r3, [r5, #0]
 80036cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036d0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80036d2:	f7fd fd15 	bl	8001100 <HAL_GetTick>
 80036d6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036d8:	e005      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80036da:	f7fd fd11 	bl	8001100 <HAL_GetTick>
 80036de:	1bc0      	subs	r0, r0, r7
 80036e0:	2802      	cmp	r0, #2
 80036e2:	f200 82e7 	bhi.w	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	0098      	lsls	r0, r3, #2
 80036ea:	d4f6      	bmi.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x168e>
 80036ec:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80036f0:	f7fe fc52 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 80036f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80036f8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80036fa:	2d00      	cmp	r5, #0
 80036fc:	f43e ae7a 	beq.w	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 8003700:	e204      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
  __HAL_RCC_PLL3_DISABLE();
 8003702:	4da2      	ldr	r5, [pc, #648]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8003704:	682b      	ldr	r3, [r5, #0]
 8003706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800370c:	f7fd fcf8 	bl	8001100 <HAL_GetTick>
 8003710:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003712:	e005      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x16d4>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003714:	f7fd fcf4 	bl	8001100 <HAL_GetTick>
 8003718:	1bc0      	subs	r0, r0, r7
 800371a:	2802      	cmp	r0, #2
 800371c:	f200 82e2 	bhi.w	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003720:	682b      	ldr	r3, [r5, #0]
 8003722:	0098      	lsls	r0, r3, #2
 8003724:	d4f6      	bmi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x16c8>
 8003726:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800372a:	f7fe fc35 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800372e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003732:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003734:	2d00      	cmp	r5, #0
 8003736:	f43f a808 	beq.w	800274a <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 800373a:	e1d5      	b.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
  __HAL_RCC_PLL3_DISABLE();
 800373c:	4d93      	ldr	r5, [pc, #588]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800373e:	682b      	ldr	r3, [r5, #0]
 8003740:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003744:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003746:	f7fd fcdb 	bl	8001100 <HAL_GetTick>
 800374a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800374c:	e005      	b.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x170e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800374e:	f7fd fcd7 	bl	8001100 <HAL_GetTick>
 8003752:	1bc0      	subs	r0, r0, r7
 8003754:	2802      	cmp	r0, #2
 8003756:	f200 8352 	bhi.w	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800375a:	682b      	ldr	r3, [r5, #0]
 800375c:	009a      	lsls	r2, r3, #2
 800375e:	d4f6      	bmi.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x1702>
 8003760:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003764:	f7fe fc18 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
 8003768:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800376a:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800376c:	2d00      	cmp	r5, #0
 800376e:	f43f acc1 	beq.w	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 8003772:	e667      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
  __HAL_RCC_PLL3_DISABLE();
 8003774:	4d85      	ldr	r5, [pc, #532]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8003776:	682b      	ldr	r3, [r5, #0]
 8003778:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800377c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800377e:	f7fd fcbf 	bl	8001100 <HAL_GetTick>
 8003782:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003784:	e005      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1746>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003786:	f7fd fcbb 	bl	8001100 <HAL_GetTick>
 800378a:	1bc0      	subs	r0, r0, r7
 800378c:	2802      	cmp	r0, #2
 800378e:	f200 82c3 	bhi.w	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003792:	682b      	ldr	r3, [r5, #0]
 8003794:	0098      	lsls	r0, r3, #2
 8003796:	d4f6      	bmi.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x173a>
 8003798:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800379c:	f7fe fbfc 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037a0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80037a4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80037a6:	2d00      	cmp	r5, #0
 80037a8:	f43f a8db 	beq.w	8002962 <HAL_RCCEx_PeriphCLKConfig+0x916>
 80037ac:	e19f      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
 80037ae:	462e      	mov	r6, r5
 80037b0:	f7ff b976 	b.w	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xa54>
  __HAL_RCC_PLL3_DISABLE();
 80037b4:	4d75      	ldr	r5, [pc, #468]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80037b6:	682b      	ldr	r3, [r5, #0]
 80037b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037bc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80037be:	f7fd fc9f 	bl	8001100 <HAL_GetTick>
 80037c2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037c4:	e005      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x1786>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80037c6:	f7fd fc9b 	bl	8001100 <HAL_GetTick>
 80037ca:	1bc0      	subs	r0, r0, r7
 80037cc:	2802      	cmp	r0, #2
 80037ce:	f200 8283 	bhi.w	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037d2:	682b      	ldr	r3, [r5, #0]
 80037d4:	0098      	lsls	r0, r3, #2
 80037d6:	d4f6      	bmi.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x177a>
 80037d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80037dc:	f7fe fbdc 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80037e4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80037e6:	2d00      	cmp	r5, #0
 80037e8:	f43e aee3 	beq.w	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80037ec:	e197      	b.n	8003b1e <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
  __HAL_RCC_PLL3_DISABLE();
 80037ee:	4d67      	ldr	r5, [pc, #412]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80037f0:	682b      	ldr	r3, [r5, #0]
 80037f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037f6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80037f8:	f7fd fc82 	bl	8001100 <HAL_GetTick>
 80037fc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80037fe:	e005      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x17c0>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003800:	f7fd fc7e 	bl	8001100 <HAL_GetTick>
 8003804:	1bc0      	subs	r0, r0, r7
 8003806:	2802      	cmp	r0, #2
 8003808:	f200 824e 	bhi.w	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800380c:	682b      	ldr	r3, [r5, #0]
 800380e:	0098      	lsls	r0, r3, #2
 8003810:	d4f6      	bmi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x17b4>
 8003812:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003816:	f7fe fbbf 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800381a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800381e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003820:	2d00      	cmp	r5, #0
 8003822:	f43e ad81 	beq.w	8002328 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8003826:	e174      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
  __HAL_RCC_PLL3_DISABLE();
 8003828:	4d58      	ldr	r5, [pc, #352]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800382a:	682b      	ldr	r3, [r5, #0]
 800382c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003830:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003832:	f7fd fc65 	bl	8001100 <HAL_GetTick>
 8003836:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003838:	e005      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x17fa>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800383a:	f7fd fc61 	bl	8001100 <HAL_GetTick>
 800383e:	1bc0      	subs	r0, r0, r7
 8003840:	2802      	cmp	r0, #2
 8003842:	f200 8202 	bhi.w	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003846:	682b      	ldr	r3, [r5, #0]
 8003848:	0098      	lsls	r0, r3, #2
 800384a:	d4f6      	bmi.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x17ee>
 800384c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003850:	f7fe fba2 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003854:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003858:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800385a:	2d00      	cmp	r5, #0
 800385c:	f43e aede 	beq.w	800261c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003860:	e148      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
  __HAL_RCC_PLL3_DISABLE();
 8003862:	4d4a      	ldr	r5, [pc, #296]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8003864:	682b      	ldr	r3, [r5, #0]
 8003866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800386a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800386c:	f7fd fc48 	bl	8001100 <HAL_GetTick>
 8003870:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003872:	e005      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x1834>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003874:	f7fd fc44 	bl	8001100 <HAL_GetTick>
 8003878:	1bc0      	subs	r0, r0, r7
 800387a:	2802      	cmp	r0, #2
 800387c:	f200 8209 	bhi.w	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003880:	682b      	ldr	r3, [r5, #0]
 8003882:	0098      	lsls	r0, r3, #2
 8003884:	d4f6      	bmi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x1828>
 8003886:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800388a:	f7fe fb85 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
 800388e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003890:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003892:	2d00      	cmp	r5, #0
 8003894:	f43f ab5d 	beq.w	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xf06>
 8003898:	e123      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x1a96>
  __HAL_RCC_PLL3_DISABLE();
 800389a:	4d3c      	ldr	r5, [pc, #240]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800389c:	682b      	ldr	r3, [r5, #0]
 800389e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038a2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80038a4:	f7fd fc2c 	bl	8001100 <HAL_GetTick>
 80038a8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038aa:	e005      	b.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x186c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80038ac:	f7fd fc28 	bl	8001100 <HAL_GetTick>
 80038b0:	1bc0      	subs	r0, r0, r7
 80038b2:	2802      	cmp	r0, #2
 80038b4:	f200 81c3 	bhi.w	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80038b8:	682b      	ldr	r3, [r5, #0]
 80038ba:	0098      	lsls	r0, r3, #2
 80038bc:	d4f6      	bmi.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x1860>
 80038be:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80038c2:	f7fe fb69 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80038c6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80038ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80038cc:	2d00      	cmp	r5, #0
 80038ce:	f43e ac8f 	beq.w	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80038d2:	e100      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
  __HAL_RCC_PLL2_DISABLE();
 80038d4:	4d2d      	ldr	r5, [pc, #180]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80038d6:	682b      	ldr	r3, [r5, #0]
 80038d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038dc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80038de:	f7fd fc0f 	bl	8001100 <HAL_GetTick>
 80038e2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038e4:	e005      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x18a6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80038e6:	f7fd fc0b 	bl	8001100 <HAL_GetTick>
 80038ea:	1bc0      	subs	r0, r0, r7
 80038ec:	2802      	cmp	r0, #2
 80038ee:	f200 827c 	bhi.w	8003dea <HAL_RCCEx_PeriphCLKConfig+0x1d9e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80038f2:	682b      	ldr	r3, [r5, #0]
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	d4f6      	bmi.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x189a>
 80038f8:	f104 0008 	add.w	r0, r4, #8
 80038fc:	f7fe faf2 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
 8003900:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003902:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8003904:	2d00      	cmp	r5, #0
 8003906:	f43f abc3 	beq.w	8003090 <HAL_RCCEx_PeriphCLKConfig+0x1044>
 800390a:	e597      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x13f0>
  __HAL_RCC_PLL3_DISABLE();
 800390c:	4d1f      	ldr	r5, [pc, #124]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800390e:	682b      	ldr	r3, [r5, #0]
 8003910:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003914:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003916:	f7fd fbf3 	bl	8001100 <HAL_GetTick>
 800391a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800391c:	e005      	b.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x18de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800391e:	f7fd fbef 	bl	8001100 <HAL_GetTick>
 8003922:	1bc0      	subs	r0, r0, r7
 8003924:	2802      	cmp	r0, #2
 8003926:	f200 820f 	bhi.w	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	d4f6      	bmi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x18d2>
 8003930:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003934:	f7fe fb30 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003938:	e9d4 3200 	ldrd	r3, r2, [r4]
 800393c:	4605      	mov	r5, r0
 800393e:	f7ff ba6b 	b.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
  __HAL_RCC_PLL3_DISABLE();
 8003942:	4d12      	ldr	r5, [pc, #72]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8003944:	682b      	ldr	r3, [r5, #0]
 8003946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800394a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800394c:	f7fd fbd8 	bl	8001100 <HAL_GetTick>
 8003950:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003952:	e005      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1914>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003954:	f7fd fbd4 	bl	8001100 <HAL_GetTick>
 8003958:	1bc0      	subs	r0, r0, r7
 800395a:	2802      	cmp	r0, #2
 800395c:	f200 81ee 	bhi.w	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003960:	682b      	ldr	r3, [r5, #0]
 8003962:	0098      	lsls	r0, r3, #2
 8003964:	d4f6      	bmi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x1908>
 8003966:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800396a:	f7fe fb15 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800396e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003972:	4605      	mov	r5, r0
 8003974:	f7ff b864 	b.w	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  __HAL_RCC_PLL3_DISABLE();
 8003978:	4d04      	ldr	r5, [pc, #16]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800397a:	682b      	ldr	r3, [r5, #0]
 800397c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003980:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003982:	f7fd fbbd 	bl	8001100 <HAL_GetTick>
 8003986:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003988:	e008      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x1950>
 800398a:	bf00      	nop
 800398c:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003990:	f7fd fbb6 	bl	8001100 <HAL_GetTick>
 8003994:	1bc0      	subs	r0, r0, r7
 8003996:	2802      	cmp	r0, #2
 8003998:	f200 81dc 	bhi.w	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800399c:	682b      	ldr	r3, [r5, #0]
 800399e:	0098      	lsls	r0, r3, #2
 80039a0:	d4f6      	bmi.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1944>
 80039a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80039a6:	f7fe faf7 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80039aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80039ae:	4605      	mov	r5, r0
 80039b0:	f7ff b80d 	b.w	80029ce <HAL_RCCEx_PeriphCLKConfig+0x982>
  __HAL_RCC_PLL3_DISABLE();
 80039b4:	4dd1      	ldr	r5, [pc, #836]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 80039b6:	682b      	ldr	r3, [r5, #0]
 80039b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039bc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80039be:	f7fd fb9f 	bl	8001100 <HAL_GetTick>
 80039c2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039c4:	e005      	b.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1986>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80039c6:	f7fd fb9b 	bl	8001100 <HAL_GetTick>
 80039ca:	1bc0      	subs	r0, r0, r7
 80039cc:	2802      	cmp	r0, #2
 80039ce:	f200 81c7 	bhi.w	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80039d2:	682b      	ldr	r3, [r5, #0]
 80039d4:	0098      	lsls	r0, r3, #2
 80039d6:	d4f6      	bmi.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x197a>
 80039d8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80039dc:	f7fe fadc 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80039e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80039e4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80039e6:	2d00      	cmp	r5, #0
 80039e8:	f43f a9b5 	beq.w	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 80039ec:	462e      	mov	r6, r5
 80039ee:	f7ff b9bc 	b.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  __HAL_RCC_PLL2_DISABLE();
 80039f2:	4dc2      	ldr	r5, [pc, #776]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 80039f4:	682b      	ldr	r3, [r5, #0]
 80039f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039fa:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80039fc:	f7fd fb80 	bl	8001100 <HAL_GetTick>
 8003a00:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a02:	e005      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x19c4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a04:	f7fd fb7c 	bl	8001100 <HAL_GetTick>
 8003a08:	1bc0      	subs	r0, r0, r7
 8003a0a:	2802      	cmp	r0, #2
 8003a0c:	f200 81a8 	bhi.w	8003d60 <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	d4f6      	bmi.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
 8003a16:	f104 0008 	add.w	r0, r4, #8
 8003a1a:	f7fe fa63 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003a1e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003a22:	4605      	mov	r5, r0
 8003a24:	f7ff b994 	b.w	8002d50 <HAL_RCCEx_PeriphCLKConfig+0xd04>
 8003a28:	462e      	mov	r6, r5
 8003a2a:	f7ff b82f 	b.w	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003a2e:	462e      	mov	r6, r5
 8003a30:	f7fe be46 	b.w	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x674>
 8003a34:	462e      	mov	r6, r5
 8003a36:	f7fe be51 	b.w	80026dc <HAL_RCCEx_PeriphCLKConfig+0x690>
 8003a3a:	462e      	mov	r6, r5
 8003a3c:	f7fe be0a 	b.w	8002654 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003a40:	462e      	mov	r6, r5
 8003a42:	f7fe be19 	b.w	8002678 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 8003a46:	462e      	mov	r6, r5
 8003a48:	f7fe be28 	b.w	800269c <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8003a4c:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	f040 81c8 	bne.w	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x1d98>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8003a54:	4fa9      	ldr	r7, [pc, #676]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8003a56:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003a58:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8003a5c:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8003a60:	4301      	orrs	r1, r0
 8003a62:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8003a66:	f7fe bb68 	b.w	800213a <HAL_RCCEx_PeriphCLKConfig+0xee>
  __HAL_RCC_PLL2_DISABLE();
 8003a6a:	4da4      	ldr	r5, [pc, #656]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8003a6c:	682b      	ldr	r3, [r5, #0]
 8003a6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a72:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003a74:	f7fd fb44 	bl	8001100 <HAL_GetTick>
 8003a78:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a7a:	e005      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x1a3c>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003a7c:	f7fd fb40 	bl	8001100 <HAL_GetTick>
 8003a80:	1bc0      	subs	r0, r0, r7
 8003a82:	2802      	cmp	r0, #2
 8003a84:	f200 814e 	bhi.w	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003a88:	682b      	ldr	r3, [r5, #0]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	d4f6      	bmi.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x1a30>
 8003a8e:	f104 0008 	add.w	r0, r4, #8
 8003a92:	f7fe fa27 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003a96:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003a9a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003a9c:	2d00      	cmp	r5, #0
 8003a9e:	f43f aae3 	beq.w	8003068 <HAL_RCCEx_PeriphCLKConfig+0x101c>
 8003aa2:	e048      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
  __HAL_RCC_PLL2_DISABLE();
 8003aa4:	4d95      	ldr	r5, [pc, #596]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8003aa6:	682b      	ldr	r3, [r5, #0]
 8003aa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003aac:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003aae:	f7fd fb27 	bl	8001100 <HAL_GetTick>
 8003ab2:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ab4:	e005      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1a76>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003ab6:	f7fd fb23 	bl	8001100 <HAL_GetTick>
 8003aba:	1b80      	subs	r0, r0, r6
 8003abc:	2802      	cmp	r0, #2
 8003abe:	f200 80b9 	bhi.w	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003ac2:	682b      	ldr	r3, [r5, #0]
 8003ac4:	011f      	lsls	r7, r3, #4
 8003ac6:	d4f6      	bmi.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1a6a>
 8003ac8:	f104 0008 	add.w	r0, r4, #8
 8003acc:	f7fe fa0a 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
 8003ad0:	4606      	mov	r6, r0
 8003ad2:	f7fe baf1 	b.w	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003ad6:	462e      	mov	r6, r5
 8003ad8:	f7fe bb93 	b.w	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003adc:	462e      	mov	r6, r5
 8003ade:	f7fe bf15 	b.w	800290c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8003ae2:	462e      	mov	r6, r5
 8003ae4:	f7ff ba3f 	b.w	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
 8003ae8:	462e      	mov	r6, r5
 8003aea:	f7fe be38 	b.w	800275e <HAL_RCCEx_PeriphCLKConfig+0x712>
 8003aee:	462e      	mov	r6, r5
 8003af0:	f7fe bf41 	b.w	8002976 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8003af4:	462e      	mov	r6, r5
 8003af6:	f7fe bd9b 	b.w	8002630 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8003afa:	462e      	mov	r6, r5
 8003afc:	f7fe bb4e 	b.w	800219c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003b00:	462e      	mov	r6, r5
 8003b02:	f7fe bcb5 	b.w	8002470 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8003b06:	462e      	mov	r6, r5
 8003b08:	f7fe becb 	b.w	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x856>
 8003b0c:	462e      	mov	r6, r5
 8003b0e:	f7fe bc7a 	b.w	8002406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003b12:	462e      	mov	r6, r5
 8003b14:	f7fe bc11 	b.w	800233a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8003b18:	462e      	mov	r6, r5
 8003b1a:	f7ff b9f2 	b.w	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8003b1e:	462e      	mov	r6, r5
 8003b20:	f7fe bd51 	b.w	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003b24:	462e      	mov	r6, r5
 8003b26:	f7ff b9b9 	b.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003b2a:	462e      	mov	r6, r5
 8003b2c:	f7fe be81 	b.w	8002832 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 8003b30:	462e      	mov	r6, r5
 8003b32:	f7fe be49 	b.w	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 8003b36:	462e      	mov	r6, r5
 8003b38:	f7fe bd0f 	b.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x50e>
 8003b3c:	462e      	mov	r6, r5
 8003b3e:	f7fe bbc9 	b.w	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003b42:	462e      	mov	r6, r5
 8003b44:	f7fe bc2c 	b.w	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003b48:	462e      	mov	r6, r5
 8003b4a:	f7fe bb8d 	b.w	8002268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  __HAL_RCC_PLL3_DISABLE();
 8003b4e:	4d6b      	ldr	r5, [pc, #428]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b56:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003b58:	f7fd fad2 	bl	8001100 <HAL_GetTick>
 8003b5c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b5e:	e005      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x1b20>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003b60:	f7fd face 	bl	8001100 <HAL_GetTick>
 8003b64:	1bc0      	subs	r0, r0, r7
 8003b66:	2802      	cmp	r0, #2
 8003b68:	f200 8100 	bhi.w	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	0098      	lsls	r0, r3, #2
 8003b70:	d4f6      	bmi.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b14>
 8003b72:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003b76:	f7fe fa0f 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003b7a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003b7e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8003b80:	2d00      	cmp	r5, #0
 8003b82:	f43f ab66 	beq.w	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1206>
 8003b86:	462e      	mov	r6, r5
 8003b88:	f7ff b91c 	b.w	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  __HAL_RCC_PLL2_DISABLE();
 8003b8c:	4d5b      	ldr	r5, [pc, #364]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8003b8e:	682b      	ldr	r3, [r5, #0]
 8003b90:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b94:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003b96:	f7fd fab3 	bl	8001100 <HAL_GetTick>
 8003b9a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003b9c:	e005      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1b5e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003b9e:	f7fd faaf 	bl	8001100 <HAL_GetTick>
 8003ba2:	1bc0      	subs	r0, r0, r7
 8003ba4:	2802      	cmp	r0, #2
 8003ba6:	f200 80e1 	bhi.w	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003baa:	682b      	ldr	r3, [r5, #0]
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	d4f6      	bmi.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1b52>
 8003bb0:	f104 0008 	add.w	r0, r4, #8
 8003bb4:	f7fe f996 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003bb8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003bbc:	4605      	mov	r5, r0
 8003bbe:	f7ff bb45 	b.w	800324c <HAL_RCCEx_PeriphCLKConfig+0x1200>
  __HAL_RCC_PLL2_DISABLE();
 8003bc2:	4d4e      	ldr	r5, [pc, #312]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8003bc4:	682b      	ldr	r3, [r5, #0]
 8003bc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bca:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003bcc:	f7fd fa98 	bl	8001100 <HAL_GetTick>
 8003bd0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bd2:	e005      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x1b94>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003bd4:	f7fd fa94 	bl	8001100 <HAL_GetTick>
 8003bd8:	1bc0      	subs	r0, r0, r7
 8003bda:	2802      	cmp	r0, #2
 8003bdc:	f200 8096 	bhi.w	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	d4f6      	bmi.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8003be6:	f104 0008 	add.w	r0, r4, #8
 8003bea:	f7fe f97b 	bl	8001ee4 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bee:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	e72b      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1a02>
  __HAL_RCC_PLL3_DISABLE();
 8003bf6:	4d41      	ldr	r5, [pc, #260]	; (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8003bf8:	682b      	ldr	r3, [r5, #0]
 8003bfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bfe:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8003c00:	f7fd fa7e 	bl	8001100 <HAL_GetTick>
 8003c04:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c06:	e004      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x1bc6>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003c08:	f7fd fa7a 	bl	8001100 <HAL_GetTick>
 8003c0c:	1bc0      	subs	r0, r0, r7
 8003c0e:	2802      	cmp	r0, #2
 8003c10:	d87c      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003c12:	682b      	ldr	r3, [r5, #0]
 8003c14:	0098      	lsls	r0, r3, #2
 8003c16:	d4f7      	bmi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x1bbc>
 8003c18:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8003c1c:	f7fe f9bc 	bl	8001f98 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c20:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c24:	4605      	mov	r5, r0
 8003c26:	e712      	b.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1a02>
            ret = HAL_TIMEOUT;
 8003c28:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003c2a:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 8003c2e:	4635      	mov	r5, r6
 8003c30:	f7fe bf39 	b.w	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c34:	2603      	movs	r6, #3
 8003c36:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c3a:	f7fe ba4c 	b.w	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c3e:	2603      	movs	r6, #3
 8003c40:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c44:	4635      	mov	r5, r6
 8003c46:	f7fe badc 	b.w	8002202 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c4a:	2603      	movs	r6, #3
 8003c4c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c50:	4635      	mov	r5, r6
 8003c52:	f7fe bced 	b.w	8002630 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8003c56:	2603      	movs	r6, #3
 8003c58:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c5c:	4635      	mov	r5, r6
 8003c5e:	f7fe be55 	b.w	800290c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c62:	2603      	movs	r6, #3
 8003c64:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c68:	4635      	mov	r5, r6
 8003c6a:	f7fe bb33 	b.w	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x288>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8003c6e:	2603      	movs	r6, #3
 8003c70:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c74:	4635      	mov	r5, r6
 8003c76:	f7fe bda7 	b.w	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8003c7a:	2603      	movs	r6, #3
 8003c7c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c80:	4635      	mov	r5, r6
 8003c82:	f7fe bb8d 	b.w	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x354>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8003c86:	2603      	movs	r6, #3
 8003c88:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003c8c:	4635      	mov	r5, r6
 8003c8e:	f7fe be08 	b.w	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c92:	2603      	movs	r6, #3
 8003c94:	6862      	ldr	r2, [r4, #4]
 8003c96:	4635      	mov	r5, r6
 8003c98:	f7ff b965 	b.w	8002f66 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8003c9c:	2603      	movs	r6, #3
 8003c9e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003ca2:	4635      	mov	r5, r6
 8003ca4:	f7fe bbe4 	b.w	8002470 <HAL_RCCEx_PeriphCLKConfig+0x424>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ca8:	2603      	movs	r6, #3
 8003caa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003cae:	4635      	mov	r5, r6
 8003cb0:	f7fe bb43 	b.w	800233a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8003cb4:	2603      	movs	r6, #3
 8003cb6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003cba:	4635      	mov	r5, r6
 8003cbc:	f7fe bba3 	b.w	8002406 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003cc0:	2603      	movs	r6, #3
 8003cc2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003cc6:	4635      	mov	r5, r6
 8003cc8:	f7fe ba68 	b.w	800219c <HAL_RCCEx_PeriphCLKConfig+0x150>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ccc:	2603      	movs	r6, #3
 8003cce:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003cd2:	4635      	mov	r5, r6
 8003cd4:	f7fe bac8 	b.w	8002268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cd8:	2603      	movs	r6, #3
 8003cda:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003cde:	4635      	mov	r5, r6
 8003ce0:	f7fe bc71 	b.w	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ce4:	2603      	movs	r6, #3
 8003ce6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003cea:	4635      	mov	r5, r6
 8003cec:	f7fe bd37 	b.w	800275e <HAL_RCCEx_PeriphCLKConfig+0x712>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003cf0:	2603      	movs	r6, #3
 8003cf2:	6862      	ldr	r2, [r4, #4]
 8003cf4:	4635      	mov	r5, r6
 8003cf6:	f7ff b904 	b.w	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8003cfa:	bf00      	nop
 8003cfc:	44020c00 	.word	0x44020c00
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8003d00:	2603      	movs	r6, #3
 8003d02:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d06:	4635      	mov	r5, r6
 8003d08:	f7fe bd93 	b.w	8002832 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d0c:	2603      	movs	r6, #3
 8003d0e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d12:	4635      	mov	r5, r6
 8003d14:	f7fe ba11 	b.w	800213a <HAL_RCCEx_PeriphCLKConfig+0xee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d18:	2603      	movs	r6, #3
 8003d1a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d1e:	4635      	mov	r5, r6
 8003d20:	f7fe be29 	b.w	8002976 <HAL_RCCEx_PeriphCLKConfig+0x92a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8003d24:	2603      	movs	r6, #3
 8003d26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d2a:	4635      	mov	r5, r6
 8003d2c:	f7fe bc15 	b.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8003d30:	2603      	movs	r6, #3
 8003d32:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d36:	4635      	mov	r5, r6
 8003d38:	f7ff b8b0 	b.w	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xe50>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8003d3c:	2603      	movs	r6, #3
 8003d3e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d42:	4635      	mov	r5, r6
 8003d44:	f7fe be89 	b.w	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xa0e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 8003d48:	2603      	movs	r6, #3
 8003d4a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d4e:	4635      	mov	r5, r6
 8003d50:	f7ff b86f 	b.w	8002e32 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8003d54:	2603      	movs	r6, #3
 8003d56:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d5a:	4635      	mov	r5, r6
 8003d5c:	f7fe be44 	b.w	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x99c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003d60:	2603      	movs	r6, #3
 8003d62:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d66:	4635      	mov	r5, r6
 8003d68:	f7fe bfff 	b.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003d6c:	2603      	movs	r6, #3
 8003d6e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003d72:	4635      	mov	r5, r6
 8003d74:	f7ff b826 	b.w	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 8003d78:	462e      	mov	r6, r5
 8003d7a:	f7fe bf06 	b.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 8003d7e:	462e      	mov	r6, r5
 8003d80:	f7fe bed1 	b.w	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8003d84:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003d86:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8003d8a:	4635      	mov	r5, r6
 8003d8c:	f7fe becb 	b.w	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8003d90:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d92:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8003d96:	4635      	mov	r5, r6
 8003d98:	f7fe bc6e 	b.w	8002678 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      return HAL_TIMEOUT;
 8003d9c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8003d9e:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8003da2:	4635      	mov	r5, r6
 8003da4:	f7fe bef1 	b.w	8002b8a <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      return HAL_TIMEOUT;
 8003da8:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003daa:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8003dae:	4635      	mov	r5, r6
 8003db0:	f7fe bc74 	b.w	800269c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8003db4:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003db6:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8003dba:	4635      	mov	r5, r6
 8003dbc:	f7fe bc8e 	b.w	80026dc <HAL_RCCEx_PeriphCLKConfig+0x690>
 8003dc0:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dc2:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8003dc6:	4635      	mov	r5, r6
 8003dc8:	f7fe bc44 	b.w	8002654 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003dcc:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8003dce:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8003dd2:	4635      	mov	r5, r6
 8003dd4:	f7fe bc74 	b.w	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x674>
      return HAL_TIMEOUT;
 8003dd8:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8003dda:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8003dde:	4635      	mov	r5, r6
 8003de0:	f7fe be54 	b.w	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8003de4:	462e      	mov	r6, r5
 8003de6:	f7fe b9a8 	b.w	800213a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003dea:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003dec:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 8003dee:	4635      	mov	r5, r6
 8003df0:	f7ff b8f4 	b.w	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8003df4:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003df6:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 8003df8:	4635      	mov	r5, r6
 8003dfa:	f7ff b8fe 	b.w	8002ffa <HAL_RCCEx_PeriphCLKConfig+0xfae>
      return HAL_TIMEOUT;
 8003dfe:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e00:	6862      	ldr	r2, [r4, #4]
 8003e02:	f7ff b906 	b.w	8003012 <HAL_RCCEx_PeriphCLKConfig+0xfc6>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003e06:	4813      	ldr	r0, [pc, #76]	; (8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
 8003e08:	4b13      	ldr	r3, [pc, #76]	; (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
 8003e0a:	69c1      	ldr	r1, [r0, #28]
 8003e0c:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8003e10:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8003e14:	430b      	orrs	r3, r1
 8003e16:	61c3      	str	r3, [r0, #28]
 8003e18:	f7ff ba02 	b.w	8003220 <HAL_RCCEx_PeriphCLKConfig+0x11d4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e1c:	462e      	mov	r6, r5
 8003e1e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003e22:	f7fe be40 	b.w	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e26:	e9d4 3200 	ldrd	r3, r2, [r4]
 8003e2a:	f7fe b954 	b.w	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8003e2e:	460b      	mov	r3, r1
 8003e30:	f7ff b9ed 	b.w	800320e <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8003e34:	2601      	movs	r6, #1
 8003e36:	f7fe b94e 	b.w	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Spi1ClockSelection)
 8003e3a:	2601      	movs	r6, #1
 8003e3c:	4635      	mov	r5, r6
 8003e3e:	f7fe bf94 	b.w	8002d6a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8003e42:	2601      	movs	r6, #1
 8003e44:	4635      	mov	r5, r6
 8003e46:	f7fe bb88 	b.w	800255a <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->OspiClockSelection)
 8003e4a:	2601      	movs	r6, #1
 8003e4c:	4635      	mov	r5, r6
 8003e4e:	f7ff b8c5 	b.w	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8003e52:	bf00      	nop
 8003e54:	44020c00 	.word	0x44020c00
 8003e58:	00ffffcf 	.word	0x00ffffcf

08003e5c <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8003e5c:	6803      	ldr	r3, [r0, #0]
 8003e5e:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8003e60:	699a      	ldr	r2, [r3, #24]
 8003e62:	f042 0208 	orr.w	r2, r2, #8
 8003e66:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	f042 0210 	orr.w	r2, r2, #16
 8003e6e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f022 0201 	bic.w	r2, r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 8003e7e:	f022 0203 	bic.w	r2, r2, #3
 8003e82:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003e8a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e8c:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 8003e90:	2a04      	cmp	r2, #4
 8003e92:	d001      	beq.n	8003e98 <SPI_CloseTransfer+0x3c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8003e94:	068a      	lsls	r2, r1, #26
 8003e96:	d431      	bmi.n	8003efc <SPI_CloseTransfer+0xa0>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003e98:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 8003e9c:	2a03      	cmp	r2, #3
 8003e9e:	d00f      	beq.n	8003ec0 <SPI_CloseTransfer+0x64>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8003ea0:	064a      	lsls	r2, r1, #25
 8003ea2:	d509      	bpl.n	8003eb8 <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003ea4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8003ea8:	f042 0204 	orr.w	r2, r2, #4
 8003eac:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eb6:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eb8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003eba:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8003ebe:	d028      	beq.n	8003f12 <SPI_CloseTransfer+0xb6>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8003ec0:	058a      	lsls	r2, r1, #22
 8003ec2:	d509      	bpl.n	8003ed8 <SPI_CloseTransfer+0x7c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003ec4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8003ed8:	05ca      	lsls	r2, r1, #23
 8003eda:	d509      	bpl.n	8003ef0 <SPI_CloseTransfer+0x94>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003edc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8003ee0:	f042 0208 	orr.w	r2, r2, #8
 8003ee4:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ee8:	699a      	ldr	r2, [r3, #24]
 8003eea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eee:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8003ef6:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
}
 8003efa:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8003efc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8003f00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f04:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	f042 0220 	orr.w	r2, r2, #32
 8003f0e:	619a      	str	r2, [r3, #24]
 8003f10:	e7c2      	b.n	8003e98 <SPI_CloseTransfer+0x3c>
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 8003f12:	060a      	lsls	r2, r1, #24
 8003f14:	d5d4      	bpl.n	8003ec0 <SPI_CloseTransfer+0x64>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003f16:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8003f1a:	f042 0202 	orr.w	r2, r2, #2
 8003f1e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003f22:	699a      	ldr	r2, [r3, #24]
 8003f24:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f28:	619a      	str	r2, [r3, #24]
 8003f2a:	e7c9      	b.n	8003ec0 <SPI_CloseTransfer+0x64>

08003f2c <HAL_SPI_Init>:
  if (hspi == NULL)
 8003f2c:	2800      	cmp	r0, #0
 8003f2e:	f000 811e 	beq.w	800416e <HAL_SPI_Init+0x242>
{
 8003f32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003f36:	4a9b      	ldr	r2, [pc, #620]	; (80041a4 <HAL_SPI_Init+0x278>)
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8003f38:	6803      	ldr	r3, [r0, #0]
 8003f3a:	4604      	mov	r4, r0
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	f000 80a5 	beq.w	800408c <HAL_SPI_Init+0x160>
 8003f42:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003f46:	4293      	cmp	r3, r2
 8003f48:	f000 80a0 	beq.w	800408c <HAL_SPI_Init+0x160>
 8003f4c:	4a96      	ldr	r2, [pc, #600]	; (80041a8 <HAL_SPI_Init+0x27c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	f000 809c 	beq.w	800408c <HAL_SPI_Init+0x160>
 8003f54:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	f000 8097 	beq.w	800408c <HAL_SPI_Init+0x160>
 8003f5e:	4a93      	ldr	r2, [pc, #588]	; (80041ac <HAL_SPI_Init+0x280>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	f000 8093 	beq.w	800408c <HAL_SPI_Init+0x160>
 8003f66:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	f000 808e 	beq.w	800408c <HAL_SPI_Init+0x160>
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8003f70:	68c2      	ldr	r2, [r0, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003f72:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8003f74:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8003f78:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 8003f7a:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 8003f7c:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8003f80:	4d8b      	ldr	r5, [pc, #556]	; (80041b0 <HAL_SPI_Init+0x284>)
 8003f82:	42ab      	cmp	r3, r5
 8003f84:	d010      	beq.n	8003fa8 <HAL_SPI_Init+0x7c>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8003f86:	4d8b      	ldr	r5, [pc, #556]	; (80041b4 <HAL_SPI_Init+0x288>)
 8003f88:	42ab      	cmp	r3, r5
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_SPI_Init+0x7c>
 8003f8c:	4d8a      	ldr	r5, [pc, #552]	; (80041b8 <HAL_SPI_Init+0x28c>)
 8003f8e:	42ab      	cmp	r3, r5
 8003f90:	d00a      	beq.n	8003fa8 <HAL_SPI_Init+0x7c>
 8003f92:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 8003f96:	42ab      	cmp	r3, r5
 8003f98:	d006      	beq.n	8003fa8 <HAL_SPI_Init+0x7c>
 8003f9a:	4d88      	ldr	r5, [pc, #544]	; (80041bc <HAL_SPI_Init+0x290>)
 8003f9c:	42ab      	cmp	r3, r5
 8003f9e:	d003      	beq.n	8003fa8 <HAL_SPI_Init+0x7c>
 8003fa0:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 8003fa4:	42ab      	cmp	r3, r5
 8003fa6:	d101      	bne.n	8003fac <HAL_SPI_Init+0x80>
 8003fa8:	2910      	cmp	r1, #16
 8003faa:	d87c      	bhi.n	80040a6 <HAL_SPI_Init+0x17a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fac:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fae:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 8003fb2:	f000 810d 	beq.w	80041d0 <HAL_SPI_Init+0x2a4>
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 8003fb6:	0417      	lsls	r7, r2, #16
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003fb8:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
 8003fbc:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8003fc0:	2900      	cmp	r1, #0
 8003fc2:	f000 80e5 	beq.w	8004190 <HAL_SPI_Init+0x264>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
  __HAL_SPI_DISABLE(hspi);
 8003fcc:	6819      	ldr	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003fce:	f8d4 8018 	ldr.w	r8, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8003fd2:	f021 0101 	bic.w	r1, r1, #1
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003fd6:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
 8003fda:	6865      	ldr	r5, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8003fdc:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8003fe0:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8003fe2:	f000 80c6 	beq.w	8004172 <HAL_SPI_Init+0x246>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8003fe6:	f415 0e80 	ands.w	lr, r5, #4194304	; 0x400000
 8003fea:	f000 80cc 	beq.w	8004186 <HAL_SPI_Init+0x25a>
 8003fee:	2a06      	cmp	r2, #6
 8003ff0:	f240 80c9 	bls.w	8004186 <HAL_SPI_Init+0x25a>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	f421 7980 	bic.w	r9, r1, #256	; 0x100
 8003ffa:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8003ffc:	ea49 0101 	orr.w	r1, r9, r1
 8004000:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004002:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004004:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004008:	ea48 0801 	orr.w	r8, r8, r1
 800400c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800400e:	ea48 0801 	orr.w	r8, r8, r1
 8004012:	6921      	ldr	r1, [r4, #16]
 8004014:	ea48 0801 	orr.w	r8, r8, r1
 8004018:	6961      	ldr	r1, [r4, #20]
 800401a:	ea48 0801 	orr.w	r8, r8, r1
 800401e:	6a21      	ldr	r1, [r4, #32]
 8004020:	ea48 0801 	orr.w	r8, r8, r1
 8004024:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8004026:	ea48 0801 	orr.w	r8, r8, r1
 800402a:	68a1      	ldr	r1, [r4, #8]
 800402c:	ea48 0801 	orr.w	r8, r8, r1
 8004030:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004032:	ea48 0801 	orr.w	r8, r8, r1
 8004036:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004038:	ea48 0801 	orr.w	r8, r8, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800403c:	69e1      	ldr	r1, [r4, #28]
 800403e:	ea41 0100 	orr.w	r1, r1, r0
 8004042:	ea41 0107 	orr.w	r1, r1, r7
 8004046:	ea42 0201 	orr.w	r2, r2, r1
 800404a:	ea42 0206 	orr.w	r2, r2, r6
 800404e:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004050:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004052:	ea48 0102 	orr.w	r1, r8, r2
 8004056:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004058:	ea42 0201 	orr.w	r2, r2, r1
 800405c:	ea42 0c0c 	orr.w	ip, r2, ip
 8004060:	ea4c 0205 	orr.w	r2, ip, r5
 8004064:	60da      	str	r2, [r3, #12]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004066:	d021      	beq.n	80040ac <HAL_SPI_Init+0x180>
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004068:	2d00      	cmp	r5, #0
 800406a:	d168      	bne.n	800413e <HAL_SPI_Init+0x212>
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG);
 800406c:	689a      	ldr	r2, [r3, #8]
 800406e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004072:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004074:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004076:	f022 0201 	bic.w	r2, r2, #1
 800407a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800407c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800407e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004080:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8004084:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
}
 8004088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800408c:	68e2      	ldr	r2, [r4, #12]
 800408e:	2a0f      	cmp	r2, #15
 8004090:	d809      	bhi.n	80040a6 <HAL_SPI_Init+0x17a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004092:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8004094:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004098:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 800409a:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 800409c:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80040a0:	2908      	cmp	r1, #8
 80040a2:	f240 808d 	bls.w	80041c0 <HAL_SPI_Init+0x294>
    return HAL_ERROR;
 80040a6:	2001      	movs	r0, #1
}
 80040a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 80040ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80040ae:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	bf0c      	ite	eq
 80040b4:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 80040b8:	f422 4200 	bicne.w	r2, r2, #32768	; 0x8000
 80040bc:	601a      	str	r2, [r3, #0]
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 80040be:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80040c0:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	bf0c      	ite	eq
 80040c6:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 80040ca:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 80040ce:	601a      	str	r2, [r3, #0]
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 80040d0:	4a34      	ldr	r2, [pc, #208]	; (80041a4 <HAL_SPI_Init+0x278>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d041      	beq.n	800415a <HAL_SPI_Init+0x22e>
 80040d6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80040da:	4293      	cmp	r3, r2
 80040dc:	d03d      	beq.n	800415a <HAL_SPI_Init+0x22e>
 80040de:	4a32      	ldr	r2, [pc, #200]	; (80041a8 <HAL_SPI_Init+0x27c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d03a      	beq.n	800415a <HAL_SPI_Init+0x22e>
 80040e4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d036      	beq.n	800415a <HAL_SPI_Init+0x22e>
 80040ec:	4a2f      	ldr	r2, [pc, #188]	; (80041ac <HAL_SPI_Init+0x280>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d033      	beq.n	800415a <HAL_SPI_Init+0x22e>
 80040f2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d02f      	beq.n	800415a <HAL_SPI_Init+0x22e>
 80040fa:	4a2d      	ldr	r2, [pc, #180]	; (80041b0 <HAL_SPI_Init+0x284>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d00e      	beq.n	800411e <HAL_SPI_Init+0x1f2>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8004100:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004104:	4293      	cmp	r3, r2
 8004106:	d00a      	beq.n	800411e <HAL_SPI_Init+0x1f2>
 8004108:	4a2b      	ldr	r2, [pc, #172]	; (80041b8 <HAL_SPI_Init+0x28c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <HAL_SPI_Init+0x1f2>
 800410e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004112:	4293      	cmp	r3, r2
 8004114:	d003      	beq.n	800411e <HAL_SPI_Init+0x1f2>
 8004116:	4a29      	ldr	r2, [pc, #164]	; (80041bc <HAL_SPI_Init+0x290>)
 8004118:	4293      	cmp	r3, r2
 800411a:	f040 8086 	bne.w	800422a <HAL_SPI_Init+0x2fe>
 800411e:	f5b7 1ff8 	cmp.w	r7, #2031616	; 0x1f0000
 8004122:	d01d      	beq.n	8004160 <HAL_SPI_Init+0x234>
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8004124:	2201      	movs	r2, #1
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8004126:	6819      	ldr	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8004128:	0c3f      	lsrs	r7, r7, #16
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800412a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800412e:	6019      	str	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8004130:	3701      	adds	r7, #1
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 8004132:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8004134:	40ba      	lsls	r2, r7
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 8004136:	430a      	orrs	r2, r1
 8004138:	641a      	str	r2, [r3, #64]	; 0x40
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800413a:	2d00      	cmp	r5, #0
 800413c:	d096      	beq.n	800406c <HAL_SPI_Init+0x140>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800413e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004146:	f1be 0f00 	cmp.w	lr, #0
 800414a:	d097      	beq.n	800407c <HAL_SPI_Init+0x150>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800414c:	68da      	ldr	r2, [r3, #12]
 800414e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004150:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004154:	430a      	orrs	r2, r1
 8004156:	60da      	str	r2, [r3, #12]
 8004158:	e790      	b.n	800407c <HAL_SPI_Init+0x150>
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 800415a:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 800415e:	d1e1      	bne.n	8004124 <HAL_SPI_Init+0x1f8>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004166:	601a      	str	r2, [r3, #0]
      WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 8004168:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800416a:	641a      	str	r2, [r3, #64]	; 0x40
 800416c:	e77c      	b.n	8004068 <HAL_SPI_Init+0x13c>
    return HAL_ERROR;
 800416e:	2001      	movs	r0, #1
}
 8004170:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004172:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8004176:	d04e      	beq.n	8004216 <HAL_SPI_Init+0x2ea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004178:	2d00      	cmp	r5, #0
 800417a:	f47f af34 	bne.w	8003fe6 <HAL_SPI_Init+0xba>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800417e:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 8004182:	d04d      	beq.n	8004220 <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004184:	46ae      	mov	lr, r5
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004186:	6819      	ldr	r1, [r3, #0]
 8004188:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800418c:	6019      	str	r1, [r3, #0]
 800418e:	e738      	b.n	8004002 <HAL_SPI_Init+0xd6>
    HAL_SPI_MspInit(hspi);
 8004190:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8004192:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    HAL_SPI_MspInit(hspi);
 8004196:	f7fc f8a9 	bl	80002ec <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800419a:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800419c:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800419e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80041a0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80041a2:	e710      	b.n	8003fc6 <HAL_SPI_Init+0x9a>
 80041a4:	40014c00 	.word	0x40014c00
 80041a8:	44002000 	.word	0x44002000
 80041ac:	40015000 	.word	0x40015000
 80041b0:	40013000 	.word	0x40013000
 80041b4:	50013000 	.word	0x50013000
 80041b8:	40003800 	.word	0x40003800
 80041bc:	40003c00 	.word	0x40003c00
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041c2:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 80041c6:	f47f aef6 	bne.w	8003fb6 <HAL_SPI_Init+0x8a>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 80041ca:	491b      	ldr	r1, [pc, #108]	; (8004238 <HAL_SPI_Init+0x30c>)
 80041cc:	428b      	cmp	r3, r1
 80041ce:	d01a      	beq.n	8004206 <HAL_SPI_Init+0x2da>
 80041d0:	491a      	ldr	r1, [pc, #104]	; (800423c <HAL_SPI_Init+0x310>)
 80041d2:	428b      	cmp	r3, r1
 80041d4:	d017      	beq.n	8004206 <HAL_SPI_Init+0x2da>
 80041d6:	491a      	ldr	r1, [pc, #104]	; (8004240 <HAL_SPI_Init+0x314>)
 80041d8:	428b      	cmp	r3, r1
 80041da:	d014      	beq.n	8004206 <HAL_SPI_Init+0x2da>
 80041dc:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 80041e0:	428b      	cmp	r3, r1
 80041e2:	d010      	beq.n	8004206 <HAL_SPI_Init+0x2da>
 80041e4:	4917      	ldr	r1, [pc, #92]	; (8004244 <HAL_SPI_Init+0x318>)
 80041e6:	428b      	cmp	r3, r1
 80041e8:	d00d      	beq.n	8004206 <HAL_SPI_Init+0x2da>
 80041ea:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 80041ee:	428b      	cmp	r3, r1
 80041f0:	d009      	beq.n	8004206 <HAL_SPI_Init+0x2da>
 80041f2:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80041f4:	b907      	cbnz	r7, 80041f8 <HAL_SPI_Init+0x2cc>
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 80041f6:	0417      	lsls	r7, r2, #16
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 80041f8:	ebb2 4f17 	cmp.w	r2, r7, lsr #16
 80041fc:	f63f af53 	bhi.w	80040a6 <HAL_SPI_Init+0x17a>
 8004200:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8004204:	e6d8      	b.n	8003fb8 <HAL_SPI_Init+0x8c>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 8004206:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8004208:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 800420c:	f63f af4b 	bhi.w	80040a6 <HAL_SPI_Init+0x17a>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004210:	2f00      	cmp	r7, #0
 8004212:	d1f1      	bne.n	80041f8 <HAL_SPI_Init+0x2cc>
 8004214:	e7ef      	b.n	80041f6 <HAL_SPI_Init+0x2ca>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004216:	f1bc 0f00 	cmp.w	ip, #0
 800421a:	d001      	beq.n	8004220 <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800421c:	46ae      	mov	lr, r5
 800421e:	e6e6      	b.n	8003fee <HAL_SPI_Init+0xc2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004220:	6819      	ldr	r1, [r3, #0]
 8004222:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8004226:	6019      	str	r1, [r3, #0]
 8004228:	e6dd      	b.n	8003fe6 <HAL_SPI_Init+0xba>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 800422a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800422e:	4293      	cmp	r3, r2
 8004230:	f43f af75 	beq.w	800411e <HAL_SPI_Init+0x1f2>
 8004234:	e776      	b.n	8004124 <HAL_SPI_Init+0x1f8>
 8004236:	bf00      	nop
 8004238:	40014c00 	.word	0x40014c00
 800423c:	50014c00 	.word	0x50014c00
 8004240:	44002000 	.word	0x44002000
 8004244:	40015000 	.word	0x40015000

08004248 <HAL_SPI_Transmit>:
{
 8004248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800424c:	4604      	mov	r4, r0
 800424e:	4690      	mov	r8, r2
 8004250:	4689      	mov	r9, r1
 8004252:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004254:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 8004256:	f7fc ff53 	bl	8001100 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800425a:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 800425e:	2a01      	cmp	r2, #1
 8004260:	d172      	bne.n	8004348 <HAL_SPI_Transmit+0x100>
  if ((pData == NULL) || (Size == 0UL))
 8004262:	b2d3      	uxtb	r3, r2
 8004264:	f1b9 0f00 	cmp.w	r9, #0
 8004268:	d06f      	beq.n	800434a <HAL_SPI_Transmit+0x102>
 800426a:	f1b8 0f00 	cmp.w	r8, #0
 800426e:	d06c      	beq.n	800434a <HAL_SPI_Transmit+0x102>
  __HAL_LOCK(hspi);
 8004270:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 8004274:	2a01      	cmp	r2, #1
 8004276:	d067      	beq.n	8004348 <HAL_SPI_Transmit+0x100>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004278:	2203      	movs	r2, #3
  __HAL_LOCK(hspi);
 800427a:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800427e:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004280:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
  hspi->pRxBuffPtr  = NULL;
 8004284:	66e3      	str	r3, [r4, #108]	; 0x6c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004286:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  hspi->RxXferSize  = (uint16_t) 0UL;
 800428a:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  hspi->TxXferCount = Size;
 800428e:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8004292:	67e3      	str	r3, [r4, #124]	; 0x7c
  hspi->RxXferCount = (uint16_t) 0UL;
 8004294:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
  hspi->RxISR       = NULL;
 8004298:	67a3      	str	r3, [r4, #120]	; 0x78
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429a:	68a3      	ldr	r3, [r4, #8]
 800429c:	4606      	mov	r6, r0
 800429e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    SPI_1LINE_TX(hspi);
 80042a2:	6821      	ldr	r1, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80042a4:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->TxXferSize  = Size;
 80042a8:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ac:	f000 8121 	beq.w	80044f2 <HAL_SPI_Transmit+0x2aa>
    SPI_2LINES_TX(hspi);
 80042b0:	68cb      	ldr	r3, [r1, #12]
 80042b2:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ba:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80042bc:	684b      	ldr	r3, [r1, #4]
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	ea43 0308 	orr.w	r3, r3, r8
 80042c6:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 80042c8:	680b      	ldr	r3, [r1, #0]
 80042ca:	f043 0301 	orr.w	r3, r3, #1
 80042ce:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042d0:	6863      	ldr	r3, [r4, #4]
 80042d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042d6:	d103      	bne.n	80042e0 <HAL_SPI_Transmit+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80042d8:	680b      	ldr	r3, [r1, #0]
 80042da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80042de:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 80042e0:	68e3      	ldr	r3, [r4, #12]
 80042e2:	2b0f      	cmp	r3, #15
 80042e4:	f200 808f 	bhi.w	8004406 <HAL_SPI_Transmit+0x1be>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e8:	2b07      	cmp	r3, #7
 80042ea:	d860      	bhi.n	80043ae <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 80042ec:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	b383      	cbz	r3, 8004356 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80042f4:	694b      	ldr	r3, [r1, #20]
 80042f6:	0798      	lsls	r0, r3, #30
 80042f8:	d51b      	bpl.n	8004332 <HAL_SPI_Transmit+0xea>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80042fa:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b03      	cmp	r3, #3
 8004302:	f240 80ba 	bls.w	800447a <HAL_SPI_Transmit+0x232>
 8004306:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004308:	2b40      	cmp	r3, #64	; 0x40
 800430a:	f240 80b6 	bls.w	800447a <HAL_SPI_Transmit+0x232>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800430e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004310:	f853 2b04 	ldr.w	r2, [r3], #4
 8004314:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004316:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8004318:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800431c:	3b04      	subs	r3, #4
 800431e:	b29b      	uxth	r3, r3
 8004320:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8004324:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004328:	b29b      	uxth	r3, r3
 800432a:	b1a3      	cbz	r3, 8004356 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800432c:	694b      	ldr	r3, [r1, #20]
 800432e:	0798      	lsls	r0, r3, #30
 8004330:	d4e3      	bmi.n	80042fa <HAL_SPI_Transmit+0xb2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004332:	f7fc fee5 	bl	8001100 <HAL_GetTick>
 8004336:	1b80      	subs	r0, r0, r6
 8004338:	42a8      	cmp	r0, r5
 800433a:	f0c0 80d6 	bcc.w	80044ea <HAL_SPI_Transmit+0x2a2>
 800433e:	1c69      	adds	r1, r5, #1
 8004340:	f040 80bf 	bne.w	80044c2 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004344:	6821      	ldr	r1, [r4, #0]
 8004346:	e7d1      	b.n	80042ec <HAL_SPI_Transmit+0xa4>
    return HAL_BUSY;
 8004348:	2302      	movs	r3, #2
}
 800434a:	4618      	mov	r0, r3
 800434c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004350:	1c6a      	adds	r2, r5, #1
 8004352:	d10a      	bne.n	800436a <HAL_SPI_Transmit+0x122>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004354:	6821      	ldr	r1, [r4, #0]
 8004356:	694b      	ldr	r3, [r1, #20]
 8004358:	071b      	lsls	r3, r3, #28
 800435a:	d40c      	bmi.n	8004376 <HAL_SPI_Transmit+0x12e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800435c:	f7fc fed0 	bl	8001100 <HAL_GetTick>
 8004360:	1b80      	subs	r0, r0, r6
 8004362:	4285      	cmp	r5, r0
 8004364:	d9f4      	bls.n	8004350 <HAL_SPI_Transmit+0x108>
 8004366:	2d00      	cmp	r5, #0
 8004368:	d1f4      	bne.n	8004354 <HAL_SPI_Transmit+0x10c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800436a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800436e:	f043 0320 	orr.w	r3, r3, #32
 8004372:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  SPI_CloseTransfer(hspi);
 8004376:	4620      	mov	r0, r4
 8004378:	f7ff fd70 	bl	8003e5c <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 800437c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 800437e:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004380:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004384:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  __HAL_UNLOCK(hspi);
 8004388:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
    return HAL_BUSY;
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	bf18      	it	ne
 8004390:	2301      	movne	r3, #1
}
 8004392:	4618      	mov	r0, r3
 8004394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800439a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800439e:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80043a0:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 80043a2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 80043ae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d0ce      	beq.n	8004356 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80043b8:	694b      	ldr	r3, [r1, #20]
 80043ba:	079a      	lsls	r2, r3, #30
 80043bc:	d51a      	bpl.n	80043f4 <HAL_SPI_Transmit+0x1ac>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80043be:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d9e7      	bls.n	8004398 <HAL_SPI_Transmit+0x150>
 80043c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0e4      	beq.n	8004398 <HAL_SPI_Transmit+0x150>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80043ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80043d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80043d4:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80043d6:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 80043d8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80043dc:	3b02      	subs	r3, #2
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 80043e4:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0b3      	beq.n	8004356 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80043ee:	694b      	ldr	r3, [r1, #20]
 80043f0:	079a      	lsls	r2, r3, #30
 80043f2:	d4e4      	bmi.n	80043be <HAL_SPI_Transmit+0x176>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80043f4:	f7fc fe84 	bl	8001100 <HAL_GetTick>
 80043f8:	1b80      	subs	r0, r0, r6
 80043fa:	42a8      	cmp	r0, r5
 80043fc:	d372      	bcc.n	80044e4 <HAL_SPI_Transmit+0x29c>
 80043fe:	1c6b      	adds	r3, r5, #1
 8004400:	d15f      	bne.n	80044c2 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004402:	6821      	ldr	r1, [r4, #0]
 8004404:	e7d3      	b.n	80043ae <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8004406:	4b3d      	ldr	r3, [pc, #244]	; (80044fc <HAL_SPI_Transmit+0x2b4>)
 8004408:	4299      	cmp	r1, r3
 800440a:	d011      	beq.n	8004430 <HAL_SPI_Transmit+0x1e8>
 800440c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8004410:	4299      	cmp	r1, r3
 8004412:	d00d      	beq.n	8004430 <HAL_SPI_Transmit+0x1e8>
 8004414:	4b3a      	ldr	r3, [pc, #232]	; (8004500 <HAL_SPI_Transmit+0x2b8>)
 8004416:	4299      	cmp	r1, r3
 8004418:	d00a      	beq.n	8004430 <HAL_SPI_Transmit+0x1e8>
 800441a:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800441e:	4299      	cmp	r1, r3
 8004420:	d006      	beq.n	8004430 <HAL_SPI_Transmit+0x1e8>
 8004422:	4b38      	ldr	r3, [pc, #224]	; (8004504 <HAL_SPI_Transmit+0x2bc>)
 8004424:	4299      	cmp	r1, r3
 8004426:	d003      	beq.n	8004430 <HAL_SPI_Transmit+0x1e8>
 8004428:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 800442c:	4299      	cmp	r1, r3
 800442e:	d1be      	bne.n	80043ae <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 8004430:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d08d      	beq.n	8004356 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800443a:	694b      	ldr	r3, [r1, #20]
 800443c:	0798      	lsls	r0, r3, #30
 800443e:	d513      	bpl.n	8004468 <HAL_SPI_Transmit+0x220>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8004440:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004442:	f852 3b04 	ldr.w	r3, [r2], #4
 8004446:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 8004448:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800444c:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->TxXferCount--;
 800444e:	3b01      	subs	r3, #1
 8004450:	b29b      	uxth	r3, r3
 8004452:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8004456:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	f43f af7a 	beq.w	8004356 <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8004462:	694b      	ldr	r3, [r1, #20]
 8004464:	0798      	lsls	r0, r3, #30
 8004466:	d4eb      	bmi.n	8004440 <HAL_SPI_Transmit+0x1f8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004468:	f7fc fe4a 	bl	8001100 <HAL_GetTick>
 800446c:	1b80      	subs	r0, r0, r6
 800446e:	42a8      	cmp	r0, r5
 8004470:	d325      	bcc.n	80044be <HAL_SPI_Transmit+0x276>
 8004472:	1c69      	adds	r1, r5, #1
 8004474:	d125      	bne.n	80044c2 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8004476:	6821      	ldr	r1, [r4, #0]
 8004478:	e7da      	b.n	8004430 <HAL_SPI_Transmit+0x1e8>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800447a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800447e:	b29b      	uxth	r3, r3
 8004480:	2b01      	cmp	r3, #1
 8004482:	d90d      	bls.n	80044a0 <HAL_SPI_Transmit+0x258>
 8004484:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004486:	b15b      	cbz	r3, 80044a0 <HAL_SPI_Transmit+0x258>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8004488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800448a:	f833 2b02 	ldrh.w	r2, [r3], #2
 800448e:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004490:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8004492:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8004496:	3b02      	subs	r3, #2
 8004498:	b29b      	uxth	r3, r3
 800449a:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800449e:	e725      	b.n	80042ec <HAL_SPI_Transmit+0xa4>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80044a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80044a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80044aa:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80044ac:	3301      	adds	r3, #1
 80044ae:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 80044b0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 80044bc:	e716      	b.n	80042ec <HAL_SPI_Transmit+0xa4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044be:	2d00      	cmp	r5, #0
 80044c0:	d1d9      	bne.n	8004476 <HAL_SPI_Transmit+0x22e>
          SPI_CloseTransfer(hspi);
 80044c2:	4620      	mov	r0, r4
 80044c4:	f7ff fcca 	bl	8003e5c <SPI_CloseTransfer>
          hspi->State = HAL_SPI_STATE_READY;
 80044c8:	2401      	movs	r4, #1
          __HAL_UNLOCK(hspi);
 80044ca:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80044cc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80044d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d6:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
          __HAL_UNLOCK(hspi);
 80044da:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
          hspi->State = HAL_SPI_STATE_READY;
 80044de:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
          return HAL_TIMEOUT;
 80044e2:	e732      	b.n	800434a <HAL_SPI_Transmit+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044e4:	2d00      	cmp	r5, #0
 80044e6:	d18c      	bne.n	8004402 <HAL_SPI_Transmit+0x1ba>
 80044e8:	e7eb      	b.n	80044c2 <HAL_SPI_Transmit+0x27a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80044ea:	2d00      	cmp	r5, #0
 80044ec:	f47f af2a 	bne.w	8004344 <HAL_SPI_Transmit+0xfc>
 80044f0:	e7e7      	b.n	80044c2 <HAL_SPI_Transmit+0x27a>
    SPI_1LINE_TX(hspi);
 80044f2:	680b      	ldr	r3, [r1, #0]
 80044f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044f8:	600b      	str	r3, [r1, #0]
 80044fa:	e6df      	b.n	80042bc <HAL_SPI_Transmit+0x74>
 80044fc:	40013000 	.word	0x40013000
 8004500:	40003800 	.word	0x40003800
 8004504:	40003c00 	.word	0x40003c00

08004508 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop

0800450c <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800450c:	e7fe      	b.n	800450c <HardFault_Handler>
 800450e:	bf00      	nop

08004510 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004510:	e7fe      	b.n	8004510 <MemManage_Handler>
 8004512:	bf00      	nop

08004514 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004514:	e7fe      	b.n	8004514 <BusFault_Handler>
 8004516:	bf00      	nop

08004518 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004518:	e7fe      	b.n	8004518 <UsageFault_Handler>
 800451a:	bf00      	nop

0800451c <SVC_Handler>:
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop

08004520 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
 8004520:	e7fe      	b.n	8004520 <DebugMon_Handler>
 8004522:	bf00      	nop

08004524 <PendSV_Handler>:
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
  while (1)
 8004524:	e7fe      	b.n	8004524 <PendSV_Handler>
 8004526:	bf00      	nop

08004528 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8004528:	f7fc bdde 	b.w	80010e8 <HAL_IncTick>

0800452c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800452c:	b4f0      	push	{r4, r5, r6, r7}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800452e:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_HSION;
 8004530:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004532:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004536:	491d      	ldr	r1, [pc, #116]	; (80045ac <SystemInit+0x80>)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8004538:	4c1d      	ldr	r4, [pc, #116]	; (80045b0 <SystemInit+0x84>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800453a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  RCC->PLL1DIVR = 0x01010280U;
 800453e:	481d      	ldr	r0, [pc, #116]	; (80045b4 <SystemInit+0x88>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004540:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR = RCC_CR_HSION;
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <SystemInit+0x8c>)
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800454a:	4d1c      	ldr	r5, [pc, #112]	; (80045bc <SystemInit+0x90>)
  RCC->CR = RCC_CR_HSION;
 800454c:	601f      	str	r7, [r3, #0]
  RCC->CFGR1 = 0U;
 800454e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8004550:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 8004552:	681f      	ldr	r7, [r3, #0]
 8004554:	403c      	ands	r4, r7
 8004556:	601c      	str	r4, [r3, #0]
  RCC->PLL1CFGR = 0U;
 8004558:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800455a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1DIVR = 0x01010280U;
 800455e:	6358      	str	r0, [r3, #52]	; 0x34
  RCC->PLL1FRACR = 0x00000000U;
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2DIVR = 0x01010280U;
 8004562:	63d8      	str	r0, [r3, #60]	; 0x3c
  RCC->PLL2FRACR = 0x00000000U;
 8004564:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3DIVR = 0x01010280U;
 8004566:	6458      	str	r0, [r3, #68]	; 0x44
  RCC->PLL3FRACR = 0x00000000U;
 8004568:	649a      	str	r2, [r3, #72]	; 0x48
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004570:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0U;
 8004572:	651a      	str	r2, [r3, #80]	; 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004574:	608e      	str	r6, [r1, #8]
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 8004576:	69ab      	ldr	r3, [r5, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 8004578:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800457c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004580:	d001      	beq.n	8004586 <SystemInit+0x5a>
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
  }
}
 8004582:	bcf0      	pop	{r4, r5, r6, r7}
 8004584:	4770      	bx	lr
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 8004586:	69eb      	ldr	r3, [r5, #28]
 8004588:	07db      	lsls	r3, r3, #31
 800458a:	d503      	bpl.n	8004594 <SystemInit+0x68>
      FLASH->OPTKEYR = 0x08192A3BU;
 800458c:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <SystemInit+0x94>)
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800458e:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <SystemInit+0x98>)
      FLASH->OPTKEYR = 0x08192A3BU;
 8004590:	60ea      	str	r2, [r5, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 8004592:	60eb      	str	r3, [r5, #12]
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <SystemInit+0x90>)
}
 8004596:	bcf0      	pop	{r4, r5, r6, r7}
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	f042 0202 	orr.w	r2, r2, #2
 800459e:	61da      	str	r2, [r3, #28]
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	61da      	str	r2, [r3, #28]
}
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	eae2eae3 	.word	0xeae2eae3
 80045b4:	01010280 	.word	0x01010280
 80045b8:	44020c00 	.word	0x44020c00
 80045bc:	40022000 	.word	0x40022000
 80045c0:	08192a3b 	.word	0x08192a3b
 80045c4:	4c5d6e7f 	.word	0x4c5d6e7f

080045c8 <__libc_init_array>:
 80045c8:	b570      	push	{r4, r5, r6, lr}
 80045ca:	4e0d      	ldr	r6, [pc, #52]	; (8004600 <__libc_init_array+0x38>)
 80045cc:	4d0d      	ldr	r5, [pc, #52]	; (8004604 <__libc_init_array+0x3c>)
 80045ce:	1b76      	subs	r6, r6, r5
 80045d0:	10b6      	asrs	r6, r6, #2
 80045d2:	d006      	beq.n	80045e2 <__libc_init_array+0x1a>
 80045d4:	2400      	movs	r4, #0
 80045d6:	3401      	adds	r4, #1
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	42a6      	cmp	r6, r4
 80045e0:	d1f9      	bne.n	80045d6 <__libc_init_array+0xe>
 80045e2:	4e09      	ldr	r6, [pc, #36]	; (8004608 <__libc_init_array+0x40>)
 80045e4:	f000 fd4c 	bl	8005080 <_init>
 80045e8:	4d08      	ldr	r5, [pc, #32]	; (800460c <__libc_init_array+0x44>)
 80045ea:	1b76      	subs	r6, r6, r5
 80045ec:	10b6      	asrs	r6, r6, #2
 80045ee:	d006      	beq.n	80045fe <__libc_init_array+0x36>
 80045f0:	2400      	movs	r4, #0
 80045f2:	3401      	adds	r4, #1
 80045f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80045f8:	4798      	blx	r3
 80045fa:	42a6      	cmp	r6, r4
 80045fc:	d1f9      	bne.n	80045f2 <__libc_init_array+0x2a>
 80045fe:	bd70      	pop	{r4, r5, r6, pc}
 8004600:	080145b4 	.word	0x080145b4
 8004604:	080145b4 	.word	0x080145b4
 8004608:	080145bc 	.word	0x080145bc
 800460c:	080145b4 	.word	0x080145b4

08004610 <malloc>:
 8004610:	4b02      	ldr	r3, [pc, #8]	; (800461c <malloc+0xc>)
 8004612:	4601      	mov	r1, r0
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	f000 b803 	b.w	8004620 <_malloc_r>
 800461a:	bf00      	nop
 800461c:	2000000c 	.word	0x2000000c

08004620 <_malloc_r>:
 8004620:	f101 030b 	add.w	r3, r1, #11
 8004624:	2b16      	cmp	r3, #22
 8004626:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462a:	4605      	mov	r5, r0
 800462c:	b083      	sub	sp, #12
 800462e:	d824      	bhi.n	800467a <_malloc_r+0x5a>
 8004630:	2910      	cmp	r1, #16
 8004632:	f200 80f5 	bhi.w	8004820 <_malloc_r+0x200>
 8004636:	f000 faff 	bl	8004c38 <__malloc_lock>
 800463a:	2410      	movs	r4, #16
 800463c:	2218      	movs	r2, #24
 800463e:	2002      	movs	r0, #2
 8004640:	4ec0      	ldr	r6, [pc, #768]	; (8004944 <_malloc_r+0x324>)
 8004642:	4432      	add	r2, r6
 8004644:	6853      	ldr	r3, [r2, #4]
 8004646:	f1a2 0108 	sub.w	r1, r2, #8
 800464a:	428b      	cmp	r3, r1
 800464c:	f000 80ef 	beq.w	800482e <_malloc_r+0x20e>
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	4628      	mov	r0, r5
 8004654:	f022 0203 	bic.w	r2, r2, #3
 8004658:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 800465c:	441a      	add	r2, r3
 800465e:	60e1      	str	r1, [r4, #12]
 8004660:	608c      	str	r4, [r1, #8]
 8004662:	f103 0408 	add.w	r4, r3, #8
 8004666:	6853      	ldr	r3, [r2, #4]
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6053      	str	r3, [r2, #4]
 800466e:	f000 fae9 	bl	8004c44 <__malloc_unlock>
 8004672:	4620      	mov	r0, r4
 8004674:	b003      	add	sp, #12
 8004676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467a:	2b00      	cmp	r3, #0
 800467c:	f023 0407 	bic.w	r4, r3, #7
 8004680:	f2c0 80ce 	blt.w	8004820 <_malloc_r+0x200>
 8004684:	42a1      	cmp	r1, r4
 8004686:	f200 80cb 	bhi.w	8004820 <_malloc_r+0x200>
 800468a:	f000 fad5 	bl	8004c38 <__malloc_lock>
 800468e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004692:	f0c0 81c2 	bcc.w	8004a1a <_malloc_r+0x3fa>
 8004696:	0a63      	lsrs	r3, r4, #9
 8004698:	f000 8133 	beq.w	8004902 <_malloc_r+0x2e2>
 800469c:	2b04      	cmp	r3, #4
 800469e:	f200 8198 	bhi.w	80049d2 <_malloc_r+0x3b2>
 80046a2:	09a3      	lsrs	r3, r4, #6
 80046a4:	f103 0039 	add.w	r0, r3, #57	; 0x39
 80046a8:	f103 0738 	add.w	r7, r3, #56	; 0x38
 80046ac:	00c3      	lsls	r3, r0, #3
 80046ae:	4ea5      	ldr	r6, [pc, #660]	; (8004944 <_malloc_r+0x324>)
 80046b0:	4433      	add	r3, r6
 80046b2:	f1a3 0c08 	sub.w	ip, r3, #8
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	459c      	cmp	ip, r3
 80046ba:	d107      	bne.n	80046cc <_malloc_r+0xac>
 80046bc:	e0bc      	b.n	8004838 <_malloc_r+0x218>
 80046be:	2900      	cmp	r1, #0
 80046c0:	f280 8150 	bge.w	8004964 <_malloc_r+0x344>
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	459c      	cmp	ip, r3
 80046c8:	f000 80b6 	beq.w	8004838 <_malloc_r+0x218>
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	f022 0203 	bic.w	r2, r2, #3
 80046d2:	1b11      	subs	r1, r2, r4
 80046d4:	290f      	cmp	r1, #15
 80046d6:	ddf2      	ble.n	80046be <_malloc_r+0x9e>
 80046d8:	6933      	ldr	r3, [r6, #16]
 80046da:	4638      	mov	r0, r7
 80046dc:	f8df e27c 	ldr.w	lr, [pc, #636]	; 800495c <_malloc_r+0x33c>
 80046e0:	4573      	cmp	r3, lr
 80046e2:	f040 80af 	bne.w	8004844 <_malloc_r+0x224>
 80046e6:	1083      	asrs	r3, r0, #2
 80046e8:	2101      	movs	r1, #1
 80046ea:	6872      	ldr	r2, [r6, #4]
 80046ec:	4099      	lsls	r1, r3
 80046ee:	4291      	cmp	r1, r2
 80046f0:	f240 80d1 	bls.w	8004896 <_malloc_r+0x276>
 80046f4:	68b7      	ldr	r7, [r6, #8]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f023 0903 	bic.w	r9, r3, #3
 80046fc:	eba9 0304 	sub.w	r3, r9, r4
 8004700:	2b0f      	cmp	r3, #15
 8004702:	dd02      	ble.n	800470a <_malloc_r+0xea>
 8004704:	454c      	cmp	r4, r9
 8004706:	f240 810c 	bls.w	8004922 <_malloc_r+0x302>
 800470a:	4b8f      	ldr	r3, [pc, #572]	; (8004948 <_malloc_r+0x328>)
 800470c:	eb07 0b09 	add.w	fp, r7, r9
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	eb04 0803 	add.w	r8, r4, r3
 8004716:	4b8d      	ldr	r3, [pc, #564]	; (800494c <_malloc_r+0x32c>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	3201      	adds	r2, #1
 800471c:	f000 81cb 	beq.w	8004ab6 <_malloc_r+0x496>
 8004720:	f241 020f 	movw	r2, #4111	; 0x100f
 8004724:	4442      	add	r2, r8
 8004726:	f8df 8238 	ldr.w	r8, [pc, #568]	; 8004960 <_malloc_r+0x340>
 800472a:	ea02 0808 	and.w	r8, r2, r8
 800472e:	4641      	mov	r1, r8
 8004730:	4628      	mov	r0, r5
 8004732:	f000 fa8d 	bl	8004c50 <_sbrk_r>
 8004736:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800473a:	4682      	mov	sl, r0
 800473c:	4b83      	ldr	r3, [pc, #524]	; (800494c <_malloc_r+0x32c>)
 800473e:	f000 81a9 	beq.w	8004a94 <_malloc_r+0x474>
 8004742:	42b7      	cmp	r7, r6
 8004744:	d002      	beq.n	800474c <_malloc_r+0x12c>
 8004746:	4583      	cmp	fp, r0
 8004748:	f200 81a4 	bhi.w	8004a94 <_malloc_r+0x474>
 800474c:	4a80      	ldr	r2, [pc, #512]	; (8004950 <_malloc_r+0x330>)
 800474e:	45d3      	cmp	fp, sl
 8004750:	6811      	ldr	r1, [r2, #0]
 8004752:	4441      	add	r1, r8
 8004754:	6011      	str	r1, [r2, #0]
 8004756:	f000 81a0 	beq.w	8004a9a <_malloc_r+0x47a>
 800475a:	6818      	ldr	r0, [r3, #0]
 800475c:	3001      	adds	r0, #1
 800475e:	f000 81a7 	beq.w	8004ab0 <_malloc_r+0x490>
 8004762:	ebaa 0b0b 	sub.w	fp, sl, fp
 8004766:	4459      	add	r1, fp
 8004768:	6011      	str	r1, [r2, #0]
 800476a:	f01a 0307 	ands.w	r3, sl, #7
 800476e:	f000 81ac 	beq.w	8004aca <_malloc_r+0x4aa>
 8004772:	f1c3 0108 	rsb	r1, r3, #8
 8004776:	4628      	mov	r0, r5
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	448a      	add	sl, r1
 800477c:	f241 0108 	movw	r1, #4104	; 0x1008
 8004780:	44d0      	add	r8, sl
 8004782:	1ac9      	subs	r1, r1, r3
 8004784:	eba1 0108 	sub.w	r1, r1, r8
 8004788:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
 800478c:	4659      	mov	r1, fp
 800478e:	f000 fa5f 	bl	8004c50 <_sbrk_r>
 8004792:	1c42      	adds	r2, r0, #1
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	4a6e      	ldr	r2, [pc, #440]	; (8004950 <_malloc_r+0x330>)
 8004798:	f000 81de 	beq.w	8004b58 <_malloc_r+0x538>
 800479c:	eba0 000a 	sub.w	r0, r0, sl
 80047a0:	eb00 080b 	add.w	r8, r0, fp
 80047a4:	6810      	ldr	r0, [r2, #0]
 80047a6:	f048 0301 	orr.w	r3, r8, #1
 80047aa:	42b7      	cmp	r7, r6
 80047ac:	f8c6 a008 	str.w	sl, [r6, #8]
 80047b0:	eb0b 0100 	add.w	r1, fp, r0
 80047b4:	f8ca 3004 	str.w	r3, [sl, #4]
 80047b8:	6011      	str	r1, [r2, #0]
 80047ba:	f000 81a9 	beq.w	8004b10 <_malloc_r+0x4f0>
 80047be:	f1b9 0f0f 	cmp.w	r9, #15
 80047c2:	f240 81a7 	bls.w	8004b14 <_malloc_r+0x4f4>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f1a9 000c 	sub.w	r0, r9, #12
 80047cc:	f04f 0c05 	mov.w	ip, #5
 80047d0:	f020 0007 	bic.w	r0, r0, #7
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	4303      	orrs	r3, r0
 80047da:	280f      	cmp	r0, #15
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	eb07 0300 	add.w	r3, r7, r0
 80047e2:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 80047e6:	f200 81ad 	bhi.w	8004b44 <_malloc_r+0x524>
 80047ea:	f8da 3004 	ldr.w	r3, [sl, #4]
 80047ee:	4657      	mov	r7, sl
 80047f0:	4a58      	ldr	r2, [pc, #352]	; (8004954 <_malloc_r+0x334>)
 80047f2:	6810      	ldr	r0, [r2, #0]
 80047f4:	4288      	cmp	r0, r1
 80047f6:	bf38      	it	cc
 80047f8:	6011      	strcc	r1, [r2, #0]
 80047fa:	4a57      	ldr	r2, [pc, #348]	; (8004958 <_malloc_r+0x338>)
 80047fc:	6810      	ldr	r0, [r2, #0]
 80047fe:	4288      	cmp	r0, r1
 8004800:	bf38      	it	cc
 8004802:	6011      	strcc	r1, [r2, #0]
 8004804:	f023 0803 	bic.w	r8, r3, #3
 8004808:	4544      	cmp	r4, r8
 800480a:	eba8 0304 	sub.w	r3, r8, r4
 800480e:	d802      	bhi.n	8004816 <_malloc_r+0x1f6>
 8004810:	2b0f      	cmp	r3, #15
 8004812:	f300 8086 	bgt.w	8004922 <_malloc_r+0x302>
 8004816:	4628      	mov	r0, r5
 8004818:	2400      	movs	r4, #0
 800481a:	f000 fa13 	bl	8004c44 <__malloc_unlock>
 800481e:	e728      	b.n	8004672 <_malloc_r+0x52>
 8004820:	2400      	movs	r4, #0
 8004822:	230c      	movs	r3, #12
 8004824:	4620      	mov	r0, r4
 8004826:	602b      	str	r3, [r5, #0]
 8004828:	b003      	add	sp, #12
 800482a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482e:	68d3      	ldr	r3, [r2, #12]
 8004830:	429a      	cmp	r2, r3
 8004832:	f47f af0d 	bne.w	8004650 <_malloc_r+0x30>
 8004836:	3002      	adds	r0, #2
 8004838:	6933      	ldr	r3, [r6, #16]
 800483a:	f8df e120 	ldr.w	lr, [pc, #288]	; 800495c <_malloc_r+0x33c>
 800483e:	4573      	cmp	r3, lr
 8004840:	f43f af51 	beq.w	80046e6 <_malloc_r+0xc6>
 8004844:	6859      	ldr	r1, [r3, #4]
 8004846:	f021 0103 	bic.w	r1, r1, #3
 800484a:	1b0a      	subs	r2, r1, r4
 800484c:	2a0f      	cmp	r2, #15
 800484e:	f300 80e8 	bgt.w	8004a22 <_malloc_r+0x402>
 8004852:	2a00      	cmp	r2, #0
 8004854:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 8004858:	da58      	bge.n	800490c <_malloc_r+0x2ec>
 800485a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800485e:	f080 8093 	bcs.w	8004988 <_malloc_r+0x368>
 8004862:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
 8004866:	2201      	movs	r2, #1
 8004868:	0949      	lsrs	r1, r1, #5
 800486a:	f10c 0c01 	add.w	ip, ip, #1
 800486e:	408a      	lsls	r2, r1
 8004870:	6871      	ldr	r1, [r6, #4]
 8004872:	f856 703c 	ldr.w	r7, [r6, ip, lsl #3]
 8004876:	430a      	orrs	r2, r1
 8004878:	eb06 01cc 	add.w	r1, r6, ip, lsl #3
 800487c:	3908      	subs	r1, #8
 800487e:	6072      	str	r2, [r6, #4]
 8004880:	e9c3 7102 	strd	r7, r1, [r3, #8]
 8004884:	f846 303c 	str.w	r3, [r6, ip, lsl #3]
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	1083      	asrs	r3, r0, #2
 800488c:	2101      	movs	r1, #1
 800488e:	4099      	lsls	r1, r3
 8004890:	4291      	cmp	r1, r2
 8004892:	f63f af2f 	bhi.w	80046f4 <_malloc_r+0xd4>
 8004896:	4211      	tst	r1, r2
 8004898:	d105      	bne.n	80048a6 <_malloc_r+0x286>
 800489a:	f020 0003 	bic.w	r0, r0, #3
 800489e:	0049      	lsls	r1, r1, #1
 80048a0:	3004      	adds	r0, #4
 80048a2:	4211      	tst	r1, r2
 80048a4:	d0fb      	beq.n	800489e <_malloc_r+0x27e>
 80048a6:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 80048aa:	4680      	mov	r8, r0
 80048ac:	46cc      	mov	ip, r9
 80048ae:	f8dc 700c 	ldr.w	r7, [ip, #12]
 80048b2:	45bc      	cmp	ip, r7
 80048b4:	d107      	bne.n	80048c6 <_malloc_r+0x2a6>
 80048b6:	e098      	b.n	80049ea <_malloc_r+0x3ca>
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	f280 809f 	bge.w	80049fc <_malloc_r+0x3dc>
 80048be:	68ff      	ldr	r7, [r7, #12]
 80048c0:	45bc      	cmp	ip, r7
 80048c2:	f000 8092 	beq.w	80049ea <_malloc_r+0x3ca>
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	f022 0203 	bic.w	r2, r2, #3
 80048cc:	1b13      	subs	r3, r2, r4
 80048ce:	2b0f      	cmp	r3, #15
 80048d0:	ddf2      	ble.n	80048b8 <_malloc_r+0x298>
 80048d2:	1939      	adds	r1, r7, r4
 80048d4:	f044 0401 	orr.w	r4, r4, #1
 80048d8:	4628      	mov	r0, r5
 80048da:	607c      	str	r4, [r7, #4]
 80048dc:	f043 0401 	orr.w	r4, r3, #1
 80048e0:	e9d7 c502 	ldrd	ip, r5, [r7, #8]
 80048e4:	f8cc 500c 	str.w	r5, [ip, #12]
 80048e8:	f8c5 c008 	str.w	ip, [r5, #8]
 80048ec:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80048f0:	604c      	str	r4, [r1, #4]
 80048f2:	f107 0408 	add.w	r4, r7, #8
 80048f6:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 80048fa:	50bb      	str	r3, [r7, r2]
 80048fc:	f000 f9a2 	bl	8004c44 <__malloc_unlock>
 8004900:	e6b7      	b.n	8004672 <_malloc_r+0x52>
 8004902:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004906:	2040      	movs	r0, #64	; 0x40
 8004908:	273f      	movs	r7, #63	; 0x3f
 800490a:	e6d0      	b.n	80046ae <_malloc_r+0x8e>
 800490c:	4419      	add	r1, r3
 800490e:	f103 0408 	add.w	r4, r3, #8
 8004912:	4628      	mov	r0, r5
 8004914:	684b      	ldr	r3, [r1, #4]
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	604b      	str	r3, [r1, #4]
 800491c:	f000 f992 	bl	8004c44 <__malloc_unlock>
 8004920:	e6a7      	b.n	8004672 <_malloc_r+0x52>
 8004922:	193a      	adds	r2, r7, r4
 8004924:	f044 0401 	orr.w	r4, r4, #1
 8004928:	f043 0301 	orr.w	r3, r3, #1
 800492c:	4628      	mov	r0, r5
 800492e:	607c      	str	r4, [r7, #4]
 8004930:	f107 0408 	add.w	r4, r7, #8
 8004934:	60b2      	str	r2, [r6, #8]
 8004936:	6053      	str	r3, [r2, #4]
 8004938:	f000 f984 	bl	8004c44 <__malloc_unlock>
 800493c:	4620      	mov	r0, r4
 800493e:	b003      	add	sp, #12
 8004940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004944:	20000438 	.word	0x20000438
 8004948:	20000940 	.word	0x20000940
 800494c:	20000840 	.word	0x20000840
 8004950:	20000910 	.word	0x20000910
 8004954:	20000938 	.word	0x20000938
 8004958:	2000093c 	.word	0x2000093c
 800495c:	20000440 	.word	0x20000440
 8004960:	fffff000 	.word	0xfffff000
 8004964:	441a      	add	r2, r3
 8004966:	f103 0408 	add.w	r4, r3, #8
 800496a:	4628      	mov	r0, r5
 800496c:	e9d3 6102 	ldrd	r6, r1, [r3, #8]
 8004970:	6853      	ldr	r3, [r2, #4]
 8004972:	60f1      	str	r1, [r6, #12]
 8004974:	f043 0301 	orr.w	r3, r3, #1
 8004978:	608e      	str	r6, [r1, #8]
 800497a:	6053      	str	r3, [r2, #4]
 800497c:	f000 f962 	bl	8004c44 <__malloc_unlock>
 8004980:	4620      	mov	r0, r4
 8004982:	b003      	add	sp, #12
 8004984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004988:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800498c:	ea4f 2251 	mov.w	r2, r1, lsr #9
 8004990:	d359      	bcc.n	8004a46 <_malloc_r+0x426>
 8004992:	2a14      	cmp	r2, #20
 8004994:	f200 80aa 	bhi.w	8004aec <_malloc_r+0x4cc>
 8004998:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800499c:	325b      	adds	r2, #91	; 0x5b
 800499e:	00ff      	lsls	r7, r7, #3
 80049a0:	eb06 0c07 	add.w	ip, r6, r7
 80049a4:	59f7      	ldr	r7, [r6, r7]
 80049a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80049aa:	45bc      	cmp	ip, r7
 80049ac:	f000 8086 	beq.w	8004abc <_malloc_r+0x49c>
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	f022 0203 	bic.w	r2, r2, #3
 80049b6:	428a      	cmp	r2, r1
 80049b8:	d902      	bls.n	80049c0 <_malloc_r+0x3a0>
 80049ba:	68bf      	ldr	r7, [r7, #8]
 80049bc:	45bc      	cmp	ip, r7
 80049be:	d1f7      	bne.n	80049b0 <_malloc_r+0x390>
 80049c0:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 80049c4:	6872      	ldr	r2, [r6, #4]
 80049c6:	e9c3 7c02 	strd	r7, ip, [r3, #8]
 80049ca:	f8cc 3008 	str.w	r3, [ip, #8]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	e75b      	b.n	800488a <_malloc_r+0x26a>
 80049d2:	2b14      	cmp	r3, #20
 80049d4:	d93d      	bls.n	8004a52 <_malloc_r+0x432>
 80049d6:	2b54      	cmp	r3, #84	; 0x54
 80049d8:	f200 8090 	bhi.w	8004afc <_malloc_r+0x4dc>
 80049dc:	0b23      	lsrs	r3, r4, #12
 80049de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 80049e2:	f103 076e 	add.w	r7, r3, #110	; 0x6e
 80049e6:	00c3      	lsls	r3, r0, #3
 80049e8:	e661      	b.n	80046ae <_malloc_r+0x8e>
 80049ea:	f108 0801 	add.w	r8, r8, #1
 80049ee:	f10c 0c08 	add.w	ip, ip, #8
 80049f2:	f018 0f03 	tst.w	r8, #3
 80049f6:	f47f af5a 	bne.w	80048ae <_malloc_r+0x28e>
 80049fa:	e035      	b.n	8004a68 <_malloc_r+0x448>
 80049fc:	443a      	add	r2, r7
 80049fe:	463c      	mov	r4, r7
 8004a00:	68f9      	ldr	r1, [r7, #12]
 8004a02:	4628      	mov	r0, r5
 8004a04:	6853      	ldr	r3, [r2, #4]
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6053      	str	r3, [r2, #4]
 8004a0c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8004a10:	60d9      	str	r1, [r3, #12]
 8004a12:	608b      	str	r3, [r1, #8]
 8004a14:	f000 f916 	bl	8004c44 <__malloc_unlock>
 8004a18:	e62b      	b.n	8004672 <_malloc_r+0x52>
 8004a1a:	08e0      	lsrs	r0, r4, #3
 8004a1c:	f104 0208 	add.w	r2, r4, #8
 8004a20:	e60e      	b.n	8004640 <_malloc_r+0x20>
 8004a22:	4628      	mov	r0, r5
 8004a24:	191d      	adds	r5, r3, r4
 8004a26:	f044 0401 	orr.w	r4, r4, #1
 8004a2a:	605c      	str	r4, [r3, #4]
 8004a2c:	f042 0401 	orr.w	r4, r2, #1
 8004a30:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8004a34:	606c      	str	r4, [r5, #4]
 8004a36:	f103 0408 	add.w	r4, r3, #8
 8004a3a:	e9c5 ee02 	strd	lr, lr, [r5, #8]
 8004a3e:	505a      	str	r2, [r3, r1]
 8004a40:	f000 f900 	bl	8004c44 <__malloc_unlock>
 8004a44:	e615      	b.n	8004672 <_malloc_r+0x52>
 8004a46:	098a      	lsrs	r2, r1, #6
 8004a48:	f102 0739 	add.w	r7, r2, #57	; 0x39
 8004a4c:	3238      	adds	r2, #56	; 0x38
 8004a4e:	00ff      	lsls	r7, r7, #3
 8004a50:	e7a6      	b.n	80049a0 <_malloc_r+0x380>
 8004a52:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8004a56:	f103 075b 	add.w	r7, r3, #91	; 0x5b
 8004a5a:	00c3      	lsls	r3, r0, #3
 8004a5c:	e627      	b.n	80046ae <_malloc_r+0x8e>
 8004a5e:	f859 3908 	ldr.w	r3, [r9], #-8
 8004a62:	454b      	cmp	r3, r9
 8004a64:	f040 8092 	bne.w	8004b8c <_malloc_r+0x56c>
 8004a68:	f010 0f03 	tst.w	r0, #3
 8004a6c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8004a70:	d1f5      	bne.n	8004a5e <_malloc_r+0x43e>
 8004a72:	6873      	ldr	r3, [r6, #4]
 8004a74:	ea23 0301 	bic.w	r3, r3, r1
 8004a78:	6073      	str	r3, [r6, #4]
 8004a7a:	0049      	lsls	r1, r1, #1
 8004a7c:	f43f ae3a 	beq.w	80046f4 <_malloc_r+0xd4>
 8004a80:	4299      	cmp	r1, r3
 8004a82:	d903      	bls.n	8004a8c <_malloc_r+0x46c>
 8004a84:	e636      	b.n	80046f4 <_malloc_r+0xd4>
 8004a86:	0049      	lsls	r1, r1, #1
 8004a88:	f108 0804 	add.w	r8, r8, #4
 8004a8c:	4219      	tst	r1, r3
 8004a8e:	d0fa      	beq.n	8004a86 <_malloc_r+0x466>
 8004a90:	4640      	mov	r0, r8
 8004a92:	e708      	b.n	80048a6 <_malloc_r+0x286>
 8004a94:	68b7      	ldr	r7, [r6, #8]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	e6b4      	b.n	8004804 <_malloc_r+0x1e4>
 8004a9a:	f3cb 000b 	ubfx	r0, fp, #0, #12
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	f47f ae5b 	bne.w	800475a <_malloc_r+0x13a>
 8004aa4:	44c8      	add	r8, r9
 8004aa6:	68b7      	ldr	r7, [r6, #8]
 8004aa8:	f048 0301 	orr.w	r3, r8, #1
 8004aac:	607b      	str	r3, [r7, #4]
 8004aae:	e69f      	b.n	80047f0 <_malloc_r+0x1d0>
 8004ab0:	f8c3 a000 	str.w	sl, [r3]
 8004ab4:	e659      	b.n	800476a <_malloc_r+0x14a>
 8004ab6:	f108 0810 	add.w	r8, r8, #16
 8004aba:	e638      	b.n	800472e <_malloc_r+0x10e>
 8004abc:	1092      	asrs	r2, r2, #2
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4091      	lsls	r1, r2
 8004ac2:	6872      	ldr	r2, [r6, #4]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	6072      	str	r2, [r6, #4]
 8004ac8:	e77d      	b.n	80049c6 <_malloc_r+0x3a6>
 8004aca:	eb0a 0108 	add.w	r1, sl, r8
 8004ace:	4628      	mov	r0, r5
 8004ad0:	9301      	str	r3, [sp, #4]
 8004ad2:	4249      	negs	r1, r1
 8004ad4:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
 8004ad8:	4659      	mov	r1, fp
 8004ada:	f000 f8b9 	bl	8004c50 <_sbrk_r>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	4a2b      	ldr	r2, [pc, #172]	; (8004b90 <_malloc_r+0x570>)
 8004ae2:	9b01      	ldr	r3, [sp, #4]
 8004ae4:	f47f ae5a 	bne.w	800479c <_malloc_r+0x17c>
 8004ae8:	469b      	mov	fp, r3
 8004aea:	e65b      	b.n	80047a4 <_malloc_r+0x184>
 8004aec:	2a54      	cmp	r2, #84	; 0x54
 8004aee:	d815      	bhi.n	8004b1c <_malloc_r+0x4fc>
 8004af0:	0b0a      	lsrs	r2, r1, #12
 8004af2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 8004af6:	326e      	adds	r2, #110	; 0x6e
 8004af8:	00ff      	lsls	r7, r7, #3
 8004afa:	e751      	b.n	80049a0 <_malloc_r+0x380>
 8004afc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004b00:	d815      	bhi.n	8004b2e <_malloc_r+0x50e>
 8004b02:	0be3      	lsrs	r3, r4, #15
 8004b04:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004b08:	f103 0777 	add.w	r7, r3, #119	; 0x77
 8004b0c:	00c3      	lsls	r3, r0, #3
 8004b0e:	e5ce      	b.n	80046ae <_malloc_r+0x8e>
 8004b10:	4657      	mov	r7, sl
 8004b12:	e66d      	b.n	80047f0 <_malloc_r+0x1d0>
 8004b14:	2301      	movs	r3, #1
 8004b16:	f8ca 3004 	str.w	r3, [sl, #4]
 8004b1a:	e67c      	b.n	8004816 <_malloc_r+0x1f6>
 8004b1c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004b20:	d821      	bhi.n	8004b66 <_malloc_r+0x546>
 8004b22:	0bca      	lsrs	r2, r1, #15
 8004b24:	f102 0778 	add.w	r7, r2, #120	; 0x78
 8004b28:	3277      	adds	r2, #119	; 0x77
 8004b2a:	00ff      	lsls	r7, r7, #3
 8004b2c:	e738      	b.n	80049a0 <_malloc_r+0x380>
 8004b2e:	f240 5254 	movw	r2, #1364	; 0x554
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d821      	bhi.n	8004b7a <_malloc_r+0x55a>
 8004b36:	0ca3      	lsrs	r3, r4, #18
 8004b38:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8004b3c:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 8004b40:	00c3      	lsls	r3, r0, #3
 8004b42:	e5b4      	b.n	80046ae <_malloc_r+0x8e>
 8004b44:	f107 0108 	add.w	r1, r7, #8
 8004b48:	4628      	mov	r0, r5
 8004b4a:	f000 f937 	bl	8004dbc <_free_r>
 8004b4e:	68b7      	ldr	r7, [r6, #8]
 8004b50:	4a0f      	ldr	r2, [pc, #60]	; (8004b90 <_malloc_r+0x570>)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6811      	ldr	r1, [r2, #0]
 8004b56:	e64b      	b.n	80047f0 <_malloc_r+0x1d0>
 8004b58:	3b08      	subs	r3, #8
 8004b5a:	f04f 0b00 	mov.w	fp, #0
 8004b5e:	4498      	add	r8, r3
 8004b60:	eba8 080a 	sub.w	r8, r8, sl
 8004b64:	e61e      	b.n	80047a4 <_malloc_r+0x184>
 8004b66:	f240 5754 	movw	r7, #1364	; 0x554
 8004b6a:	42ba      	cmp	r2, r7
 8004b6c:	d80a      	bhi.n	8004b84 <_malloc_r+0x564>
 8004b6e:	0c8a      	lsrs	r2, r1, #18
 8004b70:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 8004b74:	327c      	adds	r2, #124	; 0x7c
 8004b76:	00ff      	lsls	r7, r7, #3
 8004b78:	e712      	b.n	80049a0 <_malloc_r+0x380>
 8004b7a:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8004b7e:	207f      	movs	r0, #127	; 0x7f
 8004b80:	277e      	movs	r7, #126	; 0x7e
 8004b82:	e594      	b.n	80046ae <_malloc_r+0x8e>
 8004b84:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 8004b88:	227e      	movs	r2, #126	; 0x7e
 8004b8a:	e709      	b.n	80049a0 <_malloc_r+0x380>
 8004b8c:	6873      	ldr	r3, [r6, #4]
 8004b8e:	e774      	b.n	8004a7a <_malloc_r+0x45a>
 8004b90:	20000910 	.word	0x20000910

08004b94 <memset>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	0786      	lsls	r6, r0, #30
 8004b98:	d048      	beq.n	8004c2c <memset+0x98>
 8004b9a:	1e54      	subs	r4, r2, #1
 8004b9c:	2a00      	cmp	r2, #0
 8004b9e:	d03f      	beq.n	8004c20 <memset+0x8c>
 8004ba0:	b2ca      	uxtb	r2, r1
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	e001      	b.n	8004baa <memset+0x16>
 8004ba6:	3c01      	subs	r4, #1
 8004ba8:	d33a      	bcc.n	8004c20 <memset+0x8c>
 8004baa:	f803 2b01 	strb.w	r2, [r3], #1
 8004bae:	079d      	lsls	r5, r3, #30
 8004bb0:	d1f9      	bne.n	8004ba6 <memset+0x12>
 8004bb2:	2c03      	cmp	r4, #3
 8004bb4:	d92d      	bls.n	8004c12 <memset+0x7e>
 8004bb6:	b2cd      	uxtb	r5, r1
 8004bb8:	2c0f      	cmp	r4, #15
 8004bba:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8004bbe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8004bc2:	d936      	bls.n	8004c32 <memset+0x9e>
 8004bc4:	f1a4 0c10 	sub.w	ip, r4, #16
 8004bc8:	f103 0e20 	add.w	lr, r3, #32
 8004bcc:	f103 0210 	add.w	r2, r3, #16
 8004bd0:	f02c 060f 	bic.w	r6, ip, #15
 8004bd4:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8004bd8:	44b6      	add	lr, r6
 8004bda:	e942 5504 	strd	r5, r5, [r2, #-16]
 8004bde:	e942 5502 	strd	r5, r5, [r2, #-8]
 8004be2:	3210      	adds	r2, #16
 8004be4:	4572      	cmp	r2, lr
 8004be6:	d1f8      	bne.n	8004bda <memset+0x46>
 8004be8:	f10c 0201 	add.w	r2, ip, #1
 8004bec:	f014 0f0c 	tst.w	r4, #12
 8004bf0:	f004 0c0f 	and.w	ip, r4, #15
 8004bf4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 8004bf8:	d013      	beq.n	8004c22 <memset+0x8e>
 8004bfa:	f1ac 0304 	sub.w	r3, ip, #4
 8004bfe:	f023 0303 	bic.w	r3, r3, #3
 8004c02:	3304      	adds	r3, #4
 8004c04:	4413      	add	r3, r2
 8004c06:	f842 5b04 	str.w	r5, [r2], #4
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d1fb      	bne.n	8004c06 <memset+0x72>
 8004c0e:	f00c 0403 	and.w	r4, ip, #3
 8004c12:	b12c      	cbz	r4, 8004c20 <memset+0x8c>
 8004c14:	b2ca      	uxtb	r2, r1
 8004c16:	441c      	add	r4, r3
 8004c18:	f803 2b01 	strb.w	r2, [r3], #1
 8004c1c:	429c      	cmp	r4, r3
 8004c1e:	d1fb      	bne.n	8004c18 <memset+0x84>
 8004c20:	bd70      	pop	{r4, r5, r6, pc}
 8004c22:	4664      	mov	r4, ip
 8004c24:	4613      	mov	r3, r2
 8004c26:	2c00      	cmp	r4, #0
 8004c28:	d1f4      	bne.n	8004c14 <memset+0x80>
 8004c2a:	e7f9      	b.n	8004c20 <memset+0x8c>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4614      	mov	r4, r2
 8004c30:	e7bf      	b.n	8004bb2 <memset+0x1e>
 8004c32:	461a      	mov	r2, r3
 8004c34:	46a4      	mov	ip, r4
 8004c36:	e7e0      	b.n	8004bfa <memset+0x66>

08004c38 <__malloc_lock>:
 8004c38:	4801      	ldr	r0, [pc, #4]	; (8004c40 <__malloc_lock+0x8>)
 8004c3a:	f000 b9c5 	b.w	8004fc8 <__retarget_lock_acquire_recursive>
 8004c3e:	bf00      	nop
 8004c40:	20000948 	.word	0x20000948

08004c44 <__malloc_unlock>:
 8004c44:	4801      	ldr	r0, [pc, #4]	; (8004c4c <__malloc_unlock+0x8>)
 8004c46:	f000 b9c1 	b.w	8004fcc <__retarget_lock_release_recursive>
 8004c4a:	bf00      	nop
 8004c4c:	20000948 	.word	0x20000948

08004c50 <_sbrk_r>:
 8004c50:	b538      	push	{r3, r4, r5, lr}
 8004c52:	2200      	movs	r2, #0
 8004c54:	4d06      	ldr	r5, [pc, #24]	; (8004c70 <_sbrk_r+0x20>)
 8004c56:	4604      	mov	r4, r0
 8004c58:	4608      	mov	r0, r1
 8004c5a:	602a      	str	r2, [r5, #0]
 8004c5c:	f000 fa00 	bl	8005060 <_sbrk>
 8004c60:	1c43      	adds	r3, r0, #1
 8004c62:	d000      	beq.n	8004c66 <_sbrk_r+0x16>
 8004c64:	bd38      	pop	{r3, r4, r5, pc}
 8004c66:	682b      	ldr	r3, [r5, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0fb      	beq.n	8004c64 <_sbrk_r+0x14>
 8004c6c:	6023      	str	r3, [r4, #0]
 8004c6e:	bd38      	pop	{r3, r4, r5, pc}
 8004c70:	2000094c 	.word	0x2000094c

08004c74 <strlen>:
 8004c74:	f020 0103 	bic.w	r1, r0, #3
 8004c78:	f010 0003 	ands.w	r0, r0, #3
 8004c7c:	f1c0 0000 	rsb	r0, r0, #0
 8004c80:	f851 3b04 	ldr.w	r3, [r1], #4
 8004c84:	f100 0c04 	add.w	ip, r0, #4
 8004c88:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004c8c:	f06f 0200 	mvn.w	r2, #0
 8004c90:	bf1c      	itt	ne
 8004c92:	fa22 f20c 	lsrne.w	r2, r2, ip
 8004c96:	4313      	orrne	r3, r2
 8004c98:	f04f 0c01 	mov.w	ip, #1
 8004c9c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8004ca0:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8004ca4:	eba3 020c 	sub.w	r2, r3, ip
 8004ca8:	ea22 0203 	bic.w	r2, r2, r3
 8004cac:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8004cb0:	bf04      	itt	eq
 8004cb2:	f851 3b04 	ldreq.w	r3, [r1], #4
 8004cb6:	3004      	addeq	r0, #4
 8004cb8:	d0f4      	beq.n	8004ca4 <strlen+0x30>
 8004cba:	f1c2 0100 	rsb	r1, r2, #0
 8004cbe:	ea02 0201 	and.w	r2, r2, r1
 8004cc2:	fab2 f282 	clz	r2, r2
 8004cc6:	f1c2 021f 	rsb	r2, r2, #31
 8004cca:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8004cce:	4770      	bx	lr

08004cd0 <register_fini>:
 8004cd0:	4b02      	ldr	r3, [pc, #8]	; (8004cdc <register_fini+0xc>)
 8004cd2:	b113      	cbz	r3, 8004cda <register_fini+0xa>
 8004cd4:	4802      	ldr	r0, [pc, #8]	; (8004ce0 <register_fini+0x10>)
 8004cd6:	f000 b805 	b.w	8004ce4 <atexit>
 8004cda:	4770      	bx	lr
 8004cdc:	00000000 	.word	0x00000000
 8004ce0:	08004cf1 	.word	0x08004cf1

08004ce4 <atexit>:
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 b970 	b.w	8004fd0 <__register_exitproc>

08004cf0 <__libc_fini_array>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <__libc_fini_array+0x24>)
 8004cf4:	4d08      	ldr	r5, [pc, #32]	; (8004d18 <__libc_fini_array+0x28>)
 8004cf6:	1b5b      	subs	r3, r3, r5
 8004cf8:	109c      	asrs	r4, r3, #2
 8004cfa:	d007      	beq.n	8004d0c <__libc_fini_array+0x1c>
 8004cfc:	3b04      	subs	r3, #4
 8004cfe:	441d      	add	r5, r3
 8004d00:	3c01      	subs	r4, #1
 8004d02:	f855 3904 	ldr.w	r3, [r5], #-4
 8004d06:	4798      	blx	r3
 8004d08:	2c00      	cmp	r4, #0
 8004d0a:	d1f9      	bne.n	8004d00 <__libc_fini_array+0x10>
 8004d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d10:	f000 b9bc 	b.w	800508c <_fini>
 8004d14:	080145c0 	.word	0x080145c0
 8004d18:	080145bc 	.word	0x080145bc

08004d1c <_malloc_trim_r>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	4f23      	ldr	r7, [pc, #140]	; (8004dac <_malloc_trim_r+0x90>)
 8004d20:	460c      	mov	r4, r1
 8004d22:	4606      	mov	r6, r0
 8004d24:	f7ff ff88 	bl	8004c38 <__malloc_lock>
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	f640 73ef 	movw	r3, #4079	; 0xfef
 8004d2e:	6855      	ldr	r5, [r2, #4]
 8004d30:	1b1b      	subs	r3, r3, r4
 8004d32:	4c1f      	ldr	r4, [pc, #124]	; (8004db0 <_malloc_trim_r+0x94>)
 8004d34:	f025 0503 	bic.w	r5, r5, #3
 8004d38:	442b      	add	r3, r5
 8004d3a:	401c      	ands	r4, r3
 8004d3c:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 8004d40:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004d44:	db07      	blt.n	8004d56 <_malloc_trim_r+0x3a>
 8004d46:	2100      	movs	r1, #0
 8004d48:	4630      	mov	r0, r6
 8004d4a:	f7ff ff81 	bl	8004c50 <_sbrk_r>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	442b      	add	r3, r5
 8004d52:	4298      	cmp	r0, r3
 8004d54:	d004      	beq.n	8004d60 <_malloc_trim_r+0x44>
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7ff ff74 	bl	8004c44 <__malloc_unlock>
 8004d5c:	2000      	movs	r0, #0
 8004d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d60:	4261      	negs	r1, r4
 8004d62:	4630      	mov	r0, r6
 8004d64:	f7ff ff74 	bl	8004c50 <_sbrk_r>
 8004d68:	3001      	adds	r0, #1
 8004d6a:	d00d      	beq.n	8004d88 <_malloc_trim_r+0x6c>
 8004d6c:	1b2d      	subs	r5, r5, r4
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <_malloc_trim_r+0x98>)
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	4630      	mov	r0, r6
 8004d74:	f045 0501 	orr.w	r5, r5, #1
 8004d78:	6055      	str	r5, [r2, #4]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	1b12      	subs	r2, r2, r4
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f7ff ff60 	bl	8004c44 <__malloc_unlock>
 8004d84:	2001      	movs	r0, #1
 8004d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d88:	2100      	movs	r1, #0
 8004d8a:	4630      	mov	r0, r6
 8004d8c:	f7ff ff60 	bl	8004c50 <_sbrk_r>
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	1a83      	subs	r3, r0, r2
 8004d94:	2b0f      	cmp	r3, #15
 8004d96:	ddde      	ble.n	8004d56 <_malloc_trim_r+0x3a>
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	4905      	ldr	r1, [pc, #20]	; (8004db4 <_malloc_trim_r+0x98>)
 8004d9e:	6053      	str	r3, [r2, #4]
 8004da0:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <_malloc_trim_r+0x9c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	1ac0      	subs	r0, r0, r3
 8004da6:	6008      	str	r0, [r1, #0]
 8004da8:	e7d5      	b.n	8004d56 <_malloc_trim_r+0x3a>
 8004daa:	bf00      	nop
 8004dac:	20000438 	.word	0x20000438
 8004db0:	fffff000 	.word	0xfffff000
 8004db4:	20000910 	.word	0x20000910
 8004db8:	20000840 	.word	0x20000840

08004dbc <_free_r>:
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	d061      	beq.n	8004e84 <_free_r+0xc8>
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	460c      	mov	r4, r1
 8004dc4:	4606      	mov	r6, r0
 8004dc6:	f7ff ff37 	bl	8004c38 <__malloc_lock>
 8004dca:	4f7c      	ldr	r7, [pc, #496]	; (8004fbc <_free_r+0x200>)
 8004dcc:	f854 2c04 	ldr.w	r2, [r4, #-4]
 8004dd0:	f1a4 0508 	sub.w	r5, r4, #8
 8004dd4:	68b8      	ldr	r0, [r7, #8]
 8004dd6:	f022 0101 	bic.w	r1, r2, #1
 8004dda:	eb05 0c01 	add.w	ip, r5, r1
 8004dde:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004de2:	4560      	cmp	r0, ip
 8004de4:	f023 0303 	bic.w	r3, r3, #3
 8004de8:	f000 808b 	beq.w	8004f02 <_free_r+0x146>
 8004dec:	07d2      	lsls	r2, r2, #31
 8004dee:	f8cc 3004 	str.w	r3, [ip, #4]
 8004df2:	d432      	bmi.n	8004e5a <_free_r+0x9e>
 8004df4:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8004df8:	f107 0008 	add.w	r0, r7, #8
 8004dfc:	1aad      	subs	r5, r5, r2
 8004dfe:	4411      	add	r1, r2
 8004e00:	68aa      	ldr	r2, [r5, #8]
 8004e02:	4282      	cmp	r2, r0
 8004e04:	d06a      	beq.n	8004edc <_free_r+0x120>
 8004e06:	eb0c 0403 	add.w	r4, ip, r3
 8004e0a:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8004e0e:	68ec      	ldr	r4, [r5, #12]
 8004e10:	f01e 0f01 	tst.w	lr, #1
 8004e14:	60d4      	str	r4, [r2, #12]
 8004e16:	60a2      	str	r2, [r4, #8]
 8004e18:	f000 8097 	beq.w	8004f4a <_free_r+0x18e>
 8004e1c:	f041 0301 	orr.w	r3, r1, #1
 8004e20:	606b      	str	r3, [r5, #4]
 8004e22:	f8cc 1000 	str.w	r1, [ip]
 8004e26:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004e2a:	d235      	bcs.n	8004e98 <_free_r+0xdc>
 8004e2c:	094a      	lsrs	r2, r1, #5
 8004e2e:	08cb      	lsrs	r3, r1, #3
 8004e30:	2101      	movs	r1, #1
 8004e32:	3301      	adds	r3, #1
 8004e34:	4091      	lsls	r1, r2
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8004e3e:	6079      	str	r1, [r7, #4]
 8004e40:	3a08      	subs	r2, #8
 8004e42:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 8004e46:	e9c5 1202 	strd	r1, r2, [r5, #8]
 8004e4a:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 8004e4e:	60cd      	str	r5, [r1, #12]
 8004e50:	4630      	mov	r0, r6
 8004e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e56:	f7ff bef5 	b.w	8004c44 <__malloc_unlock>
 8004e5a:	eb0c 0203 	add.w	r2, ip, r3
 8004e5e:	6852      	ldr	r2, [r2, #4]
 8004e60:	07d0      	lsls	r0, r2, #31
 8004e62:	d410      	bmi.n	8004e86 <_free_r+0xca>
 8004e64:	4419      	add	r1, r3
 8004e66:	f107 0008 	add.w	r0, r7, #8
 8004e6a:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004e6e:	4283      	cmp	r3, r0
 8004e70:	d073      	beq.n	8004f5a <_free_r+0x19e>
 8004e72:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8004e76:	60da      	str	r2, [r3, #12]
 8004e78:	6093      	str	r3, [r2, #8]
 8004e7a:	f041 0301 	orr.w	r3, r1, #1
 8004e7e:	606b      	str	r3, [r5, #4]
 8004e80:	5069      	str	r1, [r5, r1]
 8004e82:	e7d0      	b.n	8004e26 <_free_r+0x6a>
 8004e84:	4770      	bx	lr
 8004e86:	f041 0301 	orr.w	r3, r1, #1
 8004e8a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004e8e:	f844 3c04 	str.w	r3, [r4, #-4]
 8004e92:	f8cc 1000 	str.w	r1, [ip]
 8004e96:	d3c9      	bcc.n	8004e2c <_free_r+0x70>
 8004e98:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 8004e9c:	ea4f 2351 	mov.w	r3, r1, lsr #9
 8004ea0:	d248      	bcs.n	8004f34 <_free_r+0x178>
 8004ea2:	098b      	lsrs	r3, r1, #6
 8004ea4:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8004ea8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8004eac:	00c3      	lsls	r3, r0, #3
 8004eae:	18f8      	adds	r0, r7, r3
 8004eb0:	58fb      	ldr	r3, [r7, r3]
 8004eb2:	3808      	subs	r0, #8
 8004eb4:	4298      	cmp	r0, r3
 8004eb6:	d059      	beq.n	8004f6c <_free_r+0x1b0>
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	f022 0203 	bic.w	r2, r2, #3
 8004ebe:	428a      	cmp	r2, r1
 8004ec0:	d902      	bls.n	8004ec8 <_free_r+0x10c>
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	4298      	cmp	r0, r3
 8004ec6:	d1f7      	bne.n	8004eb8 <_free_r+0xfc>
 8004ec8:	68d8      	ldr	r0, [r3, #12]
 8004eca:	e9c5 3002 	strd	r3, r0, [r5, #8]
 8004ece:	6085      	str	r5, [r0, #8]
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	60dd      	str	r5, [r3, #12]
 8004ed4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ed8:	f7ff beb4 	b.w	8004c44 <__malloc_unlock>
 8004edc:	eb0c 0203 	add.w	r2, ip, r3
 8004ee0:	6852      	ldr	r2, [r2, #4]
 8004ee2:	07d2      	lsls	r2, r2, #31
 8004ee4:	d463      	bmi.n	8004fae <_free_r+0x1f2>
 8004ee6:	440b      	add	r3, r1
 8004ee8:	4630      	mov	r0, r6
 8004eea:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 8004eee:	60ca      	str	r2, [r1, #12]
 8004ef0:	6091      	str	r1, [r2, #8]
 8004ef2:	f043 0201 	orr.w	r2, r3, #1
 8004ef6:	606a      	str	r2, [r5, #4]
 8004ef8:	50eb      	str	r3, [r5, r3]
 8004efa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004efe:	f7ff bea1 	b.w	8004c44 <__malloc_unlock>
 8004f02:	440b      	add	r3, r1
 8004f04:	07d1      	lsls	r1, r2, #31
 8004f06:	d407      	bmi.n	8004f18 <_free_r+0x15c>
 8004f08:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8004f0c:	1aad      	subs	r5, r5, r2
 8004f0e:	4413      	add	r3, r2
 8004f10:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 8004f14:	60ca      	str	r2, [r1, #12]
 8004f16:	6091      	str	r1, [r2, #8]
 8004f18:	f043 0201 	orr.w	r2, r3, #1
 8004f1c:	606a      	str	r2, [r5, #4]
 8004f1e:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <_free_r+0x204>)
 8004f20:	60bd      	str	r5, [r7, #8]
 8004f22:	6812      	ldr	r2, [r2, #0]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d893      	bhi.n	8004e50 <_free_r+0x94>
 8004f28:	4b26      	ldr	r3, [pc, #152]	; (8004fc4 <_free_r+0x208>)
 8004f2a:	4630      	mov	r0, r6
 8004f2c:	6819      	ldr	r1, [r3, #0]
 8004f2e:	f7ff fef5 	bl	8004d1c <_malloc_trim_r>
 8004f32:	e78d      	b.n	8004e50 <_free_r+0x94>
 8004f34:	2b14      	cmp	r3, #20
 8004f36:	d90a      	bls.n	8004f4e <_free_r+0x192>
 8004f38:	2b54      	cmp	r3, #84	; 0x54
 8004f3a:	d81f      	bhi.n	8004f7c <_free_r+0x1c0>
 8004f3c:	0b0b      	lsrs	r3, r1, #12
 8004f3e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8004f42:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 8004f46:	00c3      	lsls	r3, r0, #3
 8004f48:	e7b1      	b.n	8004eae <_free_r+0xf2>
 8004f4a:	4419      	add	r1, r3
 8004f4c:	e78d      	b.n	8004e6a <_free_r+0xae>
 8004f4e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8004f52:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8004f56:	00c3      	lsls	r3, r0, #3
 8004f58:	e7a9      	b.n	8004eae <_free_r+0xf2>
 8004f5a:	f041 0301 	orr.w	r3, r1, #1
 8004f5e:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8004f62:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8004f66:	606b      	str	r3, [r5, #4]
 8004f68:	5069      	str	r1, [r5, r1]
 8004f6a:	e771      	b.n	8004e50 <_free_r+0x94>
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	1092      	asrs	r2, r2, #2
 8004f70:	fa01 f202 	lsl.w	r2, r1, r2
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	e7a6      	b.n	8004eca <_free_r+0x10e>
 8004f7c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8004f80:	d806      	bhi.n	8004f90 <_free_r+0x1d4>
 8004f82:	0bcb      	lsrs	r3, r1, #15
 8004f84:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8004f88:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8004f8c:	00c3      	lsls	r3, r0, #3
 8004f8e:	e78e      	b.n	8004eae <_free_r+0xf2>
 8004f90:	f240 5254 	movw	r2, #1364	; 0x554
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d806      	bhi.n	8004fa6 <_free_r+0x1ea>
 8004f98:	0c8b      	lsrs	r3, r1, #18
 8004f9a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8004f9e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004fa2:	00c3      	lsls	r3, r0, #3
 8004fa4:	e783      	b.n	8004eae <_free_r+0xf2>
 8004fa6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8004faa:	227e      	movs	r2, #126	; 0x7e
 8004fac:	e77f      	b.n	8004eae <_free_r+0xf2>
 8004fae:	f041 0301 	orr.w	r3, r1, #1
 8004fb2:	606b      	str	r3, [r5, #4]
 8004fb4:	f8cc 1000 	str.w	r1, [ip]
 8004fb8:	e74a      	b.n	8004e50 <_free_r+0x94>
 8004fba:	bf00      	nop
 8004fbc:	20000438 	.word	0x20000438
 8004fc0:	20000844 	.word	0x20000844
 8004fc4:	20000940 	.word	0x20000940

08004fc8 <__retarget_lock_acquire_recursive>:
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop

08004fcc <__retarget_lock_release_recursive>:
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop

08004fd0 <__register_exitproc>:
 8004fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fd4:	f8df a084 	ldr.w	sl, [pc, #132]	; 800505c <__register_exitproc+0x8c>
 8004fd8:	4606      	mov	r6, r0
 8004fda:	4698      	mov	r8, r3
 8004fdc:	460f      	mov	r7, r1
 8004fde:	f8da 0000 	ldr.w	r0, [sl]
 8004fe2:	4691      	mov	r9, r2
 8004fe4:	f7ff fff0 	bl	8004fc8 <__retarget_lock_acquire_recursive>
 8004fe8:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <__register_exitproc+0x88>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8004ff0:	b334      	cbz	r4, 8005040 <__register_exitproc+0x70>
 8004ff2:	6865      	ldr	r5, [r4, #4]
 8004ff4:	2d1f      	cmp	r5, #31
 8004ff6:	dc28      	bgt.n	800504a <__register_exitproc+0x7a>
 8004ff8:	b95e      	cbnz	r6, 8005012 <__register_exitproc+0x42>
 8004ffa:	1c6b      	adds	r3, r5, #1
 8004ffc:	3502      	adds	r5, #2
 8004ffe:	f8da 0000 	ldr.w	r0, [sl]
 8005002:	6063      	str	r3, [r4, #4]
 8005004:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8005008:	f7ff ffe0 	bl	8004fcc <__retarget_lock_release_recursive>
 800500c:	2000      	movs	r0, #0
 800500e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005012:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8005016:	2301      	movs	r3, #1
 8005018:	2e02      	cmp	r6, #2
 800501a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800501e:	fa03 f305 	lsl.w	r3, r3, r5
 8005022:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8005026:	ea42 0203 	orr.w	r2, r2, r3
 800502a:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800502e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8005032:	d1e2      	bne.n	8004ffa <__register_exitproc+0x2a>
 8005034:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800503e:	e7dc      	b.n	8004ffa <__register_exitproc+0x2a>
 8005040:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8005044:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8005048:	e7d3      	b.n	8004ff2 <__register_exitproc+0x22>
 800504a:	f8da 0000 	ldr.w	r0, [sl]
 800504e:	f7ff ffbd 	bl	8004fcc <__retarget_lock_release_recursive>
 8005052:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005056:	e7da      	b.n	800500e <__register_exitproc+0x3e>
 8005058:	080145b0 	.word	0x080145b0
 800505c:	20000848 	.word	0x20000848

08005060 <_sbrk>:
 8005060:	4a05      	ldr	r2, [pc, #20]	; (8005078 <_sbrk+0x18>)
 8005062:	4603      	mov	r3, r0
 8005064:	6810      	ldr	r0, [r2, #0]
 8005066:	b110      	cbz	r0, 800506e <_sbrk+0xe>
 8005068:	4403      	add	r3, r0
 800506a:	6013      	str	r3, [r2, #0]
 800506c:	4770      	bx	lr
 800506e:	4803      	ldr	r0, [pc, #12]	; (800507c <_sbrk+0x1c>)
 8005070:	4403      	add	r3, r0
 8005072:	6013      	str	r3, [r2, #0]
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	20000950 	.word	0x20000950
 800507c:	20000958 	.word	0x20000958

08005080 <_init>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	bf00      	nop
 8005084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005086:	bc08      	pop	{r3}
 8005088:	469e      	mov	lr, r3
 800508a:	4770      	bx	lr

0800508c <_fini>:
 800508c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800508e:	bf00      	nop
 8005090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005092:	bc08      	pop	{r3}
 8005094:	469e      	mov	lr, r3
 8005096:	4770      	bx	lr
