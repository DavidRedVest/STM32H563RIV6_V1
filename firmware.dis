
firmware.elf:     file format elf32-littlearm


Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	; (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	; (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	e000      	b.n	8000262 <__do_global_dtors_aux+0x12>
 8000260:	bf00      	nop
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	20000854 	.word	0x20000854
 800026c:	00000000 	.word	0x00000000
 8000270:	0800c5ec 	.word	0x0800c5ec

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	; (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	; (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <frame_dummy+0x18>)
 800027e:	e000      	b.n	8000282 <frame_dummy+0xe>
 8000280:	bf00      	nop
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	20000858 	.word	0x20000858
 800028c:	0800c5ec 	.word	0x0800c5ec

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_d2iz>:
 8000b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b44:	d215      	bcs.n	8000b72 <__aeabi_d2iz+0x36>
 8000b46:	d511      	bpl.n	8000b6c <__aeabi_d2iz+0x30>
 8000b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b50:	d912      	bls.n	8000b78 <__aeabi_d2iz+0x3c>
 8000b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	bf18      	it	ne
 8000b68:	4240      	negne	r0, r0
 8000b6a:	4770      	bx	lr
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b76:	d105      	bne.n	8000b84 <__aeabi_d2iz+0x48>
 8000b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b7c:	bf08      	it	eq
 8000b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_ldivmod>:
 8000b8c:	b97b      	cbnz	r3, 8000bae <__aeabi_ldivmod+0x22>
 8000b8e:	b972      	cbnz	r2, 8000bae <__aeabi_ldivmod+0x22>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bfbe      	ittt	lt
 8000b94:	2000      	movlt	r0, #0
 8000b96:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000b9a:	e006      	blt.n	8000baa <__aeabi_ldivmod+0x1e>
 8000b9c:	bf08      	it	eq
 8000b9e:	2800      	cmpeq	r0, #0
 8000ba0:	bf1c      	itt	ne
 8000ba2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ba6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000baa:	f000 ba03 	b.w	8000fb4 <__aeabi_idiv0>
 8000bae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb6:	2900      	cmp	r1, #0
 8000bb8:	db09      	blt.n	8000bce <__aeabi_ldivmod+0x42>
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	db1a      	blt.n	8000bf4 <__aeabi_ldivmod+0x68>
 8000bbe:	f000 f883 	bl	8000cc8 <__udivmoddi4>
 8000bc2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bca:	b004      	add	sp, #16
 8000bcc:	4770      	bx	lr
 8000bce:	4240      	negs	r0, r0
 8000bd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	db1b      	blt.n	8000c10 <__aeabi_ldivmod+0x84>
 8000bd8:	f000 f876 	bl	8000cc8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	4252      	negs	r2, r2
 8000bee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bf2:	4770      	bx	lr
 8000bf4:	4252      	negs	r2, r2
 8000bf6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000bfa:	f000 f865 	bl	8000cc8 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4240      	negs	r0, r0
 8000c0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f857 	bl	8000cc8 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4252      	negs	r2, r2
 8000c26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2a:	4770      	bx	lr

08000c2c <__aeabi_uldivmod>:
 8000c2c:	b953      	cbnz	r3, 8000c44 <__aeabi_uldivmod+0x18>
 8000c2e:	b94a      	cbnz	r2, 8000c44 <__aeabi_uldivmod+0x18>
 8000c30:	2900      	cmp	r1, #0
 8000c32:	bf08      	it	eq
 8000c34:	2800      	cmpeq	r0, #0
 8000c36:	bf1c      	itt	ne
 8000c38:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c3c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 b9b8 	b.w	8000fb4 <__aeabi_idiv0>
 8000c44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c4c:	f000 f83c 	bl	8000cc8 <__udivmoddi4>
 8000c50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c58:	b004      	add	sp, #16
 8000c5a:	4770      	bx	lr

08000c5c <__aeabi_d2lz>:
 8000c5c:	b538      	push	{r3, r4, r5, lr}
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2300      	movs	r3, #0
 8000c62:	4604      	mov	r4, r0
 8000c64:	460d      	mov	r5, r1
 8000c66:	f7ff ff41 	bl	8000aec <__aeabi_dcmplt>
 8000c6a:	b928      	cbnz	r0, 8000c78 <__aeabi_d2lz+0x1c>
 8000c6c:	4620      	mov	r0, r4
 8000c6e:	4629      	mov	r1, r5
 8000c70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c74:	f000 b80a 	b.w	8000c8c <__aeabi_d2ulz>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c7e:	f000 f805 	bl	8000c8c <__aeabi_d2ulz>
 8000c82:	4240      	negs	r0, r0
 8000c84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c88:	bd38      	pop	{r3, r4, r5, pc}
 8000c8a:	bf00      	nop

08000c8c <__aeabi_d2ulz>:
 8000c8c:	b5d0      	push	{r4, r6, r7, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <__aeabi_d2ulz+0x34>)
 8000c92:	4606      	mov	r6, r0
 8000c94:	460f      	mov	r7, r1
 8000c96:	f7ff fcb7 	bl	8000608 <__aeabi_dmul>
 8000c9a:	f000 f98d 	bl	8000fb8 <__aeabi_d2uiz>
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	f7ff fc38 	bl	8000514 <__aeabi_ui2d>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <__aeabi_d2ulz+0x38>)
 8000ca8:	f7ff fcae 	bl	8000608 <__aeabi_dmul>
 8000cac:	4602      	mov	r2, r0
 8000cae:	460b      	mov	r3, r1
 8000cb0:	4630      	mov	r0, r6
 8000cb2:	4639      	mov	r1, r7
 8000cb4:	f7ff faf0 	bl	8000298 <__aeabi_dsub>
 8000cb8:	f000 f97e 	bl	8000fb8 <__aeabi_d2uiz>
 8000cbc:	4621      	mov	r1, r4
 8000cbe:	bdd0      	pop	{r4, r6, r7, pc}
 8000cc0:	3df00000 	.word	0x3df00000
 8000cc4:	41f00000 	.word	0x41f00000

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ccc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d148      	bne.n	8000d68 <__udivmoddi4+0xa0>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d961      	bls.n	8000da0 <__udivmoddi4+0xd8>
 8000cdc:	fab2 f382 	clz	r3, r2
 8000ce0:	b143      	cbz	r3, 8000cf4 <__udivmoddi4+0x2c>
 8000ce2:	f1c3 0120 	rsb	r1, r3, #32
 8000ce6:	409f      	lsls	r7, r3
 8000ce8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cec:	409c      	lsls	r4, r3
 8000cee:	fa20 f101 	lsr.w	r1, r0, r1
 8000cf2:	430f      	orrs	r7, r1
 8000cf4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000cf8:	fa1f fe8c 	uxth.w	lr, ip
 8000cfc:	0c22      	lsrs	r2, r4, #16
 8000cfe:	fbb7 f6f1 	udiv	r6, r7, r1
 8000d02:	fb01 7716 	mls	r7, r1, r6, r7
 8000d06:	fb06 f00e 	mul.w	r0, r6, lr
 8000d0a:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0e:	4290      	cmp	r0, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x5c>
 8000d12:	eb1c 0202 	adds.w	r2, ip, r2
 8000d16:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x5a>
 8000d1c:	4290      	cmp	r0, r2
 8000d1e:	f200 8137 	bhi.w	8000f90 <__udivmoddi4+0x2c8>
 8000d22:	463e      	mov	r6, r7
 8000d24:	1a12      	subs	r2, r2, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb2 f0f1 	udiv	r0, r2, r1
 8000d2c:	fb01 2210 	mls	r2, r1, r0, r2
 8000d30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x86>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x84>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 811c 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000d4c:	4610      	mov	r0, r2
 8000d4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d52:	eba4 040e 	sub.w	r4, r4, lr
 8000d56:	2600      	movs	r6, #0
 8000d58:	b11d      	cbz	r5, 8000d62 <__udivmoddi4+0x9a>
 8000d5a:	40dc      	lsrs	r4, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e9c5 4300 	strd	r4, r3, [r5]
 8000d62:	4631      	mov	r1, r6
 8000d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	d909      	bls.n	8000d80 <__udivmoddi4+0xb8>
 8000d6c:	2d00      	cmp	r5, #0
 8000d6e:	f000 80fd 	beq.w	8000f6c <__udivmoddi4+0x2a4>
 8000d72:	2600      	movs	r6, #0
 8000d74:	e9c5 0100 	strd	r0, r1, [r5]
 8000d78:	4630      	mov	r0, r6
 8000d7a:	4631      	mov	r1, r6
 8000d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d80:	fab3 f683 	clz	r6, r3
 8000d84:	2e00      	cmp	r6, #0
 8000d86:	d14b      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	f0c0 80f2 	bcc.w	8000f72 <__udivmoddi4+0x2aa>
 8000d8e:	4282      	cmp	r2, r0
 8000d90:	f240 80ef 	bls.w	8000f72 <__udivmoddi4+0x2aa>
 8000d94:	4630      	mov	r0, r6
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e3      	beq.n	8000d62 <__udivmoddi4+0x9a>
 8000d9a:	e9c5 4700 	strd	r4, r7, [r5]
 8000d9e:	e7e0      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xdc>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f382 	clz	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f040 809d 	bne.w	8000ee8 <__udivmoddi4+0x220>
 8000dae:	1a89      	subs	r1, r1, r2
 8000db0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000db4:	b297      	uxth	r7, r2
 8000db6:	2601      	movs	r6, #1
 8000db8:	0c20      	lsrs	r0, r4, #16
 8000dba:	fbb1 f2fe 	udiv	r2, r1, lr
 8000dbe:	fb0e 1112 	mls	r1, lr, r2, r1
 8000dc2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dc6:	fb07 f002 	mul.w	r0, r7, r2
 8000dca:	4288      	cmp	r0, r1
 8000dcc:	d90f      	bls.n	8000dee <__udivmoddi4+0x126>
 8000dce:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd2:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 8000dd6:	bf2c      	ite	cs
 8000dd8:	f04f 0901 	movcs.w	r9, #1
 8000ddc:	f04f 0900 	movcc.w	r9, #0
 8000de0:	4288      	cmp	r0, r1
 8000de2:	d903      	bls.n	8000dec <__udivmoddi4+0x124>
 8000de4:	f1b9 0f00 	cmp.w	r9, #0
 8000de8:	f000 80cf 	beq.w	8000f8a <__udivmoddi4+0x2c2>
 8000dec:	4642      	mov	r2, r8
 8000dee:	1a09      	subs	r1, r1, r0
 8000df0:	b2a4      	uxth	r4, r4
 8000df2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfa:	fb00 f707 	mul.w	r7, r0, r7
 8000dfe:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e02:	42a7      	cmp	r7, r4
 8000e04:	d908      	bls.n	8000e18 <__udivmoddi4+0x150>
 8000e06:	eb1c 0404 	adds.w	r4, ip, r4
 8000e0a:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14e>
 8000e10:	42a7      	cmp	r7, r4
 8000e12:	f200 80b4 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e16:	4608      	mov	r0, r1
 8000e18:	1be4      	subs	r4, r4, r7
 8000e1a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000e1e:	e79b      	b.n	8000d58 <__udivmoddi4+0x90>
 8000e20:	f1c6 0720 	rsb	r7, r6, #32
 8000e24:	40b3      	lsls	r3, r6
 8000e26:	fa01 f406 	lsl.w	r4, r1, r6
 8000e2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2e:	40f9      	lsrs	r1, r7
 8000e30:	40b2      	lsls	r2, r6
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f307 	lsr.w	r3, r0, r7
 8000e3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	fb09 1118 	mls	r1, r9, r8, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb08 f00e 	mul.w	r0, r8, lr
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d90f      	bls.n	8000e7e <__udivmoddi4+0x1b6>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e66:	bf2c      	ite	cs
 8000e68:	f04f 0b01 	movcs.w	fp, #1
 8000e6c:	f04f 0b00 	movcc.w	fp, #0
 8000e70:	4288      	cmp	r0, r1
 8000e72:	d903      	bls.n	8000e7c <__udivmoddi4+0x1b4>
 8000e74:	f1bb 0f00 	cmp.w	fp, #0
 8000e78:	f000 808d 	beq.w	8000f96 <__udivmoddi4+0x2ce>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	1a09      	subs	r1, r1, r0
 8000e80:	b2a4      	uxth	r4, r4
 8000e82:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e86:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8a:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e8e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1de>
 8000e96:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9a:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e9e:	d201      	bcs.n	8000ea4 <__udivmoddi4+0x1dc>
 8000ea0:	458e      	cmp	lr, r1
 8000ea2:	d87f      	bhi.n	8000fa4 <__udivmoddi4+0x2dc>
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eaa:	eba1 010e 	sub.w	r1, r1, lr
 8000eae:	fba0 9802 	umull	r9, r8, r0, r2
 8000eb2:	4541      	cmp	r1, r8
 8000eb4:	464c      	mov	r4, r9
 8000eb6:	46c6      	mov	lr, r8
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0x1f8>
 8000eba:	d106      	bne.n	8000eca <__udivmoddi4+0x202>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d204      	bcs.n	8000eca <__udivmoddi4+0x202>
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	ebb9 0402 	subs.w	r4, r9, r2
 8000ec6:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d070      	beq.n	8000fb0 <__udivmoddi4+0x2e8>
 8000ece:	1b1a      	subs	r2, r3, r4
 8000ed0:	eb61 010e 	sbc.w	r1, r1, lr
 8000ed4:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed8:	fa01 f707 	lsl.w	r7, r1, r7
 8000edc:	40f1      	lsrs	r1, r6
 8000ede:	2600      	movs	r6, #0
 8000ee0:	431f      	orrs	r7, r3
 8000ee2:	e9c5 7100 	strd	r7, r1, [r5]
 8000ee6:	e73c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000ee8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eec:	f1c3 0020 	rsb	r0, r3, #32
 8000ef0:	fa01 f203 	lsl.w	r2, r1, r3
 8000ef4:	fa21 f600 	lsr.w	r6, r1, r0
 8000ef8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000efc:	fa24 f100 	lsr.w	r1, r4, r0
 8000f00:	fa1f f78c 	uxth.w	r7, ip
 8000f04:	409c      	lsls	r4, r3
 8000f06:	4311      	orrs	r1, r2
 8000f08:	fbb6 f0fe 	udiv	r0, r6, lr
 8000f0c:	0c0a      	lsrs	r2, r1, #16
 8000f0e:	fb0e 6610 	mls	r6, lr, r0, r6
 8000f12:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000f16:	fb00 f607 	mul.w	r6, r0, r7
 8000f1a:	4296      	cmp	r6, r2
 8000f1c:	d90e      	bls.n	8000f3c <__udivmoddi4+0x274>
 8000f1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000f22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f26:	bf2c      	ite	cs
 8000f28:	f04f 0901 	movcs.w	r9, #1
 8000f2c:	f04f 0900 	movcc.w	r9, #0
 8000f30:	4296      	cmp	r6, r2
 8000f32:	d902      	bls.n	8000f3a <__udivmoddi4+0x272>
 8000f34:	f1b9 0f00 	cmp.w	r9, #0
 8000f38:	d031      	beq.n	8000f9e <__udivmoddi4+0x2d6>
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	1b92      	subs	r2, r2, r6
 8000f3e:	b289      	uxth	r1, r1
 8000f40:	fbb2 f6fe 	udiv	r6, r2, lr
 8000f44:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f4c:	fb06 f207 	mul.w	r2, r6, r7
 8000f50:	428a      	cmp	r2, r1
 8000f52:	d907      	bls.n	8000f64 <__udivmoddi4+0x29c>
 8000f54:	eb1c 0101 	adds.w	r1, ip, r1
 8000f58:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f5c:	d201      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000f5e:	428a      	cmp	r2, r1
 8000f60:	d823      	bhi.n	8000faa <__udivmoddi4+0x2e2>
 8000f62:	4646      	mov	r6, r8
 8000f64:	1a89      	subs	r1, r1, r2
 8000f66:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f6a:	e725      	b.n	8000db8 <__udivmoddi4+0xf0>
 8000f6c:	462e      	mov	r6, r5
 8000f6e:	4628      	mov	r0, r5
 8000f70:	e6f7      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000f72:	1a84      	subs	r4, r0, r2
 8000f74:	eb61 0303 	sbc.w	r3, r1, r3
 8000f78:	2001      	movs	r0, #1
 8000f7a:	461f      	mov	r7, r3
 8000f7c:	e70b      	b.n	8000d96 <__udivmoddi4+0xce>
 8000f7e:	4464      	add	r4, ip
 8000f80:	3802      	subs	r0, #2
 8000f82:	e749      	b.n	8000e18 <__udivmoddi4+0x150>
 8000f84:	4464      	add	r4, ip
 8000f86:	3802      	subs	r0, #2
 8000f88:	e6e1      	b.n	8000d4e <__udivmoddi4+0x86>
 8000f8a:	3a02      	subs	r2, #2
 8000f8c:	4461      	add	r1, ip
 8000f8e:	e72e      	b.n	8000dee <__udivmoddi4+0x126>
 8000f90:	3e02      	subs	r6, #2
 8000f92:	4462      	add	r2, ip
 8000f94:	e6c6      	b.n	8000d24 <__udivmoddi4+0x5c>
 8000f96:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e76f      	b.n	8000e7e <__udivmoddi4+0x1b6>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	4462      	add	r2, ip
 8000fa2:	e7cb      	b.n	8000f3c <__udivmoddi4+0x274>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4461      	add	r1, ip
 8000fa8:	e77d      	b.n	8000ea6 <__udivmoddi4+0x1de>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	e7d9      	b.n	8000f64 <__udivmoddi4+0x29c>
 8000fb0:	462e      	mov	r6, r5
 8000fb2:	e6d6      	b.n	8000d62 <__udivmoddi4+0x9a>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <memcpy>:
 8000ff8:	4684      	mov	ip, r0
 8000ffa:	ea41 0300 	orr.w	r3, r1, r0
 8000ffe:	f013 0303 	ands.w	r3, r3, #3
 8001002:	d149      	bne.n	8001098 <memcpy+0xa0>
 8001004:	3a40      	subs	r2, #64	; 0x40
 8001006:	d323      	bcc.n	8001050 <memcpy+0x58>
 8001008:	680b      	ldr	r3, [r1, #0]
 800100a:	6003      	str	r3, [r0, #0]
 800100c:	684b      	ldr	r3, [r1, #4]
 800100e:	6043      	str	r3, [r0, #4]
 8001010:	688b      	ldr	r3, [r1, #8]
 8001012:	6083      	str	r3, [r0, #8]
 8001014:	68cb      	ldr	r3, [r1, #12]
 8001016:	60c3      	str	r3, [r0, #12]
 8001018:	690b      	ldr	r3, [r1, #16]
 800101a:	6103      	str	r3, [r0, #16]
 800101c:	694b      	ldr	r3, [r1, #20]
 800101e:	6143      	str	r3, [r0, #20]
 8001020:	698b      	ldr	r3, [r1, #24]
 8001022:	6183      	str	r3, [r0, #24]
 8001024:	69cb      	ldr	r3, [r1, #28]
 8001026:	61c3      	str	r3, [r0, #28]
 8001028:	6a0b      	ldr	r3, [r1, #32]
 800102a:	6203      	str	r3, [r0, #32]
 800102c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800102e:	6243      	str	r3, [r0, #36]	; 0x24
 8001030:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001032:	6283      	str	r3, [r0, #40]	; 0x28
 8001034:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001036:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001038:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800103a:	6303      	str	r3, [r0, #48]	; 0x30
 800103c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800103e:	6343      	str	r3, [r0, #52]	; 0x34
 8001040:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8001042:	6383      	str	r3, [r0, #56]	; 0x38
 8001044:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001046:	63c3      	str	r3, [r0, #60]	; 0x3c
 8001048:	3040      	adds	r0, #64	; 0x40
 800104a:	3140      	adds	r1, #64	; 0x40
 800104c:	3a40      	subs	r2, #64	; 0x40
 800104e:	d2db      	bcs.n	8001008 <memcpy+0x10>
 8001050:	3230      	adds	r2, #48	; 0x30
 8001052:	d30b      	bcc.n	800106c <memcpy+0x74>
 8001054:	680b      	ldr	r3, [r1, #0]
 8001056:	6003      	str	r3, [r0, #0]
 8001058:	684b      	ldr	r3, [r1, #4]
 800105a:	6043      	str	r3, [r0, #4]
 800105c:	688b      	ldr	r3, [r1, #8]
 800105e:	6083      	str	r3, [r0, #8]
 8001060:	68cb      	ldr	r3, [r1, #12]
 8001062:	60c3      	str	r3, [r0, #12]
 8001064:	3010      	adds	r0, #16
 8001066:	3110      	adds	r1, #16
 8001068:	3a10      	subs	r2, #16
 800106a:	d2f3      	bcs.n	8001054 <memcpy+0x5c>
 800106c:	320c      	adds	r2, #12
 800106e:	d305      	bcc.n	800107c <memcpy+0x84>
 8001070:	f851 3b04 	ldr.w	r3, [r1], #4
 8001074:	f840 3b04 	str.w	r3, [r0], #4
 8001078:	3a04      	subs	r2, #4
 800107a:	d2f9      	bcs.n	8001070 <memcpy+0x78>
 800107c:	3204      	adds	r2, #4
 800107e:	d008      	beq.n	8001092 <memcpy+0x9a>
 8001080:	07d2      	lsls	r2, r2, #31
 8001082:	bf1c      	itt	ne
 8001084:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001088:	f800 3b01 	strbne.w	r3, [r0], #1
 800108c:	d301      	bcc.n	8001092 <memcpy+0x9a>
 800108e:	880b      	ldrh	r3, [r1, #0]
 8001090:	8003      	strh	r3, [r0, #0]
 8001092:	4660      	mov	r0, ip
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	2a08      	cmp	r2, #8
 800109a:	d313      	bcc.n	80010c4 <memcpy+0xcc>
 800109c:	078b      	lsls	r3, r1, #30
 800109e:	d0b1      	beq.n	8001004 <memcpy+0xc>
 80010a0:	f010 0303 	ands.w	r3, r0, #3
 80010a4:	d0ae      	beq.n	8001004 <memcpy+0xc>
 80010a6:	f1c3 0304 	rsb	r3, r3, #4
 80010aa:	1ad2      	subs	r2, r2, r3
 80010ac:	07db      	lsls	r3, r3, #31
 80010ae:	bf1c      	itt	ne
 80010b0:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80010b4:	f800 3b01 	strbne.w	r3, [r0], #1
 80010b8:	d3a4      	bcc.n	8001004 <memcpy+0xc>
 80010ba:	f831 3b02 	ldrh.w	r3, [r1], #2
 80010be:	f820 3b02 	strh.w	r3, [r0], #2
 80010c2:	e79f      	b.n	8001004 <memcpy+0xc>
 80010c4:	3a04      	subs	r2, #4
 80010c6:	d3d9      	bcc.n	800107c <memcpy+0x84>
 80010c8:	3a01      	subs	r2, #1
 80010ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010ce:	f800 3b01 	strb.w	r3, [r0], #1
 80010d2:	d2f9      	bcs.n	80010c8 <memcpy+0xd0>
 80010d4:	780b      	ldrb	r3, [r1, #0]
 80010d6:	7003      	strb	r3, [r0, #0]
 80010d8:	784b      	ldrb	r3, [r1, #1]
 80010da:	7043      	strb	r3, [r0, #1]
 80010dc:	788b      	ldrb	r3, [r1, #2]
 80010de:	7083      	strb	r3, [r0, #2]
 80010e0:	4660      	mov	r0, ip
 80010e2:	4770      	bx	lr

080010e4 <SPILCDTask>:

	}
}

void SPILCDTask(void *argument)
{
 80010e4:	b538      	push	{r3, r4, r5, lr}
	unsigned int cnt = 0;

	bsp_test_lcd();
 80010e6:	f000 f929 	bl	800133c <bsp_test_lcd>
	unsigned int cnt = 0;
 80010ea:	2400      	movs	r4, #0

	while(1)
	{
		rt_kprintf("SPILCDTask run:%d \r\n",cnt++);
 80010ec:	4d05      	ldr	r5, [pc, #20]	; (8001104 <SPILCDTask+0x20>)
 80010ee:	4621      	mov	r1, r4
 80010f0:	4628      	mov	r0, r5
 80010f2:	f000 ffbb 	bl	800206c <rt_kprintf>
		vTaskDelay(500);
 80010f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		rt_kprintf("SPILCDTask run:%d \r\n",cnt++);
 80010fa:	3401      	adds	r4, #1
		vTaskDelay(500);
 80010fc:	f00a f9a2 	bl	800b444 <vTaskDelay>
	while(1)
 8001100:	e7f5      	b.n	80010ee <SPILCDTask+0xa>
 8001102:	bf00      	nop
 8001104:	0800c608 	.word	0x0800c608

08001108 <StartDefaultTask>:
{
 8001108:	b538      	push	{r3, r4, r5, lr}
	unsigned int cnt = 0;
 800110a:	2400      	movs	r4, #0
		rt_kprintf("StartDefaultTask run:%d \r\n",cnt++);
 800110c:	4d06      	ldr	r5, [pc, #24]	; (8001128 <StartDefaultTask+0x20>)
 800110e:	4621      	mov	r1, r4
 8001110:	4628      	mov	r0, r5
 8001112:	f000 ffab 	bl	800206c <rt_kprintf>
		bsp_led_toggle();
 8001116:	f000 f993 	bl	8001440 <bsp_led_toggle>
		HAL_Delay(500);
 800111a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		rt_kprintf("StartDefaultTask run:%d \r\n",cnt++);
 800111e:	3401      	adds	r4, #1
		HAL_Delay(500);
 8001120:	f003 f970 	bl	8004404 <HAL_Delay>
	while(1)
 8001124:	e7f3      	b.n	800110e <StartDefaultTask+0x6>
 8001126:	bf00      	nop
 8001128:	0800c620 	.word	0x0800c620

0800112c <vApplicationStackOverflowHook>:
    while(1);
 800112c:	e7fe      	b.n	800112c <vApplicationStackOverflowHook>
 800112e:	bf00      	nop

08001130 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8001130:	b530      	push	{r4, r5, lr}
	xTaskCreate(
 8001132:	2400      	movs	r4, #0
 8001134:	2509      	movs	r5, #9
void MX_FREERTOS_Init(void) {
 8001136:	b083      	sub	sp, #12
	xTaskCreate(
 8001138:	4623      	mov	r3, r4
 800113a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800113e:	e9cd 5400 	strd	r5, r4, [sp]
 8001142:	4907      	ldr	r1, [pc, #28]	; (8001160 <MX_FREERTOS_Init+0x30>)
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_FREERTOS_Init+0x34>)
 8001146:	f00a f947 	bl	800b3d8 <xTaskCreate>
	xTaskCreate(
 800114a:	4623      	mov	r3, r4
 800114c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001150:	e9cd 5400 	strd	r5, r4, [sp]
 8001154:	4904      	ldr	r1, [pc, #16]	; (8001168 <MX_FREERTOS_Init+0x38>)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_FREERTOS_Init+0x3c>)
 8001158:	f00a f93e 	bl	800b3d8 <xTaskCreate>
}
 800115c:	b003      	add	sp, #12
 800115e:	bd30      	pop	{r4, r5, pc}
 8001160:	0800c63c 	.word	0x0800c63c
 8001164:	08001109 	.word	0x08001109
 8001168:	0800c650 	.word	0x0800c650
 800116c:	080010e5 	.word	0x080010e5

08001170 <MX_SPI2_Init>:
#include "draw.h"

SPI_HandleTypeDef hspi2;

void MX_SPI2_Init(void)
{
 8001170:	b538      	push	{r3, r4, r5, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001172:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001176:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 8001178:	4813      	ldr	r0, [pc, #76]	; (80011c8 <MX_SPI2_Init+0x58>)
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800117a:	2207      	movs	r2, #7
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800117c:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001180:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001184:	e9c0 3105 	strd	r3, r1, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x7;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001188:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800118c:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001190:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001194:	e9c0 4307 	strd	r4, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001198:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800119c:	e9c0 330e 	strd	r3, r3, [r0, #56]	; 0x38
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011a4:	e9c0 3314 	strd	r3, r3, [r0, #80]	; 0x50
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 80011a8:	e9c0 3316 	strd	r3, r3, [r0, #88]	; 0x58
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 80011ac:	6603      	str	r3, [r0, #96]	; 0x60
  hspi2.Instance = SPI2;
 80011ae:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_SPI2_Init+0x5c>)
  hspi2.Init.CRCPolynomial = 0x7;
 80011b0:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011b2:	6341      	str	r1, [r0, #52]	; 0x34
  hspi2.Instance = SPI2;
 80011b4:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011b6:	f008 f9eb 	bl	8009590 <HAL_SPI_Init>
 80011ba:	b900      	cbnz	r0, 80011be <MX_SPI2_Init+0x4e>
  {
    Error_Handler();
  }
}
 80011bc:	bd38      	pop	{r3, r4, r5, pc}
 80011be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 80011c2:	f001 b855 	b.w	8002270 <Error_Handler>
 80011c6:	bf00      	nop
 80011c8:	20000870 	.word	0x20000870
 80011cc:	40003800 	.word	0x40003800

080011d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011d0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	2100      	movs	r1, #0
{
 80011d4:	4604      	mov	r4, r0
 80011d6:	b0cb      	sub	sp, #300	; 0x12c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f44f 7284 	mov.w	r2, #264	; 0x108
 80011dc:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	e9cd 1103 	strd	r1, r1, [sp, #12]
 80011e2:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80011e6:	9107      	str	r1, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e8:	f00a ff8a 	bl	800c100 <memset>
  if(spiHandle->Instance==SPI2)
 80011ec:	4b28      	ldr	r3, [pc, #160]	; (8001290 <HAL_SPI_MspInit+0xc0>)
 80011ee:	6822      	ldr	r2, [r4, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d001      	beq.n	80011f8 <HAL_SPI_MspInit+0x28>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80011f4:	b04b      	add	sp, #300	; 0x12c
 80011f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80011f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011fc:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fe:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001200:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f004 fc60 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 8001208:	2800      	cmp	r0, #0
 800120a:	d13d      	bne.n	8001288 <HAL_SPI_MspInit+0xb8>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 800120e:	2106      	movs	r1, #6
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001212:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001214:	2405      	movs	r4, #5
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <HAL_SPI_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001218:	481f      	ldr	r0, [pc, #124]	; (8001298 <HAL_SPI_MspInit+0xc8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800121a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800121e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001222:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8001226:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800122a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001232:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001236:	f042 0204 	orr.w	r2, r2, #4
 800123a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800123e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001242:	f002 0204 	and.w	r2, r2, #4
 8001246:	9201      	str	r2, [sp, #4]
 8001248:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800124e:	433a      	orrs	r2, r7
 8001250:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001258:	9103      	str	r1, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	403b      	ands	r3, r7
 800125c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	e9cd 7604 	strd	r7, r6, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001268:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126a:	f003 fcd1 	bl	8004c10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	480a      	ldr	r0, [pc, #40]	; (800129c <HAL_SPI_MspInit+0xcc>)
 8001274:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	e9cd 6505 	strd	r6, r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127c:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800127e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001280:	f003 fcc6 	bl	8004c10 <HAL_GPIO_Init>
}
 8001284:	b04b      	add	sp, #300	; 0x12c
 8001286:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001288:	f000 fff2 	bl	8002270 <Error_Handler>
 800128c:	e7be      	b.n	800120c <HAL_SPI_MspInit+0x3c>
 800128e:	bf00      	nop
 8001290:	40003800 	.word	0x40003800
 8001294:	44020c00 	.word	0x44020c00
 8001298:	42020800 	.word	0x42020800
 800129c:	42020400 	.word	0x42020400

080012a0 <bsp_lcd_init>:
  }
}


void bsp_lcd_init(void)
{
 80012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a2:	2400      	movs	r4, #0
{
 80012a4:	b089      	sub	sp, #36	; 0x24
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80012aa:	e9cd 4405 	strd	r4, r4, [sp, #20]

	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <bsp_lcd_init+0x90>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  __HAL_RCC_GPIOD_CLK_ENABLE();
	
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80012b6:	4f1f      	ldr	r7, [pc, #124]	; (8001334 <bsp_lcd_init+0x94>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012b8:	f042 0202 	orr.w	r2, r2, #2
 80012bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80012c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80012c4:	4e1c      	ldr	r6, [pc, #112]	; (8001338 <bsp_lcd_init+0x98>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	f002 0202 	and.w	r2, r2, #2
 80012ca:	9201      	str	r2, [sp, #4]
 80012cc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80012d2:	4638      	mov	r0, r7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012d4:	f042 0208 	orr.w	r2, r2, #8
 80012d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80012dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80012e0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80012e8:	f44f 6101 	mov.w	r1, #2064	; 0x810
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_4, GPIO_PIN_RESET);
 80012ee:	f003 fd65 	bl	8004dbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80012f2:	4622      	mov	r2, r4
 80012f4:	4630      	mov	r0, r6
 80012f6:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80012fa:	f003 fd5f 	bl	8004dbc <HAL_GPIO_WritePin>
	
	/*Configure GPIO pins : PB11 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012fe:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 8001300:	f44f 6301 	mov.w	r3, #2064	; 0x810
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	4638      	mov	r0, r7
 8001306:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_4;
 8001308:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	e9cd 5404 	strd	r5, r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f003 fc7e 	bl	8004c10 <HAL_GPIO_Init>
	
	/*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001314:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 800131a:	4630      	mov	r0, r6
 800131c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001322:	9203      	str	r2, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);	
 8001326:	f003 fc73 	bl	8004c10 <HAL_GPIO_Init>
  
  
}
 800132a:	b009      	add	sp, #36	; 0x24
 800132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800132e:	bf00      	nop
 8001330:	44020c00 	.word	0x44020c00
 8001334:	42020400 	.word	0x42020400
 8001338:	42020c00 	.word	0x42020c00

0800133c <bsp_test_lcd>:

void bsp_test_lcd(void)
{
 800133c:	b530      	push	{r4, r5, lr}

#if 1

	Draw_String(0, 0, "www.100ask.net\r\n10ask.taobao.com", 0x0000ff00, 0); /* 绘制字符丿 */
 800133e:	2400      	movs	r4, #0
	extern const unsigned char gImage_100ask[36968]; 
	Draw_Picture(0, 100, gImage_100ask);  /* 绘制图片 */

	Draw_Circle(60, 250, 50, 0xffffff); /* 画圆 */

	Draw_Rectangle(180, 200, 280, 300, 0xffffff); /* 画矩彿 */
 8001340:	f06f 457f 	mvn.w	r5, #4278190080	; 0xff000000
{
 8001344:	b083      	sub	sp, #12
	Draw_String(0, 0, "www.100ask.net\r\n10ask.taobao.com", 0x0000ff00, 0); /* 绘制字符丿 */
 8001346:	4621      	mov	r1, r4
 8001348:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800134c:	4620      	mov	r0, r4
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <bsp_test_lcd+0x84>)
 8001350:	9400      	str	r4, [sp, #0]
 8001352:	f000 fb0d 	bl	8001970 <Draw_String>
	Draw_ChineseFont(0, 40, "悦己之作方能悦人", 0xff0000, 0); /* 绘制汉字 */
 8001356:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 800135a:	4620      	mov	r0, r4
 800135c:	2128      	movs	r1, #40	; 0x28
 800135e:	4a19      	ldr	r2, [pc, #100]	; (80013c4 <bsp_test_lcd+0x88>)
 8001360:	9400      	str	r4, [sp, #0]
 8001362:	f000 fc47 	bl	8001bf4 <Draw_ChineseFont>
	Draw_Picture(0, 100, gImage_100ask);  /* 绘制图片 */
 8001366:	4620      	mov	r0, r4
 8001368:	2164      	movs	r1, #100	; 0x64
 800136a:	4a17      	ldr	r2, [pc, #92]	; (80013c8 <bsp_test_lcd+0x8c>)
 800136c:	f000 fd0a 	bl	8001d84 <Draw_Picture>
	Draw_Circle(60, 250, 50, 0xffffff); /* 画圆 */
 8001370:	462b      	mov	r3, r5
 8001372:	2232      	movs	r2, #50	; 0x32
 8001374:	21fa      	movs	r1, #250	; 0xfa
 8001376:	203c      	movs	r0, #60	; 0x3c
 8001378:	f000 fbba 	bl	8001af0 <Draw_Circle>
	Draw_Rectangle(180, 200, 280, 300, 0xffffff); /* 画矩彿 */
 800137c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001380:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001384:	21c8      	movs	r1, #200	; 0xc8
 8001386:	20b4      	movs	r0, #180	; 0xb4
 8001388:	9500      	str	r5, [sp, #0]
 800138a:	f000 fb8d 	bl	8001aa8 <Draw_Rectangle>
	
	Draw_String(240, 160, "Hello", 0x00ff0000, 0x00ffffff);
 800138e:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001392:	21a0      	movs	r1, #160	; 0xa0
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <bsp_test_lcd+0x90>)
 8001396:	9500      	str	r5, [sp, #0]
 8001398:	20f0      	movs	r0, #240	; 0xf0
 800139a:	f000 fae9 	bl	8001970 <Draw_String>
	
	Draw_ChineseFont(200, 200, "百问网悦己之使", 0xff0000, 0); /* 绘制汉字 */
 800139e:	21c8      	movs	r1, #200	; 0xc8
 80013a0:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80013a4:	4608      	mov	r0, r1
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <bsp_test_lcd+0x94>)
 80013a8:	9400      	str	r4, [sp, #0]
 80013aa:	f000 fc23 	bl	8001bf4 <Draw_ChineseFont>
	
	extern const unsigned char gImage_ufo[19888];
	Draw_Picture(300, 50, gImage_ufo);  /* 绘制图片 */
 80013ae:	2132      	movs	r1, #50	; 0x32
 80013b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <bsp_test_lcd+0x98>)
#endif
}
 80013b6:	b003      	add	sp, #12
 80013b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	Draw_Picture(300, 50, gImage_ufo);  /* 绘制图片 */
 80013bc:	f000 bce2 	b.w	8001d84 <Draw_Picture>
 80013c0:	0800c65c 	.word	0x0800c65c
 80013c4:	0800c680 	.word	0x0800c680
 80013c8:	0800dd70 	.word	0x0800dd70
 80013cc:	0800c69c 	.word	0x0800c69c
 80013d0:	0800c6a4 	.word	0x0800c6a4
 80013d4:	08016dd8 	.word	0x08016dd8

080013d8 <bsp_led_init>:
#include "bsp_led.h"

//PC12
void bsp_led_init()
{
 80013d8:	b570      	push	{r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 80013da:	2400      	movs	r4, #0
	__HAL_RCC_GPIOH_CLK_ENABLE();	
	__HAL_RCC_GPIOC_CLK_ENABLE();

	
	/*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013dc:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e0:	2601      	movs	r6, #1
{
 80013e2:	b088      	sub	sp, #32
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 80013e4:	e9cd 4405 	strd	r4, r4, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <bsp_led_init+0x60>)
	GPIO_InitTypeDef GPIO_InitStruct = {0};	
 80013ea:	9407      	str	r4, [sp, #28]
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 80013ec:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f0:	a903      	add	r1, sp, #12
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 80013f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80013fa:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	480f      	ldr	r0, [pc, #60]	; (800143c <bsp_led_init+0x64>)
	__HAL_RCC_GPIOH_CLK_ENABLE();	
 8001400:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001404:	9201      	str	r2, [sp, #4]
 8001406:	9a01      	ldr	r2, [sp, #4]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001408:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800140c:	f042 0204 	orr.w	r2, r2, #4
 8001410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8001414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001418:	9604      	str	r6, [sp, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001422:	9503      	str	r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f003 fbf4 	bl	8004c10 <HAL_GPIO_Init>
	
	/*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);	
 8001428:	4622      	mov	r2, r4
 800142a:	4629      	mov	r1, r5
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <bsp_led_init+0x64>)
 800142e:	f003 fcc5 	bl	8004dbc <HAL_GPIO_WritePin>
}
 8001432:	b008      	add	sp, #32
 8001434:	bd70      	pop	{r4, r5, r6, pc}
 8001436:	bf00      	nop
 8001438:	44020c00 	.word	0x44020c00
 800143c:	42020800 	.word	0x42020800

08001440 <bsp_led_toggle>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
}

void bsp_led_toggle()
{
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_12);
 8001440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001444:	4801      	ldr	r0, [pc, #4]	; (800144c <bsp_led_toggle+0xc>)
 8001446:	f003 bcbf 	b.w	8004dc8 <HAL_GPIO_TogglePin>
 800144a:	bf00      	nop
 800144c:	42020800 	.word	0x42020800

08001450 <MX_UART4_Init>:
  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
  huart4.Init.BaudRate = 115200;
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001450:	2300      	movs	r3, #0
  huart4.Init.BaudRate = 115200;
 8001452:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart4.Init.StopBits = UART_STOPBITS_1;
  huart4.Init.Parity = UART_PARITY_NONE;
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001456:	220c      	movs	r2, #12
{
 8001458:	b510      	push	{r4, lr}
  huart4.Instance = UART4;
 800145a:	481d      	ldr	r0, [pc, #116]	; (80014d0 <MX_UART4_Init+0x80>)
 800145c:	4c1d      	ldr	r4, [pc, #116]	; (80014d4 <MX_UART4_Init+0x84>)
  huart4.Init.BaudRate = 115200;
 800145e:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001462:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800146a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800146e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart4.Instance = UART4;
 8001472:	6004      	str	r4, [r0, #0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001474:	f009 facc 	bl	800aa10 <HAL_UART_Init>
 8001478:	b970      	cbnz	r0, 8001498 <MX_UART4_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800147a:	2100      	movs	r1, #0
 800147c:	4814      	ldr	r0, [pc, #80]	; (80014d0 <MX_UART4_Init+0x80>)
 800147e:	f009 fb45 	bl	800ab0c <HAL_UARTEx_SetTxFifoThreshold>
 8001482:	b988      	cbnz	r0, 80014a8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001484:	2100      	movs	r1, #0
 8001486:	4812      	ldr	r0, [pc, #72]	; (80014d0 <MX_UART4_Init+0x80>)
 8001488:	f009 fb6a 	bl	800ab60 <HAL_UARTEx_SetRxFifoThreshold>
 800148c:	b9a0      	cbnz	r0, 80014b8 <MX_UART4_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_UART4_Init+0x80>)
 8001490:	f009 fb18 	bl	800aac4 <HAL_UARTEx_EnableFifoMode>
 8001494:	b9b8      	cbnz	r0, 80014c6 <MX_UART4_Init+0x76>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001496:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001498:	f000 feea 	bl	8002270 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <MX_UART4_Init+0x80>)
 80014a0:	f009 fb34 	bl	800ab0c <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	2800      	cmp	r0, #0
 80014a6:	d0ed      	beq.n	8001484 <MX_UART4_Init+0x34>
    Error_Handler();
 80014a8:	f000 fee2 	bl	8002270 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ac:	2100      	movs	r1, #0
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <MX_UART4_Init+0x80>)
 80014b0:	f009 fb56 	bl	800ab60 <HAL_UARTEx_SetRxFifoThreshold>
 80014b4:	2800      	cmp	r0, #0
 80014b6:	d0ea      	beq.n	800148e <MX_UART4_Init+0x3e>
    Error_Handler();
 80014b8:	f000 feda 	bl	8002270 <Error_Handler>
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_UART4_Init+0x80>)
 80014be:	f009 fb01 	bl	800aac4 <HAL_UARTEx_EnableFifoMode>
 80014c2:	2800      	cmp	r0, #0
 80014c4:	d0e7      	beq.n	8001496 <MX_UART4_Init+0x46>
}
 80014c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80014ca:	f000 bed1 	b.w	8002270 <Error_Handler>
 80014ce:	bf00      	nop
 80014d0:	20000b74 	.word	0x20000b74
 80014d4:	40004c00 	.word	0x40004c00

080014d8 <MX_USART2_UART_Init>:
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d8:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 80014da:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014de:	220c      	movs	r2, #12
{
 80014e0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80014e2:	481d      	ldr	r0, [pc, #116]	; (8001558 <MX_USART2_UART_Init+0x80>)
 80014e4:	4c1d      	ldr	r4, [pc, #116]	; (800155c <MX_USART2_UART_Init+0x84>)
  huart2.Init.BaudRate = 115200;
 80014e6:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ea:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f2:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f6:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  huart2.Instance = USART2;
 80014fa:	6004      	str	r4, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fc:	f009 fa88 	bl	800aa10 <HAL_UART_Init>
 8001500:	b970      	cbnz	r0, 8001520 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001502:	2100      	movs	r1, #0
 8001504:	4814      	ldr	r0, [pc, #80]	; (8001558 <MX_USART2_UART_Init+0x80>)
 8001506:	f009 fb01 	bl	800ab0c <HAL_UARTEx_SetTxFifoThreshold>
 800150a:	b988      	cbnz	r0, 8001530 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800150c:	2100      	movs	r1, #0
 800150e:	4812      	ldr	r0, [pc, #72]	; (8001558 <MX_USART2_UART_Init+0x80>)
 8001510:	f009 fb26 	bl	800ab60 <HAL_UARTEx_SetRxFifoThreshold>
 8001514:	b9a0      	cbnz	r0, 8001540 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001516:	4810      	ldr	r0, [pc, #64]	; (8001558 <MX_USART2_UART_Init+0x80>)
 8001518:	f009 fad4 	bl	800aac4 <HAL_UARTEx_EnableFifoMode>
 800151c:	b9b8      	cbnz	r0, 800154e <MX_USART2_UART_Init+0x76>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800151e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001520:	f000 fea6 	bl	8002270 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001524:	2100      	movs	r1, #0
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <MX_USART2_UART_Init+0x80>)
 8001528:	f009 faf0 	bl	800ab0c <HAL_UARTEx_SetTxFifoThreshold>
 800152c:	2800      	cmp	r0, #0
 800152e:	d0ed      	beq.n	800150c <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8001530:	f000 fe9e 	bl	8002270 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	4808      	ldr	r0, [pc, #32]	; (8001558 <MX_USART2_UART_Init+0x80>)
 8001538:	f009 fb12 	bl	800ab60 <HAL_UARTEx_SetRxFifoThreshold>
 800153c:	2800      	cmp	r0, #0
 800153e:	d0ea      	beq.n	8001516 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8001540:	f000 fe96 	bl	8002270 <Error_Handler>
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001544:	4804      	ldr	r0, [pc, #16]	; (8001558 <MX_USART2_UART_Init+0x80>)
 8001546:	f009 fabd 	bl	800aac4 <HAL_UARTEx_EnableFifoMode>
 800154a:	2800      	cmp	r0, #0
 800154c:	d0e7      	beq.n	800151e <MX_USART2_UART_Init+0x46>
}
 800154e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001552:	f000 be8d 	b.w	8002270 <Error_Handler>
 8001556:	bf00      	nop
 8001558:	20000ae0 	.word	0x20000ae0
 800155c:	40004400 	.word	0x40004400

08001560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001560:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	2100      	movs	r1, #0
{
 8001564:	4604      	mov	r4, r0
 8001566:	b0cd      	sub	sp, #308	; 0x134
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001568:	f44f 7284 	mov.w	r2, #264	; 0x108
 800156c:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156e:	e9cd 1105 	strd	r1, r1, [sp, #20]
 8001572:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8001576:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001578:	f00a fdc2 	bl	800c100 <memset>
  if(uartHandle->Instance==UART4)
 800157c:	4a93      	ldr	r2, [pc, #588]	; (80017cc <HAL_UART_MspInit+0x26c>)
 800157e:	6823      	ldr	r3, [r4, #0]
 8001580:	4293      	cmp	r3, r2
 8001582:	d005      	beq.n	8001590 <HAL_UART_MspInit+0x30>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001584:	4a92      	ldr	r2, [pc, #584]	; (80017d0 <HAL_UART_MspInit+0x270>)
 8001586:	4293      	cmp	r3, r2
 8001588:	f000 8084 	beq.w	8001694 <HAL_UART_MspInit+0x134>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800158c:	b04d      	add	sp, #308	; 0x134
 800158e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001590:	2208      	movs	r2, #8
 8001592:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001594:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001596:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800159a:	f004 fa95 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 800159e:	2800      	cmp	r0, #0
 80015a0:	f040 8101 	bne.w	80017a6 <HAL_UART_MspInit+0x246>
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a4:	4b8b      	ldr	r3, [pc, #556]	; (80017d4 <HAL_UART_MspInit+0x274>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2600      	movs	r6, #0
    __HAL_RCC_UART4_CLK_ENABLE();
 80015a8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ac:	2708      	movs	r7, #8
    __HAL_RCC_UART4_CLK_ENABLE();
 80015ae:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80015b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80015b6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	4887      	ldr	r0, [pc, #540]	; (80017d8 <HAL_UART_MspInit+0x278>)
    __HAL_RCC_UART4_CLK_ENABLE();
 80015bc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80015c0:	9201      	str	r2, [sp, #4]
 80015c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	a905      	add	r1, sp, #20
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	f042 0201 	orr.w	r2, r2, #1
 80015ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80015d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80015d6:	4d81      	ldr	r5, [pc, #516]	; (80017dc <HAL_UART_MspInit+0x27c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e0:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e4:	e9cd 6607 	strd	r6, r6, [sp, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e8:	e9cd 3205 	strd	r3, r2, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80015ec:	9709      	str	r7, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ee:	f003 fb0f 	bl	8004c10 <HAL_GPIO_Init>
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80015f2:	4b7b      	ldr	r3, [pc, #492]	; (80017e0 <HAL_UART_MspInit+0x280>)
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART4_TX;
 80015f4:	221c      	movs	r2, #28
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
    handle_GPDMA1_Channel3.Instance = GPDMA1_Channel3;
 80015fa:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel3.Init.SrcBurstLength = 1;
 80015fc:	2301      	movs	r3, #1
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 80015fe:	4628      	mov	r0, r5
    handle_GPDMA1_Channel3.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001600:	e9c5 6605 	strd	r6, r6, [r5, #20]
    handle_GPDMA1_Channel3.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001604:	e9c5 6607 	strd	r6, r6, [r5, #28]
    handle_GPDMA1_Channel3.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001608:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel3.Init.DestBurstLength = 1;
 800160c:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
    handle_GPDMA1_Channel3.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001610:	60ae      	str	r6, [r5, #8]
    handle_GPDMA1_Channel3.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001612:	612f      	str	r7, [r5, #16]
    handle_GPDMA1_Channel3.Init.Mode = DMA_NORMAL;
 8001614:	636e      	str	r6, [r5, #52]	; 0x34
    handle_GPDMA1_Channel3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001616:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel3.Init.Request = GPDMA1_REQUEST_UART4_TX;
 8001618:	606a      	str	r2, [r5, #4]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel3) != HAL_OK)
 800161a:	f002 ff05 	bl	8004428 <HAL_DMA_Init>
 800161e:	2800      	cmp	r0, #0
 8001620:	f040 80be 	bne.w	80017a0 <HAL_UART_MspInit+0x240>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001624:	2110      	movs	r1, #16
 8001626:	486d      	ldr	r0, [pc, #436]	; (80017dc <HAL_UART_MspInit+0x27c>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel3);
 8001628:	67e5      	str	r5, [r4, #124]	; 0x7c
 800162a:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 800162c:	f003 fa6c 	bl	8004b08 <HAL_DMA_ConfigChannelAttributes>
 8001630:	2800      	cmp	r0, #0
 8001632:	f040 80b2 	bne.w	800179a <HAL_UART_MspInit+0x23a>
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001636:	2300      	movs	r3, #0
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 8001638:	2201      	movs	r2, #1
    handle_GPDMA1_Channel1.Init.Request = GPDMA1_REQUEST_UART4_RX;
 800163a:	201b      	movs	r0, #27
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 800163c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001640:	4d68      	ldr	r5, [pc, #416]	; (80017e4 <HAL_UART_MspInit+0x284>)
    handle_GPDMA1_Channel1.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001642:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel1.Init.SrcInc = DMA_SINC_FIXED;
 8001646:	e9c5 3303 	strd	r3, r3, [r5, #12]
    handle_GPDMA1_Channel1.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800164a:	e9c5 3306 	strd	r3, r3, [r5, #24]
    handle_GPDMA1_Channel1.Init.SrcBurstLength = 1;
 800164e:	e9c5 3208 	strd	r3, r2, [r5, #32]
    handle_GPDMA1_Channel1.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001652:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    handle_GPDMA1_Channel1.Init.Mode = DMA_NORMAL;
 8001656:	e9c5 330c 	strd	r3, r3, [r5, #48]	; 0x30
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_UART_MspInit+0x288>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800165c:	4628      	mov	r0, r5
    handle_GPDMA1_Channel1.Init.DestInc = DMA_DINC_INCREMENTED;
 800165e:	6169      	str	r1, [r5, #20]
    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8001660:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8001662:	f002 fee1 	bl	8004428 <HAL_DMA_Init>
 8001666:	2800      	cmp	r0, #0
 8001668:	f040 8094 	bne.w	8001794 <HAL_UART_MspInit+0x234>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 800166c:	2110      	movs	r1, #16
 800166e:	485d      	ldr	r0, [pc, #372]	; (80017e4 <HAL_UART_MspInit+0x284>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel1);
 8001670:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8001674:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001676:	f003 fa47 	bl	8004b08 <HAL_DMA_ConfigChannelAttributes>
 800167a:	2800      	cmp	r0, #0
 800167c:	f040 8087 	bne.w	800178e <HAL_UART_MspInit+0x22e>
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001680:	2200      	movs	r2, #0
 8001682:	2105      	movs	r1, #5
 8001684:	203d      	movs	r0, #61	; 0x3d
 8001686:	f002 fe33 	bl	80042f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800168a:	203d      	movs	r0, #61	; 0x3d
 800168c:	f002 fe6e 	bl	800436c <HAL_NVIC_EnableIRQ>
}
 8001690:	b04d      	add	sp, #308	; 0x134
 8001692:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001694:	2202      	movs	r2, #2
 8001696:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001698:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800169a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800169e:	f004 fa13 	bl	8005ac8 <HAL_RCCEx_PeriphCLKConfig>
 80016a2:	2800      	cmp	r0, #0
 80016a4:	f040 8082 	bne.w	80017ac <HAL_UART_MspInit+0x24c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a8:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <HAL_UART_MspInit+0x274>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016aa:	2107      	movs	r1, #7
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2600      	movs	r6, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80016b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 80016ba:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016be:	4846      	ldr	r0, [pc, #280]	; (80017d8 <HAL_UART_MspInit+0x278>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80016c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80016c4:	9203      	str	r2, [sp, #12]
 80016c6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 80016cc:	4d47      	ldr	r5, [pc, #284]	; (80017ec <HAL_UART_MspInit+0x28c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ce:	f042 0201 	orr.w	r2, r2, #1
 80016d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80016d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016da:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	f003 0301 	and.w	r3, r3, #1
 80016e0:	9304      	str	r3, [sp, #16]
 80016e2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016e6:	9109      	str	r1, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	e9cd 6607 	strd	r6, r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f003 fa8d 	bl	8004c10 <HAL_GPIO_Init>
    handle_GPDMA1_Channel2.Init.SrcBurstLength = 1;
 80016f6:	2301      	movs	r3, #1
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_RX;
 80016f8:	2117      	movs	r1, #23
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 80016fa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    handle_GPDMA1_Channel2.Init.DestBurstLength = 1;
 80016fe:	e9c5 3309 	strd	r3, r3, [r5, #36]	; 0x24
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_UART_MspInit+0x290>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 8001704:	4628      	mov	r0, r5
    handle_GPDMA1_Channel2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001706:	e9c5 6602 	strd	r6, r6, [r5, #8]
    handle_GPDMA1_Channel2.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800170a:	e9c5 6606 	strd	r6, r6, [r5, #24]
    handle_GPDMA1_Channel2.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800170e:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel2.Init.SrcInc = DMA_SINC_FIXED;
 8001712:	612e      	str	r6, [r5, #16]
    handle_GPDMA1_Channel2.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001714:	622e      	str	r6, [r5, #32]
    handle_GPDMA1_Channel2.Init.Mode = DMA_NORMAL;
 8001716:	636e      	str	r6, [r5, #52]	; 0x34
    handle_GPDMA1_Channel2.Init.Request = GPDMA1_REQUEST_USART2_RX;
 8001718:	6069      	str	r1, [r5, #4]
    handle_GPDMA1_Channel2.Init.DestInc = DMA_DINC_INCREMENTED;
 800171a:	616a      	str	r2, [r5, #20]
    handle_GPDMA1_Channel2.Instance = GPDMA1_Channel2;
 800171c:	602b      	str	r3, [r5, #0]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel2) != HAL_OK)
 800171e:	f002 fe83 	bl	8004428 <HAL_DMA_Init>
 8001722:	2800      	cmp	r0, #0
 8001724:	d14e      	bne.n	80017c4 <HAL_UART_MspInit+0x264>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001726:	2110      	movs	r1, #16
 8001728:	4830      	ldr	r0, [pc, #192]	; (80017ec <HAL_UART_MspInit+0x28c>)
    __HAL_LINKDMA(uartHandle, hdmarx, handle_GPDMA1_Channel2);
 800172a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 800172e:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001730:	f003 f9ea 	bl	8004b08 <HAL_DMA_ConfigChannelAttributes>
 8001734:	2800      	cmp	r0, #0
 8001736:	d142      	bne.n	80017be <HAL_UART_MspInit+0x25e>
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001738:	f44f 6180 	mov.w	r1, #1024	; 0x400
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800173c:	4d2d      	ldr	r5, [pc, #180]	; (80017f4 <HAL_UART_MspInit+0x294>)
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 800173e:	2300      	movs	r3, #0
    handle_GPDMA1_Channel0.Init.Request = GPDMA1_REQUEST_USART2_TX;
 8001740:	2018      	movs	r0, #24
    handle_GPDMA1_Channel0.Init.SrcBurstLength = 1;
 8001742:	2201      	movs	r2, #1
    handle_GPDMA1_Channel0.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001744:	60e9      	str	r1, [r5, #12]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001746:	2108      	movs	r1, #8
    handle_GPDMA1_Channel0.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001748:	e9c5 0301 	strd	r0, r3, [r5, #4]
    handle_GPDMA1_Channel0.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 800174c:	e9c5 3305 	strd	r3, r3, [r5, #20]
    handle_GPDMA1_Channel0.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001750:	e9c5 3307 	strd	r3, r3, [r5, #28]
    handle_GPDMA1_Channel0.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001754:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    handle_GPDMA1_Channel0.Init.Mode = DMA_NORMAL;
 8001758:	636b      	str	r3, [r5, #52]	; 0x34
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 800175a:	4b27      	ldr	r3, [pc, #156]	; (80017f8 <HAL_UART_MspInit+0x298>)
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 800175c:	4628      	mov	r0, r5
    handle_GPDMA1_Channel0.Init.DestBurstLength = 1;
 800175e:	e9c5 2209 	strd	r2, r2, [r5, #36]	; 0x24
    handle_GPDMA1_Channel0.Instance = GPDMA1_Channel0;
 8001762:	602b      	str	r3, [r5, #0]
    handle_GPDMA1_Channel0.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001764:	6129      	str	r1, [r5, #16]
    if (HAL_DMA_Init(&handle_GPDMA1_Channel0) != HAL_OK)
 8001766:	f002 fe5f 	bl	8004428 <HAL_DMA_Init>
 800176a:	bb28      	cbnz	r0, 80017b8 <HAL_UART_MspInit+0x258>
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 800176c:	2110      	movs	r1, #16
 800176e:	4821      	ldr	r0, [pc, #132]	; (80017f4 <HAL_UART_MspInit+0x294>)
    __HAL_LINKDMA(uartHandle, hdmatx, handle_GPDMA1_Channel0);
 8001770:	67e5      	str	r5, [r4, #124]	; 0x7c
 8001772:	65ec      	str	r4, [r5, #92]	; 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel0, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001774:	f003 f9c8 	bl	8004b08 <HAL_DMA_ConfigChannelAttributes>
 8001778:	b9d8      	cbnz	r0, 80017b2 <HAL_UART_MspInit+0x252>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800177a:	2200      	movs	r2, #0
 800177c:	2105      	movs	r1, #5
 800177e:	203b      	movs	r0, #59	; 0x3b
 8001780:	f002 fdb6 	bl	80042f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001784:	203b      	movs	r0, #59	; 0x3b
 8001786:	f002 fdf1 	bl	800436c <HAL_NVIC_EnableIRQ>
}
 800178a:	b04d      	add	sp, #308	; 0x134
 800178c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800178e:	f000 fd6f 	bl	8002270 <Error_Handler>
 8001792:	e775      	b.n	8001680 <HAL_UART_MspInit+0x120>
      Error_Handler();
 8001794:	f000 fd6c 	bl	8002270 <Error_Handler>
 8001798:	e768      	b.n	800166c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 800179a:	f000 fd69 	bl	8002270 <Error_Handler>
 800179e:	e74a      	b.n	8001636 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80017a0:	f000 fd66 	bl	8002270 <Error_Handler>
 80017a4:	e73e      	b.n	8001624 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 80017a6:	f000 fd63 	bl	8002270 <Error_Handler>
 80017aa:	e6fb      	b.n	80015a4 <HAL_UART_MspInit+0x44>
      Error_Handler();
 80017ac:	f000 fd60 	bl	8002270 <Error_Handler>
 80017b0:	e77a      	b.n	80016a8 <HAL_UART_MspInit+0x148>
      Error_Handler();
 80017b2:	f000 fd5d 	bl	8002270 <Error_Handler>
 80017b6:	e7e0      	b.n	800177a <HAL_UART_MspInit+0x21a>
      Error_Handler();
 80017b8:	f000 fd5a 	bl	8002270 <Error_Handler>
 80017bc:	e7d6      	b.n	800176c <HAL_UART_MspInit+0x20c>
      Error_Handler();
 80017be:	f000 fd57 	bl	8002270 <Error_Handler>
 80017c2:	e7b9      	b.n	8001738 <HAL_UART_MspInit+0x1d8>
      Error_Handler();
 80017c4:	f000 fd54 	bl	8002270 <Error_Handler>
 80017c8:	e7ad      	b.n	8001726 <HAL_UART_MspInit+0x1c6>
 80017ca:	bf00      	nop
 80017cc:	40004c00 	.word	0x40004c00
 80017d0:	40004400 	.word	0x40004400
 80017d4:	44020c00 	.word	0x44020c00
 80017d8:	42020000 	.word	0x42020000
 80017dc:	20000a68 	.word	0x20000a68
 80017e0:	400201d0 	.word	0x400201d0
 80017e4:	20000978 	.word	0x20000978
 80017e8:	400200d0 	.word	0x400200d0
 80017ec:	200009f0 	.word	0x200009f0
 80017f0:	40020150 	.word	0x40020150
 80017f4:	20000900 	.word	0x20000900
 80017f8:	40020050 	.word	0x40020050

080017fc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <HAL_UARTEx_RxEventCallback>:
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{

}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop

08001804 <HAL_UART_ErrorCallback>:
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <myputstr>:
	return ch;	
}

void myputstr(const char *str)
{
	while(*str) {
 8001808:	7801      	ldrb	r1, [r0, #0]
 800180a:	b141      	cbz	r1, 800181e <myputstr+0x16>
	while((USART2->ISR&0X40)==0);//循环发送,直到发送完毕   
 800180c:	4a04      	ldr	r2, [pc, #16]	; (8001820 <myputstr+0x18>)
 800180e:	69d3      	ldr	r3, [r2, #28]
 8001810:	065b      	lsls	r3, r3, #25
 8001812:	d5fc      	bpl.n	800180e <myputstr+0x6>
	USART2->TDR = (uint8_t) ch;      
 8001814:	6291      	str	r1, [r2, #40]	; 0x28
	while(*str) {
 8001816:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800181a:	2900      	cmp	r1, #0
 800181c:	d1f7      	bne.n	800180e <myputstr+0x6>
		//HAL_UART_Transmit(&huart1, (uint8_t *)str, 1, 0xFFFF);
		myputchar(*str);
		str++;
	}

}
 800181e:	4770      	bx	lr
 8001820:	40004400 	.word	0x40004400

08001824 <Draw_Init>:
{
#ifdef FERRRTOS_FLAG
	/* 创建mutex */
	g_spi_lcd_lock = xSemaphoreCreateMutex();
#endif
    LCD_GetInfo(&g_lcd_width, &g_lcd_height);
 8001824:	4901      	ldr	r1, [pc, #4]	; (800182c <Draw_Init+0x8>)
 8001826:	4802      	ldr	r0, [pc, #8]	; (8001830 <Draw_Init+0xc>)
 8001828:	f002 bcb6 	b.w	8004198 <LCD_GetInfo>
 800182c:	20000c0c 	.word	0x20000c0c
 8001830:	20000c10 	.word	0x20000c10

08001834 <Draw_Clear>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Clear(uint32_t dwColor)
{
 8001834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001836:	4606      	mov	r6, r0
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);

    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001838:	2100      	movs	r1, #0
 800183a:	4f17      	ldr	r7, [pc, #92]	; (8001898 <Draw_Clear+0x64>)
    g = g >> 2;
 800183c:	f3c6 2485 	ubfx	r4, r6, #10, #6
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001840:	4d16      	ldr	r5, [pc, #88]	; (800189c <Draw_Clear+0x68>)
    r = r >> 3;
 8001842:	f3c6 4cc4 	ubfx	ip, r6, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001846:	0164      	lsls	r4, r4, #5
 8001848:	ea44 24cc 	orr.w	r4, r4, ip, lsl #11
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	683a      	ldr	r2, [r7, #0]
    b = b >> 2;
 8001850:	f3c6 0685 	ubfx	r6, r6, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001854:	4334      	orrs	r4, r6
{
 8001856:	b083      	sub	sp, #12
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001858:	3b01      	subs	r3, #1
 800185a:	4608      	mov	r0, r1
 800185c:	3a01      	subs	r2, #1
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 800185e:	ba64      	rev16	r4, r4
 8001860:	f8ad 4006 	strh.w	r4, [sp, #6]
    LCD_SetWindows(0, 0, g_lcd_width-1, g_lcd_height-1);
 8001864:	f002 fca4 	bl	80041b0 <LCD_SetWindows>
    LCD_SetDataLine();
 8001868:	f002 fb3e 	bl	8003ee8 <LCD_SetDataLine>
    
    for(uint32_t x = 0; x < g_lcd_width; x++)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	2600      	movs	r6, #0
 8001870:	b17b      	cbz	r3, 8001892 <Draw_Clear+0x5e>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 8001872:	682b      	ldr	r3, [r5, #0]
 8001874:	2400      	movs	r4, #0
 8001876:	b143      	cbz	r3, 800188a <Draw_Clear+0x56>
            LCD_WriteDatas((uint8_t *)&wColor, 2);
 8001878:	2102      	movs	r1, #2
 800187a:	f10d 0006 	add.w	r0, sp, #6
 800187e:	f002 fb3b 	bl	8003ef8 <LCD_WriteDatas>
        for(uint32_t y = 0; y < g_lcd_height; y++)
 8001882:	682b      	ldr	r3, [r5, #0]
 8001884:	3401      	adds	r4, #1
 8001886:	42a3      	cmp	r3, r4
 8001888:	d8f6      	bhi.n	8001878 <Draw_Clear+0x44>
    for(uint32_t x = 0; x < g_lcd_width; x++)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	3601      	adds	r6, #1
 800188e:	42b3      	cmp	r3, r6
 8001890:	d8ef      	bhi.n	8001872 <Draw_Clear+0x3e>
}
 8001892:	b003      	add	sp, #12
 8001894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001896:	bf00      	nop
 8001898:	20000c10 	.word	0x20000c10
 800189c:	20000c0c 	.word	0x20000c0c

080018a0 <Draw_Pixel>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Pixel(int x, int y, uint32_t dwColor)
{
 80018a0:	b510      	push	{r4, lr}
 80018a2:	4696      	mov	lr, r2
    g = g >> 2;
 80018a4:	f3ce 2c85 	ubfx	ip, lr, #10, #6
    r = r >> 3;
 80018a8:	f3ce 44c4 	ubfx	r4, lr, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80018ac:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
    b = b >> 2;
 80018b0:	f3ce 0e85 	ubfx	lr, lr, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80018b4:	ea4c 2cc4 	orr.w	ip, ip, r4, lsl #11
 80018b8:	ea4c 0c0e 	orr.w	ip, ip, lr
{
 80018bc:	b082      	sub	sp, #8
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 80018c2:	fa9c fc9c 	rev16.w	ip, ip
 80018c6:	f8ad c006 	strh.w	ip, [sp, #6]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 80018ca:	f002 fc71 	bl	80041b0 <LCD_SetWindows>
    LCD_SetDataLine();
 80018ce:	f002 fb0b 	bl	8003ee8 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 80018d2:	2102      	movs	r1, #2
 80018d4:	f10d 0006 	add.w	r0, sp, #6
 80018d8:	f002 fb0e 	bl	8003ef8 <LCD_WriteDatas>
    bitmap.width = 1;
    bitmap.height = 1;
    bitmap.datas = (uint8_t *)&wColor;
    
    Draw_Region(x, y, &bitmap);
}
 80018dc:	b002      	add	sp, #8
 80018de:	bd10      	pop	{r4, pc}

080018e0 <Draw_ASCII>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_ASCII(uint32_t x, uint32_t y, char c, uint32_t front_color, uint32_t back_color)
{
 80018e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018e4:	b0c0      	sub	sp, #256	; 0x100
 80018e6:	466e      	mov	r6, sp
 80018e8:	9c46      	ldr	r4, [sp, #280]	; 0x118
 80018ea:	f50d 7880 	add.w	r8, sp, #256	; 0x100
    g = g >> 2;
 80018ee:	f3c4 2585 	ubfx	r5, r4, #10, #6
    r = r >> 3;
 80018f2:	f3c4 47c4 	ubfx	r7, r4, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 80018f6:	016d      	lsls	r5, r5, #5
 80018f8:	ea45 25c7 	orr.w	r5, r5, r7, lsl #11
    b = b >> 2;
 80018fc:	f3c4 0485 	ubfx	r4, r4, #2, #6
 8001900:	4f1a      	ldr	r7, [pc, #104]	; (800196c <Draw_ASCII+0x8c>)
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001902:	4325      	orrs	r5, r4
    g = g >> 2;
 8001904:	f3c3 2485 	ubfx	r4, r3, #10, #6
 8001908:	eb07 1702 	add.w	r7, r7, r2, lsl #4
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800190c:	0164      	lsls	r4, r4, #5
    r = r >> 3;
 800190e:	f3c3 42c4 	ubfx	r2, r3, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001912:	ea44 24c2 	orr.w	r4, r4, r2, lsl #11
    b = b >> 2;
 8001916:	f3c3 0385 	ubfx	r3, r3, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 800191a:	431c      	orrs	r4, r3
 800191c:	ba6d      	rev16	r5, r5
 800191e:	ba64      	rev16	r4, r4
 8001920:	b2ad      	uxth	r5, r5
    wColor = (wColor >> 8) | (wColor << 8);
 8001922:	b2a4      	uxth	r4, r4
    for (i = 0; i < 16; i++)
    {
        data = fontdata_8x16[c*16+i];
        for (bit = 7; bit >= 0; bit--)
        {
            if (data & (1<<bit))
 8001924:	46b4      	mov	ip, r6
        for (bit = 7; bit >= 0; bit--)
 8001926:	2307      	movs	r3, #7
        data = fontdata_8x16[c*16+i];
 8001928:	f817 2b01 	ldrb.w	r2, [r7], #1
            if (data & (1<<bit))
 800192c:	fa42 fe03 	asr.w	lr, r2, r3
 8001930:	f01e 0f01 	tst.w	lr, #1
 8001934:	bf14      	ite	ne
 8001936:	46a6      	movne	lr, r4
 8001938:	46ae      	moveq	lr, r5
        for (bit = 7; bit >= 0; bit--)
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
            else
            {
                color = back_color;
            }
            
            buf[i * 8 + (7-bit)] = color;
 8001940:	f82c eb02 	strh.w	lr, [ip], #2
        for (bit = 7; bit >= 0; bit--)
 8001944:	d1f2      	bne.n	800192c <Draw_ASCII+0x4c>
    for (i = 0; i < 16; i++)
 8001946:	3610      	adds	r6, #16
 8001948:	4546      	cmp	r6, r8
 800194a:	d1eb      	bne.n	8001924 <Draw_ASCII+0x44>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 800194c:	f101 030f 	add.w	r3, r1, #15
 8001950:	1dc2      	adds	r2, r0, #7
 8001952:	f002 fc2d 	bl	80041b0 <LCD_SetWindows>
    LCD_SetDataLine();
 8001956:	f002 fac7 	bl	8003ee8 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 800195a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800195e:	4668      	mov	r0, sp
 8001960:	f002 faca 	bl	8003ef8 <LCD_WriteDatas>
    bitmap.datas = (uint8_t *)buf;
    
    Draw_Region(x, y, &bitmap);

    return 8; /* 这个字符宽度为8 */
}
 8001964:	2008      	movs	r0, #8
 8001966:	b040      	add	sp, #256	; 0x100
 8001968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800196c:	0800c6bc 	.word	0x0800c6bc

08001970 <Draw_String>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int Draw_String(uint32_t x, uint32_t y, char *str, uint32_t front_color, uint32_t back_color)
{
 8001970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001974:	468b      	mov	fp, r1
 8001976:	469a      	mov	sl, r3
    size_t i;
    int line_width = 0;
 8001978:	2700      	movs	r7, #0
{
 800197a:	b085      	sub	sp, #20
 800197c:	4605      	mov	r5, r0
    for (i = 0; i < strlen(str); i++)
 800197e:	4610      	mov	r0, r2
{
 8001980:	4616      	mov	r6, r2
    for (i = 0; i < strlen(str); i++)
 8001982:	463c      	mov	r4, r7
 8001984:	f00a fc2c 	bl	800c1e0 <strlen>
            if (x >= 8)
                x -= 8;
        }
        else
        {
            if (x + 8 >= g_lcd_width)
 8001988:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001a04 <Draw_String+0x94>
 800198c:	4653      	mov	r3, sl
            {
                x = 0;
                y += 16;
            }

            if (y + 16 >= g_lcd_height)
 800198e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8001a08 <Draw_String+0x98>
 8001992:	46da      	mov	sl, fp
 8001994:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    for (i = 0; i < strlen(str); i++)
 8001998:	e022      	b.n	80019e0 <Draw_String+0x70>
        else if (str[i] == '\n')
 800199a:	2a0a      	cmp	r2, #10
 800199c:	d027      	beq.n	80019ee <Draw_String+0x7e>
        else if (str[i] == '\b')
 800199e:	2a08      	cmp	r2, #8
 80019a0:	d028      	beq.n	80019f4 <Draw_String+0x84>
            if (x + 8 >= g_lcd_width)
 80019a2:	f8d9 1000 	ldr.w	r1, [r9]
 80019a6:	f105 0008 	add.w	r0, r5, #8
 80019aa:	4288      	cmp	r0, r1
                y += 16;
 80019ac:	bf28      	it	cs
 80019ae:	f10a 0a10 	addcs.w	sl, sl, #16
            if (y + 16 >= g_lcd_height)
 80019b2:	f8d8 1000 	ldr.w	r1, [r8]
 80019b6:	f10a 0010 	add.w	r0, sl, #16
                x = 0;
 80019ba:	bf28      	it	cs
 80019bc:	2500      	movcs	r5, #0
            if (y + 16 >= g_lcd_height)
 80019be:	4288      	cmp	r0, r1
 80019c0:	d21c      	bcs.n	80019fc <Draw_String+0x8c>
                return line_width;

            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 80019c2:	4651      	mov	r1, sl
 80019c4:	4628      	mov	r0, r5
 80019c6:	f8cd b000 	str.w	fp, [sp]
 80019ca:	9303      	str	r3, [sp, #12]
 80019cc:	f7ff ff88 	bl	80018e0 <Draw_ASCII>
 80019d0:	4602      	mov	r2, r0
    for (i = 0; i < strlen(str); i++)
 80019d2:	4630      	mov	r0, r6
            line_width += Draw_ASCII(x, y, str[i], front_color, back_color);
 80019d4:	4417      	add	r7, r2
    for (i = 0; i < strlen(str); i++)
 80019d6:	f00a fc03 	bl	800c1e0 <strlen>
 80019da:	9b03      	ldr	r3, [sp, #12]
            x += 8;
 80019dc:	3508      	adds	r5, #8
    for (i = 0; i < strlen(str); i++)
 80019de:	3401      	adds	r4, #1
 80019e0:	4284      	cmp	r4, r0
 80019e2:	d20b      	bcs.n	80019fc <Draw_String+0x8c>
        if (str[i] == '\r')
 80019e4:	5d32      	ldrb	r2, [r6, r4]
 80019e6:	2a0d      	cmp	r2, #13
 80019e8:	d1d7      	bne.n	800199a <Draw_String+0x2a>
            x = 0;
 80019ea:	2500      	movs	r5, #0
 80019ec:	e7f7      	b.n	80019de <Draw_String+0x6e>
            y += 16;
 80019ee:	f10a 0a10 	add.w	sl, sl, #16
 80019f2:	e7f4      	b.n	80019de <Draw_String+0x6e>
            if (x >= 8)
 80019f4:	2d07      	cmp	r5, #7
 80019f6:	d9f2      	bls.n	80019de <Draw_String+0x6e>
                x -= 8;
 80019f8:	3d08      	subs	r5, #8
 80019fa:	e7f0      	b.n	80019de <Draw_String+0x6e>
        }
    }

    return line_width;
}
 80019fc:	4638      	mov	r0, r7
 80019fe:	b005      	add	sp, #20
 8001a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a04:	20000c10 	.word	0x20000c10
 8001a08:	20000c0c 	.word	0x20000c0c

08001a0c <Draw_Line>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Line(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint32_t front_color)
{
 8001a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t t;
    uint32_t yerr=0,delta_x,delta_y;
	uint32_t xerr = 0;
 8001a10:	2400      	movs	r4, #0
{
 8001a12:	b087      	sub	sp, #28
 8001a14:	9e10      	ldr	r6, [sp, #64]	; 0x40
    int incx,incy,uRow,uCol; 
    delta_x=x2-x1; //计算坐标增量
    delta_y=y2-y1; 
    uRow=x1; 
    uCol=y1; 
    if(delta_x>0)incx=1; //设置单步方向
 8001a16:	ebb2 0900 	subs.w	r9, r2, r0
    g = g >> 2;
 8001a1a:	f3c6 2585 	ubfx	r5, r6, #10, #6
    r = r >> 3;
 8001a1e:	f3c6 47c4 	ubfx	r7, r6, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001a22:	ea4f 1545 	mov.w	r5, r5, lsl #5
    uRow=x1; 
 8001a26:	4602      	mov	r2, r0
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001a28:	ea45 25c7 	orr.w	r5, r5, r7, lsl #11
    if(delta_x>0)incx=1; //设置单步方向
 8001a2c:	bf14      	ite	ne
 8001a2e:	2001      	movne	r0, #1
 8001a30:	4620      	moveq	r0, r4
    b = b >> 2;
 8001a32:	f3c6 0685 	ubfx	r6, r6, #2, #6
    else if(delta_x==0)incx=0;//垂直线
    else {incx=-1;delta_x=-delta_x;} 
    if(delta_y>0)incy=1; 
 8001a36:	ebb3 0801 	subs.w	r8, r3, r1
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001a3a:	ea45 0506 	orr.w	r5, r5, r6
    uCol=y1; 
 8001a3e:	460b      	mov	r3, r1
    if(delta_y>0)incy=1; 
 8001a40:	bf14      	ite	ne
 8001a42:	2101      	movne	r1, #1
 8001a44:	4621      	moveq	r1, r4
 8001a46:	45c1      	cmp	r9, r8
 8001a48:	464e      	mov	r6, r9
 8001a4a:	ba6d      	rev16	r5, r5
 8001a4c:	bf38      	it	cc
 8001a4e:	4646      	movcc	r6, r8
 8001a50:	fa1f fb85 	uxth.w	fp, r5
    else if(delta_y==0)incy=0;//水平线
    else{incy=-1;delta_y=-delta_y;} 
    if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
    else distance=delta_y; 
    for(t=0;t<=distance+1;t++ )//画线输出
 8001a54:	4627      	mov	r7, r4
    uint32_t yerr=0,delta_x,delta_y;
 8001a56:	4625      	mov	r5, r4
    if(delta_x>0)incx=1; //设置单步方向
 8001a58:	9002      	str	r0, [sp, #8]
    if(delta_y>0)incy=1; 
 8001a5a:	9103      	str	r1, [sp, #12]
    for(t=0;t<=distance+1;t++ )//画线输出
 8001a5c:	f106 0a01 	add.w	sl, r6, #1
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001a60:	4619      	mov	r1, r3
 8001a62:	4610      	mov	r0, r2
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	9200      	str	r2, [sp, #0]
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 8001a68:	f8ad b016 	strh.w	fp, [sp, #22]
    {  
        Draw_Pixel(uRow, uCol, front_color);//画点
        xerr+=delta_x ; 
 8001a6c:	444c      	add	r4, r9
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001a6e:	f002 fb9f 	bl	80041b0 <LCD_SetWindows>
    LCD_SetDataLine();
 8001a72:	f002 fa39 	bl	8003ee8 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001a76:	2102      	movs	r1, #2
 8001a78:	f10d 0016 	add.w	r0, sp, #22
 8001a7c:	f002 fa3c 	bl	8003ef8 <LCD_WriteDatas>
        yerr+=delta_y ; 
        if(xerr>distance) 
 8001a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001a84:	42a6      	cmp	r6, r4
    for(t=0;t<=distance+1;t++ )//画线输出
 8001a86:	f107 0701 	add.w	r7, r7, #1
        yerr+=delta_y ; 
 8001a8a:	4445      	add	r5, r8
        if(xerr>distance) 
 8001a8c:	d202      	bcs.n	8001a94 <Draw_Line+0x88>
        { 
            xerr-=distance; 
            uRow+=incx; 
 8001a8e:	9902      	ldr	r1, [sp, #8]
            xerr-=distance; 
 8001a90:	1ba4      	subs	r4, r4, r6
            uRow+=incx; 
 8001a92:	440a      	add	r2, r1
        } 
        if(yerr>distance) 
 8001a94:	42ae      	cmp	r6, r5
 8001a96:	d202      	bcs.n	8001a9e <Draw_Line+0x92>
        { 
            yerr-=distance; 
            uCol+=incy; 
 8001a98:	9903      	ldr	r1, [sp, #12]
            yerr-=distance; 
 8001a9a:	1bad      	subs	r5, r5, r6
            uCol+=incy; 
 8001a9c:	440b      	add	r3, r1
    for(t=0;t<=distance+1;t++ )//画线输出
 8001a9e:	4557      	cmp	r7, sl
 8001aa0:	d9de      	bls.n	8001a60 <Draw_Line+0x54>
        } 
    }  
} 
 8001aa2:	b007      	add	sp, #28
 8001aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001aa8 <Draw_Rectangle>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Rectangle(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2, uint32_t front_color)
{
 8001aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aac:	461c      	mov	r4, r3
 8001aae:	4606      	mov	r6, r0
 8001ab0:	460d      	mov	r5, r1
 8001ab2:	4690      	mov	r8, r2
 8001ab4:	b082      	sub	sp, #8
 8001ab6:	9f08      	ldr	r7, [sp, #32]
    Draw_Line(x1,y1,x2,y1,front_color);
 8001ab8:	460b      	mov	r3, r1
 8001aba:	9700      	str	r7, [sp, #0]
 8001abc:	f7ff ffa6 	bl	8001a0c <Draw_Line>
    Draw_Line(x1,y1,x1,y2,front_color);
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	4632      	mov	r2, r6
 8001ac4:	4629      	mov	r1, r5
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	9700      	str	r7, [sp, #0]
 8001aca:	f7ff ff9f 	bl	8001a0c <Draw_Line>
    Draw_Line(x1,y2,x2,y2,front_color);
 8001ace:	4630      	mov	r0, r6
 8001ad0:	4623      	mov	r3, r4
 8001ad2:	4642      	mov	r2, r8
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	9700      	str	r7, [sp, #0]
 8001ad8:	f7ff ff98 	bl	8001a0c <Draw_Line>
    Draw_Line(x2,y1,x2,y2,front_color);
 8001adc:	4623      	mov	r3, r4
 8001ade:	4642      	mov	r2, r8
 8001ae0:	4629      	mov	r1, r5
 8001ae2:	4640      	mov	r0, r8
 8001ae4:	9708      	str	r7, [sp, #32]
}
 8001ae6:	b002      	add	sp, #8
 8001ae8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    Draw_Line(x2,y1,x2,y2,front_color);
 8001aec:	f7ff bf8e 	b.w	8001a0c <Draw_Line>

08001af0 <Draw_Circle>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Circle(uint32_t x0, uint32_t y0, uint32_t r, uint32_t front_color)
{
 8001af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001af4:	461d      	mov	r5, r3
    int a,b;
    int di;
    a=0;b=r;      
    di=3-(r<<1);             //判断下个点位置的标志
 8001af6:	0053      	lsls	r3, r2, #1
{
 8001af8:	b089      	sub	sp, #36	; 0x24
    di=3-(r<<1);             //判断下个点位置的标志
 8001afa:	f1c3 0303 	rsb	r3, r3, #3
    while(a<=b)
 8001afe:	2a00      	cmp	r2, #0
{
 8001b00:	e9cd 0100 	strd	r0, r1, [sp]
    di=3-(r<<1);             //判断下个点位置的标志
 8001b04:	9302      	str	r3, [sp, #8]
    while(a<=b)
 8001b06:	db71      	blt.n	8001bec <Draw_Circle+0xfc>
    g = g >> 2;
 8001b08:	f3c5 2385 	ubfx	r3, r5, #10, #6
 8001b0c:	4616      	mov	r6, r2
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001b0e:	015b      	lsls	r3, r3, #5
    r = r >> 3;
 8001b10:	f3c5 42c4 	ubfx	r2, r5, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001b14:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
    b = b >> 2;
 8001b18:	f3c5 0285 	ubfx	r2, r5, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	ba5b      	rev16	r3, r3
 8001b20:	b29b      	uxth	r3, r3
    a=0;b=r;      
 8001b22:	2400      	movs	r4, #0
 8001b24:	9305      	str	r3, [sp, #20]
 8001b26:	e008      	b.n	8001b3a <Draw_Circle+0x4a>
        a++;
        //使用Bresenham算法画圆
        if(di<0)di +=4*a+6;   
        else
        {
            di+=10+4*(a-b);   
 8001b28:	9a02      	ldr	r2, [sp, #8]
 8001b2a:	1ba3      	subs	r3, r4, r6
 8001b2c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            b--;
 8001b30:	3e01      	subs	r6, #1
            di+=10+4*(a-b);   
 8001b32:	330a      	adds	r3, #10
    while(a<=b)
 8001b34:	42a6      	cmp	r6, r4
            di+=10+4*(a-b);   
 8001b36:	9302      	str	r3, [sp, #8]
    while(a<=b)
 8001b38:	db58      	blt.n	8001bec <Draw_Circle+0xfc>
        Draw_Pixel(x0+a, y0-b, front_color);             //5
 8001b3a:	9f00      	ldr	r7, [sp, #0]
 8001b3c:	9b01      	ldr	r3, [sp, #4]
 8001b3e:	eb07 0904 	add.w	r9, r7, r4
 8001b42:	eba3 0b06 	sub.w	fp, r3, r6
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 8001b46:	9f05      	ldr	r7, [sp, #20]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001b48:	464a      	mov	r2, r9
 8001b4a:	4659      	mov	r1, fp
 8001b4c:	4648      	mov	r0, r9
 8001b4e:	465b      	mov	r3, fp
    uint16_t wColor = RGB888_To_LCDRGB565(dwColor);
 8001b50:	f8ad 701e 	strh.w	r7, [sp, #30]
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001b54:	f002 fb2c 	bl	80041b0 <LCD_SetWindows>
    LCD_SetDataLine();
 8001b58:	9b01      	ldr	r3, [sp, #4]
 8001b5a:	eba3 0a04 	sub.w	sl, r3, r4
 8001b5e:	f002 f9c3 	bl	8003ee8 <LCD_SetDataLine>
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 8001b62:	9f00      	ldr	r7, [sp, #0]
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001b64:	2102      	movs	r1, #2
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 8001b66:	19f7      	adds	r7, r6, r7
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001b68:	f10d 001e 	add.w	r0, sp, #30
 8001b6c:	f002 f9c4 	bl	8003ef8 <LCD_WriteDatas>
        Draw_Pixel(x0+b, y0-a, front_color);             //0           
 8001b70:	eb0a 0344 	add.w	r3, sl, r4, lsl #1
 8001b74:	4638      	mov	r0, r7
 8001b76:	462a      	mov	r2, r5
 8001b78:	4651      	mov	r1, sl
 8001b7a:	9304      	str	r3, [sp, #16]
 8001b7c:	9703      	str	r7, [sp, #12]
 8001b7e:	f7ff fe8f 	bl	80018a0 <Draw_Pixel>
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 8001b82:	9b04      	ldr	r3, [sp, #16]
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 8001b84:	9a01      	ldr	r2, [sp, #4]
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 8001b86:	4619      	mov	r1, r3
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 8001b88:	eb06 0802 	add.w	r8, r6, r2
        Draw_Pixel(x0+b, y0+a, front_color);             //4               
 8001b8c:	9803      	ldr	r0, [sp, #12]
 8001b8e:	462a      	mov	r2, r5
 8001b90:	f7ff fe86 	bl	80018a0 <Draw_Pixel>
        Draw_Pixel(x0+a, y0+b, front_color);             //6 
 8001b94:	0067      	lsls	r7, r4, #1
 8001b96:	4641      	mov	r1, r8
 8001b98:	4648      	mov	r0, r9
 8001b9a:	462a      	mov	r2, r5
 8001b9c:	eba9 0707 	sub.w	r7, r9, r7
 8001ba0:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ba4:	f7ff fe7c 	bl	80018a0 <Draw_Pixel>
        Draw_Pixel(x0-b, y0+a, front_color);             
 8001ba8:	9b00      	ldr	r3, [sp, #0]
        Draw_Pixel(x0-a, y0+b, front_color);             //1       
 8001baa:	462a      	mov	r2, r5
 8001bac:	4638      	mov	r0, r7
 8001bae:	9903      	ldr	r1, [sp, #12]
        Draw_Pixel(x0-b, y0+a, front_color);             
 8001bb0:	eba3 0806 	sub.w	r8, r3, r6
        Draw_Pixel(x0-a, y0+b, front_color);             //1       
 8001bb4:	f7ff fe74 	bl	80018a0 <Draw_Pixel>
        Draw_Pixel(x0-b, y0+a, front_color);             
 8001bb8:	9b04      	ldr	r3, [sp, #16]
 8001bba:	462a      	mov	r2, r5
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4640      	mov	r0, r8
 8001bc0:	f7ff fe6e 	bl	80018a0 <Draw_Pixel>
        Draw_Pixel(x0-a, y0-b, front_color);             //2             
 8001bc4:	462a      	mov	r2, r5
 8001bc6:	4659      	mov	r1, fp
 8001bc8:	4638      	mov	r0, r7
 8001bca:	f7ff fe69 	bl	80018a0 <Draw_Pixel>
        Draw_Pixel(x0-b, y0-a, front_color);             //7                 
 8001bce:	462a      	mov	r2, r5
 8001bd0:	4651      	mov	r1, sl
 8001bd2:	4640      	mov	r0, r8
 8001bd4:	f7ff fe64 	bl	80018a0 <Draw_Pixel>
        if(di<0)di +=4*a+6;   
 8001bd8:	9b02      	ldr	r3, [sp, #8]
        a++;
 8001bda:	3401      	adds	r4, #1
        if(di<0)di +=4*a+6;   
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001be2:	daa1      	bge.n	8001b28 <Draw_Circle+0x38>
 8001be4:	3306      	adds	r3, #6
    while(a<=b)
 8001be6:	42a6      	cmp	r6, r4
        if(di<0)di +=4*a+6;   
 8001be8:	9302      	str	r3, [sp, #8]
    while(a<=b)
 8001bea:	daa6      	bge.n	8001b3a <Draw_Circle+0x4a>
        }                           
    }
} 
 8001bec:	b009      	add	sp, #36	; 0x24
 8001bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001bf2:	bf00      	nop

08001bf4 <Draw_ChineseFont>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_ChineseFont(uint32_t x, uint32_t y, char *cn, uint32_t front_color, uint32_t back_color)
{
 8001bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf8:	ed2d 8b02 	vpush	{d8}
    uint32_t x0=x;
    uint32_t y0=y;
    static uint8_t *buf;
    BitMap bitmap; 

    if (!buf)
 8001bfc:	4c5d      	ldr	r4, [pc, #372]	; (8001d74 <Draw_ChineseFont+0x180>)
{
 8001bfe:	b083      	sub	sp, #12
    if (!buf)
 8001c00:	6824      	ldr	r4, [r4, #0]
{
 8001c02:	4606      	mov	r6, r0
    if (!buf)
 8001c04:	9400      	str	r4, [sp, #0]
{
 8001c06:	461c      	mov	r4, r3
    if (!buf)
 8001c08:	9b00      	ldr	r3, [sp, #0]
{
 8001c0a:	460f      	mov	r7, r1
 8001c0c:	4615      	mov	r5, r2
 8001c0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!buf)
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	f000 80a4 	beq.w	8001d60 <Draw_ChineseFont+0x16c>
 8001c18:	1ceb      	adds	r3, r5, #3
    g = g >> 2;
 8001c1a:	f3c8 2a85 	ubfx	sl, r8, #10, #6
 8001c1e:	f3c4 2985 	ubfx	r9, r4, #10, #6
 8001c22:	9300      	str	r3, [sp, #0]
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c24:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
    r = r >> 3;
 8001c28:	f3c8 43c4 	ubfx	r3, r8, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c2c:	ea4a 2ac3 	orr.w	sl, sl, r3, lsl #11
 8001c30:	ea4f 1949 	mov.w	r9, r9, lsl #5
    r = r >> 3;
 8001c34:	f3c4 43c4 	ubfx	r3, r4, #19, #5
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c38:	ea49 29c3 	orr.w	r9, r9, r3, lsl #11
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001c3c:	f107 031c 	add.w	r3, r7, #28
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c40:	463d      	mov	r5, r7
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001c42:	ee08 3a10 	vmov	s16, r3
    b = b >> 2;
 8001c46:	f3c8 0885 	ubfx	r8, r8, #2, #6
 8001c4a:	f3c4 0485 	ubfx	r4, r4, #2, #6
    uint16_t wColor = (r << 11) | (g << 5) | b;
 8001c4e:	ea4a 0a08 	orr.w	sl, sl, r8
 8001c52:	ea49 0904 	orr.w	r9, r9, r4
 8001c56:	fa9a fa9a 	rev16.w	sl, sl
 8001c5a:	fa99 f999 	rev16.w	r9, r9
 8001c5e:	fa1f fa8a 	uxth.w	sl, sl
 8001c62:	fa1f f989 	uxth.w	r9, r9
        buf = malloc(32*29*2);
        if (!buf)
            return;
    }
    
    while (*cn != '\0')
 8001c66:	9b00      	ldr	r3, [sp, #0]
 8001c68:	f813 1c03 	ldrb.w	r1, [r3, #-3]
 8001c6c:	2900      	cmp	r1, #0
 8001c6e:	d072      	beq.n	8001d56 <Draw_ChineseFont+0x162>
    {
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8001c70:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <Draw_ChineseFont+0x184>)
 8001c72:	4634      	mov	r4, r6
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d05d      	beq.n	8001d36 <Draw_ChineseFont+0x142>
 8001c7a:	f8df b104 	ldr.w	fp, [pc, #260]	; 8001d80 <Draw_ChineseFont+0x18c>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001c7e:	f106 021f 	add.w	r2, r6, #31
 8001c82:	e008      	b.n	8001c96 <Draw_ChineseFont+0xa2>
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8001c84:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8001c88:	f10b 0b78 	add.w	fp, fp, #120	; 0x78
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d052      	beq.n	8001d36 <Draw_ChineseFont+0x142>
        {   //wordNum扫描字库CnChar32x29的字数
            if ((CnChar32x29[wordNum].Index[0]==*cn)
 8001c90:	9900      	ldr	r1, [sp, #0]
 8001c92:	f811 1c03 	ldrb.w	r1, [r1, #-3]
 8001c96:	4299      	cmp	r1, r3
 8001c98:	d1f4      	bne.n	8001c84 <Draw_ChineseFont+0x90>
                 &&(CnChar32x29[wordNum].Index[1]==*(cn+1))
 8001c9a:	9b00      	ldr	r3, [sp, #0]
 8001c9c:	f81b 1c76 	ldrb.w	r1, [fp, #-118]
 8001ca0:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 8001ca4:	4299      	cmp	r1, r3
 8001ca6:	d1ed      	bne.n	8001c84 <Draw_ChineseFont+0x90>
                 &&(CnChar32x29[wordNum].Index[2]==*(cn+2)))
 8001ca8:	9b00      	ldr	r3, [sp, #0]
 8001caa:	f81b 1c75 	ldrb.w	r1, [fp, #-117]
 8001cae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8001cb2:	4299      	cmp	r1, r3
 8001cb4:	d1e6      	bne.n	8001c84 <Draw_ChineseFont+0x90>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, front_color);
                        }                       
                        else
                        {
                            //Draw_Pixel(x,y,back_color);
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, back_color);
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <Draw_ChineseFont+0x180>)
 8001cb8:	f1ab 0e74 	sub.w	lr, fp, #116	; 0x74
 8001cbc:	f8d3 8000 	ldr.w	r8, [r3]
                    color=CnChar32x29[wordNum].Msk[i];
 8001cc0:	f04f 0c08 	mov.w	ip, #8
 8001cc4:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
                    for(j=0;j<8;j++) 
 8001cc8:	e010      	b.n	8001cec <Draw_ChineseFont+0xf8>
    tmpBuf[y*w + x] = dwColor;    
 8001cca:	f828 9013 	strh.w	r9, [r8, r3, lsl #1]
                        } 
                        color<<=1;
                        x++;
 8001cce:	3401      	adds	r4, #1
                        if((x-x0)==32)
 8001cd0:	1ba3      	subs	r3, r4, r6
 8001cd2:	2b20      	cmp	r3, #32
                        color<<=1;
 8001cd4:	ea4f 0040 	mov.w	r0, r0, lsl #1
                        if((x-x0)==32)
 8001cd8:	d105      	bne.n	8001ce6 <Draw_ChineseFont+0xf2>
                        {
                            x=x0;
                            y++;
 8001cda:	3501      	adds	r5, #1
                            if((y-y0)==29)
 8001cdc:	1beb      	subs	r3, r5, r7
                            {
                                y=y0;
 8001cde:	2b1d      	cmp	r3, #29
 8001ce0:	bf08      	it	eq
 8001ce2:	463d      	moveq	r5, r7
 8001ce4:	4634      	mov	r4, r6
                    for(j=0;j<8;j++) 
 8001ce6:	f1bc 0c01 	subs.w	ip, ip, #1
 8001cea:	d00d      	beq.n	8001d08 <Draw_ChineseFont+0x114>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, front_color);
 8001cec:	1be9      	subs	r1, r5, r7
 8001cee:	1ba3      	subs	r3, r4, r6
                        if((color&0x80)==0x80)
 8001cf0:	f010 0f80 	tst.w	r0, #128	; 0x80
    tmpBuf[y*w + x] = dwColor;    
 8001cf4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
                        if((color&0x80)==0x80)
 8001cf8:	d1e7      	bne.n	8001cca <Draw_ChineseFont+0xd6>
                            Draw_Pixel_In_Buf(buf, x-x0, y-y0, 32, 29, back_color);
 8001cfa:	1beb      	subs	r3, r5, r7
 8001cfc:	1ba1      	subs	r1, r4, r6
    tmpBuf[y*w + x] = dwColor;    
 8001cfe:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 8001d02:	f828 a013 	strh.w	sl, [r8, r3, lsl #1]
}
 8001d06:	e7e2      	b.n	8001cce <Draw_ChineseFont+0xda>
                for(i=0; i<116; i++) 
 8001d08:	45de      	cmp	lr, fp
 8001d0a:	d1d9      	bne.n	8001cc0 <Draw_ChineseFont+0xcc>
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001d0c:	ee18 3a10 	vmov	r3, s16
 8001d10:	4639      	mov	r1, r7
 8001d12:	4630      	mov	r0, r6
 8001d14:	9201      	str	r2, [sp, #4]
 8001d16:	f002 fa4b 	bl	80041b0 <LCD_SetWindows>
    LCD_SetDataLine();
 8001d1a:	f002 f8e5 	bl	8003ee8 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001d1e:	4640      	mov	r0, r8
 8001d20:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8001d24:	f002 f8e8 	bl	8003ef8 <LCD_WriteDatas>
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8001d28:	f89b 3001 	ldrb.w	r3, [fp, #1]
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001d2c:	9a01      	ldr	r2, [sp, #4]
        for (wordNum=0; CnChar32x29[wordNum].Index[0]; wordNum++)
 8001d2e:	f10b 0b78 	add.w	fp, fp, #120	; 0x78
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1ac      	bne.n	8001c90 <Draw_ChineseFont+0x9c>
            
        } //for (wordNum=0; wordNum<20; wordNum++)结束
        cn += 3;  /* 一个汉字的UTF8编码占据3字节 */
        x += 32;
        
        if (x >= g_lcd_width)
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <Draw_ChineseFont+0x188>)
        x += 32;
 8001d38:	f104 0620 	add.w	r6, r4, #32
        if (x >= g_lcd_width)
 8001d3c:	681a      	ldr	r2, [r3, #0]
        {
            x = 0;
            y += 29;
        }

        if (y + 29 >= g_lcd_width)
 8001d3e:	9900      	ldr	r1, [sp, #0]
        if (x >= g_lcd_width)
 8001d40:	42b2      	cmp	r2, r6
            y += 29;
 8001d42:	bf98      	it	ls
 8001d44:	351d      	addls	r5, #29
        if (y + 29 >= g_lcd_width)
 8001d46:	f105 031d 	add.w	r3, r5, #29
            x = 0;
 8001d4a:	bf98      	it	ls
 8001d4c:	2600      	movls	r6, #0
        if (y + 29 >= g_lcd_width)
 8001d4e:	3103      	adds	r1, #3
 8001d50:	429a      	cmp	r2, r3
 8001d52:	9100      	str	r1, [sp, #0]
 8001d54:	d887      	bhi.n	8001c66 <Draw_ChineseFont+0x72>
            return;
        
        x0=x;
    }
}   
 8001d56:	b003      	add	sp, #12
 8001d58:	ecbd 8b02 	vpop	{d8}
 8001d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        buf = malloc(32*29*2);
 8001d60:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8001d64:	f009 ff0a 	bl	800bb7c <malloc>
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <Draw_ChineseFont+0x180>)
 8001d6a:	6018      	str	r0, [r3, #0]
        if (!buf)
 8001d6c:	2800      	cmp	r0, #0
 8001d6e:	f47f af53 	bne.w	8001c18 <Draw_ChineseFont+0x24>
 8001d72:	e7f0      	b.n	8001d56 <Draw_ChineseFont+0x162>
 8001d74:	20000c08 	.word	0x20000c08
 8001d78:	0800d6bc 	.word	0x0800d6bc
 8001d7c:	20000c10 	.word	0x20000c10
 8001d80:	0800d733 	.word	0x0800d733

08001d84 <Draw_Picture>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void Draw_Picture(uint32_t x, uint32_t y, const uint8_t *pic)
{
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	4616      	mov	r6, r2
    P_HEADCOLOR pHead = (P_HEADCOLOR)pic;
    BitMap bitmap; 

    int w = pHead->w;
 8001d88:	8875      	ldrh	r5, [r6, #2]
    int h = pHead->h;
 8001d8a:	f8b6 c004 	ldrh.w	ip, [r6, #4]

    /* 转为小字节序 */
    w = ((w<<8)|(w>>8)) & 0xffff;
 8001d8e:	122c      	asrs	r4, r5, #8
 8001d90:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    h = ((h<<8)|(h>>8)) & 0xffff;
 8001d94:	ea4f 252c 	mov.w	r5, ip, asr #8
 8001d98:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001d9c:	1e42      	subs	r2, r0, #1
 8001d9e:	1e4b      	subs	r3, r1, #1
    w = ((w<<8)|(w>>8)) & 0xffff;
 8001da0:	b2a4      	uxth	r4, r4
    h = ((h<<8)|(h>>8)) & 0xffff;
 8001da2:	b2ad      	uxth	r5, r5
    LCD_SetWindows(x, y, x + ptBitMap->width - 1, y + ptBitMap->height - 1);
 8001da4:	4422      	add	r2, r4
 8001da6:	442b      	add	r3, r5
 8001da8:	f002 fa02 	bl	80041b0 <LCD_SetWindows>
    LCD_SetDataLine();
 8001dac:	f002 f89c 	bl	8003ee8 <LCD_SetDataLine>
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001db0:	fb05 f104 	mul.w	r1, r5, r4
 8001db4:	f106 0008 	add.w	r0, r6, #8
 8001db8:	0049      	lsls	r1, r1, #1

    bitmap.width = w;
    bitmap.height = h;        
    bitmap.datas = (uint8_t *)pic;
    Draw_Region(x, y, &bitmap);
}
 8001dba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LCD_WriteDatas(ptBitMap->datas, ptBitMap->height * ptBitMap->width * 2);
 8001dbe:	f002 b89b 	b.w	8003ef8 <LCD_WriteDatas>
 8001dc2:	bf00      	nop

08001dc4 <MX_GPDMA1_Init>:
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <MX_GPDMA1_Init+0x64>)
{
 8001dc6:	b500      	push	{lr}
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001dc8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
{
 8001dcc:	b083      	sub	sp, #12
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001dce:	f040 0001 	orr.w	r0, r0, #1
 8001dd2:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88

  /* GPDMA1 interrupt Init */
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001dda:	2200      	movs	r2, #0
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001ddc:	f003 0301 	and.w	r3, r3, #1
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001de0:	2105      	movs	r1, #5
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001de2:	9301      	str	r3, [sp, #4]
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001de4:	201b      	movs	r0, #27
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8001de6:	9b01      	ldr	r3, [sp, #4]
	HAL_NVIC_SetPriority(GPDMA1_Channel0_IRQn, 5, 0);
 8001de8:	f002 fa82 	bl	80042f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel0_IRQn);
 8001dec:	201b      	movs	r0, #27
 8001dee:	f002 fabd 	bl	800436c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 5, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2105      	movs	r1, #5
 8001df6:	201c      	movs	r0, #28
 8001df8:	f002 fa7a 	bl	80042f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 8001dfc:	201c      	movs	r0, #28
 8001dfe:	f002 fab5 	bl	800436c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel2_IRQn, 5, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2105      	movs	r1, #5
 8001e06:	201d      	movs	r0, #29
 8001e08:	f002 fa72 	bl	80042f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel2_IRQn);
 8001e0c:	201d      	movs	r0, #29
 8001e0e:	f002 faad 	bl	800436c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(GPDMA1_Channel3_IRQn, 5, 0);
 8001e12:	201e      	movs	r0, #30
 8001e14:	2200      	movs	r2, #0
 8001e16:	2105      	movs	r1, #5
 8001e18:	f002 fa6a 	bl	80042f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001e1c:	201e      	movs	r0, #30
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8001e1e:	b003      	add	sp, #12
 8001e20:	f85d eb04 	ldr.w	lr, [sp], #4
	HAL_NVIC_EnableIRQ(GPDMA1_Channel3_IRQn);
 8001e24:	f002 baa2 	b.w	800436c <HAL_NVIC_EnableIRQ>
 8001e28:	44020c00 	.word	0x44020c00

08001e2c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8001e2e:	1e43      	subs	r3, r0, #1
 8001e30:	330a      	adds	r3, #10
 8001e32:	d85d      	bhi.n	8001ef0 <pvPortMalloc+0xc4>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
        {
            xWantedSize += xHeapStructSize;
 8001e34:	f100 0408 	add.w	r4, r0, #8

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001e38:	f010 0007 	ands.w	r0, r0, #7
 8001e3c:	d162      	bne.n	8001f04 <pvPortMalloc+0xd8>

    vTaskSuspendAll();
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8001e3e:	4d4e      	ldr	r5, [pc, #312]	; (8001f78 <pvPortMalloc+0x14c>)
    vTaskSuspendAll();
 8001e40:	f009 fb6a 	bl	800b518 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001e44:	682b      	ldr	r3, [r5, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 808d 	beq.w	8001f66 <pvPortMalloc+0x13a>
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001e4c:	4623      	mov	r3, r4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dd53      	ble.n	8001efa <pvPortMalloc+0xce>
 8001e52:	4f4a      	ldr	r7, [pc, #296]	; (8001f7c <pvPortMalloc+0x150>)
 8001e54:	683e      	ldr	r6, [r7, #0]
 8001e56:	42a6      	cmp	r6, r4
 8001e58:	d34f      	bcc.n	8001efa <pvPortMalloc+0xce>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001e5a:	4949      	ldr	r1, [pc, #292]	; (8001f80 <pvPortMalloc+0x154>)
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001e5c:	4849      	ldr	r0, [pc, #292]	; (8001f84 <pvPortMalloc+0x158>)
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001e5e:	680b      	ldr	r3, [r1, #0]
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001e60:	4283      	cmp	r3, r0
 8001e62:	d356      	bcc.n	8001f12 <pvPortMalloc+0xe6>
 8001e64:	f600 7eff 	addw	lr, r0, #4095	; 0xfff
 8001e68:	4573      	cmp	r3, lr
 8001e6a:	d852      	bhi.n	8001f12 <pvPortMalloc+0xe6>
 8001e6c:	468c      	mov	ip, r1
 8001e6e:	e007      	b.n	8001e80 <pvPortMalloc+0x54>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	b142      	cbz	r2, 8001e86 <pvPortMalloc+0x5a>
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001e74:	4282      	cmp	r2, r0
 8001e76:	d370      	bcc.n	8001f5a <pvPortMalloc+0x12e>
 8001e78:	4572      	cmp	r2, lr
 8001e7a:	469c      	mov	ip, r3
 8001e7c:	d86d      	bhi.n	8001f5a <pvPortMalloc+0x12e>
 8001e7e:	4613      	mov	r3, r2
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8001e80:	6859      	ldr	r1, [r3, #4]
 8001e82:	42a1      	cmp	r1, r4
 8001e84:	d3f4      	bcc.n	8001e70 <pvPortMalloc+0x44>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8001e86:	682a      	ldr	r2, [r5, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d036      	beq.n	8001efa <pvPortMalloc+0xce>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8001e8c:	f8dc 5000 	ldr.w	r5, [ip]
 8001e90:	3508      	adds	r5, #8
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8001e92:	4285      	cmp	r5, r0
 8001e94:	d364      	bcc.n	8001f60 <pvPortMalloc+0x134>
 8001e96:	4575      	cmp	r5, lr
 8001e98:	d862      	bhi.n	8001f60 <pvPortMalloc+0x134>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e9a:	6818      	ldr	r0, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8001e9c:	42a1      	cmp	r1, r4
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001e9e:	f8cc 0000 	str.w	r0, [ip]
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8001ea2:	d362      	bcc.n	8001f6a <pvPortMalloc+0x13e>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001ea4:	eba1 0e04 	sub.w	lr, r1, r4
 8001ea8:	f1be 0f10 	cmp.w	lr, #16
 8001eac:	d908      	bls.n	8001ec0 <pvPortMalloc+0x94>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001eae:	191a      	adds	r2, r3, r4
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001eb0:	0751      	lsls	r1, r2, #29
 8001eb2:	d15d      	bne.n	8001f70 <pvPortMalloc+0x144>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	f8c2 e004 	str.w	lr, [r2, #4]
                        pxBlock->xBlockSize = xWantedSize;

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8001eba:	5118      	str	r0, [r3, r4]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8001ebc:	f8cc 2000 	str.w	r2, [ip]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ec0:	4831      	ldr	r0, [pc, #196]	; (8001f88 <pvPortMalloc+0x15c>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ec2:	1a76      	subs	r6, r6, r1
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001ec4:	6804      	ldr	r4, [r0, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8001ec6:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001eca:	42a6      	cmp	r6, r4
                    pxBlock->pxNextFreeBlock = NULL;
 8001ecc:	f04f 0400 	mov.w	r4, #0
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001ed0:	bf38      	it	cc
 8001ed2:	6006      	strcc	r6, [r0, #0]
                    xNumberOfSuccessfulAllocations++;
 8001ed4:	482d      	ldr	r0, [pc, #180]	; (8001f8c <pvPortMalloc+0x160>)
                    heapALLOCATE_BLOCK( pxBlock );
 8001ed6:	6059      	str	r1, [r3, #4]
                    xNumberOfSuccessfulAllocations++;
 8001ed8:	6802      	ldr	r2, [r0, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 8001eda:	601c      	str	r4, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8001edc:	3201      	adds	r2, #1
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001ede:	603e      	str	r6, [r7, #0]
                    xNumberOfSuccessfulAllocations++;
 8001ee0:	6002      	str	r2, [r0, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001ee2:	f009 fb21 	bl	800b528 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001ee6:	076b      	lsls	r3, r5, #29
 8001ee8:	d00a      	beq.n	8001f00 <pvPortMalloc+0xd4>
 8001eea:	f000 fb33 	bl	8002554 <ulSetInterruptMask>
 8001eee:	e7fe      	b.n	8001eee <pvPortMalloc+0xc2>
        if( pxEnd == NULL )
 8001ef0:	4d21      	ldr	r5, [pc, #132]	; (8001f78 <pvPortMalloc+0x14c>)
    vTaskSuspendAll();
 8001ef2:	f009 fb11 	bl	800b518 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8001ef6:	682b      	ldr	r3, [r5, #0]
 8001ef8:	b173      	cbz	r3, 8001f18 <pvPortMalloc+0xec>
    ( void ) xTaskResumeAll();
 8001efa:	f009 fb15 	bl	800b528 <xTaskResumeAll>
 8001efe:	2500      	movs	r5, #0
    return pvReturn;
}
 8001f00:	4628      	mov	r0, r5
 8001f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8001f04:	f1c0 0008 	rsb	r0, r0, #8
                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8001f08:	43c3      	mvns	r3, r0
 8001f0a:	42a3      	cmp	r3, r4
 8001f0c:	d3f0      	bcc.n	8001ef0 <pvPortMalloc+0xc4>
                    xWantedSize += xAdditionalRequiredSize;
 8001f0e:	4404      	add	r4, r0
 8001f10:	e795      	b.n	8001e3e <pvPortMalloc+0x12>
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001f12:	f000 fb1f 	bl	8002554 <ulSetInterruptMask>
 8001f16:	e7fe      	b.n	8001f16 <pvPortMalloc+0xea>
        if( pxEnd == NULL )
 8001f18:	461c      	mov	r4, r3
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001f1a:	481a      	ldr	r0, [pc, #104]	; (8001f84 <pvPortMalloc+0x158>)

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001f1c:	0746      	lsls	r6, r0, #29
 8001f1e:	d115      	bne.n	8001f4c <pvPortMalloc+0x120>
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
    xStart.xBlockSize = ( size_t ) 0;

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8001f20:	4601      	mov	r1, r0
 8001f22:	4606      	mov	r6, r0
 8001f24:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
    xStart.xBlockSize = ( size_t ) 0;
 8001f28:	2000      	movs	r0, #0
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8001f2a:	3a08      	subs	r2, #8
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001f2c:	f022 0207 	bic.w	r2, r2, #7
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8001f30:	4f13      	ldr	r7, [pc, #76]	; (8001f80 <pvPortMalloc+0x154>)
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001f32:	1a51      	subs	r1, r2, r1
    xStart.xBlockSize = ( size_t ) 0;
 8001f34:	e9c7 6000 	strd	r6, r0, [r7]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8001f38:	602a      	str	r2, [r5, #0]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8001f3a:	e9c2 0000 	strd	r0, r0, [r2]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8001f3e:	e9c6 2100 	strd	r2, r1, [r6]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f42:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <pvPortMalloc+0x15c>)
 8001f44:	6011      	str	r1, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <pvPortMalloc+0x150>)
 8001f48:	6011      	str	r1, [r2, #0]
}
 8001f4a:	e780      	b.n	8001e4e <pvPortMalloc+0x22>
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8001f4c:	1dc1      	adds	r1, r0, #7
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001f4e:	f021 0107 	bic.w	r1, r1, #7
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8001f52:	460e      	mov	r6, r1
 8001f54:	f500 5280 	add.w	r2, r0, #4096	; 0x1000
 8001f58:	e7e6      	b.n	8001f28 <pvPortMalloc+0xfc>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8001f5a:	f000 fafb 	bl	8002554 <ulSetInterruptMask>
 8001f5e:	e7fe      	b.n	8001f5e <pvPortMalloc+0x132>
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8001f60:	f000 faf8 	bl	8002554 <ulSetInterruptMask>
 8001f64:	e7fe      	b.n	8001f64 <pvPortMalloc+0x138>
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001f66:	4623      	mov	r3, r4
 8001f68:	e7d7      	b.n	8001f1a <pvPortMalloc+0xee>
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8001f6a:	f000 faf3 	bl	8002554 <ulSetInterruptMask>
 8001f6e:	e7fe      	b.n	8001f6e <pvPortMalloc+0x142>
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001f70:	f000 faf0 	bl	8002554 <ulSetInterruptMask>
 8001f74:	e7fe      	b.n	8001f74 <pvPortMalloc+0x148>
 8001f76:	bf00      	nop
 8001f78:	20000c14 	.word	0x20000c14
 8001f7c:	20001c18 	.word	0x20001c18
 8001f80:	20001c28 	.word	0x20001c28
 8001f84:	20000c18 	.word	0x20000c18
 8001f88:	20001c1c 	.word	0x20001c1c
 8001f8c:	20001c20 	.word	0x20001c20

08001f90 <vPortFree>:
    if( pv != NULL )
 8001f90:	b1b8      	cbz	r0, 8001fc2 <vPortFree+0x32>
{
 8001f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8001f94:	4e2f      	ldr	r6, [pc, #188]	; (8002054 <vPortFree+0xc4>)
        puc -= xHeapStructSize;
 8001f96:	f1a0 0508 	sub.w	r5, r0, #8
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8001f9a:	42b5      	cmp	r5, r6
 8001f9c:	4604      	mov	r4, r0
 8001f9e:	d30d      	bcc.n	8001fbc <vPortFree+0x2c>
 8001fa0:	f606 77ff 	addw	r7, r6, #4095	; 0xfff
 8001fa4:	42bd      	cmp	r5, r7
 8001fa6:	d809      	bhi.n	8001fbc <vPortFree+0x2c>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001fa8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	da09      	bge.n	8001fc4 <vPortFree+0x34>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001fb0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001fb4:	b149      	cbz	r1, 8001fca <vPortFree+0x3a>
 8001fb6:	f000 facd 	bl	8002554 <ulSetInterruptMask>
 8001fba:	e7fe      	b.n	8001fba <vPortFree+0x2a>
        heapVALIDATE_BLOCK_POINTER( pxLink );
 8001fbc:	f000 faca 	bl	8002554 <ulSetInterruptMask>
 8001fc0:	e7fe      	b.n	8001fc0 <vPortFree+0x30>
 8001fc2:	4770      	bx	lr
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8001fc4:	f000 fac6 	bl	8002554 <ulSetInterruptMask>
 8001fc8:	e7fe      	b.n	8001fc8 <vPortFree+0x38>
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8001fca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
                heapFREE_BLOCK( pxLink );
 8001fce:	4613      	mov	r3, r2
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8001fd0:	f022 0207 	bic.w	r2, r2, #7
                heapFREE_BLOCK( pxLink );
 8001fd4:	f840 3c04 	str.w	r3, [r0, #-4]
                    if( heapSUBTRACT_WILL_UNDERFLOW( pxLink->xBlockSize, xHeapStructSize ) == 0 )
 8001fd8:	bb4a      	cbnz	r2, 800202e <vPortFree+0x9e>
                vTaskSuspendAll();
 8001fda:	f009 fa9d 	bl	800b518 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001fde:	4a1e      	ldr	r2, [pc, #120]	; (8002058 <vPortFree+0xc8>)
 8001fe0:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001fe4:	6813      	ldr	r3, [r2, #0]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001fe6:	481d      	ldr	r0, [pc, #116]	; (800205c <vPortFree+0xcc>)
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8001fe8:	440b      	add	r3, r1
 8001fea:	6013      	str	r3, [r2, #0]
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001fec:	4603      	mov	r3, r0
 8001fee:	461a      	mov	r2, r3
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	429d      	cmp	r5, r3
 8001ff4:	d8fb      	bhi.n	8001fee <vPortFree+0x5e>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8001ff6:	4282      	cmp	r2, r0
 8001ff8:	d006      	beq.n	8002008 <vPortFree+0x78>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8001ffa:	42b2      	cmp	r2, r6
 8001ffc:	d301      	bcc.n	8002002 <vPortFree+0x72>
 8001ffe:	42ba      	cmp	r2, r7
 8002000:	d902      	bls.n	8002008 <vPortFree+0x78>
 8002002:	f000 faa7 	bl	8002554 <ulSetInterruptMask>
 8002006:	e7fe      	b.n	8002006 <vPortFree+0x76>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002008:	6850      	ldr	r0, [r2, #4]
 800200a:	1814      	adds	r4, r2, r0
 800200c:	42a5      	cmp	r5, r4
 800200e:	d01d      	beq.n	800204c <vPortFree+0xbc>

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8002010:	1868      	adds	r0, r5, r1
 8002012:	4283      	cmp	r3, r0
 8002014:	d010      	beq.n	8002038 <vPortFree+0xa8>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002016:	602b      	str	r3, [r5, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002018:	42aa      	cmp	r2, r5
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800201a:	bf18      	it	ne
 800201c:	6015      	strne	r5, [r2, #0]
                    xNumberOfSuccessfulFrees++;
 800201e:	4a10      	ldr	r2, [pc, #64]	; (8002060 <vPortFree+0xd0>)
 8002020:	6813      	ldr	r3, [r2, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                ( void ) xTaskResumeAll();
 800202a:	f009 ba7d 	b.w	800b528 <xTaskResumeAll>
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
 800202e:	f1a3 0208 	sub.w	r2, r3, #8
 8002032:	f00a f865 	bl	800c100 <memset>
 8002036:	e7d0      	b.n	8001fda <vPortFree+0x4a>
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8002038:	480a      	ldr	r0, [pc, #40]	; (8002064 <vPortFree+0xd4>)
 800203a:	6800      	ldr	r0, [r0, #0]
 800203c:	4283      	cmp	r3, r0
 800203e:	d0ea      	beq.n	8002016 <vPortFree+0x86>
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8002040:	e9d3 3000 	ldrd	r3, r0, [r3]
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8002044:	4401      	add	r1, r0
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8002046:	e9c5 3100 	strd	r3, r1, [r5]
 800204a:	e7e5      	b.n	8002018 <vPortFree+0x88>
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800204c:	4401      	add	r1, r0
 800204e:	4615      	mov	r5, r2
 8002050:	6051      	str	r1, [r2, #4]
        pxBlockToInsert = pxIterator;
 8002052:	e7dd      	b.n	8002010 <vPortFree+0x80>
 8002054:	20000c18 	.word	0x20000c18
 8002058:	20001c18 	.word	0x20001c18
 800205c:	20001c28 	.word	0x20001c28
 8002060:	20001c24 	.word	0x20001c24
 8002064:	20000c14 	.word	0x20000c14

08002068 <rt_hw_console_output>:

rt_weak void rt_hw_console_output(const char *str)
{
    /* empty console output */

    myputstr(str);
 8002068:	f7ff bbce 	b.w	8001808 <myputstr>

0800206c <rt_kprintf>:
 * @param fmt is the format parameters.
 *
 * @return The number of characters actually written to buffer.
 */
rt_weak int rt_kprintf(const char *fmt, ...)
{
 800206c:	b40f      	push	{r0, r1, r2, r3}
 800206e:	b530      	push	{r4, r5, lr}
 8002070:	b083      	sub	sp, #12
 8002072:	ab06      	add	r3, sp, #24
    /* the return value of vsnprintf is the number of bytes that would be
     * written to buffer had if the size of the buffer been sufficiently
     * large excluding the terminating null byte. If the output string
     * would be larger than the rt_log_buf, we have to adjust the output
     * length. */
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8002074:	4d0a      	ldr	r5, [pc, #40]	; (80020a0 <rt_kprintf+0x34>)
{
 8002076:	f853 2b04 	ldr.w	r2, [r3], #4
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 800207a:	217f      	movs	r1, #127	; 0x7f
 800207c:	4628      	mov	r0, r5
    va_start(args, fmt);
 800207e:	9301      	str	r3, [sp, #4]
    length = rt_vsnprintf(rt_log_buf, sizeof(rt_log_buf) - 1, fmt, args);
 8002080:	f001 fbb0 	bl	80037e4 <rt_vsnprintf>
 8002084:	4604      	mov	r4, r0
    if (length > RT_CONSOLEBUF_SIZE - 1)
    {
        length = RT_CONSOLEBUF_SIZE - 1;
    }

    rt_hw_console_output(rt_log_buf);
 8002086:	4628      	mov	r0, r5
 8002088:	f7ff ffee 	bl	8002068 <rt_hw_console_output>

    va_end(args);

    return length;
}
 800208c:	2c7f      	cmp	r4, #127	; 0x7f
 800208e:	4620      	mov	r0, r4
 8002090:	bf28      	it	cs
 8002092:	207f      	movcs	r0, #127	; 0x7f
 8002094:	b003      	add	sp, #12
 8002096:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800209a:	b004      	add	sp, #16
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20001c30 	.word	0x20001c30

080020a4 <vListInitialise>:

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020a8:	2200      	movs	r2, #0
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80020aa:	f100 0308 	add.w	r3, r0, #8
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ae:	e9c0 3101 	strd	r3, r1, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80020b2:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020b6:	6002      	str	r2, [r0, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop

080020bc <vListInitialiseItem>:
void vListInitialiseItem( ListItem_t * const pxItem )
{
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	6103      	str	r3, [r0, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop

080020c4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020c4:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020c6:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020c8:	1c6b      	adds	r3, r5, #1
 80020ca:	d010      	beq.n	80020ee <vListInsert+0x2a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80020cc:	f100 0308 	add.w	r3, r0, #8
 80020d0:	461c      	mov	r4, r3
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	42aa      	cmp	r2, r5
 80020d8:	d9fa      	bls.n	80020d0 <vListInsert+0xc>

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80020da:	6802      	ldr	r2, [r0, #0]
    pxNewListItem->pxNext = pxIterator->pxNext;
 80020dc:	604b      	str	r3, [r1, #4]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80020de:	3201      	adds	r2, #1
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80020e0:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80020e2:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80020e4:	6061      	str	r1, [r4, #4]
    pxNewListItem->pxContainer = pxList;
 80020e6:	6108      	str	r0, [r1, #16]

    traceRETURN_vListInsert();
}
 80020e8:	bc30      	pop	{r4, r5}
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80020ea:	6002      	str	r2, [r0, #0]
}
 80020ec:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 80020ee:	6904      	ldr	r4, [r0, #16]
    pxNewListItem->pxNext = pxIterator->pxNext;
 80020f0:	6863      	ldr	r3, [r4, #4]
 80020f2:	e7f2      	b.n	80020da <vListInsert+0x16>

080020f4 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80020f4:	4603      	mov	r3, r0
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80020f6:	6902      	ldr	r2, [r0, #16]
{
 80020f8:	b410      	push	{r4}

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80020fa:	6854      	ldr	r4, [r2, #4]
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80020fc:	6840      	ldr	r0, [r0, #4]
 80020fe:	6899      	ldr	r1, [r3, #8]
    if( pxList->pxIndex == pxItemToRemove )
 8002100:	429c      	cmp	r4, r3
    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002102:	6081      	str	r1, [r0, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002104:	6048      	str	r0, [r1, #4]
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002106:	bf08      	it	eq
 8002108:	6051      	streq	r1, [r2, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800210a:	2100      	movs	r1, #0
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800210c:	6810      	ldr	r0, [r2, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
}
 800210e:	f85d 4b04 	ldr.w	r4, [sp], #4
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002112:	3801      	subs	r0, #1
    pxItemToRemove->pxContainer = NULL;
 8002114:	6119      	str	r1, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002116:	6010      	str	r0, [r2, #0]
}
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	0000      	movs	r0, r0
	...

08002120 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8002120:	b5d0      	push	{r4, r6, r7, lr}

	uint8_t c = 0;
 8002122:	2400      	movs	r4, #0
{
 8002124:	b09c      	sub	sp, #112	; 0x70
	uint8_t c = 0;
 8002126:	f88d 4003 	strb.w	r4, [sp, #3]
	float sum = 3.141592654;

  HAL_Init();
 800212a:	f002 f897 	bl	800425c <HAL_Init>
}

static void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212e:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002132:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002136:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800213a:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 800213e:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 8002142:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002146:	4a44      	ldr	r2, [pc, #272]	; (8002258 <main+0x138>)
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002148:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800214a:	6913      	ldr	r3, [r2, #16]
 800214c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002150:	6113      	str	r3, [r2, #16]
 8002152:	6913      	ldr	r3, [r2, #16]
 8002154:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002158:	9301      	str	r3, [sp, #4]
 800215a:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800215c:	6953      	ldr	r3, [r2, #20]
 800215e:	071b      	lsls	r3, r3, #28
 8002160:	d5fc      	bpl.n	800215c <main+0x3c>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002162:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002164:	2021      	movs	r0, #33	; 0x21
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002166:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800216a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800216e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1_VCORANGE_WIDE;
 8002172:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002174:	2128      	movs	r1, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002176:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800217a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217c:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 800217e:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002180:	9318      	str	r3, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 8002182:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8002184:	230c      	movs	r3, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002186:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1_VCIRANGE_3;
 8002188:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800218a:	e9cd 221a 	strd	r2, r2, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLL1_SOURCE_HSE;
 800218e:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002190:	9115      	str	r1, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002192:	f003 f843 	bl	800521c <HAL_RCC_OscConfig>
 8002196:	4603      	mov	r3, r0
 8002198:	b100      	cbz	r0, 800219c <main+0x7c>
  * @retval None
  */
void Error_Handler(void)
{
  /* User may add here some code to deal with this error */
  while(1)
 800219a:	e7fe      	b.n	800219a <main+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800219c:	221f      	movs	r2, #31
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800219e:	2105      	movs	r1, #5
 80021a0:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021a2:	e9cd 4303 	strd	r4, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021a6:	e9cd 3305 	strd	r3, r3, [sp, #20]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80021aa:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ac:	9202      	str	r2, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021ae:	f002 fed5 	bl	8004f5c <HAL_RCC_ClockConfig>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d148      	bne.n	8002248 <main+0x128>
  __HAL_FLASH_SET_PROGRAM_DELAY(FLASH_PROGRAMMING_DELAY_2);
 80021b6:	4a29      	ldr	r2, [pc, #164]	; (800225c <main+0x13c>)
 80021b8:	6813      	ldr	r3, [r2, #0]
 80021ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80021be:	f043 0320 	orr.w	r3, r3, #32
 80021c2:	6013      	str	r3, [r2, #0]
  bsp_led_init();
 80021c4:	f7ff f908 	bl	80013d8 <bsp_led_init>
  bsp_lcd_init();
 80021c8:	f7ff f86a 	bl	80012a0 <bsp_lcd_init>
  MX_SPI2_Init();
 80021cc:	f7fe ffd0 	bl	8001170 <MX_SPI2_Init>
  if (HAL_ICACHE_Enable() != HAL_OK)
 80021d0:	f002 fe04 	bl	8004ddc <HAL_ICACHE_Enable>
 80021d4:	4604      	mov	r4, r0
 80021d6:	bbc0      	cbnz	r0, 800224a <main+0x12a>
	rt_kprintf("UART CNT:%d %lf\r\n",c,sum);
 80021d8:	a71d      	add	r7, pc, #116	; (adr r7, 8002250 <main+0x130>)
 80021da:	e9d7 6700 	ldrd	r6, r7, [r7]
  MX_GPDMA1_Init();
 80021de:	f7ff fdf1 	bl	8001dc4 <MX_GPDMA1_Init>
  MX_USART2_UART_Init();
 80021e2:	f7ff f979 	bl	80014d8 <MX_USART2_UART_Init>
  MX_UART4_Init();
 80021e6:	f7ff f933 	bl	8001450 <MX_UART4_Init>
  LCD_Init(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f001 fea2 	bl	8003f34 <LCD_Init>
  Draw_Init();
 80021f0:	f7ff fb18 	bl	8001824 <Draw_Init>
  Draw_Clear(0);
 80021f4:	4620      	mov	r0, r4
 80021f6:	f7ff fb1d 	bl	8001834 <Draw_Clear>
  rt_kprintf("Hello World! \r\n");
 80021fa:	4819      	ldr	r0, [pc, #100]	; (8002260 <main+0x140>)
 80021fc:	f7ff ff36 	bl	800206c <rt_kprintf>
  MX_FREERTOS_Init();
 8002200:	f7fe ff96 	bl	8001130 <MX_FREERTOS_Init>
  vTaskStartScheduler();
 8002204:	f009 f940 	bl	800b488 <vTaskStartScheduler>
	HAL_UART_Transmit_DMA(&huart2, &c, 1);
 8002208:	4c16      	ldr	r4, [pc, #88]	; (8002264 <main+0x144>)
	bsp_led_toggle();
 800220a:	f7ff f919 	bl	8001440 <bsp_led_toggle>
	HAL_UART_Transmit_DMA(&huart2, &c, 1);
 800220e:	2201      	movs	r2, #1
 8002210:	f10d 0103 	add.w	r1, sp, #3
 8002214:	4620      	mov	r0, r4
 8002216:	f007 ff8b 	bl	800a130 <HAL_UART_Transmit_DMA>
	HAL_UART_Transmit_DMA(&huart4, &c, 1);
 800221a:	2201      	movs	r2, #1
 800221c:	f10d 0103 	add.w	r1, sp, #3
 8002220:	4811      	ldr	r0, [pc, #68]	; (8002268 <main+0x148>)
 8002222:	f007 ff85 	bl	800a130 <HAL_UART_Transmit_DMA>
	rt_kprintf("UART CNT:%d %lf\r\n",c,sum);
 8002226:	463b      	mov	r3, r7
 8002228:	4632      	mov	r2, r6
 800222a:	f89d 1003 	ldrb.w	r1, [sp, #3]
 800222e:	480f      	ldr	r0, [pc, #60]	; (800226c <main+0x14c>)
 8002230:	f7ff ff1c 	bl	800206c <rt_kprintf>
    HAL_Delay(500);
 8002234:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002238:	f002 f8e4 	bl	8004404 <HAL_Delay>
	c++;
 800223c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002240:	3301      	adds	r3, #1
 8002242:	f88d 3003 	strb.w	r3, [sp, #3]
  while (1)
 8002246:	e7e0      	b.n	800220a <main+0xea>
  while(1)
 8002248:	e7fe      	b.n	8002248 <main+0x128>
 800224a:	e7fe      	b.n	800224a <main+0x12a>
 800224c:	f3af 8000 	nop.w
 8002250:	60000000 	.word	0x60000000
 8002254:	400921fb 	.word	0x400921fb
 8002258:	44020800 	.word	0x44020800
 800225c:	40022000 	.word	0x40022000
 8002260:	0800dd4c 	.word	0x0800dd4c
 8002264:	20000ae0 	.word	0x20000ae0
 8002268:	20000b74 	.word	0x20000b74
 800226c:	0800dd5c 	.word	0x0800dd5c

08002270 <Error_Handler>:
 8002270:	e7fe      	b.n	8002270 <Error_Handler>
 8002272:	bf00      	nop

08002274 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002274:	4b03      	ldr	r3, [pc, #12]	; (8002284 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8002276:	6802      	ldr	r2, [r0, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d000      	beq.n	800227e <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800227c:	4770      	bx	lr
    HAL_IncTick();
 800227e:	f002 b813 	b.w	80042a8 <HAL_IncTick>
 8002282:	bf00      	nop
 8002284:	40001000 	.word	0x40001000

08002288 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 8002288:	2200      	movs	r2, #0
{
 800228a:	b500      	push	{lr}
    /* A function that implements a task must not exit or attempt to return to
     * its caller as there is nothing to return to. If a task wants to exit it
     * should instead call vTaskDelete( NULL ). Artificially force an assert()
     * to be triggered if configASSERT() is defined, then stop here so
     * application writers can catch the error. */
    configASSERT( ulCriticalNesting == ~0UL );
 800228c:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <prvTaskExitError+0x28>)
{
 800228e:	b083      	sub	sp, #12
    volatile uint32_t ulDummy = 0UL;
 8002290:	9201      	str	r2, [sp, #4]
    configASSERT( ulCriticalNesting == ~0UL );
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	d002      	beq.n	800229e <prvTaskExitError+0x16>
 8002298:	f000 f95c 	bl	8002554 <ulSetInterruptMask>
 800229c:	e7fe      	b.n	800229c <prvTaskExitError+0x14>
    portDISABLE_INTERRUPTS();
 800229e:	f000 f959 	bl	8002554 <ulSetInterruptMask>

    while( ulDummy == 0 )
 80022a2:	9b01      	ldr	r3, [sp, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0fc      	beq.n	80022a2 <prvTaskExitError+0x1a>
         * warnings about code appearing after this function is called - making
         * ulDummy volatile makes the compiler think the function could return
         * and therefore not output an 'unreachable code' warning for code that
         * appears after it. */
    }
}
 80022a8:	b003      	add	sp, #12
 80022aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80022ae:	bf00      	nop
 80022b0:	20000000 	.word	0x20000000

080022b4 <vPortSetupTimerInterrupt>:
{
 80022b4:	b410      	push	{r4}
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 80022b6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80022ba:	2404      	movs	r4, #4
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022bc:	2000      	movs	r0, #0
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80022be:	2207      	movs	r2, #7
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022c0:	4903      	ldr	r1, [pc, #12]	; (80022d0 <vPortSetupTimerInterrupt+0x1c>)
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG;
 80022c2:	611c      	str	r4, [r3, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80022c4:	6198      	str	r0, [r3, #24]
}
 80022c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80022ca:	6159      	str	r1, [r3, #20]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80022cc:	611a      	str	r2, [r3, #16]
}
 80022ce:	4770      	bx	lr
 80022d0:	0003d08f 	.word	0x0003d08f

080022d4 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
    /* Set a PendSV to request a context switch. */
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80022d4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80022d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80022e0:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80022e4:	f3bf 8f6f 	isb	sy
}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop

080022ec <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80022ec:	b508      	push	{r3, lr}
    portDISABLE_INTERRUPTS();
 80022ee:	f000 f931 	bl	8002554 <ulSetInterruptMask>
    ulCriticalNesting++;
 80022f2:	4a04      	ldr	r2, [pc, #16]	; (8002304 <vPortEnterCritical+0x18>)
 80022f4:	6813      	ldr	r3, [r2, #0]
 80022f6:	3301      	adds	r3, #1
 80022f8:	6013      	str	r3, [r2, #0]

    /* Barriers are normally not required but do ensure the code is
     * completely within the specified behaviour for the architecture. */
    __asm volatile ( "dsb" ::: "memory" );
 80022fa:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 80022fe:	f3bf 8f6f 	isb	sy
}
 8002302:	bd08      	pop	{r3, pc}
 8002304:	20000000 	.word	0x20000000

08002308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8002308:	b508      	push	{r3, lr}
    configASSERT( ulCriticalNesting );
 800230a:	4b08      	ldr	r3, [pc, #32]	; (800232c <vPortExitCritical+0x24>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	b14a      	cbz	r2, 8002324 <vPortExitCritical+0x1c>
    ulCriticalNesting--;
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	3a01      	subs	r2, #1
 8002314:	601a      	str	r2, [r3, #0]

    if( ulCriticalNesting == 0 )
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	b100      	cbz	r0, 800231c <vPortExitCritical+0x14>
    {
        portENABLE_INTERRUPTS();
    }
}
 800231a:	bd08      	pop	{r3, pc}
 800231c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        portENABLE_INTERRUPTS();
 8002320:	f000 b924 	b.w	800256c <vClearInterruptMask>
    configASSERT( ulCriticalNesting );
 8002324:	f000 f916 	bl	8002554 <ulSetInterruptMask>
 8002328:	e7fe      	b.n	8002328 <vPortExitCritical+0x20>
 800232a:	bf00      	nop
 800232c:	20000000 	.word	0x20000000

08002330 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8002330:	b510      	push	{r4, lr}
    uint32_t ulPreviousMask;

    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8002332:	f000 f90f 	bl	8002554 <ulSetInterruptMask>
 8002336:	4604      	mov	r4, r0
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002338:	f009 f90c 	bl	800b554 <xTaskIncrementTick>
 800233c:	b128      	cbz	r0, 800234a <SysTick_Handler+0x1a>
        {
            traceISR_EXIT_TO_SCHEDULER();
            /* Pend a context switch. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800233e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8002342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002346:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        else
        {
            traceISR_EXIT();
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800234a:	4620      	mov	r0, r4
}
 800234c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8002350:	f000 b90c 	b.w	800256c <vClearInterruptMask>

08002354 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t * pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8002354:	b508      	push	{r3, lr}
    uint8_t ucSVCNumber;

    /* Register are stored on the stack in the following order - R0, R1, R2, R3,
     * R12, LR, PC, xPSR. */
    ulPC = pulCallerStackAddress[ portOFFSET_TO_PC ];
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8002356:	6983      	ldr	r3, [r0, #24]

    switch( ucSVCNumber )
 8002358:	f813 3c02 	ldrb.w	r3, [r3, #-2]
 800235c:	2b66      	cmp	r3, #102	; 0x66
 800235e:	d002      	beq.n	8002366 <vPortSVCHandler_C+0x12>
                    break;
            #endif /* configENABLE_MPU == 1 */

        default:
            /* Incorrect SVC call. */
            configASSERT( pdFALSE );
 8002360:	f000 f8f8 	bl	8002554 <ulSetInterruptMask>
 8002364:	e7fe      	b.n	8002364 <vPortSVCHandler_C+0x10>
        *( portCPACR ) |= ( ( portCPACR_CP10_VALUE << portCPACR_CP10_POS ) |
 8002366:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800236a:	f8d3 2d88 	ldr.w	r2, [r3, #3464]	; 0xd88
 800236e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002372:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
        *( portFPCCR ) |= ( portFPCCR_ASPEN_MASK | portFPCCR_LSPEN_MASK );
 8002376:	f8d3 2f34 	ldr.w	r2, [r3, #3892]	; 0xf34
 800237a:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800237e:	f8c3 2f34 	str.w	r2, [r3, #3892]	; 0xf34
    }
}
 8002382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
            vRestoreContextOfFirstTask();
 8002386:	f000 b8bf 	b.w	8002508 <vRestoreContextOfFirstTask>
 800238a:	bf00      	nop

0800238c <pxPortInitialiseStack>:

    StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
    {
 800238c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            #endif /* configENABLE_TRUSTZONE */
        }
        #else /* portPRELOAD_REGISTERS */
        {
            pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 8002390:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10. */
 8002394:	f04f 3710 	mov.w	r7, #269488144	; 0x10101010
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 8002398:	f04f 3509 	mov.w	r5, #151587081	; 0x9090909
            *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR. */
 800239c:	f840 4c04 	str.w	r4, [r0, #-4]
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 80023a0:	f04f 3407 	mov.w	r4, #117901063	; 0x7070707
            *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09. */
 80023a4:	e940 570b 	strd	r5, r7, [r0, #-44]	; 0x2c
            *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR. */
 80023a8:	4d16      	ldr	r5, [pc, #88]	; (8002404 <pxPortInitialiseStack+0x78>)
            *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07. */
 80023aa:	f840 4c34 	str.w	r4, [r0, #-52]
            *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC. */
 80023ae:	e940 5203 	strd	r5, r2, [r0, #-12]
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 80023b2:	f04f 3c11 	mov.w	ip, #286331153	; 0x11111111
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06. */
 80023b6:	f04f 3406 	mov.w	r4, #101058054	; 0x6060606
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 80023ba:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
            *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11. */
 80023be:	e940 c309 	strd	ip, r3, [r0, #-36]	; 0x24
            *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05. */
 80023c2:	e940 240f 	strd	r2, r4, [r0, #-60]	; 0x3c
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
            pxTopOfStack--;
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
            pxTopOfStack--;
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 80023c6:	4603      	mov	r3, r0
            *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12. */
 80023c8:	f04f 3a12 	mov.w	sl, #303174162	; 0x12121212
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 80023cc:	f04f 3903 	mov.w	r9, #50529027	; 0x3030303
            *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2. */
 80023d0:	f04f 3802 	mov.w	r8, #33686018	; 0x2020202
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 80023d4:	f04f 3e01 	mov.w	lr, #16843009	; 0x1010101
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 80023d8:	f04f 3608 	mov.w	r6, #134744072	; 0x8080808
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 80023dc:	f04f 3504 	mov.w	r5, #67372036	; 0x4040404
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 80023e0:	f06f 0202 	mvn.w	r2, #2
            *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3. */
 80023e4:	e940 9a05 	strd	r9, sl, [r0, #-20]
            *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1. */
 80023e8:	e940 e807 	strd	lr, r8, [r0, #-28]
            *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08. */
 80023ec:	f840 6c30 	str.w	r6, [r0, #-48]
            *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04. */
 80023f0:	f840 5c40 	str.w	r5, [r0, #-64]
            *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN. */
 80023f4:	f840 2c44 	str.w	r2, [r0, #-68]
            *pxTopOfStack = ( StackType_t ) pxEndOfStack;            /* Slot used to hold this task's PSPLIM value. */
 80023f8:	f843 1d48 	str.w	r1, [r3, #-72]!
            #endif /* configENABLE_TRUSTZONE */
        }
        #endif /* portPRELOAD_REGISTERS */

        return pxTopOfStack;
    }
 80023fc:	4618      	mov	r0, r3
 80023fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002402:	bf00      	nop
 8002404:	08002289 	.word	0x08002289

08002408 <xPortStartScheduler>:
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002408:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 800240c:	b530      	push	{r4, r5, lr}
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800240e:	f8d3 2d08 	ldr.w	r2, [r3, #3336]	; 0xd08
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8002412:	4938      	ldr	r1, [pc, #224]	; (80024f4 <xPortStartScheduler+0xec>)
 8002414:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
{
 8002416:	b085      	sub	sp, #20
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == SVC_Handler );
 8002418:	4288      	cmp	r0, r1
 800241a:	d002      	beq.n	8002422 <xPortStartScheduler+0x1a>
 800241c:	f000 f89a 	bl	8002554 <ulSetInterruptMask>
 8002420:	e7fe      	b.n	8002420 <xPortStartScheduler+0x18>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == PendSV_Handler );
 8002422:	4935      	ldr	r1, [pc, #212]	; (80024f8 <xPortStartScheduler+0xf0>)
 8002424:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002426:	428a      	cmp	r2, r1
 8002428:	d002      	beq.n	8002430 <xPortStartScheduler+0x28>
 800242a:	f000 f893 	bl	8002554 <ulSetInterruptMask>
 800242e:	e7fe      	b.n	800242e <xPortStartScheduler+0x26>
    }
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) )
    {
        volatile uint32_t ulImplementedPrioBits = 0;
 8002430:	2000      	movs	r0, #0
         * "FromISR". FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * First, determine the number of priority bits available. Write to all
         * possible bits in the priority setting for SVCall. */
        portNVIC_SHPR2_REG = 0xFF000000;
 8002432:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
        volatile uint32_t ulImplementedPrioBits = 0;
 8002436:	9002      	str	r0, [sp, #8]
        portNVIC_SHPR2_REG = 0xFF000000;
 8002438:	f8c3 1d1c 	str.w	r1, [r3, #3356]	; 0xd1c

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 800243c:	f8d3 3d1c 	ldr.w	r3, [r3, #3356]	; 0xd1c

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002440:	4a2e      	ldr	r2, [pc, #184]	; (80024fc <xPortStartScheduler+0xf4>)
        ucMaxPriorityValue = ( uint8_t ) ( ( portNVIC_SHPR2_REG & 0xFF000000 ) >> 24 );
 8002442:	0e1b      	lsrs	r3, r3, #24
 8002444:	f88d 3007 	strb.w	r3, [sp, #7]
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002448:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800244c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002450:	7013      	strb	r3, [r2, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8002452:	2b00      	cmp	r3, #0
 8002454:	d03e      	beq.n	80024d4 <xPortStartScheduler+0xcc>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 8002456:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800245a:	43db      	mvns	r3, r3
 800245c:	f013 0f50 	tst.w	r3, #80	; 0x50
 8002460:	d009      	beq.n	8002476 <xPortStartScheduler+0x6e>
 8002462:	e03a      	b.n	80024da <xPortStartScheduler+0xd2>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8002464:	9b02      	ldr	r3, [sp, #8]
 8002466:	3301      	adds	r3, #1
 8002468:	9302      	str	r3, [sp, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800246a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f88d 3007 	strb.w	r3, [sp, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002476:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800247a:	061b      	lsls	r3, r3, #24
 800247c:	d4f2      	bmi.n	8002464 <xPortStartScheduler+0x5c>
        }

        if( ulImplementedPrioBits == 8 )
 800247e:	9b02      	ldr	r3, [sp, #8]
 8002480:	2b08      	cmp	r3, #8
 8002482:	d035      	beq.n	80024f0 <xPortStartScheduler+0xe8>
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8002484:	9b02      	ldr	r3, [sp, #8]
 8002486:	f1c3 0307 	rsb	r3, r3, #7
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800248a:	021b      	lsls	r3, r3, #8
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800248c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    }
    #endif /* #if ( ( configASSERT_DEFINED == 1 ) && ( portHAS_ARMV8M_MAIN_EXTENSION == 1 ) ) */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002490:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
    portNVIC_SHPR2_REG = 0;
 8002494:	2400      	movs	r4, #0
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002496:	491a      	ldr	r1, [pc, #104]	; (8002500 <xPortStartScheduler+0xf8>)
    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 8002498:	4d1a      	ldr	r5, [pc, #104]	; (8002504 <xPortStartScheduler+0xfc>)
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800249a:	600b      	str	r3, [r1, #0]
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800249c:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
 80024a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024a4:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80024a8:	f8d2 3d20 	ldr.w	r3, [r2, #3360]	; 0xd20
 80024ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024b0:	f8c2 3d20 	str.w	r3, [r2, #3360]	; 0xd20
    portNVIC_SHPR2_REG = 0;
 80024b4:	f8c2 4d1c 	str.w	r4, [r2, #3356]	; 0xd1c
    vPortSetupTimerInterrupt();
 80024b8:	f7ff fefc 	bl	80022b4 <vPortSetupTimerInterrupt>
    ulCriticalNesting = 0;
 80024bc:	602c      	str	r4, [r5, #0]
        xSchedulerRunning = pdTRUE;
    }
    #endif /* ( ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) ) */

    /* Start the first task. */
    vStartFirstTask();
 80024be:	f000 f839 	bl	8002534 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 80024c2:	f009 f857 	bl	800b574 <vTaskSwitchContext>
    volatile uint32_t ulDummy = 0UL;
 80024c6:	9403      	str	r4, [sp, #12]
    configASSERT( ulCriticalNesting == ~0UL );
 80024c8:	682b      	ldr	r3, [r5, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	d008      	beq.n	80024e0 <xPortStartScheduler+0xd8>
 80024ce:	f000 f841 	bl	8002554 <ulSetInterruptMask>
 80024d2:	e7fe      	b.n	80024d2 <xPortStartScheduler+0xca>
        configASSERT( ucMaxSysCallPriority );
 80024d4:	f000 f83e 	bl	8002554 <ulSetInterruptMask>
 80024d8:	e7fe      	b.n	80024d8 <xPortStartScheduler+0xd0>
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( uint8_t ) ( ~( uint32_t ) ucMaxPriorityValue ) ) == 0U );
 80024da:	f000 f83b 	bl	8002554 <ulSetInterruptMask>
 80024de:	e7fe      	b.n	80024de <xPortStartScheduler+0xd6>
    portDISABLE_INTERRUPTS();
 80024e0:	f000 f838 	bl	8002554 <ulSetInterruptMask>
    while( ulDummy == 0 )
 80024e4:	9b03      	ldr	r3, [sp, #12]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0fc      	beq.n	80024e4 <xPortStartScheduler+0xdc>
    prvTaskExitError();

    /* Should not get here. */
    return 0;
}
 80024ea:	2000      	movs	r0, #0
 80024ec:	b005      	add	sp, #20
 80024ee:	bd30      	pop	{r4, r5, pc}
 80024f0:	2300      	movs	r3, #0
 80024f2:	e7cd      	b.n	8002490 <xPortStartScheduler+0x88>
 80024f4:	080025d9 	.word	0x080025d9
 80024f8:	0800257d 	.word	0x0800257d
 80024fc:	20001cb0 	.word	0x20001cb0
 8002500:	20001cb4 	.word	0x20001cb4
 8002504:	20000000 	.word	0x20000000

08002508 <vRestoreContextOfFirstTask>:

#else /* configENABLE_MPU */

    void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 8002508:	4a09      	ldr	r2, [pc, #36]	; (8002530 <vRestoreContextOfFirstTask+0x28>)
 800250a:	6811      	ldr	r1, [r2, #0]
 800250c:	6808      	ldr	r0, [r1, #0]
 800250e:	c806      	ldmia	r0!, {r1, r2}
 8002510:	f381 880b 	msr	PSPLIM, r1
 8002514:	2102      	movs	r1, #2
 8002516:	f381 8814 	msr	CONTROL, r1
 800251a:	3020      	adds	r0, #32
 800251c:	f380 8809 	msr	PSP, r0
 8002520:	f3bf 8f6f 	isb	sy
 8002524:	f04f 0000 	mov.w	r0, #0
 8002528:	f380 8811 	msr	BASEPRI, r0
 800252c:	4710      	bx	r2
            "   isb                                             \n"
            "   mov  r0, #0                                     \n"
            "   msr  basepri, r0                                \n" /* Ensure that interrupts are enabled when the first task starts. */
            "   bx   r2                                         \n" /* Finally, branch to EXC_RETURN. */
        );
    }
 800252e:	0000      	.short	0x0000
 8002530:	20001d10 	.word	0x20001d10

08002534 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8002534:	4806      	ldr	r0, [pc, #24]	; (8002550 <vStartFirstTask+0x1c>)
 8002536:	6800      	ldr	r0, [r0, #0]
 8002538:	6800      	ldr	r0, [r0, #0]
 800253a:	f380 8808 	msr	MSP, r0
 800253e:	b662      	cpsie	i
 8002540:	b661      	cpsie	f
 8002542:	f3bf 8f4f 	dsb	sy
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	df66      	svc	102	; 0x66
 800254c:	bf00      	nop
        "   isb                                             \n"
        "   svc %0                                          \n" /* System call to start the first task. */
        "   nop                                             \n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 800254e:	0000      	.short	0x0000
 8002550:	e000ed08 	.word	0xe000ed08

08002554 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8002554:	f3ef 8011 	mrs	r0, BASEPRI
 8002558:	f04f 0150 	mov.w	r1, #80	; 0x50
 800255c:	f381 8811 	msr	BASEPRI, r1
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop

0800256c <vClearInterruptMask>:
}
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 800256c:	f380 8811 	msr	BASEPRI, r0
 8002570:	f3bf 8f4f 	dsb	sy
 8002574:	f3bf 8f6f 	isb	sy
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop

0800257c <PendSV_Handler>:

#else /* configENABLE_MPU */

    void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 800257c:	f3ef 8009 	mrs	r0, PSP
 8002580:	f01e 0f10 	tst.w	lr, #16
 8002584:	bf08      	it	eq
 8002586:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800258a:	f3ef 820b 	mrs	r2, PSPLIM
 800258e:	4673      	mov	r3, lr
 8002590:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <PendSV_Handler+0x58>)
 8002596:	6811      	ldr	r1, [r2, #0]
 8002598:	6008      	str	r0, [r1, #0]
 800259a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800259e:	f380 8811 	msr	BASEPRI, r0
 80025a2:	f3bf 8f4f 	dsb	sy
 80025a6:	f3bf 8f6f 	isb	sy
 80025aa:	f008 ffe3 	bl	800b574 <vTaskSwitchContext>
 80025ae:	f04f 0000 	mov.w	r0, #0
 80025b2:	f380 8811 	msr	BASEPRI, r0
 80025b6:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <PendSV_Handler+0x58>)
 80025b8:	6811      	ldr	r1, [r2, #0]
 80025ba:	6808      	ldr	r0, [r1, #0]
 80025bc:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80025c0:	f013 0f10 	tst.w	r3, #16
 80025c4:	bf08      	it	eq
 80025c6:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80025ca:	f382 880b 	msr	PSPLIM, r2
 80025ce:	f380 8809 	msr	PSP, r0
 80025d2:	4718      	bx	r3
            "   msr psplim, r2                                  \n" /* Restore the PSPLIM register value for the task. */
            "   msr psp, r0                                     \n" /* Remember the new top of stack for the task. */
            "   bx r3                                           \n"
            ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
        );
    }
 80025d4:	20001d10 	.word	0x20001d10

080025d8 <SVC_Handler>:

#else /* ( configENABLE_MPU == 1 ) && ( configUSE_MPU_WRAPPERS_V1 == 0 ) */

    void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
    {
        __asm volatile
 80025d8:	f01e 0f04 	tst.w	lr, #4
 80025dc:	bf0c      	ite	eq
 80025de:	f3ef 8008 	mrseq	r0, MSP
 80025e2:	f3ef 8009 	mrsne	r0, PSP
 80025e6:	4901      	ldr	r1, [pc, #4]	; (80025ec <SVC_Handler+0x14>)
 80025e8:	4708      	bx	r1
            "   mrseq r0, msp                                   \n"
            "   mrsne r0, psp                                   \n"
            "   ldr r1, =vPortSVCHandler_C                      \n"
            "   bx r1                                           \n"
        );
    }
 80025ea:	0000      	.short	0x0000
 80025ec:	08002355 	.word	0x08002355

080025f0 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	4605      	mov	r5, r0

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80025f4:	f7ff fe7a 	bl	80022ec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80025f8:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80025fc:	b25c      	sxtb	r4, r3

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80025fe:	2c00      	cmp	r4, #0
 8002600:	dd14      	ble.n	800262c <prvUnlockQueue+0x3c>
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002602:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8002606:	e003      	b.n	8002610 <prvUnlockQueue+0x20>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002608:	1e63      	subs	r3, r4, #1
 800260a:	b2da      	uxtb	r2, r3
 800260c:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800260e:	b16a      	cbz	r2, 800262c <prvUnlockQueue+0x3c>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002610:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002612:	b15b      	cbz	r3, 800262c <prvUnlockQueue+0x3c>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002614:	4630      	mov	r0, r6
 8002616:	f008 fff7 	bl	800b608 <xTaskRemoveFromEventList>
 800261a:	2800      	cmp	r0, #0
 800261c:	d0f4      	beq.n	8002608 <prvUnlockQueue+0x18>
                        vTaskMissedYield();
 800261e:	f009 f8ad 	bl	800b77c <vTaskMissedYield>
            --cTxLock;
 8002622:	1e63      	subs	r3, r4, #1
 8002624:	b2da      	uxtb	r2, r3
 8002626:	b25c      	sxtb	r4, r3
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002628:	2a00      	cmp	r2, #0
 800262a:	d1f1      	bne.n	8002610 <prvUnlockQueue+0x20>
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800262c:	23ff      	movs	r3, #255	; 0xff
 800262e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002632:	f7ff fe69 	bl	8002308 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002636:	f7ff fe59 	bl	80022ec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800263a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800263e:	b25c      	sxtb	r4, r3

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002640:	2c00      	cmp	r4, #0
 8002642:	dd14      	ble.n	800266e <prvUnlockQueue+0x7e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002644:	f105 0610 	add.w	r6, r5, #16
 8002648:	e003      	b.n	8002652 <prvUnlockQueue+0x62>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800264a:	1e63      	subs	r3, r4, #1
 800264c:	b2da      	uxtb	r2, r3
 800264e:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002650:	b16a      	cbz	r2, 800266e <prvUnlockQueue+0x7e>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002652:	692b      	ldr	r3, [r5, #16]
 8002654:	b15b      	cbz	r3, 800266e <prvUnlockQueue+0x7e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002656:	4630      	mov	r0, r6
 8002658:	f008 ffd6 	bl	800b608 <xTaskRemoveFromEventList>
 800265c:	2800      	cmp	r0, #0
 800265e:	d0f4      	beq.n	800264a <prvUnlockQueue+0x5a>
                    vTaskMissedYield();
 8002660:	f009 f88c 	bl	800b77c <vTaskMissedYield>
                --cRxLock;
 8002664:	1e63      	subs	r3, r4, #1
 8002666:	b2da      	uxtb	r2, r3
 8002668:	b25c      	sxtb	r4, r3
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800266a:	2a00      	cmp	r2, #0
 800266c:	d1f1      	bne.n	8002652 <prvUnlockQueue+0x62>
            {
                break;
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800266e:	23ff      	movs	r3, #255	; 0xff
 8002670:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
}
 8002674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8002678:	f7ff be46 	b.w	8002308 <vPortExitCritical>

0800267c <xQueueGenericReset>:
{
 800267c:	b570      	push	{r4, r5, r6, lr}
    configASSERT( pxQueue );
 800267e:	b368      	cbz	r0, 80026dc <xQueueGenericReset+0x60>
        ( pxQueue->uxLength >= 1U ) &&
 8002680:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002682:	4604      	mov	r4, r0
    if( ( pxQueue != NULL ) &&
 8002684:	b1f3      	cbz	r3, 80026c4 <xQueueGenericReset+0x48>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002686:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002688:	fba5 3503 	umull	r3, r5, r5, r3
 800268c:	b9d5      	cbnz	r5, 80026c4 <xQueueGenericReset+0x48>
 800268e:	460e      	mov	r6, r1
        taskENTER_CRITICAL();
 8002690:	f7ff fe2c 	bl	80022ec <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002694:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
            pxQueue->cRxLock = queueUNLOCKED;
 8002698:	21ff      	movs	r1, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800269a:	fb00 f303 	mul.w	r3, r0, r3
 800269e:	6822      	ldr	r2, [r4, #0]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80026a0:	1a18      	subs	r0, r3, r0
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80026a2:	6062      	str	r2, [r4, #4]
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80026a4:	4413      	add	r3, r2
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80026a6:	4402      	add	r2, r0
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026a8:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 80026aa:	e9c4 3202 	strd	r3, r2, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 80026ae:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80026b2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 80026b6:	b946      	cbnz	r6, 80026ca <xQueueGenericReset+0x4e>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026b8:	6923      	ldr	r3, [r4, #16]
 80026ba:	b993      	cbnz	r3, 80026e2 <xQueueGenericReset+0x66>
        taskEXIT_CRITICAL();
 80026bc:	f7ff fe24 	bl	8002308 <vPortExitCritical>
}
 80026c0:	2001      	movs	r0, #1
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
    configASSERT( xReturn != pdFAIL );
 80026c4:	f7ff ff46 	bl	8002554 <ulSetInterruptMask>
 80026c8:	e7fe      	b.n	80026c8 <xQueueGenericReset+0x4c>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026ca:	f104 0010 	add.w	r0, r4, #16
 80026ce:	f7ff fce9 	bl	80020a4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80026d6:	f7ff fce5 	bl	80020a4 <vListInitialise>
 80026da:	e7ef      	b.n	80026bc <xQueueGenericReset+0x40>
    configASSERT( pxQueue );
 80026dc:	f7ff ff3a 	bl	8002554 <ulSetInterruptMask>
 80026e0:	e7fe      	b.n	80026e0 <xQueueGenericReset+0x64>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026e2:	f104 0010 	add.w	r0, r4, #16
 80026e6:	f008 ff8f 	bl	800b608 <xTaskRemoveFromEventList>
 80026ea:	2800      	cmp	r0, #0
 80026ec:	d0e6      	beq.n	80026bc <xQueueGenericReset+0x40>
                        queueYIELD_IF_USING_PREEMPTION();
 80026ee:	f7ff fdf1 	bl	80022d4 <vPortYield>
 80026f2:	e7e3      	b.n	80026bc <xQueueGenericReset+0x40>

080026f4 <xQueueGenericCreateStatic>:
    {
 80026f4:	b570      	push	{r4, r5, r6, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	f89d 5018 	ldrb.w	r5, [sp, #24]
        configASSERT( pxStaticQueue );
 80026fc:	b363      	cbz	r3, 8002758 <xQueueGenericCreateStatic+0x64>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026fe:	b1c0      	cbz	r0, 8002732 <xQueueGenericCreateStatic+0x3e>
 8002700:	460c      	mov	r4, r1
 8002702:	461e      	mov	r6, r3
            ( pxStaticQueue != NULL ) &&
 8002704:	b1c2      	cbz	r2, 8002738 <xQueueGenericCreateStatic+0x44>
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8002706:	b1a1      	cbz	r1, 8002732 <xQueueGenericCreateStatic+0x3e>
                volatile size_t xSize = sizeof( StaticQueue_t );
 8002708:	2150      	movs	r1, #80	; 0x50
 800270a:	9101      	str	r1, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 800270c:	9901      	ldr	r1, [sp, #4]
 800270e:	2950      	cmp	r1, #80	; 0x50
 8002710:	d11f      	bne.n	8002752 <xQueueGenericCreateStatic+0x5e>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8002712:	9901      	ldr	r1, [sp, #4]
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002714:	2101      	movs	r1, #1
 8002716:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
    pxNewQueue->uxItemSize = uxItemSize;
 800271a:	e9c6 040f 	strd	r0, r4, [r6, #60]	; 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800271e:	2101      	movs	r1, #1
 8002720:	4630      	mov	r0, r6
 8002722:	6032      	str	r2, [r6, #0]
 8002724:	f7ff ffaa 	bl	800267c <xQueueGenericReset>
    }
 8002728:	4630      	mov	r0, r6
        pxNewQueue->ucQueueType = ucQueueType;
 800272a:	f886 504c 	strb.w	r5, [r6, #76]	; 0x4c
    }
 800272e:	b002      	add	sp, #8
 8002730:	bd70      	pop	{r4, r5, r6, pc}
            configASSERT( pxNewQueue );
 8002732:	f7ff ff0f 	bl	8002554 <ulSetInterruptMask>
 8002736:	e7fe      	b.n	8002736 <xQueueGenericCreateStatic+0x42>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8002738:	2900      	cmp	r1, #0
 800273a:	d1fa      	bne.n	8002732 <xQueueGenericCreateStatic+0x3e>
                volatile size_t xSize = sizeof( StaticQueue_t );
 800273c:	2250      	movs	r2, #80	; 0x50
 800273e:	9201      	str	r2, [sp, #4]
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002740:	9a01      	ldr	r2, [sp, #4]
 8002742:	2a50      	cmp	r2, #80	; 0x50
 8002744:	d105      	bne.n	8002752 <xQueueGenericCreateStatic+0x5e>
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002746:	2101      	movs	r1, #1
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 8002748:	9a01      	ldr	r2, [sp, #4]
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800274a:	f886 1046 	strb.w	r1, [r6, #70]	; 0x46
 800274e:	4632      	mov	r2, r6
 8002750:	e7e3      	b.n	800271a <xQueueGenericCreateStatic+0x26>
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002752:	f7ff feff 	bl	8002554 <ulSetInterruptMask>
 8002756:	e7fe      	b.n	8002756 <xQueueGenericCreateStatic+0x62>
        configASSERT( pxStaticQueue );
 8002758:	f7ff fefc 	bl	8002554 <ulSetInterruptMask>
 800275c:	e7fe      	b.n	800275c <xQueueGenericCreateStatic+0x68>
 800275e:	bf00      	nop

08002760 <xQueueReceive>:
{
 8002760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	9201      	str	r2, [sp, #4]
    configASSERT( ( pxQueue ) );
 8002768:	2800      	cmp	r0, #0
 800276a:	f000 8088 	beq.w	800287e <xQueueReceive+0x11e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800276e:	4604      	mov	r4, r0
 8002770:	460e      	mov	r6, r1
 8002772:	2900      	cmp	r1, #0
 8002774:	d077      	beq.n	8002866 <xQueueReceive+0x106>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002776:	f009 f807 	bl	800b788 <xTaskGetSchedulerState>
 800277a:	2800      	cmp	r0, #0
 800277c:	d079      	beq.n	8002872 <xQueueReceive+0x112>
        taskENTER_CRITICAL();
 800277e:	f7ff fdb5 	bl	80022ec <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002782:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002784:	2d00      	cmp	r5, #0
 8002786:	d158      	bne.n	800283a <xQueueReceive+0xda>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002788:	9b01      	ldr	r3, [sp, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d043      	beq.n	8002816 <xQueueReceive+0xb6>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800278e:	a802      	add	r0, sp, #8
 8002790:	f008 ffae 	bl	800b6f0 <vTaskInternalSetTimeOutState>
        prvLockQueue( pxQueue );
 8002794:	462f      	mov	r7, r5
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002796:	f104 0824 	add.w	r8, r4, #36	; 0x24
        taskEXIT_CRITICAL();
 800279a:	f7ff fdb5 	bl	8002308 <vPortExitCritical>
        vTaskSuspendAll();
 800279e:	f008 febb 	bl	800b518 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027a2:	f7ff fda3 	bl	80022ec <vPortEnterCritical>
 80027a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80027aa:	2bff      	cmp	r3, #255	; 0xff
 80027ac:	bf08      	it	eq
 80027ae:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80027b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80027b6:	2bff      	cmp	r3, #255	; 0xff
 80027b8:	bf08      	it	eq
 80027ba:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80027be:	f7ff fda3 	bl	8002308 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027c2:	a901      	add	r1, sp, #4
 80027c4:	a802      	add	r0, sp, #8
 80027c6:	f008 ff9f 	bl	800b708 <xTaskCheckForTimeOut>
 80027ca:	b990      	cbnz	r0, 80027f2 <xQueueReceive+0x92>

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80027cc:	f7ff fd8e 	bl	80022ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80027d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027d2:	bb33      	cbnz	r3, 8002822 <xQueueReceive+0xc2>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80027d4:	f7ff fd98 	bl	8002308 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027d8:	4640      	mov	r0, r8
 80027da:	9901      	ldr	r1, [sp, #4]
 80027dc:	f008 fed8 	bl	800b590 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80027e0:	4620      	mov	r0, r4
 80027e2:	f7ff ff05 	bl	80025f0 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80027e6:	f008 fe9f 	bl	800b528 <xTaskResumeAll>
 80027ea:	b968      	cbnz	r0, 8002808 <xQueueReceive+0xa8>
                    taskYIELD_WITHIN_API();
 80027ec:	f7ff fd72 	bl	80022d4 <vPortYield>
        taskENTER_CRITICAL();
 80027f0:	e00a      	b.n	8002808 <xQueueReceive+0xa8>
            prvUnlockQueue( pxQueue );
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fefc 	bl	80025f0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027f8:	f008 fe96 	bl	800b528 <xTaskResumeAll>
    taskENTER_CRITICAL();
 80027fc:	f7ff fd76 	bl	80022ec <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002802:	b143      	cbz	r3, 8002816 <xQueueReceive+0xb6>
    taskEXIT_CRITICAL();
 8002804:	f7ff fd80 	bl	8002308 <vPortExitCritical>
        taskENTER_CRITICAL();
 8002808:	f7ff fd70 	bl	80022ec <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800280c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800280e:	b9a5      	cbnz	r5, 800283a <xQueueReceive+0xda>
                if( xTicksToWait == ( TickType_t ) 0 )
 8002810:	9b01      	ldr	r3, [sp, #4]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1c1      	bne.n	800279a <xQueueReceive+0x3a>
                    taskEXIT_CRITICAL();
 8002816:	f7ff fd77 	bl	8002308 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 800281a:	2000      	movs	r0, #0
}
 800281c:	b004      	add	sp, #16
 800281e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    taskEXIT_CRITICAL();
 8002822:	f7ff fd71 	bl	8002308 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8002826:	4620      	mov	r0, r4
 8002828:	f7ff fee2 	bl	80025f0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800282c:	f008 fe7c 	bl	800b528 <xTaskResumeAll>
        taskENTER_CRITICAL();
 8002830:	f7ff fd5c 	bl	80022ec <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002834:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002836:	2d00      	cmp	r5, #0
 8002838:	d0ea      	beq.n	8002810 <xQueueReceive+0xb0>
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800283a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800283c:	b15a      	cbz	r2, 8002856 <xQueueReceive+0xf6>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800283e:	68e1      	ldr	r1, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002840:	68a3      	ldr	r3, [r4, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002842:	4411      	add	r1, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002844:	4299      	cmp	r1, r3
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002846:	60e1      	str	r1, [r4, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002848:	bf28      	it	cs
 800284a:	6821      	ldrcs	r1, [r4, #0]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 800284c:	4630      	mov	r0, r6
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800284e:	bf28      	it	cs
 8002850:	60e1      	strcs	r1, [r4, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002852:	f7fe fbd1 	bl	8000ff8 <memcpy>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002856:	6923      	ldr	r3, [r4, #16]
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002858:	3d01      	subs	r5, #1
 800285a:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800285c:	b993      	cbnz	r3, 8002884 <xQueueReceive+0x124>
                taskEXIT_CRITICAL();
 800285e:	f7ff fd53 	bl	8002308 <vPortExitCritical>
                return pdPASS;
 8002862:	2001      	movs	r0, #1
 8002864:	e7da      	b.n	800281c <xQueueReceive+0xbc>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002866:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d084      	beq.n	8002776 <xQueueReceive+0x16>
 800286c:	f7ff fe72 	bl	8002554 <ulSetInterruptMask>
 8002870:	e7fe      	b.n	8002870 <xQueueReceive+0x110>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002872:	9b01      	ldr	r3, [sp, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d082      	beq.n	800277e <xQueueReceive+0x1e>
 8002878:	f7ff fe6c 	bl	8002554 <ulSetInterruptMask>
 800287c:	e7fe      	b.n	800287c <xQueueReceive+0x11c>
    configASSERT( ( pxQueue ) );
 800287e:	f7ff fe69 	bl	8002554 <ulSetInterruptMask>
 8002882:	e7fe      	b.n	8002882 <xQueueReceive+0x122>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002884:	f104 0010 	add.w	r0, r4, #16
 8002888:	f008 febe 	bl	800b608 <xTaskRemoveFromEventList>
 800288c:	2800      	cmp	r0, #0
 800288e:	d0e6      	beq.n	800285e <xQueueReceive+0xfe>
                        queueYIELD_IF_USING_PREEMPTION();
 8002890:	f7ff fd20 	bl	80022d4 <vPortYield>
 8002894:	e7e3      	b.n	800285e <xQueueReceive+0xfe>
 8002896:	bf00      	nop

08002898 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	4604      	mov	r4, r0
 800289c:	460e      	mov	r6, r1
 800289e:	4615      	mov	r5, r2
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80028a0:	f7ff fd24 	bl	80022ec <vPortEnterCritical>
 80028a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80028a8:	2bff      	cmp	r3, #255	; 0xff
 80028aa:	bf04      	itt	eq
 80028ac:	2300      	moveq	r3, #0
 80028ae:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80028b2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	bf04      	itt	eq
 80028ba:	2300      	moveq	r3, #0
 80028bc:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80028c0:	f7ff fd22 	bl	8002308 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80028c6:	b123      	cbz	r3, 80028d2 <vQueueWaitForMessageRestricted+0x3a>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80028c8:	4620      	mov	r0, r4

        traceRETURN_vQueueWaitForMessageRestricted();
    }
 80028ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 80028ce:	f7ff be8f 	b.w	80025f0 <prvUnlockQueue>
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028d2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028d6:	462a      	mov	r2, r5
 80028d8:	4631      	mov	r1, r6
 80028da:	f008 fe6d 	bl	800b5b8 <vTaskPlaceOnEventListRestricted>
        prvUnlockQueue( pxQueue );
 80028de:	4620      	mov	r0, r4
    }
 80028e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        prvUnlockQueue( pxQueue );
 80028e4:	f7ff be84 	b.w	80025f0 <prvUnlockQueue>

080028e8 <out_buffer>:


// internal buffer output
static inline void out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 80028e8:	429a      	cmp	r2, r3
    ((char*)buffer)[idx] = character;
 80028ea:	bf38      	it	cc
 80028ec:	5488      	strbcc	r0, [r1, r2]
  }
}
 80028ee:	4770      	bx	lr

080028f0 <out_discard>:

// internal null output
static inline void out_discard(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop

080028f4 <out_rev_>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t out_rev_(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80028f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f8:	469a      	mov	sl, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80028fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 80028fc:	4617      	mov	r7, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80028fe:	079a      	lsls	r2, r3, #30
{
 8002900:	4606      	mov	r6, r0
 8002902:	468b      	mov	fp, r1
 8002904:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002908:	d111      	bne.n	800292e <out_rev_+0x3a>
    for (size_t i = len; i < width; i++) {
 800290a:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 800290e:	4293      	cmp	r3, r2
 8002910:	d20d      	bcs.n	800292e <out_rev_+0x3a>
 8002912:	4613      	mov	r3, r2
 8002914:	463c      	mov	r4, r7
 8002916:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002918:	1a9d      	subs	r5, r3, r2
 800291a:	443d      	add	r5, r7
      out(' ', buffer, idx++, maxlen);
 800291c:	4622      	mov	r2, r4
 800291e:	4653      	mov	r3, sl
 8002920:	4659      	mov	r1, fp
 8002922:	2020      	movs	r0, #32
 8002924:	3401      	adds	r4, #1
 8002926:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8002928:	42ac      	cmp	r4, r5
 800292a:	d1f7      	bne.n	800291c <out_rev_+0x28>
 800292c:	e000      	b.n	8002930 <out_rev_+0x3c>
 800292e:	463d      	mov	r5, r7
    }
  }

  // reverse string
  while (len) {
 8002930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002932:	b173      	cbz	r3, 8002952 <out_rev_+0x5e>
 8002934:	eb08 0403 	add.w	r4, r8, r3
 8002938:	eb04 0905 	add.w	r9, r4, r5
 800293c:	eba9 0204 	sub.w	r2, r9, r4
    out(buf[--len], buffer, idx++, maxlen);
 8002940:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 8002944:	4653      	mov	r3, sl
 8002946:	4659      	mov	r1, fp
 8002948:	47b0      	blx	r6
  while (len) {
 800294a:	4544      	cmp	r4, r8
 800294c:	d1f6      	bne.n	800293c <out_rev_+0x48>
    out(buf[--len], buffer, idx++, maxlen);
 800294e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002950:	441d      	add	r5, r3
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002952:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002954:	079b      	lsls	r3, r3, #30
 8002956:	d50e      	bpl.n	8002976 <out_rev_+0x82>
    while (idx - start_idx < width) {
 8002958:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800295a:	1bef      	subs	r7, r5, r7
 800295c:	42bb      	cmp	r3, r7
 800295e:	d90a      	bls.n	8002976 <out_rev_+0x82>
 8002960:	461c      	mov	r4, r3
      out(' ', buffer, idx++, maxlen);
 8002962:	462a      	mov	r2, r5
 8002964:	4653      	mov	r3, sl
 8002966:	4659      	mov	r1, fp
 8002968:	2020      	movs	r0, #32
    while (idx - start_idx < width) {
 800296a:	3701      	adds	r7, #1
      out(' ', buffer, idx++, maxlen);
 800296c:	47b0      	blx	r6
    while (idx - start_idx < width) {
 800296e:	42a7      	cmp	r7, r4
      out(' ', buffer, idx++, maxlen);
 8002970:	f105 0501 	add.w	r5, r5, #1
    while (idx - start_idx < width) {
 8002974:	d3f5      	bcc.n	8002962 <out_rev_+0x6e>
    }
  }

  return idx;
}
 8002976:	4628      	mov	r0, r5
 8002978:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800297c <print_integer>:
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
}

// An internal itoa-like function
static size_t print_integer(out_fct_type out, char* buffer, size_t idx, size_t maxlen, printf_unsigned_value_t value, bool negative, numeric_base_t base, unsigned int precision, unsigned int width, unsigned int flags)
{
 800297c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002980:	ed2d 8b04 	vpush	{d8-d9}
 8002984:	b08f      	sub	sp, #60	; 0x3c
 8002986:	f89d 4078 	ldrb.w	r4, [sp, #120]	; 0x78
 800298a:	ee09 3a90 	vmov	s19, r3
 800298e:	e9dd 561c 	ldrd	r5, r6, [sp, #112]	; 0x70
 8002992:	e9dd 9a20 	ldrd	r9, sl, [sp, #128]	; 0x80
  char buf[PRINTF_INTEGER_BUFFER_SIZE];
  size_t len = 0U;

  if (!value) {
 8002996:	ea55 0306 	orrs.w	r3, r5, r6
{
 800299a:	ee08 0a10 	vmov	s16, r0
 800299e:	ee08 1a90 	vmov	s17, r1
 80029a2:	ee09 2a10 	vmov	s18, r2
 80029a6:	f89d 707c 	ldrb.w	r7, [sp, #124]	; 0x7c
 80029aa:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
 80029ae:	9405      	str	r4, [sp, #20]
  if (!value) {
 80029b0:	d15d      	bne.n	8002a6e <print_integer+0xf2>
    if ( !(flags & FLAGS_PRECISION) ) {
 80029b2:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 80029b6:	f040 80b2 	bne.w	8002b1e <print_integer+0x1a2>
      buf[len++] = '0';
 80029ba:	2330      	movs	r3, #48	; 0x30
      flags &= ~FLAGS_HASH;
 80029bc:	f02b 0b10 	bic.w	fp, fp, #16
      buf[len++] = '0';
 80029c0:	f88d 3018 	strb.w	r3, [sp, #24]
    if (!(flags & FLAGS_LEFT)) {
 80029c4:	f01b 0f02 	tst.w	fp, #2
 80029c8:	ab06      	add	r3, sp, #24
      buf[len++] = '0';
 80029ca:	f04f 0401 	mov.w	r4, #1
 80029ce:	9304      	str	r3, [sp, #16]
    if (!(flags & FLAGS_LEFT)) {
 80029d0:	d07a      	beq.n	8002ac8 <print_integer+0x14c>
 80029d2:	4623      	mov	r3, r4
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80029d4:	4599      	cmp	r9, r3
 80029d6:	d90d      	bls.n	80029f4 <print_integer+0x78>
 80029d8:	2b20      	cmp	r3, #32
 80029da:	d00b      	beq.n	80029f4 <print_integer+0x78>
 80029dc:	9804      	ldr	r0, [sp, #16]
 80029de:	1e5a      	subs	r2, r3, #1
      buf[len++] = '0';
 80029e0:	2130      	movs	r1, #48	; 0x30
 80029e2:	4402      	add	r2, r0
 80029e4:	e001      	b.n	80029ea <print_integer+0x6e>
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80029e6:	2b20      	cmp	r3, #32
 80029e8:	d004      	beq.n	80029f4 <print_integer+0x78>
      buf[len++] = '0';
 80029ea:	3301      	adds	r3, #1
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80029ec:	4599      	cmp	r9, r3
      buf[len++] = '0';
 80029ee:	f802 1f01 	strb.w	r1, [r2, #1]!
    while ((len < precision) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 80029f2:	d1f8      	bne.n	80029e6 <print_integer+0x6a>
    if (base == BASE_OCTAL && (len > unpadded_len)) {
 80029f4:	2f08      	cmp	r7, #8
 80029f6:	d103      	bne.n	8002a00 <print_integer+0x84>
 80029f8:	429c      	cmp	r4, r3
      flags &= ~FLAGS_HASH;
 80029fa:	bf38      	it	cc
 80029fc:	f02b 0b10 	biccc.w	fp, fp, #16
  if (flags & (FLAGS_HASH | FLAGS_POINTER)) {
 8002a00:	f241 0210 	movw	r2, #4112	; 0x1010
 8002a04:	ea1b 0f02 	tst.w	fp, r2
 8002a08:	d011      	beq.n	8002a2e <print_integer+0xb2>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8002a0a:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8002a0e:	d07c      	beq.n	8002b0a <print_integer+0x18e>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002a10:	2f10      	cmp	r7, #16
 8002a12:	f000 80bb 	beq.w	8002b8c <print_integer+0x210>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002a16:	2f02      	cmp	r7, #2
 8002a18:	f000 80a1 	beq.w	8002b5e <print_integer+0x1e2>
    if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8002a1c:	2b20      	cmp	r3, #32
 8002a1e:	d012      	beq.n	8002a46 <print_integer+0xca>
      buf[len++] = '0';
 8002a20:	2130      	movs	r1, #48	; 0x30
 8002a22:	185a      	adds	r2, r3, r1
 8002a24:	3208      	adds	r2, #8
 8002a26:	446a      	add	r2, sp
 8002a28:	f802 1c20 	strb.w	r1, [r2, #-32]
 8002a2c:	3301      	adds	r3, #1
  if (len < PRINTF_INTEGER_BUFFER_SIZE) {
 8002a2e:	2b20      	cmp	r3, #32
 8002a30:	d009      	beq.n	8002a46 <print_integer+0xca>
    if (negative) {
 8002a32:	9a05      	ldr	r2, [sp, #20]
 8002a34:	2a00      	cmp	r2, #0
 8002a36:	d078      	beq.n	8002b2a <print_integer+0x1ae>
      buf[len++] = '-';
 8002a38:	212d      	movs	r1, #45	; 0x2d
      buf[len++] = ' ';
 8002a3a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002a3e:	446a      	add	r2, sp
 8002a40:	f802 1c20 	strb.w	r1, [r2, #-32]
 8002a44:	3301      	adds	r3, #1
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8002a46:	9c04      	ldr	r4, [sp, #16]
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	ee19 2a10 	vmov	r2, s18
 8002a4e:	ee19 3a90 	vmov	r3, s19
 8002a52:	ee18 1a90 	vmov	r1, s17
 8002a56:	ee18 0a10 	vmov	r0, s16
 8002a5a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002a5e:	9400      	str	r4, [sp, #0]
 8002a60:	f7ff ff48 	bl	80028f4 <out_rev_>
      value /= base;
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
  }

  return print_integer_finalization(out, buffer, idx, maxlen, buf, len, negative, base, precision, width, flags);
}
 8002a64:	b00f      	add	sp, #60	; 0x3c
 8002a66:	ecbd 8b04 	vpop	{d8-d9}
 8002a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a6e:	f01b 0f20 	tst.w	fp, #32
 8002a72:	bf14      	ite	ne
 8002a74:	2341      	movne	r3, #65	; 0x41
 8002a76:	2361      	moveq	r3, #97	; 0x61
 8002a78:	aa06      	add	r2, sp, #24
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8002a7a:	3b0a      	subs	r3, #10
 8002a7c:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
 8002a80:	4690      	mov	r8, r2
  size_t len = 0U;
 8002a82:	2400      	movs	r4, #0
 8002a84:	4699      	mov	r9, r3
 8002a86:	9204      	str	r2, [sp, #16]
 8002a88:	e003      	b.n	8002a92 <print_integer+0x116>
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8002a8a:	2c20      	cmp	r4, #32
 8002a8c:	d017      	beq.n	8002abe <print_integer+0x142>
      value /= base;
 8002a8e:	4605      	mov	r5, r0
 8002a90:	460e      	mov	r6, r1
      const char digit = (char)(value % base);
 8002a92:	4628      	mov	r0, r5
 8002a94:	4631      	mov	r1, r6
 8002a96:	463a      	mov	r2, r7
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f7fe f8c7 	bl	8000c2c <__aeabi_uldivmod>
 8002a9e:	b2d2      	uxtb	r2, r2
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8002aa0:	2a09      	cmp	r2, #9
 8002aa2:	f102 0330 	add.w	r3, r2, #48	; 0x30
 8002aa6:	bf8a      	itet	hi
 8002aa8:	444a      	addhi	r2, r9
 8002aaa:	b2da      	uxtbls	r2, r3
 8002aac:	b2d2      	uxtbhi	r2, r2
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8002aae:	42bd      	cmp	r5, r7
 8002ab0:	f176 0300 	sbcs.w	r3, r6, #0
      buf[len++] = (char)(digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10);
 8002ab4:	f808 2b01 	strb.w	r2, [r8], #1
 8002ab8:	f104 0401 	add.w	r4, r4, #1
    } while (value && (len < PRINTF_INTEGER_BUFFER_SIZE));
 8002abc:	d2e5      	bcs.n	8002a8a <print_integer+0x10e>
 8002abe:	f8dd 9080 	ldr.w	r9, [sp, #128]	; 0x80
    if (!(flags & FLAGS_LEFT)) {
 8002ac2:	f01b 0f02 	tst.w	fp, #2
 8002ac6:	d184      	bne.n	80029d2 <print_integer+0x56>
      if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002ac8:	f1ba 0f00 	cmp.w	sl, #0
 8002acc:	d081      	beq.n	80029d2 <print_integer+0x56>
 8002ace:	f01b 0f01 	tst.w	fp, #1
 8002ad2:	f43f af7e 	beq.w	80029d2 <print_integer+0x56>
 8002ad6:	9b05      	ldr	r3, [sp, #20]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d152      	bne.n	8002b82 <print_integer+0x206>
 8002adc:	f01b 0f0c 	tst.w	fp, #12
 8002ae0:	d14f      	bne.n	8002b82 <print_integer+0x206>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002ae2:	4554      	cmp	r4, sl
 8002ae4:	f4bf af75 	bcs.w	80029d2 <print_integer+0x56>
 8002ae8:	2c1f      	cmp	r4, #31
 8002aea:	d84d      	bhi.n	8002b88 <print_integer+0x20c>
 8002aec:	9804      	ldr	r0, [sp, #16]
 8002aee:	1e62      	subs	r2, r4, #1
 8002af0:	4623      	mov	r3, r4
        buf[len++] = '0';
 8002af2:	2130      	movs	r1, #48	; 0x30
 8002af4:	4402      	add	r2, r0
 8002af6:	e001      	b.n	8002afc <print_integer+0x180>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d045      	beq.n	8002b88 <print_integer+0x20c>
        buf[len++] = '0';
 8002afc:	3301      	adds	r3, #1
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002afe:	4553      	cmp	r3, sl
        buf[len++] = '0';
 8002b00:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002b04:	d1f8      	bne.n	8002af8 <print_integer+0x17c>
 8002b06:	4653      	mov	r3, sl
 8002b08:	e764      	b.n	80029d4 <print_integer+0x58>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8002b0a:	b9c3      	cbnz	r3, 8002b3e <print_integer+0x1c2>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002b0c:	2f10      	cmp	r7, #16
 8002b0e:	d055      	beq.n	8002bbc <print_integer+0x240>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002b10:	2f02      	cmp	r7, #2
 8002b12:	d060      	beq.n	8002bd6 <print_integer+0x25a>
      buf[len++] = '0';
 8002b14:	2330      	movs	r3, #48	; 0x30
 8002b16:	f88d 3018 	strb.w	r3, [sp, #24]
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e789      	b.n	8002a32 <print_integer+0xb6>
    else if (base == BASE_HEX) {
 8002b1e:	2f10      	cmp	r7, #16
 8002b20:	d029      	beq.n	8002b76 <print_integer+0x1fa>
 8002b22:	ab06      	add	r3, sp, #24
  size_t len = 0U;
 8002b24:	2400      	movs	r4, #0
 8002b26:	9304      	str	r3, [sp, #16]
 8002b28:	e7cb      	b.n	8002ac2 <print_integer+0x146>
    else if (flags & FLAGS_PLUS) {
 8002b2a:	f01b 0f04 	tst.w	fp, #4
 8002b2e:	d104      	bne.n	8002b3a <print_integer+0x1be>
    else if (flags & FLAGS_SPACE) {
 8002b30:	f01b 0f08 	tst.w	fp, #8
 8002b34:	d087      	beq.n	8002a46 <print_integer+0xca>
      buf[len++] = ' ';
 8002b36:	2120      	movs	r1, #32
 8002b38:	e77f      	b.n	8002a3a <print_integer+0xbe>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002b3a:	212b      	movs	r1, #43	; 0x2b
 8002b3c:	e77d      	b.n	8002a3a <print_integer+0xbe>
    if (!(flags & FLAGS_PRECISION) && len && ((len == precision) || (len == width))) {
 8002b3e:	4599      	cmp	r9, r3
 8002b40:	d002      	beq.n	8002b48 <print_integer+0x1cc>
 8002b42:	459a      	cmp	sl, r3
 8002b44:	f47f af64 	bne.w	8002a10 <print_integer+0x94>
      if (unpadded_len < len) {
 8002b48:	429c      	cmp	r4, r3
 8002b4a:	f4bf af61 	bcs.w	8002a10 <print_integer+0x94>
      if (len && (base == BASE_HEX)) {
 8002b4e:	1e5a      	subs	r2, r3, #1
 8002b50:	d0dc      	beq.n	8002b0c <print_integer+0x190>
 8002b52:	2f10      	cmp	r7, #16
 8002b54:	d044      	beq.n	8002be0 <print_integer+0x264>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002b56:	2f02      	cmp	r7, #2
 8002b58:	d005      	beq.n	8002b66 <print_integer+0x1ea>
        len--;
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	e760      	b.n	8002a20 <print_integer+0xa4>
    else if ((base == BASE_BINARY) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	f43f af71 	beq.w	8002a46 <print_integer+0xca>
 8002b64:	461a      	mov	r2, r3
      buf[len++] = 'b';
 8002b66:	2162      	movs	r1, #98	; 0x62
 8002b68:	f102 0338 	add.w	r3, r2, #56	; 0x38
 8002b6c:	446b      	add	r3, sp
 8002b6e:	f803 1c20 	strb.w	r1, [r3, #-32]
 8002b72:	1c53      	adds	r3, r2, #1
 8002b74:	e752      	b.n	8002a1c <print_integer+0xa0>
      flags &= ~FLAGS_HASH;
 8002b76:	ab06      	add	r3, sp, #24
  size_t len = 0U;
 8002b78:	2400      	movs	r4, #0
      flags &= ~FLAGS_HASH;
 8002b7a:	f02b 0b10 	bic.w	fp, fp, #16
 8002b7e:	9304      	str	r3, [sp, #16]
 8002b80:	e79f      	b.n	8002ac2 <print_integer+0x146>
        width--;
 8002b82:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8002b86:	e7ac      	b.n	8002ae2 <print_integer+0x166>
      while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e733      	b.n	80029f4 <print_integer+0x78>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002b8c:	f01b 0f20 	tst.w	fp, #32
 8002b90:	d00b      	beq.n	8002baa <print_integer+0x22e>
    else if ((base == BASE_HEX) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	f43f af57 	beq.w	8002a46 <print_integer+0xca>
        len--;
 8002b98:	4619      	mov	r1, r3
      buf[len++] = 'X';
 8002b9a:	2258      	movs	r2, #88	; 0x58
 8002b9c:	f101 0338 	add.w	r3, r1, #56	; 0x38
 8002ba0:	446b      	add	r3, sp
 8002ba2:	f803 2c20 	strb.w	r2, [r3, #-32]
 8002ba6:	1c4b      	adds	r3, r1, #1
 8002ba8:	e738      	b.n	8002a1c <print_integer+0xa0>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	f43f af4b 	beq.w	8002a46 <print_integer+0xca>
      buf[len++] = 'x';
 8002bb0:	9a04      	ldr	r2, [sp, #16]
 8002bb2:	18d1      	adds	r1, r2, r3
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	2278      	movs	r2, #120	; 0x78
 8002bb8:	700a      	strb	r2, [r1, #0]
 8002bba:	e72f      	b.n	8002a1c <print_integer+0xa0>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002bbc:	f01b 0f20 	tst.w	fp, #32
 8002bc0:	d104      	bne.n	8002bcc <print_integer+0x250>
      buf[len++] = 'x';
 8002bc2:	2378      	movs	r3, #120	; 0x78
 8002bc4:	f88d 3018 	strb.w	r3, [sp, #24]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e729      	b.n	8002a20 <print_integer+0xa4>
      buf[len++] = 'X';
 8002bcc:	2358      	movs	r3, #88	; 0x58
 8002bce:	f88d 3018 	strb.w	r3, [sp, #24]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e724      	b.n	8002a20 <print_integer+0xa4>
      buf[len++] = 'b';
 8002bd6:	2362      	movs	r3, #98	; 0x62
 8002bd8:	f88d 3018 	strb.w	r3, [sp, #24]
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e71f      	b.n	8002a20 <print_integer+0xa4>
        if (unpadded_len < len) {
 8002be0:	4294      	cmp	r4, r2
 8002be2:	d208      	bcs.n	8002bf6 <print_integer+0x27a>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002be4:	f01b 0f20 	tst.w	fp, #32
          len--;
 8002be8:	f1a3 0102 	sub.w	r1, r3, #2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002bec:	d1d5      	bne.n	8002b9a <print_integer+0x21e>
      buf[len++] = 'x';
 8002bee:	4613      	mov	r3, r2
 8002bf0:	9a04      	ldr	r2, [sp, #16]
 8002bf2:	4411      	add	r1, r2
 8002bf4:	e7df      	b.n	8002bb6 <print_integer+0x23a>
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002bf6:	f01b 0f20 	tst.w	fp, #32
        len--;
 8002bfa:	4613      	mov	r3, r2
    if ((base == BASE_HEX) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_INTEGER_BUFFER_SIZE)) {
 8002bfc:	d0d8      	beq.n	8002bb0 <print_integer+0x234>
 8002bfe:	e7cb      	b.n	8002b98 <print_integer+0x21c>

08002c00 <get_components>:

// Break up a double number - which is known to be a finite non-negative number -
// into its base-10 parts: integral - before the decimal point, and fractional - after it.
// Taken the precision into account, but does not change it even internally.
static struct double_components get_components(double number, unsigned int precision)
{
 8002c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c04:	ed2d 8b02 	vpush	{d8}
 8002c08:	469b      	mov	fp, r3
 8002c0a:	b083      	sub	sp, #12
  struct double_components number_;
  number_.is_negative = get_sign(number);
  double abs_number = (number_.is_negative) ? -number : number;
 8002c0c:	0fdb      	lsrs	r3, r3, #31
{
 8002c0e:	4692      	mov	sl, r2
 8002c10:	4605      	mov	r5, r0
  double abs_number = (number_.is_negative) ? -number : number;
 8002c12:	9301      	str	r3, [sp, #4]
 8002c14:	d002      	beq.n	8002c1c <get_components+0x1c>
 8002c16:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8002c1a:	469b      	mov	fp, r3
  number_.integral = (int_fast64_t)abs_number;
 8002c1c:	4650      	mov	r0, sl
 8002c1e:	4659      	mov	r1, fp
 8002c20:	f7fe f81c 	bl	8000c5c <__aeabi_d2lz>
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8002c24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002c26:	4b40      	ldr	r3, [pc, #256]	; (8002d28 <get_components+0x128>)
  number_.integral = (int_fast64_t)abs_number;
 8002c28:	4606      	mov	r6, r0
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8002c2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c2e:	ed93 8b00 	vldr	d8, [r3]
  number_.integral = (int_fast64_t)abs_number;
 8002c32:	9100      	str	r1, [sp, #0]
  double remainder = (abs_number - number_.integral) * powers_of_10[precision];
 8002c34:	f7fd fcba 	bl	80005ac <__aeabi_l2d>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4650      	mov	r0, sl
 8002c3e:	4659      	mov	r1, fp
 8002c40:	f7fd fb2a 	bl	8000298 <__aeabi_dsub>
 8002c44:	ec53 2b18 	vmov	r2, r3, d8
 8002c48:	f7fd fcde 	bl	8000608 <__aeabi_dmul>
 8002c4c:	4680      	mov	r8, r0
 8002c4e:	4689      	mov	r9, r1
  number_.fractional = (int_fast64_t)remainder;
 8002c50:	f7fe f804 	bl	8000c5c <__aeabi_d2lz>
 8002c54:	4604      	mov	r4, r0
 8002c56:	460f      	mov	r7, r1

  remainder -= (double) number_.fractional;
 8002c58:	f7fd fca8 	bl	80005ac <__aeabi_l2d>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4640      	mov	r0, r8
 8002c62:	4649      	mov	r1, r9
 8002c64:	f7fd fb18 	bl	8000298 <__aeabi_dsub>

  if (remainder > 0.5) {
 8002c68:	2200      	movs	r2, #0
 8002c6a:	4b30      	ldr	r3, [pc, #192]	; (8002d2c <get_components+0x12c>)
  remainder -= (double) number_.fractional;
 8002c6c:	4680      	mov	r8, r0
 8002c6e:	4689      	mov	r9, r1
  if (remainder > 0.5) {
 8002c70:	f7fd ff5a 	bl	8000b28 <__aeabi_dcmpgt>
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d03c      	beq.n	8002cf2 <get_components+0xf2>
    ++number_.fractional;
 8002c78:	3401      	adds	r4, #1
 8002c7a:	f147 0700 	adc.w	r7, r7, #0
    // handle rollover, e.g. case 0.99 with precision 1 is 1.0
    if ((double) number_.fractional >= powers_of_10[precision]) {
 8002c7e:	4639      	mov	r1, r7
 8002c80:	4620      	mov	r0, r4
 8002c82:	f7fd fc93 	bl	80005ac <__aeabi_l2d>
 8002c86:	4602      	mov	r2, r0
 8002c88:	460b      	mov	r3, r1
 8002c8a:	ec51 0b18 	vmov	r0, r1, d8
 8002c8e:	f7fd ff37 	bl	8000b00 <__aeabi_dcmple>
 8002c92:	2800      	cmp	r0, #0
 8002c94:	d13c      	bne.n	8002d10 <get_components+0x110>
      // if halfway, round up if odd OR if last digit is 0
      ++number_.fractional;
    }
  }

  if (precision == 0U) {
 8002c96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002c98:	b9f3      	cbnz	r3, 8002cd8 <get_components+0xd8>
    remainder = abs_number - (double) number_.integral;
 8002c9a:	4630      	mov	r0, r6
 8002c9c:	9900      	ldr	r1, [sp, #0]
 8002c9e:	f7fd fc85 	bl	80005ac <__aeabi_l2d>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4650      	mov	r0, sl
 8002ca8:	4659      	mov	r1, fp
 8002caa:	f7fd faf5 	bl	8000298 <__aeabi_dsub>
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 8002cae:	2200      	movs	r2, #0
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <get_components+0x12c>)
    remainder = abs_number - (double) number_.integral;
 8002cb2:	4680      	mov	r8, r0
 8002cb4:	4689      	mov	r9, r1
    if ((!(remainder < 0.5) || (remainder > 0.5)) && (number_.integral & 1)) {
 8002cb6:	f7fd ff19 	bl	8000aec <__aeabi_dcmplt>
 8002cba:	b130      	cbz	r0, 8002cca <get_components+0xca>
 8002cbc:	4640      	mov	r0, r8
 8002cbe:	4649      	mov	r1, r9
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	4b1a      	ldr	r3, [pc, #104]	; (8002d2c <get_components+0x12c>)
 8002cc4:	f7fd ff30 	bl	8000b28 <__aeabi_dcmpgt>
 8002cc8:	b130      	cbz	r0, 8002cd8 <get_components+0xd8>
 8002cca:	07f3      	lsls	r3, r6, #31
 8002ccc:	d504      	bpl.n	8002cd8 <get_components+0xd8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++number_.integral;
 8002cce:	9b00      	ldr	r3, [sp, #0]
 8002cd0:	3601      	adds	r6, #1
 8002cd2:	f143 0300 	adc.w	r3, r3, #0
 8002cd6:	9300      	str	r3, [sp, #0]
    }
  }
  return number_;
}
 8002cd8:	4628      	mov	r0, r5
  return number_;
 8002cda:	9b00      	ldr	r3, [sp, #0]
 8002cdc:	602e      	str	r6, [r5, #0]
 8002cde:	e9c5 3401 	strd	r3, r4, [r5, #4]
 8002ce2:	9b01      	ldr	r3, [sp, #4]
 8002ce4:	60ef      	str	r7, [r5, #12]
 8002ce6:	742b      	strb	r3, [r5, #16]
}
 8002ce8:	b003      	add	sp, #12
 8002cea:	ecbd 8b02 	vpop	{d8}
 8002cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (remainder == 0.5) {
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	4649      	mov	r1, r9
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <get_components+0x12c>)
 8002cfa:	f7fd feed 	bl	8000ad8 <__aeabi_dcmpeq>
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d0c9      	beq.n	8002c96 <get_components+0x96>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 8002d02:	ea54 0307 	orrs.w	r3, r4, r7
 8002d06:	d10b      	bne.n	8002d20 <get_components+0x120>
      ++number_.fractional;
 8002d08:	3401      	adds	r4, #1
 8002d0a:	f147 0700 	adc.w	r7, r7, #0
 8002d0e:	e7c2      	b.n	8002c96 <get_components+0x96>
      number_.fractional = 0;
 8002d10:	2400      	movs	r4, #0
      ++number_.integral;
 8002d12:	9b00      	ldr	r3, [sp, #0]
 8002d14:	3601      	adds	r6, #1
 8002d16:	f143 0300 	adc.w	r3, r3, #0
      number_.fractional = 0;
 8002d1a:	4627      	mov	r7, r4
      ++number_.integral;
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	e7ba      	b.n	8002c96 <get_components+0x96>
    if ((number_.fractional == 0U) || (number_.fractional & 1U)) {
 8002d20:	07e2      	lsls	r2, r4, #31
 8002d22:	d5b8      	bpl.n	8002c96 <get_components+0x96>
 8002d24:	e7f0      	b.n	8002d08 <get_components+0x108>
 8002d26:	bf00      	nop
 8002d28:	0801bbb0 	.word	0x0801bbb0
 8002d2c:	3fe00000 	.word	0x3fe00000

08002d30 <print_broken_up_decimal.isra.0>:
  }
  return components;
}
#endif

static size_t print_broken_up_decimal(
 8002d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d34:	ed2d 8b04 	vpush	{d8-d9}
 8002d38:	b087      	sub	sp, #28
 8002d3a:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8002d3e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8002d40:	9404      	str	r4, [sp, #16]
 8002d42:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8002d44:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8002d48:	ee08 4a10 	vmov	s16, r4
 8002d4c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8002d4e:	9502      	str	r5, [sp, #8]
 8002d50:	ee08 4a90 	vmov	s17, r4
 8002d54:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8002d56:	460d      	mov	r5, r1
 8002d58:	ee09 4a10 	vmov	s18, r4
 8002d5c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8002d5e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8002d60:	ee09 4a90 	vmov	s19, r4
 8002d64:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8002d66:	9403      	str	r4, [sp, #12]
 8002d68:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8002d6a:	9401      	str	r4, [sp, #4]
 8002d6c:	4604      	mov	r4, r0
  struct double_components number_, out_fct_type out, char *buffer, size_t idx, size_t maxlen, unsigned int precision,
  unsigned int width, unsigned int flags, char *buf, size_t len)
{
  if (precision != 0U) {
 8002d6e:	f1b9 0f00 	cmp.w	r9, #0
 8002d72:	d049      	beq.n	8002e08 <print_broken_up_decimal.isra.0+0xd8>
 8002d74:	4698      	mov	r8, r3
    // do fractional part, as an unsigned number

    unsigned int count = precision;

    if (flags & FLAGS_ADAPT_EXP && !(flags & FLAGS_HASH)) {
 8002d76:	9b01      	ldr	r3, [sp, #4]
 8002d78:	4617      	mov	r7, r2
 8002d7a:	f403 6301 	and.w	r3, r3, #2064	; 0x810
 8002d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d82:	f000 8099 	beq.w	8002eb8 <print_broken_up_decimal.isra.0+0x188>
 8002d86:	9a02      	ldr	r2, [sp, #8]
 8002d88:	1e73      	subs	r3, r6, #1
 8002d8a:	eb02 0b03 	add.w	fp, r2, r3
 8002d8e:	9405      	str	r4, [sp, #20]
 8002d90:	e017      	b.n	8002dc2 <print_broken_up_decimal.isra.0+0x92>
    }

    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
        --count;
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8002d92:	4638      	mov	r0, r7
 8002d94:	4641      	mov	r1, r8
 8002d96:	220a      	movs	r2, #10
 8002d98:	2300      	movs	r3, #0
 8002d9a:	f7fd fef7 	bl	8000b8c <__aeabi_ldivmod>
 8002d9e:	4694      	mov	ip, r2
        if (!(number_.fractional /= 10U)) {
 8002da0:	4638      	mov	r0, r7
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8002da2:	f10c 0730 	add.w	r7, ip, #48	; 0x30
        if (!(number_.fractional /= 10U)) {
 8002da6:	4641      	mov	r1, r8
 8002da8:	2300      	movs	r3, #0
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8002daa:	f80b 7f01 	strb.w	r7, [fp, #1]!
        if (!(number_.fractional /= 10U)) {
 8002dae:	220a      	movs	r2, #10
 8002db0:	f7fd feec 	bl	8000b8c <__aeabi_ldivmod>
 8002db4:	ea51 0300 	orrs.w	r3, r1, r0
 8002db8:	4607      	mov	r7, r0
 8002dba:	4688      	mov	r8, r1
 8002dbc:	d066      	beq.n	8002e8c <print_broken_up_decimal.isra.0+0x15c>
        --count;
 8002dbe:	46a1      	mov	r9, r4
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8002dc0:	4656      	mov	r6, sl
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002dc2:	2e20      	cmp	r6, #32
        --count;
 8002dc4:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
        buf[len++] = (char)('0' + number_.fractional % 10U);
 8002dc8:	f106 0a01 	add.w	sl, r6, #1
      while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002dcc:	d1e1      	bne.n	8002d92 <print_broken_up_decimal.isra.0+0x62>
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002dce:	9b01      	ldr	r3, [sp, #4]
 8002dd0:	f003 0303 	and.w	r3, r3, #3
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	f000 809a 	beq.w	8002f0e <print_broken_up_decimal.isra.0+0x1de>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002dda:	2720      	movs	r7, #32
    else if (flags & FLAGS_SPACE) {
      buf[len++] = ' ';
    }
  }

  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8002ddc:	9b01      	ldr	r3, [sp, #4]
 8002dde:	ee19 2a10 	vmov	r2, s18
 8002de2:	9317      	str	r3, [sp, #92]	; 0x5c
 8002de4:	9b03      	ldr	r3, [sp, #12]
 8002de6:	ee18 1a90 	vmov	r1, s17
 8002dea:	e9cd 7315 	strd	r7, r3, [sp, #84]	; 0x54
 8002dee:	ee18 0a10 	vmov	r0, s16
 8002df2:	ee19 3a90 	vmov	r3, s19
 8002df6:	9c02      	ldr	r4, [sp, #8]
 8002df8:	9414      	str	r4, [sp, #80]	; 0x50
}
 8002dfa:	b007      	add	sp, #28
 8002dfc:	ecbd 8b04 	vpop	{d8-d9}
 8002e00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  return out_rev_(out, buffer, idx, maxlen, buf, len, width, flags);
 8002e04:	f7ff bd76 	b.w	80028f4 <out_rev_>
    if (flags & FLAGS_HASH) {
 8002e08:	9b01      	ldr	r3, [sp, #4]
 8002e0a:	06d9      	lsls	r1, r3, #27
 8002e0c:	d505      	bpl.n	8002e1a <print_broken_up_decimal.isra.0+0xea>
      if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002e0e:	2e20      	cmp	r6, #32
 8002e10:	d0dd      	beq.n	8002dce <print_broken_up_decimal.isra.0+0x9e>
        buf[len++] = '.';
 8002e12:	232e      	movs	r3, #46	; 0x2e
 8002e14:	9a02      	ldr	r2, [sp, #8]
 8002e16:	5593      	strb	r3, [r2, r6]
 8002e18:	3601      	adds	r6, #1
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8002e20:	4498      	add	r8, r3
 8002e22:	e000      	b.n	8002e26 <print_broken_up_decimal.isra.0+0xf6>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8002e24:	463e      	mov	r6, r7
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002e26:	2e20      	cmp	r6, #32
    buf[len++] = (char)('0' + (number_.integral % 10));
 8002e28:	f106 0701 	add.w	r7, r6, #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002e2c:	d0cf      	beq.n	8002dce <print_broken_up_decimal.isra.0+0x9e>
    buf[len++] = (char)('0' + (number_.integral % 10));
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	220a      	movs	r2, #10
 8002e34:	2300      	movs	r3, #0
 8002e36:	f7fd fea9 	bl	8000b8c <__aeabi_ldivmod>
 8002e3a:	4694      	mov	ip, r2
    if (!(number_.integral /= 10)) {
 8002e3c:	4620      	mov	r0, r4
    buf[len++] = (char)('0' + (number_.integral % 10));
 8002e3e:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    if (!(number_.integral /= 10)) {
 8002e42:	2300      	movs	r3, #0
 8002e44:	4629      	mov	r1, r5
    buf[len++] = (char)('0' + (number_.integral % 10));
 8002e46:	f808 4f01 	strb.w	r4, [r8, #1]!
    if (!(number_.integral /= 10)) {
 8002e4a:	220a      	movs	r2, #10
 8002e4c:	f7fd fe9e 	bl	8000b8c <__aeabi_ldivmod>
 8002e50:	ea51 0300 	orrs.w	r3, r1, r0
 8002e54:	4604      	mov	r4, r0
 8002e56:	460d      	mov	r5, r1
 8002e58:	d1e4      	bne.n	8002e24 <print_broken_up_decimal.isra.0+0xf4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8002e5a:	9b01      	ldr	r3, [sp, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d062      	beq.n	8002f2a <print_broken_up_decimal.isra.0+0x1fa>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8002e64:	2f20      	cmp	r7, #32
 8002e66:	d0b8      	beq.n	8002dda <print_broken_up_decimal.isra.0+0xaa>
    if (number_.is_negative) {
 8002e68:	9b04      	ldr	r3, [sp, #16]
 8002e6a:	b123      	cbz	r3, 8002e76 <print_broken_up_decimal.isra.0+0x146>
      buf[len++] = '-';
 8002e6c:	232d      	movs	r3, #45	; 0x2d
 8002e6e:	9a02      	ldr	r2, [sp, #8]
 8002e70:	55d3      	strb	r3, [r2, r7]
 8002e72:	3701      	adds	r7, #1
 8002e74:	e7b2      	b.n	8002ddc <print_broken_up_decimal.isra.0+0xac>
    else if (flags & FLAGS_PLUS) {
 8002e76:	9b01      	ldr	r3, [sp, #4]
 8002e78:	075a      	lsls	r2, r3, #29
 8002e7a:	d443      	bmi.n	8002f04 <print_broken_up_decimal.isra.0+0x1d4>
    else if (flags & FLAGS_SPACE) {
 8002e7c:	9b01      	ldr	r3, [sp, #4]
 8002e7e:	071b      	lsls	r3, r3, #28
 8002e80:	d5ac      	bpl.n	8002ddc <print_broken_up_decimal.isra.0+0xac>
      buf[len++] = ' ';
 8002e82:	2320      	movs	r3, #32
 8002e84:	9a02      	ldr	r2, [sp, #8]
 8002e86:	55d3      	strb	r3, [r2, r7]
 8002e88:	3701      	adds	r7, #1
 8002e8a:	e7a7      	b.n	8002ddc <print_broken_up_decimal.isra.0+0xac>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002e8c:	f1ba 0f20 	cmp.w	sl, #32
 8002e90:	4623      	mov	r3, r4
 8002e92:	9c05      	ldr	r4, [sp, #20]
 8002e94:	d09b      	beq.n	8002dce <print_broken_up_decimal.isra.0+0x9e>
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d068      	beq.n	8002f6c <print_broken_up_decimal.isra.0+0x23c>
 8002e9a:	9b02      	ldr	r3, [sp, #8]
        buf[len++] = '0';
 8002e9c:	2130      	movs	r1, #48	; 0x30
 8002e9e:	199a      	adds	r2, r3, r6
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002ea0:	4656      	mov	r6, sl
        buf[len++] = '0';
 8002ea2:	3601      	adds	r6, #1
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002ea4:	2e20      	cmp	r6, #32
        buf[len++] = '0';
 8002ea6:	f802 1f01 	strb.w	r1, [r2, #1]!
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002eaa:	d090      	beq.n	8002dce <print_broken_up_decimal.isra.0+0x9e>
 8002eac:	43f3      	mvns	r3, r6
 8002eae:	444b      	add	r3, r9
 8002eb0:	eb1a 0f03 	cmn.w	sl, r3
 8002eb4:	d1f5      	bne.n	8002ea2 <print_broken_up_decimal.isra.0+0x172>
 8002eb6:	e7ac      	b.n	8002e12 <print_broken_up_decimal.isra.0+0xe2>
      if (number_.fractional > 0) {
 8002eb8:	2a01      	cmp	r2, #1
 8002eba:	f178 0300 	sbcs.w	r3, r8, #0
 8002ebe:	dbac      	blt.n	8002e1a <print_broken_up_decimal.isra.0+0xea>
          if (digit != 0) {
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4641      	mov	r1, r8
 8002ec4:	220a      	movs	r2, #10
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	f7fd fe60 	bl	8000b8c <__aeabi_ldivmod>
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f47f af5a 	bne.w	8002d86 <print_broken_up_decimal.isra.0+0x56>
          number_.fractional /= 10U;
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	220a      	movs	r2, #10
 8002ed8:	2300      	movs	r3, #0
 8002eda:	f7fd fe57 	bl	8000b8c <__aeabi_ldivmod>
 8002ede:	220a      	movs	r2, #10
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	46bb      	mov	fp, r7
 8002ee4:	46c2      	mov	sl, r8
 8002ee6:	4607      	mov	r7, r0
 8002ee8:	4688      	mov	r8, r1
 8002eea:	f7fd fe4f 	bl	8000b8c <__aeabi_ldivmod>
          if (digit != 0) {
 8002eee:	4313      	orrs	r3, r2
          --count;
 8002ef0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
          if (digit != 0) {
 8002ef4:	d0ed      	beq.n	8002ed2 <print_broken_up_decimal.isra.0+0x1a2>
    if (number_.fractional > 0 || !(flags & FLAGS_ADAPT_EXP) || (flags & FLAGS_HASH) ) {
 8002ef6:	f1bb 0f0a 	cmp.w	fp, #10
 8002efa:	f17a 0300 	sbcs.w	r3, sl, #0
 8002efe:	f6bf af42 	bge.w	8002d86 <print_broken_up_decimal.isra.0+0x56>
 8002f02:	e78a      	b.n	8002e1a <print_broken_up_decimal.isra.0+0xea>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002f04:	232b      	movs	r3, #43	; 0x2b
 8002f06:	9a02      	ldr	r2, [sp, #8]
 8002f08:	55d3      	strb	r3, [r2, r7]
 8002f0a:	3701      	adds	r7, #1
 8002f0c:	e766      	b.n	8002ddc <print_broken_up_decimal.isra.0+0xac>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002f0e:	9b03      	ldr	r3, [sp, #12]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f43f af62 	beq.w	8002dda <print_broken_up_decimal.isra.0+0xaa>
 8002f16:	9a04      	ldr	r2, [sp, #16]
 8002f18:	bb0a      	cbnz	r2, 8002f5e <print_broken_up_decimal.isra.0+0x22e>
 8002f1a:	9a01      	ldr	r2, [sp, #4]
 8002f1c:	f012 0f0c 	tst.w	r2, #12
 8002f20:	f43f af5b 	beq.w	8002dda <print_broken_up_decimal.isra.0+0xaa>
      width--;
 8002f24:	3b01      	subs	r3, #1
 8002f26:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002f28:	e757      	b.n	8002dda <print_broken_up_decimal.isra.0+0xaa>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002f2a:	9b03      	ldr	r3, [sp, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d099      	beq.n	8002e64 <print_broken_up_decimal.isra.0+0x134>
 8002f30:	9b04      	ldr	r3, [sp, #16]
 8002f32:	b1b3      	cbz	r3, 8002f62 <print_broken_up_decimal.isra.0+0x232>
      width--;
 8002f34:	9b03      	ldr	r3, [sp, #12]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	9303      	str	r3, [sp, #12]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002f3a:	9b03      	ldr	r3, [sp, #12]
 8002f3c:	429f      	cmp	r7, r3
 8002f3e:	d291      	bcs.n	8002e64 <print_broken_up_decimal.isra.0+0x134>
 8002f40:	2f1f      	cmp	r7, #31
 8002f42:	f63f af4a 	bhi.w	8002dda <print_broken_up_decimal.isra.0+0xaa>
 8002f46:	9b02      	ldr	r3, [sp, #8]
      buf[len++] = '0';
 8002f48:	9a03      	ldr	r2, [sp, #12]
 8002f4a:	441e      	add	r6, r3
 8002f4c:	2330      	movs	r3, #48	; 0x30
 8002f4e:	3701      	adds	r7, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002f50:	4297      	cmp	r7, r2
      buf[len++] = '0';
 8002f52:	f806 3f01 	strb.w	r3, [r6, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8002f56:	d085      	beq.n	8002e64 <print_broken_up_decimal.isra.0+0x134>
 8002f58:	2f20      	cmp	r7, #32
 8002f5a:	d1f8      	bne.n	8002f4e <print_broken_up_decimal.isra.0+0x21e>
 8002f5c:	e73d      	b.n	8002dda <print_broken_up_decimal.isra.0+0xaa>
      width--;
 8002f5e:	9b03      	ldr	r3, [sp, #12]
 8002f60:	e7e0      	b.n	8002f24 <print_broken_up_decimal.isra.0+0x1f4>
    if (width && (number_.is_negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002f62:	9b01      	ldr	r3, [sp, #4]
 8002f64:	f013 0f0c 	tst.w	r3, #12
 8002f68:	d0e7      	beq.n	8002f3a <print_broken_up_decimal.isra.0+0x20a>
 8002f6a:	e7e3      	b.n	8002f34 <print_broken_up_decimal.isra.0+0x204>
      while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8002f6c:	4656      	mov	r6, sl
 8002f6e:	e750      	b.n	8002e12 <print_broken_up_decimal.isra.0+0xe2>

08002f70 <print_exponential_number>:
}

#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t print_exponential_number(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double number, unsigned int precision, unsigned int width, unsigned int flags, char* buf, size_t len)
{
 8002f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	ed2d 8b04 	vpush	{d8-d9}
 8002f78:	b097      	sub	sp, #92	; 0x5c
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 8002f7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
{
 8002f7c:	2700      	movs	r7, #0
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 8002f7e:	0fe4      	lsrs	r4, r4, #31
{
 8002f80:	4689      	mov	r9, r1
 8002f82:	4698      	mov	r8, r3
  return get_bit_access(x).U >> (DOUBLE_SIZE_IN_BITS - 1);
 8002f84:	940d      	str	r4, [sp, #52]	; 0x34
  const bool negative = get_sign(number);
 8002f86:	940f      	str	r4, [sp, #60]	; 0x3c
{
 8002f88:	900b      	str	r0, [sp, #44]	; 0x2c
 8002f8a:	920c      	str	r2, [sp, #48]	; 0x30
  // This number will decrease gradually (by factors of 10) as we "extract" the exponent out of it
  double abs_number =  negative ? -number : number;
 8002f8c:	b12c      	cbz	r4, 8002f9a <print_exponential_number+0x2a>
 8002f8e:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8002f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002f96:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  bool abs_exp10_covered_by_powers_table;
  struct scaling_factor normalization;


  // Determine the decimal exponent
  if (abs_number == 0.0) {
 8002f9a:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f7fd fd99 	bl	8000ad8 <__aeabi_dcmpeq>
 8002fa6:	900e      	str	r0, [sp, #56]	; 0x38
 8002fa8:	2800      	cmp	r0, #0
 8002faa:	d055      	beq.n	8003058 <print_exponential_number+0xe8>
  // For both of these, the value of 0 has a special meaning, but not the same one:
  // a 0 exponent-part width means "don't print the exponent"; a 0 decimal-part width
  // means "use as many characters as necessary".

  bool fall_back_to_decimal_only_mode = false;
  if (flags & FLAGS_ADAPT_EXP) {
 8002fac:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002fae:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 8002fb2:	f040 81c3 	bne.w	800333c <print_exponential_number+0x3cc>
 8002fb6:	461f      	mov	r7, r3
  bool fall_back_to_decimal_only_mode = false;
 8002fb8:	469b      	mov	fp, r3

  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
  struct double_components decimal_part_components =
    should_skip_normalization ?
    get_components(negative ? -abs_number : abs_number, precision) :
 8002fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002fbc:	b12b      	cbz	r3, 8002fca <print_exponential_number+0x5a>
 8002fbe:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8002fc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002fc6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8002fca:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8002fce:	9926      	ldr	r1, [sp, #152]	; 0x98
 8002fd0:	a810      	add	r0, sp, #64	; 0x40
 8002fd2:	9100      	str	r1, [sp, #0]
 8002fd4:	f7ff fe14 	bl	8002c00 <get_components>
 8002fd8:	e9dd 6a12 	ldrd	r6, sl, [sp, #72]	; 0x48
 8002fdc:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8002fe0:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8002fe4:	930d      	str	r3, [sp, #52]	; 0x34
    get_normalized_components(negative, precision, abs_number, normalization);

  // Account for roll-over, e.g. rounding from 9.99 to 100.0 - which effects
  // the exponent and may require additional tweaking of the parts
  if (fall_back_to_decimal_only_mode) {
 8002fe6:	2f00      	cmp	r7, #0
 8002fe8:	f000 8189 	beq.w	80032fe <print_exponential_number+0x38e>
    if ( (flags & FLAGS_ADAPT_EXP) && exp10 >= -1 && decimal_part_components.integral == powers_of_10[exp10 + 1]) {
 8002fec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8002fee:	051f      	lsls	r7, r3, #20
 8002ff0:	d511      	bpl.n	8003016 <print_exponential_number+0xa6>
 8002ff2:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8002ff6:	db0e      	blt.n	8003016 <print_exponential_number+0xa6>
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	4629      	mov	r1, r5
 8002ffc:	f7fd fad6 	bl	80005ac <__aeabi_l2d>
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <print_exponential_number+0xe4>)
 8003002:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003006:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800300a:	f7fd fd65 	bl	8000ad8 <__aeabi_dcmpeq>
 800300e:	b110      	cbz	r0, 8003016 <print_exponential_number+0xa6>
      exp10++; // Not strictly necessary, since exp10 is no longer really used
      precision--;
 8003010:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003012:	3b01      	subs	r3, #1
 8003014:	9326      	str	r3, [sp, #152]	; 0x98
        // No; we just give up on any restriction on the decimal part and use as many
        // characters as we need
        0U);

  const size_t start_idx = idx;
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003016:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003018:	4620      	mov	r0, r4
 800301a:	9309      	str	r3, [sp, #36]	; 0x24
 800301c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 800301e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8003020:	9308      	str	r3, [sp, #32]
 8003022:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003024:	9400      	str	r4, [sp, #0]
 8003026:	9307      	str	r3, [sp, #28]
 8003028:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800302a:	4632      	mov	r2, r6
 800302c:	9306      	str	r3, [sp, #24]
 800302e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003030:	4629      	mov	r1, r5
 8003032:	e9cd 8304 	strd	r8, r3, [sp, #16]
 8003036:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003038:	e9cd 9302 	strd	r9, r3, [sp, #8]
 800303c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	4653      	mov	r3, sl
 8003042:	f7ff fe75 	bl	8002d30 <print_broken_up_decimal.isra.0>
 8003046:	4604      	mov	r4, r0
      // We need to right-pad with spaces to meet the width requirement
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
 8003048:	4620      	mov	r0, r4
 800304a:	b017      	add	sp, #92	; 0x5c
 800304c:	ecbd 8b04 	vpop	{d8-d9}
 8003050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003054:	0801bbb0 	.word	0x0801bbb0
  return dwba;
 8003058:	e9dd 6524 	ldrd	r6, r5, [sp, #144]	; 0x90
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 800305c:	f3c5 500a 	ubfx	r0, r5, #20, #11
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003060:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003064:	f7fd fa66 	bl	8000534 <__aeabi_i2d>
 8003068:	a3ce      	add	r3, pc, #824	; (adr r3, 80033a4 <print_exponential_number+0x434>)
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f7fd facb 	bl	8000608 <__aeabi_dmul>
 8003072:	a3ce      	add	r3, pc, #824	; (adr r3, 80033ac <print_exponential_number+0x43c>)
 8003074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003078:	f7fd f910 	bl	800029c <__adddf3>
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 800307c:	f3c5 0313 	ubfx	r3, r5, #0, #20
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003080:	460d      	mov	r5, r1
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 8003082:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003086:	4604      	mov	r4, r0
 8003088:	2200      	movs	r2, #0
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 800308a:	4630      	mov	r0, r6
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800308c:	4bbe      	ldr	r3, [pc, #760]	; (8003388 <print_exponential_number+0x418>)
      conv.U = (conv.U & (( (double_uint_t)(1) << DOUBLE_STORED_MANTISSA_BITS) - 1U)) | ((double_uint_t) DOUBLE_BASE_EXPONENT << DOUBLE_STORED_MANTISSA_BITS);
 800308e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
      exp10 = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003092:	f7fd f901 	bl	8000298 <__aeabi_dsub>
 8003096:	a3b4      	add	r3, pc, #720	; (adr r3, 8003368 <print_exponential_number+0x3f8>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	f7fd fab4 	bl	8000608 <__aeabi_dmul>
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7fd f8f8 	bl	800029c <__adddf3>
 80030ac:	f7fd fd46 	bl	8000b3c <__aeabi_d2iz>
 80030b0:	4683      	mov	fp, r0
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 80030b2:	f7fd fa3f 	bl	8000534 <__aeabi_i2d>
 80030b6:	a3ae      	add	r3, pc, #696	; (adr r3, 8003370 <print_exponential_number+0x400>)
 80030b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030bc:	4604      	mov	r4, r0
 80030be:	460d      	mov	r5, r1
 80030c0:	f7fd faa2 	bl	8000608 <__aeabi_dmul>
 80030c4:	2200      	movs	r2, #0
 80030c6:	4bb1      	ldr	r3, [pc, #708]	; (800338c <print_exponential_number+0x41c>)
 80030c8:	f7fd f8e8 	bl	800029c <__adddf3>
 80030cc:	f7fd fd36 	bl	8000b3c <__aeabi_d2iz>
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 80030d0:	a3a9      	add	r3, pc, #676	; (adr r3, 8003378 <print_exponential_number+0x408>)
 80030d2:	e9d3 2300 	ldrd	r2, r3, [r3]
      exp2 = (int)(exp10 * 3.321928094887362 + 0.5);
 80030d6:	4682      	mov	sl, r0
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 80030d8:	4629      	mov	r1, r5
 80030da:	4620      	mov	r0, r4
 80030dc:	f7fd fa94 	bl	8000608 <__aeabi_dmul>
 80030e0:	4604      	mov	r4, r0
 80030e2:	4650      	mov	r0, sl
 80030e4:	460d      	mov	r5, r1
 80030e6:	f7fd fa25 	bl	8000534 <__aeabi_i2d>
 80030ea:	a3a5      	add	r3, pc, #660	; (adr r3, 8003380 <print_exponential_number+0x410>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f7fd fa8a 	bl	8000608 <__aeabi_dmul>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4620      	mov	r0, r4
 80030fa:	4629      	mov	r1, r5
 80030fc:	f7fd f8cc 	bl	8000298 <__aeabi_dsub>
      const double z2 = z * z;
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
      const double z  = exp10 * 2.302585092994046 - exp2 * 0.6931471805599453;
 8003104:	4604      	mov	r4, r0
 8003106:	460d      	mov	r5, r1
      const double z2 = z * z;
 8003108:	f7fd fa7e 	bl	8000608 <__aeabi_dmul>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800310c:	4622      	mov	r2, r4
      const double z2 = z * z;
 800310e:	4606      	mov	r6, r0
 8003110:	460f      	mov	r7, r1
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003112:	462b      	mov	r3, r5
 8003114:	4620      	mov	r0, r4
 8003116:	4629      	mov	r1, r5
 8003118:	f7fd f8c0 	bl	800029c <__adddf3>
 800311c:	2200      	movs	r2, #0
 800311e:	ec41 0b18 	vmov	d8, r0, r1
 8003122:	4b9b      	ldr	r3, [pc, #620]	; (8003390 <print_exponential_number+0x420>)
 8003124:	4630      	mov	r0, r6
 8003126:	4639      	mov	r1, r7
 8003128:	f7fd fb98 	bl	800085c <__aeabi_ddiv>
 800312c:	2200      	movs	r2, #0
 800312e:	4b99      	ldr	r3, [pc, #612]	; (8003394 <print_exponential_number+0x424>)
 8003130:	f7fd f8b4 	bl	800029c <__adddf3>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4630      	mov	r0, r6
 800313a:	4639      	mov	r1, r7
 800313c:	f7fd fb8e 	bl	800085c <__aeabi_ddiv>
 8003140:	2200      	movs	r2, #0
 8003142:	4b95      	ldr	r3, [pc, #596]	; (8003398 <print_exponential_number+0x428>)
 8003144:	f7fd f8aa 	bl	800029c <__adddf3>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4630      	mov	r0, r6
 800314e:	4639      	mov	r1, r7
 8003150:	f7fd fb84 	bl	800085c <__aeabi_ddiv>
 8003154:	4622      	mov	r2, r4
 8003156:	462b      	mov	r3, r5
 8003158:	4604      	mov	r4, r0
 800315a:	460d      	mov	r5, r1
 800315c:	2000      	movs	r0, #0
 800315e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003162:	f7fd f899 	bl	8000298 <__aeabi_dsub>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd f895 	bl	800029c <__adddf3>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	ec51 0b18 	vmov	r0, r1, d8
 800317a:	f7fd fb6f 	bl	800085c <__aeabi_ddiv>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 800317e:	f20a 3aff 	addw	sl, sl, #1023	; 0x3ff
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003182:	2200      	movs	r2, #0
 8003184:	4b85      	ldr	r3, [pc, #532]	; (800339c <print_exponential_number+0x42c>)
 8003186:	f7fd f889 	bl	800029c <__adddf3>
      conv.U = ((double_uint_t)(exp2) + DOUBLE_BASE_EXPONENT) << DOUBLE_STORED_MANTISSA_BITS;
 800318a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800318c:	ea4f 530a 	mov.w	r3, sl, lsl #20
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003190:	f7fd fa3a 	bl	8000608 <__aeabi_dmul>
      if (abs_number < conv.F) {
 8003194:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8003198:	4604      	mov	r4, r0
 800319a:	460d      	mov	r5, r1
      if (abs_number < conv.F) {
 800319c:	f7fd fcc4 	bl	8000b28 <__aeabi_dcmpgt>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	f040 80c2 	bne.w	800332a <print_exponential_number+0x3ba>
      conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80031a6:	4620      	mov	r0, r4
 80031a8:	4629      	mov	r1, r5
    abs_exp10_covered_by_powers_table = PRINTF_ABS(exp10) < PRINTF_MAX_PRECOMPUTED_POWER_OF_10;
 80031aa:	f10b 0311 	add.w	r3, fp, #17
 80031ae:	2b22      	cmp	r3, #34	; 0x22
 80031b0:	bf94      	ite	ls
 80031b2:	2701      	movls	r7, #1
 80031b4:	2700      	movhi	r7, #0
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 80031b6:	f200 8159 	bhi.w	800346c <print_exponential_number+0x4fc>
 80031ba:	4a79      	ldr	r2, [pc, #484]	; (80033a0 <print_exponential_number+0x430>)
 80031bc:	ea8b 71eb 	eor.w	r1, fp, fp, asr #31
 80031c0:	eba1 71eb 	sub.w	r1, r1, fp, asr #31
 80031c4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80031c8:	ed92 7b00 	vldr	d7, [r2]
 80031cc:	eeb0 8a47 	vmov.f32	s16, s14
 80031d0:	eef0 8a67 	vmov.f32	s17, s15
  if (flags & FLAGS_ADAPT_EXP) {
 80031d4:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80031d6:	0512      	lsls	r2, r2, #20
 80031d8:	f140 80ec 	bpl.w	80033b4 <print_exponential_number+0x444>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 80031dc:	f11b 0f04 	cmn.w	fp, #4
 80031e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80031e2:	f280 81f8 	bge.w	80035d6 <print_exponential_number+0x666>
        (int) precision - 1 - exp10 :
 80031e6:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 80031e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80031ec:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 80031ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80031f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031f4:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 80031f6:	2f00      	cmp	r7, #0
 80031f8:	f040 80e3 	bne.w	80033c2 <print_exponential_number+0x452>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 80031fc:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8003200:	ec57 6b18 	vmov	r6, r7, d8
  components.is_negative = negative;
 8003204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003206:	ee18 2a10 	vmov	r2, s16
  components.is_negative = negative;
 800320a:	930d      	str	r3, [sp, #52]	; 0x34
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 800320c:	463b      	mov	r3, r7
 800320e:	f7fd fb25 	bl	800085c <__aeabi_ddiv>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 8003212:	f7fd fd23 	bl	8000c5c <__aeabi_d2lz>
 8003216:	4604      	mov	r4, r0
 8003218:	460d      	mov	r5, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 800321a:	f7fd f9c7 	bl	80005ac <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 800321e:	463b      	mov	r3, r7
 8003220:	ee18 2a10 	vmov	r2, s16
 8003224:	f7fd f9f0 	bl	8000608 <__aeabi_dmul>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 800322c:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 8003230:	f7fd f832 	bl	8000298 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 8003234:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003236:	4b5a      	ldr	r3, [pc, #360]	; (80033a0 <print_exponential_number+0x430>)
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 8003238:	4606      	mov	r6, r0
  double prec_power_of_10 = powers_of_10[precision];
 800323a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800323e:	ed93 7b00 	vldr	d7, [r3]
  return (int)((x.U >> DOUBLE_STORED_MANTISSA_BITS ) & DOUBLE_EXPONENT_MASK) - DOUBLE_BASE_EXPONENT;
 8003242:	ee17 3a90 	vmov	r3, s15
 8003246:	f3c7 520a 	ubfx	r2, r7, #20, #11
 800324a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800324e:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8003252:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 8003256:	2a00      	cmp	r2, #0
 8003258:	bfb8      	it	lt
 800325a:	4252      	neglt	r2, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	bfb8      	it	lt
 8003260:	425b      	neglt	r3, r3
 8003262:	429a      	cmp	r2, r3
  double prec_power_of_10 = powers_of_10[precision];
 8003264:	eeb0 9a47 	vmov.f32	s18, s14
 8003268:	eef0 9a67 	vmov.f32	s19, s15
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 800326c:	460f      	mov	r7, r1
    if (PRINTF_ABS(factor_exp2) > PRINTF_ABS(extra_factor_exp2)) {
 800326e:	f340 819c 	ble.w	80035aa <print_exponential_number+0x63a>
      result.raw_factor = sf.raw_factor / extra_multiplicative_factor;
 8003272:	ec53 2b17 	vmov	r2, r3, d7
 8003276:	ec51 0b18 	vmov	r0, r1, d8
 800327a:	f7fd faef 	bl	800085c <__aeabi_ddiv>
 800327e:	460b      	mov	r3, r1
 8003280:	4602      	mov	r2, r0
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003282:	4639      	mov	r1, r7
 8003284:	4630      	mov	r0, r6
 8003286:	f7fd fae9 	bl	800085c <__aeabi_ddiv>
 800328a:	4606      	mov	r6, r0
 800328c:	460f      	mov	r7, r1
  if (precision == 0U) {
 800328e:	9b26      	ldr	r3, [sp, #152]	; 0x98
    components.integral += (scaled_remainder >= rounding_threshold);
 8003290:	4630      	mov	r0, r6
 8003292:	4639      	mov	r1, r7
  if (precision == 0U) {
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80cf 	beq.w	8003438 <print_exponential_number+0x4c8>
    components.fractional = (int_fast64_t) scaled_remainder;
 800329a:	f7fd fcdf 	bl	8000c5c <__aeabi_d2lz>
 800329e:	468a      	mov	sl, r1
 80032a0:	900e      	str	r0, [sp, #56]	; 0x38
    scaled_remainder -= components.fractional;
 80032a2:	f7fd f983 	bl	80005ac <__aeabi_l2d>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4630      	mov	r0, r6
 80032ac:	4639      	mov	r1, r7
 80032ae:	f7fc fff3 	bl	8000298 <__aeabi_dsub>
    components.fractional += (scaled_remainder >= rounding_threshold);
 80032b2:	2200      	movs	r2, #0
 80032b4:	4b35      	ldr	r3, [pc, #212]	; (800338c <print_exponential_number+0x41c>)
    scaled_remainder -= components.fractional;
 80032b6:	4606      	mov	r6, r0
 80032b8:	460f      	mov	r7, r1
    components.fractional += (scaled_remainder >= rounding_threshold);
 80032ba:	f7fd fc2b 	bl	8000b14 <__aeabi_dcmpge>
 80032be:	4603      	mov	r3, r0
    if (scaled_remainder == rounding_threshold) {
 80032c0:	4630      	mov	r0, r6
    components.fractional += (scaled_remainder >= rounding_threshold);
 80032c2:	1e1e      	subs	r6, r3, #0
 80032c4:	bf18      	it	ne
 80032c6:	2601      	movne	r6, #1
 80032c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    if (scaled_remainder == rounding_threshold) {
 80032ca:	4639      	mov	r1, r7
    components.fractional += (scaled_remainder >= rounding_threshold);
 80032cc:	18f6      	adds	r6, r6, r3
    if (scaled_remainder == rounding_threshold) {
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	4b2e      	ldr	r3, [pc, #184]	; (800338c <print_exponential_number+0x41c>)
    components.fractional += (scaled_remainder >= rounding_threshold);
 80032d4:	f14a 0a00 	adc.w	sl, sl, #0
    if (scaled_remainder == rounding_threshold) {
 80032d8:	f7fd fbfe 	bl	8000ad8 <__aeabi_dcmpeq>
 80032dc:	b108      	cbz	r0, 80032e2 <print_exponential_number+0x372>
      components.fractional &= ~((int_fast64_t) 0x1);
 80032de:	f026 0601 	bic.w	r6, r6, #1
    if ((double) components.fractional >= prec_power_of_10) {
 80032e2:	4630      	mov	r0, r6
 80032e4:	4651      	mov	r1, sl
 80032e6:	f7fd f961 	bl	80005ac <__aeabi_l2d>
 80032ea:	ec53 2b19 	vmov	r2, r3, d9
 80032ee:	f7fd fc11 	bl	8000b14 <__aeabi_dcmpge>
 80032f2:	b120      	cbz	r0, 80032fe <print_exponential_number+0x38e>
      ++components.integral;
 80032f4:	3401      	adds	r4, #1
 80032f6:	f145 0500 	adc.w	r5, r5, #0
      components.fractional = 0;
 80032fa:	2600      	movs	r6, #0
 80032fc:	46b2      	mov	sl, r6
    if (decimal_part_components.integral >= 10) {
 80032fe:	2c0a      	cmp	r4, #10
 8003300:	f175 0300 	sbcs.w	r3, r5, #0
 8003304:	db05      	blt.n	8003312 <print_exponential_number+0x3a2>
      decimal_part_components.fractional = 0;
 8003306:	2600      	movs	r6, #0
      decimal_part_components.integral = 1;
 8003308:	2401      	movs	r4, #1
      decimal_part_components.fractional = 0;
 800330a:	46b2      	mov	sl, r6
      decimal_part_components.integral = 1;
 800330c:	4635      	mov	r5, r6
      exp10++;
 800330e:	f10b 0b01 	add.w	fp, fp, #1
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 8003312:	f10b 0363 	add.w	r3, fp, #99	; 0x63
 8003316:	2bc6      	cmp	r3, #198	; 0xc6
 8003318:	f200 80ab 	bhi.w	8003472 <print_exponential_number+0x502>
      0U :
 800331c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800331e:	f013 0702 	ands.w	r7, r3, #2
 8003322:	f040 8129 	bne.w	8003578 <print_exponential_number+0x608>
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 8003326:	2704      	movs	r7, #4
 8003328:	e104      	b.n	8003534 <print_exponential_number+0x5c4>
        conv.F /= 10;
 800332a:	4620      	mov	r0, r4
 800332c:	4629      	mov	r1, r5
 800332e:	2200      	movs	r2, #0
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <print_exponential_number+0x424>)
        exp10--;
 8003332:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        conv.F /= 10;
 8003336:	f7fd fa91 	bl	800085c <__aeabi_ddiv>
 800333a:	e736      	b.n	80031aa <print_exponential_number+0x23a>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 800333c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800333e:	2b01      	cmp	r3, #1
 8003340:	bf38      	it	cc
 8003342:	2301      	movcc	r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	f340 811a 	ble.w	800357e <print_exponential_number+0x60e>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 800334a:	f04f 0b00 	mov.w	fp, #0
        (int) precision - 1 - exp10 :
 800334e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003350:	3b01      	subs	r3, #1
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 8003352:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003356:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8003358:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800335a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800335e:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8003360:	2701      	movs	r7, #1
 8003362:	e62a      	b.n	8002fba <print_exponential_number+0x4a>
 8003364:	f3af 8000 	nop.w
 8003368:	636f4361 	.word	0x636f4361
 800336c:	3fd287a7 	.word	0x3fd287a7
 8003370:	0979a371 	.word	0x0979a371
 8003374:	400a934f 	.word	0x400a934f
 8003378:	bbb55516 	.word	0xbbb55516
 800337c:	40026bb1 	.word	0x40026bb1
 8003380:	fefa39ef 	.word	0xfefa39ef
 8003384:	3fe62e42 	.word	0x3fe62e42
 8003388:	3ff80000 	.word	0x3ff80000
 800338c:	3fe00000 	.word	0x3fe00000
 8003390:	402c0000 	.word	0x402c0000
 8003394:	40240000 	.word	0x40240000
 8003398:	40180000 	.word	0x40180000
 800339c:	3ff00000 	.word	0x3ff00000
 80033a0:	0801bbb0 	.word	0x0801bbb0
 80033a4:	509f79fb 	.word	0x509f79fb
 80033a8:	3fd34413 	.word	0x3fd34413
 80033ac:	8b60c8b3 	.word	0x8b60c8b3
 80033b0:	3fc68a28 	.word	0x3fc68a28
 80033b4:	f1bb 0f00 	cmp.w	fp, #0
 80033b8:	f280 80f1 	bge.w	800359e <print_exponential_number+0x62e>
 80033bc:	2b22      	cmp	r3, #34	; 0x22
 80033be:	f63f af1d 	bhi.w	80031fc <print_exponential_number+0x28c>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 80033c2:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80033c6:	ec57 6b18 	vmov	r6, r7, d8
  components.is_negative = negative;
 80033ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 80033cc:	ee18 2a10 	vmov	r2, s16
  components.is_negative = negative;
 80033d0:	930d      	str	r3, [sp, #52]	; 0x34
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 80033d2:	463b      	mov	r3, r7
 80033d4:	f7fd f918 	bl	8000608 <__aeabi_dmul>
  components.integral = (int_fast64_t) apply_scaling(non_normalized, normalization);
 80033d8:	f7fd fc40 	bl	8000c5c <__aeabi_d2lz>
 80033dc:	4604      	mov	r4, r0
 80033de:	460d      	mov	r5, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 80033e0:	f7fd f8e4 	bl	80005ac <__aeabi_l2d>
  return normalization.multiply ? normalized / normalization.raw_factor : normalized * normalization.raw_factor;
 80033e4:	463b      	mov	r3, r7
 80033e6:	ee18 2a10 	vmov	r2, s16
 80033ea:	f7fd fa37 	bl	800085c <__aeabi_ddiv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 80033f2:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 80033f6:	f7fc ff4f 	bl	8000298 <__aeabi_dsub>
  double prec_power_of_10 = powers_of_10[precision];
 80033fa:	4e7f      	ldr	r6, [pc, #508]	; (80035f8 <print_exponential_number+0x688>)
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 80033fc:	463b      	mov	r3, r7
  double prec_power_of_10 = powers_of_10[precision];
 80033fe:	9f26      	ldr	r7, [sp, #152]	; 0x98
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003400:	ee18 2a10 	vmov	r2, s16
  double prec_power_of_10 = powers_of_10[precision];
 8003404:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8003408:	ed96 7b00 	vldr	d7, [r6]
  double remainder = non_normalized - unapply_scaling((double) components.integral, normalization);
 800340c:	460f      	mov	r7, r1
 800340e:	4606      	mov	r6, r0
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 8003410:	ec51 0b17 	vmov	r0, r1, d7
  double prec_power_of_10 = powers_of_10[precision];
 8003414:	eeb0 9a47 	vmov.f32	s18, s14
 8003418:	eef0 9a67 	vmov.f32	s19, s15
    result.raw_factor = sf.raw_factor * extra_multiplicative_factor;
 800341c:	f7fd f8f4 	bl	8000608 <__aeabi_dmul>
  return normalization.multiply ? num * normalization.raw_factor : num / normalization.raw_factor;
 8003420:	463b      	mov	r3, r7
 8003422:	4632      	mov	r2, r6
 8003424:	f7fd f8f0 	bl	8000608 <__aeabi_dmul>
 8003428:	4606      	mov	r6, r0
 800342a:	460f      	mov	r7, r1
  if (precision == 0U) {
 800342c:	9b26      	ldr	r3, [sp, #152]	; 0x98
    components.integral += (scaled_remainder >= rounding_threshold);
 800342e:	4630      	mov	r0, r6
 8003430:	4639      	mov	r1, r7
  if (precision == 0U) {
 8003432:	2b00      	cmp	r3, #0
 8003434:	f47f af31 	bne.w	800329a <print_exponential_number+0x32a>
    components.integral += (scaled_remainder >= rounding_threshold);
 8003438:	2200      	movs	r2, #0
 800343a:	4b70      	ldr	r3, [pc, #448]	; (80035fc <print_exponential_number+0x68c>)
 800343c:	f7fd fb6a 	bl	8000b14 <__aeabi_dcmpge>
 8003440:	4603      	mov	r3, r0
 8003442:	3b00      	subs	r3, #0
 8003444:	bf18      	it	ne
 8003446:	2301      	movne	r3, #1
    if (scaled_remainder == rounding_threshold) {
 8003448:	4630      	mov	r0, r6
    components.integral += (scaled_remainder >= rounding_threshold);
 800344a:	191c      	adds	r4, r3, r4
    if (scaled_remainder == rounding_threshold) {
 800344c:	4639      	mov	r1, r7
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <print_exponential_number+0x68c>)
    components.integral += (scaled_remainder >= rounding_threshold);
 8003454:	f145 0500 	adc.w	r5, r5, #0
    if (scaled_remainder == rounding_threshold) {
 8003458:	f7fd fb3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800345c:	2800      	cmp	r0, #0
 800345e:	f43f af4c 	beq.w	80032fa <print_exponential_number+0x38a>
    components.fractional = 0;
 8003462:	9e26      	ldr	r6, [sp, #152]	; 0x98
      components.integral &= ~((int_fast64_t) 0x1);
 8003464:	f024 0401 	bic.w	r4, r4, #1
    components.fractional = 0;
 8003468:	46b2      	mov	sl, r6
 800346a:	e748      	b.n	80032fe <print_exponential_number+0x38e>
    normalization.raw_factor = abs_exp10_covered_by_powers_table ? powers_of_10[PRINTF_ABS(exp10)] : conv.F;
 800346c:	ec41 0b18 	vmov	d8, r0, r1
 8003470:	e6b0      	b.n	80031d4 <print_exponential_number+0x264>
      0U :
 8003472:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003474:	f013 0702 	ands.w	r7, r3, #2
 8003478:	d05b      	beq.n	8003532 <print_exponential_number+0x5c2>
 800347a:	2304      	movs	r3, #4
 800347c:	930e      	str	r3, [sp, #56]	; 0x38
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 800347e:	4620      	mov	r0, r4
 8003480:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8003482:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8003484:	9407      	str	r4, [sp, #28]
 8003486:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003488:	9309      	str	r3, [sp, #36]	; 0x24
 800348a:	e9cd 9402 	strd	r9, r4, [sp, #8]
 800348e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003490:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003492:	9401      	str	r4, [sp, #4]
 8003494:	2400      	movs	r4, #0
 8003496:	9308      	str	r3, [sp, #32]
 8003498:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800349a:	4632      	mov	r2, r6
 800349c:	9305      	str	r3, [sp, #20]
 800349e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034a0:	4629      	mov	r1, r5
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	f8cd 8010 	str.w	r8, [sp, #16]
 80034a8:	4653      	mov	r3, sl
 80034aa:	9406      	str	r4, [sp, #24]
 80034ac:	f7ff fc40 	bl	8002d30 <print_broken_up_decimal.isra.0>
 80034b0:	4602      	mov	r2, r0
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80034b2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80034b4:	4649      	mov	r1, r9
 80034b6:	f013 0f20 	tst.w	r3, #32
 80034ba:	bf14      	ite	ne
 80034bc:	2045      	movne	r0, #69	; 0x45
 80034be:	2065      	moveq	r0, #101	; 0x65
 80034c0:	4643      	mov	r3, r8
 80034c2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80034c4:	1c54      	adds	r4, r2, #1
 80034c6:	47a8      	blx	r5
    idx = print_integer(out, buffer, idx, maxlen,
 80034c8:	f1bb 0f00 	cmp.w	fp, #0
 80034cc:	dd74      	ble.n	80035b8 <print_exponential_number+0x648>
 80034ce:	465a      	mov	r2, fp
 80034d0:	ea4f 73eb 	mov.w	r3, fp, asr #31
 80034d4:	e9cd 2300 	strd	r2, r3, [sp]
 80034d8:	2305      	movs	r3, #5
 80034da:	ea4f 70db 	mov.w	r0, fp, lsr #31
 80034de:	9002      	str	r0, [sp, #8]
 80034e0:	9306      	str	r3, [sp, #24]
 80034e2:	2000      	movs	r0, #0
 80034e4:	230a      	movs	r3, #10
 80034e6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80034e8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80034ea:	e9cd 3003 	strd	r3, r0, [sp, #12]
 80034ee:	4622      	mov	r2, r4
 80034f0:	9105      	str	r1, [sp, #20]
 80034f2:	4643      	mov	r3, r8
 80034f4:	4649      	mov	r1, r9
 80034f6:	4630      	mov	r0, r6
 80034f8:	f7ff fa40 	bl	800297c <print_integer>
 80034fc:	4604      	mov	r4, r0
    if (flags & FLAGS_LEFT) {
 80034fe:	2f00      	cmp	r7, #0
 8003500:	f43f ada2 	beq.w	8003048 <print_exponential_number+0xd8>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003504:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003506:	1ac5      	subs	r5, r0, r3
 8003508:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800350a:	42ab      	cmp	r3, r5
 800350c:	f67f ad9c 	bls.w	8003048 <print_exponential_number+0xd8>
 8003510:	461f      	mov	r7, r3
 8003512:	4622      	mov	r2, r4
 8003514:	4643      	mov	r3, r8
 8003516:	4649      	mov	r1, r9
 8003518:	2020      	movs	r0, #32
 800351a:	3501      	adds	r5, #1
 800351c:	47b0      	blx	r6
 800351e:	42af      	cmp	r7, r5
 8003520:	f104 0401 	add.w	r4, r4, #1
 8003524:	d8f5      	bhi.n	8003512 <print_exponential_number+0x5a2>
}
 8003526:	4620      	mov	r0, r4
 8003528:	b017      	add	sp, #92	; 0x5c
 800352a:	ecbd 8b04 	vpop	{d8-d9}
 800352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  unsigned int exp10_part_width = fall_back_to_decimal_only_mode ? 0U : (PRINTF_ABS(exp10) < 100) ? 4U : 5U;
 8003532:	2705      	movs	r7, #5
        width - exp10_part_width :
 8003534:	9b27      	ldr	r3, [sp, #156]	; 0x9c
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003536:	4620      	mov	r0, r4
        width - exp10_part_width :
 8003538:	429f      	cmp	r7, r3
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 800353a:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800353c:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800353e:	9309      	str	r3, [sp, #36]	; 0x24
 8003540:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8003542:	9407      	str	r4, [sp, #28]
 8003544:	9308      	str	r3, [sp, #32]
 8003546:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003548:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800354a:	e9cd 9402 	strd	r9, r4, [sp, #8]
 800354e:	9305      	str	r3, [sp, #20]
 8003550:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003554:	4632      	mov	r2, r6
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	4629      	mov	r1, r5
 800355a:	4653      	mov	r3, sl
 800355c:	f8cd 8010 	str.w	r8, [sp, #16]
 8003560:	9401      	str	r4, [sp, #4]
        width - exp10_part_width :
 8003562:	d230      	bcs.n	80035c6 <print_exponential_number+0x656>
 8003564:	9c27      	ldr	r4, [sp, #156]	; 0x9c
 8003566:	1be4      	subs	r4, r4, r7
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003568:	9406      	str	r4, [sp, #24]
 800356a:	f7ff fbe1 	bl	8002d30 <print_broken_up_decimal.isra.0>
    idx = print_integer(out, buffer, idx, maxlen,
 800356e:	1e7b      	subs	r3, r7, #1
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 8003570:	4602      	mov	r2, r0
    idx = print_integer(out, buffer, idx, maxlen,
 8003572:	2700      	movs	r7, #0
 8003574:	930e      	str	r3, [sp, #56]	; 0x38
 8003576:	e79c      	b.n	80034b2 <print_exponential_number+0x542>
      0U :
 8003578:	2303      	movs	r3, #3
 800357a:	930e      	str	r3, [sp, #56]	; 0x38
 800357c:	e77f      	b.n	800347e <print_exponential_number+0x50e>
    exp10 = 0; // ... and no need to set a normalization factor or check the powers table
 800357e:	f04f 0b00 	mov.w	fp, #0
        (int) precision - 1 - exp10 :
 8003582:	9b26      	ldr	r3, [sp, #152]	; 0x98
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 8003584:	f1bb 0f00 	cmp.w	fp, #0
        (int) precision - 1 - exp10 :
 8003588:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 800358c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8003590:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 8003592:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8003594:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003598:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 800359a:	f6ff ae2c 	blt.w	80031f6 <print_exponential_number+0x286>
  bool should_skip_normalization = (fall_back_to_decimal_only_mode || exp10 == 0);
 800359e:	f1bb 0f00 	cmp.w	fp, #0
 80035a2:	f47f ae2b 	bne.w	80031fc <print_exponential_number+0x28c>
 80035a6:	465f      	mov	r7, fp
 80035a8:	e507      	b.n	8002fba <print_exponential_number+0x4a>
      result.raw_factor = extra_multiplicative_factor / sf.raw_factor;
 80035aa:	ec53 2b18 	vmov	r2, r3, d8
 80035ae:	ec51 0b17 	vmov	r0, r1, d7
 80035b2:	f7fd f953 	bl	800085c <__aeabi_ddiv>
 80035b6:	e733      	b.n	8003420 <print_exponential_number+0x4b0>
                ABS_FOR_PRINTING(exp10),
 80035b8:	ea4f 73eb 	mov.w	r3, fp, asr #31
 80035bc:	f1db 0200 	rsbs	r2, fp, #0
 80035c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80035c4:	e786      	b.n	80034d4 <print_exponential_number+0x564>
    idx = print_integer(out, buffer, idx, maxlen,
 80035c6:	1e7c      	subs	r4, r7, #1
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 80035c8:	2700      	movs	r7, #0
 80035ca:	9706      	str	r7, [sp, #24]
    idx = print_integer(out, buffer, idx, maxlen,
 80035cc:	940e      	str	r4, [sp, #56]	; 0x38
  idx = print_broken_up_decimal(decimal_part_components, out, buffer, idx, maxlen, precision, decimal_part_width, flags, buf, len);
 80035ce:	f7ff fbaf 	bl	8002d30 <print_broken_up_decimal.isra.0>
 80035d2:	4602      	mov	r2, r0
  if (! fall_back_to_decimal_only_mode) {
 80035d4:	e76d      	b.n	80034b2 <print_exponential_number+0x542>
    fall_back_to_decimal_only_mode = (exp10 >= -4 && exp10 < required_significant_digits);
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	bf38      	it	cc
 80035da:	2301      	movcc	r3, #1
 80035dc:	459b      	cmp	fp, r3
 80035de:	dad0      	bge.n	8003582 <print_exponential_number+0x612>
        (int) precision - 1 - exp10 :
 80035e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80035e2:	3b01      	subs	r3, #1
 80035e4:	eba3 030b 	sub.w	r3, r3, fp
    precision = (precision_ > 0 ? (unsigned) precision_ : 0U);
 80035e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80035ec:	9326      	str	r3, [sp, #152]	; 0x98
    flags |= FLAGS_PRECISION;   // make sure print_broken_up_decimal respects our choice above
 80035ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80035f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035f4:	9328      	str	r3, [sp, #160]	; 0xa0
  normalization.multiply = (exp10 < 0 && abs_exp10_covered_by_powers_table);
 80035f6:	e6b3      	b.n	8003360 <print_exponential_number+0x3f0>
 80035f8:	0801bbb0 	.word	0x0801bbb0
 80035fc:	3fe00000 	.word	0x3fe00000

08003600 <print_floating_point>:
#endif  // PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS


static size_t print_floating_point(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int precision, unsigned int width, unsigned int flags, bool prefer_exponential)
{
 8003600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003604:	b09d      	sub	sp, #116	; 0x74
 8003606:	e9dd 5428 	ldrd	r5, r4, [sp, #160]	; 0xa0
 800360a:	940c      	str	r4, [sp, #48]	; 0x30
 800360c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 800360e:	e9dd 6726 	ldrd	r6, r7, [sp, #152]	; 0x98
 8003612:	940b      	str	r4, [sp, #44]	; 0x2c
 8003614:	f89d 40ac 	ldrb.w	r4, [sp, #172]	; 0xac
 8003618:	4680      	mov	r8, r0
 800361a:	4689      	mov	r9, r1
 800361c:	4692      	mov	sl, r2
 800361e:	469b      	mov	fp, r3
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;

  // test for special values
  if (value != value)
 8003620:	4632      	mov	r2, r6
 8003622:	463b      	mov	r3, r7
 8003624:	4630      	mov	r0, r6
 8003626:	4639      	mov	r1, r7
{
 8003628:	940d      	str	r4, [sp, #52]	; 0x34
  if (value != value)
 800362a:	f7fd fa55 	bl	8000ad8 <__aeabi_dcmpeq>
 800362e:	2800      	cmp	r0, #0
 8003630:	d07c      	beq.n	800372c <print_floating_point+0x12c>
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 8003632:	4630      	mov	r0, r6
 8003634:	4639      	mov	r1, r7
 8003636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800363a:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800363e:	f7fd fa55 	bl	8000aec <__aeabi_dcmplt>
 8003642:	2800      	cmp	r0, #0
 8003644:	f040 80a3 	bne.w	800378e <print_floating_point+0x18e>
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 8003648:	4630      	mov	r0, r6
 800364a:	4639      	mov	r1, r7
 800364c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003650:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <print_floating_point+0x1d0>)
 8003652:	f7fd fa69 	bl	8000b28 <__aeabi_dcmpgt>
 8003656:	bb38      	cbnz	r0, 80036a8 <print_floating_point+0xa8>
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  if (!prefer_exponential && ((value > PRINTF_FLOAT_NOTATION_THRESHOLD) || (value < -PRINTF_FLOAT_NOTATION_THRESHOLD))) {
 8003658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800365a:	2b00      	cmp	r3, #0
 800365c:	d13d      	bne.n	80036da <print_floating_point+0xda>
 800365e:	a358      	add	r3, pc, #352	; (adr r3, 80037c0 <print_floating_point+0x1c0>)
 8003660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003664:	4630      	mov	r0, r6
 8003666:	4639      	mov	r1, r7
 8003668:	f7fd fa5e 	bl	8000b28 <__aeabi_dcmpgt>
 800366c:	b940      	cbnz	r0, 8003680 <print_floating_point+0x80>
 800366e:	a356      	add	r3, pc, #344	; (adr r3, 80037c8 <print_floating_point+0x1c8>)
 8003670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003674:	4630      	mov	r0, r6
 8003676:	4639      	mov	r1, r7
 8003678:	f7fd fa38 	bl	8000aec <__aeabi_dcmplt>
 800367c:	2800      	cmp	r0, #0
 800367e:	d02c      	beq.n	80036da <print_floating_point+0xda>
    // The required behavior of standard printf is to print _every_ integral-part digit -- which could mean
    // printing hundreds of characters, overflowing any fixed internal buffer and necessitating a more complicated
    // implementation.
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    return print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
 8003680:	2400      	movs	r4, #0
 8003682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003684:	9502      	str	r5, [sp, #8]
 8003686:	9304      	str	r3, [sp, #16]
 8003688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800368a:	ad14      	add	r5, sp, #80	; 0x50
 800368c:	9303      	str	r3, [sp, #12]
 800368e:	4652      	mov	r2, sl
 8003690:	465b      	mov	r3, fp
 8003692:	4649      	mov	r1, r9
 8003694:	4640      	mov	r0, r8
 8003696:	e9cd 6700 	strd	r6, r7, [sp]
 800369a:	e9cd 5405 	strd	r5, r4, [sp, #20]
 800369e:	f7ff fc67 	bl	8002f70 <print_exponential_number>
#if PRINTF_SUPPORT_EXPONENTIAL_SPECIFIERS
    prefer_exponential ?
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
#endif
      print_decimal_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len);
}
 80036a2:	b01d      	add	sp, #116	; 0x74
 80036a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80036a8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80036aa:	4d4a      	ldr	r5, [pc, #296]	; (80037d4 <print_floating_point+0x1d4>)
 80036ac:	9429      	str	r4, [sp, #164]	; 0xa4
 80036ae:	f004 0404 	and.w	r4, r4, #4
 80036b2:	2c00      	cmp	r4, #0
 80036b4:	4c48      	ldr	r4, [pc, #288]	; (80037d8 <print_floating_point+0x1d8>)
 80036b6:	bf18      	it	ne
 80036b8:	462c      	movne	r4, r5
 80036ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80036bc:	9426      	str	r4, [sp, #152]	; 0x98
 80036be:	9328      	str	r3, [sp, #160]	; 0xa0
 80036c0:	bf0c      	ite	eq
 80036c2:	2403      	moveq	r4, #3
 80036c4:	2404      	movne	r4, #4
 80036c6:	465b      	mov	r3, fp
 80036c8:	4652      	mov	r2, sl
 80036ca:	4649      	mov	r1, r9
 80036cc:	4640      	mov	r0, r8
 80036ce:	9427      	str	r4, [sp, #156]	; 0x9c
}
 80036d0:	b01d      	add	sp, #116	; 0x74
 80036d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80036d6:	f7ff b90d 	b.w	80028f4 <out_rev_>
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 80036da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    buf[len++] = '0'; // This respects the precision in terms of result length only
 80036dc:	2030      	movs	r0, #48	; 0x30
    precision = PRINTF_DEFAULT_FLOAT_PRECISION;
 80036de:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80036e2:	bf08      	it	eq
 80036e4:	2506      	moveq	r5, #6
 80036e6:	ab14      	add	r3, sp, #80	; 0x50
 80036e8:	462c      	mov	r4, r5
 80036ea:	f1a5 0220 	sub.w	r2, r5, #32
 80036ee:	e004      	b.n	80036fa <print_floating_point+0xfa>
    precision--;
 80036f0:	3c01      	subs	r4, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 80036f2:	4294      	cmp	r4, r2
    buf[len++] = '0'; // This respects the precision in terms of result length only
 80036f4:	f803 0b01 	strb.w	r0, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (precision > PRINTF_MAX_SUPPORTED_PRECISION)) {
 80036f8:	d05a      	beq.n	80037b0 <print_floating_point+0x1b0>
 80036fa:	2c11      	cmp	r4, #17
 80036fc:	eba5 0104 	sub.w	r1, r5, r4
 8003700:	d8f6      	bhi.n	80036f0 <print_floating_point+0xf0>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 8003702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003704:	b31b      	cbz	r3, 800374e <print_floating_point+0x14e>
 8003706:	ab14      	add	r3, sp, #80	; 0x50
 8003708:	9305      	str	r3, [sp, #20]
 800370a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800370c:	9106      	str	r1, [sp, #24]
 800370e:	9304      	str	r3, [sp, #16]
 8003710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003712:	4652      	mov	r2, sl
 8003714:	9303      	str	r3, [sp, #12]
 8003716:	4649      	mov	r1, r9
 8003718:	465b      	mov	r3, fp
 800371a:	4640      	mov	r0, r8
 800371c:	e9cd 6700 	strd	r6, r7, [sp]
 8003720:	9402      	str	r4, [sp, #8]
 8003722:	f7ff fc25 	bl	8002f70 <print_exponential_number>
}
 8003726:	b01d      	add	sp, #116	; 0x74
 8003728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800372c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800372e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003730:	9329      	str	r3, [sp, #164]	; 0xa4
 8003732:	9428      	str	r4, [sp, #160]	; 0xa0
 8003734:	465b      	mov	r3, fp
 8003736:	2403      	movs	r4, #3
 8003738:	4652      	mov	r2, sl
 800373a:	4649      	mov	r1, r9
 800373c:	4640      	mov	r0, r8
 800373e:	4d27      	ldr	r5, [pc, #156]	; (80037dc <print_floating_point+0x1dc>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8003740:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8003742:	9526      	str	r5, [sp, #152]	; 0x98
}
 8003744:	b01d      	add	sp, #116	; 0x74
 8003746:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800374a:	f7ff b8d3 	b.w	80028f4 <out_rev_>
  struct double_components value_ = get_components(number, precision);
 800374e:	4632      	mov	r2, r6
 8003750:	463b      	mov	r3, r7
 8003752:	a80e      	add	r0, sp, #56	; 0x38
 8003754:	9400      	str	r4, [sp, #0]
 8003756:	910d      	str	r1, [sp, #52]	; 0x34
 8003758:	f7ff fa52 	bl	8002c00 <get_components>
  return print_broken_up_decimal(value_, out, buffer, idx, maxlen, precision, width, flags, buf, len);
 800375c:	ab14      	add	r3, sp, #80	; 0x50
 800375e:	9308      	str	r3, [sp, #32]
 8003760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003762:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003764:	9307      	str	r3, [sp, #28]
 8003766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003768:	9109      	str	r1, [sp, #36]	; 0x24
 800376a:	e9cd 4305 	strd	r4, r3, [sp, #20]
 800376e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003772:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 8003776:	e9cd ab03 	strd	sl, fp, [sp, #12]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8003780:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003784:	f7ff fad4 	bl	8002d30 <print_broken_up_decimal.isra.0>
}
 8003788:	b01d      	add	sp, #116	; 0x74
 800378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800378e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003790:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003792:	9329      	str	r3, [sp, #164]	; 0xa4
 8003794:	9428      	str	r4, [sp, #160]	; 0xa0
 8003796:	465b      	mov	r3, fp
 8003798:	2404      	movs	r4, #4
 800379a:	4652      	mov	r2, sl
 800379c:	4649      	mov	r1, r9
 800379e:	4640      	mov	r0, r8
 80037a0:	4d0f      	ldr	r5, [pc, #60]	; (80037e0 <print_floating_point+0x1e0>)
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80037a2:	9427      	str	r4, [sp, #156]	; 0x9c
    return out_rev_(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80037a4:	9526      	str	r5, [sp, #152]	; 0x98
}
 80037a6:	b01d      	add	sp, #116	; 0x74
 80037a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return out_rev_(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 80037ac:	f7ff b8a2 	b.w	80028f4 <out_rev_>
      print_exponential_number(out, buffer, idx, maxlen, value, precision, width, flags, buf, len) :
 80037b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80037b2:	2120      	movs	r1, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ca      	beq.n	800374e <print_floating_point+0x14e>
 80037b8:	e7a5      	b.n	8003706 <print_floating_point+0x106>
 80037ba:	bf00      	nop
 80037bc:	f3af 8000 	nop.w
 80037c0:	00000000 	.word	0x00000000
 80037c4:	41cdcd65 	.word	0x41cdcd65
 80037c8:	00000000 	.word	0x00000000
 80037cc:	c1cdcd65 	.word	0xc1cdcd65
 80037d0:	7fefffff 	.word	0x7fefffff
 80037d4:	0801bb8c 	.word	0x0801bb8c
 80037d8:	0801bb88 	.word	0x0801bb88
 80037dc:	0801bb94 	.word	0x0801bb94
 80037e0:	0801bb98 	.word	0x0801bb98

080037e4 <rt_vsnprintf>:
#if (RTTHREAD_VERSION >= 40100) || (RTTHREAD_VERSION < 40000 && RTTHREAD_VERSION >= 30106)
int rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#else
rt_int32_t rt_vsnprintf(char *buf, rt_size_t size, const char *fmt, va_list args)
#endif
{
 80037e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e8:	460d      	mov	r5, r1
 80037ea:	461f      	mov	r7, r3
    out = out_discard;
 80037ec:	1e01      	subs	r1, r0, #0
 80037ee:	4b9b      	ldr	r3, [pc, #620]	; (8003a5c <rt_vsnprintf+0x278>)
 80037f0:	4e9b      	ldr	r6, [pc, #620]	; (8003a60 <rt_vsnprintf+0x27c>)
  while (*format)
 80037f2:	7810      	ldrb	r0, [r2, #0]
    out = out_discard;
 80037f4:	bf0c      	ite	eq
 80037f6:	469b      	moveq	fp, r3
 80037f8:	46b3      	movne	fp, r6
{
 80037fa:	462b      	mov	r3, r5
 80037fc:	b08f      	sub	sp, #60	; 0x3c
  while (*format)
 80037fe:	2800      	cmp	r0, #0
 8003800:	f000 827a 	beq.w	8003cf8 <rt_vsnprintf+0x514>
 8003804:	4614      	mov	r4, r2
 8003806:	2500      	movs	r5, #0
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 8003808:	46ba      	mov	sl, r7
 800380a:	4688      	mov	r8, r1
 800380c:	4699      	mov	r9, r3
 800380e:	e009      	b.n	8003824 <rt_vsnprintf+0x40>
      out(*format, buffer, idx++, maxlen);
 8003810:	462a      	mov	r2, r5
 8003812:	464b      	mov	r3, r9
 8003814:	4641      	mov	r1, r8
 8003816:	47d8      	blx	fp
 8003818:	3501      	adds	r5, #1
      format++;
 800381a:	3401      	adds	r4, #1
  while (*format)
 800381c:	7820      	ldrb	r0, [r4, #0]
 800381e:	2800      	cmp	r0, #0
 8003820:	f000 80aa 	beq.w	8003978 <rt_vsnprintf+0x194>
    if (*format != '%') {
 8003824:	2825      	cmp	r0, #37	; 0x25
 8003826:	d1f3      	bne.n	8003810 <rt_vsnprintf+0x2c>
    flags = 0U;
 8003828:	2100      	movs	r1, #0
      format++;
 800382a:	1c63      	adds	r3, r4, #1
 800382c:	461c      	mov	r4, r3
      switch (*format) {
 800382e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003832:	f1a0 0220 	sub.w	r2, r0, #32
 8003836:	2a10      	cmp	r2, #16
 8003838:	d80a      	bhi.n	8003850 <rt_vsnprintf+0x6c>
 800383a:	e8df f002 	tbb	[pc, r2]
 800383e:	099a      	.short	0x099a
 8003840:	09099709 	.word	0x09099709
 8003844:	09090909 	.word	0x09090909
 8003848:	91099409 	.word	0x91099409
 800384c:	0909      	.short	0x0909
 800384e:	8e          	.byte	0x8e
 800384f:	00          	.byte	0x00
    if (is_digit_(*format)) {
 8003850:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8003854:	2b09      	cmp	r3, #9
 8003856:	f240 80ab 	bls.w	80039b0 <rt_vsnprintf+0x1cc>
    else if (*format == '*') {
 800385a:	282a      	cmp	r0, #42	; 0x2a
 800385c:	f000 80b5 	beq.w	80039ca <rt_vsnprintf+0x1e6>
    width = 0U;
 8003860:	2600      	movs	r6, #0
    if (*format == '.') {
 8003862:	282e      	cmp	r0, #46	; 0x2e
 8003864:	f000 8095 	beq.w	8003992 <rt_vsnprintf+0x1ae>
    precision = 0U;
 8003868:	2700      	movs	r7, #0
    switch (*format) {
 800386a:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 800386e:	2b12      	cmp	r3, #18
 8003870:	d818      	bhi.n	80038a4 <rt_vsnprintf+0xc0>
 8003872:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003876:	00fc      	.short	0x00fc
 8003878:	00f70017 	.word	0x00f70017
 800387c:	01040017 	.word	0x01040017
 8003880:	00170017 	.word	0x00170017
 8003884:	00170017 	.word	0x00170017
 8003888:	00170017 	.word	0x00170017
 800388c:	00130017 	.word	0x00130017
 8003890:	00170017 	.word	0x00170017
 8003894:	00170017 	.word	0x00170017
 8003898:	00130017 	.word	0x00130017
    switch (*format) {
 800389c:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800389e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 80038a2:	3401      	adds	r4, #1
    switch (*format) {
 80038a4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 80038a8:	2b53      	cmp	r3, #83	; 0x53
 80038aa:	f200 8098 	bhi.w	80039de <rt_vsnprintf+0x1fa>
 80038ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 80038b2:	0185      	.short	0x0185
 80038b4:	00960096 	.word	0x00960096
 80038b8:	00960096 	.word	0x00960096
 80038bc:	00960096 	.word	0x00960096
 80038c0:	00960096 	.word	0x00960096
 80038c4:	00960096 	.word	0x00960096
 80038c8:	00960096 	.word	0x00960096
 80038cc:	00960096 	.word	0x00960096
 80038d0:	00960096 	.word	0x00960096
 80038d4:	00960096 	.word	0x00960096
 80038d8:	00960096 	.word	0x00960096
 80038dc:	00960096 	.word	0x00960096
 80038e0:	00960096 	.word	0x00960096
 80038e4:	00960096 	.word	0x00960096
 80038e8:	00960096 	.word	0x00960096
 80038ec:	00960096 	.word	0x00960096
 80038f0:	019c0096 	.word	0x019c0096
 80038f4:	019c00ee 	.word	0x019c00ee
 80038f8:	00960096 	.word	0x00960096
 80038fc:	00960096 	.word	0x00960096
 8003900:	00960096 	.word	0x00960096
 8003904:	00960096 	.word	0x00960096
 8003908:	00960096 	.word	0x00960096
 800390c:	00960096 	.word	0x00960096
 8003910:	00960096 	.word	0x00960096
 8003914:	00960096 	.word	0x00960096
 8003918:	0096009d 	.word	0x0096009d
 800391c:	00960096 	.word	0x00960096
 8003920:	00960096 	.word	0x00960096
 8003924:	00960096 	.word	0x00960096
 8003928:	00960096 	.word	0x00960096
 800392c:	0124009d 	.word	0x0124009d
 8003930:	019c009d 	.word	0x019c009d
 8003934:	019c00ee 	.word	0x019c00ee
 8003938:	009d0096 	.word	0x009d0096
 800393c:	00960096 	.word	0x00960096
 8003940:	00960096 	.word	0x00960096
 8003944:	009d0096 	.word	0x009d0096
 8003948:	00960108 	.word	0x00960108
 800394c:	013d0096 	.word	0x013d0096
 8003950:	009d0096 	.word	0x009d0096
 8003954:	00960096 	.word	0x00960096
 8003958:	009d      	.short	0x009d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800395a:	f041 0101 	orr.w	r1, r1, #1
    } while (n);
 800395e:	e765      	b.n	800382c <rt_vsnprintf+0x48>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8003960:	f041 0102 	orr.w	r1, r1, #2
    } while (n);
 8003964:	e762      	b.n	800382c <rt_vsnprintf+0x48>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003966:	f041 0104 	orr.w	r1, r1, #4
    } while (n);
 800396a:	e75f      	b.n	800382c <rt_vsnprintf+0x48>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800396c:	f041 0110 	orr.w	r1, r1, #16
    } while (n);
 8003970:	e75c      	b.n	800382c <rt_vsnprintf+0x48>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003972:	f041 0108 	orr.w	r1, r1, #8
    } while (n);
 8003976:	e759      	b.n	800382c <rt_vsnprintf+0x48>
  return (int)idx;
 8003978:	4641      	mov	r1, r8
 800397a:	464b      	mov	r3, r9
 800397c:	462c      	mov	r4, r5
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800397e:	42ab      	cmp	r3, r5
 8003980:	d800      	bhi.n	8003984 <rt_vsnprintf+0x1a0>
 8003982:	1e5d      	subs	r5, r3, #1
 8003984:	462a      	mov	r2, r5
 8003986:	2000      	movs	r0, #0
 8003988:	47d8      	blx	fp
  return __vsnprintf(out_buffer, buf, size, fmt, args);
}
 800398a:	4620      	mov	r0, r4
 800398c:	b00f      	add	sp, #60	; 0x3c
 800398e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (is_digit_(*format)) {
 8003992:	7860      	ldrb	r0, [r4, #1]
      flags |= FLAGS_PRECISION;
 8003994:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      if (is_digit_(*format)) {
 8003998:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 800399c:	2a09      	cmp	r2, #9
      format++;
 800399e:	f104 0301 	add.w	r3, r4, #1
      if (is_digit_(*format)) {
 80039a2:	f240 8114 	bls.w	8003bce <rt_vsnprintf+0x3ea>
      else if (*format == '*') {
 80039a6:	282a      	cmp	r0, #42	; 0x2a
 80039a8:	f000 8136 	beq.w	8003c18 <rt_vsnprintf+0x434>
      format++;
 80039ac:	461c      	mov	r4, r3
 80039ae:	e75b      	b.n	8003868 <rt_vsnprintf+0x84>
  unsigned int i = 0U;
 80039b0:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80039b2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80039b6:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  while (is_digit_(**str)) {
 80039ba:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80039be:	3e30      	subs	r6, #48	; 0x30
  while (is_digit_(**str)) {
 80039c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d9f4      	bls.n	80039b2 <rt_vsnprintf+0x1ce>
 80039c8:	e74b      	b.n	8003862 <rt_vsnprintf+0x7e>
      const int w = va_arg(va, int);
 80039ca:	f85a 6b04 	ldr.w	r6, [sl], #4
    if (*format == '.') {
 80039ce:	7860      	ldrb	r0, [r4, #1]
      if (w < 0) {
 80039d0:	2e00      	cmp	r6, #0
        flags |= FLAGS_LEFT;    // reverse padding
 80039d2:	bfbc      	itt	lt
 80039d4:	f041 0102 	orrlt.w	r1, r1, #2
        width = (unsigned int)-w;
 80039d8:	4276      	neglt	r6, r6
      format++;
 80039da:	3401      	adds	r4, #1
 80039dc:	e741      	b.n	8003862 <rt_vsnprintf+0x7e>
        out(*format, buffer, idx++, maxlen);
 80039de:	462a      	mov	r2, r5
 80039e0:	464b      	mov	r3, r9
 80039e2:	4641      	mov	r1, r8
        format++;
 80039e4:	3401      	adds	r4, #1
        out(*format, buffer, idx++, maxlen);
 80039e6:	3501      	adds	r5, #1
 80039e8:	47d8      	blx	fp
        break;
 80039ea:	e717      	b.n	800381c <rt_vsnprintf+0x38>
        if (*format == 'x' || *format == 'X') {
 80039ec:	2878      	cmp	r0, #120	; 0x78
 80039ee:	f000 812b 	beq.w	8003c48 <rt_vsnprintf+0x464>
 80039f2:	2858      	cmp	r0, #88	; 0x58
 80039f4:	f000 8183 	beq.w	8003cfe <rt_vsnprintf+0x51a>
        else if (*format == 'o') {
 80039f8:	286f      	cmp	r0, #111	; 0x6f
 80039fa:	f000 81a4 	beq.w	8003d46 <rt_vsnprintf+0x562>
        else if (*format == 'b') {
 80039fe:	2862      	cmp	r0, #98	; 0x62
 8003a00:	f000 8202 	beq.w	8003e08 <rt_vsnprintf+0x624>
        if ((*format != 'i') && (*format != 'd')) {
 8003a04:	2869      	cmp	r0, #105	; 0x69
          base = BASE_DECIMAL;
 8003a06:	f04f 020a 	mov.w	r2, #10
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003a0a:	f021 0310 	bic.w	r3, r1, #16
        if ((*format != 'i') && (*format != 'd')) {
 8003a0e:	f040 819c 	bne.w	8003d4a <rt_vsnprintf+0x566>
        if (flags & FLAGS_PRECISION) {
 8003a12:	0549      	lsls	r1, r1, #21
 8003a14:	f100 811d 	bmi.w	8003c52 <rt_vsnprintf+0x46e>
          if (flags & FLAGS_LONG_LONG) {
 8003a18:	0599      	lsls	r1, r3, #22
 8003a1a:	f100 819f 	bmi.w	8003d5c <rt_vsnprintf+0x578>
          else if (flags & FLAGS_LONG) {
 8003a1e:	05d8      	lsls	r0, r3, #23
            const long value = va_arg(va, long);
 8003a20:	f85a 1b04 	ldr.w	r1, [sl], #4
          else if (flags & FLAGS_LONG) {
 8003a24:	d403      	bmi.n	8003a2e <rt_vsnprintf+0x24a>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003a26:	0658      	lsls	r0, r3, #25
 8003a28:	f140 81b0 	bpl.w	8003d8c <rt_vsnprintf+0x5a8>
 8003a2c:	b249      	sxtb	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003a2e:	2900      	cmp	r1, #0
 8003a30:	f340 81ce 	ble.w	8003dd0 <rt_vsnprintf+0x5ec>
 8003a34:	468c      	mov	ip, r1
 8003a36:	17c8      	asrs	r0, r1, #31
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003a38:	e9cd 2703 	strd	r2, r7, [sp, #12]
 8003a3c:	462a      	mov	r2, r5
 8003a3e:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8003a42:	e9cd c000 	strd	ip, r0, [sp]
 8003a46:	0fc9      	lsrs	r1, r1, #31
 8003a48:	9102      	str	r1, [sp, #8]
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	4658      	mov	r0, fp
 8003a50:	f7fe ff94 	bl	800297c <print_integer>
 8003a54:	4605      	mov	r5, r0
        format++;
 8003a56:	3401      	adds	r4, #1
        break;
 8003a58:	e6e0      	b.n	800381c <rt_vsnprintf+0x38>
 8003a5a:	bf00      	nop
 8003a5c:	080028f1 	.word	0x080028f1
 8003a60:	080028e9 	.word	0x080028e9
    switch (*format) {
 8003a64:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003a66:	f441 7100 	orr.w	r1, r1, #512	; 0x200
        format++;
 8003a6a:	3401      	adds	r4, #1
        break;
 8003a6c:	e71a      	b.n	80038a4 <rt_vsnprintf+0xc0>
        if (*format == 'h') {
 8003a6e:	7860      	ldrb	r0, [r4, #1]
 8003a70:	2868      	cmp	r0, #104	; 0x68
 8003a72:	f000 8137 	beq.w	8003ce4 <rt_vsnprintf+0x500>
        flags |= FLAGS_SHORT;
 8003a76:	f041 0180 	orr.w	r1, r1, #128	; 0x80
        format++;
 8003a7a:	3401      	adds	r4, #1
 8003a7c:	e712      	b.n	80038a4 <rt_vsnprintf+0xc0>
        if (*format == 'l') {
 8003a7e:	7860      	ldrb	r0, [r4, #1]
 8003a80:	286c      	cmp	r0, #108	; 0x6c
 8003a82:	f000 8134 	beq.w	8003cee <rt_vsnprintf+0x50a>
        flags |= FLAGS_LONG;
 8003a86:	f441 7180 	orr.w	r1, r1, #256	; 0x100
        format++;
 8003a8a:	3401      	adds	r4, #1
 8003a8c:	e70a      	b.n	80038a4 <rt_vsnprintf+0xc0>
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8003a8e:	462a      	mov	r2, r5
 8003a90:	2300      	movs	r3, #0
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003a92:	2846      	cmp	r0, #70	; 0x46
 8003a94:	bf08      	it	eq
 8003a96:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_DECIMAL);
 8003a9a:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8003a9e:	f10a 0a07 	add.w	sl, sl, #7
 8003aa2:	9702      	str	r7, [sp, #8]
 8003aa4:	f02a 0a07 	bic.w	sl, sl, #7
        format++;
 8003aa8:	3401      	adds	r4, #1
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8003aaa:	9305      	str	r3, [sp, #20]
 8003aac:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 8003ab0:	464b      	mov	r3, r9
 8003ab2:	4641      	mov	r1, r8
 8003ab4:	4658      	mov	r0, fp
 8003ab6:	e9cd 6700 	strd	r6, r7, [sp]
 8003aba:	f7ff fda1 	bl	8003600 <print_floating_point>
 8003abe:	4605      	mov	r5, r0
        break;
 8003ac0:	e6ac      	b.n	800381c <rt_vsnprintf+0x38>
        uintptr_t value = (uintptr_t)va_arg(va, void*);
 8003ac2:	f85a 3b04 	ldr.w	r3, [sl], #4
        flags |= FLAGS_ZEROPAD | FLAGS_POINTER;
 8003ac6:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003aca:	f041 0101 	orr.w	r1, r1, #1
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80e6 	beq.w	8003ca0 <rt_vsnprintf+0x4bc>
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	9106      	str	r1, [sp, #24]
 8003ada:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003ade:	210a      	movs	r1, #10
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	462a      	mov	r2, r5
 8003ae4:	9105      	str	r1, [sp, #20]
 8003ae6:	9303      	str	r3, [sp, #12]
 8003ae8:	4641      	mov	r1, r8
 8003aea:	464b      	mov	r3, r9
 8003aec:	4658      	mov	r0, fp
 8003aee:	9704      	str	r7, [sp, #16]
 8003af0:	f7fe ff44 	bl	800297c <print_integer>
        format++;
 8003af4:	3401      	adds	r4, #1
          print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, BASE_HEX, precision, width, flags);
 8003af6:	4605      	mov	r5, r0
        break;
 8003af8:	e690      	b.n	800381c <rt_vsnprintf+0x38>
        if (!(flags & FLAGS_LEFT)) {
 8003afa:	078f      	lsls	r7, r1, #30
 8003afc:	f140 810d 	bpl.w	8003d1a <rt_vsnprintf+0x536>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003b00:	f85a 0b04 	ldr.w	r0, [sl], #4
 8003b04:	462a      	mov	r2, r5
 8003b06:	464b      	mov	r3, r9
 8003b08:	4641      	mov	r1, r8
 8003b0a:	b2c0      	uxtb	r0, r0
 8003b0c:	47d8      	blx	fp
 8003b0e:	1c6f      	adds	r7, r5, #1
          while (l++ < width) {
 8003b10:	2e01      	cmp	r6, #1
 8003b12:	bf98      	it	ls
 8003b14:	463d      	movls	r5, r7
 8003b16:	d99e      	bls.n	8003a56 <rt_vsnprintf+0x272>
 8003b18:	4435      	add	r5, r6
            out(' ', buffer, idx++, maxlen);
 8003b1a:	463a      	mov	r2, r7
 8003b1c:	464b      	mov	r3, r9
 8003b1e:	4641      	mov	r1, r8
 8003b20:	2020      	movs	r0, #32
 8003b22:	3701      	adds	r7, #1
 8003b24:	47d8      	blx	fp
          while (l++ < width) {
 8003b26:	42af      	cmp	r7, r5
 8003b28:	d1f7      	bne.n	8003b1a <rt_vsnprintf+0x336>
 8003b2a:	e794      	b.n	8003a56 <rt_vsnprintf+0x272>
        const char* p = va_arg(va, char*);
 8003b2c:	4653      	mov	r3, sl
 8003b2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b32:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
        if (p == NULL) {
 8003b36:	2a00      	cmp	r2, #0
 8003b38:	d075      	beq.n	8003c26 <rt_vsnprintf+0x442>
  for (s = str; *s && maxsize--; ++s);
 8003b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3c:	7818      	ldrb	r0, [r3, #0]
          unsigned int l = strnlen_s_(p, precision ? precision : (size_t)-1);
 8003b3e:	2f00      	cmp	r7, #0
 8003b40:	f040 80e6 	bne.w	8003d10 <rt_vsnprintf+0x52c>
  for (s = str; *s && maxsize--; ++s);
 8003b44:	f06f 0301 	mvn.w	r3, #1
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	f000 8174 	beq.w	8003e36 <rt_vsnprintf+0x652>
 8003b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003b50:	3301      	adds	r3, #1
 8003b52:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003b56:	441a      	add	r2, r3
 8003b58:	e001      	b.n	8003b5e <rt_vsnprintf+0x37a>
 8003b5a:	4592      	cmp	sl, r2
 8003b5c:	d003      	beq.n	8003b66 <rt_vsnprintf+0x382>
 8003b5e:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f9      	bne.n	8003b5a <rt_vsnprintf+0x376>
  return (unsigned int)(s - str);
 8003b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b68:	ebaa 0303 	sub.w	r3, sl, r3
 8003b6c:	930b      	str	r3, [sp, #44]	; 0x2c
          if (flags & FLAGS_PRECISION) {
 8003b6e:	f411 6380 	ands.w	r3, r1, #1024	; 0x400
 8003b72:	930c      	str	r3, [sp, #48]	; 0x30
 8003b74:	d004      	beq.n	8003b80 <rt_vsnprintf+0x39c>
            l = (l < precision ? l : precision);
 8003b76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b78:	42bb      	cmp	r3, r7
 8003b7a:	bf28      	it	cs
 8003b7c:	463b      	movcs	r3, r7
 8003b7e:	930b      	str	r3, [sp, #44]	; 0x2c
          if (!(flags & FLAGS_LEFT)) {
 8003b80:	f011 0302 	ands.w	r3, r1, #2
 8003b84:	930d      	str	r3, [sp, #52]	; 0x34
 8003b86:	f000 810a 	beq.w	8003d9e <rt_vsnprintf+0x5ba>
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003b8a:	2800      	cmp	r0, #0
 8003b8c:	f000 809b 	beq.w	8003cc6 <rt_vsnprintf+0x4e2>
 8003b90:	462a      	mov	r2, r5
 8003b92:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003b96:	9409      	str	r4, [sp, #36]	; 0x24
 8003b98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003b9a:	b124      	cbz	r4, 8003ba6 <rt_vsnprintf+0x3c2>
 8003b9c:	1e7b      	subs	r3, r7, #1
 8003b9e:	2f00      	cmp	r7, #0
 8003ba0:	f000 808d 	beq.w	8003cbe <rt_vsnprintf+0x4da>
 8003ba4:	461f      	mov	r7, r3
            out(*(p++), buffer, idx++, maxlen);
 8003ba6:	464b      	mov	r3, r9
 8003ba8:	4641      	mov	r1, r8
 8003baa:	47d8      	blx	fp
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003bac:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
            out(*(p++), buffer, idx++, maxlen);
 8003bb0:	3501      	adds	r5, #1
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003bb2:	2800      	cmp	r0, #0
 8003bb4:	f000 8083 	beq.w	8003cbe <rt_vsnprintf+0x4da>
            out(*(p++), buffer, idx++, maxlen);
 8003bb8:	462a      	mov	r2, r5
 8003bba:	e7ee      	b.n	8003b9a <rt_vsnprintf+0x3b6>
        out('%', buffer, idx++, maxlen);
 8003bbc:	1c68      	adds	r0, r5, #1
 8003bbe:	462a      	mov	r2, r5
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	2025      	movs	r0, #37	; 0x25
        format++;
 8003bc8:	3401      	adds	r4, #1
        out('%', buffer, idx++, maxlen);
 8003bca:	47d8      	blx	fp
        break;
 8003bcc:	e626      	b.n	800381c <rt_vsnprintf+0x38>
  unsigned int i = 0U;
 8003bce:	2700      	movs	r7, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003bd0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8003bd4:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  while (is_digit_(**str)) {
 8003bd8:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8003bdc:	3f30      	subs	r7, #48	; 0x30
  while (is_digit_(**str)) {
 8003bde:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8003be2:	2a09      	cmp	r2, #9
 8003be4:	d9f4      	bls.n	8003bd0 <rt_vsnprintf+0x3ec>
 8003be6:	461c      	mov	r4, r3
 8003be8:	e63f      	b.n	800386a <rt_vsnprintf+0x86>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003bea:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8003bee:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003bf0:	bf04      	itt	eq
 8003bf2:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003bf6:	f441 6100 	orreq.w	r1, r1, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003bfa:	2845      	cmp	r0, #69	; 0x45
 8003bfc:	bf08      	it	eq
 8003bfe:	f041 0120 	orreq.w	r1, r1, #32
        idx = print_floating_point(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags, PRINTF_PREFER_EXPONENTIAL);
 8003c02:	f10a 0a07 	add.w	sl, sl, #7
 8003c06:	462a      	mov	r2, r5
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e9cd 6103 	strd	r6, r1, [sp, #12]
 8003c0e:	9702      	str	r7, [sp, #8]
 8003c10:	f02a 0a07 	bic.w	sl, sl, #7
        format++;
 8003c14:	3401      	adds	r4, #1
 8003c16:	e748      	b.n	8003aaa <rt_vsnprintf+0x2c6>
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 8003c18:	f85a 7b04 	ldr.w	r7, [sl], #4
    switch (*format) {
 8003c1c:	78a0      	ldrb	r0, [r4, #2]
        precision = precision_ > 0 ? (unsigned int)precision_ : 0U;
 8003c1e:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
        format++;
 8003c22:	3402      	adds	r4, #2
 8003c24:	e621      	b.n	800386a <rt_vsnprintf+0x86>
          idx = out_rev_(out, buffer, idx, maxlen, ")llun(", 6, width, flags);
 8003c26:	4b88      	ldr	r3, [pc, #544]	; (8003e48 <rt_vsnprintf+0x664>)
 8003c28:	462a      	mov	r2, r5
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2306      	movs	r3, #6
 8003c2e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	4641      	mov	r1, r8
 8003c36:	464b      	mov	r3, r9
 8003c38:	4658      	mov	r0, fp
 8003c3a:	f7fe fe5b 	bl	80028f4 <out_rev_>
 8003c3e:	4605      	mov	r5, r0
        const char* p = va_arg(va, char*);
 8003c40:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
        format++;
 8003c44:	3401      	adds	r4, #1
        break;
 8003c46:	e5e9      	b.n	800381c <rt_vsnprintf+0x38>
          base = BASE_HEX;
 8003c48:	2210      	movs	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003c4a:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 8003c4e:	0549      	lsls	r1, r1, #21
 8003c50:	d501      	bpl.n	8003c56 <rt_vsnprintf+0x472>
          flags &= ~FLAGS_ZEROPAD;
 8003c52:	f023 0301 	bic.w	r3, r3, #1
        if ((*format == 'i') || (*format == 'd')) {
 8003c56:	2869      	cmp	r0, #105	; 0x69
 8003c58:	f43f aede 	beq.w	8003a18 <rt_vsnprintf+0x234>
 8003c5c:	2864      	cmp	r0, #100	; 0x64
 8003c5e:	f43f aedb 	beq.w	8003a18 <rt_vsnprintf+0x234>
          if (flags & FLAGS_LONG_LONG) {
 8003c62:	f413 7c00 	ands.w	ip, r3, #512	; 0x200
 8003c66:	f040 80b9 	bne.w	8003ddc <rt_vsnprintf+0x5f8>
          else if (flags & FLAGS_LONG) {
 8003c6a:	05d9      	lsls	r1, r3, #23
 8003c6c:	f100 80cf 	bmi.w	8003e0e <rt_vsnprintf+0x62a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003c70:	0658      	lsls	r0, r3, #25
 8003c72:	f85a 1b04 	ldr.w	r1, [sl], #4
 8003c76:	f100 8087 	bmi.w	8003d88 <rt_vsnprintf+0x5a4>
 8003c7a:	0618      	lsls	r0, r3, #24
 8003c7c:	bf48      	it	mi
 8003c7e:	b289      	uxthmi	r1, r1
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) value, false, base, precision, width, flags);
 8003c80:	e9cd 2703 	strd	r2, r7, [sp, #12]
 8003c84:	462a      	mov	r2, r5
 8003c86:	2500      	movs	r5, #0
 8003c88:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8003c8c:	e9cd 5501 	strd	r5, r5, [sp, #4]
 8003c90:	9100      	str	r1, [sp, #0]
 8003c92:	464b      	mov	r3, r9
 8003c94:	4641      	mov	r1, r8
 8003c96:	4658      	mov	r0, fp
 8003c98:	f7fe fe70 	bl	800297c <print_integer>
 8003c9c:	4605      	mov	r5, r0
        format++;
 8003c9e:	e6da      	b.n	8003a56 <rt_vsnprintf+0x272>
          out_rev_(out, buffer, idx, maxlen, ")lin(", 5, width, flags) :
 8003ca0:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <rt_vsnprintf+0x668>)
 8003ca2:	200a      	movs	r0, #10
 8003ca4:	9300      	str	r3, [sp, #0]
 8003ca6:	2305      	movs	r3, #5
 8003ca8:	462a      	mov	r2, r5
 8003caa:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8003cae:	9103      	str	r1, [sp, #12]
 8003cb0:	464b      	mov	r3, r9
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	4658      	mov	r0, fp
 8003cb6:	f7fe fe1d 	bl	80028f4 <out_rev_>
 8003cba:	4605      	mov	r5, r0
 8003cbc:	e6cb      	b.n	8003a56 <rt_vsnprintf+0x272>
          if (flags & FLAGS_LEFT) {
 8003cbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cc0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0bc      	beq.n	8003c40 <rt_vsnprintf+0x45c>
            while (l++ < width) {
 8003cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cc8:	462f      	mov	r7, r5
 8003cca:	429e      	cmp	r6, r3
 8003ccc:	d9b8      	bls.n	8003c40 <rt_vsnprintf+0x45c>
 8003cce:	1970      	adds	r0, r6, r5
 8003cd0:	1ac5      	subs	r5, r0, r3
              out(' ', buffer, idx++, maxlen);
 8003cd2:	463a      	mov	r2, r7
 8003cd4:	464b      	mov	r3, r9
 8003cd6:	4641      	mov	r1, r8
 8003cd8:	2020      	movs	r0, #32
 8003cda:	3701      	adds	r7, #1
 8003cdc:	47d8      	blx	fp
            while (l++ < width) {
 8003cde:	42af      	cmp	r7, r5
 8003ce0:	d1f7      	bne.n	8003cd2 <rt_vsnprintf+0x4ee>
 8003ce2:	e7ad      	b.n	8003c40 <rt_vsnprintf+0x45c>
    switch (*format) {
 8003ce4:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_CHAR;
 8003ce6:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
          format++;
 8003cea:	3402      	adds	r4, #2
 8003cec:	e5da      	b.n	80038a4 <rt_vsnprintf+0xc0>
    switch (*format) {
 8003cee:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_LONG_LONG;
 8003cf0:	f441 7140 	orr.w	r1, r1, #768	; 0x300
          format++;
 8003cf4:	3402      	adds	r4, #2
 8003cf6:	e5d5      	b.n	80038a4 <rt_vsnprintf+0xc0>
  while (*format)
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	e63f      	b.n	800397e <rt_vsnprintf+0x19a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003cfe:	f021 030c 	bic.w	r3, r1, #12
        if (flags & FLAGS_PRECISION) {
 8003d02:	0549      	lsls	r1, r1, #21
          base = BASE_HEX;
 8003d04:	f04f 0210 	mov.w	r2, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003d08:	f043 0320 	orr.w	r3, r3, #32
        if (flags & FLAGS_PRECISION) {
 8003d0c:	d4a1      	bmi.n	8003c52 <rt_vsnprintf+0x46e>
 8003d0e:	e7a8      	b.n	8003c62 <rt_vsnprintf+0x47e>
  for (s = str; *s && maxsize--; ++s);
 8003d10:	2800      	cmp	r0, #0
 8003d12:	f000 8097 	beq.w	8003e44 <rt_vsnprintf+0x660>
 8003d16:	1e7b      	subs	r3, r7, #1
 8003d18:	e719      	b.n	8003b4e <rt_vsnprintf+0x36a>
          while (l++ < width) {
 8003d1a:	2e01      	cmp	r6, #1
 8003d1c:	f240 8089 	bls.w	8003e32 <rt_vsnprintf+0x64e>
 8003d20:	1e6b      	subs	r3, r5, #1
 8003d22:	441e      	add	r6, r3
            out(' ', buffer, idx++, maxlen);
 8003d24:	462a      	mov	r2, r5
 8003d26:	464b      	mov	r3, r9
 8003d28:	4641      	mov	r1, r8
 8003d2a:	2020      	movs	r0, #32
 8003d2c:	3501      	adds	r5, #1
 8003d2e:	47d8      	blx	fp
          while (l++ < width) {
 8003d30:	42b5      	cmp	r5, r6
 8003d32:	d1f7      	bne.n	8003d24 <rt_vsnprintf+0x540>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003d34:	f85a 0b04 	ldr.w	r0, [sl], #4
 8003d38:	464b      	mov	r3, r9
 8003d3a:	4632      	mov	r2, r6
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	b2c0      	uxtb	r0, r0
 8003d40:	1c75      	adds	r5, r6, #1
 8003d42:	47d8      	blx	fp
        if (flags & FLAGS_LEFT) {
 8003d44:	e687      	b.n	8003a56 <rt_vsnprintf+0x272>
          base =  BASE_OCTAL;
 8003d46:	2208      	movs	r2, #8
          format++;
 8003d48:	460b      	mov	r3, r1
        if ((*format != 'i') && (*format != 'd')) {
 8003d4a:	2864      	cmp	r0, #100	; 0x64
 8003d4c:	bf18      	it	ne
 8003d4e:	4619      	movne	r1, r3
 8003d50:	f47f af7b 	bne.w	8003c4a <rt_vsnprintf+0x466>
        if (flags & FLAGS_PRECISION) {
 8003d54:	0559      	lsls	r1, r3, #21
 8003d56:	f53f af7c 	bmi.w	8003c52 <rt_vsnprintf+0x46e>
 8003d5a:	e65d      	b.n	8003a18 <rt_vsnprintf+0x234>
            const long long value = va_arg(va, long long);
 8003d5c:	f10a 0a07 	add.w	sl, sl, #7
 8003d60:	f02a 0a07 	bic.w	sl, sl, #7
 8003d64:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003d68:	f85a 0b08 	ldr.w	r0, [sl], #8
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003d6c:	ea4f 7cd1 	mov.w	ip, r1, lsr #31
 8003d70:	2900      	cmp	r1, #0
 8003d72:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8003d76:	e9cd 2703 	strd	r2, r7, [sp, #12]
 8003d7a:	f8cd c008 	str.w	ip, [sp, #8]
 8003d7e:	db09      	blt.n	8003d94 <rt_vsnprintf+0x5b0>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003d80:	462a      	mov	r2, r5
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003d82:	e9cd 0100 	strd	r0, r1, [sp]
 8003d86:	e660      	b.n	8003a4a <rt_vsnprintf+0x266>
 8003d88:	b2c9      	uxtb	r1, r1
 8003d8a:	e779      	b.n	8003c80 <rt_vsnprintf+0x49c>
            const int value = (flags & FLAGS_CHAR) ? (signed char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003d8c:	0618      	lsls	r0, r3, #24
 8003d8e:	bf48      	it	mi
 8003d90:	b209      	sxthmi	r1, r1
 8003d92:	e64c      	b.n	8003a2e <rt_vsnprintf+0x24a>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003d94:	4243      	negs	r3, r0
 8003d96:	4618      	mov	r0, r3
 8003d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003d9c:	e7f0      	b.n	8003d80 <rt_vsnprintf+0x59c>
            while (l++ < width) {
 8003d9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003da0:	4296      	cmp	r6, r2
 8003da2:	f102 0301 	add.w	r3, r2, #1
 8003da6:	d948      	bls.n	8003e3a <rt_vsnprintf+0x656>
 8003da8:	eb06 0a05 	add.w	sl, r6, r5
 8003dac:	ebaa 0a02 	sub.w	sl, sl, r2
              out(' ', buffer, idx++, maxlen);
 8003db0:	462a      	mov	r2, r5
 8003db2:	464b      	mov	r3, r9
 8003db4:	4641      	mov	r1, r8
 8003db6:	2020      	movs	r0, #32
 8003db8:	3501      	adds	r5, #1
 8003dba:	47d8      	blx	fp
            while (l++ < width) {
 8003dbc:	4555      	cmp	r5, sl
 8003dbe:	d1f7      	bne.n	8003db0 <rt_vsnprintf+0x5cc>
 8003dc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dc2:	7818      	ldrb	r0, [r3, #0]
 8003dc4:	1c73      	adds	r3, r6, #1
 8003dc6:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	f47f aee1 	bne.w	8003b90 <rt_vsnprintf+0x3ac>
 8003dce:	e737      	b.n	8003c40 <rt_vsnprintf+0x45c>
            idx = print_integer(out, buffer, idx, maxlen, ABS_FOR_PRINTING(value), value < 0, base, precision, width, flags);
 8003dd0:	17c8      	asrs	r0, r1, #31
 8003dd2:	f1d1 0c00 	rsbs	ip, r1, #0
 8003dd6:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8003dda:	e62d      	b.n	8003a38 <rt_vsnprintf+0x254>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003ddc:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8003de0:	2300      	movs	r3, #0
 8003de2:	e9cd 2703 	strd	r2, r7, [sp, #12]
 8003de6:	f10a 0a07 	add.w	sl, sl, #7
 8003dea:	9302      	str	r3, [sp, #8]
 8003dec:	f02a 0a07 	bic.w	sl, sl, #7
 8003df0:	462a      	mov	r2, r5
 8003df2:	e8fa 6702 	ldrd	r6, r7, [sl], #8
 8003df6:	464b      	mov	r3, r9
 8003df8:	4641      	mov	r1, r8
 8003dfa:	4658      	mov	r0, fp
 8003dfc:	e9cd 6700 	strd	r6, r7, [sp]
 8003e00:	f7fe fdbc 	bl	800297c <print_integer>
 8003e04:	4605      	mov	r5, r0
 8003e06:	e626      	b.n	8003a56 <rt_vsnprintf+0x272>
          base =  BASE_BINARY;
 8003e08:	2202      	movs	r2, #2
          format++;
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	e79d      	b.n	8003d4a <rt_vsnprintf+0x566>
            idx = print_integer(out, buffer, idx, maxlen, (printf_unsigned_value_t) va_arg(va, unsigned long), false, base, precision, width, flags);
 8003e0e:	e9cd 6305 	strd	r6, r3, [sp, #20]
 8003e12:	e9cd 2703 	strd	r2, r7, [sp, #12]
 8003e16:	f8cd c008 	str.w	ip, [sp, #8]
 8003e1a:	462a      	mov	r2, r5
 8003e1c:	f85a 5b04 	ldr.w	r5, [sl], #4
 8003e20:	464b      	mov	r3, r9
 8003e22:	e9cd 5c00 	strd	r5, ip, [sp]
 8003e26:	4641      	mov	r1, r8
 8003e28:	4658      	mov	r0, fp
 8003e2a:	f7fe fda7 	bl	800297c <print_integer>
 8003e2e:	4605      	mov	r5, r0
 8003e30:	e611      	b.n	8003a56 <rt_vsnprintf+0x272>
          while (l++ < width) {
 8003e32:	462e      	mov	r6, r5
 8003e34:	e77e      	b.n	8003d34 <rt_vsnprintf+0x550>
  for (s = str; *s && maxsize--; ++s);
 8003e36:	970b      	str	r7, [sp, #44]	; 0x2c
 8003e38:	e699      	b.n	8003b6e <rt_vsnprintf+0x38a>
            while (l++ < width) {
 8003e3a:	930b      	str	r3, [sp, #44]	; 0x2c
          while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003e3c:	2800      	cmp	r0, #0
 8003e3e:	f47f aea7 	bne.w	8003b90 <rt_vsnprintf+0x3ac>
 8003e42:	e6fd      	b.n	8003c40 <rt_vsnprintf+0x45c>
  for (s = str; *s && maxsize--; ++s);
 8003e44:	900b      	str	r0, [sp, #44]	; 0x2c
 8003e46:	e692      	b.n	8003b6e <rt_vsnprintf+0x38a>
 8003e48:	0801bba0 	.word	0x0801bba0
 8003e4c:	0801bba8 	.word	0x0801bba8

08003e50 <LCD_WritePara.isra.0>:
    LCD_SetCmdLine();
    return SPI_WriteDatas(&cmd, 1);
}

/* 给SPI LCD发送1个参数,通常是先调用LCD_WriteCmd,再调用LCD_WritePara */
static int LCD_WritePara(uint8_t data)
 8003e50:	4603      	mov	r3, r0
 8003e52:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8003e54:	4c0f      	ldr	r4, [pc, #60]	; (8003e94 <LCD_WritePara.isra.0+0x44>)
static int LCD_WritePara(uint8_t data)
 8003e56:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8003e58:	4620      	mov	r0, r4
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WritePara(uint8_t data)
 8003e60:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8003e64:	f000 ffaa 	bl	8004dbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8003e68:	4620      	mov	r0, r4
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e70:	f000 ffa4 	bl	8004dbc <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8003e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e78:	f10d 0107 	add.w	r1, sp, #7
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	4806      	ldr	r0, [pc, #24]	; (8003e98 <LCD_WritePara.isra.0+0x48>)
 8003e80:	f005 fd14 	bl	80098ac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8003e84:	2201      	movs	r2, #1
 8003e86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 ff96 	bl	8004dbc <HAL_GPIO_WritePin>
{
    LCD_SetDataLine();
    return SPI_WriteDatas(&data, 1);
}
 8003e90:	b002      	add	sp, #8
 8003e92:	bd10      	pop	{r4, pc}
 8003e94:	42020c00 	.word	0x42020c00
 8003e98:	20000870 	.word	0x20000870

08003e9c <LCD_WriteCmd.isra.0>:
static int LCD_WriteCmd(uint8_t cmd)
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8003ea0:	4c0f      	ldr	r4, [pc, #60]	; (8003ee0 <LCD_WriteCmd.isra.0+0x44>)
static int LCD_WriteCmd(uint8_t cmd)
 8003ea2:	b082      	sub	sp, #8
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
static int LCD_WriteCmd(uint8_t cmd)
 8003eac:	f88d 3007 	strb.w	r3, [sp, #7]
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_RESET);
 8003eb0:	f000 ff84 	bl	8004dbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ebc:	f000 ff7e 	bl	8004dbc <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8003ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ec4:	f10d 0107 	add.w	r1, sp, #7
 8003ec8:	2201      	movs	r2, #1
 8003eca:	4806      	ldr	r0, [pc, #24]	; (8003ee4 <LCD_WriteCmd.isra.0+0x48>)
 8003ecc:	f005 fcee 	bl	80098ac <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	f000 ff70 	bl	8004dbc <HAL_GPIO_WritePin>
}
 8003edc:	b002      	add	sp, #8
 8003ede:	bd10      	pop	{r4, pc}
 8003ee0:	42020c00 	.word	0x42020c00
 8003ee4:	20000870 	.word	0x20000870

08003ee8 <LCD_SetDataLine>:
    HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003eee:	4801      	ldr	r0, [pc, #4]	; (8003ef4 <LCD_SetDataLine+0xc>)
 8003ef0:	f000 bf64 	b.w	8004dbc <HAL_GPIO_WritePin>
 8003ef4:	42020c00 	.word	0x42020c00

08003ef8 <LCD_WriteDatas>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
int LCD_WriteDatas(uint8_t *datas, uint32_t count)
{
 8003ef8:	b570      	push	{r4, r5, r6, lr}
 8003efa:	4605      	mov	r5, r0
 8003efc:	460c      	mov	r4, r1
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_RESET);
 8003efe:	4e0b      	ldr	r6, [pc, #44]	; (8003f2c <LCD_WriteDatas+0x34>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	4630      	mov	r0, r6
 8003f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f08:	f000 ff58 	bl	8004dbc <HAL_GPIO_WritePin>
    err = HAL_SPI_Transmit(&hspi2,TxData,size,1000);
 8003f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f10:	4629      	mov	r1, r5
 8003f12:	b2a2      	uxth	r2, r4
 8003f14:	4806      	ldr	r0, [pc, #24]	; (8003f30 <LCD_WriteDatas+0x38>)
 8003f16:	f005 fcc9 	bl	80098ac <HAL_SPI_Transmit>
 8003f1a:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port,SPI_CS_Pin,GPIO_PIN_SET);
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f24:	f000 ff4a 	bl	8004dbc <HAL_GPIO_WritePin>
    //HAL_GPIO_WritePin(GPIOD,RS_Pin,GPIO_PIN_SET);  /* 由调用者设置RS引脚 */
    return SPI_WriteDatas(datas, count);
}
 8003f28:	4260      	negs	r0, r4
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	42020c00 	.word	0x42020c00
 8003f30:	20000870 	.word	0x20000870

08003f34 <LCD_Init>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_Init(lcd_display_rotation_t rotation)
{       
 8003f34:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 8003f36:	2200      	movs	r2, #0
 8003f38:	2110      	movs	r1, #16
{       
 8003f3a:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_RESET);
 8003f3c:	4893      	ldr	r0, [pc, #588]	; (800418c <LCD_Init+0x258>)
 8003f3e:	f000 ff3d 	bl	8004dbc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003f42:	2064      	movs	r0, #100	; 0x64
 8003f44:	f000 fa5e 	bl	8004404 <HAL_Delay>
    HAL_GPIO_WritePin(RESET_GPIO_Port,RESET_Pin,GPIO_PIN_SET);
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2110      	movs	r1, #16
 8003f4c:	488f      	ldr	r0, [pc, #572]	; (800418c <LCD_Init+0x258>)
 8003f4e:	f000 ff35 	bl	8004dbc <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8003f52:	2064      	movs	r0, #100	; 0x64
 8003f54:	f000 fa56 	bl	8004404 <HAL_Delay>
        HAL_GPIO_WritePin(PWM_GPIO_Port,PWM_Pin,GPIO_PIN_SET);
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f5e:	488b      	ldr	r0, [pc, #556]	; (800418c <LCD_Init+0x258>)
 8003f60:	f000 ff2c 	bl	8004dbc <HAL_GPIO_WritePin>
    LCD_Reset();    
    LCD_BackLightControl(1);
    
#if 1   
    // Positive Gamma Control
    LCD_WriteCmd( 0xe0);
 8003f64:	20e0      	movs	r0, #224	; 0xe0
 8003f66:	f7ff ff99 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xf0);
 8003f6a:	20f0      	movs	r0, #240	; 0xf0
 8003f6c:	f7ff ff70 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3e);
 8003f70:	203e      	movs	r0, #62	; 0x3e
 8003f72:	f7ff ff6d 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x30);
 8003f76:	2030      	movs	r0, #48	; 0x30
 8003f78:	f7ff ff6a 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8003f7c:	2006      	movs	r0, #6
 8003f7e:	f7ff ff67 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0a);
 8003f82:	200a      	movs	r0, #10
 8003f84:	f7ff ff64 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x03);
 8003f88:	2003      	movs	r0, #3
 8003f8a:	f7ff ff61 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 8003f8e:	204d      	movs	r0, #77	; 0x4d
 8003f90:	f7ff ff5e 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x56);
 8003f94:	2056      	movs	r0, #86	; 0x56
 8003f96:	f7ff ff5b 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3a);
 8003f9a:	203a      	movs	r0, #58	; 0x3a
 8003f9c:	f7ff ff58 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8003fa0:	2006      	movs	r0, #6
 8003fa2:	f7ff ff55 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0f);
 8003fa6:	200f      	movs	r0, #15
 8003fa8:	f7ff ff52 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x04);
 8003fac:	2004      	movs	r0, #4
 8003fae:	f7ff ff4f 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 8003fb2:	2018      	movs	r0, #24
 8003fb4:	f7ff ff4c 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8003fb8:	2013      	movs	r0, #19
 8003fba:	f7ff ff49 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f7ff ff46 	bl	8003e50 <LCD_WritePara.isra.0>

    // Negative Gamma Control
    LCD_WriteCmd(0xe1);
 8003fc4:	20e1      	movs	r0, #225	; 0xe1
 8003fc6:	f7ff ff69 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x0f);
 8003fca:	200f      	movs	r0, #15
 8003fcc:	f7ff ff40 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x37);
 8003fd0:	2037      	movs	r0, #55	; 0x37
 8003fd2:	f7ff ff3d 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x31);
 8003fd6:	2031      	movs	r0, #49	; 0x31
 8003fd8:	f7ff ff3a 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0b);
 8003fdc:	200b      	movs	r0, #11
 8003fde:	f7ff ff37 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x0d);
 8003fe2:	200d      	movs	r0, #13
 8003fe4:	f7ff ff34 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8003fe8:	2006      	movs	r0, #6
 8003fea:	f7ff ff31 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x4d);
 8003fee:	204d      	movs	r0, #77	; 0x4d
 8003ff0:	f7ff ff2e 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x34);
 8003ff4:	2034      	movs	r0, #52	; 0x34
 8003ff6:	f7ff ff2b 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x38);
 8003ffa:	2038      	movs	r0, #56	; 0x38
 8003ffc:	f7ff ff28 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x06);
 8004000:	2006      	movs	r0, #6
 8004002:	f7ff ff25 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x11);
 8004006:	2011      	movs	r0, #17
 8004008:	f7ff ff22 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 800400c:	2001      	movs	r0, #1
 800400e:	f7ff ff1f 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x18);
 8004012:	2018      	movs	r0, #24
 8004014:	f7ff ff1c 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x13);
 8004018:	2013      	movs	r0, #19
 800401a:	f7ff ff19 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 800401e:	2000      	movs	r0, #0
 8004020:	f7ff ff16 	bl	8003e50 <LCD_WritePara.isra.0>
    
    // Power Control 1
    LCD_WriteCmd(0xc0);
 8004024:	20c0      	movs	r0, #192	; 0xc0
 8004026:	f7ff ff39 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x18);
 800402a:	2018      	movs	r0, #24
 800402c:	f7ff ff10 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x17);
 8004030:	2017      	movs	r0, #23
 8004032:	f7ff ff0d 	bl	8003e50 <LCD_WritePara.isra.0>

    // Power Control 2
    LCD_WriteCmd(0xc1);
 8004036:	20c1      	movs	r0, #193	; 0xc1
 8004038:	f7ff ff30 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x41);
 800403c:	2041      	movs	r0, #65	; 0x41
 800403e:	f7ff ff07 	bl	8003e50 <LCD_WritePara.isra.0>

    // Power Control 3
    LCD_WriteCmd(0xc5);
 8004042:	20c5      	movs	r0, #197	; 0xc5
 8004044:	f7ff ff2a 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8004048:	2000      	movs	r0, #0
 800404a:	f7ff ff01 	bl	8003e50 <LCD_WritePara.isra.0>

    // VCOM Control
    LCD_WriteCmd(0x1a);
 800404e:	201a      	movs	r0, #26
 8004050:	f7ff ff24 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x80);
 8004054:	2080      	movs	r0, #128	; 0x80
 8004056:	f7ff fefb 	bl	8003e50 <LCD_WritePara.isra.0>

    // Memory Access Control
    LCD_WriteCmd(0x36);
 800405a:	2036      	movs	r0, #54	; 0x36
 800405c:	f7ff ff1e 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x48);
 8004060:	2048      	movs	r0, #72	; 0x48
 8004062:	f7ff fef5 	bl	8003e50 <LCD_WritePara.isra.0>

    // Pixel Interface Format
    LCD_WriteCmd(0x3a);
 8004066:	203a      	movs	r0, #58	; 0x3a
 8004068:	f7ff ff18 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x55);
 800406c:	2055      	movs	r0, #85	; 0x55
 800406e:	f7ff feef 	bl	8003e50 <LCD_WritePara.isra.0>

    // Interface Mode Control
    LCD_WriteCmd(0xb0);
 8004072:	20b0      	movs	r0, #176	; 0xb0
 8004074:	f7ff ff12 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8004078:	2000      	movs	r0, #0
 800407a:	f7ff fee9 	bl	8003e50 <LCD_WritePara.isra.0>

    // Frame Rate Control
    LCD_WriteCmd(0xb1);
 800407e:	20b1      	movs	r0, #177	; 0xb1
 8004080:	f7ff ff0c 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa0);
 8004084:	20a0      	movs	r0, #160	; 0xa0
 8004086:	f7ff fee3 	bl	8003e50 <LCD_WritePara.isra.0>

    // Display Inversion Control
    LCD_WriteCmd(0xb4);
 800408a:	20b4      	movs	r0, #180	; 0xb4
 800408c:	f7ff ff06 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 8004090:	2002      	movs	r0, #2
 8004092:	f7ff fedd 	bl	8003e50 <LCD_WritePara.isra.0>

    // Display Function Control
    LCD_WriteCmd(0xb6);
 8004096:	20b6      	movs	r0, #182	; 0xb6
 8004098:	f7ff ff00 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x02);
 800409c:	2002      	movs	r0, #2
 800409e:	f7ff fed7 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x02);
 80040a2:	2002      	movs	r0, #2
 80040a4:	f7ff fed4 	bl	8003e50 <LCD_WritePara.isra.0>

    // Set image function
    LCD_WriteCmd(0xe9);
 80040a8:	20e9      	movs	r0, #233	; 0xe9
 80040aa:	f7ff fef7 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 80040ae:	2000      	movs	r0, #0
 80040b0:	f7ff fece 	bl	8003e50 <LCD_WritePara.isra.0>

    //Adjust Control 3
    LCD_WriteCmd(0xf7);
 80040b4:	20f7      	movs	r0, #247	; 0xf7
 80040b6:	f7ff fef1 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0xa9);
 80040ba:	20a9      	movs	r0, #169	; 0xa9
 80040bc:	f7ff fec8 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x51);
 80040c0:	2051      	movs	r0, #81	; 0x51
 80040c2:	f7ff fec5 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x2c);
 80040c6:	202c      	movs	r0, #44	; 0x2c
 80040c8:	f7ff fec2 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x82);
 80040cc:	2082      	movs	r0, #130	; 0x82
 80040ce:	f7ff febf 	bl	8003e50 <LCD_WritePara.isra.0>

    // Write_memory_start
    LCD_WriteCmd(0x21);
 80040d2:	2021      	movs	r0, #33	; 0x21
 80040d4:	f7ff fee2 	bl	8003e9c <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 80040d8:	2078      	movs	r0, #120	; 0x78
 80040da:	f000 f993 	bl	8004404 <HAL_Delay>
    //Exit Sleep
    LCD_WriteCmd(0x11);
 80040de:	2011      	movs	r0, #17
 80040e0:	f7ff fedc 	bl	8003e9c <LCD_WriteCmd.isra.0>
    HAL_Delay(120);
 80040e4:	2078      	movs	r0, #120	; 0x78
 80040e6:	f000 f98d 	bl	8004404 <HAL_Delay>

    switch (rotation)
 80040ea:	2c02      	cmp	r4, #2
    {
        case LCD_DISPLAY_ROTATION_0:
            LCD_WriteCmd(0x36);
 80040ec:	f04f 0036 	mov.w	r0, #54	; 0x36
    switch (rotation)
 80040f0:	d036      	beq.n	8004160 <LCD_Init+0x22c>
 80040f2:	2c03      	cmp	r4, #3
 80040f4:	d046      	beq.n	8004184 <LCD_Init+0x250>
 80040f6:	2c01      	cmp	r4, #1
 80040f8:	d036      	beq.n	8004168 <LCD_Init+0x234>
            LCD_WriteCmd(0x36);
 80040fa:	f7ff fecf 	bl	8003e9c <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x48);
 80040fe:	2048      	movs	r0, #72	; 0x48
            g_lcd_height = 320;
            g_lcd_width  = 480;
            break;
        case LCD_DISPLAY_ROTATION_180:
            LCD_WriteCmd(0x36);
            LCD_WritePara(0x88);
 8004100:	f7ff fea6 	bl	8003e50 <LCD_WritePara.isra.0>
            g_lcd_height = 480;
 8004104:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
            g_lcd_width  = 320;
 8004108:	f44f 72a0 	mov.w	r2, #320	; 0x140
            g_lcd_height = 480;
 800410c:	4920      	ldr	r1, [pc, #128]	; (8004190 <LCD_Init+0x25c>)
            g_lcd_width  = 320;
 800410e:	4b21      	ldr	r3, [pc, #132]	; (8004194 <LCD_Init+0x260>)
            g_lcd_height = 480;
 8004110:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 320;
 8004112:	601a      	str	r2, [r3, #0]
            g_lcd_width  = 320;
            break;
    }

    // set_screen_size
    LCD_WriteCmd(0x2a);
 8004114:	202a      	movs	r0, #42	; 0x2a
 8004116:	f7ff fec1 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 800411a:	2000      	movs	r0, #0
 800411c:	f7ff fe98 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 8004120:	2000      	movs	r0, #0
 8004122:	f7ff fe95 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 8004126:	2001      	movs	r0, #1
 8004128:	f7ff fe92 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x3f);
 800412c:	203f      	movs	r0, #63	; 0x3f
 800412e:	f7ff fe8f 	bl	8003e50 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2b);
 8004132:	202b      	movs	r0, #43	; 0x2b
 8004134:	f7ff feb2 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara(0x00);
 8004138:	2000      	movs	r0, #0
 800413a:	f7ff fe89 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x00);
 800413e:	2000      	movs	r0, #0
 8004140:	f7ff fe86 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0x01);
 8004144:	2001      	movs	r0, #1
 8004146:	f7ff fe83 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(0xdf);
 800414a:	20df      	movs	r0, #223	; 0xdf
 800414c:	f7ff fe80 	bl	8003e50 <LCD_WritePara.isra.0>

    //Display on
    LCD_WriteCmd(0x29);
 8004150:	2029      	movs	r0, #41	; 0x29
 8004152:	f7ff fea3 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WriteCmd(0x21);     

    LCD_WriteCmd(0x29);     
#endif  

}
 8004156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_Delay(120);
 800415a:	2078      	movs	r0, #120	; 0x78
 800415c:	f000 b952 	b.w	8004404 <HAL_Delay>
            LCD_WriteCmd(0x36);
 8004160:	f7ff fe9c 	bl	8003e9c <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x88);
 8004164:	2088      	movs	r0, #136	; 0x88
 8004166:	e7cb      	b.n	8004100 <LCD_Init+0x1cc>
            LCD_WriteCmd(0x36);
 8004168:	f7ff fe98 	bl	8003e9c <LCD_WriteCmd.isra.0>
            LCD_WritePara(0xe8);
 800416c:	20e8      	movs	r0, #232	; 0xe8
            LCD_WritePara(0x28);
 800416e:	f7ff fe6f 	bl	8003e50 <LCD_WritePara.isra.0>
            g_lcd_height = 320;
 8004172:	f44f 70a0 	mov.w	r0, #320	; 0x140
            g_lcd_width  = 480;
 8004176:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
            g_lcd_height = 320;
 800417a:	4905      	ldr	r1, [pc, #20]	; (8004190 <LCD_Init+0x25c>)
            g_lcd_width  = 480;
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <LCD_Init+0x260>)
            g_lcd_height = 320;
 800417e:	6008      	str	r0, [r1, #0]
            g_lcd_width  = 480;
 8004180:	601a      	str	r2, [r3, #0]
            break;
 8004182:	e7c7      	b.n	8004114 <LCD_Init+0x1e0>
            LCD_WriteCmd(0x36);
 8004184:	f7ff fe8a 	bl	8003e9c <LCD_WriteCmd.isra.0>
            LCD_WritePara(0x28);
 8004188:	2028      	movs	r0, #40	; 0x28
 800418a:	e7f0      	b.n	800416e <LCD_Init+0x23a>
 800418c:	42020400 	.word	0x42020400
 8004190:	20001cb8 	.word	0x20001cb8
 8004194:	20001cbc 	.word	0x20001cbc

08004198 <LCD_GetInfo>:
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_GetInfo(uint32_t *pWidth, uint32_t *pHeight)
{
    *pHeight = g_lcd_height;
 8004198:	4a03      	ldr	r2, [pc, #12]	; (80041a8 <LCD_GetInfo+0x10>)
    *pWidth  = g_lcd_width;
 800419a:	4b04      	ldr	r3, [pc, #16]	; (80041ac <LCD_GetInfo+0x14>)
    *pHeight = g_lcd_height;
 800419c:	6812      	ldr	r2, [r2, #0]
    *pWidth  = g_lcd_width;
 800419e:	681b      	ldr	r3, [r3, #0]
    *pHeight = g_lcd_height;
 80041a0:	600a      	str	r2, [r1, #0]
    *pWidth  = g_lcd_width;
 80041a2:	6003      	str	r3, [r0, #0]
}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20001cb8 	.word	0x20001cb8
 80041ac:	20001cbc 	.word	0x20001cbc

080041b0 <LCD_SetWindows>:
 * 修改日期：      版本号     修改人       修改内容
 * -----------------------------------------------
 * 2024/02/01        V1.0     韦东山       创建
 ***********************************************************************/
void LCD_SetWindows(uint32_t x1, uint32_t y1, uint32_t x2, uint32_t y2)
{
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	4607      	mov	r7, r0
 80041b4:	4616      	mov	r6, r2
 80041b6:	460d      	mov	r5, r1
 80041b8:	461c      	mov	r4, r3
    LCD_WriteCmd(0x2a);
 80041ba:	202a      	movs	r0, #42	; 0x2a
 80041bc:	f7ff fe6e 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara((x1 >> 8) & 0xFF);
 80041c0:	f3c7 2007 	ubfx	r0, r7, #8, #8
 80041c4:	f7ff fe44 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(x1 & 0xFF);
 80041c8:	b2f8      	uxtb	r0, r7
 80041ca:	f7ff fe41 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara((x2 >> 8) & 0xFF);
 80041ce:	f3c6 2007 	ubfx	r0, r6, #8, #8
 80041d2:	f7ff fe3d 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(x2 & 0xFF);
 80041d6:	b2f0      	uxtb	r0, r6
 80041d8:	f7ff fe3a 	bl	8003e50 <LCD_WritePara.isra.0>
    

    LCD_WriteCmd(0x2b);
 80041dc:	202b      	movs	r0, #43	; 0x2b
 80041de:	f7ff fe5d 	bl	8003e9c <LCD_WriteCmd.isra.0>
    LCD_WritePara((y1 >> 8) & 0xFF);
 80041e2:	f3c5 2007 	ubfx	r0, r5, #8, #8
 80041e6:	f7ff fe33 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(y1 & 0xFF);
 80041ea:	b2e8      	uxtb	r0, r5
 80041ec:	f7ff fe30 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara((y2 >> 8) & 0xFF);
 80041f0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80041f4:	f7ff fe2c 	bl	8003e50 <LCD_WritePara.isra.0>
    LCD_WritePara(y2 & 0xFF);
 80041f8:	b2e0      	uxtb	r0, r4
 80041fa:	f7ff fe29 	bl	8003e50 <LCD_WritePara.isra.0>

    LCD_WriteCmd(0x2C);
}
 80041fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    LCD_WriteCmd(0x2C);
 8004202:	202c      	movs	r0, #44	; 0x2c
 8004204:	f7ff be4a 	b.w	8003e9c <LCD_WriteCmd.isra.0>

08004208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004208:	480d      	ldr	r0, [pc, #52]	; (8004240 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800420a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800420c:	f006 fd08 	bl	800ac20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004210:	480c      	ldr	r0, [pc, #48]	; (8004244 <LoopForever+0x6>)
  ldr r1, =_edata
 8004212:	490d      	ldr	r1, [pc, #52]	; (8004248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004214:	4a0d      	ldr	r2, [pc, #52]	; (800424c <LoopForever+0xe>)
  movs r3, #0
 8004216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004218:	e002      	b.n	8004220 <LoopCopyDataInit>

0800421a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800421a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800421c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800421e:	3304      	adds	r3, #4

08004220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004224:	d3f9      	bcc.n	800421a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004226:	4a0a      	ldr	r2, [pc, #40]	; (8004250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004228:	4c0a      	ldr	r4, [pc, #40]	; (8004254 <LoopForever+0x16>)
  movs r3, #0
 800422a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800422c:	e001      	b.n	8004232 <LoopFillZerobss>

0800422e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800422e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004230:	3204      	adds	r2, #4

08004232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004234:	d3fb      	bcc.n	800422e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004236:	f007 fc7d 	bl	800bb34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800423a:	f7fd ff71 	bl	8002120 <main>

0800423e <LoopForever>:

LoopForever:
    b LoopForever
 800423e:	e7fe      	b.n	800423e <LoopForever>
  ldr   r0, =_estack
 8004240:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004248:	20000854 	.word	0x20000854
  ldr r2, =_sidata
 800424c:	0801bca8 	.word	0x0801bca8
  ldr r2, =_sbss
 8004250:	20000854 	.word	0x20000854
  ldr r4, =_ebss
 8004254:	200024a0 	.word	0x200024a0

08004258 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004258:	e7fe      	b.n	8004258 <ADC1_IRQHandler>
	...

0800425c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800425c:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800425e:	2003      	movs	r0, #3
 8004260:	f000 f834 	bl	80042cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8004264:	f000 fe56 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 8004268:	4603      	mov	r3, r0
 800426a:	4a0c      	ldr	r2, [pc, #48]	; (800429c <HAL_Init+0x40>)
 800426c:	480c      	ldr	r0, [pc, #48]	; (80042a0 <HAL_Init+0x44>)
 800426e:	6a12      	ldr	r2, [r2, #32]
 8004270:	490c      	ldr	r1, [pc, #48]	; (80042a4 <HAL_Init+0x48>)
 8004272:	f002 020f 	and.w	r2, r2, #15
 8004276:	5c82      	ldrb	r2, [r0, r2]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8004278:	2004      	movs	r0, #4
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800427a:	40d3      	lsrs	r3, r2
 800427c:	600b      	str	r3, [r1, #0]
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800427e:	f000 f883 	bl	8004388 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004282:	200f      	movs	r0, #15
 8004284:	f005 fec6 	bl	800a014 <HAL_InitTick>
 8004288:	b110      	cbz	r0, 8004290 <HAL_Init+0x34>
  {
    return HAL_ERROR;
 800428a:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
 800428c:	4620      	mov	r0, r4
 800428e:	bd10      	pop	{r4, pc}
 8004290:	4604      	mov	r4, r0
  HAL_MspInit();
 8004292:	f000 fdad 	bl	8004df0 <HAL_MspInit>
}
 8004296:	4620      	mov	r0, r4
 8004298:	bd10      	pop	{r4, pc}
 800429a:	bf00      	nop
 800429c:	44020c00 	.word	0x44020c00
 80042a0:	0801bc68 	.word	0x0801bc68
 80042a4:	2000000c 	.word	0x2000000c

080042a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80042a8:	4a03      	ldr	r2, [pc, #12]	; (80042b8 <HAL_IncTick+0x10>)
 80042aa:	4b04      	ldr	r3, [pc, #16]	; (80042bc <HAL_IncTick+0x14>)
 80042ac:	6811      	ldr	r1, [r2, #0]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	440b      	add	r3, r1
 80042b2:	6013      	str	r3, [r2, #0]
}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20001cc0 	.word	0x20001cc0
 80042bc:	20000004 	.word	0x20000004

080042c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80042c0:	4b01      	ldr	r3, [pc, #4]	; (80042c8 <HAL_GetTick+0x8>)
 80042c2:	6818      	ldr	r0, [r3, #0]
}
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	20001cc0 	.word	0x20001cc0

080042cc <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042cc:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d0:	4906      	ldr	r1, [pc, #24]	; (80042ec <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042da:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80042e8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80042ea:	4770      	bx	lr
 80042ec:	e000ed00 	.word	0xe000ed00

080042f0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042f0:	4b1c      	ldr	r3, [pc, #112]	; (8004364 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f2:	b500      	push	{lr}
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042fa:	f1c3 0e07 	rsb	lr, r3, #7
 80042fe:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004306:	bf28      	it	cs
 8004308:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800430c:	f1bc 0f06 	cmp.w	ip, #6
 8004310:	d91b      	bls.n	800434a <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004312:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004316:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004318:	fa0c fc03 	lsl.w	ip, ip, r3
 800431c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004320:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004324:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004328:	ea21 010c 	bic.w	r1, r1, ip
 800432c:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800432e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004330:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004334:	db0c      	blt.n	8004350 <HAL_NVIC_SetPriority+0x60>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004336:	0109      	lsls	r1, r1, #4
 8004338:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800433c:	b2c9      	uxtb	r1, r1
 800433e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004342:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004346:	f85d fb04 	ldr.w	pc, [sp], #4
 800434a:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800434c:	4613      	mov	r3, r2
 800434e:	e7e7      	b.n	8004320 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004350:	4b05      	ldr	r3, [pc, #20]	; (8004368 <HAL_NVIC_SetPriority+0x78>)
 8004352:	f000 000f 	and.w	r0, r0, #15
 8004356:	0109      	lsls	r1, r1, #4
 8004358:	b2c9      	uxtb	r1, r1
 800435a:	4403      	add	r3, r0
 800435c:	7619      	strb	r1, [r3, #24]
 800435e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004362:	bf00      	nop
 8004364:	e000ed00 	.word	0xe000ed00
 8004368:	e000ecfc 	.word	0xe000ecfc

0800436c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800436c:	2800      	cmp	r0, #0
 800436e:	db07      	blt.n	8004380 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004370:	2301      	movs	r3, #1
 8004372:	f000 011f 	and.w	r1, r0, #31
 8004376:	4a03      	ldr	r2, [pc, #12]	; (8004384 <HAL_NVIC_EnableIRQ+0x18>)
 8004378:	0940      	lsrs	r0, r0, #5
 800437a:	408b      	lsls	r3, r1
 800437c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	e000e100 	.word	0xe000e100

08004388 <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8004388:	2804      	cmp	r0, #4
 800438a:	d813      	bhi.n	80043b4 <HAL_SYSTICK_CLKSourceConfig+0x2c>
 800438c:	e8df f000 	tbb	[pc, r0]
 8004390:	12031a2a 	.word	0x12031a2a
 8004394:	13          	.byte	0x13
 8004395:	00          	.byte	0x00
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
      break;
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 8004396:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 800439a:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 800439c:	4a18      	ldr	r2, [pc, #96]	; (8004400 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 800439e:	f023 0304 	bic.w	r3, r3, #4
 80043a2:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_1);
 80043a4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 80043a8:	f023 030c 	bic.w	r3, r3, #12
 80043ac:	f043 0308 	orr.w	r3, r3, #8
 80043b0:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
    default:
      /* Nothing to do */
      break;
  }
}
 80043b4:	4770      	bx	lr
      SET_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80043b6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80043ba:	6913      	ldr	r3, [r2, #16]
 80043bc:	f043 0304 	orr.w	r3, r3, #4
 80043c0:	6113      	str	r3, [r2, #16]
      break;
 80043c2:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80043c4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 80043c8:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80043ca:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80043cc:	f023 0304 	bic.w	r3, r3, #4
 80043d0:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, RCC_CCIPR4_SYSTICKSEL_0);
 80043d2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 80043d6:	f023 030c 	bic.w	r3, r3, #12
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 80043e2:	4770      	bx	lr
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80043e4:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
 80043e8:	690b      	ldr	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80043ea:	4a05      	ldr	r2, [pc, #20]	; (8004400 <HAL_SYSTICK_CLKSourceConfig+0x78>)
      CLEAR_BIT(SysTick->CTRL, SYSTICK_CLKSOURCE_HCLK);
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	610b      	str	r3, [r1, #16]
      MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_SYSTICKSEL, (0x00000000U));
 80043f2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 80043f6:	f023 030c 	bic.w	r3, r3, #12
 80043fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
      break;
 80043fe:	4770      	bx	lr
 8004400:	44020c00 	.word	0x44020c00

08004404 <HAL_Delay>:
#include "main.h"

void HAL_Delay(uint32_t Delay)
{
 8004404:	b570      	push	{r4, r5, r6, lr}
 8004406:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8004408:	f7ff ff5a 	bl	80042c0 <HAL_GetTick>
  uint32_t wait = Delay - 1;//减去多出的1ms时间
 800440c:	1e75      	subs	r5, r6, #1
  uint32_t tickstart = HAL_GetTick();
 800440e:	4604      	mov	r4, r0

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004410:	b116      	cbz	r6, 8004418 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004412:	4b04      	ldr	r3, [pc, #16]	; (8004424 <HAL_Delay+0x20>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	441d      	add	r5, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004418:	f7ff ff52 	bl	80042c0 <HAL_GetTick>
 800441c:	1b00      	subs	r0, r0, r4
 800441e:	42a8      	cmp	r0, r5
 8004420:	d3fa      	bcc.n	8004418 <HAL_Delay+0x14>
  {
  }
}
 8004422:	bd70      	pop	{r4, r5, r6, pc}
 8004424:	20000004 	.word	0x20000004

08004428 <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4604      	mov	r4, r0
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 800442c:	f7ff ff48 	bl	80042c0 <HAL_GetTick>

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004430:	2c00      	cmp	r4, #0
 8004432:	f000 8148 	beq.w	80046c6 <HAL_DMA_Init+0x29e>
  if (hdma->Init.Mode == DMA_PFCTRL)
  {
    assert_param(IS_DMA_PFREQ_INSTANCE(hdma->Instance));
  }
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004436:	4605      	mov	r5, r0
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004438:	2000      	movs	r0, #0

  /* Initialize the callbacks */
  if (hdma->State == HAL_DMA_STATE_RESET)
 800443a:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800443e:	6823      	ldr	r3, [r4, #0]
  if (hdma->State == HAL_DMA_STATE_RESET)
 8004440:	f001 02ff 	and.w	r2, r1, #255	; 0xff
  __HAL_UNLOCK(hdma);
 8004444:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
  if (hdma->State == HAL_DMA_STATE_RESET)
 8004448:	2900      	cmp	r1, #0
 800444a:	f000 80d5 	beq.w	80045f8 <HAL_DMA_Init+0x1d0>
    hdma->XferAbortCallback    = NULL;
    hdma->XferSuspendCallback  = NULL;
  }

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800444e:	2202      	movs	r2, #2
 8004450:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	f042 0206 	orr.w	r2, r2, #6
 800445a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800445c:	e006      	b.n	800446c <HAL_DMA_Init+0x44>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800445e:	f7ff ff2f 	bl	80042c0 <HAL_GetTick>
 8004462:	1b43      	subs	r3, r0, r5
 8004464:	2b05      	cmp	r3, #5
 8004466:	f200 8124 	bhi.w	80046b2 <HAL_DMA_Init+0x28a>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800446a:	6823      	ldr	r3, [r4, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	07d2      	lsls	r2, r2, #31
 8004470:	d4f5      	bmi.n	800445e <HAL_DMA_Init+0x36>

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004472:	6959      	ldr	r1, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004474:	6962      	ldr	r2, [r4, #20]
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004476:	f421 0143 	bic.w	r1, r1, #12779520	; 0xc30000
 800447a:	e9d4 5007 	ldrd	r5, r0, [r4, #28]
 800447e:	4301      	orrs	r1, r0
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004480:	6920      	ldr	r0, [r4, #16]
 8004482:	432a      	orrs	r2, r5
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 8004484:	6159      	str	r1, [r3, #20]
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8004486:	69a1      	ldr	r1, [r4, #24]
 8004488:	4302      	orrs	r2, r0
 800448a:	4311      	orrs	r1, r2

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800448c:	4a8f      	ldr	r2, [pc, #572]	; (80046cc <HAL_DMA_Init+0x2a4>)
 800448e:	4293      	cmp	r3, r2
 8004490:	f000 80b8 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 8004494:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004498:	4293      	cmp	r3, r2
 800449a:	f000 80b3 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 800449e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80044a2:	3280      	adds	r2, #128	; 0x80
 80044a4:	4293      	cmp	r3, r2
 80044a6:	f000 80ad 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 80044aa:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80044ae:	4293      	cmp	r3, r2
 80044b0:	f000 80a8 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 80044b4:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80044b8:	3280      	adds	r2, #128	; 0x80
 80044ba:	4293      	cmp	r3, r2
 80044bc:	f000 80a2 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 80044c0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80044c4:	4293      	cmp	r3, r2
 80044c6:	f000 809d 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 80044ca:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80044ce:	3280      	adds	r2, #128	; 0x80
 80044d0:	4293      	cmp	r3, r2
 80044d2:	f000 8097 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 80044d6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80044da:	4293      	cmp	r3, r2
 80044dc:	f000 8092 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 80044e0:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80044e4:	3280      	adds	r2, #128	; 0x80
 80044e6:	4293      	cmp	r3, r2
 80044e8:	f000 808c 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 80044ec:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80044f0:	4293      	cmp	r3, r2
 80044f2:	f000 8087 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 80044f6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80044fa:	3280      	adds	r2, #128	; 0x80
 80044fc:	4293      	cmp	r3, r2
 80044fe:	f000 8081 	beq.w	8004604 <HAL_DMA_Init+0x1dc>
 8004502:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004506:	4293      	cmp	r3, r2
 8004508:	d07c      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 800450a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800450e:	3280      	adds	r2, #128	; 0x80
 8004510:	4293      	cmp	r3, r2
 8004512:	d077      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004514:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004518:	4293      	cmp	r3, r2
 800451a:	d073      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 800451c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004520:	3280      	adds	r2, #128	; 0x80
 8004522:	4293      	cmp	r3, r2
 8004524:	d06e      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004526:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800452a:	4293      	cmp	r3, r2
 800452c:	d06a      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 800452e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004532:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
 8004536:	4293      	cmp	r3, r2
 8004538:	d064      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 800453a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800453e:	4293      	cmp	r3, r2
 8004540:	d060      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004542:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004546:	3280      	adds	r2, #128	; 0x80
 8004548:	4293      	cmp	r3, r2
 800454a:	d05b      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 800454c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004550:	4293      	cmp	r3, r2
 8004552:	d057      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004554:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004558:	3280      	adds	r2, #128	; 0x80
 800455a:	4293      	cmp	r3, r2
 800455c:	d052      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 800455e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004562:	4293      	cmp	r3, r2
 8004564:	d04e      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004566:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800456a:	3280      	adds	r2, #128	; 0x80
 800456c:	4293      	cmp	r3, r2
 800456e:	d049      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004570:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004574:	4293      	cmp	r3, r2
 8004576:	d045      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004578:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800457c:	3280      	adds	r2, #128	; 0x80
 800457e:	4293      	cmp	r3, r2
 8004580:	d040      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004582:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004586:	4293      	cmp	r3, r2
 8004588:	d03c      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 800458a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800458e:	3280      	adds	r2, #128	; 0x80
 8004590:	4293      	cmp	r3, r2
 8004592:	d037      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 8004594:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004598:	4293      	cmp	r3, r2
 800459a:	d033      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 800459c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80045a0:	3280      	adds	r2, #128	; 0x80
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d02e      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 80045a6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d02a      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 80045ae:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80045b2:	3280      	adds	r2, #128	; 0x80
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d025      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
 80045b8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80045bc:	4293      	cmp	r3, r2
 80045be:	d021      	beq.n	8004604 <HAL_DMA_Init+0x1dc>
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
#if defined (DMA_CTR1_SSEC)
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80045c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
#else
  WRITE_REG(hdma->Instance->CTR1, tmpreg);
#endif /* DMA_CTR1_SSEC */

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80045c2:	68a0      	ldr	r0, [r4, #8]
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 80045c4:	f002 2280 	and.w	r2, r2, #2147516416	; 0x80008000
 80045c8:	430a      	orrs	r2, r1
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 80045cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80045ce:	7921      	ldrb	r1, [r4, #4]
 80045d0:	4302      	orrs	r2, r0
 80045d2:	4311      	orrs	r1, r2

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d4:	68e2      	ldr	r2, [r4, #12]
 80045d6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80045da:	f000 8111 	beq.w	8004800 <HAL_DMA_Init+0x3d8>
    {
      tmpreg |= DMA_CTR2_DREQ;
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80045de:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80045e2:	d06d      	beq.n	80046c0 <HAL_DMA_Init+0x298>
                                    DMA_CTR2_PFREQ | DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   |
                                    DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80045e4:	2000      	movs	r0, #0
  tmpreg |= hdma->Init.Mode;
 80045e6:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ea:	4e39      	ldr	r6, [pc, #228]	; (80046d0 <HAL_DMA_Init+0x2a8>)
 80045ec:	4329      	orrs	r1, r5
 80045ee:	4032      	ands	r2, r6
 80045f0:	430a      	orrs	r2, r1
 80045f2:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80045f4:	6498      	str	r0, [r3, #72]	; 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80045f6:	e054      	b.n	80046a2 <HAL_DMA_Init+0x27a>
    hdma->XferHalfCpltCallback = NULL;
 80045f8:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
    hdma->XferAbortCallback    = NULL;
 80045fc:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
    hdma->XferSuspendCallback  = NULL;
 8004600:	6722      	str	r2, [r4, #112]	; 0x70
 8004602:	e724      	b.n	800444e <HAL_DMA_Init+0x26>
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004604:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004608:	3a01      	subs	r2, #1
 800460a:	0512      	lsls	r2, r2, #20
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800460c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 800460e:	3801      	subs	r0, #1
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8004610:	f002 727c 	and.w	r2, r2, #66060288	; 0x3f00000
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8004614:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8004616:	430a      	orrs	r2, r1
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004618:	0101      	lsls	r1, r0, #4
 800461a:	f401 717c 	and.w	r1, r1, #1008	; 0x3f0
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800461e:	432a      	orrs	r2, r5
 8004620:	430a      	orrs	r2, r1
 8004622:	f006 2080 	and.w	r0, r6, #2147516416	; 0x80008000
 8004626:	4302      	orrs	r2, r0
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 8004628:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 800462a:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 800462c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800462e:	7920      	ldrb	r0, [r4, #4]
 8004630:	430a      	orrs	r2, r1
 8004632:	ea42 0100 	orr.w	r1, r2, r0
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004636:	68e2      	ldr	r2, [r4, #12]
 8004638:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800463c:	d04c      	beq.n	80046d8 <HAL_DMA_Init+0x2b0>
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 800463e:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8004642:	d03d      	beq.n	80046c0 <HAL_DMA_Init+0x298>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004646:	4822      	ldr	r0, [pc, #136]	; (80046d0 <HAL_DMA_Init+0x2a8>)
  tmpreg |= hdma->Init.Mode;
 8004648:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800464a:	4002      	ands	r2, r0
 800464c:	432a      	orrs	r2, r5
 800464e:	430a      	orrs	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004650:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004652:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004654:	4a1f      	ldr	r2, [pc, #124]	; (80046d4 <HAL_DMA_Init+0x2ac>)
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004656:	6499      	str	r1, [r3, #72]	; 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004658:	4293      	cmp	r3, r2
 800465a:	d01f      	beq.n	800469c <HAL_DMA_Init+0x274>
 800465c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004660:	4293      	cmp	r3, r2
 8004662:	d01b      	beq.n	800469c <HAL_DMA_Init+0x274>
 8004664:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004668:	3280      	adds	r2, #128	; 0x80
 800466a:	4293      	cmp	r3, r2
 800466c:	d016      	beq.n	800469c <HAL_DMA_Init+0x274>
 800466e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004672:	4293      	cmp	r3, r2
 8004674:	d012      	beq.n	800469c <HAL_DMA_Init+0x274>
 8004676:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800467a:	f502 6278 	add.w	r2, r2, #3968	; 0xf80
 800467e:	4293      	cmp	r3, r2
 8004680:	d00c      	beq.n	800469c <HAL_DMA_Init+0x274>
 8004682:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004686:	4293      	cmp	r3, r2
 8004688:	d008      	beq.n	800469c <HAL_DMA_Init+0x274>
 800468a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800468e:	3280      	adds	r2, #128	; 0x80
 8004690:	4293      	cmp	r3, r2
 8004692:	d003      	beq.n	800469c <HAL_DMA_Init+0x274>
 8004694:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004698:	4293      	cmp	r3, r2
 800469a:	d102      	bne.n	80046a2 <HAL_DMA_Init+0x27a>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 800469c:	2200      	movs	r2, #0
 800469e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 80046a0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80046a2:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80046a4:	2201      	movs	r2, #1
  WRITE_REG(hdma->Instance->CLLR, 0U);
 80046a6:	67d8      	str	r0, [r3, #124]	; 0x7c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046a8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->State = HAL_DMA_STATE_READY;
 80046aa:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
  hdma->Mode = hdma->Init.Mode;
 80046ae:	6525      	str	r5, [r4, #80]	; 0x50
}
 80046b0:	bd70      	pop	{r4, r5, r6, pc}
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b2:	2210      	movs	r2, #16
      hdma->State = HAL_DMA_STATE_ERROR;
 80046b4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046b6:	65a2      	str	r2, [r4, #88]	; 0x58
      hdma->State = HAL_DMA_STATE_ERROR;
 80046b8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      return HAL_ERROR;
 80046bc:	2001      	movs	r0, #1
}
 80046be:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg |= DMA_CTR2_SWREQ;
 80046c0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80046c4:	e7be      	b.n	8004644 <HAL_DMA_Init+0x21c>
    return HAL_ERROR;
 80046c6:	2001      	movs	r0, #1
}
 80046c8:	bd70      	pop	{r4, r5, r6, pc}
 80046ca:	bf00      	nop
 80046cc:	40020050 	.word	0x40020050
 80046d0:	3cc02100 	.word	0x3cc02100
 80046d4:	40020350 	.word	0x40020350
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 80046d8:	4a50      	ldr	r2, [pc, #320]	; (800481c <HAL_DMA_Init+0x3f4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	f000 809a 	beq.w	8004814 <HAL_DMA_Init+0x3ec>
 80046e0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80046e4:	4293      	cmp	r3, r2
 80046e6:	f000 8095 	beq.w	8004814 <HAL_DMA_Init+0x3ec>
 80046ea:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80046ee:	3280      	adds	r2, #128	; 0x80
 80046f0:	4293      	cmp	r3, r2
 80046f2:	f000 808f 	beq.w	8004814 <HAL_DMA_Init+0x3ec>
 80046f6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80046fa:	4293      	cmp	r3, r2
 80046fc:	f000 808a 	beq.w	8004814 <HAL_DMA_Init+0x3ec>
 8004700:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004704:	3280      	adds	r2, #128	; 0x80
 8004706:	4293      	cmp	r3, r2
 8004708:	f000 8084 	beq.w	8004814 <HAL_DMA_Init+0x3ec>
 800470c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004710:	4293      	cmp	r3, r2
 8004712:	d07f      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004714:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004718:	3280      	adds	r2, #128	; 0x80
 800471a:	4293      	cmp	r3, r2
 800471c:	d07a      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 800471e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004722:	4293      	cmp	r3, r2
 8004724:	d076      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004726:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800472a:	3280      	adds	r2, #128	; 0x80
 800472c:	4293      	cmp	r3, r2
 800472e:	d071      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004730:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004734:	4293      	cmp	r3, r2
 8004736:	d06d      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004738:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800473c:	3280      	adds	r2, #128	; 0x80
 800473e:	4293      	cmp	r3, r2
 8004740:	d068      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004742:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004746:	4293      	cmp	r3, r2
 8004748:	d064      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 800474a:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 800474e:	3280      	adds	r2, #128	; 0x80
 8004750:	4293      	cmp	r3, r2
 8004752:	d05f      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004754:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004758:	4293      	cmp	r3, r2
 800475a:	d05b      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 800475c:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004760:	3280      	adds	r2, #128	; 0x80
 8004762:	4293      	cmp	r3, r2
 8004764:	d056      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004766:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800476a:	4293      	cmp	r3, r2
 800476c:	d052      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 800476e:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004772:	f502 6248 	add.w	r2, r2, #3200	; 0xc80
 8004776:	4293      	cmp	r3, r2
 8004778:	d04c      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 800477a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800477e:	4293      	cmp	r3, r2
 8004780:	d048      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004782:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004786:	3280      	adds	r2, #128	; 0x80
 8004788:	4293      	cmp	r3, r2
 800478a:	d043      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 800478c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8004790:	4293      	cmp	r3, r2
 8004792:	d03f      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 8004794:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 8004798:	3280      	adds	r2, #128	; 0x80
 800479a:	4293      	cmp	r3, r2
 800479c:	d03a      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 800479e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d036      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047a6:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80047aa:	3280      	adds	r2, #128	; 0x80
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d031      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047b0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d02d      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047b8:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80047bc:	3280      	adds	r2, #128	; 0x80
 80047be:	4293      	cmp	r3, r2
 80047c0:	d028      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047c2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d024      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047ca:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80047ce:	3280      	adds	r2, #128	; 0x80
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d01f      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047d4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80047d8:	4293      	cmp	r3, r2
 80047da:	d01b      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047dc:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80047e0:	3280      	adds	r2, #128	; 0x80
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d016      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047e6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d012      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047ee:	f102 4270 	add.w	r2, r2, #4026531840	; 0xf0000000
 80047f2:	3280      	adds	r2, #128	; 0x80
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d00d      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
 80047f8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d009      	beq.n	8004814 <HAL_DMA_Init+0x3ec>
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004800:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004802:	4807      	ldr	r0, [pc, #28]	; (8004820 <HAL_DMA_Init+0x3f8>)
  tmpreg |= hdma->Init.Mode;
 8004804:	6b65      	ldr	r5, [r4, #52]	; 0x34
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8004806:	4002      	ands	r2, r0
 8004808:	432a      	orrs	r2, r5
 800480a:	430a      	orrs	r2, r1
  WRITE_REG(hdma->Instance->CBR1, 0U);
 800480c:	2100      	movs	r1, #0
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 800480e:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8004810:	6499      	str	r1, [r3, #72]	; 0x48
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 8004812:	e746      	b.n	80046a2 <HAL_DMA_Init+0x27a>
      tmpreg |= DMA_CTR2_DREQ;
 8004814:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8004818:	e714      	b.n	8004644 <HAL_DMA_Init+0x21c>
 800481a:	bf00      	nop
 800481c:	40020050 	.word	0x40020050
 8004820:	3cc02100 	.word	0x3cc02100

08004824 <HAL_DMA_Start_IT>:
  if (hdma == NULL)
 8004824:	2800      	cmp	r0, #0
 8004826:	d043      	beq.n	80048b0 <HAL_DMA_Start_IT+0x8c>
{
 8004828:	b530      	push	{r4, r5, lr}
  if (hdma->Mode != DMA_NORMAL)
 800482a:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800482c:	4684      	mov	ip, r0
 800482e:	2c00      	cmp	r4, #0
 8004830:	d134      	bne.n	800489c <HAL_DMA_Start_IT+0x78>
  __HAL_LOCK(hdma);
 8004832:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8004836:	2801      	cmp	r0, #1
 8004838:	d038      	beq.n	80048ac <HAL_DMA_Start_IT+0x88>
 800483a:	2001      	movs	r0, #1
  if (hdma->State == HAL_DMA_STATE_READY)
 800483c:	f89c e054 	ldrb.w	lr, [ip, #84]	; 0x54
  __HAL_LOCK(hdma);
 8004840:	f88c 004c 	strb.w	r0, [ip, #76]	; 0x4c
  if (hdma->State == HAL_DMA_STATE_READY)
 8004844:	4586      	cmp	lr, r0
 8004846:	d12b      	bne.n	80048a0 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8004848:	2002      	movs	r0, #2
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800484a:	f44f 45fe 	mov.w	r5, #32512	; 0x7f00
    hdma->State = HAL_DMA_STATE_BUSY;
 800484e:	f88c 0054 	strb.w	r0, [ip, #84]	; 0x54
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004852:	f8cc 4058 	str.w	r4, [ip, #88]	; 0x58
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004856:	f8dc 4000 	ldr.w	r4, [ip]
 800485a:	b29b      	uxth	r3, r3
 800485c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800485e:	0c00      	lsrs	r0, r0, #16
 8004860:	0400      	lsls	r0, r0, #16
 8004862:	4303      	orrs	r3, r0
 8004864:	64a3      	str	r3, [r4, #72]	; 0x48
    if (hdma->XferHalfCpltCallback != NULL)
 8004866:	f8dc 0064 	ldr.w	r0, [ip, #100]	; 0x64
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800486a:	60e5      	str	r5, [r4, #12]
  hdma->Instance->CSAR = SrcAddress;
 800486c:	64e1      	str	r1, [r4, #76]	; 0x4c
  hdma->Instance->CDAR = DstAddress;
 800486e:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004870:	6963      	ldr	r3, [r4, #20]
 8004872:	f443 43ba 	orr.w	r3, r3, #23808	; 0x5d00
 8004876:	6163      	str	r3, [r4, #20]
    if (hdma->XferHalfCpltCallback != NULL)
 8004878:	b118      	cbz	r0, 8004882 <HAL_DMA_Start_IT+0x5e>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 800487a:	6963      	ldr	r3, [r4, #20]
 800487c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004880:	6163      	str	r3, [r4, #20]
    if (hdma->XferSuspendCallback != NULL)
 8004882:	f8dc 3070 	ldr.w	r3, [ip, #112]	; 0x70
 8004886:	b11b      	cbz	r3, 8004890 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004888:	6963      	ldr	r3, [r4, #20]
 800488a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800488e:	6163      	str	r3, [r4, #20]
    __HAL_DMA_ENABLE(hdma);
 8004890:	6963      	ldr	r3, [r4, #20]
  return HAL_OK;
 8004892:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004894:	f043 0301 	orr.w	r3, r3, #1
 8004898:	6163      	str	r3, [r4, #20]
}
 800489a:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800489c:	2001      	movs	r0, #1
}
 800489e:	bd30      	pop	{r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048a0:	2340      	movs	r3, #64	; 0x40
    __HAL_UNLOCK(hdma);
 80048a2:	f88c 404c 	strb.w	r4, [ip, #76]	; 0x4c
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048a6:	f8cc 3058 	str.w	r3, [ip, #88]	; 0x58
}
 80048aa:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdma);
 80048ac:	2002      	movs	r0, #2
}
 80048ae:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 80048b0:	2001      	movs	r0, #1
}
 80048b2:	4770      	bx	lr

080048b4 <HAL_DMA_Abort>:
{
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4604      	mov	r4, r0
  uint32_t tickstart =  HAL_GetTick();
 80048b8:	f7ff fd02 	bl	80042c0 <HAL_GetTick>
  if (hdma == NULL)
 80048bc:	2c00      	cmp	r4, #0
 80048be:	d048      	beq.n	8004952 <HAL_DMA_Abort+0x9e>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048c0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d12b      	bne.n	8004920 <HAL_DMA_Abort+0x6c>
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80048c8:	2105      	movs	r1, #5
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	4605      	mov	r5, r0
 80048ce:	695a      	ldr	r2, [r3, #20]
 80048d0:	f042 0204 	orr.w	r2, r2, #4
 80048d4:	615a      	str	r2, [r3, #20]
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80048d6:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80048da:	e005      	b.n	80048e8 <HAL_DMA_Abort+0x34>
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80048dc:	f7ff fcf0 	bl	80042c0 <HAL_GetTick>
 80048e0:	1b43      	subs	r3, r0, r5
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d823      	bhi.n	800492e <HAL_DMA_Abort+0x7a>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	0491      	lsls	r1, r2, #18
 80048ec:	d5f6      	bpl.n	80048dc <HAL_DMA_Abort+0x28>
    hdma->State = HAL_DMA_STATE_ABORT;
 80048ee:	2504      	movs	r5, #4
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80048f0:	f44f 40fe 	mov.w	r0, #32512	; 0x7f00
    hdma->State = HAL_DMA_STATE_READY;
 80048f4:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	f042 0202 	orr.w	r2, r2, #2
 80048fc:	615a      	str	r2, [r3, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80048fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hdma->State = HAL_DMA_STATE_ABORT;
 8004900:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004904:	0612      	lsls	r2, r2, #24
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004906:	60d8      	str	r0, [r3, #12]
    hdma->State = HAL_DMA_STATE_READY;
 8004908:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800490c:	d503      	bpl.n	8004916 <HAL_DMA_Abort+0x62>
      hdma->Instance->CBR1 = 0U;
 800490e:	2200      	movs	r2, #0
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004910:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004912:	7301      	strb	r1, [r0, #12]
      hdma->Instance->CBR1 = 0U;
 8004914:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_UNLOCK(hdma);
 8004916:	2300      	movs	r3, #0
 8004918:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
  return HAL_OK;
 800491c:	4618      	mov	r0, r3
}
 800491e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hdma);
 8004920:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004922:	2220      	movs	r2, #32
    __HAL_UNLOCK(hdma);
 8004924:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
    return HAL_ERROR;
 8004928:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800492a:	65a2      	str	r2, [r4, #88]	; 0x58
}
 800492c:	bd38      	pop	{r3, r4, r5, pc}
        hdma->State = HAL_DMA_STATE_ERROR;
 800492e:	2103      	movs	r1, #3
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004930:	6da3      	ldr	r3, [r4, #88]	; 0x58
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004932:	6d22      	ldr	r2, [r4, #80]	; 0x50
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004934:	f043 0310 	orr.w	r3, r3, #16
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004938:	0610      	lsls	r0, r2, #24
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800493a:	65a3      	str	r3, [r4, #88]	; 0x58
        hdma->State = HAL_DMA_STATE_ERROR;
 800493c:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004940:	d502      	bpl.n	8004948 <HAL_DMA_Abort+0x94>
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004942:	2201      	movs	r2, #1
 8004944:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004946:	731a      	strb	r2, [r3, #12]
        __HAL_UNLOCK(hdma);
 8004948:	2300      	movs	r3, #0
 800494a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
        return HAL_ERROR;
 800494e:	2001      	movs	r0, #1
}
 8004950:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004952:	2001      	movs	r0, #1
}
 8004954:	bd38      	pop	{r3, r4, r5, pc}
 8004956:	bf00      	nop

08004958 <HAL_DMA_Abort_IT>:
  if (hdma == NULL)
 8004958:	4603      	mov	r3, r0
 800495a:	b190      	cbz	r0, 8004982 <HAL_DMA_Abort_IT+0x2a>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800495c:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8004960:	2a02      	cmp	r2, #2
 8004962:	d003      	beq.n	800496c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004964:	2220      	movs	r2, #32
    return HAL_ERROR;
 8004966:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004968:	659a      	str	r2, [r3, #88]	; 0x58
    return HAL_ERROR;
 800496a:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 800496c:	2104      	movs	r1, #4
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 800496e:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8004970:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004974:	6953      	ldr	r3, [r2, #20]
  return HAL_OK;
 8004976:	2000      	movs	r0, #0
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 8004978:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800497c:	430b      	orrs	r3, r1
 800497e:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 8004980:	4770      	bx	lr
    return HAL_ERROR;
 8004982:	2001      	movs	r0, #1
}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <HAL_DMA_IRQHandler>:
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004988:	2101      	movs	r1, #1
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 800498a:	6803      	ldr	r3, [r0, #0]
{
 800498c:	b510      	push	{r4, lr}
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800498e:	f3c3 020b 	ubfx	r2, r3, #0, #12
{
 8004992:	4604      	mov	r4, r0
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004994:	f423 607f 	bic.w	r0, r3, #4080	; 0xff0
 8004998:	f020 000f 	bic.w	r0, r0, #15
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 800499c:	3a50      	subs	r2, #80	; 0x50
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 800499e:	68c0      	ldr	r0, [r0, #12]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80049a0:	f3c2 12c4 	ubfx	r2, r2, #7, #5
 80049a4:	fa01 f202 	lsl.w	r2, r1, r2
  if (global_active_flag_ns == 0U)
 80049a8:	4202      	tst	r2, r0
 80049aa:	f000 80a4 	beq.w	8004af6 <HAL_DMA_IRQHandler+0x16e>
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U)
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	0552      	lsls	r2, r2, #21
 80049b2:	d508      	bpl.n	80049c6 <HAL_DMA_IRQHandler+0x3e>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	0550      	lsls	r0, r2, #21
 80049b8:	d505      	bpl.n	80049c6 <HAL_DMA_IRQHandler+0x3e>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 80049ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049be:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 80049c0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80049c2:	430a      	orrs	r2, r1
 80049c4:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U)
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	0511      	lsls	r1, r2, #20
 80049ca:	d509      	bpl.n	80049e0 <HAL_DMA_IRQHandler+0x58>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	0512      	lsls	r2, r2, #20
 80049d0:	d506      	bpl.n	80049e0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 80049d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049d6:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 80049d8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80049da:	f042 0202 	orr.w	r2, r2, #2
 80049de:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U)
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	04d0      	lsls	r0, r2, #19
 80049e4:	d509      	bpl.n	80049fa <HAL_DMA_IRQHandler+0x72>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 80049e6:	695a      	ldr	r2, [r3, #20]
 80049e8:	04d1      	lsls	r1, r2, #19
 80049ea:	d506      	bpl.n	80049fa <HAL_DMA_IRQHandler+0x72>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80049ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049f0:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80049f2:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80049f4:	f042 0204 	orr.w	r2, r2, #4
 80049f8:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U)
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	0452      	lsls	r2, r2, #17
 80049fe:	d509      	bpl.n	8004a14 <HAL_DMA_IRQHandler+0x8c>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004a00:	695a      	ldr	r2, [r3, #20]
 8004a02:	0450      	lsls	r0, r2, #17
 8004a04:	d506      	bpl.n	8004a14 <HAL_DMA_IRQHandler+0x8c>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004a06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a0a:	60da      	str	r2, [r3, #12]
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004a0c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004a0e:	f042 0208 	orr.w	r2, r2, #8
 8004a12:	65a2      	str	r2, [r4, #88]	; 0x58
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U)
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	0591      	lsls	r1, r2, #22
 8004a18:	d50a      	bpl.n	8004a30 <HAL_DMA_IRQHandler+0xa8>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	0592      	lsls	r2, r2, #22
 8004a1e:	d507      	bpl.n	8004a30 <HAL_DMA_IRQHandler+0xa8>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004a20:	f44f 7100 	mov.w	r1, #512	; 0x200
      if (hdma->XferHalfCpltCallback != NULL)
 8004a24:	6e62      	ldr	r2, [r4, #100]	; 0x64
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004a26:	60d9      	str	r1, [r3, #12]
      if (hdma->XferHalfCpltCallback != NULL)
 8004a28:	b112      	cbz	r2, 8004a30 <HAL_DMA_IRQHandler+0xa8>
        hdma->XferHalfCpltCallback(hdma);
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	4790      	blx	r2
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U)
 8004a2e:	6823      	ldr	r3, [r4, #0]
 8004a30:	691a      	ldr	r2, [r3, #16]
 8004a32:	0490      	lsls	r0, r2, #18
 8004a34:	d511      	bpl.n	8004a5a <HAL_DMA_IRQHandler+0xd2>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004a36:	695a      	ldr	r2, [r3, #20]
 8004a38:	0491      	lsls	r1, r2, #18
 8004a3a:	d50e      	bpl.n	8004a5a <HAL_DMA_IRQHandler+0xd2>
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004a3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a40:	60da      	str	r2, [r3, #12]
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004a42:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 8004a46:	2a04      	cmp	r2, #4
 8004a48:	d03d      	beq.n	8004ac6 <HAL_DMA_IRQHandler+0x13e>
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004a4a:	2105      	movs	r1, #5
        if (hdma->XferSuspendCallback != NULL)
 8004a4c:	6f22      	ldr	r2, [r4, #112]	; 0x70
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004a4e:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if (hdma->XferSuspendCallback != NULL)
 8004a52:	b112      	cbz	r2, 8004a5a <HAL_DMA_IRQHandler+0xd2>
          hdma->XferSuspendCallback(hdma);
 8004a54:	4620      	mov	r0, r4
 8004a56:	4790      	blx	r2
  if (__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U)
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	05d0      	lsls	r0, r2, #23
 8004a5e:	d518      	bpl.n	8004a92 <HAL_DMA_IRQHandler+0x10a>
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	05d1      	lsls	r1, r2, #23
 8004a64:	d515      	bpl.n	8004a92 <HAL_DMA_IRQHandler+0x10a>
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004a66:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004a68:	0612      	lsls	r2, r2, #24
 8004a6a:	d545      	bpl.n	8004af8 <HAL_DMA_IRQHandler+0x170>
        if (hdma->Instance->CLLR == 0U)
 8004a6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004a6e:	b932      	cbnz	r2, 8004a7e <HAL_DMA_IRQHandler+0xf6>
          if (hdma->Instance->CBR1 == 0U)
 8004a70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a72:	b922      	cbnz	r2, 8004a7e <HAL_DMA_IRQHandler+0xf6>
            hdma->State = HAL_DMA_STATE_READY;
 8004a74:	2201      	movs	r2, #1
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004a76:	6f61      	ldr	r1, [r4, #116]	; 0x74
            hdma->State = HAL_DMA_STATE_READY;
 8004a78:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004a7c:	730a      	strb	r2, [r1, #12]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004a7e:	f44f 7040 	mov.w	r0, #768	; 0x300
      __HAL_UNLOCK(hdma);
 8004a82:	2100      	movs	r1, #0
      if (hdma->XferCpltCallback != NULL)
 8004a84:	6e22      	ldr	r2, [r4, #96]	; 0x60
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004a86:	60d8      	str	r0, [r3, #12]
      __HAL_UNLOCK(hdma);
 8004a88:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
      if (hdma->XferCpltCallback != NULL)
 8004a8c:	b10a      	cbz	r2, 8004a92 <HAL_DMA_IRQHandler+0x10a>
        hdma->XferCpltCallback(hdma);
 8004a8e:	4620      	mov	r0, r4
 8004a90:	4790      	blx	r2
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02e      	beq.n	8004af6 <HAL_DMA_IRQHandler+0x16e>
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004a98:	6822      	ldr	r2, [r4, #0]
    hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	2101      	movs	r1, #1
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004a9c:	6953      	ldr	r3, [r2, #20]
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004a9e:	6d20      	ldr	r0, [r4, #80]	; 0x50
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	6153      	str	r3, [r2, #20]
    __HAL_UNLOCK(hdma);
 8004aa6:	2200      	movs	r2, #0
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004aa8:	0603      	lsls	r3, r0, #24
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004aaa:	bf48      	it	mi
 8004aac:	6f63      	ldrmi	r3, [r4, #116]	; 0x74
    hdma->State = HAL_DMA_STATE_READY;
 8004aae:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004ab2:	bf48      	it	mi
 8004ab4:	7319      	strbmi	r1, [r3, #12]
    if (hdma->XferErrorCallback != NULL)
 8004ab6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    __HAL_UNLOCK(hdma);
 8004ab8:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    if (hdma->XferErrorCallback != NULL)
 8004abc:	b1db      	cbz	r3, 8004af6 <HAL_DMA_IRQHandler+0x16e>
      hdma->XferErrorCallback(hdma);
 8004abe:	4620      	mov	r0, r4
}
 8004ac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hdma->XferErrorCallback(hdma);
 8004ac4:	4718      	bx	r3
        hdma->State = HAL_DMA_STATE_READY;
 8004ac6:	2101      	movs	r1, #1
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004ac8:	695a      	ldr	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004aca:	6d20      	ldr	r0, [r4, #80]	; 0x50
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004acc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad0:	615a      	str	r2, [r3, #20]
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	f042 0202 	orr.w	r2, r2, #2
 8004ad8:	615a      	str	r2, [r3, #20]
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ada:	0602      	lsls	r2, r0, #24
        hdma->State = HAL_DMA_STATE_READY;
 8004adc:	f884 1054 	strb.w	r1, [r4, #84]	; 0x54
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004ae0:	d503      	bpl.n	8004aea <HAL_DMA_IRQHandler+0x162>
          hdma->Instance->CBR1 = 0U;
 8004ae2:	2200      	movs	r2, #0
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004ae4:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8004ae6:	7301      	strb	r1, [r0, #12]
          hdma->Instance->CBR1 = 0U;
 8004ae8:	649a      	str	r2, [r3, #72]	; 0x48
        __HAL_UNLOCK(hdma);
 8004aea:	2200      	movs	r2, #0
        if (hdma->XferAbortCallback != NULL)
 8004aec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        __HAL_UNLOCK(hdma);
 8004aee:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
        if (hdma->XferAbortCallback != NULL)
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e3      	bne.n	8004abe <HAL_DMA_IRQHandler+0x136>
}
 8004af6:	bd10      	pop	{r4, pc}
        if (hdma->Instance->CBR1 == 0U)
 8004af8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004afa:	2a00      	cmp	r2, #0
 8004afc:	d1bf      	bne.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
          hdma->State = HAL_DMA_STATE_READY;
 8004afe:	2201      	movs	r2, #1
 8004b00:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8004b04:	e7bb      	b.n	8004a7e <HAL_DMA_IRQHandler+0xf6>
 8004b06:	bf00      	nop

08004b08 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004b08:	b1e8      	cbz	r0, 8004b46 <HAL_DMA_ConfigChannelAttributes+0x3e>
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004b0a:	f011 0310 	ands.w	r3, r1, #16
 8004b0e:	d018      	beq.n	8004b42 <HAL_DMA_ConfigChannelAttributes+0x3a>
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004b10:	f04f 0c01 	mov.w	ip, #1
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004b14:	6803      	ldr	r3, [r0, #0]
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004b16:	f001 0111 	and.w	r1, r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004b1a:	f3c3 020b 	ubfx	r2, r3, #0, #12
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004b1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004b22:	f023 030f 	bic.w	r3, r3, #15
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004b26:	3a50      	subs	r2, #80	; 0x50
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004b28:	2911      	cmp	r1, #17
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004b2a:	f3c2 12c4 	ubfx	r2, r2, #7, #5
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004b2e:	6859      	ldr	r1, [r3, #4]
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004b30:	fa0c f202 	lsl.w	r2, ip, r2
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004b34:	bf0c      	ite	eq
 8004b36:	430a      	orreq	r2, r1
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004b38:	ea21 0202 	bicne.w	r2, r1, r2
  return HAL_OK;
 8004b3c:	2000      	movs	r0, #0
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004b3e:	605a      	str	r2, [r3, #4]
 8004b40:	4770      	bx	lr
  return HAL_OK;
 8004b42:	4618      	mov	r0, r3
}
 8004b44:	4770      	bx	lr
    return HAL_ERROR;
 8004b46:	2001      	movs	r0, #1
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop

08004b4c <HAL_DMAEx_List_Start_IT>:
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8004b4c:	b1f8      	cbz	r0, 8004b8e <HAL_DMAEx_List_Start_IT+0x42>
 8004b4e:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8004b50:	4603      	mov	r3, r0
 8004b52:	b1e2      	cbz	r2, 8004b8e <HAL_DMAEx_List_Start_IT+0x42>
  {
    return HAL_ERROR;
  }

  /* Check the DMA Mode is not DMA_NORMAL */
  if (hdma->Mode == DMA_NORMAL)
 8004b54:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004b56:	b1d1      	cbz	r1, 8004b8e <HAL_DMAEx_List_Start_IT+0x42>
{
 8004b58:	b410      	push	{r4}
  {
    return HAL_ERROR;
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8004b5a:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004b5e:	6819      	ldr	r1, [r3, #0]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004b60:	2801      	cmp	r0, #1
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004b62:	694c      	ldr	r4, [r1, #20]
  dma_state = hdma->State;
 8004b64:	fa5f fc80 	uxtb.w	ip, r0
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004b68:	d004      	beq.n	8004b74 <HAL_DMAEx_List_Start_IT+0x28>
 8004b6a:	f1bc 0f02 	cmp.w	ip, #2
 8004b6e:	d110      	bne.n	8004b92 <HAL_DMAEx_List_Start_IT+0x46>
 8004b70:	03e0      	lsls	r0, r4, #15
 8004b72:	d50e      	bpl.n	8004b92 <HAL_DMAEx_List_Start_IT+0x46>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004b74:	f893 0054 	ldrb.w	r0, [r3, #84]	; 0x54
 8004b78:	2801      	cmp	r0, #1
 8004b7a:	b2c4      	uxtb	r4, r0
 8004b7c:	d012      	beq.n	8004ba4 <HAL_DMAEx_List_Start_IT+0x58>
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004b7e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8004b80:	694b      	ldr	r3, [r1, #20]
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	614b      	str	r3, [r1, #20]
}
 8004b88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b8c:	4770      	bx	lr
    return HAL_ERROR;
 8004b8e:	2001      	movs	r0, #1
}
 8004b90:	4770      	bx	lr
    __HAL_UNLOCK(hdma);
 8004b92:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b94:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(hdma);
 8004b96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8004b9a:	2001      	movs	r0, #1
}
 8004b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ba0:	6599      	str	r1, [r3, #88]	; 0x58
}
 8004ba2:	4770      	bx	lr
      __HAL_LOCK(hdma);
 8004ba4:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 8004ba8:	2801      	cmp	r0, #1
 8004baa:	d02b      	beq.n	8004c04 <HAL_DMAEx_List_Start_IT+0xb8>
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004bac:	2000      	movs	r0, #0
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004bae:	f04f 0c02 	mov.w	ip, #2
      __HAL_LOCK(hdma);
 8004bb2:	f883 404c 	strb.w	r4, [r3, #76]	; 0x4c
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004bb6:	f883 c054 	strb.w	ip, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 8004bba:	f882 c00c 	strb.w	ip, [r2, #12]
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 8004bbe:	6598      	str	r0, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004bc0:	6110      	str	r0, [r2, #16]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004bc2:	6948      	ldr	r0, [r1, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8004bc4:	6e5c      	ldr	r4, [r3, #100]	; 0x64
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004bc6:	f440 40ba 	orr.w	r0, r0, #23808	; 0x5d00
 8004bca:	6148      	str	r0, [r1, #20]
      if (hdma->XferHalfCpltCallback != NULL)
 8004bcc:	b11c      	cbz	r4, 8004bd6 <HAL_DMAEx_List_Start_IT+0x8a>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004bce:	6948      	ldr	r0, [r1, #20]
 8004bd0:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8004bd4:	6148      	str	r0, [r1, #20]
      if (hdma->XferSuspendCallback != NULL)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd8:	b11b      	cbz	r3, 8004be2 <HAL_DMAEx_List_Start_IT+0x96>
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004bda:	694b      	ldr	r3, [r1, #20]
 8004bdc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004be0:	614b      	str	r3, [r1, #20]
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 8004be2:	6813      	ldr	r3, [r2, #0]
  else
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004be4:	4808      	ldr	r0, [pc, #32]	; (8004c08 <HAL_DMAEx_List_Start_IT+0xbc>)
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004be6:	6a1c      	ldr	r4, [r3, #32]
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004be8:	4a08      	ldr	r2, [pc, #32]	; (8004c0c <HAL_DMAEx_List_Start_IT+0xc0>)
 8004bea:	f014 0f02 	tst.w	r4, #2
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004bee:	f64f 74fc 	movw	r4, #65532	; 0xfffc
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004bf2:	bf08      	it	eq
 8004bf4:	4602      	moveq	r2, r0
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004bf6:	0c18      	lsrs	r0, r3, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004bf8:	4023      	ands	r3, r4
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004bfa:	0400      	lsls	r0, r0, #16
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004bfc:	4313      	orrs	r3, r2
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004bfe:	6008      	str	r0, [r1, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004c00:	67cb      	str	r3, [r1, #124]	; 0x7c
 8004c02:	e7bc      	b.n	8004b7e <HAL_DMAEx_List_Start_IT+0x32>
      __HAL_LOCK(hdma);
 8004c04:	2002      	movs	r0, #2
 8004c06:	e7bf      	b.n	8004b88 <HAL_DMAEx_List_Start_IT+0x3c>
 8004c08:	f8010000 	.word	0xf8010000
 8004c0c:	fe010000 	.word	0xfe010000

08004c10 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004c14:	680c      	ldr	r4, [r1, #0]
{
 8004c16:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	f000 80c8 	beq.w	8004dae <HAL_GPIO_Init+0x19e>
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        tmp = EXTI->EXTICR[position >> 2U];
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004c1e:	4a65      	ldr	r2, [pc, #404]	; (8004db4 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0U;
 8004c20:	2300      	movs	r3, #0
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004c22:	ea02 2290 	and.w	r2, r2, r0, lsr #10
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8004c26:	4e64      	ldr	r6, [pc, #400]	; (8004db8 <HAL_GPIO_Init+0x1a8>)
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004c28:	9201      	str	r2, [sp, #4]
 8004c2a:	e068      	b.n	8004cfe <HAL_GPIO_Init+0xee>
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004c2c:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 8004c2e:	f8d0 b000 	ldr.w	fp, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004c32:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004c36:	fa07 f70c 	lsl.w	r7, r7, ip
 8004c3a:	ea2b 0b07 	bic.w	fp, fp, r7
 8004c3e:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004c40:	f002 0903 	and.w	r9, r2, #3
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c44:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004c48:	fa09 fa0c 	lsl.w	sl, r9, ip
 8004c4c:	ea4a 0a0b 	orr.w	sl, sl, fp
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c50:	f1be 0f01 	cmp.w	lr, #1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004c54:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 8004c56:	f8c0 a000 	str.w	sl, [r0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004c5a:	f240 8088 	bls.w	8004d6e <HAL_GPIO_Init+0x15e>
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8004c5e:	f1b9 0f03 	cmp.w	r9, #3
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004c62:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8004c64:	f000 809f 	beq.w	8004da6 <HAL_GPIO_Init+0x196>
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004c68:	fa05 f50c 	lsl.w	r5, r5, ip
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004c6c:	9f00      	ldr	r7, [sp, #0]
        tmp = GPIOx->PUPDR;
 8004c6e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8004c72:	ea0c 0707 	and.w	r7, ip, r7
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8004c76:	433d      	orrs	r5, r7
        GPIOx->PUPDR = tmp;
 8004c78:	60c5      	str	r5, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c7a:	00d5      	lsls	r5, r2, #3
 8004c7c:	d53b      	bpl.n	8004cf6 <HAL_GPIO_Init+0xe6>
        tmp = EXTI->EXTICR[position >> 2U];
 8004c7e:	f023 0703 	bic.w	r7, r3, #3
 8004c82:	f107 4988 	add.w	r9, r7, #1140850688	; 0x44000000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004c86:	270f      	movs	r7, #15
 8004c88:	f003 0503 	and.w	r5, r3, #3
 8004c8c:	00ed      	lsls	r5, r5, #3
 8004c8e:	fa07 fe05 	lsl.w	lr, r7, r5
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004c92:	9f01      	ldr	r7, [sp, #4]
 8004c94:	f509 3908 	add.w	r9, r9, #139264	; 0x22000
 8004c98:	fa07 f505 	lsl.w	r5, r7, r5
        tmp &= ~((uint32_t)iocurrent);
 8004c9c:	ea6f 0708 	mvn.w	r7, r8
        tmp = EXTI->EXTICR[position >> 2U];
 8004ca0:	f8d9 c060 	ldr.w	ip, [r9, #96]	; 0x60
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ca4:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004ca8:	ea2c 0c0e 	bic.w	ip, ip, lr
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8004cac:	ea45 050c 	orr.w	r5, r5, ip
        EXTI->EXTICR[position >> 2U] = tmp;
 8004cb0:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
        tmp = EXTI->RTSR1;
 8004cb4:	6835      	ldr	r5, [r6, #0]
        tmp &= ~((uint32_t)iocurrent);
 8004cb6:	bf0c      	ite	eq
 8004cb8:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8004cba:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->RTSR1 = tmp;
 8004cbe:	6035      	str	r5, [r6, #0]

        tmp = EXTI->FTSR1;
 8004cc0:	6875      	ldr	r5, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cc2:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        tmp &= ~((uint32_t)iocurrent);
 8004cc6:	bf0c      	ite	eq
 8004cc8:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8004cca:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->FTSR1 = tmp;
 8004cce:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8004cd0:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004cd4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        tmp &= ~((uint32_t)iocurrent);
 8004cd8:	bf0c      	ite	eq
 8004cda:	403d      	andeq	r5, r7
        {
          tmp |= iocurrent;
 8004cdc:	ea48 0505 	orrne.w	r5, r8, r5
        }
        EXTI->EMR1 = tmp;
 8004ce0:	f8c6 5084 	str.w	r5, [r6, #132]	; 0x84

        tmp = EXTI->IMR1;
 8004ce4:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004ce8:	03d2      	lsls	r2, r2, #15
        tmp &= ~((uint32_t)iocurrent);
 8004cea:	bf54      	ite	pl
 8004cec:	403d      	andpl	r5, r7
        {
          tmp |= iocurrent;
 8004cee:	ea48 0505 	orrmi.w	r5, r8, r5
        }
        EXTI->IMR1 = tmp;
 8004cf2:	f8c6 5080 	str.w	r5, [r6, #128]	; 0x80
      }
    }

    position++;
 8004cf6:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8004cf8:	fa34 f203 	lsrs.w	r2, r4, r3
 8004cfc:	d057      	beq.n	8004dae <HAL_GPIO_Init+0x19e>
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8004cfe:	2201      	movs	r2, #1
 8004d00:	fa02 f503 	lsl.w	r5, r2, r3
    if (iocurrent != 0U)
 8004d04:	ea15 0804 	ands.w	r8, r5, r4
 8004d08:	d0f5      	beq.n	8004cf6 <HAL_GPIO_Init+0xe6>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004d0a:	684a      	ldr	r2, [r1, #4]
 8004d0c:	f022 0e10 	bic.w	lr, r2, #16
 8004d10:	f1be 0f02 	cmp.w	lr, #2
 8004d14:	d18a      	bne.n	8004c2c <HAL_GPIO_Init+0x1c>
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d16:	f04f 090f 	mov.w	r9, #15
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d1a:	690f      	ldr	r7, [r1, #16]
        tmp = GPIOx->AFR[position >> 3U];
 8004d1c:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d20:	f003 0c07 	and.w	ip, r3, #7
 8004d24:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8004d28:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d2c:	f007 070f 	and.w	r7, r7, #15
 8004d30:	fa07 f70c 	lsl.w	r7, r7, ip
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d34:	fa09 fc0c 	lsl.w	ip, r9, ip
        tmp = GPIOx->AFR[position >> 3U];
 8004d38:	f8de 9020 	ldr.w	r9, [lr, #32]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d3c:	ea29 0c0c 	bic.w	ip, r9, ip
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8004d40:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = tmp;
 8004d44:	f8ce 7020 	str.w	r7, [lr, #32]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004d48:	2703      	movs	r7, #3
      tmp = GPIOx->MODER;
 8004d4a:	f8d0 a000 	ldr.w	sl, [r0]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004d4e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004d52:	fa07 f70c 	lsl.w	r7, r7, ip
 8004d56:	ea2a 0a07 	bic.w	sl, sl, r7
 8004d5a:	43ff      	mvns	r7, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8004d5c:	f002 0903 	and.w	r9, r2, #3
 8004d60:	fa09 fe0c 	lsl.w	lr, r9, ip
 8004d64:	ea4e 0e0a 	orr.w	lr, lr, sl
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8004d68:	9700      	str	r7, [sp, #0]
      GPIOx->MODER = tmp;
 8004d6a:	f8c0 e000 	str.w	lr, [r0]
        tmp = GPIOx->OSPEEDR;
 8004d6e:	f8d0 e008 	ldr.w	lr, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004d72:	9f00      	ldr	r7, [sp, #0]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8004d74:	f1b9 0f03 	cmp.w	r9, #3
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004d78:	ea0e 0e07 	and.w	lr, lr, r7
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8004d7c:	68cf      	ldr	r7, [r1, #12]
 8004d7e:	fa07 fa0c 	lsl.w	sl, r7, ip
 8004d82:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = tmp;
 8004d86:	f8c0 e008 	str.w	lr, [r0, #8]
        tmp = GPIOx->OTYPER;
 8004d8a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d8e:	ea2e 0e05 	bic.w	lr, lr, r5
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004d92:	f3c2 1500 	ubfx	r5, r2, #4, #1
 8004d96:	fa05 f503 	lsl.w	r5, r5, r3
 8004d9a:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = tmp;
 8004d9e:	6045      	str	r5, [r0, #4]
          (((pGPIO_Init->Mode & GPIO_MODE) == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8004da0:	688d      	ldr	r5, [r1, #8]
      if (((pGPIO_Init->Mode & GPIO_MODE) != GPIO_MODE_ANALOG) ||
 8004da2:	f47f af61 	bne.w	8004c68 <HAL_GPIO_Init+0x58>
 8004da6:	2d01      	cmp	r5, #1
 8004da8:	f47f af5e 	bne.w	8004c68 <HAL_GPIO_Init+0x58>
 8004dac:	e765      	b.n	8004c7a <HAL_GPIO_Init+0x6a>
  }
}
 8004dae:	b003      	add	sp, #12
 8004db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db4:	002f7f7f 	.word	0x002f7f7f
 8004db8:	44022000 	.word	0x44022000

08004dbc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004dbc:	b10a      	cbz	r2, 8004dc2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004dbe:	6181      	str	r1, [r0, #24]
 8004dc0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004dc2:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop

08004dc8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004dc8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004dca:	ea01 0203 	and.w	r2, r1, r3
 8004dce:	ea21 0103 	bic.w	r1, r1, r3
 8004dd2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004dd6:	6181      	str	r1, [r0, #24]
}
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop

08004ddc <HAL_ICACHE_Enable>:
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004ddc:	4a03      	ldr	r2, [pc, #12]	; (8004dec <HAL_ICACHE_Enable+0x10>)

  return HAL_OK;
}
 8004dde:	2000      	movs	r0, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004de0:	6813      	ldr	r3, [r2, #0]
 8004de2:	f043 0301 	orr.w	r3, r3, #1
 8004de6:	6013      	str	r3, [r2, #0]
}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40030400 	.word	0x40030400

08004df0 <HAL_MspInit>:
void HAL_MspInit(void)
{
  /* NOTE : This function is generated automatically by STM32CubeMX and eventually
            modified by the user
   */
}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop

08004df4 <HAL_RCC_GetSysClockFreq.part.0>:
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }

  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004df4:	4b42      	ldr	r3, [pc, #264]	; (8004f00 <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 8004df6:	69da      	ldr	r2, [r3, #28]
 8004df8:	f002 0218 	and.w	r2, r2, #24
 8004dfc:	2a18      	cmp	r2, #24
 8004dfe:	d001      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq.part.0+0x10>
  }

  else
  {
    /* HSI is the default system clock source */
    sysclockfreq = (uint32_t) HSI_VALUE;
 8004e00:	4840      	ldr	r0, [pc, #256]	; (8004f04 <HAL_RCC_GetSysClockFreq.part.0+0x110>)
  }

  return sysclockfreq;
}
 8004e02:	4770      	bx	lr
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e04:	6a99      	ldr	r1, [r3, #40]	; 0x28
uint32_t HAL_RCC_GetSysClockFreq(void)
 8004e06:	b430      	push	{r4, r5}
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004e08:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004e0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if (pllm != 0U)
 8004e0c:	f414 5f7c 	tst.w	r4, #16128	; 0x3f00
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004e10:	6b9d      	ldr	r5, [r3, #56]	; 0x38
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 8004e12:	f3c4 2005 	ubfx	r0, r4, #8, #6
    if (pllm != 0U)
 8004e16:	d039      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq.part.0+0x98>
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004e18:	f3c2 1200 	ubfx	r2, r2, #4, #1
                                               RCC_PLL1FRACR_PLL1FRACN) >> RCC_PLL1FRACR_PLL1FRACN_Pos));
 8004e1c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004e20:	fb05 f202 	mul.w	r2, r5, r2
 8004e24:	ee07 2a90 	vmov	s15, r2
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8004e28:	f001 0103 	and.w	r1, r1, #3
      switch (pllsource)
 8004e2c:	2901      	cmp	r1, #1
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & \
 8004e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      switch (pllsource)
 8004e32:	d03f      	beq.n	8004eb4 <HAL_RCC_GetSysClockFreq.part.0+0xc0>
 8004e34:	2903      	cmp	r1, #3
 8004e36:	d12b      	bne.n	8004e90 <HAL_RCC_GetSysClockFreq.part.0+0x9c>
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	ee05 0a90 	vmov	s11, r0
 8004e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e42:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e46:	eddf 6a30 	vldr	s13, [pc, #192]	; 8004f08 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 8004e4a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e4e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e52:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004e56:	ed9f 5a2d 	vldr	s10, [pc, #180]	; 8004f0c <HAL_RCC_GetSysClockFreq.part.0+0x118>
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e62:	eec5 6a25 	vdiv.f32	s13, s10, s11
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e66:	ee77 7a86 	vadd.f32	s15, s15, s12
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + 1U) ;
 8004e6e:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <HAL_RCC_GetSysClockFreq.part.0+0x10c>)
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8004e76:	3301      	adds	r3, #1
      sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004e78:	ee07 3a10 	vmov	s14, r3
 8004e7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004e80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e84:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8004e88:	ee17 0a90 	vmov	r0, s15
}
 8004e8c:	bc30      	pop	{r4, r5}
 8004e8e:	4770      	bx	lr
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	ee05 0a90 	vmov	s11, r0
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	ee07 3a10 	vmov	s14, r3
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e9e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8004f08 <HAL_RCC_GetSysClockFreq.part.0+0x114>
 8004ea2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
          pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ea6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004eaa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8004eae:	ed9f 5a18 	vldr	s10, [pc, #96]	; 8004f10 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
 8004eb2:	e7d2      	b.n	8004e5a <HAL_RCC_GetSysClockFreq.part.0+0x66>
          if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	0692      	lsls	r2, r2, #26
 8004eb8:	d5be      	bpl.n	8004e38 <HAL_RCC_GetSysClockFreq.part.0+0x44>
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eba:	6819      	ldr	r1, [r3, #0]
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ebe:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004f08 <HAL_RCC_GetSysClockFreq.part.0+0x114>
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec6:	ee06 3a90 	vmov	s13, r3
            hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004eca:	4a0e      	ldr	r2, [pc, #56]	; (8004f04 <HAL_RCC_GetSysClockFreq.part.0+0x110>)
 8004ecc:	f3c1 03c1 	ubfx	r3, r1, #3, #2
 8004ed0:	40da      	lsrs	r2, r3
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004ed2:	ee05 0a90 	vmov	s11, r0
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ed6:	ee67 7a87 	vmul.f32	s15, s15, s14
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eda:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004ede:	ee06 2a10 	vmov	s12, r2
 8004ee2:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8004ee6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004eee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ef2:	ee86 7a05 	vdiv.f32	s14, s12, s10
                                                            (fracn1 / (float_t)0x2000) + (float_t)1);
 8004ef6:	ee77 7aa5 	vadd.f32	s15, s15, s11
            pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004efa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efe:	e7b6      	b.n	8004e6e <HAL_RCC_GetSysClockFreq.part.0+0x7a>
 8004f00:	44020c00 	.word	0x44020c00
 8004f04:	017d7840 	.word	0x017d7840
 8004f08:	39000000 	.word	0x39000000
 8004f0c:	4bbebc20 	.word	0x4bbebc20
 8004f10:	4a742400 	.word	0x4a742400

08004f14 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 8004f14:	4a0e      	ldr	r2, [pc, #56]	; (8004f50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8004f16:	69d3      	ldr	r3, [r2, #28]
 8004f18:	f003 0318 	and.w	r3, r3, #24
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d015      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0x38>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f20:	69d3      	ldr	r3, [r2, #28]
 8004f22:	f013 0f18 	tst.w	r3, #24
 8004f26:	d108      	bne.n	8004f3a <HAL_RCC_GetSysClockFreq+0x26>
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 8004f28:	6813      	ldr	r3, [r2, #0]
 8004f2a:	069b      	lsls	r3, r3, #26
 8004f2c:	d50c      	bpl.n	8004f48 <HAL_RCC_GetSysClockFreq+0x34>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8004f2e:	6813      	ldr	r3, [r2, #0]
 8004f30:	4808      	ldr	r0, [pc, #32]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x40>)
 8004f32:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004f36:	40d8      	lsrs	r0, r3
 8004f38:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f3a:	69d3      	ldr	r3, [r2, #28]
 8004f3c:	f003 0318 	and.w	r3, r3, #24
 8004f40:	2b10      	cmp	r3, #16
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_GetSysClockFreq+0x34>
 8004f44:	f7ff bf56 	b.w	8004df4 <HAL_RCC_GetSysClockFreq.part.0>
      sysclockfreq = (uint32_t) HSI_VALUE;
 8004f48:	4802      	ldr	r0, [pc, #8]	; (8004f54 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8004f4a:	4770      	bx	lr
    sysclockfreq = CSI_VALUE;
 8004f4c:	4802      	ldr	r0, [pc, #8]	; (8004f58 <HAL_RCC_GetSysClockFreq+0x44>)
 8004f4e:	4770      	bx	lr
 8004f50:	44020c00 	.word	0x44020c00
 8004f54:	017d7840 	.word	0x017d7840
 8004f58:	003d0900 	.word	0x003d0900

08004f5c <HAL_RCC_ClockConfig>:
  if (pClkInitStruct == NULL)
 8004f5c:	2800      	cmp	r0, #0
 8004f5e:	f000 8115 	beq.w	800518c <HAL_RCC_ClockConfig+0x230>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f62:	4a8e      	ldr	r2, [pc, #568]	; (800519c <HAL_RCC_ClockConfig+0x240>)
{
 8004f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f68:	6813      	ldr	r3, [r2, #0]
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	428b      	cmp	r3, r1
 8004f72:	460d      	mov	r5, r1
 8004f74:	d20c      	bcs.n	8004f90 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	6813      	ldr	r3, [r2, #0]
 8004f78:	f023 030f 	bic.w	r3, r3, #15
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f80:	6813      	ldr	r3, [r2, #0]
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	428b      	cmp	r3, r1
 8004f88:	d002      	beq.n	8004f90 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004f8a:	2001      	movs	r0, #1
}
 8004f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004f90:	6823      	ldr	r3, [r4, #0]
 8004f92:	06de      	lsls	r6, r3, #27
 8004f94:	d50d      	bpl.n	8004fb2 <HAL_RCC_ClockConfig+0x56>
    if ((pClkInitStruct->APB3CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 8004f96:	4982      	ldr	r1, [pc, #520]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 8004f98:	6960      	ldr	r0, [r4, #20]
 8004f9a:	6a0a      	ldr	r2, [r1, #32]
 8004f9c:	0a12      	lsrs	r2, r2, #8
 8004f9e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004fa2:	4290      	cmp	r0, r2
 8004fa4:	d905      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 8004fa6:	6a0a      	ldr	r2, [r1, #32]
 8004fa8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8004fac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004fb0:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb2:	0718      	lsls	r0, r3, #28
 8004fb4:	d50d      	bpl.n	8004fd2 <HAL_RCC_ClockConfig+0x76>
    if ((pClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004fb6:	497a      	ldr	r1, [pc, #488]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 8004fb8:	6920      	ldr	r0, [r4, #16]
 8004fba:	6a0a      	ldr	r2, [r1, #32]
 8004fbc:	0912      	lsrs	r2, r2, #4
 8004fbe:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004fc2:	4290      	cmp	r0, r2
 8004fc4:	d905      	bls.n	8004fd2 <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 8004fc6:	6a0a      	ldr	r2, [r1, #32]
 8004fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fcc:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 8004fd0:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fd2:	0759      	lsls	r1, r3, #29
 8004fd4:	d50b      	bpl.n	8004fee <HAL_RCC_ClockConfig+0x92>
    if ((pClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004fd6:	4972      	ldr	r1, [pc, #456]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 8004fd8:	68e0      	ldr	r0, [r4, #12]
 8004fda:	6a0a      	ldr	r2, [r1, #32]
 8004fdc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8004fe0:	4290      	cmp	r0, r2
 8004fe2:	d904      	bls.n	8004fee <HAL_RCC_ClockConfig+0x92>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 8004fe4:	6a0a      	ldr	r2, [r1, #32]
 8004fe6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004fea:	4302      	orrs	r2, r0
 8004fec:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fee:	079a      	lsls	r2, r3, #30
 8004ff0:	f140 8095 	bpl.w	800511e <HAL_RCC_ClockConfig+0x1c2>
    if ((pClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004ff4:	486a      	ldr	r0, [pc, #424]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	68a1      	ldr	r1, [r4, #8]
 8004ff8:	6a02      	ldr	r2, [r0, #32]
 8004ffa:	f002 020f 	and.w	r2, r2, #15
 8004ffe:	4291      	cmp	r1, r2
 8005000:	d904      	bls.n	800500c <HAL_RCC_ClockConfig+0xb0>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005002:	6a02      	ldr	r2, [r0, #32]
 8005004:	f022 020f 	bic.w	r2, r2, #15
 8005008:	430a      	orrs	r2, r1
 800500a:	6202      	str	r2, [r0, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500c:	07d8      	lsls	r0, r3, #31
 800500e:	d52f      	bpl.n	8005070 <HAL_RCC_ClockConfig+0x114>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005010:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005012:	4b63      	ldr	r3, [pc, #396]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005014:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005016:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005018:	f000 8089 	beq.w	800512e <HAL_RCC_ClockConfig+0x1d2>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501c:	2a02      	cmp	r2, #2
 800501e:	f000 80b1 	beq.w	8005184 <HAL_RCC_ClockConfig+0x228>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005022:	2a01      	cmp	r2, #1
 8005024:	f000 80b6 	beq.w	8005194 <HAL_RCC_ClockConfig+0x238>
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005028:	0799      	lsls	r1, r3, #30
 800502a:	d5ae      	bpl.n	8004f8a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 800502c:	4e5c      	ldr	r6, [pc, #368]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800502e:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pClkInitStruct->SYSCLKSource);
 8005032:	69f3      	ldr	r3, [r6, #28]
 8005034:	f023 0303 	bic.w	r3, r3, #3
 8005038:	4313      	orrs	r3, r2
 800503a:	61f3      	str	r3, [r6, #28]
    tickstart = HAL_GetTick();
 800503c:	f7ff f940 	bl	80042c0 <HAL_GetTick>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005040:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8005042:	4607      	mov	r7, r0
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005044:	2b03      	cmp	r3, #3
 8005046:	d07b      	beq.n	8005140 <HAL_RCC_ClockConfig+0x1e4>
      if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005048:	2b02      	cmp	r3, #2
 800504a:	f000 8084 	beq.w	8005156 <HAL_RCC_ClockConfig+0x1fa>
      else if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800504e:	2b01      	cmp	r3, #1
 8005050:	d106      	bne.n	8005060 <HAL_RCC_ClockConfig+0x104>
 8005052:	e08b      	b.n	800516c <HAL_RCC_ClockConfig+0x210>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005054:	f7ff f934 	bl	80042c0 <HAL_GetTick>
 8005058:	1bc0      	subs	r0, r0, r7
 800505a:	4540      	cmp	r0, r8
 800505c:	f200 8098 	bhi.w	8005190 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005060:	69f3      	ldr	r3, [r6, #28]
 8005062:	f013 0f18 	tst.w	r3, #24
 8005066:	d1f5      	bne.n	8005054 <HAL_RCC_ClockConfig+0xf8>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005068:	6823      	ldr	r3, [r4, #0]
 800506a:	079a      	lsls	r2, r3, #30
 800506c:	d506      	bpl.n	800507c <HAL_RCC_ClockConfig+0x120>
    if ((pClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800506e:	68a1      	ldr	r1, [r4, #8]
 8005070:	484b      	ldr	r0, [pc, #300]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 8005072:	6a02      	ldr	r2, [r0, #32]
 8005074:	f002 020f 	and.w	r2, r2, #15
 8005078:	428a      	cmp	r2, r1
 800507a:	d87d      	bhi.n	8005178 <HAL_RCC_ClockConfig+0x21c>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507c:	4947      	ldr	r1, [pc, #284]	; (800519c <HAL_RCC_ClockConfig+0x240>)
 800507e:	680a      	ldr	r2, [r1, #0]
 8005080:	f002 020f 	and.w	r2, r2, #15
 8005084:	42aa      	cmp	r2, r5
 8005086:	d90a      	bls.n	800509e <HAL_RCC_ClockConfig+0x142>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005088:	680a      	ldr	r2, [r1, #0]
 800508a:	f022 020f 	bic.w	r2, r2, #15
 800508e:	432a      	orrs	r2, r5
 8005090:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005092:	680a      	ldr	r2, [r1, #0]
 8005094:	f002 020f 	and.w	r2, r2, #15
 8005098:	42aa      	cmp	r2, r5
 800509a:	f47f af76 	bne.w	8004f8a <HAL_RCC_ClockConfig+0x2e>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509e:	075f      	lsls	r7, r3, #29
 80050a0:	d50b      	bpl.n	80050ba <HAL_RCC_ClockConfig+0x15e>
    if ((pClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80050a2:	493f      	ldr	r1, [pc, #252]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 80050a4:	68e0      	ldr	r0, [r4, #12]
 80050a6:	6a0a      	ldr	r2, [r1, #32]
 80050a8:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80050ac:	4290      	cmp	r0, r2
 80050ae:	d204      	bcs.n	80050ba <HAL_RCC_ClockConfig+0x15e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pClkInitStruct->APB1CLKDivider);
 80050b0:	6a0a      	ldr	r2, [r1, #32]
 80050b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80050b6:	4302      	orrs	r2, r0
 80050b8:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ba:	071e      	lsls	r6, r3, #28
 80050bc:	d50d      	bpl.n	80050da <HAL_RCC_ClockConfig+0x17e>
    if ((pClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80050be:	4938      	ldr	r1, [pc, #224]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 80050c0:	6920      	ldr	r0, [r4, #16]
 80050c2:	6a0a      	ldr	r2, [r1, #32]
 80050c4:	0912      	lsrs	r2, r2, #4
 80050c6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80050ca:	4290      	cmp	r0, r2
 80050cc:	d205      	bcs.n	80050da <HAL_RCC_ClockConfig+0x17e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pClkInitStruct->APB2CLKDivider) << 4));
 80050ce:	6a0a      	ldr	r2, [r1, #32]
 80050d0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050d4:	ea42 1200 	orr.w	r2, r2, r0, lsl #4
 80050d8:	620a      	str	r2, [r1, #32]
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80050da:	06dd      	lsls	r5, r3, #27
 80050dc:	d50d      	bpl.n	80050fa <HAL_RCC_ClockConfig+0x19e>
    if ((pClkInitStruct->APB3CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE3) >> 8))
 80050de:	4a30      	ldr	r2, [pc, #192]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 80050e0:	6961      	ldr	r1, [r4, #20]
 80050e2:	6a13      	ldr	r3, [r2, #32]
 80050e4:	0a1b      	lsrs	r3, r3, #8
 80050e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80050ea:	4299      	cmp	r1, r3
 80050ec:	d205      	bcs.n	80050fa <HAL_RCC_ClockConfig+0x19e>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE3, ((pClkInitStruct->APB3CLKDivider) << 8));
 80050ee:	6a13      	ldr	r3, [r2, #32]
 80050f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050f4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80050f8:	6213      	str	r3, [r2, #32]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80050fa:	f7ff ff0b 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
}
 80050fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005102:	4603      	mov	r3, r0
 8005104:	4a26      	ldr	r2, [pc, #152]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
 8005106:	4927      	ldr	r1, [pc, #156]	; (80051a4 <HAL_RCC_ClockConfig+0x248>)
 8005108:	6a12      	ldr	r2, [r2, #32]
  halstatus = HAL_InitTick(uwTickPrio);
 800510a:	4827      	ldr	r0, [pc, #156]	; (80051a8 <HAL_RCC_ClockConfig+0x24c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800510c:	f002 020f 	and.w	r2, r2, #15
 8005110:	5c89      	ldrb	r1, [r1, r2]
 8005112:	4a26      	ldr	r2, [pc, #152]	; (80051ac <HAL_RCC_ClockConfig+0x250>)
 8005114:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8005116:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005118:	6013      	str	r3, [r2, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800511a:	f004 bf7b 	b.w	800a014 <HAL_InitTick>
  if (((pClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511e:	07da      	lsls	r2, r3, #31
 8005120:	d5ac      	bpl.n	800507c <HAL_RCC_ClockConfig+0x120>
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005122:	6862      	ldr	r2, [r4, #4]
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005124:	4b1e      	ldr	r3, [pc, #120]	; (80051a0 <HAL_RCC_ClockConfig+0x244>)
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005126:	2a03      	cmp	r2, #3
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005128:	681b      	ldr	r3, [r3, #0]
    if (pClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800512a:	f47f af77 	bne.w	800501c <HAL_RCC_ClockConfig+0xc0>
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800512e:	019f      	lsls	r7, r3, #6
 8005130:	f53f af7c 	bmi.w	800502c <HAL_RCC_ClockConfig+0xd0>
 8005134:	e729      	b.n	8004f8a <HAL_RCC_ClockConfig+0x2e>
        if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005136:	f7ff f8c3 	bl	80042c0 <HAL_GetTick>
 800513a:	1bc3      	subs	r3, r0, r7
 800513c:	4543      	cmp	r3, r8
 800513e:	d827      	bhi.n	8005190 <HAL_RCC_ClockConfig+0x234>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005140:	69f3      	ldr	r3, [r6, #28]
 8005142:	f003 0318 	and.w	r3, r3, #24
 8005146:	2b18      	cmp	r3, #24
 8005148:	d1f5      	bne.n	8005136 <HAL_RCC_ClockConfig+0x1da>
 800514a:	e78d      	b.n	8005068 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800514c:	f7ff f8b8 	bl	80042c0 <HAL_GetTick>
 8005150:	1bc0      	subs	r0, r0, r7
 8005152:	4540      	cmp	r0, r8
 8005154:	d81c      	bhi.n	8005190 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005156:	69f3      	ldr	r3, [r6, #28]
 8005158:	f003 0318 	and.w	r3, r3, #24
 800515c:	2b10      	cmp	r3, #16
 800515e:	d1f5      	bne.n	800514c <HAL_RCC_ClockConfig+0x1f0>
 8005160:	e782      	b.n	8005068 <HAL_RCC_ClockConfig+0x10c>
          if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8005162:	f7ff f8ad 	bl	80042c0 <HAL_GetTick>
 8005166:	1bc0      	subs	r0, r0, r7
 8005168:	4540      	cmp	r0, r8
 800516a:	d811      	bhi.n	8005190 <HAL_RCC_ClockConfig+0x234>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_CSI)
 800516c:	69f3      	ldr	r3, [r6, #28]
 800516e:	f003 0318 	and.w	r3, r3, #24
 8005172:	2b08      	cmp	r3, #8
 8005174:	d1f5      	bne.n	8005162 <HAL_RCC_ClockConfig+0x206>
 8005176:	e777      	b.n	8005068 <HAL_RCC_ClockConfig+0x10c>
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pClkInitStruct->AHBCLKDivider);
 8005178:	6a02      	ldr	r2, [r0, #32]
 800517a:	f022 020f 	bic.w	r2, r2, #15
 800517e:	4311      	orrs	r1, r2
 8005180:	6201      	str	r1, [r0, #32]
 8005182:	e77b      	b.n	800507c <HAL_RCC_ClockConfig+0x120>
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005184:	039e      	lsls	r6, r3, #14
 8005186:	f53f af51 	bmi.w	800502c <HAL_RCC_ClockConfig+0xd0>
 800518a:	e6fe      	b.n	8004f8a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800518c:	2001      	movs	r0, #1
}
 800518e:	4770      	bx	lr
          return HAL_TIMEOUT;
 8005190:	2003      	movs	r0, #3
 8005192:	e6fb      	b.n	8004f8c <HAL_RCC_ClockConfig+0x30>
        if (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005194:	0598      	lsls	r0, r3, #22
 8005196:	f53f af49 	bmi.w	800502c <HAL_RCC_ClockConfig+0xd0>
 800519a:	e6f6      	b.n	8004f8a <HAL_RCC_ClockConfig+0x2e>
 800519c:	40022000 	.word	0x40022000
 80051a0:	44020c00 	.word	0x44020c00
 80051a4:	0801bc68 	.word	0x0801bc68
 80051a8:	20000008 	.word	0x20000008
 80051ac:	2000000c 	.word	0x2000000c

080051b0 <HAL_RCC_GetHCLKFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80051b0:	4a15      	ldr	r2, [pc, #84]	; (8005208 <HAL_RCC_GetHCLKFreq+0x58>)
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051b2:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_CSI)
 80051b4:	69d3      	ldr	r3, [r2, #28]
 80051b6:	f003 0318 	and.w	r3, r3, #24
 80051ba:	2b08      	cmp	r3, #8
 80051bc:	d021      	beq.n	8005202 <HAL_RCC_GetHCLKFreq+0x52>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051be:	69d3      	ldr	r3, [r2, #28]
 80051c0:	f013 0f18 	tst.w	r3, #24
 80051c4:	d012      	beq.n	80051ec <HAL_RCC_GetHCLKFreq+0x3c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80051c6:	69d3      	ldr	r3, [r2, #28]
 80051c8:	f003 0318 	and.w	r3, r3, #24
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d016      	beq.n	80051fe <HAL_RCC_GetHCLKFreq+0x4e>
 80051d0:	f7ff fe10 	bl	8004df4 <HAL_RCC_GetSysClockFreq.part.0>

  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80051d4:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <HAL_RCC_GetHCLKFreq+0x58>)
 80051d6:	490d      	ldr	r1, [pc, #52]	; (800520c <HAL_RCC_GetHCLKFreq+0x5c>)
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a0d      	ldr	r2, [pc, #52]	; (8005210 <HAL_RCC_GetHCLKFreq+0x60>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80051dc:	f003 030f 	and.w	r3, r3, #15
 80051e0:	5ccb      	ldrb	r3, [r1, r3]
 80051e2:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80051e6:	40d8      	lsrs	r0, r3
 80051e8:	6010      	str	r0, [r2, #0]

  return SystemCoreClock;
}
 80051ea:	bd08      	pop	{r3, pc}
    if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIVF) != 0U)
 80051ec:	6813      	ldr	r3, [r2, #0]
 80051ee:	069b      	lsls	r3, r3, #26
 80051f0:	d505      	bpl.n	80051fe <HAL_RCC_GetHCLKFreq+0x4e>
      sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80051f2:	6813      	ldr	r3, [r2, #0]
 80051f4:	4807      	ldr	r0, [pc, #28]	; (8005214 <HAL_RCC_GetHCLKFreq+0x64>)
 80051f6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80051fa:	40d8      	lsrs	r0, r3
 80051fc:	e7ea      	b.n	80051d4 <HAL_RCC_GetHCLKFreq+0x24>
      sysclockfreq = (uint32_t) HSI_VALUE;
 80051fe:	4805      	ldr	r0, [pc, #20]	; (8005214 <HAL_RCC_GetHCLKFreq+0x64>)
 8005200:	e7e8      	b.n	80051d4 <HAL_RCC_GetHCLKFreq+0x24>
    sysclockfreq = CSI_VALUE;
 8005202:	4805      	ldr	r0, [pc, #20]	; (8005218 <HAL_RCC_GetHCLKFreq+0x68>)
 8005204:	e7e6      	b.n	80051d4 <HAL_RCC_GetHCLKFreq+0x24>
 8005206:	bf00      	nop
 8005208:	44020c00 	.word	0x44020c00
 800520c:	0801bc68 	.word	0x0801bc68
 8005210:	2000000c 	.word	0x2000000c
 8005214:	017d7840 	.word	0x017d7840
 8005218:	003d0900 	.word	0x003d0900

0800521c <HAL_RCC_OscConfig>:
  if (pOscInitStruct == NULL)
 800521c:	2800      	cmp	r0, #0
 800521e:	f000 8258 	beq.w	80056d2 <HAL_RCC_OscConfig+0x4b6>
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005222:	4aaa      	ldr	r2, [pc, #680]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005224:	6803      	ldr	r3, [r0, #0]
{
 8005226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800522a:	69d5      	ldr	r5, [r2, #28]
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 800522c:	6a96      	ldr	r6, [r2, #40]	; 0x28
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800522e:	06df      	lsls	r7, r3, #27
 8005230:	4604      	mov	r4, r0
  temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005232:	f005 0518 	and.w	r5, r5, #24
  temp_pllckselr = __HAL_RCC_GET_PLL1_OSCSOURCE();
 8005236:	f006 0603 	and.w	r6, r6, #3
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800523a:	d524      	bpl.n	8005286 <HAL_RCC_OscConfig+0x6a>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_CSI) ||
 800523c:	2d08      	cmp	r5, #8
 800523e:	f000 8157 	beq.w	80054f0 <HAL_RCC_OscConfig+0x2d4>
 8005242:	2d18      	cmp	r5, #24
 8005244:	f000 8151 	beq.w	80054ea <HAL_RCC_OscConfig+0x2ce>
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 8005248:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800524a:	4fa0      	ldr	r7, [pc, #640]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
      if ((pOscInitStruct->CSIState) != RCC_CSI_OFF)
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 8134 	beq.w	80054ba <HAL_RCC_OscConfig+0x29e>
        __HAL_RCC_CSI_ENABLE();
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005258:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800525a:	f7ff f831 	bl	80042c0 <HAL_GetTick>
 800525e:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005260:	e006      	b.n	8005270 <HAL_RCC_OscConfig+0x54>
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 8005262:	f7ff f82d 	bl	80042c0 <HAL_GetTick>
 8005266:	eba0 0008 	sub.w	r0, r0, r8
 800526a:	2802      	cmp	r0, #2
 800526c:	f200 818b 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) == 0U)
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	0598      	lsls	r0, r3, #22
 8005274:	d5f5      	bpl.n	8005262 <HAL_RCC_OscConfig+0x46>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	6a22      	ldr	r2, [r4, #32]
 800527a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800527e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005282:	61bb      	str	r3, [r7, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005284:	6823      	ldr	r3, [r4, #0]
 8005286:	07da      	lsls	r2, r3, #31
 8005288:	d538      	bpl.n	80052fc <HAL_RCC_OscConfig+0xe0>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800528a:	2d10      	cmp	r5, #16
 800528c:	f000 8141 	beq.w	8005512 <HAL_RCC_OscConfig+0x2f6>
 8005290:	2d18      	cmp	r5, #24
 8005292:	f000 813b 	beq.w	800550c <HAL_RCC_OscConfig+0x2f0>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 8005296:	6863      	ldr	r3, [r4, #4]
 8005298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800529c:	d018      	beq.n	80052d0 <HAL_RCC_OscConfig+0xb4>
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8174 	beq.w	800558c <HAL_RCC_OscConfig+0x370>
 80052a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052a8:	f000 8284 	beq.w	80057b4 <HAL_RCC_OscConfig+0x598>
 80052ac:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80052b0:	4b86      	ldr	r3, [pc, #536]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	f000 829c 	beq.w	80057f0 <HAL_RCC_OscConfig+0x5d4>
 80052b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e004      	b.n	80052da <HAL_RCC_OscConfig+0xbe>
 80052d0:	4a7e      	ldr	r2, [pc, #504]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
 80052d2:	6813      	ldr	r3, [r2, #0]
 80052d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80052da:	f7fe fff1 	bl	80042c0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052de:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80054cc <HAL_RCC_OscConfig+0x2b0>
        tickstart = HAL_GetTick();
 80052e2:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e4:	e005      	b.n	80052f2 <HAL_RCC_OscConfig+0xd6>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80052e6:	f7fe ffeb 	bl	80042c0 <HAL_GetTick>
 80052ea:	1bc0      	subs	r0, r0, r7
 80052ec:	2864      	cmp	r0, #100	; 0x64
 80052ee:	f200 814a 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052f2:	f8d8 3000 	ldr.w	r3, [r8]
 80052f6:	039b      	lsls	r3, r3, #14
 80052f8:	d5f5      	bpl.n	80052e6 <HAL_RCC_OscConfig+0xca>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	0799      	lsls	r1, r3, #30
 80052fe:	d529      	bpl.n	8005354 <HAL_RCC_OscConfig+0x138>
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005300:	2d00      	cmp	r5, #0
 8005302:	f000 80b9 	beq.w	8005478 <HAL_RCC_OscConfig+0x25c>
 8005306:	2d18      	cmp	r5, #24
 8005308:	f000 8262 	beq.w	80057d0 <HAL_RCC_OscConfig+0x5b4>
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 800530c:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 800530e:	4e6f      	ldr	r6, [pc, #444]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
      if (pOscInitStruct->HSIState != RCC_HSI_OFF)
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 81cb 	beq.w	80056ac <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 8005316:	6833      	ldr	r3, [r6, #0]
 8005318:	6922      	ldr	r2, [r4, #16]
 800531a:	f023 0318 	bic.w	r3, r3, #24
 800531e:	4313      	orrs	r3, r2
 8005320:	6033      	str	r3, [r6, #0]
        __HAL_RCC_HSI_ENABLE();
 8005322:	6833      	ldr	r3, [r6, #0]
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800532a:	f7fe ffc9 	bl	80042c0 <HAL_GetTick>
 800532e:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005330:	e005      	b.n	800533e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005332:	f7fe ffc5 	bl	80042c0 <HAL_GetTick>
 8005336:	1bc0      	subs	r0, r0, r7
 8005338:	2802      	cmp	r0, #2
 800533a:	f200 8124 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800533e:	6833      	ldr	r3, [r6, #0]
 8005340:	079b      	lsls	r3, r3, #30
 8005342:	d5f6      	bpl.n	8005332 <HAL_RCC_OscConfig+0x116>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 8005344:	6933      	ldr	r3, [r6, #16]
 8005346:	6962      	ldr	r2, [r4, #20]
 8005348:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800534c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005350:	6133      	str	r3, [r6, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	0719      	lsls	r1, r3, #28
 8005356:	d519      	bpl.n	800538c <HAL_RCC_OscConfig+0x170>
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 8005358:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_LSI_ENABLE();
 800535a:	4e5c      	ldr	r6, [pc, #368]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->LSIState != RCC_LSI_OFF)
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8130 	beq.w	80055c2 <HAL_RCC_OscConfig+0x3a6>
      __HAL_RCC_LSI_ENABLE();
 8005362:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800536a:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 800536e:	f7fe ffa7 	bl	80042c0 <HAL_GetTick>
 8005372:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005374:	e005      	b.n	8005382 <HAL_RCC_OscConfig+0x166>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8005376:	f7fe ffa3 	bl	80042c0 <HAL_GetTick>
 800537a:	1bc0      	subs	r0, r0, r7
 800537c:	2802      	cmp	r0, #2
 800537e:	f200 8102 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005382:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005386:	011a      	lsls	r2, r3, #4
 8005388:	d5f5      	bpl.n	8005376 <HAL_RCC_OscConfig+0x15a>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	075e      	lsls	r6, r3, #29
 800538e:	d536      	bpl.n	80053fe <HAL_RCC_OscConfig+0x1e2>
    if (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005390:	4e4f      	ldr	r6, [pc, #316]	; (80054d0 <HAL_RCC_OscConfig+0x2b4>)
 8005392:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005394:	07d8      	lsls	r0, r3, #31
 8005396:	f140 80e6 	bpl.w	8005566 <HAL_RCC_OscConfig+0x34a>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 800539a:	68a3      	ldr	r3, [r4, #8]
 800539c:	2b01      	cmp	r3, #1
 800539e:	f000 821f 	beq.w	80057e0 <HAL_RCC_OscConfig+0x5c4>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80bc 	beq.w	8005520 <HAL_RCC_OscConfig+0x304>
 80053a8:	2b05      	cmp	r3, #5
 80053aa:	f000 822d 	beq.w	8005808 <HAL_RCC_OscConfig+0x5ec>
 80053ae:	2b85      	cmp	r3, #133	; 0x85
 80053b0:	4b46      	ldr	r3, [pc, #280]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
 80053b2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80053b6:	f000 823b 	beq.w	8005830 <HAL_RCC_OscConfig+0x614>
 80053ba:	f022 0201 	bic.w	r2, r2, #1
 80053be:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80053c2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80053c6:	f022 0204 	bic.w	r2, r2, #4
 80053ca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80053ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80053d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053d6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
      tickstart = HAL_GetTick();
 80053da:	f7fe ff71 	bl	80042c0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80053e2:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053e4:	4f39      	ldr	r7, [pc, #228]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
 80053e6:	e005      	b.n	80053f4 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053e8:	f7fe ff6a 	bl	80042c0 <HAL_GetTick>
 80053ec:	1b80      	subs	r0, r0, r6
 80053ee:	4540      	cmp	r0, r8
 80053f0:	f200 80c9 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80053f8:	079a      	lsls	r2, r3, #30
 80053fa:	d5f5      	bpl.n	80053e8 <HAL_RCC_OscConfig+0x1cc>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	069e      	lsls	r6, r3, #26
 8005400:	d515      	bpl.n	800542e <HAL_RCC_OscConfig+0x212>
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005402:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_RCC_HSI48_ENABLE();
 8005404:	4e31      	ldr	r6, [pc, #196]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
    if (pOscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005406:	2b00      	cmp	r3, #0
 8005408:	f000 8165 	beq.w	80056d6 <HAL_RCC_OscConfig+0x4ba>
      __HAL_RCC_HSI48_ENABLE();
 800540c:	6833      	ldr	r3, [r6, #0]
 800540e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005412:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005414:	f7fe ff54 	bl	80042c0 <HAL_GetTick>
 8005418:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800541a:	e005      	b.n	8005428 <HAL_RCC_OscConfig+0x20c>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 800541c:	f7fe ff50 	bl	80042c0 <HAL_GetTick>
 8005420:	1bc0      	subs	r0, r0, r7
 8005422:	2802      	cmp	r0, #2
 8005424:	f200 80af 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005428:	6833      	ldr	r3, [r6, #0]
 800542a:	0498      	lsls	r0, r3, #18
 800542c:	d5f6      	bpl.n	800541c <HAL_RCC_OscConfig+0x200>
  if ((pOscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800542e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 8139 	beq.w	80056a8 <HAL_RCC_OscConfig+0x48c>
    if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005436:	2d18      	cmp	r5, #24
 8005438:	f000 816e 	beq.w	8005718 <HAL_RCC_OscConfig+0x4fc>
      if ((pOscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800543c:	2b02      	cmp	r3, #2
 800543e:	f000 80d4 	beq.w	80055ea <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_PLL1_DISABLE();
 8005442:	4c22      	ldr	r4, [pc, #136]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
 8005444:	6823      	ldr	r3, [r4, #0]
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800544a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800544c:	f7fe ff38 	bl	80042c0 <HAL_GetTick>
 8005450:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005452:	e005      	b.n	8005460 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005454:	f7fe ff34 	bl	80042c0 <HAL_GetTick>
 8005458:	1b40      	subs	r0, r0, r5
 800545a:	2802      	cmp	r0, #2
 800545c:	f200 8093 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005460:	6823      	ldr	r3, [r4, #0]
 8005462:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8005466:	d1f5      	bne.n	8005454 <HAL_RCC_OscConfig+0x238>
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005468:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  return HAL_OK;
 800546a:	4618      	mov	r0, r3
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800546c:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8005470:	f022 0203 	bic.w	r2, r2, #3
 8005474:	62a2      	str	r2, [r4, #40]	; 0x28
 8005476:	e051      	b.n	800551c <HAL_RCC_OscConfig+0x300>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 8005478:	68e3      	ldr	r3, [r4, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d04d      	beq.n	800551a <HAL_RCC_OscConfig+0x2fe>
          if (__HAL_RCC_GET_HSI_DIVIDER() != (pOscInitStruct->HSIDiv))
 800547e:	4a13      	ldr	r2, [pc, #76]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
 8005480:	6921      	ldr	r1, [r4, #16]
 8005482:	6813      	ldr	r3, [r2, #0]
 8005484:	f003 0318 	and.w	r3, r3, #24
 8005488:	428b      	cmp	r3, r1
 800548a:	f040 8136 	bne.w	80056fa <HAL_RCC_OscConfig+0x4de>
        tickstart = HAL_GetTick();
 800548e:	f7fe ff17 	bl	80042c0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005492:	4f0e      	ldr	r7, [pc, #56]	; (80054cc <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005494:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005496:	e004      	b.n	80054a2 <HAL_RCC_OscConfig+0x286>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8005498:	f7fe ff12 	bl	80042c0 <HAL_GetTick>
 800549c:	1b80      	subs	r0, r0, r6
 800549e:	2802      	cmp	r0, #2
 80054a0:	d871      	bhi.n	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	079a      	lsls	r2, r3, #30
 80054a6:	d5f7      	bpl.n	8005498 <HAL_RCC_OscConfig+0x27c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->HSICalibrationValue);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	6962      	ldr	r2, [r4, #20]
 80054ac:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80054b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80054b4:	613b      	str	r3, [r7, #16]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054b6:	6823      	ldr	r3, [r4, #0]
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80054b8:	e74c      	b.n	8005354 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_CSI_DISABLE();
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c0:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80054c2:	f7fe fefd 	bl	80042c0 <HAL_GetTick>
 80054c6:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80054c8:	e00a      	b.n	80054e0 <HAL_RCC_OscConfig+0x2c4>
 80054ca:	bf00      	nop
 80054cc:	44020c00 	.word	0x44020c00
 80054d0:	44020800 	.word	0x44020800
          if ((HAL_GetTick() - tickstart) > RCC_CSI_TIMEOUT_VALUE)
 80054d4:	f7fe fef4 	bl	80042c0 <HAL_GetTick>
 80054d8:	eba0 0008 	sub.w	r0, r0, r8
 80054dc:	2802      	cmp	r0, #2
 80054de:	d852      	bhi.n	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_CSIRDY) != 0U)
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	0599      	lsls	r1, r3, #22
 80054e4:	d4f6      	bmi.n	80054d4 <HAL_RCC_OscConfig+0x2b8>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054e6:	6823      	ldr	r3, [r4, #0]
 80054e8:	e6cd      	b.n	8005286 <HAL_RCC_OscConfig+0x6a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_CSI)))
 80054ea:	2e02      	cmp	r6, #2
 80054ec:	f47f aeac 	bne.w	8005248 <HAL_RCC_OscConfig+0x2c>
      if (pOscInitStruct->CSIState == RCC_CSI_OFF)
 80054f0:	69e2      	ldr	r2, [r4, #28]
 80054f2:	b192      	cbz	r2, 800551a <HAL_RCC_OscConfig+0x2fe>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(pOscInitStruct->CSICalibrationValue);
 80054f4:	49ad      	ldr	r1, [pc, #692]	; (80057ac <HAL_RCC_OscConfig+0x590>)
 80054f6:	6a20      	ldr	r0, [r4, #32]
 80054f8:	698a      	ldr	r2, [r1, #24]
 80054fa:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80054fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005502:	618a      	str	r2, [r1, #24]
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005504:	07da      	lsls	r2, r3, #31
 8005506:	f57f aef9 	bpl.w	80052fc <HAL_RCC_OscConfig+0xe0>
 800550a:	e6be      	b.n	800528a <HAL_RCC_OscConfig+0x6e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSE)))
 800550c:	2e03      	cmp	r6, #3
 800550e:	f47f aec2 	bne.w	8005296 <HAL_RCC_OscConfig+0x7a>
      if (pOscInitStruct->HSEState == RCC_HSE_OFF)
 8005512:	6862      	ldr	r2, [r4, #4]
 8005514:	2a00      	cmp	r2, #0
 8005516:	f47f aef1 	bne.w	80052fc <HAL_RCC_OscConfig+0xe0>
        return HAL_ERROR;
 800551a:	2001      	movs	r0, #1
}
 800551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005520:	4ea2      	ldr	r6, [pc, #648]	; (80057ac <HAL_RCC_OscConfig+0x590>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005522:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005526:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 8005532:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800553a:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
 800553e:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005542:	f023 0304 	bic.w	r3, r3, #4
 8005546:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 800554a:	f7fe feb9 	bl	80042c0 <HAL_GetTick>
 800554e:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005550:	e004      	b.n	800555c <HAL_RCC_OscConfig+0x340>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005552:	f7fe feb5 	bl	80042c0 <HAL_GetTick>
 8005556:	1bc0      	subs	r0, r0, r7
 8005558:	4540      	cmp	r0, r8
 800555a:	d814      	bhi.n	8005586 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800555c:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 8005560:	079b      	lsls	r3, r3, #30
 8005562:	d4f6      	bmi.n	8005552 <HAL_RCC_OscConfig+0x336>
 8005564:	e74a      	b.n	80053fc <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8005566:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005568:	f043 0301 	orr.w	r3, r3, #1
 800556c:	6273      	str	r3, [r6, #36]	; 0x24
      tickstart = HAL_GetTick();
 800556e:	f7fe fea7 	bl	80042c0 <HAL_GetTick>
 8005572:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8005574:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005576:	07d9      	lsls	r1, r3, #31
 8005578:	f53f af0f 	bmi.w	800539a <HAL_RCC_OscConfig+0x17e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800557c:	f7fe fea0 	bl	80042c0 <HAL_GetTick>
 8005580:	1bc0      	subs	r0, r0, r7
 8005582:	2802      	cmp	r0, #2
 8005584:	d9f6      	bls.n	8005574 <HAL_RCC_OscConfig+0x358>
            return HAL_TIMEOUT;
 8005586:	2003      	movs	r0, #3
}
 8005588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 800558c:	4f87      	ldr	r7, [pc, #540]	; (80057ac <HAL_RCC_OscConfig+0x590>)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800559c:	603b      	str	r3, [r7, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055a4:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80055a6:	f7fe fe8b 	bl	80042c0 <HAL_GetTick>
 80055aa:	4680      	mov	r8, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ac:	e005      	b.n	80055ba <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80055ae:	f7fe fe87 	bl	80042c0 <HAL_GetTick>
 80055b2:	eba0 0008 	sub.w	r0, r0, r8
 80055b6:	2864      	cmp	r0, #100	; 0x64
 80055b8:	d8e5      	bhi.n	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	0398      	lsls	r0, r3, #14
 80055be:	d4f6      	bmi.n	80055ae <HAL_RCC_OscConfig+0x392>
 80055c0:	e69b      	b.n	80052fa <HAL_RCC_OscConfig+0xde>
      __HAL_RCC_LSI_DISABLE();
 80055c2:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80055c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80055ca:	f8c6 30f0 	str.w	r3, [r6, #240]	; 0xf0
      tickstart = HAL_GetTick();
 80055ce:	f7fe fe77 	bl	80042c0 <HAL_GetTick>
 80055d2:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80055d4:	e004      	b.n	80055e0 <HAL_RCC_OscConfig+0x3c4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80055d6:	f7fe fe73 	bl	80042c0 <HAL_GetTick>
 80055da:	1bc0      	subs	r0, r0, r7
 80055dc:	2802      	cmp	r0, #2
 80055de:	d8d2      	bhi.n	8005586 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80055e0:	f8d6 30f0 	ldr.w	r3, [r6, #240]	; 0xf0
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	d4f6      	bmi.n	80055d6 <HAL_RCC_OscConfig+0x3ba>
 80055e8:	e6cf      	b.n	800538a <HAL_RCC_OscConfig+0x16e>
        __HAL_RCC_PLL1_DISABLE();
 80055ea:	4d70      	ldr	r5, [pc, #448]	; (80057ac <HAL_RCC_OscConfig+0x590>)
 80055ec:	682b      	ldr	r3, [r5, #0]
 80055ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80055f4:	f7fe fe64 	bl	80042c0 <HAL_GetTick>
 80055f8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80055fa:	e004      	b.n	8005606 <HAL_RCC_OscConfig+0x3ea>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 80055fc:	f7fe fe60 	bl	80042c0 <HAL_GetTick>
 8005600:	1b80      	subs	r0, r0, r6
 8005602:	2802      	cmp	r0, #2
 8005604:	d8bf      	bhi.n	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	019a      	lsls	r2, r3, #6
 800560a:	d4f7      	bmi.n	80055fc <HAL_RCC_OscConfig+0x3e0>
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 800560c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800560e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005610:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005614:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005616:	f023 0303 	bic.w	r3, r3, #3
 800561a:	430b      	orrs	r3, r1
 800561c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005620:	62ab      	str	r3, [r5, #40]	; 0x28
 8005622:	e9d4 320e 	ldrd	r3, r2, [r4, #56]	; 0x38
 8005626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005628:	3b01      	subs	r3, #1
 800562a:	3a01      	subs	r2, #1
 800562c:	025b      	lsls	r3, r3, #9
 800562e:	0412      	lsls	r2, r2, #16
 8005630:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005634:	3901      	subs	r1, #1
 8005636:	b29b      	uxth	r3, r3
 8005638:	4313      	orrs	r3, r2
 800563a:	f3c1 0208 	ubfx	r2, r1, #0, #9
 800563e:	4313      	orrs	r3, r2
 8005640:	6c22      	ldr	r2, [r4, #64]	; 0x40
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005642:	4e5a      	ldr	r6, [pc, #360]	; (80057ac <HAL_RCC_OscConfig+0x590>)
        __HAL_RCC_PLL1_CONFIG(pOscInitStruct->PLL.PLLSource,
 8005644:	3a01      	subs	r2, #1
 8005646:	0612      	lsls	r2, r2, #24
 8005648:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800564c:	4313      	orrs	r3, r2
 800564e:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005650:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005652:	f023 0310 	bic.w	r3, r3, #16
 8005656:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005658:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	63ab      	str	r3, [r5, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 800565e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005660:	f043 0310 	orr.w	r3, r3, #16
 8005664:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCIRANGE(pOscInitStruct->PLL.PLLRGE) ;
 8005666:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005668:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800566a:	f023 030c 	bic.w	r3, r3, #12
 800566e:	4313      	orrs	r3, r2
 8005670:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_VCORANGE(pOscInitStruct->PLL.PLLVCOSEL) ;
 8005672:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005674:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005676:	f023 0320 	bic.w	r3, r3, #32
 800567a:	4313      	orrs	r3, r2
 800567c:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVP);
 800567e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005684:	62ab      	str	r3, [r5, #40]	; 0x28
        __HAL_RCC_PLL1_ENABLE();
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800568c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800568e:	f7fe fe17 	bl	80042c0 <HAL_GetTick>
 8005692:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005694:	e005      	b.n	80056a2 <HAL_RCC_OscConfig+0x486>
          if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
 8005696:	f7fe fe13 	bl	80042c0 <HAL_GetTick>
 800569a:	1b00      	subs	r0, r0, r4
 800569c:	2802      	cmp	r0, #2
 800569e:	f63f af72 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80056a2:	6833      	ldr	r3, [r6, #0]
 80056a4:	019b      	lsls	r3, r3, #6
 80056a6:	d5f6      	bpl.n	8005696 <HAL_RCC_OscConfig+0x47a>
  return HAL_OK;
 80056a8:	2000      	movs	r0, #0
 80056aa:	e737      	b.n	800551c <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_DISABLE();
 80056ac:	6833      	ldr	r3, [r6, #0]
 80056ae:	f023 0301 	bic.w	r3, r3, #1
 80056b2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80056b4:	f7fe fe04 	bl	80042c0 <HAL_GetTick>
 80056b8:	4607      	mov	r7, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056ba:	e005      	b.n	80056c8 <HAL_RCC_OscConfig+0x4ac>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80056bc:	f7fe fe00 	bl	80042c0 <HAL_GetTick>
 80056c0:	1bc0      	subs	r0, r0, r7
 80056c2:	2802      	cmp	r0, #2
 80056c4:	f63f af5f 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c8:	6833      	ldr	r3, [r6, #0]
 80056ca:	0798      	lsls	r0, r3, #30
 80056cc:	d4f6      	bmi.n	80056bc <HAL_RCC_OscConfig+0x4a0>
  if (((pOscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056ce:	6823      	ldr	r3, [r4, #0]
 80056d0:	e640      	b.n	8005354 <HAL_RCC_OscConfig+0x138>
    return HAL_ERROR;
 80056d2:	2001      	movs	r0, #1
}
 80056d4:	4770      	bx	lr
      __HAL_RCC_HSI48_DISABLE();
 80056d6:	6833      	ldr	r3, [r6, #0]
 80056d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056dc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80056de:	f7fe fdef 	bl	80042c0 <HAL_GetTick>
 80056e2:	4607      	mov	r7, r0
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80056e4:	e005      	b.n	80056f2 <HAL_RCC_OscConfig+0x4d6>
        if ((HAL_GetTick() - tickstart) > RCC_HSI48_TIMEOUT_VALUE)
 80056e6:	f7fe fdeb 	bl	80042c0 <HAL_GetTick>
 80056ea:	1bc0      	subs	r0, r0, r7
 80056ec:	2802      	cmp	r0, #2
 80056ee:	f63f af4a 	bhi.w	8005586 <HAL_RCC_OscConfig+0x36a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80056f2:	6833      	ldr	r3, [r6, #0]
 80056f4:	0499      	lsls	r1, r3, #18
 80056f6:	d4f6      	bmi.n	80056e6 <HAL_RCC_OscConfig+0x4ca>
 80056f8:	e699      	b.n	800542e <HAL_RCC_OscConfig+0x212>
            __HAL_RCC_HSI_DIVIDER_CONFIG(pOscInitStruct->HSIDiv);
 80056fa:	6813      	ldr	r3, [r2, #0]
 80056fc:	f023 0318 	bic.w	r3, r3, #24
 8005700:	430b      	orrs	r3, r1
 8005702:	6013      	str	r3, [r2, #0]
            (void) HAL_RCC_GetHCLKFreq();
 8005704:	f7ff fd54 	bl	80051b0 <HAL_RCC_GetHCLKFreq>
            if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005708:	4b29      	ldr	r3, [pc, #164]	; (80057b0 <HAL_RCC_OscConfig+0x594>)
 800570a:	6818      	ldr	r0, [r3, #0]
 800570c:	f004 fc82 	bl	800a014 <HAL_InitTick>
 8005710:	2800      	cmp	r0, #0
 8005712:	f43f aebc 	beq.w	800548e <HAL_RCC_OscConfig+0x272>
 8005716:	e700      	b.n	800551a <HAL_RCC_OscConfig+0x2fe>
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005718:	4a24      	ldr	r2, [pc, #144]	; (80057ac <HAL_RCC_OscConfig+0x590>)
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800571a:	2b01      	cmp	r3, #1
      temp1_pllckcfg = RCC->PLL1CFGR;
 800571c:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800571e:	6b55      	ldr	r5, [r2, #52]	; 0x34
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005720:	f43f aefb 	beq.w	800551a <HAL_RCC_OscConfig+0x2fe>
 8005724:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005726:	f001 0303 	and.w	r3, r1, #3
      if (((pOscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800572a:	4283      	cmp	r3, r0
 800572c:	f47f aef5 	bne.w	800551a <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005730:	6b23      	ldr	r3, [r4, #48]	; 0x30
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005732:	f3c1 2105 	ubfx	r1, r1, #8, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pOscInitStruct->PLL.PLLSource) ||
 8005736:	4299      	cmp	r1, r3
 8005738:	f47f aeef 	bne.w	800551a <HAL_RCC_OscConfig+0x2fe>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 800573c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800573e:	f3c5 0108 	ubfx	r1, r5, #0, #9
 8005742:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1M_Pos) != (pOscInitStruct->PLL.PLLM)) ||
 8005744:	4299      	cmp	r1, r3
 8005746:	f47f aee8 	bne.w	800551a <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 800574a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800574c:	f3c5 2146 	ubfx	r1, r5, #9, #7
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005750:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pOscInitStruct->PLL.PLLN - 1U)) ||
 8005752:	4299      	cmp	r1, r3
 8005754:	f47f aee1 	bne.w	800551a <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 8005758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800575a:	f3c5 4106 	ubfx	r1, r5, #16, #7
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800575e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pOscInitStruct->PLL.PLLP - 1U)) ||
 8005760:	4299      	cmp	r1, r3
 8005762:	f47f aeda 	bne.w	800551a <HAL_RCC_OscConfig+0x2fe>
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 8005766:	6c23      	ldr	r3, [r4, #64]	; 0x40
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005768:	f3c5 6506 	ubfx	r5, r5, #24, #7
            RCC_PLL1DIVR_PLL1R_Pos) != (pOscInitStruct->PLL.PLLR - 1U)))
 800576c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pOscInitStruct->PLL.PLLQ - 1U)) ||
 800576e:	429d      	cmp	r5, r3
 8005770:	f47f aed3 	bne.w	800551a <HAL_RCC_OscConfig+0x2fe>
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005774:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8005776:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8005778:	f3c3 03cc 	ubfx	r3, r3, #3, #13
 800577c:	4293      	cmp	r3, r2
 800577e:	d093      	beq.n	80056a8 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL1_FRACN_DISABLE();
 8005780:	4a0a      	ldr	r2, [pc, #40]	; (80057ac <HAL_RCC_OscConfig+0x590>)
 8005782:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005784:	f023 0310 	bic.w	r3, r3, #16
 8005788:	6293      	str	r3, [r2, #40]	; 0x28
        tickstart = HAL_GetTick();
 800578a:	f7fe fd99 	bl	80042c0 <HAL_GetTick>
 800578e:	4605      	mov	r5, r0
        while ((HAL_GetTick() - tickstart) < RCC_PLL_FRAC_WAIT_VALUE)
 8005790:	f7fe fd96 	bl	80042c0 <HAL_GetTick>
 8005794:	42a8      	cmp	r0, r5
 8005796:	d0fb      	beq.n	8005790 <HAL_RCC_OscConfig+0x574>
        __HAL_RCC_PLL1_FRACN_CONFIG(pOscInitStruct->PLL.PLLFRACN);
 8005798:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800579a:	4b04      	ldr	r3, [pc, #16]	; (80057ac <HAL_RCC_OscConfig+0x590>)
 800579c:	00d2      	lsls	r2, r2, #3
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80057a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return HAL_OK;
 80057a2:	2000      	movs	r0, #0
        __HAL_RCC_PLL1_FRACN_ENABLE();
 80057a4:	f042 0210 	orr.w	r2, r2, #16
 80057a8:	629a      	str	r2, [r3, #40]	; 0x28
 80057aa:	e6b7      	b.n	800551c <HAL_RCC_OscConfig+0x300>
 80057ac:	44020c00 	.word	0x44020c00
 80057b0:	20000008 	.word	0x20000008
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80057b4:	4b27      	ldr	r3, [pc, #156]	; (8005854 <HAL_RCC_OscConfig+0x638>)
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e584      	b.n	80052da <HAL_RCC_OscConfig+0xbe>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckselr == RCC_PLL1_SOURCE_HSI)))
 80057d0:	2e01      	cmp	r6, #1
 80057d2:	f47f ad9b 	bne.w	800530c <HAL_RCC_OscConfig+0xf0>
      if (pOscInitStruct->HSIState == RCC_HSI_OFF)
 80057d6:	68e3      	ldr	r3, [r4, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f47f ae58 	bne.w	800548e <HAL_RCC_OscConfig+0x272>
 80057de:	e69c      	b.n	800551a <HAL_RCC_OscConfig+0x2fe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 80057e0:	4a1c      	ldr	r2, [pc, #112]	; (8005854 <HAL_RCC_OscConfig+0x638>)
 80057e2:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    if (pOscInitStruct->LSEState != RCC_LSE_OFF)
 80057ee:	e5f4      	b.n	80053da <HAL_RCC_OscConfig+0x1be>
      __HAL_RCC_HSE_CONFIG(pOscInitStruct->HSEState);
 80057f0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80057f4:	601a      	str	r2, [r3, #0]
 80057f6:	681a      	ldr	r2, [r3, #0]
 80057f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005804:	601a      	str	r2, [r3, #0]
 8005806:	e568      	b.n	80052da <HAL_RCC_OscConfig+0xbe>
    __HAL_RCC_LSE_CONFIG(pOscInitStruct->LSEState);
 8005808:	4b12      	ldr	r3, [pc, #72]	; (8005854 <HAL_RCC_OscConfig+0x638>)
 800580a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800580e:	f042 0204 	orr.w	r2, r2, #4
 8005812:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005816:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800581a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800581e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005822:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005826:	f042 0201 	orr.w	r2, r2, #1
 800582a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800582e:	e5d4      	b.n	80053da <HAL_RCC_OscConfig+0x1be>
 8005830:	f042 0204 	orr.w	r2, r2, #4
 8005834:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005838:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800583c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005840:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005844:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005848:	f042 0201 	orr.w	r2, r2, #1
 800584c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005850:	e5c3      	b.n	80053da <HAL_RCC_OscConfig+0x1be>
 8005852:	bf00      	nop
 8005854:	44020c00 	.word	0x44020c00

08005858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005858:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800585a:	f7ff fb5b 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 800585e:	4a0a      	ldr	r2, [pc, #40]	; (8005888 <HAL_RCC_GetPCLK1Freq+0x30>)
 8005860:	490a      	ldr	r1, [pc, #40]	; (800588c <HAL_RCC_GetPCLK1Freq+0x34>)
 8005862:	6a13      	ldr	r3, [r2, #32]
 8005864:	4c0a      	ldr	r4, [pc, #40]	; (8005890 <HAL_RCC_GetPCLK1Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 8005866:	f003 030f 	and.w	r3, r3, #15
 800586a:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 800586c:	4909      	ldr	r1, [pc, #36]	; (8005894 <HAL_RCC_GetPCLK1Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 800586e:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 8005872:	40d8      	lsrs	r0, r3
 8005874:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]) & 0x1FU));
 8005876:	6a13      	ldr	r3, [r2, #32]
 8005878:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800587c:	5ccb      	ldrb	r3, [r1, r3]
 800587e:	f003 031f 	and.w	r3, r3, #31
}
 8005882:	40d8      	lsrs	r0, r3
 8005884:	bd10      	pop	{r4, pc}
 8005886:	bf00      	nop
 8005888:	44020c00 	.word	0x44020c00
 800588c:	0801bc68 	.word	0x0801bc68
 8005890:	2000000c 	.word	0x2000000c
 8005894:	0801bc78 	.word	0x0801bc78

08005898 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005898:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 800589a:	f7ff fb3b 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 800589e:	4a0a      	ldr	r2, [pc, #40]	; (80058c8 <HAL_RCC_GetPCLK2Freq+0x30>)
 80058a0:	490a      	ldr	r1, [pc, #40]	; (80058cc <HAL_RCC_GetPCLK2Freq+0x34>)
 80058a2:	6a13      	ldr	r3, [r2, #32]
 80058a4:	4c0a      	ldr	r4, [pc, #40]	; (80058d0 <HAL_RCC_GetPCLK2Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80058a6:	f003 030f 	and.w	r3, r3, #15
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80058ac:	4909      	ldr	r1, [pc, #36]	; (80058d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80058ae:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80058b2:	40d8      	lsrs	r0, r3
 80058b4:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]) & 0x1FU));
 80058b6:	6a13      	ldr	r3, [r2, #32]
 80058b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80058bc:	5ccb      	ldrb	r3, [r1, r3]
 80058be:	f003 031f 	and.w	r3, r3, #31
}
 80058c2:	40d8      	lsrs	r0, r3
 80058c4:	bd10      	pop	{r4, pc}
 80058c6:	bf00      	nop
 80058c8:	44020c00 	.word	0x44020c00
 80058cc:	0801bc68 	.word	0x0801bc68
 80058d0:	2000000c 	.word	0x2000000c
 80058d4:	0801bc78 	.word	0x0801bc78

080058d8 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80058d8:	b510      	push	{r4, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80058da:	f7ff fb1b 	bl	8004f14 <HAL_RCC_GetSysClockFreq>
 80058de:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <HAL_RCC_GetPCLK3Freq+0x30>)
 80058e0:	490a      	ldr	r1, [pc, #40]	; (800590c <HAL_RCC_GetPCLK3Freq+0x34>)
 80058e2:	6a13      	ldr	r3, [r2, #32]
 80058e4:	4c0a      	ldr	r4, [pc, #40]	; (8005910 <HAL_RCC_GetPCLK3Freq+0x38>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	5ccb      	ldrb	r3, [r1, r3]
  /* Get HCLK source and Compute PCLK3 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80058ec:	4909      	ldr	r1, [pc, #36]	; (8005914 <HAL_RCC_GetPCLK3Freq+0x3c>)
                                                                >> RCC_CFGR2_HPRE_Pos] & 0x1FU);
 80058ee:	f003 031f 	and.w	r3, r3, #31
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) \
 80058f2:	40d8      	lsrs	r0, r3
 80058f4:	6020      	str	r0, [r4, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE3) >> RCC_CFGR2_PPRE3_Pos]) & 0x1FU));
 80058f6:	6a13      	ldr	r3, [r2, #32]
 80058f8:	f3c3 3302 	ubfx	r3, r3, #12, #3
 80058fc:	5ccb      	ldrb	r3, [r1, r3]
 80058fe:	f003 031f 	and.w	r3, r3, #31
}
 8005902:	40d8      	lsrs	r0, r3
 8005904:	bd10      	pop	{r4, pc}
 8005906:	bf00      	nop
 8005908:	44020c00 	.word	0x44020c00
 800590c:	0801bc68 	.word	0x0801bc68
 8005910:	2000000c 	.word	0x2000000c
 8005914:	0801bc78 	.word	0x0801bc78

08005918 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(pClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 8005918:	231f      	movs	r3, #31
                              RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800591a:	4a0f      	ldr	r2, [pc, #60]	; (8005958 <HAL_RCC_GetClockConfig+0x40>)
  pClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | \
 800591c:	6003      	str	r3, [r0, #0]
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 800591e:	69d3      	ldr	r3, [r2, #28]
{
 8005920:	b410      	push	{r4}
  pClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005922:	f003 0303 	and.w	r3, r3, #3
 8005926:	6043      	str	r3, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  regval = RCC->CFGR2;
 8005928:	6a13      	ldr	r3, [r2, #32]

  /* Get the APB3 configuration ----------------------------------------------*/
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800592a:	4c0c      	ldr	r4, [pc, #48]	; (800595c <HAL_RCC_GetClockConfig+0x44>)
  pClkInitStruct->AHBCLKDivider = (uint32_t)(regval & RCC_CFGR2_HPRE);
 800592c:	f003 020f 	and.w	r2, r3, #15
 8005930:	6082      	str	r2, [r0, #8]
  pClkInitStruct->APB1CLKDivider = (uint32_t)(regval & RCC_CFGR2_PPRE1);
 8005932:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005936:	60c2      	str	r2, [r0, #12]
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8005938:	091a      	lsrs	r2, r3, #4
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 800593a:	0a1b      	lsrs	r3, r3, #8
 800593c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  pClkInitStruct->APB2CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE2) >> 4);
 8005940:	f002 0270 	and.w	r2, r2, #112	; 0x70
  pClkInitStruct->APB3CLKDivider = (uint32_t)((regval & RCC_CFGR2_PPRE3) >> 8);
 8005944:	e9c0 2304 	strd	r2, r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005948:	6823      	ldr	r3, [r4, #0]
}
 800594a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	600b      	str	r3, [r1, #0]
}
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	44020c00 	.word	0x44020c00
 800595c:	40022000 	.word	0x40022000

08005960 <RCCEx_PLL2_Config.part.0>:
  * @param  pll2  pointer to an RCC_PLL2InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL2 output clocks dividers
  * @note   PLL2 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
 8005960:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL2 multiplication and division factors. */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8005962:	e9d0 1200 	ldrd	r1, r2, [r0]
 8005966:	4c2a      	ldr	r4, [pc, #168]	; (8005a10 <RCCEx_PLL2_Config.part.0+0xb0>)
 8005968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800596a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	430b      	orrs	r3, r1
 8005974:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005978:	62e3      	str	r3, [r4, #44]	; 0x2c
 800597a:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800597e:	3b01      	subs	r3, #1
 8005980:	3a01      	subs	r2, #1
 8005982:	025b      	lsls	r3, r3, #9
 8005984:	0412      	lsls	r2, r2, #16
 8005986:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800598a:	b29b      	uxth	r3, r3
 800598c:	6881      	ldr	r1, [r0, #8]
 800598e:	4313      	orrs	r3, r2
 8005990:	6942      	ldr	r2, [r0, #20]
 8005992:	3901      	subs	r1, #1
 8005994:	3a01      	subs	r2, #1
 8005996:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800599a:	0612      	lsls	r2, r2, #24
 800599c:	430b      	orrs	r3, r1
 800599e:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80059a2:	4313      	orrs	r3, r2
 80059a4:	63e3      	str	r3, [r4, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80059a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059a8:	6982      	ldr	r2, [r0, #24]
 80059aa:	f023 030c 	bic.w	r3, r3, #12
 80059ae:	4313      	orrs	r3, r2
 80059b0:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Select PLL2 output frequency range : VCO */
  __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL);
 80059b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059b4:	69c2      	ldr	r2, [r0, #28]
 80059b6:	f023 0320 	bic.w	r3, r3, #32
 80059ba:	4313      	orrs	r3, r2
 80059bc:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2_CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80059be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059c0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80059c2:	4313      	orrs	r3, r2
 80059c4:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Disable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_DISABLE();
 80059c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059c8:	f023 0310 	bic.w	r3, r3, #16
 80059cc:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2_FRACN_CONFIG(pll2->PLL2FRACN);
 80059ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059d0:	6a02      	ldr	r2, [r0, #32]
 80059d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80059da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80059de:	6423      	str	r3, [r4, #64]	; 0x40

  /* Enable PLL2FRACN . */
  __HAL_RCC_PLL2_FRACN_ENABLE();
 80059e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80059e2:	f043 0310 	orr.w	r3, r3, #16
 80059e6:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Enable  PLL2. */
  __HAL_RCC_PLL2_ENABLE();
 80059e8:	6823      	ldr	r3, [r4, #0]
 80059ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059ee:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80059f0:	f7fe fc66 	bl	80042c0 <HAL_GetTick>
 80059f4:	4605      	mov	r5, r0

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80059f6:	e004      	b.n	8005a02 <RCCEx_PLL2_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80059f8:	f7fe fc62 	bl	80042c0 <HAL_GetTick>
 80059fc:	1b40      	subs	r0, r0, r5
 80059fe:	2802      	cmp	r0, #2
 8005a00:	d804      	bhi.n	8005a0c <RCCEx_PLL2_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	011b      	lsls	r3, r3, #4
 8005a06:	d5f7      	bpl.n	80059f8 <RCCEx_PLL2_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005a08:	2000      	movs	r0, #0

}
 8005a0a:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8005a0c:	2003      	movs	r0, #3
}
 8005a0e:	bd38      	pop	{r3, r4, r5, pc}
 8005a10:	44020c00 	.word	0x44020c00

08005a14 <RCCEx_PLL3_Config.part.0>:
  * @param  pll3  pointer to an RCC_PLL3InitTypeDef structure that
  *         contains the configuration parameters M, N, FRACN, VCI/VCO ranges as well as PLL3 output clocks dividers
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status.
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
 8005a14:	b538      	push	{r3, r4, r5, lr}
      return HAL_TIMEOUT;
    }
  }

  /* Configure PLL3 multiplication and division factors. */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8005a16:	e9d0 1200 	ldrd	r1, r2, [r0]
 8005a1a:	4c2a      	ldr	r4, [pc, #168]	; (8005ac4 <RCCEx_PLL3_Config.part.0+0xb0>)
 8005a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a1e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a22:	f023 0303 	bic.w	r3, r3, #3
 8005a26:	430b      	orrs	r3, r1
 8005a28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005a2c:	6323      	str	r3, [r4, #48]	; 0x30
 8005a2e:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	3a01      	subs	r2, #1
 8005a36:	025b      	lsls	r3, r3, #9
 8005a38:	0412      	lsls	r2, r2, #16
 8005a3a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	6881      	ldr	r1, [r0, #8]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	6942      	ldr	r2, [r0, #20]
 8005a46:	3901      	subs	r1, #1
 8005a48:	3a01      	subs	r2, #1
 8005a4a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005a4e:	0612      	lsls	r2, r2, #24
 8005a50:	430b      	orrs	r3, r1
 8005a52:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005a56:	4313      	orrs	r3, r2
 8005a58:	6463      	str	r3, [r4, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005a5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a5c:	6982      	ldr	r2, [r0, #24]
 8005a5e:	f023 030c 	bic.w	r3, r3, #12
 8005a62:	4313      	orrs	r3, r2
 8005a64:	6323      	str	r3, [r4, #48]	; 0x30

  /* Select PLL3 output frequency range : VCO */
  __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL);
 8005a66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a68:	69c2      	ldr	r2, [r0, #28]
 8005a6a:	f023 0320 	bic.w	r3, r3, #32
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3_CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8005a72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a74:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005a76:	4313      	orrs	r3, r2
 8005a78:	6323      	str	r3, [r4, #48]	; 0x30

  /* Disable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_DISABLE();
 8005a7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a7c:	f023 0310 	bic.w	r3, r3, #16
 8005a80:	6323      	str	r3, [r4, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3_FRACN_CONFIG(pll3->PLL3FRACN);
 8005a82:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005a84:	6a02      	ldr	r2, [r0, #32]
 8005a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005a8e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005a92:	64a3      	str	r3, [r4, #72]	; 0x48

  /* Enable PLL3FRACN . */
  __HAL_RCC_PLL3_FRACN_ENABLE();
 8005a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a96:	f043 0310 	orr.w	r3, r3, #16
 8005a9a:	6323      	str	r3, [r4, #48]	; 0x30

  /* Enable  PLL3. */
  __HAL_RCC_PLL3_ENABLE();
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	6023      	str	r3, [r4, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005aa4:	f7fe fc0c 	bl	80042c0 <HAL_GetTick>
 8005aa8:	4605      	mov	r5, r0

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005aaa:	e004      	b.n	8005ab6 <RCCEx_PLL3_Config.part.0+0xa2>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005aac:	f7fe fc08 	bl	80042c0 <HAL_GetTick>
 8005ab0:	1b40      	subs	r0, r0, r5
 8005ab2:	2802      	cmp	r0, #2
 8005ab4:	d804      	bhi.n	8005ac0 <RCCEx_PLL3_Config.part.0+0xac>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	d5f7      	bpl.n	8005aac <RCCEx_PLL3_Config.part.0+0x98>
    {
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8005abc:	2000      	movs	r0, #0
}
 8005abe:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_TIMEOUT;
 8005ac0:	2003      	movs	r0, #3
}
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	44020c00 	.word	0x44020c00

08005ac8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8005ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005acc:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005ad0:	01d9      	lsls	r1, r3, #7
{
 8005ad2:	4604      	mov	r4, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ad4:	d508      	bpl.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0x20>
    __HAL_RCC_CLKP_CONFIG(pPeriphClkInit->CkperClockSelection);
 8005ad6:	488f      	ldr	r0, [pc, #572]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005ad8:	6da5      	ldr	r5, [r4, #88]	; 0x58
 8005ada:	f8d0 10e8 	ldr.w	r1, [r0, #232]	; 0xe8
 8005ade:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8005ae2:	4329      	orrs	r1, r5
 8005ae4:	f8c0 10e8 	str.w	r1, [r0, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ae8:	f013 0601 	ands.w	r6, r3, #1
 8005aec:	d031      	beq.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Usart1ClockSelection)
 8005aee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005af0:	2905      	cmp	r1, #5
 8005af2:	f201 86dd 	bhi.w	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x1de8>
 8005af6:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005afa:	0023      	.short	0x0023
 8005afc:	00060d13 	.word	0x00060d13
 8005b00:	00230023 	.word	0x00230023
 8005b04:	0023      	.short	0x0023
  __HAL_RCC_PLL3_DISABLE();
 8005b06:	4d83      	ldr	r5, [pc, #524]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b0e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005b10:	f7fe fbd6 	bl	80042c0 <HAL_GetTick>
 8005b14:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b16:	e005      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005b18:	f7fe fbd2 	bl	80042c0 <HAL_GetTick>
 8005b1c:	1b80      	subs	r0, r0, r6
 8005b1e:	2802      	cmp	r0, #2
 8005b20:	f201 85c6 	bhi.w	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	0098      	lsls	r0, r3, #2
 8005b28:	d4f6      	bmi.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005b2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8005b2e:	f7ff ff71 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
 8005b32:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8005b34:	2e00      	cmp	r6, #0
 8005b36:	f041 86b4 	bne.w	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x1dda>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b3a:	e9d4 3200 	ldrd	r3, r2, [r4]
      __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005b3e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005b40:	2600      	movs	r6, #0
 8005b42:	4d74      	ldr	r5, [pc, #464]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005b44:	f8d5 00d8 	ldr.w	r0, [r5, #216]	; 0xd8
 8005b48:	f020 0007 	bic.w	r0, r0, #7
 8005b4c:	4301      	orrs	r1, r0
 8005b4e:	f8c5 10d8 	str.w	r1, [r5, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b52:	0799      	lsls	r1, r3, #30
 8005b54:	d52e      	bpl.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    switch (pPeriphClkInit->Usart2ClockSelection)
 8005b56:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8005b58:	2928      	cmp	r1, #40	; 0x28
 8005b5a:	d82a      	bhi.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8005b5c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005b60:	00290cb4 	.word	0x00290cb4
 8005b64:	00290029 	.word	0x00290029
 8005b68:	00290029 	.word	0x00290029
 8005b6c:	00290029 	.word	0x00290029
 8005b70:	00290d6f 	.word	0x00290d6f
 8005b74:	00290029 	.word	0x00290029
 8005b78:	00290029 	.word	0x00290029
 8005b7c:	00290029 	.word	0x00290029
 8005b80:	00290d89 	.word	0x00290d89
 8005b84:	00290029 	.word	0x00290029
 8005b88:	00290029 	.word	0x00290029
 8005b8c:	00290029 	.word	0x00290029
 8005b90:	00290cb4 	.word	0x00290cb4
 8005b94:	00290029 	.word	0x00290029
 8005b98:	00290029 	.word	0x00290029
 8005b9c:	00290029 	.word	0x00290029
 8005ba0:	00290cb4 	.word	0x00290cb4
 8005ba4:	00290029 	.word	0x00290029
 8005ba8:	00290029 	.word	0x00290029
 8005bac:	00290029 	.word	0x00290029
 8005bb0:	0cb4      	.short	0x0cb4
 8005bb2:	2601      	movs	r6, #1
 8005bb4:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bb6:	0759      	lsls	r1, r3, #29
 8005bb8:	d52e      	bpl.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Usart3ClockSelection)
 8005bba:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005bbc:	2980      	cmp	r1, #128	; 0x80
 8005bbe:	f001 8285 	beq.w	80070cc <HAL_RCCEx_PeriphCLKConfig+0x1604>
 8005bc2:	f200 81a2 	bhi.w	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005bc6:	b1d9      	cbz	r1, 8005c00 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005bc8:	2940      	cmp	r1, #64	; 0x40
 8005bca:	f040 81a7 	bne.w	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x454>
  __HAL_RCC_PLL2_DISABLE();
 8005bce:	4d51      	ldr	r5, [pc, #324]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005bd0:	682b      	ldr	r3, [r5, #0]
 8005bd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005bd6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005bd8:	f7fe fb72 	bl	80042c0 <HAL_GetTick>
 8005bdc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bde:	e005      	b.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x124>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005be0:	f7fe fb6e 	bl	80042c0 <HAL_GetTick>
 8005be4:	1bc0      	subs	r0, r0, r7
 8005be6:	2802      	cmp	r0, #2
 8005be8:	f201 85a8 	bhi.w	800773c <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bec:	682b      	ldr	r3, [r5, #0]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	d4f6      	bmi.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8005bf2:	f104 0008 	add.w	r0, r4, #8
 8005bf6:	f7ff feb3 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005bfa:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005bfe:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005c00:	2d00      	cmp	r5, #0
 8005c02:	f041 84b8 	bne.w	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1aae>
      __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005c06:	4f43      	ldr	r7, [pc, #268]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c08:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8005c0a:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005c0e:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 8005c12:	4301      	orrs	r1, r0
 8005c14:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c18:	0719      	lsls	r1, r3, #28
 8005c1a:	d530      	bpl.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8005c1c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8005c1e:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005c22:	f001 8378 	beq.w	8007316 <HAL_RCCEx_PeriphCLKConfig+0x184e>
 8005c26:	f200 817c 	bhi.w	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x45a>
 8005c2a:	b1e1      	cbz	r1, 8005c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005c2c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005c30:	f040 8181 	bne.w	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x46e>
  __HAL_RCC_PLL2_DISABLE();
 8005c34:	4d37      	ldr	r5, [pc, #220]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c3c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005c3e:	f7fe fb3f 	bl	80042c0 <HAL_GetTick>
 8005c42:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c44:	e005      	b.n	8005c52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c46:	f7fe fb3b 	bl	80042c0 <HAL_GetTick>
 8005c4a:	1bc0      	subs	r0, r0, r7
 8005c4c:	2802      	cmp	r0, #2
 8005c4e:	f201 8534 	bhi.w	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005c52:	682b      	ldr	r3, [r5, #0]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	d4f6      	bmi.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8005c58:	f104 0008 	add.w	r0, r4, #8
 8005c5c:	f7ff fe80 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c60:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005c64:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005c66:	2d00      	cmp	r5, #0
 8005c68:	f041 8473 	bne.w	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
      __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005c6c:	4f29      	ldr	r7, [pc, #164]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c6e:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8005c70:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005c74:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8005c78:	4301      	orrs	r1, r0
 8005c7a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c7e:	06d9      	lsls	r1, r3, #27
 8005c80:	d530      	bpl.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8005c82:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8005c84:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8005c88:	f001 8156 	beq.w	8006f38 <HAL_RCCEx_PeriphCLKConfig+0x1470>
 8005c8c:	f200 8156 	bhi.w	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x474>
 8005c90:	b1e1      	cbz	r1, 8005ccc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005c92:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005c96:	f040 815b 	bne.w	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x488>
  __HAL_RCC_PLL2_DISABLE();
 8005c9a:	4d1e      	ldr	r5, [pc, #120]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ca2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005ca4:	f7fe fb0c 	bl	80042c0 <HAL_GetTick>
 8005ca8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005caa:	e005      	b.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cac:	f7fe fb08 	bl	80042c0 <HAL_GetTick>
 8005cb0:	1bc0      	subs	r0, r0, r7
 8005cb2:	2802      	cmp	r0, #2
 8005cb4:	f201 8548 	bhi.w	8007748 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005cb8:	682b      	ldr	r3, [r5, #0]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	d4f6      	bmi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8005cbe:	f104 0008 	add.w	r0, r4, #8
 8005cc2:	f7ff fe4d 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005cc6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005cca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005ccc:	2d00      	cmp	r5, #0
 8005cce:	f041 8479 	bne.w	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1afc>
      __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005cd2:	4f10      	ldr	r7, [pc, #64]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005cd4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005cd6:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005cda:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8005cde:	4301      	orrs	r1, r0
 8005ce0:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005ce4:	0699      	lsls	r1, r3, #26
 8005ce6:	d533      	bpl.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8005ce8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005cea:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8005cee:	f001 8179 	beq.w	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x151c>
 8005cf2:	f200 8130 	bhi.w	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x48e>
 8005cf6:	b1f9      	cbz	r1, 8005d38 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8005cf8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005cfc:	f040 8135 	bne.w	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
  __HAL_RCC_PLL2_DISABLE();
 8005d00:	4d04      	ldr	r5, [pc, #16]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005d02:	682b      	ldr	r3, [r5, #0]
 8005d04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d08:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005d0a:	f7fe fad9 	bl	80042c0 <HAL_GetTick>
 8005d0e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d10:	e008      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 8005d12:	bf00      	nop
 8005d14:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d18:	f7fe fad2 	bl	80042c0 <HAL_GetTick>
 8005d1c:	1bc0      	subs	r0, r0, r7
 8005d1e:	2802      	cmp	r0, #2
 8005d20:	f201 84dd 	bhi.w	80076de <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d24:	682b      	ldr	r3, [r5, #0]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	d4f6      	bmi.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x250>
 8005d2a:	f104 0008 	add.w	r0, r4, #8
 8005d2e:	f7ff fe17 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d32:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005d36:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	f041 843d 	bne.w	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1af0>
      __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 8005d3e:	4fb1      	ldr	r7, [pc, #708]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005d40:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005d42:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005d46:	f421 3160 	bic.w	r1, r1, #229376	; 0x38000
 8005d4a:	4301      	orrs	r1, r0
 8005d4c:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005d50:	0659      	lsls	r1, r3, #25
 8005d52:	d530      	bpl.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8005d54:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8005d56:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8005d5a:	f001 8286 	beq.w	800726a <HAL_RCCEx_PeriphCLKConfig+0x17a2>
 8005d5e:	f200 8107 	bhi.w	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8005d62:	b1e1      	cbz	r1, 8005d9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005d64:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8005d68:	f040 810c 	bne.w	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
  __HAL_RCC_PLL2_DISABLE();
 8005d6c:	4da5      	ldr	r5, [pc, #660]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005d6e:	682b      	ldr	r3, [r5, #0]
 8005d70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d74:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005d76:	f7fe faa3 	bl	80042c0 <HAL_GetTick>
 8005d7a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d7c:	e005      	b.n	8005d8a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005d7e:	f7fe fa9f 	bl	80042c0 <HAL_GetTick>
 8005d82:	1bc0      	subs	r0, r0, r7
 8005d84:	2802      	cmp	r0, #2
 8005d86:	f201 84cd 	bhi.w	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005d8a:	682b      	ldr	r3, [r5, #0]
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	d4f6      	bmi.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8005d90:	f104 0008 	add.w	r0, r4, #8
 8005d94:	f7ff fde4 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005d98:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005d9c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005d9e:	2d00      	cmp	r5, #0
 8005da0:	f041 83f5 	bne.w	800758e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
      __HAL_RCC_UART7_CONFIG(pPeriphClkInit->Uart7ClockSelection);
 8005da4:	4f97      	ldr	r7, [pc, #604]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005da6:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8005da8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005dac:	f421 11e0 	bic.w	r1, r1, #1835008	; 0x1c0000
 8005db0:	4301      	orrs	r1, r0
 8005db2:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005db6:	0619      	lsls	r1, r3, #24
 8005db8:	d530      	bpl.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8005dba:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005dbc:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8005dc0:	f001 8167 	beq.w	8007092 <HAL_RCCEx_PeriphCLKConfig+0x15ca>
 8005dc4:	f200 80e1 	bhi.w	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005dc8:	b1e1      	cbz	r1, 8005e04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005dca:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8005dce:	f040 80e6 	bne.w	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x4d6>
  __HAL_RCC_PLL2_DISABLE();
 8005dd2:	4d8c      	ldr	r5, [pc, #560]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005dd4:	682b      	ldr	r3, [r5, #0]
 8005dd6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dda:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005ddc:	f7fe fa70 	bl	80042c0 <HAL_GetTick>
 8005de0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005de2:	e005      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005de4:	f7fe fa6c 	bl	80042c0 <HAL_GetTick>
 8005de8:	1bc0      	subs	r0, r0, r7
 8005dea:	2802      	cmp	r0, #2
 8005dec:	f201 8483 	bhi.w	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	d4f6      	bmi.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8005df6:	f104 0008 	add.w	r0, r4, #8
 8005dfa:	f7ff fdb1 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005dfe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005e02:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005e04:	2d00      	cmp	r5, #0
 8005e06:	f041 83da 	bne.w	80075be <HAL_RCCEx_PeriphCLKConfig+0x1af6>
      __HAL_RCC_UART8_CONFIG(pPeriphClkInit->Uart8ClockSelection);
 8005e0a:	4f7e      	ldr	r7, [pc, #504]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005e0c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005e0e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005e12:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
 8005e16:	4301      	orrs	r1, r0
 8005e18:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 8005e1c:	05d9      	lsls	r1, r3, #23
 8005e1e:	d530      	bpl.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8005e20:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8005e22:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8005e26:	f001 818d 	beq.w	8007144 <HAL_RCCEx_PeriphCLKConfig+0x167c>
 8005e2a:	f200 80bb 	bhi.w	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8005e2e:	b1e1      	cbz	r1, 8005e6a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8005e30:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8005e34:	f040 80c0 	bne.w	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  __HAL_RCC_PLL2_DISABLE();
 8005e38:	4d72      	ldr	r5, [pc, #456]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005e3a:	682b      	ldr	r3, [r5, #0]
 8005e3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e40:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005e42:	f7fe fa3d 	bl	80042c0 <HAL_GetTick>
 8005e46:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e48:	e005      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005e4a:	f7fe fa39 	bl	80042c0 <HAL_GetTick>
 8005e4e:	1bc0      	subs	r0, r0, r7
 8005e50:	2802      	cmp	r0, #2
 8005e52:	f201 846d 	bhi.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005e56:	682b      	ldr	r3, [r5, #0]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	d4f6      	bmi.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005e5c:	f104 0008 	add.w	r0, r4, #8
 8005e60:	f7ff fd7e 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005e64:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005e68:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005e6a:	2d00      	cmp	r5, #0
 8005e6c:	f041 838c 	bne.w	8007588 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
      __HAL_RCC_UART9_CONFIG(pPeriphClkInit->Uart9ClockSelection);
 8005e70:	4f64      	ldr	r7, [pc, #400]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005e72:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005e74:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005e78:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8005e7c:	4301      	orrs	r1, r0
 8005e7e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8005e82:	0599      	lsls	r1, r3, #22
 8005e84:	d532      	bpl.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x424>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8005e86:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8005e8a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8005e8e:	f001 80c6 	beq.w	800701e <HAL_RCCEx_PeriphCLKConfig+0x1556>
 8005e92:	f200 8094 	bhi.w	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005e96:	b1e1      	cbz	r1, 8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005e98:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8005e9c:	f040 8097 	bne.w	8005fce <HAL_RCCEx_PeriphCLKConfig+0x506>
  __HAL_RCC_PLL2_DISABLE();
 8005ea0:	4d58      	ldr	r5, [pc, #352]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ea8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005eaa:	f7fe fa09 	bl	80042c0 <HAL_GetTick>
 8005eae:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005eb0:	e005      	b.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005eb2:	f7fe fa05 	bl	80042c0 <HAL_GetTick>
 8005eb6:	1bc0      	subs	r0, r0, r7
 8005eb8:	2802      	cmp	r0, #2
 8005eba:	f201 842d 	bhi.w	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ebe:	682b      	ldr	r3, [r5, #0]
 8005ec0:	011b      	lsls	r3, r3, #4
 8005ec2:	d4f6      	bmi.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8005ec4:	f104 0008 	add.w	r0, r4, #8
 8005ec8:	f7ff fd4a 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005ecc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8005ed0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8005ed2:	2d00      	cmp	r5, #0
 8005ed4:	f041 8352 	bne.w	800757c <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
      __HAL_RCC_USART10_CONFIG(pPeriphClkInit->Usart10ClockSelection);
 8005ed8:	4f4a      	ldr	r7, [pc, #296]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005eda:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8005ede:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8005ee2:	f021 5160 	bic.w	r1, r1, #939524096	; 0x38000000
 8005ee6:	4301      	orrs	r1, r0
 8005ee8:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005eec:	0559      	lsls	r1, r3, #21
 8005eee:	d572      	bpl.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 8005ef0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8005ef4:	2905      	cmp	r1, #5
 8005ef6:	f201 84e2 	bhi.w	80078be <HAL_RCCEx_PeriphCLKConfig+0x1df6>
 8005efa:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005efe:	05f0      	.short	0x05f0
 8005f00:	05d70af4 	.word	0x05d70af4
 8005f04:	05f005f0 	.word	0x05f005f0
 8005f08:	05f0      	.short	0x05f0
    switch (pPeriphClkInit->Usart3ClockSelection)
 8005f0a:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 8005f0e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005f12:	f43f ae75 	beq.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005f16:	29c0      	cmp	r1, #192	; 0xc0
 8005f18:	f43f ae72 	beq.w	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005f1c:	2601      	movs	r6, #1
 8005f1e:	4635      	mov	r5, r6
 8005f20:	e67a      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x150>
    switch (pPeriphClkInit->Uart4ClockSelection)
 8005f22:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 8005f26:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8005f2a:	f43f ae9c 	beq.w	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005f2e:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8005f32:	f43f ae98 	beq.w	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8005f36:	2601      	movs	r6, #1
 8005f38:	4635      	mov	r5, r6
 8005f3a:	e6a0      	b.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    switch (pPeriphClkInit->Uart5ClockSelection)
 8005f3c:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 8005f40:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8005f44:	f43f aec2 	beq.w	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005f48:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8005f4c:	f43f aebe 	beq.w	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8005f50:	2601      	movs	r6, #1
 8005f52:	4635      	mov	r5, r6
 8005f54:	e6c6      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    switch (pPeriphClkInit->Usart6ClockSelection)
 8005f56:	f421 4000 	bic.w	r0, r1, #32768	; 0x8000
 8005f5a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
 8005f5e:	f43f aeeb 	beq.w	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8005f62:	f5b1 3fc0 	cmp.w	r1, #98304	; 0x18000
 8005f66:	f43f aee7 	beq.w	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8005f6a:	2601      	movs	r6, #1
 8005f6c:	4635      	mov	r5, r6
 8005f6e:	e6ef      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x288>
    switch (pPeriphClkInit->Uart7ClockSelection)
 8005f70:	f421 2080 	bic.w	r0, r1, #262144	; 0x40000
 8005f74:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
 8005f78:	f43f af11 	beq.w	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005f7c:	f5b1 2f40 	cmp.w	r1, #786432	; 0xc0000
 8005f80:	f43f af0d 	beq.w	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8005f84:	2601      	movs	r6, #1
 8005f86:	4635      	mov	r5, r6
 8005f88:	e715      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (pPeriphClkInit->Uart8ClockSelection)
 8005f8a:	f421 1000 	bic.w	r0, r1, #2097152	; 0x200000
 8005f8e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8005f92:	f43f af37 	beq.w	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f96:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 8005f9a:	f43f af33 	beq.w	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005f9e:	2601      	movs	r6, #1
 8005fa0:	4635      	mov	r5, r6
 8005fa2:	e73b      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x354>
    switch (pPeriphClkInit->Uart9ClockSelection)
 8005fa4:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8005fa8:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8005fac:	f43f af5d 	beq.w	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8005fb0:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8005fb4:	f43f af59 	beq.w	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x3a2>
 8005fb8:	2601      	movs	r6, #1
 8005fba:	4635      	mov	r5, r6
 8005fbc:	e761      	b.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    switch (pPeriphClkInit->Usart10ClockSelection)
 8005fbe:	f021 6000 	bic.w	r0, r1, #134217728	; 0x8000000
 8005fc2:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
 8005fc6:	d084      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005fc8:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
 8005fcc:	d081      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005fce:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005fd0:	0559      	lsls	r1, r3, #21
    switch (pPeriphClkInit->Usart10ClockSelection)
 8005fd2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8005fd4:	d48c      	bmi.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x428>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8005fd6:	0519      	lsls	r1, r3, #20
 8005fd8:	d533      	bpl.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Uart12ClockSelection)
 8005fda:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 8005fde:	2920      	cmp	r1, #32
 8005fe0:	f001 8126 	beq.w	8007230 <HAL_RCCEx_PeriphCLKConfig+0x1768>
 8005fe4:	f200 831e 	bhi.w	8006624 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
 8005fe8:	b1f1      	cbz	r1, 8006028 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8005fea:	2910      	cmp	r1, #16
 8005fec:	f040 8322 	bne.w	8006634 <HAL_RCCEx_PeriphCLKConfig+0xb6c>
  __HAL_RCC_PLL2_DISABLE();
 8005ff0:	4d04      	ldr	r5, [pc, #16]	; (8006004 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8005ff2:	682b      	ldr	r3, [r5, #0]
 8005ff4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ff8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8005ffa:	f7fe f961 	bl	80042c0 <HAL_GetTick>
 8005ffe:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x54c>
 8006002:	bf00      	nop
 8006004:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006008:	f7fe f95a 	bl	80042c0 <HAL_GetTick>
 800600c:	1bc0      	subs	r0, r0, r7
 800600e:	2802      	cmp	r0, #2
 8006010:	f201 83a0 	bhi.w	8007754 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006014:	682b      	ldr	r3, [r5, #0]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	d4f6      	bmi.n	8006008 <HAL_RCCEx_PeriphCLKConfig+0x540>
 800601a:	f104 0008 	add.w	r0, r4, #8
 800601e:	f7ff fc9f 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006022:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006026:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006028:	2d00      	cmp	r5, #0
 800602a:	f041 82b6 	bne.w	800759a <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
      __HAL_RCC_UART12_CONFIG(pPeriphClkInit->Uart12ClockSelection);
 800602e:	4fac      	ldr	r7, [pc, #688]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006030:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8006034:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006038:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800603c:	4301      	orrs	r1, r0
 800603e:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006042:	04d9      	lsls	r1, r3, #19
 8006044:	d532      	bpl.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 8006046:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800604a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800604e:	f001 8129 	beq.w	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x17dc>
 8006052:	f200 82f2 	bhi.w	800663a <HAL_RCCEx_PeriphCLKConfig+0xb72>
 8006056:	b1e1      	cbz	r1, 8006092 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006058:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800605c:	f040 82f7 	bne.w	800664e <HAL_RCCEx_PeriphCLKConfig+0xb86>
  __HAL_RCC_PLL2_DISABLE();
 8006060:	4d9f      	ldr	r5, [pc, #636]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006068:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800606a:	f7fe f929 	bl	80042c0 <HAL_GetTick>
 800606e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006070:	e005      	b.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006072:	f7fe f925 	bl	80042c0 <HAL_GetTick>
 8006076:	1bc0      	subs	r0, r0, r7
 8006078:	2802      	cmp	r0, #2
 800607a:	f201 8324 	bhi.w	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800607e:	682b      	ldr	r3, [r5, #0]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	d4f6      	bmi.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8006084:	f104 0008 	add.w	r0, r4, #8
 8006088:	f7ff fc6a 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800608c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006090:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006092:	2d00      	cmp	r5, #0
 8006094:	f041 826c 	bne.w	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
      __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006098:	4f91      	ldr	r7, [pc, #580]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800609a:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 800609e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80060a2:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 80060a6:	4301      	orrs	r1, r0
 80060a8:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060ac:	0499      	lsls	r1, r3, #18
 80060ae:	d50f      	bpl.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c1ClockSelection)
 80060b0:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80060b4:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80060b8:	f000 86a0 	beq.w	8006dfc <HAL_RCCEx_PeriphCLKConfig+0x1334>
 80060bc:	f240 82ec 	bls.w	8006698 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
 80060c0:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80060c4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80060c8:	f000 82e9 	beq.w	800669e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 80060cc:	2601      	movs	r6, #1
 80060ce:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060d0:	045f      	lsls	r7, r3, #17
 80060d2:	d50f      	bpl.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->I2c2ClockSelection)
 80060d4:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 80060d8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80060dc:	f000 86b0 	beq.w	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x1378>
 80060e0:	f240 82eb 	bls.w	80066ba <HAL_RCCEx_PeriphCLKConfig+0xbf2>
 80060e4:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80060e8:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 80060ec:	f000 82e8 	beq.w	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xbf8>
 80060f0:	2601      	movs	r6, #1
 80060f2:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80060f4:	0419      	lsls	r1, r3, #16
 80060f6:	d50f      	bpl.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c3ClockSelection)
 80060f8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80060fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006100:	f000 8642 	beq.w	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
 8006104:	f240 82b7 	bls.w	8006676 <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8006108:	f421 1180 	bic.w	r1, r1, #1048576	; 0x100000
 800610c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006110:	f000 82b4 	beq.w	800667c <HAL_RCCEx_PeriphCLKConfig+0xbb4>
 8006114:	2601      	movs	r6, #1
 8006116:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006118:	0557      	lsls	r7, r2, #21
 800611a:	d50f      	bpl.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c4ClockSelection)
 800611c:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8006120:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8006124:	f000 864d 	beq.w	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x12fa>
 8006128:	f240 8294 	bls.w	8006654 <HAL_RCCEx_PeriphCLKConfig+0xb8c>
 800612c:	f421 0180 	bic.w	r1, r1, #4194304	; 0x400000
 8006130:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006134:	f000 8291 	beq.w	800665a <HAL_RCCEx_PeriphCLKConfig+0xb92>
 8006138:	2601      	movs	r6, #1
 800613a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800613c:	03d9      	lsls	r1, r3, #15
 800613e:	d50b      	bpl.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x690>
    switch (pPeriphClkInit->I3c1ClockSelection)
 8006140:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8006144:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8006148:	f000 851d 	beq.w	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x10be>
 800614c:	f031 7100 	bics.w	r1, r1, #33554432	; 0x2000000
 8006150:	f000 8532 	beq.w	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x10f0>
 8006154:	2601      	movs	r6, #1
 8006156:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006158:	0510      	lsls	r0, r2, #20
 800615a:	d509      	bpl.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x6a8>
    __HAL_RCC_TIMCLKPRESCALER(pPeriphClkInit->TimPresSelection);
 800615c:	4960      	ldr	r1, [pc, #384]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800615e:	69c8      	ldr	r0, [r1, #28]
 8006160:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8006164:	61c8      	str	r0, [r1, #28]
 8006166:	69c8      	ldr	r0, [r1, #28]
 8006168:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
 800616c:	4338      	orrs	r0, r7
 800616e:	61c8      	str	r0, [r1, #28]
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006170:	0399      	lsls	r1, r3, #14
 8006172:	d532      	bpl.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 8006174:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8006178:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800617c:	f000 87ff 	beq.w	800717e <HAL_RCCEx_PeriphCLKConfig+0x16b6>
 8006180:	f200 82ac 	bhi.w	80066dc <HAL_RCCEx_PeriphCLKConfig+0xc14>
 8006184:	b1e1      	cbz	r1, 80061c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8006186:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800618a:	f040 82b1 	bne.w	80066f0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
  __HAL_RCC_PLL2_DISABLE();
 800618e:	4d54      	ldr	r5, [pc, #336]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006190:	682b      	ldr	r3, [r5, #0]
 8006192:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006196:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006198:	f7fe f892 	bl	80042c0 <HAL_GetTick>
 800619c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800619e:	e005      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80061a0:	f7fe f88e 	bl	80042c0 <HAL_GetTick>
 80061a4:	1bc0      	subs	r0, r0, r7
 80061a6:	2802      	cmp	r0, #2
 80061a8:	f201 82da 	bhi.w	8007760 <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	011b      	lsls	r3, r3, #4
 80061b0:	d4f6      	bmi.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 80061b2:	f104 0008 	add.w	r0, r4, #8
 80061b6:	f7ff fbd3 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80061be:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80061c0:	2d00      	cmp	r5, #0
 80061c2:	f041 81cf 	bne.w	8007564 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
      __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80061c6:	4f46      	ldr	r7, [pc, #280]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80061c8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
 80061cc:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80061d0:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 80061d4:	4301      	orrs	r1, r0
 80061d6:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061da:	0359      	lsls	r1, r3, #13
 80061dc:	d532      	bpl.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 80061de:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80061e2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 80061e6:	f000 866d 	beq.w	8006ec4 <HAL_RCCEx_PeriphCLKConfig+0x13fc>
 80061ea:	f200 8284 	bhi.w	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 80061ee:	b1e1      	cbz	r1, 800622a <HAL_RCCEx_PeriphCLKConfig+0x762>
 80061f0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80061f4:	f040 8289 	bne.w	800670a <HAL_RCCEx_PeriphCLKConfig+0xc42>
  __HAL_RCC_PLL2_DISABLE();
 80061f8:	4d39      	ldr	r5, [pc, #228]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80061fa:	682b      	ldr	r3, [r5, #0]
 80061fc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006200:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006202:	f7fe f85d 	bl	80042c0 <HAL_GetTick>
 8006206:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006208:	e005      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0x74e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800620a:	f7fe f859 	bl	80042c0 <HAL_GetTick>
 800620e:	1bc0      	subs	r0, r0, r7
 8006210:	2802      	cmp	r0, #2
 8006212:	f201 826a 	bhi.w	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006216:	682b      	ldr	r3, [r5, #0]
 8006218:	011b      	lsls	r3, r3, #4
 800621a:	d4f6      	bmi.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x742>
 800621c:	f104 0008 	add.w	r0, r4, #8
 8006220:	f7ff fb9e 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006224:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006228:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800622a:	2d00      	cmp	r5, #0
 800622c:	f041 81be 	bne.w	80075ac <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
      __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006230:	4f2b      	ldr	r7, [pc, #172]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006232:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
 8006236:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800623a:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 800623e:	4301      	orrs	r1, r0
 8006240:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006244:	0691      	lsls	r1, r2, #26
 8006246:	d532      	bpl.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006248:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800624c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006250:	f000 8655 	beq.w	8006efe <HAL_RCCEx_PeriphCLKConfig+0x1436>
 8006254:	f200 825c 	bhi.w	8006710 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006258:	b1e1      	cbz	r1, 8006294 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800625a:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800625e:	f040 8261 	bne.w	8006724 <HAL_RCCEx_PeriphCLKConfig+0xc5c>
  __HAL_RCC_PLL2_DISABLE();
 8006262:	4d1f      	ldr	r5, [pc, #124]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800626a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800626c:	f7fe f828 	bl	80042c0 <HAL_GetTick>
 8006270:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006272:	e005      	b.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006274:	f7fe f824 	bl	80042c0 <HAL_GetTick>
 8006278:	1bc0      	subs	r0, r0, r7
 800627a:	2802      	cmp	r0, #2
 800627c:	f201 827e 	bhi.w	800777c <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006280:	682b      	ldr	r3, [r5, #0]
 8006282:	011b      	lsls	r3, r3, #4
 8006284:	d4f6      	bmi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
 8006286:	f104 0008 	add.w	r0, r4, #8
 800628a:	f7ff fb69 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800628e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006292:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006294:	2d00      	cmp	r5, #0
 8006296:	f041 8186 	bne.w	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1ade>
      __HAL_RCC_LPTIM3_CONFIG(pPeriphClkInit->Lptim3ClockSelection);
 800629a:	4f11      	ldr	r7, [pc, #68]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 800629c:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
 80062a0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80062a4:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 80062a8:	4301      	orrs	r1, r0
 80062aa:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 80062ae:	0651      	lsls	r1, r2, #25
 80062b0:	d535      	bpl.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 80062b2:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80062b6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80062ba:	f000 86cd 	beq.w	8007058 <HAL_RCCEx_PeriphCLKConfig+0x1590>
 80062be:	f200 8234 	bhi.w	800672a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80062c2:	b1f9      	cbz	r1, 8006304 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80062c4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80062c8:	f040 8239 	bne.w	800673e <HAL_RCCEx_PeriphCLKConfig+0xc76>
  __HAL_RCC_PLL2_DISABLE();
 80062cc:	4d04      	ldr	r5, [pc, #16]	; (80062e0 <HAL_RCCEx_PeriphCLKConfig+0x818>)
 80062ce:	682b      	ldr	r3, [r5, #0]
 80062d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062d4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80062d6:	f7fd fff3 	bl	80042c0 <HAL_GetTick>
 80062da:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062dc:	e008      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x828>
 80062de:	bf00      	nop
 80062e0:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80062e4:	f7fd ffec 	bl	80042c0 <HAL_GetTick>
 80062e8:	1bc0      	subs	r0, r0, r7
 80062ea:	2802      	cmp	r0, #2
 80062ec:	f201 8209 	bhi.w	8007702 <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	d4f6      	bmi.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
 80062f6:	f104 0008 	add.w	r0, r4, #8
 80062fa:	f7ff fb31 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 80062fe:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006302:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006304:	2d00      	cmp	r5, #0
 8006306:	f041 813c 	bne.w	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
      __HAL_RCC_LPTIM4_CONFIG(pPeriphClkInit->Lptim4ClockSelection);
 800630a:	4faf      	ldr	r7, [pc, #700]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 800630c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
 8006310:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006314:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8006318:	4301      	orrs	r1, r0
 800631a:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 800631e:	0611      	lsls	r1, r2, #24
 8006320:	d532      	bpl.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006322:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8006326:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800632a:	f000 86ec 	beq.w	8007106 <HAL_RCCEx_PeriphCLKConfig+0x163e>
 800632e:	f200 8209 	bhi.w	8006744 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8006332:	b1e1      	cbz	r1, 800636e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006334:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8006338:	f040 820e 	bne.w	8006758 <HAL_RCCEx_PeriphCLKConfig+0xc90>
  __HAL_RCC_PLL2_DISABLE();
 800633c:	4da2      	ldr	r5, [pc, #648]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 800633e:	682b      	ldr	r3, [r5, #0]
 8006340:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006344:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006346:	f7fd ffbb 	bl	80042c0 <HAL_GetTick>
 800634a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800634c:	e005      	b.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x892>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800634e:	f7fd ffb7 	bl	80042c0 <HAL_GetTick>
 8006352:	1bc0      	subs	r0, r0, r7
 8006354:	2802      	cmp	r0, #2
 8006356:	f201 81bc 	bhi.w	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800635a:	682b      	ldr	r3, [r5, #0]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	d4f6      	bmi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x886>
 8006360:	f104 0008 	add.w	r0, r4, #8
 8006364:	f7ff fafc 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006368:	e9d4 3200 	ldrd	r3, r2, [r4]
 800636c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800636e:	2d00      	cmp	r5, #0
 8006370:	f041 80f2 	bne.w	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1a90>
      __HAL_RCC_LPTIM5_CONFIG(pPeriphClkInit->Lptim5ClockSelection);
 8006374:	4f94      	ldr	r7, [pc, #592]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006376:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
 800637a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800637e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8006382:	4301      	orrs	r1, r0
 8006384:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8006388:	05d1      	lsls	r1, r2, #23
 800638a:	d532      	bpl.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 800638c:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8006390:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8006394:	f000 872c 	beq.w	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1728>
 8006398:	f200 81e1 	bhi.w	800675e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800639c:	b1e1      	cbz	r1, 80063d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800639e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80063a2:	f040 81e6 	bne.w	8006772 <HAL_RCCEx_PeriphCLKConfig+0xcaa>
  __HAL_RCC_PLL2_DISABLE();
 80063a6:	4d88      	ldr	r5, [pc, #544]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063ae:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80063b0:	f7fd ff86 	bl	80042c0 <HAL_GetTick>
 80063b4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063b6:	e005      	b.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80063b8:	f7fd ff82 	bl	80042c0 <HAL_GetTick>
 80063bc:	1bc0      	subs	r0, r0, r7
 80063be:	2802      	cmp	r0, #2
 80063c0:	f201 81e8 	bhi.w	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	d4f6      	bmi.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80063ca:	f104 0008 	add.w	r0, r4, #8
 80063ce:	f7ff fac7 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063d2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80063d6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80063d8:	2d00      	cmp	r5, #0
 80063da:	f041 80c6 	bne.w	800756a <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
      __HAL_RCC_LPTIM6_CONFIG(pPeriphClkInit->Lptim6ClockSelection);
 80063de:	4f7a      	ldr	r7, [pc, #488]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80063e0:	f8d4 00b8 	ldr.w	r0, [r4, #184]	; 0xb8
 80063e4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80063e8:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
 80063ec:	4301      	orrs	r1, r0
 80063ee:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80063f2:	0319      	lsls	r1, r3, #12
 80063f4:	d536      	bpl.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai1ClockSelection)
 80063f6:	f8d4 10c0 	ldr.w	r1, [r4, #192]	; 0xc0
 80063fa:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80063fe:	f000 87f9 	beq.w	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x192c>
 8006402:	f200 81b9 	bhi.w	8006778 <HAL_RCCEx_PeriphCLKConfig+0xcb0>
 8006406:	2900      	cmp	r1, #0
 8006408:	f000 8476 	beq.w	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x1230>
 800640c:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8006410:	f040 81ba 	bne.w	8006788 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
  __HAL_RCC_PLL2_DISABLE();
 8006414:	4d6c      	ldr	r5, [pc, #432]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800641c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800641e:	f7fd ff4f 	bl	80042c0 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006422:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006424:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	d508      	bpl.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x974>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800642a:	f7fd ff49 	bl	80042c0 <HAL_GetTick>
 800642e:	1bc0      	subs	r0, r0, r7
 8006430:	2802      	cmp	r0, #2
 8006432:	f201 81cd 	bhi.w	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006436:	682b      	ldr	r3, [r5, #0]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	d4f6      	bmi.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x962>
 800643c:	f104 0008 	add.w	r0, r4, #8
 8006440:	f7ff fa8e 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006444:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006448:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800644a:	2d00      	cmp	r5, #0
 800644c:	f040 845c 	bne.w	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1240>
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006450:	4f5d      	ldr	r7, [pc, #372]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006452:	f8d4 00c0 	ldr.w	r0, [r4, #192]	; 0xc0
 8006456:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800645a:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 800645e:	4301      	orrs	r1, r0
 8006460:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8006464:	02d9      	lsls	r1, r3, #11
 8006466:	d536      	bpl.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->Sai2ClockSelection)
 8006468:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 800646c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006470:	f000 87a5 	beq.w	80073be <HAL_RCCEx_PeriphCLKConfig+0x18f6>
 8006474:	f200 818b 	bhi.w	800678e <HAL_RCCEx_PeriphCLKConfig+0xcc6>
 8006478:	2900      	cmp	r1, #0
 800647a:	f000 8448 	beq.w	8006d0e <HAL_RCCEx_PeriphCLKConfig+0x1246>
 800647e:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 8006482:	f040 818c 	bne.w	800679e <HAL_RCCEx_PeriphCLKConfig+0xcd6>
  __HAL_RCC_PLL2_DISABLE();
 8006486:	4d50      	ldr	r5, [pc, #320]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006488:	682b      	ldr	r3, [r5, #0]
 800648a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800648e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006490:	f7fd ff16 	bl	80042c0 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006494:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006496:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006498:	011b      	lsls	r3, r3, #4
 800649a:	d508      	bpl.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800649c:	f7fd ff10 	bl	80042c0 <HAL_GetTick>
 80064a0:	1bc0      	subs	r0, r0, r7
 80064a2:	2802      	cmp	r0, #2
 80064a4:	f201 8188 	bhi.w	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064a8:	682b      	ldr	r3, [r5, #0]
 80064aa:	011b      	lsls	r3, r3, #4
 80064ac:	d4f6      	bmi.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80064ae:	f104 0008 	add.w	r0, r4, #8
 80064b2:	f7ff fa55 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80064b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80064ba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80064bc:	2d00      	cmp	r5, #0
 80064be:	f040 842e 	bne.w	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x1256>
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80064c2:	4f41      	ldr	r7, [pc, #260]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80064c4:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
 80064c8:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80064cc:	f421 1160 	bic.w	r1, r1, #3670016	; 0x380000
 80064d0:	4301      	orrs	r1, r0
 80064d2:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80064d6:	0299      	lsls	r1, r3, #10
 80064d8:	d516      	bpl.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->AdcDacClockSelection)
 80064da:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
 80064de:	2902      	cmp	r1, #2
 80064e0:	f000 8435 	beq.w	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x1286>
 80064e4:	d903      	bls.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xa26>
 80064e6:	3903      	subs	r1, #3
 80064e8:	2902      	cmp	r1, #2
 80064ea:	f200 831a 	bhi.w	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x105a>
    if (ret == HAL_OK)
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	f040 87d8 	bne.w	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80064f4:	4f34      	ldr	r7, [pc, #208]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80064f6:	f8d4 00d4 	ldr.w	r0, [r4, #212]	; 0xd4
 80064fa:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80064fe:	f021 0107 	bic.w	r1, r1, #7
 8006502:	4301      	orrs	r1, r0
 8006504:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006508:	0590      	lsls	r0, r2, #22
 800650a:	d507      	bpl.n	800651c <HAL_RCCEx_PeriphCLKConfig+0xa54>
    switch (pPeriphClkInit->DacLowPowerClockSelection)
 800650c:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
 8006510:	f031 0008 	bics.w	r0, r1, #8
 8006514:	f000 835f 	beq.w	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006518:	2601      	movs	r6, #1
 800651a:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800651c:	0199      	lsls	r1, r3, #6
 800651e:	f100 8368 	bmi.w	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x112a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006522:	0158      	lsls	r0, r3, #5
 8006524:	d50d      	bpl.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    switch (pPeriphClkInit->RngClockSelection)
 8006526:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
 800652a:	2910      	cmp	r1, #16
 800652c:	f000 8406 	beq.w	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x1274>
 8006530:	f240 8138 	bls.w	80067a4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006534:	f021 0010 	bic.w	r0, r1, #16
 8006538:	2820      	cmp	r0, #32
 800653a:	f000 8136 	beq.w	80067aa <HAL_RCCEx_PeriphCLKConfig+0xce2>
 800653e:	2601      	movs	r6, #1
 8006540:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006542:	0259      	lsls	r1, r3, #9
 8006544:	d52d      	bpl.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xada>
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006546:	f8d4 10cc 	ldr.w	r1, [r4, #204]	; 0xcc
 800654a:	2900      	cmp	r1, #0
 800654c:	f000 83f0 	beq.w	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x1268>
 8006550:	2940      	cmp	r1, #64	; 0x40
 8006552:	f040 82ef 	bne.w	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x106c>
  __HAL_RCC_PLL2_DISABLE();
 8006556:	4d1c      	ldr	r5, [pc, #112]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800655e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006560:	f7fd feae 	bl	80042c0 <HAL_GetTick>
 8006564:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006566:	e005      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xaac>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006568:	f7fd feaa 	bl	80042c0 <HAL_GetTick>
 800656c:	1bc0      	subs	r0, r0, r7
 800656e:	2802      	cmp	r0, #2
 8006570:	f201 8146 	bhi.w	8007800 <HAL_RCCEx_PeriphCLKConfig+0x1d38>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	d4f6      	bmi.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
 800657a:	f104 0008 	add.w	r0, r4, #8
 800657e:	f7ff f9ef 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8006582:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006586:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006588:	2d00      	cmp	r5, #0
 800658a:	f041 8136 	bne.w	80077fa <HAL_RCCEx_PeriphCLKConfig+0x1d32>
      __HAL_RCC_SDMMC1_CONFIG(pPeriphClkInit->Sdmmc1ClockSelection);
 800658e:	4f0e      	ldr	r7, [pc, #56]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 8006590:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
 8006594:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006598:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800659c:	4301      	orrs	r1, r0
 800659e:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80065a2:	021f      	lsls	r7, r3, #8
 80065a4:	d52f      	bpl.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 80065a6:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
 80065aa:	2900      	cmp	r1, #0
 80065ac:	f000 83ba 	beq.w	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x125c>
 80065b0:	2980      	cmp	r1, #128	; 0x80
 80065b2:	f040 82b9 	bne.w	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x1060>
  __HAL_RCC_PLL2_DISABLE();
 80065b6:	4d04      	ldr	r5, [pc, #16]	; (80065c8 <HAL_RCCEx_PeriphCLKConfig+0xb00>)
 80065b8:	682b      	ldr	r3, [r5, #0]
 80065ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80065be:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80065c0:	f7fd fe7e 	bl	80042c0 <HAL_GetTick>
 80065c4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065c6:	e007      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0xb10>
 80065c8:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065cc:	f7fd fe78 	bl	80042c0 <HAL_GetTick>
 80065d0:	1bc0      	subs	r0, r0, r7
 80065d2:	2802      	cmp	r0, #2
 80065d4:	f201 8120 	bhi.w	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1d50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80065d8:	682b      	ldr	r3, [r5, #0]
 80065da:	0118      	lsls	r0, r3, #4
 80065dc:	d4f6      	bmi.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
 80065de:	f104 0008 	add.w	r0, r4, #8
 80065e2:	f7ff f9bd 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80065e6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80065ea:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80065ec:	2d00      	cmp	r5, #0
 80065ee:	f041 8101 	bne.w	80077f4 <HAL_RCCEx_PeriphCLKConfig+0x1d2c>
      __HAL_RCC_SDMMC2_CONFIG(pPeriphClkInit->Sdmmc2ClockSelection);
 80065f2:	4f91      	ldr	r7, [pc, #580]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 80065f4:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
 80065f8:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80065fc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006600:	4301      	orrs	r1, r0
 8006602:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006606:	0119      	lsls	r1, r3, #4
 8006608:	f140 80ed 	bpl.w	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Spi1ClockSelection)
 800660c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
 8006610:	2904      	cmp	r1, #4
 8006612:	f201 8150 	bhi.w	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x1dee>
 8006616:	e8df f011 	tbh	[pc, r1, lsl #1]
 800661a:	00d4      	.short	0x00d4
 800661c:	070b072a 	.word	0x070b072a
 8006620:	00d900d9 	.word	0x00d900d9
    switch (pPeriphClkInit->Uart12ClockSelection)
 8006624:	f021 0010 	bic.w	r0, r1, #16
 8006628:	2840      	cmp	r0, #64	; 0x40
 800662a:	f43f acfd 	beq.w	8006028 <HAL_RCCEx_PeriphCLKConfig+0x560>
 800662e:	2930      	cmp	r1, #48	; 0x30
 8006630:	f43f acfa 	beq.w	8006028 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006634:	2601      	movs	r6, #1
 8006636:	4635      	mov	r5, r6
 8006638:	e503      	b.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x57a>
    switch (pPeriphClkInit->Lpuart1ClockSelection)
 800663a:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 800663e:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8006642:	f43f ad26 	beq.w	8006092 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006646:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800664a:	f43f ad22 	beq.w	8006092 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800664e:	2601      	movs	r6, #1
 8006650:	4635      	mov	r5, r6
 8006652:	e52b      	b.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    switch (pPeriphClkInit->I2c4ClockSelection)
 8006654:	2900      	cmp	r1, #0
 8006656:	f47f ad6f 	bne.w	8006138 <HAL_RCCEx_PeriphCLKConfig+0x670>
    if (ret == HAL_OK)
 800665a:	2d00      	cmp	r5, #0
 800665c:	f040 8725 	bne.w	80074aa <HAL_RCCEx_PeriphCLKConfig+0x19e2>
      __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006660:	4f75      	ldr	r7, [pc, #468]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8006662:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
 8006666:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800666a:	f421 0140 	bic.w	r1, r1, #12582912	; 0xc00000
 800666e:	4301      	orrs	r1, r0
 8006670:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006674:	e562      	b.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x674>
    switch (pPeriphClkInit->I2c3ClockSelection)
 8006676:	2900      	cmp	r1, #0
 8006678:	f47f ad4c 	bne.w	8006114 <HAL_RCCEx_PeriphCLKConfig+0x64c>
    if (ret == HAL_OK)
 800667c:	2d00      	cmp	r5, #0
 800667e:	f040 8720 	bne.w	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
      __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006682:	4f6d      	ldr	r7, [pc, #436]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 8006684:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
 8006688:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800668c:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 8006690:	4301      	orrs	r1, r0
 8006692:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006696:	e53f      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->I2c1ClockSelection)
 8006698:	2900      	cmp	r1, #0
 800669a:	f47f ad17 	bne.w	80060cc <HAL_RCCEx_PeriphCLKConfig+0x604>
    if (ret == HAL_OK)
 800669e:	2d00      	cmp	r5, #0
 80066a0:	f040 8709 	bne.w	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x19ee>
      __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80066a4:	4f64      	ldr	r7, [pc, #400]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 80066a6:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 80066aa:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80066ae:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80066b2:	4301      	orrs	r1, r0
 80066b4:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80066b8:	e50a      	b.n	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    switch (pPeriphClkInit->I2c2ClockSelection)
 80066ba:	2900      	cmp	r1, #0
 80066bc:	f47f ad18 	bne.w	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x628>
    if (ret == HAL_OK)
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	f040 86fb 	bne.w	80074bc <HAL_RCCEx_PeriphCLKConfig+0x19f4>
      __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80066c6:	4f5c      	ldr	r7, [pc, #368]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 80066c8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 80066cc:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80066d0:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
 80066d4:	4301      	orrs	r1, r0
 80066d6:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80066da:	e50b      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    switch (pPeriphClkInit->Lptim1ClockSelection)
 80066dc:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80066e0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80066e4:	f43f ad6c 	beq.w	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80066e8:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80066ec:	f43f ad68 	beq.w	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80066f0:	2601      	movs	r6, #1
 80066f2:	4635      	mov	r5, r6
 80066f4:	e571      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x712>
    switch (pPeriphClkInit->Lptim2ClockSelection)
 80066f6:	f421 5080 	bic.w	r0, r1, #4096	; 0x1000
 80066fa:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 80066fe:	f43f ad94 	beq.w	800622a <HAL_RCCEx_PeriphCLKConfig+0x762>
 8006702:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8006706:	f43f ad90 	beq.w	800622a <HAL_RCCEx_PeriphCLKConfig+0x762>
 800670a:	2601      	movs	r6, #1
 800670c:	4635      	mov	r5, r6
 800670e:	e599      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    switch (pPeriphClkInit->Lptim3ClockSelection)
 8006710:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 8006714:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8006718:	f43f adbc 	beq.w	8006294 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 800671c:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 8006720:	f43f adb8 	beq.w	8006294 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
 8006724:	2601      	movs	r6, #1
 8006726:	4635      	mov	r5, r6
 8006728:	e5c1      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    switch (pPeriphClkInit->Lptim4ClockSelection)
 800672a:	f421 1080 	bic.w	r0, r1, #1048576	; 0x100000
 800672e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8006732:	f43f ade7 	beq.w	8006304 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8006736:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800673a:	f43f ade3 	beq.w	8006304 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800673e:	2601      	movs	r6, #1
 8006740:	4635      	mov	r5, r6
 8006742:	e5ec      	b.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x856>
    switch (pPeriphClkInit->Lptim5ClockSelection)
 8006744:	f021 7080 	bic.w	r0, r1, #16777216	; 0x1000000
 8006748:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800674c:	f43f ae0f 	beq.w	800636e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006750:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8006754:	f43f ae0b 	beq.w	800636e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 8006758:	2601      	movs	r6, #1
 800675a:	4635      	mov	r5, r6
 800675c:	e614      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    switch (pPeriphClkInit->Lptim6ClockSelection)
 800675e:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8006762:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006766:	f43f ae37 	beq.w	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 800676a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800676e:	f43f ae33 	beq.w	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
 8006772:	2601      	movs	r6, #1
 8006774:	4635      	mov	r5, r6
 8006776:	e63c      	b.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
    switch (pPeriphClkInit->Sai1ClockSelection)
 8006778:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800677c:	f43f ae65 	beq.w	800644a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8006780:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 8006784:	f43f ae61 	beq.w	800644a <HAL_RCCEx_PeriphCLKConfig+0x982>
 8006788:	2601      	movs	r6, #1
 800678a:	4635      	mov	r5, r6
 800678c:	e66a      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    switch (pPeriphClkInit->Sai2ClockSelection)
 800678e:	f5b1 1fc0 	cmp.w	r1, #1572864	; 0x180000
 8006792:	f43f ae93 	beq.w	80064bc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 8006796:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800679a:	f43f ae8f 	beq.w	80064bc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
 800679e:	2601      	movs	r6, #1
 80067a0:	4635      	mov	r5, r6
 80067a2:	e698      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
    switch (pPeriphClkInit->RngClockSelection)
 80067a4:	2900      	cmp	r1, #0
 80067a6:	f47f aeca 	bne.w	800653e <HAL_RCCEx_PeriphCLKConfig+0xa76>
    if (ret == HAL_OK)
 80067aa:	2d00      	cmp	r5, #0
 80067ac:	f040 8365 	bne.w	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80067b0:	4f21      	ldr	r7, [pc, #132]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 80067b2:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80067b6:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 80067ba:	4301      	orrs	r1, r0
 80067bc:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80067c0:	e6bf      	b.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c2:	481d      	ldr	r0, [pc, #116]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 80067c4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80067c6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80067ca:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	f040 864b 	bne.w	8007468 <HAL_RCCEx_PeriphCLKConfig+0x19a0>
      __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80067d2:	4f19      	ldr	r7, [pc, #100]	; (8006838 <HAL_RCCEx_PeriphCLKConfig+0xd70>)
 80067d4:	f8d4 00e0 	ldr.w	r0, [r4, #224]	; 0xe0
 80067d8:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80067dc:	f021 0107 	bic.w	r1, r1, #7
 80067e0:	4301      	orrs	r1, r0
 80067e2:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80067e6:	00d9      	lsls	r1, r3, #3
 80067e8:	d52a      	bpl.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    switch (pPeriphClkInit->Spi2ClockSelection)
 80067ea:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
 80067ee:	2920      	cmp	r1, #32
 80067f0:	d824      	bhi.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd74>
 80067f2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80067f6:	0264      	.short	0x0264
 80067f8:	00230023 	.word	0x00230023
 80067fc:	00230023 	.word	0x00230023
 8006800:	00230023 	.word	0x00230023
 8006804:	07090023 	.word	0x07090023
 8006808:	00230023 	.word	0x00230023
 800680c:	00230023 	.word	0x00230023
 8006810:	00230023 	.word	0x00230023
 8006814:	06ea0023 	.word	0x06ea0023
 8006818:	00230023 	.word	0x00230023
 800681c:	00230023 	.word	0x00230023
 8006820:	00230023 	.word	0x00230023
 8006824:	02690023 	.word	0x02690023
 8006828:	00230023 	.word	0x00230023
 800682c:	00230023 	.word	0x00230023
 8006830:	00230023 	.word	0x00230023
 8006834:	02690023 	.word	0x02690023
 8006838:	44020c00 	.word	0x44020c00
 800683c:	2601      	movs	r6, #1
 800683e:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006840:	0099      	lsls	r1, r3, #2
 8006842:	d534      	bpl.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi3ClockSelection)
 8006844:	f8d4 10e8 	ldr.w	r1, [r4, #232]	; 0xe8
 8006848:	2980      	cmp	r1, #128	; 0x80
 800684a:	f000 859d 	beq.w	8007388 <HAL_RCCEx_PeriphCLKConfig+0x18c0>
 800684e:	f200 80d5 	bhi.w	80069fc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006852:	2900      	cmp	r1, #0
 8006854:	f000 8246 	beq.w	8006ce4 <HAL_RCCEx_PeriphCLKConfig+0x121c>
 8006858:	2940      	cmp	r1, #64	; 0x40
 800685a:	f040 80d6 	bne.w	8006a0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
  __HAL_RCC_PLL2_DISABLE();
 800685e:	4db4      	ldr	r5, [pc, #720]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006866:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006868:	f7fd fd2a 	bl	80042c0 <HAL_GetTick>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800686c:	682b      	ldr	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800686e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006870:	011a      	lsls	r2, r3, #4
 8006872:	d508      	bpl.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xdbe>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006874:	f7fd fd24 	bl	80042c0 <HAL_GetTick>
 8006878:	1bc0      	subs	r0, r0, r7
 800687a:	2802      	cmp	r0, #2
 800687c:	f200 87a2 	bhi.w	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006880:	682b      	ldr	r3, [r5, #0]
 8006882:	011a      	lsls	r2, r3, #4
 8006884:	d4f6      	bmi.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8006886:	f104 0008 	add.w	r0, r4, #8
 800688a:	f7ff f869 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 800688e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006892:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006894:	2d00      	cmp	r5, #0
 8006896:	f040 822d 	bne.w	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x122c>
      __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800689a:	4fa5      	ldr	r7, [pc, #660]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800689c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
 80068a0:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80068a4:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
 80068a8:	4301      	orrs	r1, r0
 80068aa:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80068ae:	0058      	lsls	r0, r3, #1
 80068b0:	d532      	bpl.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi4ClockSelection)
 80068b2:	f8d4 10ec 	ldr.w	r1, [r4, #236]	; 0xec
 80068b6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80068ba:	f000 8376 	beq.w	8006faa <HAL_RCCEx_PeriphCLKConfig+0x14e2>
 80068be:	f200 80a7 	bhi.w	8006a10 <HAL_RCCEx_PeriphCLKConfig+0xf48>
 80068c2:	b1e1      	cbz	r1, 80068fe <HAL_RCCEx_PeriphCLKConfig+0xe36>
 80068c4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80068c8:	f040 80ac 	bne.w	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
  __HAL_RCC_PLL2_DISABLE();
 80068cc:	4d98      	ldr	r5, [pc, #608]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80068ce:	682b      	ldr	r3, [r5, #0]
 80068d0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80068d4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80068d6:	f7fd fcf3 	bl	80042c0 <HAL_GetTick>
 80068da:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068dc:	e005      	b.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0xe22>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80068de:	f7fd fcef 	bl	80042c0 <HAL_GetTick>
 80068e2:	1bc0      	subs	r0, r0, r7
 80068e4:	2802      	cmp	r0, #2
 80068e6:	f200 8761 	bhi.w	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80068ea:	682b      	ldr	r3, [r5, #0]
 80068ec:	0119      	lsls	r1, r3, #4
 80068ee:	d4f6      	bmi.n	80068de <HAL_RCCEx_PeriphCLKConfig+0xe16>
 80068f0:	f104 0008 	add.w	r0, r4, #8
 80068f4:	f7ff f834 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80068f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80068fc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80068fe:	2d00      	cmp	r5, #0
 8006900:	f040 864e 	bne.w	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
      __HAL_RCC_SPI4_CONFIG(pPeriphClkInit->Spi4ClockSelection);
 8006904:	4f8a      	ldr	r7, [pc, #552]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006906:	f8d4 00ec 	ldr.w	r0, [r4, #236]	; 0xec
 800690a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800690e:	f421 6160 	bic.w	r1, r1, #3584	; 0xe00
 8006912:	4301      	orrs	r1, r0
 8006914:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006918:	2b00      	cmp	r3, #0
 800691a:	da30      	bge.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi5ClockSelection)
 800691c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
 8006920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006924:	f000 8325 	beq.w	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x14aa>
 8006928:	d87f      	bhi.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
 800692a:	b1db      	cbz	r3, 8006964 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 800692c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006930:	f040 8083 	bne.w	8006a3a <HAL_RCCEx_PeriphCLKConfig+0xf72>
  __HAL_RCC_PLL2_DISABLE();
 8006934:	4d7e      	ldr	r5, [pc, #504]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800693c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800693e:	f7fd fcbf 	bl	80042c0 <HAL_GetTick>
 8006942:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006944:	e005      	b.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006946:	f7fd fcbb 	bl	80042c0 <HAL_GetTick>
 800694a:	1bc0      	subs	r0, r0, r7
 800694c:	2802      	cmp	r0, #2
 800694e:	f200 870d 	bhi.w	800776c <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	011b      	lsls	r3, r3, #4
 8006956:	d4f6      	bmi.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
 8006958:	f104 0008 	add.w	r0, r4, #8
 800695c:	f7ff f800 	bl	8005960 <RCCEx_PLL2_Config.part.0>
 8006960:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006962:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006964:	2d00      	cmp	r5, #0
 8006966:	f040 8615 	bne.w	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
      __HAL_RCC_SPI5_CONFIG(pPeriphClkInit->Spi5ClockSelection);
 800696a:	4971      	ldr	r1, [pc, #452]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800696c:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8006970:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 8006974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006978:	4303      	orrs	r3, r0
 800697a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800697e:	07d1      	lsls	r1, r2, #31
 8006980:	d52f      	bpl.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8006982:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8006986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800698a:	f000 84a8 	beq.w	80072de <HAL_RCCEx_PeriphCLKConfig+0x1816>
 800698e:	d857      	bhi.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0xf78>
 8006990:	b1d3      	cbz	r3, 80069c8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8006992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006996:	d15b      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0xf88>
  __HAL_RCC_PLL2_DISABLE();
 8006998:	4d65      	ldr	r5, [pc, #404]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 800699a:	682b      	ldr	r3, [r5, #0]
 800699c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80069a0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80069a2:	f7fd fc8d 	bl	80042c0 <HAL_GetTick>
 80069a6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069a8:	e005      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xeee>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069aa:	f7fd fc89 	bl	80042c0 <HAL_GetTick>
 80069ae:	1bc0      	subs	r0, r0, r7
 80069b0:	2802      	cmp	r0, #2
 80069b2:	f200 86ac 	bhi.w	800770e <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	d4f6      	bmi.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0xee2>
 80069bc:	f104 0008 	add.w	r0, r4, #8
 80069c0:	f7fe ffce 	bl	8005960 <RCCEx_PLL2_Config.part.0>
 80069c4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80069c6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80069c8:	2d00      	cmp	r5, #0
 80069ca:	f040 85c8 	bne.w	800755e <HAL_RCCEx_PeriphCLKConfig+0x1a96>
      __HAL_RCC_SPI6_CONFIG(pPeriphClkInit->Spi6ClockSelection);
 80069ce:	4958      	ldr	r1, [pc, #352]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 80069d0:	f8d4 00f4 	ldr.w	r0, [r4, #244]	; 0xf4
 80069d4:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
 80069d8:	f423 3360 	bic.w	r3, r3, #229376	; 0x38000
 80069dc:	4303      	orrs	r3, r0
 80069de:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80069e2:	0791      	lsls	r1, r2, #30
 80069e4:	d538      	bpl.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->OspiClockSelection)
 80069e6:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	f200 876b 	bhi.w	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x1dfe>
 80069f0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80069f4:	00840089 	.word	0x00840089
 80069f8:	008904ae 	.word	0x008904ae
    switch (pPeriphClkInit->Spi3ClockSelection)
 80069fc:	29c0      	cmp	r1, #192	; 0xc0
 80069fe:	f43f af49 	beq.w	8006894 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 8006a02:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006a06:	f43f af45 	beq.w	8006894 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
 8006a0a:	2601      	movs	r6, #1
 8006a0c:	4635      	mov	r5, r6
 8006a0e:	e74e      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
    switch (pPeriphClkInit->Spi4ClockSelection)
 8006a10:	f421 7000 	bic.w	r0, r1, #512	; 0x200
 8006a14:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006a18:	f43f af71 	beq.w	80068fe <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8006a1c:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
 8006a20:	f43f af6d 	beq.w	80068fe <HAL_RCCEx_PeriphCLKConfig+0xe36>
 8006a24:	2601      	movs	r6, #1
 8006a26:	4635      	mov	r5, r6
 8006a28:	e776      	b.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0xe50>
    switch (pPeriphClkInit->Spi5ClockSelection)
 8006a2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006a2e:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8006a32:	d097      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8006a34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a38:	d094      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0xe9c>
 8006a3a:	2601      	movs	r6, #1
 8006a3c:	4635      	mov	r5, r6
 8006a3e:	e79e      	b.n	800697e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    switch (pPeriphClkInit->Spi6ClockSelection)
 8006a40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006a44:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8006a48:	d0be      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8006a4a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8006a4e:	d0bb      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8006a50:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a52:	0791      	lsls	r1, r2, #30
    switch (pPeriphClkInit->Spi6ClockSelection)
 8006a54:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006a56:	d4c6      	bmi.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0xf1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a58:	0757      	lsls	r7, r2, #29
 8006a5a:	d50c      	bpl.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xfae>
    switch (pPeriphClkInit->FdcanClockSelection)
 8006a5c:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
 8006a60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a64:	d069      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0x1072>
 8006a66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a6a:	f000 8209 	beq.w	8006e80 <HAL_RCCEx_PeriphCLKConfig+0x13b8>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d068      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006a72:	2601      	movs	r6, #1
 8006a74:	4635      	mov	r5, r6
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006a76:	06d1      	lsls	r1, r2, #27
 8006a78:	d509      	bpl.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
    switch (pPeriphClkInit->UsbClockSelection)
 8006a7a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	f000 839a 	beq.w	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x16f0>
 8006a84:	2b30      	cmp	r3, #48	; 0x30
 8006a86:	d070      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x10a2>
 8006a88:	2b10      	cmp	r3, #16
 8006a8a:	d069      	beq.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x1098>
 8006a8c:	2601      	movs	r6, #1
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006a8e:	0713      	lsls	r3, r2, #28
 8006a90:	d509      	bpl.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0xfde>
    __HAL_RCC_CEC_CONFIG(pPeriphClkInit->CecClockSelection);
 8006a92:	4a27      	ldr	r2, [pc, #156]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006a94:	f8d4 10fc 	ldr.w	r1, [r4, #252]	; 0xfc
 8006a98:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8006a9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
}
 8006aa6:	4630      	mov	r0, r6
 8006aa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_RCC_PLL3_DISABLE();
 8006aac:	4d20      	ldr	r5, [pc, #128]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006aae:	682b      	ldr	r3, [r5, #0]
 8006ab0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006ab6:	f7fd fc03 	bl	80042c0 <HAL_GetTick>
 8006aba:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006abc:	e005      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1002>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006abe:	f7fd fbff 	bl	80042c0 <HAL_GetTick>
 8006ac2:	1bc0      	subs	r0, r0, r7
 8006ac4:	2802      	cmp	r0, #2
 8006ac6:	f200 866b 	bhi.w	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006aca:	682b      	ldr	r3, [r5, #0]
 8006acc:	0098      	lsls	r0, r3, #2
 8006ace:	d4f6      	bmi.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0xff6>
 8006ad0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006ad4:	f7fe ff9e 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8006ad8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006adc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	f040 8567 	bne.w	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
      __HAL_RCC_USART11_CONFIG(pPeriphClkInit->Usart11ClockSelection);
 8006ae4:	4f12      	ldr	r7, [pc, #72]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006ae6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8006aea:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8006aee:	f021 0107 	bic.w	r1, r1, #7
 8006af2:	4301      	orrs	r1, r0
 8006af4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8006af8:	f7ff ba6d 	b.w	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006afc:	490c      	ldr	r1, [pc, #48]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006afe:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b04:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8006b06:	2d00      	cmp	r5, #0
 8006b08:	f040 81d6 	bne.w	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006b0c:	4908      	ldr	r1, [pc, #32]	; (8006b30 <HAL_RCCEx_PeriphCLKConfig+0x1068>)
 8006b0e:	f8d4 00dc 	ldr.w	r0, [r4, #220]	; 0xdc
 8006b12:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 8006b16:	f023 0303 	bic.w	r3, r3, #3
 8006b1a:	4303      	orrs	r3, r0
 8006b1c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006b20:	e79a      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xf90>
    switch (pPeriphClkInit->AdcDacClockSelection)
 8006b22:	2601      	movs	r6, #1
 8006b24:	4635      	mov	r5, r6
 8006b26:	e4ef      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    switch (pPeriphClkInit->Sdmmc2ClockSelection)
 8006b28:	2601      	movs	r6, #1
 8006b2a:	4635      	mov	r5, r6
 8006b2c:	e56b      	b.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 8006b2e:	bf00      	nop
 8006b30:	44020c00 	.word	0x44020c00
    switch (pPeriphClkInit->Sdmmc1ClockSelection)
 8006b34:	2601      	movs	r6, #1
 8006b36:	4635      	mov	r5, r6
 8006b38:	e533      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xada>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b3a:	49b5      	ldr	r1, [pc, #724]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006b3c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b42:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	f040 81b9 	bne.w	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x13f4>
      __HAL_RCC_FDCAN_CONFIG(pPeriphClkInit->FdcanClockSelection);
 8006b4a:	49b1      	ldr	r1, [pc, #708]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006b4c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8006b50:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
 8006b54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b58:	4303      	orrs	r3, r0
 8006b5a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
 8006b5e:	e78a      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xfae>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b60:	49ab      	ldr	r1, [pc, #684]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006b62:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b68:	628b      	str	r3, [r1, #40]	; 0x28
    if (ret == HAL_OK)
 8006b6a:	2d00      	cmp	r5, #0
 8006b6c:	f040 81a8 	bne.w	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
      __HAL_RCC_USB_CONFIG(pPeriphClkInit->UsbClockSelection);
 8006b70:	49a7      	ldr	r1, [pc, #668]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006b72:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
 8006b76:	f8d1 30e4 	ldr.w	r3, [r1, #228]	; 0xe4
 8006b7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006b7e:	4303      	orrs	r3, r0
 8006b80:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006b84:	e783      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 8006b86:	4da2      	ldr	r5, [pc, #648]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006b88:	682b      	ldr	r3, [r5, #0]
 8006b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006b90:	f7fd fb96 	bl	80042c0 <HAL_GetTick>
 8006b94:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b96:	e005      	b.n	8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b98:	f7fd fb92 	bl	80042c0 <HAL_GetTick>
 8006b9c:	1bc0      	subs	r0, r0, r7
 8006b9e:	2802      	cmp	r0, #2
 8006ba0:	f200 8646 	bhi.w	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1d68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ba4:	682b      	ldr	r3, [r5, #0]
 8006ba6:	009b      	lsls	r3, r3, #2
 8006ba8:	d4f6      	bmi.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x10d0>
 8006baa:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006bae:	f7fe ff31 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006bb2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006bb6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006bb8:	2d00      	cmp	r5, #0
 8006bba:	f040 8479 	bne.w	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x19e8>
      __HAL_RCC_I3C1_CONFIG(pPeriphClkInit->I3c1ClockSelection);
 8006bbe:	4f94      	ldr	r7, [pc, #592]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006bc0:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
 8006bc4:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8006bc8:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8006bcc:	4301      	orrs	r1, r0
 8006bce:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 8006bd2:	f7ff bac1 	b.w	8006158 <HAL_RCCEx_PeriphCLKConfig+0x690>
    if (ret == HAL_OK)
 8006bd6:	2d00      	cmp	r5, #0
 8006bd8:	f040 8327 	bne.w	800722a <HAL_RCCEx_PeriphCLKConfig+0x1762>
      __HAL_RCC_DAC_LP_CONFIG(pPeriphClkInit->DacLowPowerClockSelection);
 8006bdc:	4f8c      	ldr	r7, [pc, #560]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006bde:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8006be2:	f020 0008 	bic.w	r0, r0, #8
 8006be6:	4301      	orrs	r1, r0
 8006be8:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006bec:	0199      	lsls	r1, r3, #6
 8006bee:	f57f ac98 	bpl.w	8006522 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
 8006bf2:	4f88      	ldr	r7, [pc, #544]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x134c>)
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	627b      	str	r3, [r7, #36]	; 0x24
    tickstart = HAL_GetTick();
 8006bfc:	f7fd fb60 	bl	80042c0 <HAL_GetTick>
 8006c00:	4680      	mov	r8, r0
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006c02:	e006      	b.n	8006c12 <HAL_RCCEx_PeriphCLKConfig+0x114a>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c04:	f7fd fb5c 	bl	80042c0 <HAL_GetTick>
 8006c08:	eba0 0008 	sub.w	r0, r0, r8
 8006c0c:	2802      	cmp	r0, #2
 8006c0e:	f200 8549 	bhi.w	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
    while (HAL_IS_BIT_CLR(PWR->DBPCR, PWR_DBPCR_DBP))
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	07db      	lsls	r3, r3, #31
 8006c16:	d5f5      	bpl.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x113c>
    if (ret == HAL_OK)
 8006c18:	2d00      	cmp	r5, #0
 8006c1a:	f040 863d 	bne.w	8007898 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c1e:	4f7c      	ldr	r7, [pc, #496]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 8006c20:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006c24:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK)
 8006c28:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006c2c:	d02b      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x11be>
          && (tmpregister != ((pPeriphClkInit->RTCClockSelection) & RCC_BDCR_RTCSEL)))
 8006c2e:	f402 7140 	and.w	r1, r2, #768	; 0x300
 8006c32:	4299      	cmp	r1, r3
 8006c34:	d029      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c36:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_FORCE();
 8006c3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006c46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006c52:	f420 7340 	bic.w	r3, r0, #768	; 0x300
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c56:	07c0      	lsls	r0, r0, #31
        RCC->BDCR = tmpregister;
 8006c58:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006c5c:	f140 8625 	bpl.w	80078aa <HAL_RCCEx_PeriphCLKConfig+0x1de2>
        tickstart = HAL_GetTick();
 8006c60:	f7fd fb2e 	bl	80042c0 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c64:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006c68:	4680      	mov	r8, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c6a:	e006      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0x11b2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c6c:	f7fd fb28 	bl	80042c0 <HAL_GetTick>
 8006c70:	eba0 0008 	sub.w	r0, r0, r8
 8006c74:	4548      	cmp	r0, r9
 8006c76:	f200 8515 	bhi.w	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1bdc>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c7a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006c7e:	079b      	lsls	r3, r3, #30
 8006c80:	d5f4      	bpl.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x11a4>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006c82:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
 8006c86:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8006c8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c8e:	f000 85f8 	beq.w	8007882 <HAL_RCCEx_PeriphCLKConfig+0x1dba>
 8006c92:	495f      	ldr	r1, [pc, #380]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006c94:	69cb      	ldr	r3, [r1, #28]
 8006c96:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c9a:	61cb      	str	r3, [r1, #28]
 8006c9c:	4b5c      	ldr	r3, [pc, #368]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006c9e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8006ca2:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8006ca6:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8006caa:	f8c3 10f0 	str.w	r1, [r3, #240]	; 0xf0
 8006cae:	f8d3 10f0 	ldr.w	r1, [r3, #240]	; 0xf0
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cb8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006cbc:	e431      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cbe:	4854      	ldr	r0, [pc, #336]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006cc0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006cc2:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006cc6:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	f040 849a 	bne.w	8007602 <HAL_RCCEx_PeriphCLKConfig+0x1b3a>
      __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006cce:	4f50      	ldr	r7, [pc, #320]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006cd0:	f8d4 00e4 	ldr.w	r0, [r4, #228]	; 0xe4
 8006cd4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8006cd8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 8006cdc:	4301      	orrs	r1, r0
 8006cde:	f8c7 10e0 	str.w	r1, [r7, #224]	; 0xe0
 8006ce2:	e5ad      	b.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd78>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce4:	484a      	ldr	r0, [pc, #296]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006ce6:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006ce8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006cec:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8006cee:	2d00      	cmp	r5, #0
 8006cf0:	f43f add3 	beq.w	800689a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006cf4:	462e      	mov	r6, r5
 8006cf6:	e5da      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cf8:	4845      	ldr	r0, [pc, #276]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006cfa:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006cfc:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006d00:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8006d02:	2d00      	cmp	r5, #0
 8006d04:	f43f aba4 	beq.w	8006450 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006d08:	462e      	mov	r6, r5
 8006d0a:	f7ff bbab 	b.w	8006464 <HAL_RCCEx_PeriphCLKConfig+0x99c>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d0e:	4840      	ldr	r0, [pc, #256]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006d10:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006d12:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006d16:	6281      	str	r1, [r0, #40]	; 0x28
    if (ret == HAL_OK)
 8006d18:	2d00      	cmp	r5, #0
 8006d1a:	f43f abd2 	beq.w	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006d1e:	462e      	mov	r6, r5
 8006d20:	f7ff bbd9 	b.w	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d24:	483a      	ldr	r0, [pc, #232]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006d26:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006d28:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006d2c:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 8006d2e:	e45d      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0xb24>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d30:	4837      	ldr	r0, [pc, #220]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006d32:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8006d34:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8006d38:	6281      	str	r1, [r0, #40]	; 0x28
        break;
 8006d3a:	e425      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xac0>
        __HAL_RCC_PLL1_CLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d3c:	4f34      	ldr	r7, [pc, #208]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006d3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d40:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
 8006d44:	62b8      	str	r0, [r7, #40]	; 0x28
    if (ret == HAL_OK)
 8006d46:	2d00      	cmp	r5, #0
 8006d48:	f040 8097 	bne.w	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x13b2>
 8006d4c:	e530      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
  __HAL_RCC_PLL2_DISABLE();
 8006d4e:	4d30      	ldr	r5, [pc, #192]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006d56:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006d58:	f7fd fab2 	bl	80042c0 <HAL_GetTick>
 8006d5c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d5e:	e005      	b.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x12a4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d60:	f7fd faae 	bl	80042c0 <HAL_GetTick>
 8006d64:	1bc0      	subs	r0, r0, r7
 8006d66:	2802      	cmp	r0, #2
 8006d68:	f200 8574 	bhi.w	8007854 <HAL_RCCEx_PeriphCLKConfig+0x1d8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	d4f6      	bmi.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1298>
 8006d72:	f104 0008 	add.w	r0, r4, #8
 8006d76:	f7fe fdf3 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8006d7a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006d7e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006d80:	2d00      	cmp	r5, #0
 8006d82:	f43f abb7 	beq.w	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 8006d86:	e38d      	b.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x19dc>
  __HAL_RCC_PLL3_DISABLE();
 8006d88:	4d21      	ldr	r5, [pc, #132]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006d8a:	682b      	ldr	r3, [r5, #0]
 8006d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d90:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006d92:	f7fd fa95 	bl	80042c0 <HAL_GetTick>
 8006d96:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d98:	e005      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x12de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d9a:	f7fd fa91 	bl	80042c0 <HAL_GetTick>
 8006d9e:	1bc0      	subs	r0, r0, r7
 8006da0:	2802      	cmp	r0, #2
 8006da2:	f200 853f 	bhi.w	8007824 <HAL_RCCEx_PeriphCLKConfig+0x1d5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006da6:	682b      	ldr	r3, [r5, #0]
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	d4f6      	bmi.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x12d2>
 8006dac:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006db0:	f7fe fe30 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006db4:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006db8:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006dba:	2d00      	cmp	r5, #0
 8006dbc:	f43f ac61 	beq.w	8006682 <HAL_RCCEx_PeriphCLKConfig+0xbba>
 8006dc0:	e37f      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x19fa>
  __HAL_RCC_PLL3_DISABLE();
 8006dc2:	4d13      	ldr	r5, [pc, #76]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006dc4:	682b      	ldr	r3, [r5, #0]
 8006dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dca:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006dcc:	f7fd fa78 	bl	80042c0 <HAL_GetTick>
 8006dd0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006dd2:	e005      	b.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x1318>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006dd4:	f7fd fa74 	bl	80042c0 <HAL_GetTick>
 8006dd8:	1bc0      	subs	r0, r0, r7
 8006dda:	2802      	cmp	r0, #2
 8006ddc:	f200 8534 	bhi.w	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1d80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	0098      	lsls	r0, r3, #2
 8006de4:	d4f6      	bmi.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x130c>
 8006de6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006dea:	f7fe fe13 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 8006dee:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006df2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006df4:	2d00      	cmp	r5, #0
 8006df6:	f43f ac33 	beq.w	8006660 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006dfa:	e356      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x19e2>
  __HAL_RCC_PLL3_DISABLE();
 8006dfc:	4d04      	ldr	r5, [pc, #16]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1348>)
 8006dfe:	682b      	ldr	r3, [r5, #0]
 8006e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e04:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006e06:	f7fd fa5b 	bl	80042c0 <HAL_GetTick>
 8006e0a:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e0c:	e00a      	b.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x135c>
 8006e0e:	bf00      	nop
 8006e10:	44020c00 	.word	0x44020c00
 8006e14:	44020800 	.word	0x44020800
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e18:	f7fd fa52 	bl	80042c0 <HAL_GetTick>
 8006e1c:	1bc0      	subs	r0, r0, r7
 8006e1e:	2802      	cmp	r0, #2
 8006e20:	f200 850c 	bhi.w	800783c <HAL_RCCEx_PeriphCLKConfig+0x1d74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	d4f6      	bmi.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1350>
 8006e2a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006e2e:	f7fe fdf1 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e32:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006e36:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	f43f ac33 	beq.w	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xbdc>
 8006e3e:	e33a      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x19ee>
  __HAL_RCC_PLL3_DISABLE();
 8006e40:	4db5      	ldr	r5, [pc, #724]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006e42:	682b      	ldr	r3, [r5, #0]
 8006e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e48:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006e4a:	f7fd fa39 	bl	80042c0 <HAL_GetTick>
 8006e4e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e50:	e005      	b.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x1396>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e52:	f7fd fa35 	bl	80042c0 <HAL_GetTick>
 8006e56:	1bc0      	subs	r0, r0, r7
 8006e58:	2802      	cmp	r0, #2
 8006e5a:	f200 84d7 	bhi.w	800780c <HAL_RCCEx_PeriphCLKConfig+0x1d44>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006e5e:	682b      	ldr	r3, [r5, #0]
 8006e60:	0098      	lsls	r0, r3, #2
 8006e62:	d4f6      	bmi.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x138a>
 8006e64:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006e68:	f7fe fdd4 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006e6c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006e70:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006e72:	2d00      	cmp	r5, #0
 8006e74:	f43f ac27 	beq.w	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006e78:	e320      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x19f4>
 8006e7a:	462e      	mov	r6, r5
 8006e7c:	f7ff bb61 	b.w	8006542 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
  __HAL_RCC_PLL2_DISABLE();
 8006e80:	4da5      	ldr	r5, [pc, #660]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006e82:	682b      	ldr	r3, [r5, #0]
 8006e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e88:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006e8a:	f7fd fa19 	bl	80042c0 <HAL_GetTick>
 8006e8e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e90:	e005      	b.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x13d6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e92:	f7fd fa15 	bl	80042c0 <HAL_GetTick>
 8006e96:	1bc0      	subs	r0, r0, r7
 8006e98:	2802      	cmp	r0, #2
 8006e9a:	f200 84e9 	bhi.w	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1da8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e9e:	682b      	ldr	r3, [r5, #0]
 8006ea0:	0118      	lsls	r0, r3, #4
 8006ea2:	d4f6      	bmi.n	8006e92 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
 8006ea4:	f104 0008 	add.w	r0, r4, #8
 8006ea8:	f7fe fd5a 	bl	8005960 <RCCEx_PLL2_Config.part.0>
 8006eac:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006eb0:	2d00      	cmp	r5, #0
 8006eb2:	f43f ae4a 	beq.w	8006b4a <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8006eb6:	e001      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x13f4>
 8006eb8:	462e      	mov	r6, r5
 8006eba:	e5cd      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8006ebc:	462e      	mov	r6, r5
 8006ebe:	e5da      	b.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xfae>
 8006ec0:	462e      	mov	r6, r5
 8006ec2:	e5e4      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
  __HAL_RCC_PLL3_DISABLE();
 8006ec4:	4d94      	ldr	r5, [pc, #592]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006ec6:	682b      	ldr	r3, [r5, #0]
 8006ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ecc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006ece:	f7fd f9f7 	bl	80042c0 <HAL_GetTick>
 8006ed2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ed4:	e005      	b.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x141a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ed6:	f7fd f9f3 	bl	80042c0 <HAL_GetTick>
 8006eda:	1bc0      	subs	r0, r0, r7
 8006edc:	2802      	cmp	r0, #2
 8006ede:	f200 8404 	bhi.w	80076ea <HAL_RCCEx_PeriphCLKConfig+0x1c22>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ee2:	682b      	ldr	r3, [r5, #0]
 8006ee4:	0098      	lsls	r0, r3, #2
 8006ee6:	d4f6      	bmi.n	8006ed6 <HAL_RCCEx_PeriphCLKConfig+0x140e>
 8006ee8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006eec:	f7fe fd92 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 8006ef0:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006ef4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006ef6:	2d00      	cmp	r5, #0
 8006ef8:	f43f a99a 	beq.w	8006230 <HAL_RCCEx_PeriphCLKConfig+0x768>
 8006efc:	e356      	b.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x1ae4>
  __HAL_RCC_PLL3_DISABLE();
 8006efe:	4d86      	ldr	r5, [pc, #536]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f06:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006f08:	f7fd f9da 	bl	80042c0 <HAL_GetTick>
 8006f0c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f0e:	e005      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x1454>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f10:	f7fd f9d6 	bl	80042c0 <HAL_GetTick>
 8006f14:	1bc0      	subs	r0, r0, r7
 8006f16:	2802      	cmp	r0, #2
 8006f18:	f200 8430 	bhi.w	800777c <HAL_RCCEx_PeriphCLKConfig+0x1cb4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f1c:	682b      	ldr	r3, [r5, #0]
 8006f1e:	0098      	lsls	r0, r3, #2
 8006f20:	d4f6      	bmi.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x1448>
 8006f22:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006f26:	f7fe fd75 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 8006f2a:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006f2e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006f30:	2d00      	cmp	r5, #0
 8006f32:	f43f a9b2 	beq.w	800629a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006f36:	e336      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x1ade>
  __HAL_RCC_PLL3_DISABLE();
 8006f38:	4d77      	ldr	r5, [pc, #476]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006f3a:	682b      	ldr	r3, [r5, #0]
 8006f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f40:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006f42:	f7fd f9bd 	bl	80042c0 <HAL_GetTick>
 8006f46:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f48:	e005      	b.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x148e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f4a:	f7fd f9b9 	bl	80042c0 <HAL_GetTick>
 8006f4e:	1bc0      	subs	r0, r0, r7
 8006f50:	2802      	cmp	r0, #2
 8006f52:	f200 83f9 	bhi.w	8007748 <HAL_RCCEx_PeriphCLKConfig+0x1c80>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f56:	682b      	ldr	r3, [r5, #0]
 8006f58:	0098      	lsls	r0, r3, #2
 8006f5a:	d4f6      	bmi.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x1482>
 8006f5c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006f60:	f7fe fd58 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f64:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006f68:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006f6a:	2d00      	cmp	r5, #0
 8006f6c:	f43e aeb1 	beq.w	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8006f70:	e328      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0x1afc>
  __HAL_RCC_PLL3_DISABLE();
 8006f72:	4d69      	ldr	r5, [pc, #420]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006f74:	682b      	ldr	r3, [r5, #0]
 8006f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f7a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006f7c:	f7fd f9a0 	bl	80042c0 <HAL_GetTick>
 8006f80:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f82:	e005      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x14c8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f84:	f7fd f99c 	bl	80042c0 <HAL_GetTick>
 8006f88:	1bc0      	subs	r0, r0, r7
 8006f8a:	2802      	cmp	r0, #2
 8006f8c:	f200 83ee 	bhi.w	800776c <HAL_RCCEx_PeriphCLKConfig+0x1ca4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	0098      	lsls	r0, r3, #2
 8006f94:	d4f6      	bmi.n	8006f84 <HAL_RCCEx_PeriphCLKConfig+0x14bc>
 8006f96:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006f9a:	f7fe fd3b 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
 8006f9e:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006fa0:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	f43f ace1 	beq.w	800696a <HAL_RCCEx_PeriphCLKConfig+0xea2>
 8006fa8:	e2f4      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1acc>
  __HAL_RCC_PLL3_DISABLE();
 8006faa:	4d5b      	ldr	r5, [pc, #364]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fb2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006fb4:	f7fd f984 	bl	80042c0 <HAL_GetTick>
 8006fb8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fba:	e005      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x1500>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006fbc:	f7fd f980 	bl	80042c0 <HAL_GetTick>
 8006fc0:	1bc0      	subs	r0, r0, r7
 8006fc2:	2802      	cmp	r0, #2
 8006fc4:	f200 83f2 	bhi.w	80077ac <HAL_RCCEx_PeriphCLKConfig+0x1ce4>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	009a      	lsls	r2, r3, #2
 8006fcc:	d4f6      	bmi.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x14f4>
 8006fce:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006fd2:	f7fe fd1f 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 8006fd6:	e9d4 3200 	ldrd	r3, r2, [r4]
 8006fda:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8006fdc:	2d00      	cmp	r5, #0
 8006fde:	f43f ac91 	beq.w	8006904 <HAL_RCCEx_PeriphCLKConfig+0xe3c>
 8006fe2:	e2dd      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
  __HAL_RCC_PLL3_DISABLE();
 8006fe4:	4d4c      	ldr	r5, [pc, #304]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8006fe6:	682b      	ldr	r3, [r5, #0]
 8006fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fec:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8006fee:	f7fd f967 	bl	80042c0 <HAL_GetTick>
 8006ff2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006ff4:	e005      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x153a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006ff6:	f7fd f963 	bl	80042c0 <HAL_GetTick>
 8006ffa:	1bc0      	subs	r0, r0, r7
 8006ffc:	2802      	cmp	r0, #2
 8006ffe:	f200 836e 	bhi.w	80076de <HAL_RCCEx_PeriphCLKConfig+0x1c16>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007002:	682b      	ldr	r3, [r5, #0]
 8007004:	0098      	lsls	r0, r3, #2
 8007006:	d4f6      	bmi.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x152e>
 8007008:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800700c:	f7fe fd02 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007010:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007014:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007016:	2d00      	cmp	r5, #0
 8007018:	f43e ae91 	beq.w	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x276>
 800701c:	e2cc      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x1af0>
  __HAL_RCC_PLL3_DISABLE();
 800701e:	4d3e      	ldr	r5, [pc, #248]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8007020:	682b      	ldr	r3, [r5, #0]
 8007022:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007026:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007028:	f7fd f94a 	bl	80042c0 <HAL_GetTick>
 800702c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800702e:	e005      	b.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x1574>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007030:	f7fd f946 	bl	80042c0 <HAL_GetTick>
 8007034:	1bc0      	subs	r0, r0, r7
 8007036:	2802      	cmp	r0, #2
 8007038:	f200 836e 	bhi.w	8007718 <HAL_RCCEx_PeriphCLKConfig+0x1c50>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	0098      	lsls	r0, r3, #2
 8007040:	d4f6      	bmi.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1568>
 8007042:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007046:	f7fe fce5 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 800704a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800704e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007050:	2d00      	cmp	r5, #0
 8007052:	f43e af41 	beq.w	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8007056:	e291      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x1ab4>
  __HAL_RCC_PLL3_DISABLE();
 8007058:	4d2f      	ldr	r5, [pc, #188]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 800705a:	682b      	ldr	r3, [r5, #0]
 800705c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007060:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007062:	f7fd f92d 	bl	80042c0 <HAL_GetTick>
 8007066:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007068:	e005      	b.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x15ae>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800706a:	f7fd f929 	bl	80042c0 <HAL_GetTick>
 800706e:	1bc0      	subs	r0, r0, r7
 8007070:	2802      	cmp	r0, #2
 8007072:	f200 8346 	bhi.w	8007702 <HAL_RCCEx_PeriphCLKConfig+0x1c3a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007076:	682b      	ldr	r3, [r5, #0]
 8007078:	0098      	lsls	r0, r3, #2
 800707a:	d4f6      	bmi.n	800706a <HAL_RCCEx_PeriphCLKConfig+0x15a2>
 800707c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007080:	f7fe fcc8 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007084:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007088:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800708a:	2d00      	cmp	r5, #0
 800708c:	f43f a93d 	beq.w	800630a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007090:	e277      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
  __HAL_RCC_PLL3_DISABLE();
 8007092:	4d21      	ldr	r5, [pc, #132]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8007094:	682b      	ldr	r3, [r5, #0]
 8007096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800709a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800709c:	f7fd f910 	bl	80042c0 <HAL_GetTick>
 80070a0:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070a2:	e005      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x15e8>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070a4:	f7fd f90c 	bl	80042c0 <HAL_GetTick>
 80070a8:	1bc0      	subs	r0, r0, r7
 80070aa:	2802      	cmp	r0, #2
 80070ac:	f200 8323 	bhi.w	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x1c2e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070b0:	682b      	ldr	r3, [r5, #0]
 80070b2:	0098      	lsls	r0, r3, #2
 80070b4:	d4f6      	bmi.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x15dc>
 80070b6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80070ba:	f7fe fcab 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80070be:	e9d4 3200 	ldrd	r3, r2, [r4]
 80070c2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	f43e aea0 	beq.w	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80070ca:	e278      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x1af6>
  __HAL_RCC_PLL3_DISABLE();
 80070cc:	4d12      	ldr	r5, [pc, #72]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 80070ce:	682b      	ldr	r3, [r5, #0]
 80070d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070d4:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80070d6:	f7fd f8f3 	bl	80042c0 <HAL_GetTick>
 80070da:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070dc:	e005      	b.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x1622>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070de:	f7fd f8ef 	bl	80042c0 <HAL_GetTick>
 80070e2:	1bc0      	subs	r0, r0, r7
 80070e4:	2802      	cmp	r0, #2
 80070e6:	f200 8329 	bhi.w	800773c <HAL_RCCEx_PeriphCLKConfig+0x1c74>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	0098      	lsls	r0, r3, #2
 80070ee:	d4f6      	bmi.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x1616>
 80070f0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80070f4:	f7fe fc8e 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80070f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80070fc:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80070fe:	2d00      	cmp	r5, #0
 8007100:	f43e ad81 	beq.w	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x13e>
 8007104:	e237      	b.n	8007576 <HAL_RCCEx_PeriphCLKConfig+0x1aae>
  __HAL_RCC_PLL3_DISABLE();
 8007106:	4d04      	ldr	r5, [pc, #16]	; (8007118 <HAL_RCCEx_PeriphCLKConfig+0x1650>)
 8007108:	682b      	ldr	r3, [r5, #0]
 800710a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800710e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007110:	f7fd f8d6 	bl	80042c0 <HAL_GetTick>
 8007114:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007116:	e007      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1660>
 8007118:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800711c:	f7fd f8d0 	bl	80042c0 <HAL_GetTick>
 8007120:	1bc0      	subs	r0, r0, r7
 8007122:	2802      	cmp	r0, #2
 8007124:	f200 82d5 	bhi.w	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1c0a>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007128:	682b      	ldr	r3, [r5, #0]
 800712a:	0098      	lsls	r0, r3, #2
 800712c:	d4f6      	bmi.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1654>
 800712e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007132:	f7fe fc6f 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 8007136:	e9d4 3200 	ldrd	r3, r2, [r4]
 800713a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800713c:	2d00      	cmp	r5, #0
 800713e:	f43f a919 	beq.w	8006374 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 8007142:	e209      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1a90>
  __HAL_RCC_PLL3_DISABLE();
 8007144:	4db0      	ldr	r5, [pc, #704]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007146:	682b      	ldr	r3, [r5, #0]
 8007148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800714c:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800714e:	f7fd f8b7 	bl	80042c0 <HAL_GetTick>
 8007152:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007154:	e005      	b.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x169a>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007156:	f7fd f8b3 	bl	80042c0 <HAL_GetTick>
 800715a:	1bc0      	subs	r0, r0, r7
 800715c:	2802      	cmp	r0, #2
 800715e:	f200 82e7 	bhi.w	8007730 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007162:	682b      	ldr	r3, [r5, #0]
 8007164:	0098      	lsls	r0, r3, #2
 8007166:	d4f6      	bmi.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0x168e>
 8007168:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800716c:	f7fe fc52 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007170:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007174:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007176:	2d00      	cmp	r5, #0
 8007178:	f43e ae7a 	beq.w	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
 800717c:	e204      	b.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x1ac0>
  __HAL_RCC_PLL3_DISABLE();
 800717e:	4da2      	ldr	r5, [pc, #648]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007186:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007188:	f7fd f89a 	bl	80042c0 <HAL_GetTick>
 800718c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800718e:	e005      	b.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x16d4>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007190:	f7fd f896 	bl	80042c0 <HAL_GetTick>
 8007194:	1bc0      	subs	r0, r0, r7
 8007196:	2802      	cmp	r0, #2
 8007198:	f200 82e2 	bhi.w	8007760 <HAL_RCCEx_PeriphCLKConfig+0x1c98>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800719c:	682b      	ldr	r3, [r5, #0]
 800719e:	0098      	lsls	r0, r3, #2
 80071a0:	d4f6      	bmi.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x16c8>
 80071a2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80071a6:	f7fe fc35 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80071aa:	e9d4 3200 	ldrd	r3, r2, [r4]
 80071ae:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	f43f a808 	beq.w	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
 80071b6:	e1d5      	b.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x1a9c>
  __HAL_RCC_PLL3_DISABLE();
 80071b8:	4d93      	ldr	r5, [pc, #588]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80071ba:	682b      	ldr	r3, [r5, #0]
 80071bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071c0:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80071c2:	f7fd f87d 	bl	80042c0 <HAL_GetTick>
 80071c6:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071c8:	e005      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x170e>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071ca:	f7fd f879 	bl	80042c0 <HAL_GetTick>
 80071ce:	1bc0      	subs	r0, r0, r7
 80071d0:	2802      	cmp	r0, #2
 80071d2:	f200 8352 	bhi.w	800787a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071d6:	682b      	ldr	r3, [r5, #0]
 80071d8:	009a      	lsls	r2, r3, #2
 80071da:	d4f6      	bmi.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x1702>
 80071dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80071e0:	f7fe fc18 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
 80071e4:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80071e6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80071e8:	2d00      	cmp	r5, #0
 80071ea:	f43f acc1 	beq.w	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
 80071ee:	e667      	b.n	8006ec0 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
  __HAL_RCC_PLL3_DISABLE();
 80071f0:	4d85      	ldr	r5, [pc, #532]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071f8:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80071fa:	f7fd f861 	bl	80042c0 <HAL_GetTick>
 80071fe:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007200:	e005      	b.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x1746>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007202:	f7fd f85d 	bl	80042c0 <HAL_GetTick>
 8007206:	1bc0      	subs	r0, r0, r7
 8007208:	2802      	cmp	r0, #2
 800720a:	f200 82c3 	bhi.w	8007794 <HAL_RCCEx_PeriphCLKConfig+0x1ccc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800720e:	682b      	ldr	r3, [r5, #0]
 8007210:	0098      	lsls	r0, r3, #2
 8007212:	d4f6      	bmi.n	8007202 <HAL_RCCEx_PeriphCLKConfig+0x173a>
 8007214:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007218:	f7fe fbfc 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800721c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007220:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007222:	2d00      	cmp	r5, #0
 8007224:	f43f a8db 	beq.w	80063de <HAL_RCCEx_PeriphCLKConfig+0x916>
 8007228:	e19f      	b.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x1aa2>
 800722a:	462e      	mov	r6, r5
 800722c:	f7ff b976 	b.w	800651c <HAL_RCCEx_PeriphCLKConfig+0xa54>
  __HAL_RCC_PLL3_DISABLE();
 8007230:	4d75      	ldr	r5, [pc, #468]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007232:	682b      	ldr	r3, [r5, #0]
 8007234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007238:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800723a:	f7fd f841 	bl	80042c0 <HAL_GetTick>
 800723e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007240:	e005      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x1786>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007242:	f7fd f83d 	bl	80042c0 <HAL_GetTick>
 8007246:	1bc0      	subs	r0, r0, r7
 8007248:	2802      	cmp	r0, #2
 800724a:	f200 8283 	bhi.w	8007754 <HAL_RCCEx_PeriphCLKConfig+0x1c8c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800724e:	682b      	ldr	r3, [r5, #0]
 8007250:	0098      	lsls	r0, r3, #2
 8007252:	d4f6      	bmi.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x177a>
 8007254:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007258:	f7fe fbdc 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800725c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007260:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007262:	2d00      	cmp	r5, #0
 8007264:	f43e aee3 	beq.w	800602e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007268:	e197      	b.n	800759a <HAL_RCCEx_PeriphCLKConfig+0x1ad2>
  __HAL_RCC_PLL3_DISABLE();
 800726a:	4d67      	ldr	r5, [pc, #412]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007272:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007274:	f7fd f824 	bl	80042c0 <HAL_GetTick>
 8007278:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800727a:	e005      	b.n	8007288 <HAL_RCCEx_PeriphCLKConfig+0x17c0>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800727c:	f7fd f820 	bl	80042c0 <HAL_GetTick>
 8007280:	1bc0      	subs	r0, r0, r7
 8007282:	2802      	cmp	r0, #2
 8007284:	f200 824e 	bhi.w	8007724 <HAL_RCCEx_PeriphCLKConfig+0x1c5c>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	0098      	lsls	r0, r3, #2
 800728c:	d4f6      	bmi.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x17b4>
 800728e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007292:	f7fe fbbf 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007296:	e9d4 3200 	ldrd	r3, r2, [r4]
 800729a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800729c:	2d00      	cmp	r5, #0
 800729e:	f43e ad81 	beq.w	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 80072a2:	e174      	b.n	800758e <HAL_RCCEx_PeriphCLKConfig+0x1ac6>
  __HAL_RCC_PLL3_DISABLE();
 80072a4:	4d58      	ldr	r5, [pc, #352]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80072a6:	682b      	ldr	r3, [r5, #0]
 80072a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ac:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80072ae:	f7fd f807 	bl	80042c0 <HAL_GetTick>
 80072b2:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072b4:	e005      	b.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x17fa>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072b6:	f7fd f803 	bl	80042c0 <HAL_GetTick>
 80072ba:	1bc0      	subs	r0, r0, r7
 80072bc:	2802      	cmp	r0, #2
 80072be:	f200 8202 	bhi.w	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1bfe>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072c2:	682b      	ldr	r3, [r5, #0]
 80072c4:	0098      	lsls	r0, r3, #2
 80072c6:	d4f6      	bmi.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x17ee>
 80072c8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80072cc:	f7fe fba2 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072d0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80072d4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80072d6:	2d00      	cmp	r5, #0
 80072d8:	f43e aede 	beq.w	8006098 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80072dc:	e148      	b.n	8007570 <HAL_RCCEx_PeriphCLKConfig+0x1aa8>
  __HAL_RCC_PLL3_DISABLE();
 80072de:	4d4a      	ldr	r5, [pc, #296]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072e6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80072e8:	f7fc ffea 	bl	80042c0 <HAL_GetTick>
 80072ec:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072ee:	e005      	b.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x1834>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072f0:	f7fc ffe6 	bl	80042c0 <HAL_GetTick>
 80072f4:	1bc0      	subs	r0, r0, r7
 80072f6:	2802      	cmp	r0, #2
 80072f8:	f200 8209 	bhi.w	800770e <HAL_RCCEx_PeriphCLKConfig+0x1c46>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80072fc:	682b      	ldr	r3, [r5, #0]
 80072fe:	0098      	lsls	r0, r3, #2
 8007300:	d4f6      	bmi.n	80072f0 <HAL_RCCEx_PeriphCLKConfig+0x1828>
 8007302:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007306:	f7fe fb85 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
 800730a:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800730c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800730e:	2d00      	cmp	r5, #0
 8007310:	f43f ab5d 	beq.w	80069ce <HAL_RCCEx_PeriphCLKConfig+0xf06>
 8007314:	e123      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x1a96>
  __HAL_RCC_PLL3_DISABLE();
 8007316:	4d3c      	ldr	r5, [pc, #240]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800731e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007320:	f7fc ffce 	bl	80042c0 <HAL_GetTick>
 8007324:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007326:	e005      	b.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x186c>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007328:	f7fc ffca 	bl	80042c0 <HAL_GetTick>
 800732c:	1bc0      	subs	r0, r0, r7
 800732e:	2802      	cmp	r0, #2
 8007330:	f200 81c3 	bhi.w	80076ba <HAL_RCCEx_PeriphCLKConfig+0x1bf2>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	0098      	lsls	r0, r3, #2
 8007338:	d4f6      	bmi.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x1860>
 800733a:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800733e:	f7fe fb69 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007342:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007346:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007348:	2d00      	cmp	r5, #0
 800734a:	f43e ac8f 	beq.w	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800734e:	e100      	b.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1a8a>
  __HAL_RCC_PLL2_DISABLE();
 8007350:	4d2d      	ldr	r5, [pc, #180]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 8007352:	682b      	ldr	r3, [r5, #0]
 8007354:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007358:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800735a:	f7fc ffb1 	bl	80042c0 <HAL_GetTick>
 800735e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007360:	e005      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x18a6>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007362:	f7fc ffad 	bl	80042c0 <HAL_GetTick>
 8007366:	1bc0      	subs	r0, r0, r7
 8007368:	2802      	cmp	r0, #2
 800736a:	f200 827c 	bhi.w	8007866 <HAL_RCCEx_PeriphCLKConfig+0x1d9e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800736e:	682b      	ldr	r3, [r5, #0]
 8007370:	011b      	lsls	r3, r3, #4
 8007372:	d4f6      	bmi.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x189a>
 8007374:	f104 0008 	add.w	r0, r4, #8
 8007378:	f7fe faf2 	bl	8005960 <RCCEx_PLL2_Config.part.0>
 800737c:	4605      	mov	r5, r0
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800737e:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8007380:	2d00      	cmp	r5, #0
 8007382:	f43f abc3 	beq.w	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x1044>
 8007386:	e597      	b.n	8006eb8 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
  __HAL_RCC_PLL3_DISABLE();
 8007388:	4d1f      	ldr	r5, [pc, #124]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007390:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007392:	f7fc ff95 	bl	80042c0 <HAL_GetTick>
 8007396:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007398:	e005      	b.n	80073a6 <HAL_RCCEx_PeriphCLKConfig+0x18de>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800739a:	f7fc ff91 	bl	80042c0 <HAL_GetTick>
 800739e:	1bc0      	subs	r0, r0, r7
 80073a0:	2802      	cmp	r0, #2
 80073a2:	f200 820f 	bhi.w	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x1cfc>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073a6:	682b      	ldr	r3, [r5, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	d4f6      	bmi.n	800739a <HAL_RCCEx_PeriphCLKConfig+0x18d2>
 80073ac:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80073b0:	f7fe fb30 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80073b4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80073b8:	4605      	mov	r5, r0
 80073ba:	f7ff ba6b 	b.w	8006894 <HAL_RCCEx_PeriphCLKConfig+0xdcc>
  __HAL_RCC_PLL3_DISABLE();
 80073be:	4d12      	ldr	r5, [pc, #72]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073c6:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80073c8:	f7fc ff7a 	bl	80042c0 <HAL_GetTick>
 80073cc:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073ce:	e005      	b.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x1914>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80073d0:	f7fc ff76 	bl	80042c0 <HAL_GetTick>
 80073d4:	1bc0      	subs	r0, r0, r7
 80073d6:	2802      	cmp	r0, #2
 80073d8:	f200 81ee 	bhi.w	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x1cf0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	0098      	lsls	r0, r3, #2
 80073e0:	d4f6      	bmi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x1908>
 80073e2:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80073e6:	f7fe fb15 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80073ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 80073ee:	4605      	mov	r5, r0
 80073f0:	f7ff b864 	b.w	80064bc <HAL_RCCEx_PeriphCLKConfig+0x9f4>
  __HAL_RCC_PLL3_DISABLE();
 80073f4:	4d04      	ldr	r5, [pc, #16]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x1940>)
 80073f6:	682b      	ldr	r3, [r5, #0]
 80073f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073fc:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80073fe:	f7fc ff5f 	bl	80042c0 <HAL_GetTick>
 8007402:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007404:	e008      	b.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0x1950>
 8007406:	bf00      	nop
 8007408:	44020c00 	.word	0x44020c00
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800740c:	f7fc ff58 	bl	80042c0 <HAL_GetTick>
 8007410:	1bc0      	subs	r0, r0, r7
 8007412:	2802      	cmp	r0, #2
 8007414:	f200 81dc 	bhi.w	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x1d08>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	0098      	lsls	r0, r3, #2
 800741c:	d4f6      	bmi.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x1944>
 800741e:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007422:	f7fe faf7 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 8007426:	e9d4 3200 	ldrd	r3, r2, [r4]
 800742a:	4605      	mov	r5, r0
 800742c:	f7ff b80d 	b.w	800644a <HAL_RCCEx_PeriphCLKConfig+0x982>
  __HAL_RCC_PLL3_DISABLE();
 8007430:	4dd1      	ldr	r5, [pc, #836]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007432:	682b      	ldr	r3, [r5, #0]
 8007434:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007438:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800743a:	f7fc ff41 	bl	80042c0 <HAL_GetTick>
 800743e:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007440:	e005      	b.n	800744e <HAL_RCCEx_PeriphCLKConfig+0x1986>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007442:	f7fc ff3d 	bl	80042c0 <HAL_GetTick>
 8007446:	1bc0      	subs	r0, r0, r7
 8007448:	2802      	cmp	r0, #2
 800744a:	f200 81c7 	bhi.w	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800744e:	682b      	ldr	r3, [r5, #0]
 8007450:	0098      	lsls	r0, r3, #2
 8007452:	d4f6      	bmi.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x197a>
 8007454:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007458:	f7fe fadc 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800745c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007460:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007462:	2d00      	cmp	r5, #0
 8007464:	f43f a9b5 	beq.w	80067d2 <HAL_RCCEx_PeriphCLKConfig+0xd0a>
 8007468:	462e      	mov	r6, r5
 800746a:	f7ff b9bc 	b.w	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  __HAL_RCC_PLL2_DISABLE();
 800746e:	4dc2      	ldr	r5, [pc, #776]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007470:	682b      	ldr	r3, [r5, #0]
 8007472:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007476:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007478:	f7fc ff22 	bl	80042c0 <HAL_GetTick>
 800747c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800747e:	e005      	b.n	800748c <HAL_RCCEx_PeriphCLKConfig+0x19c4>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007480:	f7fc ff1e 	bl	80042c0 <HAL_GetTick>
 8007484:	1bc0      	subs	r0, r0, r7
 8007486:	2802      	cmp	r0, #2
 8007488:	f200 81a8 	bhi.w	80077dc <HAL_RCCEx_PeriphCLKConfig+0x1d14>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800748c:	682b      	ldr	r3, [r5, #0]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	d4f6      	bmi.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
 8007492:	f104 0008 	add.w	r0, r4, #8
 8007496:	f7fe fa63 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800749a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800749e:	4605      	mov	r5, r0
 80074a0:	f7ff b994 	b.w	80067cc <HAL_RCCEx_PeriphCLKConfig+0xd04>
 80074a4:	462e      	mov	r6, r5
 80074a6:	f7ff b82f 	b.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 80074aa:	462e      	mov	r6, r5
 80074ac:	f7fe be46 	b.w	800613c <HAL_RCCEx_PeriphCLKConfig+0x674>
 80074b0:	462e      	mov	r6, r5
 80074b2:	f7fe be51 	b.w	8006158 <HAL_RCCEx_PeriphCLKConfig+0x690>
 80074b6:	462e      	mov	r6, r5
 80074b8:	f7fe be0a 	b.w	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80074bc:	462e      	mov	r6, r5
 80074be:	f7fe be19 	b.w	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
 80074c2:	462e      	mov	r6, r5
 80074c4:	f7fe be28 	b.w	8006118 <HAL_RCCEx_PeriphCLKConfig+0x650>
    switch (pPeriphClkInit->Usart2ClockSelection)
 80074c8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 80074ca:	2d00      	cmp	r5, #0
 80074cc:	f040 81c8 	bne.w	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1d98>
      __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80074d0:	4fa9      	ldr	r7, [pc, #676]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 80074d2:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80074d4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80074d8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
 80074dc:	4301      	orrs	r1, r0
 80074de:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80074e2:	f7fe bb68 	b.w	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xee>
  __HAL_RCC_PLL2_DISABLE();
 80074e6:	4da4      	ldr	r5, [pc, #656]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074ee:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80074f0:	f7fc fee6 	bl	80042c0 <HAL_GetTick>
 80074f4:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80074f6:	e005      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x1a3c>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074f8:	f7fc fee2 	bl	80042c0 <HAL_GetTick>
 80074fc:	1bc0      	subs	r0, r0, r7
 80074fe:	2802      	cmp	r0, #2
 8007500:	f200 814e 	bhi.w	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x1cd8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	d4f6      	bmi.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x1a30>
 800750a:	f104 0008 	add.w	r0, r4, #8
 800750e:	f7fe fa27 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 8007512:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007516:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007518:	2d00      	cmp	r5, #0
 800751a:	f43f aae3 	beq.w	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x101c>
 800751e:	e048      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
  __HAL_RCC_PLL2_DISABLE();
 8007520:	4d95      	ldr	r5, [pc, #596]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007528:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800752a:	f7fc fec9 	bl	80042c0 <HAL_GetTick>
 800752e:	4606      	mov	r6, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007530:	e005      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0x1a76>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007532:	f7fc fec5 	bl	80042c0 <HAL_GetTick>
 8007536:	1b80      	subs	r0, r0, r6
 8007538:	2802      	cmp	r0, #2
 800753a:	f200 80b9 	bhi.w	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1be8>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800753e:	682b      	ldr	r3, [r5, #0]
 8007540:	011f      	lsls	r7, r3, #4
 8007542:	d4f6      	bmi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x1a6a>
 8007544:	f104 0008 	add.w	r0, r4, #8
 8007548:	f7fe fa0a 	bl	8005960 <RCCEx_PLL2_Config.part.0>
 800754c:	4606      	mov	r6, r0
 800754e:	f7fe baf1 	b.w	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8007552:	462e      	mov	r6, r5
 8007554:	f7fe bb93 	b.w	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007558:	462e      	mov	r6, r5
 800755a:	f7fe bf15 	b.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800755e:	462e      	mov	r6, r5
 8007560:	f7ff ba3f 	b.w	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
 8007564:	462e      	mov	r6, r5
 8007566:	f7fe be38 	b.w	80061da <HAL_RCCEx_PeriphCLKConfig+0x712>
 800756a:	462e      	mov	r6, r5
 800756c:	f7fe bf41 	b.w	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8007570:	462e      	mov	r6, r5
 8007572:	f7fe bd9b 	b.w	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
 8007576:	462e      	mov	r6, r5
 8007578:	f7fe bb4e 	b.w	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800757c:	462e      	mov	r6, r5
 800757e:	f7fe bcb5 	b.w	8005eec <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007582:	462e      	mov	r6, r5
 8007584:	f7fe becb 	b.w	800631e <HAL_RCCEx_PeriphCLKConfig+0x856>
 8007588:	462e      	mov	r6, r5
 800758a:	f7fe bc7a 	b.w	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800758e:	462e      	mov	r6, r5
 8007590:	f7fe bc11 	b.w	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
 8007594:	462e      	mov	r6, r5
 8007596:	f7ff b9f2 	b.w	800697e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 800759a:	462e      	mov	r6, r5
 800759c:	f7fe bd51 	b.w	8006042 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80075a0:	462e      	mov	r6, r5
 80075a2:	f7ff b9b9 	b.w	8006918 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80075a6:	462e      	mov	r6, r5
 80075a8:	f7fe be81 	b.w	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
 80075ac:	462e      	mov	r6, r5
 80075ae:	f7fe be49 	b.w	8006244 <HAL_RCCEx_PeriphCLKConfig+0x77c>
 80075b2:	462e      	mov	r6, r5
 80075b4:	f7fe bd0f 	b.w	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
 80075b8:	462e      	mov	r6, r5
 80075ba:	f7fe bbc9 	b.w	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x288>
 80075be:	462e      	mov	r6, r5
 80075c0:	f7fe bc2c 	b.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80075c4:	462e      	mov	r6, r5
 80075c6:	f7fe bb8d 	b.w	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  __HAL_RCC_PLL3_DISABLE();
 80075ca:	4d6b      	ldr	r5, [pc, #428]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 80075cc:	682b      	ldr	r3, [r5, #0]
 80075ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075d2:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 80075d4:	f7fc fe74 	bl	80042c0 <HAL_GetTick>
 80075d8:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075da:	e005      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x1b20>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80075dc:	f7fc fe70 	bl	80042c0 <HAL_GetTick>
 80075e0:	1bc0      	subs	r0, r0, r7
 80075e2:	2802      	cmp	r0, #2
 80075e4:	f200 8100 	bhi.w	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	0098      	lsls	r0, r3, #2
 80075ec:	d4f6      	bmi.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x1b14>
 80075ee:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80075f2:	f7fe fa0f 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80075f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80075fa:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80075fc:	2d00      	cmp	r5, #0
 80075fe:	f43f ab66 	beq.w	8006cce <HAL_RCCEx_PeriphCLKConfig+0x1206>
 8007602:	462e      	mov	r6, r5
 8007604:	f7ff b91c 	b.w	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  __HAL_RCC_PLL2_DISABLE();
 8007608:	4d5b      	ldr	r5, [pc, #364]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 800760a:	682b      	ldr	r3, [r5, #0]
 800760c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007610:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007612:	f7fc fe55 	bl	80042c0 <HAL_GetTick>
 8007616:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007618:	e005      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x1b5e>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800761a:	f7fc fe51 	bl	80042c0 <HAL_GetTick>
 800761e:	1bc0      	subs	r0, r0, r7
 8007620:	2802      	cmp	r0, #2
 8007622:	f200 80e1 	bhi.w	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x1d20>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007626:	682b      	ldr	r3, [r5, #0]
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	d4f6      	bmi.n	800761a <HAL_RCCEx_PeriphCLKConfig+0x1b52>
 800762c:	f104 0008 	add.w	r0, r4, #8
 8007630:	f7fe f996 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8007634:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007638:	4605      	mov	r5, r0
 800763a:	f7ff bb45 	b.w	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0x1200>
  __HAL_RCC_PLL2_DISABLE();
 800763e:	4d4e      	ldr	r5, [pc, #312]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007646:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 8007648:	f7fc fe3a 	bl	80042c0 <HAL_GetTick>
 800764c:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800764e:	e005      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x1b94>
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007650:	f7fc fe36 	bl	80042c0 <HAL_GetTick>
 8007654:	1bc0      	subs	r0, r0, r7
 8007656:	2802      	cmp	r0, #2
 8007658:	f200 8096 	bhi.w	8007788 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	011b      	lsls	r3, r3, #4
 8007660:	d4f6      	bmi.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x1b88>
 8007662:	f104 0008 	add.w	r0, r4, #8
 8007666:	f7fe f97b 	bl	8005960 <RCCEx_PLL2_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800766a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800766e:	4605      	mov	r5, r0
 8007670:	e72b      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1a02>
  __HAL_RCC_PLL3_DISABLE();
 8007672:	4d41      	ldr	r5, [pc, #260]	; (8007778 <HAL_RCCEx_PeriphCLKConfig+0x1cb0>)
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800767a:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800767c:	f7fc fe20 	bl	80042c0 <HAL_GetTick>
 8007680:	4607      	mov	r7, r0
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007682:	e004      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x1bc6>
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007684:	f7fc fe1c 	bl	80042c0 <HAL_GetTick>
 8007688:	1bc0      	subs	r0, r0, r7
 800768a:	2802      	cmp	r0, #2
 800768c:	d87c      	bhi.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	0098      	lsls	r0, r3, #2
 8007692:	d4f7      	bmi.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x1bbc>
 8007694:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8007698:	f7fe f9bc 	bl	8005a14 <RCCEx_PLL3_Config.part.0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800769c:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076a0:	4605      	mov	r5, r0
 80076a2:	e712      	b.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0x1a02>
            ret = HAL_TIMEOUT;
 80076a4:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80076a6:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 80076aa:	4635      	mov	r5, r6
 80076ac:	f7fe bf39 	b.w	8006522 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076b0:	2603      	movs	r6, #3
 80076b2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076b6:	f7fe ba4c 	b.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076ba:	2603      	movs	r6, #3
 80076bc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076c0:	4635      	mov	r5, r6
 80076c2:	f7fe badc 	b.w	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076c6:	2603      	movs	r6, #3
 80076c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076cc:	4635      	mov	r5, r6
 80076ce:	f7fe bced 	b.w	80060ac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM6) == RCC_PERIPHCLK_LPTIM6)
 80076d2:	2603      	movs	r6, #3
 80076d4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076d8:	4635      	mov	r5, r6
 80076da:	f7fe be55 	b.w	8006388 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80076de:	2603      	movs	r6, #3
 80076e0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076e4:	4635      	mov	r5, r6
 80076e6:	f7fe bb33 	b.w	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x288>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
 80076ea:	2603      	movs	r6, #3
 80076ec:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076f0:	4635      	mov	r5, r6
 80076f2:	f7fe bda7 	b.w	8006244 <HAL_RCCEx_PeriphCLKConfig+0x77c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
 80076f6:	2603      	movs	r6, #3
 80076f8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80076fc:	4635      	mov	r5, r6
 80076fe:	f7fe bb8d 	b.w	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x354>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
 8007702:	2603      	movs	r6, #3
 8007704:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007708:	4635      	mov	r5, r6
 800770a:	f7fe be08 	b.w	800631e <HAL_RCCEx_PeriphCLKConfig+0x856>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800770e:	2603      	movs	r6, #3
 8007710:	6862      	ldr	r2, [r4, #4]
 8007712:	4635      	mov	r5, r6
 8007714:	f7ff b965 	b.w	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xf1a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART11) == RCC_PERIPHCLK_USART11)
 8007718:	2603      	movs	r6, #3
 800771a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800771e:	4635      	mov	r5, r6
 8007720:	f7fe bbe4 	b.w	8005eec <HAL_RCCEx_PeriphCLKConfig+0x424>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007724:	2603      	movs	r6, #3
 8007726:	e9d4 3200 	ldrd	r3, r2, [r4]
 800772a:	4635      	mov	r5, r6
 800772c:	f7fe bb43 	b.w	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
 8007730:	2603      	movs	r6, #3
 8007732:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007736:	4635      	mov	r5, r6
 8007738:	f7fe bba3 	b.w	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800773c:	2603      	movs	r6, #3
 800773e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007742:	4635      	mov	r5, r6
 8007744:	f7fe ba68 	b.w	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x150>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007748:	2603      	movs	r6, #3
 800774a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800774e:	4635      	mov	r5, r6
 8007750:	f7fe bac8 	b.w	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007754:	2603      	movs	r6, #3
 8007756:	e9d4 3200 	ldrd	r3, r2, [r4]
 800775a:	4635      	mov	r5, r6
 800775c:	f7fe bc71 	b.w	8006042 <HAL_RCCEx_PeriphCLKConfig+0x57a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007760:	2603      	movs	r6, #3
 8007762:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007766:	4635      	mov	r5, r6
 8007768:	f7fe bd37 	b.w	80061da <HAL_RCCEx_PeriphCLKConfig+0x712>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800776c:	2603      	movs	r6, #3
 800776e:	6862      	ldr	r2, [r4, #4]
 8007770:	4635      	mov	r5, r6
 8007772:	f7ff b904 	b.w	800697e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
 8007776:	bf00      	nop
 8007778:	44020c00 	.word	0x44020c00
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
 800777c:	2603      	movs	r6, #3
 800777e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007782:	4635      	mov	r5, r6
 8007784:	f7fe bd93 	b.w	80062ae <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007788:	2603      	movs	r6, #3
 800778a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800778e:	4635      	mov	r5, r6
 8007790:	f7fe ba11 	b.w	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xee>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007794:	2603      	movs	r6, #3
 8007796:	e9d4 3200 	ldrd	r3, r2, [r4]
 800779a:	4635      	mov	r5, r6
 800779c:	f7fe be29 	b.w	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x92a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART12) == RCC_PERIPHCLK_UART12)
 80077a0:	2603      	movs	r6, #3
 80077a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077a6:	4635      	mov	r5, r6
 80077a8:	f7fe bc15 	b.w	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
 80077ac:	2603      	movs	r6, #3
 80077ae:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077b2:	4635      	mov	r5, r6
 80077b4:	f7ff b8b0 	b.w	8006918 <HAL_RCCEx_PeriphCLKConfig+0xe50>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80077b8:	2603      	movs	r6, #3
 80077ba:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077be:	4635      	mov	r5, r6
 80077c0:	f7fe be89 	b.w	80064d6 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
 80077c4:	2603      	movs	r6, #3
 80077c6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077ca:	4635      	mov	r5, r6
 80077cc:	f7ff b86f 	b.w	80068ae <HAL_RCCEx_PeriphCLKConfig+0xde6>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
 80077d0:	2603      	movs	r6, #3
 80077d2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077d6:	4635      	mov	r5, r6
 80077d8:	f7fe be44 	b.w	8006464 <HAL_RCCEx_PeriphCLKConfig+0x99c>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80077dc:	2603      	movs	r6, #3
 80077de:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077e2:	4635      	mov	r5, r6
 80077e4:	f7fe bfff 	b.w	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80077e8:	2603      	movs	r6, #3
 80077ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 80077ee:	4635      	mov	r5, r6
 80077f0:	f7ff b826 	b.w	8006840 <HAL_RCCEx_PeriphCLKConfig+0xd78>
 80077f4:	462e      	mov	r6, r5
 80077f6:	f7fe bf06 	b.w	8006606 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
 80077fa:	462e      	mov	r6, r5
 80077fc:	f7fe bed1 	b.w	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 8007800:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007802:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8007806:	4635      	mov	r5, r6
 8007808:	f7fe becb 	b.w	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xada>
      return HAL_TIMEOUT;
 800780c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800780e:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8007812:	4635      	mov	r5, r6
 8007814:	f7fe bc6e 	b.w	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      return HAL_TIMEOUT;
 8007818:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800781a:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 800781e:	4635      	mov	r5, r6
 8007820:	f7fe bef1 	b.w	8006606 <HAL_RCCEx_PeriphCLKConfig+0xb3e>
      return HAL_TIMEOUT;
 8007824:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007826:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 800782a:	4635      	mov	r5, r6
 800782c:	f7fe bc74 	b.w	8006118 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007830:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007832:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8007836:	4635      	mov	r5, r6
 8007838:	f7fe bc8e 	b.w	8006158 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800783c:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800783e:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 8007842:	4635      	mov	r5, r6
 8007844:	f7fe bc44 	b.w	80060d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007848:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
 800784a:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 800784e:	4635      	mov	r5, r6
 8007850:	f7fe bc74 	b.w	800613c <HAL_RCCEx_PeriphCLKConfig+0x674>
      return HAL_TIMEOUT;
 8007854:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC_LP) == RCC_PERIPHCLK_DAC_LP)
 8007856:	e9d4 3200 	ldrd	r3, r2, [r4]
      return HAL_TIMEOUT;
 800785a:	4635      	mov	r5, r6
 800785c:	f7fe be54 	b.w	8006508 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8007860:	462e      	mov	r6, r5
 8007862:	f7fe b9a8 	b.w	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8007866:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007868:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 800786a:	4635      	mov	r5, r6
 800786c:	f7ff b8f4 	b.w	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 8007870:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007872:	6862      	ldr	r2, [r4, #4]
      return HAL_TIMEOUT;
 8007874:	4635      	mov	r5, r6
 8007876:	f7ff b8fe 	b.w	8006a76 <HAL_RCCEx_PeriphCLKConfig+0xfae>
      return HAL_TIMEOUT;
 800787a:	2603      	movs	r6, #3
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800787c:	6862      	ldr	r2, [r4, #4]
 800787e:	f7ff b906 	b.w	8006a8e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007882:	4813      	ldr	r0, [pc, #76]	; (80078d0 <HAL_RCCEx_PeriphCLKConfig+0x1e08>)
 8007884:	4b13      	ldr	r3, [pc, #76]	; (80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1e0c>)
 8007886:	69c1      	ldr	r1, [r0, #28]
 8007888:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800788c:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
 8007890:	430b      	orrs	r3, r1
 8007892:	61c3      	str	r3, [r0, #28]
 8007894:	f7ff ba02 	b.w	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x11d4>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007898:	462e      	mov	r6, r5
 800789a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800789e:	f7fe be40 	b.w	8006522 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80078a2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80078a6:	f7fe b954 	b.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80078aa:	460b      	mov	r3, r1
 80078ac:	f7ff b9ed 	b.w	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x11c2>
    switch (pPeriphClkInit->Usart1ClockSelection)
 80078b0:	2601      	movs	r6, #1
 80078b2:	f7fe b94e 	b.w	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    switch (pPeriphClkInit->Spi1ClockSelection)
 80078b6:	2601      	movs	r6, #1
 80078b8:	4635      	mov	r5, r6
 80078ba:	f7fe bf94 	b.w	80067e6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    switch (pPeriphClkInit->Usart11ClockSelection)
 80078be:	2601      	movs	r6, #1
 80078c0:	4635      	mov	r5, r6
 80078c2:	f7fe bb88 	b.w	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    switch (pPeriphClkInit->OspiClockSelection)
 80078c6:	2601      	movs	r6, #1
 80078c8:	4635      	mov	r5, r6
 80078ca:	f7ff b8c5 	b.w	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xf90>
 80078ce:	bf00      	nop
 80078d0:	44020c00 	.word	0x44020c00
 80078d4:	00ffffcf 	.word	0x00ffffcf

080078d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80078d8:	4b59      	ldr	r3, [pc, #356]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
{
 80078da:	b4f0      	push	{r4, r5, r6, r7}
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80078dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80078de:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80078e0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80078e2:	6a9f      	ldr	r7, [r3, #40]	; 0x28
  if (pll1m != 0U)
 80078e4:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80078e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos);
 80078ea:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll1m != 0U)
 80078ee:	d05a      	beq.n	80079a6 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80078f0:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80078f4:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80078f8:	fb07 f202 	mul.w	r2, r7, r2
  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80078fc:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007900:	ee07 2a90 	vmov	s15, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007904:	ee07 1a10 	vmov	s14, r1
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007908:	f005 0203 	and.w	r2, r5, #3
    switch (pll1source)
 800790c:	2a02      	cmp	r2, #2
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800790e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007912:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8007a44 <HAL_RCCEx_GetPLL1ClockFreq+0x16c>
 8007916:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll1source)
 800791a:	f000 8087 	beq.w	8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800791e:	2a03      	cmp	r2, #3
 8007920:	d05f      	beq.n	80079e2 <HAL_RCCEx_GetPLL1ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	4b48      	ldr	r3, [pc, #288]	; (8007a48 <HAL_RCCEx_GetPLL1ClockFreq+0x170>)
 8007926:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800792a:	40d3      	lsrs	r3, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 800792c:	ee05 4a90 	vmov	s11, r4
 8007930:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007934:	ee06 3a10 	vmov	s12, r3
 8007938:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 800793c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007940:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007948:	eec6 6a05 	vdiv.f32	s13, s12, s10
 800794c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007950:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007954:	4b3a      	ldr	r3, [pc, #232]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	0197      	lsls	r7, r2, #6
 800795a:	d429      	bmi.n	80079b0 <HAL_RCCEx_GetPLL1ClockFreq+0xd8>
        pPLL1_Clocks->PLL1_P_Frequency = 0U;
 800795c:	2300      	movs	r3, #0
 800795e:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007960:	4b37      	ldr	r3, [pc, #220]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	0195      	lsls	r5, r2, #6
 8007966:	d502      	bpl.n	800796e <HAL_RCCEx_GetPLL1ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8007968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800796a:	0394      	lsls	r4, r2, #14
 800796c:	d44c      	bmi.n	8007a08 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
        pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8007972:	4b33      	ldr	r3, [pc, #204]	; (8007a40 <HAL_RCCEx_GetPLL1ClockFreq+0x168>)
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	0191      	lsls	r1, r2, #6
 8007978:	d52f      	bpl.n	80079da <HAL_RCCEx_GetPLL1ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800797a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800797c:	0352      	lsls	r2, r2, #13
 800797e:	d52c      	bpl.n	80079da <HAL_RCCEx_GetPLL1ClockFreq+0x102>
}
 8007980:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007988:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800798c:	ee07 3a10 	vmov	s14, r3
 8007990:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1R_Pos) + \
 8007994:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 8007998:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800799c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80079a0:	edc0 6a02 	vstr	s13, [r0, #8]
}
 80079a4:	4770      	bx	lr
    pPLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079a6:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80079aa:	6084      	str	r4, [r0, #8]
}
 80079ac:	bcf0      	pop	{r4, r5, r6, r7}
 80079ae:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL1_CLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80079b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079b2:	03d6      	lsls	r6, r2, #15
 80079b4:	d5d2      	bpl.n	800795c <HAL_RCCEx_GetPLL1ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80079b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079bc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80079c0:	ee07 3a10 	vmov	s14, r3
 80079c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1P_Pos) + \
 80079c8:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 80079cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80079d0:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80079d4:	edc0 6a00 	vstr	s13, [r0]
 80079d8:	e7c2      	b.n	8007960 <HAL_RCCEx_GetPLL1ClockFreq+0x88>
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL1_Clocks->PLL1_R_Frequency = 0U;
 80079de:	6083      	str	r3, [r0, #8]
}
 80079e0:	4770      	bx	lr
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 80079e2:	ee05 4a90 	vmov	s11, r4
 80079e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80079ea:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80079ee:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8007a4c <HAL_RCCEx_GetPLL1ClockFreq+0x174>
 80079f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80079f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079fa:	eec5 6a25 	vdiv.f32	s13, s10, s11
 80079fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007a02:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8007a06:	e7a5      	b.n	8007954 <HAL_RCCEx_GetPLL1ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007a0e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007a12:	ee07 3a10 	vmov	s14, r3
 8007a16:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007a1a:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll1vco / \
 8007a1e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007a22:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007a26:	edc0 6a01 	vstr	s13, [r0, #4]
 8007a2a:	e7a2      	b.n	8007972 <HAL_RCCEx_GetPLL1ClockFreq+0x9a>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)pll1n + (fracn1 / (float_t)0x2000) + \
 8007a2c:	ee05 4a90 	vmov	s11, r4
 8007a30:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007a34:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007a38:	ed9f 5a05 	vldr	s10, [pc, #20]	; 8007a50 <HAL_RCCEx_GetPLL1ClockFreq+0x178>
 8007a3c:	e7d9      	b.n	80079f2 <HAL_RCCEx_GetPLL1ClockFreq+0x11a>
 8007a3e:	bf00      	nop
 8007a40:	44020c00 	.word	0x44020c00
 8007a44:	39000000 	.word	0x39000000
 8007a48:	017d7840 	.word	0x017d7840
 8007a4c:	4bbebc20 	.word	0x4bbebc20
 8007a50:	4a742400 	.word	0x4a742400

08007a54 <HAL_RCCEx_GetPLL2ClockFreq>:
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007a54:	4b59      	ldr	r3, [pc, #356]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
{
 8007a56:	b4f0      	push	{r4, r5, r6, r7}
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007a58:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007a5a:	6add      	ldr	r5, [r3, #44]	; 0x2c
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007a5c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007a5e:	6adf      	ldr	r7, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8007a60:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007a64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos);
 8007a66:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll2m != 0U)
 8007a6a:	d05a      	beq.n	8007b22 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007a6c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007a70:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007a74:	fb07 f202 	mul.w	r2, r7, r2
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007a78:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007a7c:	ee07 2a90 	vmov	s15, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007a80:	ee07 1a10 	vmov	s14, r1
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007a84:	f005 0203 	and.w	r2, r5, #3
    switch (pll2source)
 8007a88:	2a02      	cmp	r2, #2
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007a8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007a8e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
 8007a92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll2source)
 8007a96:	f000 8087 	beq.w	8007ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8007a9a:	2a03      	cmp	r2, #3
 8007a9c:	d05f      	beq.n	8007b5e <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	4b48      	ldr	r3, [pc, #288]	; (8007bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
 8007aa2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007aa6:	40d3      	lsrs	r3, r2
        pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007aa8:	ee05 4a90 	vmov	s11, r4
 8007aac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007ab0:	ee06 3a10 	vmov	s12, r3
 8007ab4:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8007ab8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007abc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ac4:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8007ac8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007acc:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007ad0:	4b3a      	ldr	r3, [pc, #232]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	0117      	lsls	r7, r2, #4
 8007ad6:	d429      	bmi.n	8007b2c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
        pPLL2_Clocks->PLL2_P_Frequency = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007adc:	4b37      	ldr	r3, [pc, #220]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	0115      	lsls	r5, r2, #4
 8007ae2:	d502      	bpl.n	8007aea <HAL_RCCEx_GetPLL2ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ae6:	0394      	lsls	r4, r2, #14
 8007ae8:	d44c      	bmi.n	8007b84 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007aea:	2300      	movs	r3, #0
 8007aec:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007aee:	4b33      	ldr	r3, [pc, #204]	; (8007bbc <HAL_RCCEx_GetPLL2ClockFreq+0x168>)
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	0111      	lsls	r1, r2, #4
 8007af4:	d52f      	bpl.n	8007b56 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af8:	0352      	lsls	r2, r2, #13
 8007afa:	d52c      	bpl.n	8007b56 <HAL_RCCEx_GetPLL2ClockFreq+0x102>
}
 8007afc:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007b00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b04:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007b08:	ee07 3a10 	vmov	s14, r3
 8007b0c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2R_Pos) + \
 8007b10:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 8007b14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b18:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007b1c:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007b20:	4770      	bx	lr
    pPLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007b22:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b26:	6084      	str	r4, [r0, #8]
}
 8007b28:	bcf0      	pop	{r4, r5, r6, r7}
 8007b2a:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL2_CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2e:	03d6      	lsls	r6, r2, #15
 8007b30:	d5d2      	bpl.n	8007ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b38:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007b3c:	ee07 3a10 	vmov	s14, r3
 8007b40:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2P_Pos) + \
 8007b44:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 8007b48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b4c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007b50:	edc0 6a00 	vstr	s13, [r0]
 8007b54:	e7c2      	b.n	8007adc <HAL_RCCEx_GetPLL2ClockFreq+0x88>
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL2_Clocks->PLL2_R_Frequency = 0U;
 8007b5a:	6083      	str	r3, [r0, #8]
}
 8007b5c:	4770      	bx	lr
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007b5e:	ee05 4a90 	vmov	s11, r4
 8007b62:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007b66:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007b6a:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8007bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
 8007b6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b76:	eec5 6a25 	vdiv.f32	s13, s10, s11
 8007b7a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007b7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8007b82:	e7a5      	b.n	8007ad0 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007b8a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007b8e:	ee07 3a10 	vmov	s14, r3
 8007b92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007b96:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll2vco / \
 8007b9a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b9e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007ba2:	edc0 6a01 	vstr	s13, [r0, #4]
 8007ba6:	e7a2      	b.n	8007aee <HAL_RCCEx_GetPLL2ClockFreq+0x9a>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)pll2n + (fracn2 / (float_t)0x2000) + \
 8007ba8:	ee05 4a90 	vmov	s11, r4
 8007bac:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007bb0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007bb4:	ed9f 5a05 	vldr	s10, [pc, #20]	; 8007bcc <HAL_RCCEx_GetPLL2ClockFreq+0x178>
 8007bb8:	e7d9      	b.n	8007b6e <HAL_RCCEx_GetPLL2ClockFreq+0x11a>
 8007bba:	bf00      	nop
 8007bbc:	44020c00 	.word	0x44020c00
 8007bc0:	39000000 	.word	0x39000000
 8007bc4:	017d7840 	.word	0x017d7840
 8007bc8:	4bbebc20 	.word	0x4bbebc20
 8007bcc:	4a742400 	.word	0x4a742400

08007bd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007bd0:	4b59      	ldr	r3, [pc, #356]	; (8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
{
 8007bd2:	b4f0      	push	{r4, r5, r6, r7}
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007bd4:	6c59      	ldr	r1, [r3, #68]	; 0x44
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007bd6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007bd8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007bda:	6b1f      	ldr	r7, [r3, #48]	; 0x30
  if (pll3m != 0U)
 8007bdc:	f416 5f7c 	tst.w	r6, #16128	; 0x3f00
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos);
 8007be2:	f3c6 2405 	ubfx	r4, r6, #8, #6
  if (pll3m != 0U)
 8007be6:	d05a      	beq.n	8007c9e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007be8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007bec:	f3c7 1700 	ubfx	r7, r7, #4, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007bf0:	fb07 f202 	mul.w	r2, r7, r2
  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007bf4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007bf8:	ee07 2a90 	vmov	s15, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007bfc:	ee07 1a10 	vmov	s14, r1
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007c00:	f005 0203 	and.w	r2, r5, #3
    switch (pll3source)
 8007c04:	2a02      	cmp	r2, #2
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007c0a:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8007d3c <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
 8007c0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    switch (pll3source)
 8007c12:	f000 8087 	beq.w	8007d24 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8007c16:	2a03      	cmp	r2, #3
 8007c18:	d05f      	beq.n	8007cda <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	4b48      	ldr	r3, [pc, #288]	; (8007d40 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
 8007c1e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8007c22:	40d3      	lsrs	r3, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007c24:	ee05 4a90 	vmov	s11, r4
 8007c28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007c2c:	ee06 3a10 	vmov	s12, r3
 8007c30:	eeb8 5ae5 	vcvt.f32.s32	s10, s11
 8007c34:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007c38:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c40:	eec6 6a05 	vdiv.f32	s13, s12, s10
 8007c44:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007c48:	ee66 7aa7 	vmul.f32	s15, s13, s15
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c4c:	4b3a      	ldr	r3, [pc, #232]	; (8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	0097      	lsls	r7, r2, #2
 8007c52:	d429      	bmi.n	8007ca8 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
        pPLL3_Clocks->PLL3_P_Frequency = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	6003      	str	r3, [r0, #0]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c58:	4b37      	ldr	r3, [pc, #220]	; (8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	0095      	lsls	r5, r2, #2
 8007c5e:	d502      	bpl.n	8007c66 <HAL_RCCEx_GetPLL3ClockFreq+0x96>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007c60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c62:	0394      	lsls	r4, r2, #14
 8007c64:	d44c      	bmi.n	8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c66:	2300      	movs	r3, #0
 8007c68:	6043      	str	r3, [r0, #4]
    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007c6a:	4b33      	ldr	r3, [pc, #204]	; (8007d38 <HAL_RCCEx_GetPLL3ClockFreq+0x168>)
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	0091      	lsls	r1, r2, #2
 8007c70:	d52f      	bpl.n	8007cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007c72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c74:	0352      	lsls	r2, r2, #13
 8007c76:	d52c      	bpl.n	8007cd2 <HAL_RCCEx_GetPLL3ClockFreq+0x102>
}
 8007c78:	bcf0      	pop	{r4, r5, r6, r7}
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007c80:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8007c84:	ee07 3a10 	vmov	s14, r3
 8007c88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3R_Pos) + \
 8007c8c:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 8007c90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c94:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007c98:	edc0 6a02 	vstr	s13, [r0, #8]
}
 8007c9c:	4770      	bx	lr
    pPLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007c9e:	e9c0 4400 	strd	r4, r4, [r0]
    pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ca2:	6084      	str	r4, [r0, #8]
}
 8007ca4:	bcf0      	pop	{r4, r5, r6, r7}
 8007ca6:	4770      	bx	lr
      if (__HAL_RCC_GET_PLL3_CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007caa:	03d6      	lsls	r6, r2, #15
 8007cac:	d5d2      	bpl.n	8007c54 <HAL_RCCEx_GetPLL3ClockFreq+0x84>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007cb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007cb4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8007cb8:	ee07 3a10 	vmov	s14, r3
 8007cbc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3P_Pos) + \
 8007cc0:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 8007cc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007cc8:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007ccc:	edc0 6a00 	vstr	s13, [r0]
 8007cd0:	e7c2      	b.n	8007c58 <HAL_RCCEx_GetPLL3ClockFreq+0x88>
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	bcf0      	pop	{r4, r5, r6, r7}
        pPLL3_Clocks->PLL3_R_Frequency = 0U;
 8007cd6:	6083      	str	r3, [r0, #8]
}
 8007cd8:	4770      	bx	lr
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007cda:	ee05 4a90 	vmov	s11, r4
 8007cde:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007ce2:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007ce6:	ed9f 5a17 	vldr	s10, [pc, #92]	; 8007d44 <HAL_RCCEx_GetPLL3ClockFreq+0x174>
 8007cea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cf2:	eec5 6a25 	vdiv.f32	s13, s10, s11
 8007cf6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007cfa:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 8007cfe:	e7a5      	b.n	8007c4c <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
                                                             ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007d06:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8007d0a:	ee07 3a10 	vmov	s14, r3
 8007d0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
                                                                                  RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007d12:	ee37 7a26 	vadd.f32	s14, s14, s13
                                         (uint32_t)(float_t)(pll3vco / \
 8007d16:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007d1a:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8007d1e:	edc0 6a01 	vstr	s13, [r0, #4]
 8007d22:	e7a2      	b.n	8007c6a <HAL_RCCEx_GetPLL3ClockFreq+0x9a>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)pll3n + (fracn3 / (float_t)0x2000) + \
 8007d24:	ee05 4a90 	vmov	s11, r4
 8007d28:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8007d2c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8007d30:	ed9f 5a05 	vldr	s10, [pc, #20]	; 8007d48 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
 8007d34:	e7d9      	b.n	8007cea <HAL_RCCEx_GetPLL3ClockFreq+0x11a>
 8007d36:	bf00      	nop
 8007d38:	44020c00 	.word	0x44020c00
 8007d3c:	39000000 	.word	0x39000000
 8007d40:	017d7840 	.word	0x017d7840
 8007d44:	4bbebc20 	.word	0x4bbebc20
 8007d48:	4a742400 	.word	0x4a742400

08007d4c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007d4c:	f100 437e 	add.w	r3, r0, #4261412864	; 0xfe000000
 8007d50:	430b      	orrs	r3, r1
 8007d52:	f000 8318 	beq.w	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
{
 8007d56:	b500      	push	{lr}
    switch (PeriphClk)
 8007d58:	f5a0 1380 	sub.w	r3, r0, #1048576	; 0x100000
 8007d5c:	430b      	orrs	r3, r1
{
 8007d5e:	b085      	sub	sp, #20
    switch (PeriphClk)
 8007d60:	f000 872b 	beq.w	8008bba <HAL_RCCEx_GetPeriphCLKFreq+0xe6e>
 8007d64:	4bac      	ldr	r3, [pc, #688]	; (8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8007d66:	4298      	cmp	r0, r3
 8007d68:	f171 0300 	sbcs.w	r3, r1, #0
 8007d6c:	d23f      	bcs.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8007d6e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8007d72:	430b      	orrs	r3, r1
 8007d74:	f000 8750 	beq.w	8008c18 <HAL_RCCEx_GetPeriphCLKFreq+0xecc>
 8007d78:	f240 4301 	movw	r3, #1025	; 0x401
 8007d7c:	4298      	cmp	r0, r3
 8007d7e:	f171 0300 	sbcs.w	r3, r1, #0
 8007d82:	d377      	bcc.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8007d84:	f5a0 4300 	sub.w	r3, r0, #32768	; 0x8000
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	f001 8077 	beq.w	8008e7c <HAL_RCCEx_GetPeriphCLKFreq+0x1130>
 8007d8e:	f248 0301 	movw	r3, #32769	; 0x8001
 8007d92:	4298      	cmp	r0, r3
 8007d94:	f171 0300 	sbcs.w	r3, r1, #0
 8007d98:	f0c0 8207 	bcc.w	80081aa <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
 8007d9c:	f5a0 2380 	sub.w	r3, r0, #262144	; 0x40000
 8007da0:	430b      	orrs	r3, r1
 8007da2:	f000 8720 	beq.w	8008be6 <HAL_RCCEx_GetPeriphCLKFreq+0xe9a>
 8007da6:	4b9d      	ldr	r3, [pc, #628]	; (800801c <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8007da8:	4298      	cmp	r0, r3
 8007daa:	f171 0300 	sbcs.w	r3, r1, #0
 8007dae:	f0c0 81d8 	bcc.w	8008162 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
 8007db2:	f5a0 2000 	sub.w	r0, r0, #524288	; 0x80000
 8007db6:	ea50 0301 	orrs.w	r3, r0, r1
 8007dba:	bf18      	it	ne
 8007dbc:	2000      	movne	r0, #0
 8007dbe:	d113      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007dc0:	4a97      	ldr	r2, [pc, #604]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007dc2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8007dc6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
        switch (srcclk)
 8007dca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dce:	f000 85a6 	beq.w	800891e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 8007dd2:	f200 866b 	bhi.w	8008aac <HAL_RCCEx_GetPeriphCLKFreq+0xd60>
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 859b 	beq.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 8007ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de0:	bf18      	it	ne
 8007de2:	2000      	movne	r0, #0
 8007de4:	f000 83c6 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
}
 8007de8:	b005      	add	sp, #20
 8007dea:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 8007dee:	2300      	movs	r3, #0
 8007df0:	2202      	movs	r2, #2
 8007df2:	4291      	cmp	r1, r2
 8007df4:	bf08      	it	eq
 8007df6:	4298      	cmpeq	r0, r3
 8007df8:	f001 8016 	beq.w	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0x10dc>
 8007dfc:	4283      	cmp	r3, r0
 8007dfe:	418a      	sbcs	r2, r1
 8007e00:	d24c      	bcs.n	8007e9c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8007e02:	2240      	movs	r2, #64	; 0x40
 8007e04:	4291      	cmp	r1, r2
 8007e06:	bf08      	it	eq
 8007e08:	4298      	cmpeq	r0, r3
 8007e0a:	f000 879d 	beq.w	8008d48 <HAL_RCCEx_GetPeriphCLKFreq+0xffc>
 8007e0e:	4283      	cmp	r3, r0
 8007e10:	418a      	sbcs	r2, r1
 8007e12:	f080 821f 	bcs.w	8008254 <HAL_RCCEx_GetPeriphCLKFreq+0x508>
 8007e16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e1a:	4291      	cmp	r1, r2
 8007e1c:	bf08      	it	eq
 8007e1e:	4298      	cmpeq	r0, r3
 8007e20:	f001 8015 	beq.w	8008e4e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007e24:	4283      	cmp	r3, r0
 8007e26:	418a      	sbcs	r2, r1
 8007e28:	f080 81f0 	bcs.w	800820c <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
 8007e2c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007e30:	bf08      	it	eq
 8007e32:	4298      	cmpeq	r0, r3
 8007e34:	bf18      	it	ne
 8007e36:	2000      	movne	r0, #0
 8007e38:	d1d6      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007e3a:	4a79      	ldr	r2, [pc, #484]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007e3c:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C4CLKSOURCE_PCLK3)
 8007e40:	f413 0340 	ands.w	r3, r3, #12582912	; 0xc00000
 8007e44:	f000 822c 	beq.w	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk ==  RCC_I2C4CLKSOURCE_PLL3R)
 8007e48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e4c:	f001 8089 	beq.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007e50:	6811      	ldr	r1, [r2, #0]
 8007e52:	0788      	lsls	r0, r1, #30
 8007e54:	d503      	bpl.n	8007e5e <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8007e56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007e5a:	f001 8255 	beq.w	8009308 <HAL_RCCEx_GetPeriphCLKFreq+0x15bc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C4CLKSOURCE_CSI))
 8007e5e:	4a70      	ldr	r2, [pc, #448]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007e60:	6810      	ldr	r0, [r2, #0]
 8007e62:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8007e66:	d0bf      	beq.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8007e68:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007e6c:	486d      	ldr	r0, [pc, #436]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8007e6e:	bf18      	it	ne
 8007e70:	2000      	movne	r0, #0
 8007e72:	e7b9      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8007e74:	2821      	cmp	r0, #33	; 0x21
 8007e76:	f171 0300 	sbcs.w	r3, r1, #0
 8007e7a:	d25e      	bcs.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 8007e7c:	ea50 0301 	orrs.w	r3, r0, r1
 8007e80:	f000 827d 	beq.w	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x632>
 8007e84:	3801      	subs	r0, #1
 8007e86:	f141 31ff 	adc.w	r1, r1, #4294967295	; 0xffffffff
 8007e8a:	2820      	cmp	r0, #32
 8007e8c:	f171 0300 	sbcs.w	r3, r1, #0
 8007e90:	f0c0 82a0 	bcc.w	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0x688>
 8007e94:	2000      	movs	r0, #0
}
 8007e96:	b005      	add	sp, #20
 8007e98:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (PeriphClk)
 8007e9c:	f100 4270 	add.w	r2, r0, #4026531840	; 0xf0000000
 8007ea0:	430a      	orrs	r2, r1
 8007ea2:	f000 8625 	beq.w	8008af0 <HAL_RCCEx_GetPeriphCLKFreq+0xda4>
 8007ea6:	4a60      	ldr	r2, [pc, #384]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8007ea8:	4290      	cmp	r0, r2
 8007eaa:	f171 0200 	sbcs.w	r2, r1, #0
 8007eae:	f0c0 808d 	bcc.w	8007fcc <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 8007eb2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	bf08      	it	eq
 8007eba:	4290      	cmpeq	r0, r2
 8007ebc:	f000 8764 	beq.w	8008d88 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>
 8007ec0:	4282      	cmp	r2, r0
 8007ec2:	eb73 0201 	sbcs.w	r2, r3, r1
 8007ec6:	f080 80cd 	bcs.w	8008064 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007eca:	2901      	cmp	r1, #1
 8007ecc:	bf08      	it	eq
 8007ece:	4298      	cmpeq	r0, r3
 8007ed0:	bf18      	it	ne
 8007ed2:	2000      	movne	r0, #0
 8007ed4:	d188      	bne.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8007ed6:	4a52      	ldr	r2, [pc, #328]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007ed8:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI6CLKSOURCE_PCLK2)
 8007edc:	f413 3360 	ands.w	r3, r3, #229376	; 0x38000
 8007ee0:	f000 8512 	beq.w	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL2Q))
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	0112      	lsls	r2, r2, #4
 8007ee8:	d503      	bpl.n	8007ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
 8007eea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007eee:	f000 855b 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI6CLKSOURCE_PLL3Q))
 8007ef2:	4a4b      	ldr	r2, [pc, #300]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007ef4:	6812      	ldr	r2, [r2, #0]
 8007ef6:	0090      	lsls	r0, r2, #2
 8007ef8:	d503      	bpl.n	8007f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
 8007efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efe:	f000 8559 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSI))
 8007f02:	4a47      	ldr	r2, [pc, #284]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007f04:	6811      	ldr	r1, [r2, #0]
 8007f06:	0789      	lsls	r1, r1, #30
 8007f08:	d503      	bpl.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8007f0a:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 8007f0e:	f001 8209 	beq.w	8009324 <HAL_RCCEx_GetPeriphCLKFreq+0x15d8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI6CLKSOURCE_CSI))
 8007f12:	4a43      	ldr	r2, [pc, #268]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007f14:	6812      	ldr	r2, [r2, #0]
 8007f16:	0590      	lsls	r0, r2, #22
 8007f18:	d503      	bpl.n	8007f22 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 8007f1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f1e:	f001 8291 	beq.w	8009444 <HAL_RCCEx_GetPeriphCLKFreq+0x16f8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI6CLKSOURCE_HSE))
 8007f22:	4a3f      	ldr	r2, [pc, #252]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007f24:	6810      	ldr	r0, [r2, #0]
 8007f26:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8007f2a:	f43f af5d 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8007f2e:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 8007f32:	483e      	ldr	r0, [pc, #248]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8007f34:	bf18      	it	ne
 8007f36:	2000      	movne	r0, #0
 8007f38:	e756      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8007f3a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	f000 86cd 	beq.w	8008cde <HAL_RCCEx_GetPeriphCLKFreq+0xf92>
 8007f44:	f240 1301 	movw	r3, #257	; 0x101
 8007f48:	4298      	cmp	r0, r3
 8007f4a:	f171 0300 	sbcs.w	r3, r1, #0
 8007f4e:	f0c0 80c8 	bcc.w	80080e2 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8007f52:	f5a0 7000 	sub.w	r0, r0, #512	; 0x200
 8007f56:	ea50 0301 	orrs.w	r3, r0, r1
 8007f5a:	bf18      	it	ne
 8007f5c:	2000      	movne	r0, #0
 8007f5e:	f47f af43 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART10_SOURCE();
 8007f62:	4b2f      	ldr	r3, [pc, #188]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007f64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
        if (srcclk == RCC_USART10CLKSOURCE_PCLK1)
 8007f68:	f013 5360 	ands.w	r3, r3, #939524096	; 0x38000000
 8007f6c:	f000 822d 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL2Q))
 8007f70:	4a2b      	ldr	r2, [pc, #172]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	0112      	lsls	r2, r2, #4
 8007f76:	d503      	bpl.n	8007f80 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
 8007f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f7c:	f000 8514 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART10CLKSOURCE_PLL3Q))
 8007f80:	4a27      	ldr	r2, [pc, #156]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	0090      	lsls	r0, r2, #2
 8007f86:	d503      	bpl.n	8007f90 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8007f88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f8c:	f000 8512 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_HSI))
 8007f90:	4a23      	ldr	r2, [pc, #140]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007f92:	6811      	ldr	r1, [r2, #0]
 8007f94:	0789      	lsls	r1, r1, #30
 8007f96:	d503      	bpl.n	8007fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8007f98:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007f9c:	f001 81d7 	beq.w	800934e <HAL_RCCEx_GetPeriphCLKFreq+0x1602>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART10CLKSOURCE_CSI))
 8007fa0:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007fa2:	6812      	ldr	r2, [r2, #0]
 8007fa4:	0590      	lsls	r0, r2, #22
 8007fa6:	d503      	bpl.n	8007fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8007fa8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fac:	f001 8238 	beq.w	8009420 <HAL_RCCEx_GetPeriphCLKFreq+0x16d4>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART10CLKSOURCE_LSE))
 8007fb0:	4a1b      	ldr	r2, [pc, #108]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007fb2:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8007fb6:	f010 0002 	ands.w	r0, r0, #2
 8007fba:	f43f af15 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8007fbe:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
 8007fc2:	bf14      	ite	ne
 8007fc4:	2000      	movne	r0, #0
 8007fc6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8007fca:	e70d      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8007fcc:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	f000 835a 	beq.w	800868a <HAL_RCCEx_GetPeriphCLKFreq+0x93e>
 8007fd6:	4b16      	ldr	r3, [pc, #88]	; (8008030 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8007fd8:	4298      	cmp	r0, r3
 8007fda:	f171 0300 	sbcs.w	r3, r1, #0
 8007fde:	d329      	bcc.n	8008034 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007fe0:	f100 437c 	add.w	r3, r0, #4227858432	; 0xfc000000
 8007fe4:	430b      	orrs	r3, r1
 8007fe6:	f000 8322 	beq.w	800862e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8007fea:	f100 4078 	add.w	r0, r0, #4160749568	; 0xf8000000
 8007fee:	ea50 0301 	orrs.w	r3, r0, r1
 8007ff2:	bf18      	it	ne
 8007ff4:	2000      	movne	r0, #0
 8007ff6:	f47f aef7 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007ffa:	4b09      	ldr	r3, [pc, #36]	; (8008020 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8007ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008000:	f003 0307 	and.w	r3, r3, #7
 8008004:	2b04      	cmp	r3, #4
 8008006:	f201 8253 	bhi.w	80094b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1764>
 800800a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800800e:	0482      	.short	0x0482
 8008010:	048802b3 	.word	0x048802b3
 8008014:	0491048e 	.word	0x0491048e
 8008018:	00100001 	.word	0x00100001
 800801c:	00040001 	.word	0x00040001
 8008020:	44020c00 	.word	0x44020c00
 8008024:	003d0900 	.word	0x003d0900
 8008028:	10000001 	.word	0x10000001
 800802c:	017d7840 	.word	0x017d7840
 8008030:	00800001 	.word	0x00800001
    switch (PeriphClk)
 8008034:	f5a0 1300 	sub.w	r3, r0, #2097152	; 0x200000
 8008038:	430b      	orrs	r3, r1
 800803a:	f000 82a0 	beq.w	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800803e:	f5a0 0080 	sub.w	r0, r0, #4194304	; 0x400000
 8008042:	ea50 0301 	orrs.w	r3, r0, r1
 8008046:	bf18      	it	ne
 8008048:	2000      	movne	r0, #0
 800804a:	f47f aecd 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SDMMC1_SOURCE();
 800804e:	4bb3      	ldr	r3, [pc, #716]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008050:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_SDMMC1CLKSOURCE_PLL1Q)
 8008054:	0658      	lsls	r0, r3, #25
 8008056:	f100 831e 	bmi.w	8008696 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800805a:	a801      	add	r0, sp, #4
 800805c:	f7ff fc3c 	bl	80078d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008060:	9802      	ldr	r0, [sp, #8]
 8008062:	e6c1      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8008064:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 8008068:	430b      	orrs	r3, r1
 800806a:	f000 8271 	beq.w	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
 800806e:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
 8008072:	ea50 0301 	orrs.w	r3, r0, r1
 8008076:	bf18      	it	ne
 8008078:	2000      	movne	r0, #0
 800807a:	f47f aeb5 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI4_SOURCE();
 800807e:	4aa7      	ldr	r2, [pc, #668]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008080:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI4CLKSOURCE_PCLK2)
 8008084:	f413 6360 	ands.w	r3, r3, #3584	; 0xe00
 8008088:	f000 843e 	beq.w	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL2Q))
 800808c:	6812      	ldr	r2, [r2, #0]
 800808e:	0112      	lsls	r2, r2, #4
 8008090:	d503      	bpl.n	800809a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008096:	f000 8487 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI4CLKSOURCE_PLL3Q))
 800809a:	4aa0      	ldr	r2, [pc, #640]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800809c:	6812      	ldr	r2, [r2, #0]
 800809e:	0090      	lsls	r0, r2, #2
 80080a0:	d503      	bpl.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 80080a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080a6:	f000 8485 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSI))
 80080aa:	4a9c      	ldr	r2, [pc, #624]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80080ac:	6811      	ldr	r1, [r2, #0]
 80080ae:	0789      	lsls	r1, r1, #30
 80080b0:	d503      	bpl.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x36e>
 80080b2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80080b6:	f001 812e 	beq.w	8009316 <HAL_RCCEx_GetPeriphCLKFreq+0x15ca>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI4CLKSOURCE_CSI))
 80080ba:	4a98      	ldr	r2, [pc, #608]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80080bc:	6812      	ldr	r2, [r2, #0]
 80080be:	0590      	lsls	r0, r2, #22
 80080c0:	d503      	bpl.n	80080ca <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
 80080c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c6:	f001 81a5 	beq.w	8009414 <HAL_RCCEx_GetPeriphCLKFreq+0x16c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI4CLKSOURCE_HSE))
 80080ca:	4a94      	ldr	r2, [pc, #592]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80080cc:	6810      	ldr	r0, [r2, #0]
 80080ce:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80080d2:	f43f ae89 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80080d6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80080da:	4891      	ldr	r0, [pc, #580]	; (8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x5d4>)
 80080dc:	bf18      	it	ne
 80080de:	2000      	movne	r0, #0
 80080e0:	e682      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80080e2:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
 80080e6:	430b      	orrs	r3, r1
 80080e8:	f000 81fd 	beq.w	80084e6 <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 80080ec:	3880      	subs	r0, #128	; 0x80
 80080ee:	ea50 0301 	orrs.w	r3, r0, r1
 80080f2:	bf18      	it	ne
 80080f4:	2000      	movne	r0, #0
 80080f6:	f47f ae77 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART8_SOURCE();
 80080fa:	4a88      	ldr	r2, [pc, #544]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80080fc:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART8CLKSOURCE_PCLK1)
 8008100:	f413 0360 	ands.w	r3, r3, #14680064	; 0xe00000
 8008104:	f000 8161 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL2Q))
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	0112      	lsls	r2, r2, #4
 800810c:	d503      	bpl.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0x3ca>
 800810e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008112:	f000 8449 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART8CLKSOURCE_PLL3Q))
 8008116:	4a81      	ldr	r2, [pc, #516]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	0090      	lsls	r0, r2, #2
 800811c:	d503      	bpl.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800811e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008122:	f000 8447 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_HSI))
 8008126:	4a7d      	ldr	r2, [pc, #500]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008128:	6811      	ldr	r1, [r2, #0]
 800812a:	0789      	lsls	r1, r1, #30
 800812c:	d503      	bpl.n	8008136 <HAL_RCCEx_GetPeriphCLKFreq+0x3ea>
 800812e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008132:	f001 80fe 	beq.w	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x15e6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART8CLKSOURCE_CSI))
 8008136:	4a79      	ldr	r2, [pc, #484]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008138:	6812      	ldr	r2, [r2, #0]
 800813a:	0590      	lsls	r0, r2, #22
 800813c:	d503      	bpl.n	8008146 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 800813e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008142:	f001 815b 	beq.w	80093fc <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART8CLKSOURCE_LSE))
 8008146:	4a75      	ldr	r2, [pc, #468]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008148:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800814c:	f010 0002 	ands.w	r0, r0, #2
 8008150:	f43f ae4a 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008154:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008158:	bf14      	ite	ne
 800815a:	2000      	movne	r0, #0
 800815c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008160:	e642      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8008162:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8008166:	430b      	orrs	r3, r1
 8008168:	f000 824a 	beq.w	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
 800816c:	f5a0 3000 	sub.w	r0, r0, #131072	; 0x20000
 8008170:	ea50 0301 	orrs.w	r3, r0, r1
 8008174:	bf18      	it	ne
 8008176:	2000      	movne	r0, #0
 8008178:	f47f ae36 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800817c:	4a67      	ldr	r2, [pc, #412]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800817e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8008182:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
        switch (srcclk)
 8008186:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800818a:	f000 83e4 	beq.w	8008956 <HAL_RCCEx_GetPeriphCLKFreq+0xc0a>
 800818e:	f200 8439 	bhi.w	8008a04 <HAL_RCCEx_GetPeriphCLKFreq+0xcb8>
 8008192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008196:	f000 81ed 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 800819a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800819e:	f000 8225 	beq.w	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d07c      	beq.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80081a6:	2000      	movs	r0, #0
 80081a8:	e61e      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 80081aa:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 80081ae:	430b      	orrs	r3, r1
 80081b0:	f000 869b 	beq.w	8008eea <HAL_RCCEx_GetPeriphCLKFreq+0x119e>
 80081b4:	f242 0301 	movw	r3, #8193	; 0x2001
 80081b8:	4298      	cmp	r0, r3
 80081ba:	f171 0300 	sbcs.w	r3, r1, #0
 80081be:	d374      	bcc.n	80082aa <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
 80081c0:	f5a0 4080 	sub.w	r0, r0, #16384	; 0x4000
 80081c4:	ea50 0301 	orrs.w	r3, r0, r1
 80081c8:	bf18      	it	ne
 80081ca:	2000      	movne	r0, #0
 80081cc:	f47f ae0c 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80081d0:	4a52      	ldr	r2, [pc, #328]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80081d2:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80081d6:	f413 2340 	ands.w	r3, r3, #786432	; 0xc0000
 80081da:	f000 80f6 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I2C2CLKSOURCE_PLL3R)
 80081de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081e2:	f000 86be 	beq.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80081e6:	6811      	ldr	r1, [r2, #0]
 80081e8:	0789      	lsls	r1, r1, #30
 80081ea:	d503      	bpl.n	80081f4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80081ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80081f0:	f001 8075 	beq.w	80092de <HAL_RCCEx_GetPeriphCLKFreq+0x1592>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C2CLKSOURCE_CSI))
 80081f4:	4a49      	ldr	r2, [pc, #292]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80081f6:	6810      	ldr	r0, [r2, #0]
 80081f8:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80081fc:	f43f adf4 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8008200:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008204:	4847      	ldr	r0, [pc, #284]	; (8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>)
 8008206:	bf18      	it	ne
 8008208:	2000      	movne	r0, #0
 800820a:	e5ed      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 800820c:	2980      	cmp	r1, #128	; 0x80
 800820e:	bf08      	it	eq
 8008210:	4298      	cmpeq	r0, r3
 8008212:	f000 81d9 	beq.w	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8008216:	2300      	movs	r3, #0
 8008218:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800821c:	bf08      	it	eq
 800821e:	4298      	cmpeq	r0, r3
 8008220:	bf18      	it	ne
 8008222:	4618      	movne	r0, r3
 8008224:	f47f ade0 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM6_SOURCE();
 8008228:	493c      	ldr	r1, [pc, #240]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 800822a:	f8d1 20dc 	ldr.w	r2, [r1, #220]	; 0xdc
 800822e:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
        switch (srcclk)
 8008232:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 8008236:	f000 8397 	beq.w	8008968 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
 800823a:	f200 83ff 	bhi.w	8008a3c <HAL_RCCEx_GetPeriphCLKFreq+0xcf0>
 800823e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8008242:	f000 8197 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008246:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800824a:	f000 81cf 	beq.w	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 800824e:	b33a      	cbz	r2, 80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008250:	4618      	mov	r0, r3
 8008252:	e5c9      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 8008254:	2210      	movs	r2, #16
 8008256:	4291      	cmp	r1, r2
 8008258:	bf08      	it	eq
 800825a:	4298      	cmpeq	r0, r3
 800825c:	f000 850c 	beq.w	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
 8008260:	4283      	cmp	r3, r0
 8008262:	418a      	sbcs	r2, r1
 8008264:	d260      	bcs.n	8008328 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8008266:	2920      	cmp	r1, #32
 8008268:	bf08      	it	eq
 800826a:	4298      	cmpeq	r0, r3
 800826c:	bf18      	it	ne
 800826e:	2000      	movne	r0, #0
 8008270:	f47f adba 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008274:	4a29      	ldr	r2, [pc, #164]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008276:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 800827a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
        switch (srcclk)
 800827e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008282:	f000 837a 	beq.w	800897a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8008286:	f200 83f5 	bhi.w	8008a74 <HAL_RCCEx_GetPeriphCLKFreq+0xd28>
 800828a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800828e:	f000 8171 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008292:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008296:	f000 81a9 	beq.w	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 800829a:	2b00      	cmp	r3, #0
 800829c:	f040 867a 	bne.w	8008f94 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>
}
 80082a0:	b005      	add	sp, #20
 80082a2:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK3Freq();
 80082a6:	f7fd bb17 	b.w	80058d8 <HAL_RCC_GetPCLK3Freq>
    switch (PeriphClk)
 80082aa:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 80082ae:	430b      	orrs	r3, r1
 80082b0:	f000 80eb 	beq.w	800848a <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 80082b4:	f5a0 5080 	sub.w	r0, r0, #4096	; 0x1000
 80082b8:	ea50 0301 	orrs.w	r3, r0, r1
 80082bc:	bf18      	it	ne
 80082be:	2000      	movne	r0, #0
 80082c0:	f47f ad92 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80082c4:	4a15      	ldr	r2, [pc, #84]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80082c6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80082ca:	f013 63e0 	ands.w	r3, r3, #117440512	; 0x7000000
 80082ce:	d0e7      	beq.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL2Q)
 80082d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082d4:	f000 8368 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if (srcclk == RCC_LPUART1CLKSOURCE_PLL3Q)
 80082d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80082dc:	f000 836a 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80082e0:	6811      	ldr	r1, [r2, #0]
 80082e2:	0789      	lsls	r1, r1, #30
 80082e4:	d503      	bpl.n	80082ee <HAL_RCCEx_GetPeriphCLKFreq+0x5a2>
 80082e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80082ea:	f001 8076 	beq.w	80093da <HAL_RCCEx_GetPeriphCLKFreq+0x168e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_CSI))
 80082ee:	4a0b      	ldr	r2, [pc, #44]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 80082f0:	6812      	ldr	r2, [r2, #0]
 80082f2:	0592      	lsls	r2, r2, #22
 80082f4:	d503      	bpl.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0x5b2>
 80082f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80082fa:	f001 80ac 	beq.w	8009456 <HAL_RCCEx_GetPeriphCLKFreq+0x170a>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80082fe:	4a07      	ldr	r2, [pc, #28]	; (800831c <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>)
 8008300:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008304:	f010 0002 	ands.w	r0, r0, #2
 8008308:	f43f ad6e 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800830c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008310:	bf14      	ite	ne
 8008312:	2000      	movne	r0, #0
 8008314:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008318:	e566      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800831a:	bf00      	nop
 800831c:	44020c00 	.word	0x44020c00
 8008320:	017d7840 	.word	0x017d7840
 8008324:	003d0900 	.word	0x003d0900
    switch (PeriphClk)
 8008328:	2904      	cmp	r1, #4
 800832a:	bf08      	it	eq
 800832c:	4298      	cmpeq	r0, r3
 800832e:	f000 8097 	beq.w	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8008332:	2300      	movs	r3, #0
 8008334:	2908      	cmp	r1, #8
 8008336:	bf08      	it	eq
 8008338:	4298      	cmpeq	r0, r3
 800833a:	bf18      	it	ne
 800833c:	4618      	movne	r0, r3
 800833e:	f47f ad53 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8008342:	4aad      	ldr	r2, [pc, #692]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008344:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008348:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
        srcclk = __HAL_RCC_GET_CEC_SOURCE();
 800834c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 8008350:	0790      	lsls	r0, r2, #30
 8008352:	f100 81a6 	bmi.w	80086a2 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_CECCLKSOURCE_LSI))
 8008356:	4aa8      	ldr	r2, [pc, #672]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008358:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 800835c:	0111      	lsls	r1, r2, #4
 800835e:	d502      	bpl.n	8008366 <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
 8008360:	2b40      	cmp	r3, #64	; 0x40
 8008362:	f001 800a 	beq.w	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x162e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_CECCLKSOURCE_CSI_DIV122))
 8008366:	4aa4      	ldr	r2, [pc, #656]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008368:	6810      	ldr	r0, [r2, #0]
 800836a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 800836e:	f43f ad3b 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = CSI_VALUE / 122U;
 8008372:	2b80      	cmp	r3, #128	; 0x80
 8008374:	f248 0012 	movw	r0, #32786	; 0x8012
 8008378:	bf18      	it	ne
 800837a:	2000      	movne	r0, #0
 800837c:	e534      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
    switch (PeriphClk)
 800837e:	2000      	movs	r0, #0
}
 8008380:	b005      	add	sp, #20
 8008382:	f85d fb04 	ldr.w	pc, [sp], #4
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008386:	4a9c      	ldr	r2, [pc, #624]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008388:	f8d2 30f0 	ldr.w	r3, [r2, #240]	; 0xf0
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800838c:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8008390:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8008394:	0792      	lsls	r2, r2, #30
 8008396:	d503      	bpl.n	80083a0 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8008398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800839c:	f000 816f 	beq.w	800867e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80083a0:	4a95      	ldr	r2, [pc, #596]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80083a2:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 80083a6:	0110      	lsls	r0, r2, #4
 80083a8:	d503      	bpl.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
 80083aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ae:	f000 8169 	beq.w	8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIVx))
 80083b2:	4a91      	ldr	r2, [pc, #580]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80083b4:	6810      	ldr	r0, [r2, #0]
 80083b6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80083ba:	d005      	beq.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80083bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083c0:	f000 82e4 	beq.w	800898c <HAL_RCCEx_GetPeriphCLKFreq+0xc40>
              frequency = 0U;
 80083c4:	2000      	movs	r0, #0
 80083c6:	4770      	bx	lr
}
 80083c8:	4770      	bx	lr
 80083ca:	b005      	add	sp, #20
 80083cc:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetPCLK1Freq();
 80083d0:	f7fd ba42 	b.w	8005858 <HAL_RCC_GetPCLK1Freq>
    switch (PeriphClk)
 80083d4:	281f      	cmp	r0, #31
 80083d6:	f63f ad5d 	bhi.w	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80083da:	a301      	add	r3, pc, #4	; (adr r3, 80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0x694>)
 80083dc:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 80083e0:	080088af 	.word	0x080088af
 80083e4:	080087e9 	.word	0x080087e9
 80083e8:	08007e95 	.word	0x08007e95
 80083ec:	08008785 	.word	0x08008785
 80083f0:	08007e95 	.word	0x08007e95
 80083f4:	08007e95 	.word	0x08007e95
 80083f8:	08007e95 	.word	0x08007e95
 80083fc:	08008845 	.word	0x08008845
 8008400:	08007e95 	.word	0x08007e95
 8008404:	08007e95 	.word	0x08007e95
 8008408:	08007e95 	.word	0x08007e95
 800840c:	08007e95 	.word	0x08007e95
 8008410:	08007e95 	.word	0x08007e95
 8008414:	08007e95 	.word	0x08007e95
 8008418:	08007e95 	.word	0x08007e95
 800841c:	0800871b 	.word	0x0800871b
 8008420:	08007e95 	.word	0x08007e95
 8008424:	08007e95 	.word	0x08007e95
 8008428:	08007e95 	.word	0x08007e95
 800842c:	08007e95 	.word	0x08007e95
 8008430:	08007e95 	.word	0x08007e95
 8008434:	08007e95 	.word	0x08007e95
 8008438:	08007e95 	.word	0x08007e95
 800843c:	08007e95 	.word	0x08007e95
 8008440:	08007e95 	.word	0x08007e95
 8008444:	08007e95 	.word	0x08007e95
 8008448:	08007e95 	.word	0x08007e95
 800844c:	08007e95 	.word	0x08007e95
 8008450:	08007e95 	.word	0x08007e95
 8008454:	08007e95 	.word	0x08007e95
 8008458:	08007e95 	.word	0x08007e95
 800845c:	080086b1 	.word	0x080086b1
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008460:	4a65      	ldr	r2, [pc, #404]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008462:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 8008466:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008468:	f403 7340 	and.w	r3, r3, #768	; 0x300
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCANCLKSOURCE_HSE))
 800846c:	0390      	lsls	r0, r2, #14
 800846e:	d502      	bpl.n	8008476 <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8008470:	2b00      	cmp	r3, #0
 8008472:	f000 85bf 	beq.w	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x12a8>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL1Q)
 8008476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847a:	f43f adee 	beq.w	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if (srcclk == RCC_FDCANCLKSOURCE_PLL2Q)
 800847e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008482:	f000 8291 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
          frequency = 0U;
 8008486:	2000      	movs	r0, #0
 8008488:	e4ae      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART12_SOURCE();
 800848a:	4a5b      	ldr	r2, [pc, #364]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 800848c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
        if (srcclk == RCC_UART12CLKSOURCE_PCLK1)
 8008490:	f013 0370 	ands.w	r3, r3, #112	; 0x70
 8008494:	d099      	beq.n	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL2Q))
 8008496:	6812      	ldr	r2, [r2, #0]
 8008498:	0112      	lsls	r2, r2, #4
 800849a:	d502      	bpl.n	80084a2 <HAL_RCCEx_GetPeriphCLKFreq+0x756>
 800849c:	2b10      	cmp	r3, #16
 800849e:	f000 8283 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART12CLKSOURCE_PLL3Q))
 80084a2:	4a55      	ldr	r2, [pc, #340]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80084a4:	6812      	ldr	r2, [r2, #0]
 80084a6:	0090      	lsls	r0, r2, #2
 80084a8:	d502      	bpl.n	80084b0 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
 80084aa:	2b20      	cmp	r3, #32
 80084ac:	f000 8282 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_HSI))
 80084b0:	4a51      	ldr	r2, [pc, #324]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80084b2:	6811      	ldr	r1, [r2, #0]
 80084b4:	0789      	lsls	r1, r1, #30
 80084b6:	d502      	bpl.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 80084b8:	2b30      	cmp	r3, #48	; 0x30
 80084ba:	f000 8709 	beq.w	80092d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1584>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART12CLKSOURCE_CSI))
 80084be:	4a4e      	ldr	r2, [pc, #312]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80084c0:	6812      	ldr	r2, [r2, #0]
 80084c2:	0590      	lsls	r0, r2, #22
 80084c4:	d502      	bpl.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x780>
 80084c6:	2b40      	cmp	r3, #64	; 0x40
 80084c8:	f000 87a7 	beq.w	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x16ce>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART12CLKSOURCE_LSE))
 80084cc:	4a4a      	ldr	r2, [pc, #296]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80084ce:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80084d2:	f010 0002 	ands.w	r0, r0, #2
 80084d6:	f43f ac87 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80084da:	2b50      	cmp	r3, #80	; 0x50
 80084dc:	bf14      	ite	ne
 80084de:	2000      	movne	r0, #0
 80084e0:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80084e4:	e480      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART7_SOURCE();
 80084e6:	4b44      	ldr	r3, [pc, #272]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80084e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
        if (srcclk == RCC_UART7CLKSOURCE_PCLK1)
 80084ec:	f413 13e0 	ands.w	r3, r3, #1835008	; 0x1c0000
 80084f0:	f43f af6b 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL2Q))
 80084f4:	4a40      	ldr	r2, [pc, #256]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80084f6:	6812      	ldr	r2, [r2, #0]
 80084f8:	0111      	lsls	r1, r2, #4
 80084fa:	d503      	bpl.n	8008504 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
 80084fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008500:	f000 8252 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART7CLKSOURCE_PLL3Q))
 8008504:	4a3c      	ldr	r2, [pc, #240]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008506:	6812      	ldr	r2, [r2, #0]
 8008508:	0092      	lsls	r2, r2, #2
 800850a:	d503      	bpl.n	8008514 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
 800850c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008510:	f000 8250 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_HSI))
 8008514:	4a38      	ldr	r2, [pc, #224]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008516:	6811      	ldr	r1, [r2, #0]
 8008518:	0788      	lsls	r0, r1, #30
 800851a:	d503      	bpl.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
 800851c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008520:	f000 86eb 	beq.w	80092fa <HAL_RCCEx_GetPeriphCLKFreq+0x15ae>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART7CLKSOURCE_CSI))
 8008524:	4a34      	ldr	r2, [pc, #208]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	0591      	lsls	r1, r2, #22
 800852a:	d503      	bpl.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 800852c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008530:	f000 8761 	beq.w	80093f6 <HAL_RCCEx_GetPeriphCLKFreq+0x16aa>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART7CLKSOURCE_LSE))
 8008534:	4a30      	ldr	r2, [pc, #192]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008536:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800853a:	f010 0002 	ands.w	r0, r0, #2
 800853e:	f43f ac53 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008542:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8008546:	bf14      	ite	ne
 8008548:	2000      	movne	r0, #0
 800854a:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800854e:	e44b      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8008550:	4a29      	ldr	r2, [pc, #164]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008552:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
 8008556:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
        switch (srcclk)
 800855a:	2b80      	cmp	r3, #128	; 0x80
 800855c:	f000 81df 	beq.w	800891e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 8008560:	f200 83a4 	bhi.w	8008cac <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 81d4 	beq.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 800856a:	2b40      	cmp	r3, #64	; 0x40
 800856c:	bf18      	it	ne
 800856e:	2000      	movne	r0, #0
 8008570:	f47f ac3a 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008574:	a801      	add	r0, sp, #4
 8008576:	f7ff fa6d 	bl	8007a54 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_P_Frequency;
 800857a:	9801      	ldr	r0, [sp, #4]
            break;
 800857c:	e434      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800857e:	4a1e      	ldr	r2, [pc, #120]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 8008580:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8008584:	f013 0307 	ands.w	r3, r3, #7
 8008588:	f000 845c 	beq.w	8008e44 <HAL_RCCEx_GetPeriphCLKFreq+0x10f8>
        else if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800858c:	2b01      	cmp	r3, #1
 800858e:	f000 8598 	beq.w	80090c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1376>
        else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2R)
 8008592:	2b02      	cmp	r3, #2
 8008594:	f000 8642 	beq.w	800921c <HAL_RCCEx_GetPeriphCLKFreq+0x14d0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008598:	6812      	ldr	r2, [r2, #0]
 800859a:	0390      	lsls	r0, r2, #14
 800859c:	d502      	bpl.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 800859e:	2b03      	cmp	r3, #3
 80085a0:	f000 8753 	beq.w	800944a <HAL_RCCEx_GetPeriphCLKFreq+0x16fe>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80085a4:	4a14      	ldr	r2, [pc, #80]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80085a6:	6811      	ldr	r1, [r2, #0]
 80085a8:	0789      	lsls	r1, r1, #30
 80085aa:	d502      	bpl.n	80085b2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80085ac:	2b04      	cmp	r3, #4
 80085ae:	f000 871b 	beq.w	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x169c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_CSI))
 80085b2:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80085b4:	6810      	ldr	r0, [r2, #0]
 80085b6:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 80085ba:	f43f ac15 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 80085be:	2b05      	cmp	r3, #5
 80085c0:	480e      	ldr	r0, [pc, #56]	; (80085fc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>)
 80085c2:	bf18      	it	ne
 80085c4:	2000      	movne	r0, #0
 80085c6:	e40f      	b.n	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM5_SOURCE();
 80085c8:	4a0b      	ldr	r2, [pc, #44]	; (80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>)
 80085ca:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 80085ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
        switch (srcclk)
 80085d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80085d6:	f000 8517 	beq.w	8009008 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 80085da:	f200 81f7 	bhi.w	80089cc <HAL_RCCEx_GetPeriphCLKFreq+0xc80>
 80085de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085e2:	d0c7      	beq.n	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 80085e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085e8:	f040 81ea 	bne.w	80089c0 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085ec:	a801      	add	r0, sp, #4
 80085ee:	f7ff faef 	bl	8007bd0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_R_Frequency;
 80085f2:	9803      	ldr	r0, [sp, #12]
            break;
 80085f4:	f7ff bbf8 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80085f8:	44020c00 	.word	0x44020c00
 80085fc:	003d0900 	.word	0x003d0900
        srcclk = __HAL_RCC_GET_I3C1_SOURCE();
 8008600:	4a8f      	ldr	r2, [pc, #572]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008602:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I3C1CLKSOURCE_PCLK1)
 8008606:	f013 7340 	ands.w	r3, r3, #50331648	; 0x3000000
 800860a:	f43f aede 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I3C1CLKSOURCE_PLL3R)
 800860e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008612:	f000 84a6 	beq.w	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I3C1CLKSOURCE_HSI))
 8008616:	6810      	ldr	r0, [r2, #0]
 8008618:	f010 0002 	ands.w	r0, r0, #2
 800861c:	f43f abe4 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008620:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008624:	f000 8646 	beq.w	80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1568>
          frequency = 0U;
 8008628:	2000      	movs	r0, #0
 800862a:	f7ff bbdd 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800862e:	4a84      	ldr	r2, [pc, #528]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008630:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8008634:	6812      	ldr	r2, [r2, #0]
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8008636:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800863a:	0492      	lsls	r2, r2, #18
 800863c:	d502      	bpl.n	8008644 <HAL_RCCEx_GetPeriphCLKFreq+0x8f8>
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 84df 	beq.w	8009002 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY)) && (srcclk == RCC_RNGCLKSOURCE_PLL1Q))
 8008644:	4a7e      	ldr	r2, [pc, #504]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008646:	6812      	ldr	r2, [r2, #0]
 8008648:	0190      	lsls	r0, r2, #6
 800864a:	d502      	bpl.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 800864c:	2b10      	cmp	r3, #16
 800864e:	f43f ad04 	beq.w	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RNGCLKSOURCE_LSE))
 8008652:	4a7b      	ldr	r2, [pc, #492]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008654:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8008658:	0791      	lsls	r1, r2, #30
 800865a:	d502      	bpl.n	8008662 <HAL_RCCEx_GetPeriphCLKFreq+0x916>
 800865c:	2b20      	cmp	r3, #32
 800865e:	f000 86b8 	beq.w	80093d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1686>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_LSI))
 8008662:	4a77      	ldr	r2, [pc, #476]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008664:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008668:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800866c:	f43f abbc 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSI_VALUE;
 8008670:	2b30      	cmp	r3, #48	; 0x30
 8008672:	bf14      	ite	ne
 8008674:	2000      	movne	r0, #0
 8008676:	f44f 40fa 	moveq.w	r0, #32000	; 0x7d00
 800867a:	f7ff bbb5 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800867e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008682:	4770      	bx	lr
      frequency = LSI_VALUE;
 8008684:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 8008688:	4770      	bx	lr
        srcclk = __HAL_RCC_GET_SDMMC2_SOURCE();
 800868a:	4b6d      	ldr	r3, [pc, #436]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800868c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_SDMMC2CLKSOURCE_PLL1Q)
 8008690:	0619      	lsls	r1, r3, #24
 8008692:	f57f ace2 	bpl.w	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008696:	a801      	add	r0, sp, #4
 8008698:	f7ff f9dc 	bl	8007a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800869c:	9803      	ldr	r0, [sp, #12]
 800869e:	f7ff bba3 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_CECCLKSOURCE_LSE))
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f47f ae57 	bne.w	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0x60a>
          frequency = LSE_VALUE;
 80086a8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80086ac:	f7ff bb9c 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART6_SOURCE();
 80086b0:	4a63      	ldr	r2, [pc, #396]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80086b2:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 80086b6:	f413 3360 	ands.w	r3, r3, #229376	; 0x38000
 80086ba:	f43f ae86 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL2Q))
 80086be:	6812      	ldr	r2, [r2, #0]
 80086c0:	0112      	lsls	r2, r2, #4
 80086c2:	d503      	bpl.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80086c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c8:	f000 816e 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART6CLKSOURCE_PLL3Q))
 80086cc:	4a5c      	ldr	r2, [pc, #368]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80086ce:	6812      	ldr	r2, [r2, #0]
 80086d0:	0090      	lsls	r0, r2, #2
 80086d2:	d503      	bpl.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x990>
 80086d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d8:	f000 816c 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 80086dc:	4a58      	ldr	r2, [pc, #352]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80086de:	6811      	ldr	r1, [r2, #0]
 80086e0:	0789      	lsls	r1, r1, #30
 80086e2:	d503      	bpl.n	80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>
 80086e4:	f5b3 3fc0 	cmp.w	r3, #98304	; 0x18000
 80086e8:	f000 85dd 	beq.w	80092a6 <HAL_RCCEx_GetPeriphCLKFreq+0x155a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_CSI))
 80086ec:	4a54      	ldr	r2, [pc, #336]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80086ee:	6812      	ldr	r2, [r2, #0]
 80086f0:	0590      	lsls	r0, r2, #22
 80086f2:	d503      	bpl.n	80086fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b0>
 80086f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086f8:	f000 86a1 	beq.w	800943e <HAL_RCCEx_GetPeriphCLKFreq+0x16f2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 80086fc:	4a50      	ldr	r2, [pc, #320]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80086fe:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008702:	f010 0002 	ands.w	r0, r0, #2
 8008706:	f43f ab6f 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800870a:	f5b3 3f20 	cmp.w	r3, #163840	; 0x28000
 800870e:	bf14      	ite	ne
 8008710:	2000      	movne	r0, #0
 8008712:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008716:	f7ff bb67 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800871a:	4a49      	ldr	r2, [pc, #292]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800871c:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8008720:	f413 43e0 	ands.w	r3, r3, #28672	; 0x7000
 8008724:	f43f ae51 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL2Q))
 8008728:	6812      	ldr	r2, [r2, #0]
 800872a:	0111      	lsls	r1, r2, #4
 800872c:	d503      	bpl.n	8008736 <HAL_RCCEx_GetPeriphCLKFreq+0x9ea>
 800872e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008732:	f000 8139 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART5CLKSOURCE_PLL3Q))
 8008736:	4a42      	ldr	r2, [pc, #264]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008738:	6812      	ldr	r2, [r2, #0]
 800873a:	0092      	lsls	r2, r2, #2
 800873c:	d503      	bpl.n	8008746 <HAL_RCCEx_GetPeriphCLKFreq+0x9fa>
 800873e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008742:	f000 8137 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8008746:	4a3e      	ldr	r2, [pc, #248]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008748:	6811      	ldr	r1, [r2, #0]
 800874a:	0788      	lsls	r0, r1, #30
 800874c:	d503      	bpl.n	8008756 <HAL_RCCEx_GetPeriphCLKFreq+0xa0a>
 800874e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008752:	f000 8622 	beq.w	800939a <HAL_RCCEx_GetPeriphCLKFreq+0x164e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_CSI))
 8008756:	4a3a      	ldr	r2, [pc, #232]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008758:	6812      	ldr	r2, [r2, #0]
 800875a:	0591      	lsls	r1, r2, #22
 800875c:	d503      	bpl.n	8008766 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 800875e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008762:	f000 8666 	beq.w	8009432 <HAL_RCCEx_GetPeriphCLKFreq+0x16e6>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8008766:	4a36      	ldr	r2, [pc, #216]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008768:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800876c:	f010 0002 	ands.w	r0, r0, #2
 8008770:	f43f ab3a 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008774:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008778:	bf14      	ite	ne
 800877a:	2000      	movne	r0, #0
 800877c:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008780:	f7ff bb32 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8008784:	4a2e      	ldr	r2, [pc, #184]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008786:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800878a:	f413 73e0 	ands.w	r3, r3, #448	; 0x1c0
 800878e:	f43f ae1c 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL2Q))
 8008792:	6812      	ldr	r2, [r2, #0]
 8008794:	0111      	lsls	r1, r2, #4
 8008796:	d502      	bpl.n	800879e <HAL_RCCEx_GetPeriphCLKFreq+0xa52>
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	f000 8105 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART3CLKSOURCE_PLL3Q))
 800879e:	4a28      	ldr	r2, [pc, #160]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80087a0:	6812      	ldr	r2, [r2, #0]
 80087a2:	0092      	lsls	r2, r2, #2
 80087a4:	d502      	bpl.n	80087ac <HAL_RCCEx_GetPeriphCLKFreq+0xa60>
 80087a6:	2b80      	cmp	r3, #128	; 0x80
 80087a8:	f000 8104 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80087ac:	4a24      	ldr	r2, [pc, #144]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80087ae:	6811      	ldr	r1, [r2, #0]
 80087b0:	0788      	lsls	r0, r1, #30
 80087b2:	d502      	bpl.n	80087ba <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 80087b4:	2bc0      	cmp	r3, #192	; 0xc0
 80087b6:	f000 85f7 	beq.w	80093a8 <HAL_RCCEx_GetPeriphCLKFreq+0x165c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_CSI))
 80087ba:	4a21      	ldr	r2, [pc, #132]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80087bc:	6812      	ldr	r2, [r2, #0]
 80087be:	0591      	lsls	r1, r2, #22
 80087c0:	d503      	bpl.n	80087ca <HAL_RCCEx_GetPeriphCLKFreq+0xa7e>
 80087c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c6:	f000 861f 	beq.w	8009408 <HAL_RCCEx_GetPeriphCLKFreq+0x16bc>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80087ca:	4a1d      	ldr	r2, [pc, #116]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80087cc:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80087d0:	f010 0002 	ands.w	r0, r0, #2
 80087d4:	f43f ab08 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80087d8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80087dc:	bf14      	ite	ne
 80087de:	2000      	movne	r0, #0
 80087e0:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80087e4:	f7ff bb00 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80087e8:	4a15      	ldr	r2, [pc, #84]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 80087ea:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80087ee:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80087f2:	f43f adea 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART2CLKSOURCE_PLL2Q))
 80087f6:	6812      	ldr	r2, [r2, #0]
 80087f8:	0110      	lsls	r0, r2, #4
 80087fa:	d502      	bpl.n	8008802 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 80087fc:	2b08      	cmp	r3, #8
 80087fe:	f000 80d3 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((srcclk == RCC_USART2CLKSOURCE_PLL3Q))
 8008802:	2b10      	cmp	r3, #16
 8008804:	f000 80d6 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8008808:	4a0d      	ldr	r2, [pc, #52]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 800880a:	6811      	ldr	r1, [r2, #0]
 800880c:	0789      	lsls	r1, r1, #30
 800880e:	d502      	bpl.n	8008816 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8008810:	2b18      	cmp	r3, #24
 8008812:	f000 85d7 	beq.w	80093c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1678>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_CSI))
 8008816:	4a0a      	ldr	r2, [pc, #40]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008818:	6812      	ldr	r2, [r2, #0]
 800881a:	0590      	lsls	r0, r2, #22
 800881c:	d502      	bpl.n	8008824 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
 800881e:	2b20      	cmp	r3, #32
 8008820:	f000 8616 	beq.w	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x1704>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8008824:	4a06      	ldr	r2, [pc, #24]	; (8008840 <HAL_RCCEx_GetPeriphCLKFreq+0xaf4>)
 8008826:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 800882a:	f010 0002 	ands.w	r0, r0, #2
 800882e:	f43f aadb 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008832:	2b28      	cmp	r3, #40	; 0x28
 8008834:	bf14      	ite	ne
 8008836:	2000      	movne	r0, #0
 8008838:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 800883c:	f7ff bad4 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008840:	44020c00 	.word	0x44020c00
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8008844:	4aa7      	ldr	r2, [pc, #668]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008846:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 800884a:	f413 6360 	ands.w	r3, r3, #3584	; 0xe00
 800884e:	f43f adbc 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL2Q))
 8008852:	6812      	ldr	r2, [r2, #0]
 8008854:	0112      	lsls	r2, r2, #4
 8008856:	d503      	bpl.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0xb14>
 8008858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800885c:	f000 80a4 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART4CLKSOURCE_PLL3Q))
 8008860:	4aa0      	ldr	r2, [pc, #640]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008862:	6812      	ldr	r2, [r2, #0]
 8008864:	0090      	lsls	r0, r2, #2
 8008866:	d503      	bpl.n	8008870 <HAL_RCCEx_GetPeriphCLKFreq+0xb24>
 8008868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800886c:	f000 80a2 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8008870:	4a9c      	ldr	r2, [pc, #624]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008872:	6811      	ldr	r1, [r2, #0]
 8008874:	0789      	lsls	r1, r1, #30
 8008876:	d503      	bpl.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8008878:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800887c:	f000 859b 	beq.w	80093b6 <HAL_RCCEx_GetPeriphCLKFreq+0x166a>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_CSI))
 8008880:	4a98      	ldr	r2, [pc, #608]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008882:	6812      	ldr	r2, [r2, #0]
 8008884:	0590      	lsls	r0, r2, #22
 8008886:	d503      	bpl.n	8008890 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>
 8008888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800888c:	f000 85bf 	beq.w	800940e <HAL_RCCEx_GetPeriphCLKFreq+0x16c2>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8008890:	4a94      	ldr	r2, [pc, #592]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008892:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008896:	f010 0002 	ands.w	r0, r0, #2
 800889a:	f43f aaa5 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 800889e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80088a2:	bf14      	ite	ne
 80088a4:	2000      	movne	r0, #0
 80088a6:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 80088aa:	f7ff ba9d 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80088ae:	4a8d      	ldr	r2, [pc, #564]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80088b0:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80088b4:	f013 0307 	ands.w	r3, r3, #7
 80088b8:	d026      	beq.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0xbbc>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL2Q))
 80088ba:	6812      	ldr	r2, [r2, #0]
 80088bc:	0112      	lsls	r2, r2, #4
 80088be:	d501      	bpl.n	80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d071      	beq.n	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART1CLKSOURCE_PLL3Q))
 80088c4:	4a87      	ldr	r2, [pc, #540]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80088c6:	6812      	ldr	r2, [r2, #0]
 80088c8:	0090      	lsls	r0, r2, #2
 80088ca:	d501      	bpl.n	80088d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d071      	beq.n	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80088d0:	4a84      	ldr	r2, [pc, #528]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80088d2:	6811      	ldr	r1, [r2, #0]
 80088d4:	0789      	lsls	r1, r1, #30
 80088d6:	d502      	bpl.n	80088de <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80088d8:	2b03      	cmp	r3, #3
 80088da:	f000 8507 	beq.w	80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x15a0>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_CSI))
 80088de:	4a81      	ldr	r2, [pc, #516]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80088e0:	6812      	ldr	r2, [r2, #0]
 80088e2:	0592      	lsls	r2, r2, #22
 80088e4:	d502      	bpl.n	80088ec <HAL_RCCEx_GetPeriphCLKFreq+0xba0>
 80088e6:	2b04      	cmp	r3, #4
 80088e8:	f000 859d 	beq.w	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x16da>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80088ec:	4a7d      	ldr	r2, [pc, #500]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80088ee:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 80088f2:	f010 0002 	ands.w	r0, r0, #2
 80088f6:	f43f aa77 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 80088fa:	2b05      	cmp	r3, #5
 80088fc:	bf14      	ite	ne
 80088fe:	2000      	movne	r0, #0
 8008900:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008904:	f7ff ba70 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
}
 8008908:	b005      	add	sp, #20
 800890a:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetPCLK2Freq();
 800890e:	f7fc bfc3 	b.w	8005898 <HAL_RCC_GetPCLK2Freq>
            HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008912:	a801      	add	r0, sp, #4
 8008914:	f7fe ffe0 	bl	80078d8 <HAL_RCCEx_GetPLL1ClockFreq>
            frequency = pll1_clocks.PLL1_Q_Frequency;
 8008918:	9802      	ldr	r0, [sp, #8]
            break;
 800891a:	f7ff ba65 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800891e:	a801      	add	r0, sp, #4
 8008920:	f7ff f956 	bl	8007bd0 <HAL_RCCEx_GetPLL3ClockFreq>
            frequency = pll3_clocks.PLL3_P_Frequency;
 8008924:	9801      	ldr	r0, [sp, #4]
            break;
 8008926:	f7ff ba5f 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 800892a:	486f      	ldr	r0, [pc, #444]	; (8008ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800892c:	f7ff ba5c 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008930:	4a6c      	ldr	r2, [pc, #432]	; (8008ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008932:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008936:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008938:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800893c:	0789      	lsls	r1, r1, #30
 800893e:	f140 83da 	bpl.w	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
 8008942:	2b00      	cmp	r3, #0
 8008944:	f040 83d7 	bne.w	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13aa>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008948:	6813      	ldr	r3, [r2, #0]
 800894a:	4868      	ldr	r0, [pc, #416]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800894c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008950:	40d8      	lsrs	r0, r3
 8008952:	f7ff ba49 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008956:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 800895a:	f010 0002 	ands.w	r0, r0, #2
 800895e:	bf18      	it	ne
 8008960:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008964:	f7ff ba40 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8008968:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
      frequency = LSE_VALUE;
 800896c:	f010 0002 	ands.w	r0, r0, #2
 8008970:	bf18      	it	ne
 8008972:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008976:	f7ff ba37 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800897a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 800897e:	f010 0002 	ands.w	r0, r0, #2
 8008982:	bf18      	it	ne
 8008984:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8008988:	f7ff ba2e 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      if (__HAL_RCC_GET_RTC_HSE_PRESCALER() >= RCC_RTC_HSE_DIV2)
 800898c:	69d3      	ldr	r3, [r2, #28]
 800898e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008996:	f4ff ad15 	bcc.w	80083c4 <HAL_RCCEx_GetPeriphCLKFreq+0x678>
        frequency = (HSE_VALUE / ((uint32_t)(__HAL_RCC_GET_RTC_HSE_PRESCALER() >> RCC_CFGR1_RTCPRE_Pos)));
 800899a:	69d0      	ldr	r0, [r2, #28]
 800899c:	4b53      	ldr	r3, [pc, #332]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 800899e:	f3c0 2005 	ubfx	r0, r0, #8, #6
 80089a2:	fbb3 f0f0 	udiv	r0, r3, r0
 80089a6:	4770      	bx	lr
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089a8:	a801      	add	r0, sp, #4
 80089aa:	f7ff f853 	bl	8007a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80089ae:	9802      	ldr	r0, [sp, #8]
 80089b0:	f7ff ba1a 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b4:	a801      	add	r0, sp, #4
 80089b6:	f7ff f90b 	bl	8007bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80089ba:	9802      	ldr	r0, [sp, #8]
 80089bc:	f7ff ba14 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	f43f ac6d 	beq.w	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 80089c6:	2000      	movs	r0, #0
 80089c8:	f7ff ba0e 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80089cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80089d0:	f000 832c 	beq.w	800902c <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
 80089d4:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80089d8:	bf18      	it	ne
 80089da:	2000      	movne	r0, #0
 80089dc:	f47f aa04 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089e0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089e4:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80089e6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80089ea:	0789      	lsls	r1, r1, #30
 80089ec:	f140 83ec 	bpl.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f040 83e9 	bne.w	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x147c>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80089f6:	6813      	ldr	r3, [r2, #0]
 80089f8:	483c      	ldr	r0, [pc, #240]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 80089fa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80089fe:	40d8      	lsrs	r0, r3
 8008a00:	f7ff b9f2 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a08:	f000 8307 	beq.w	800901a <HAL_RCCEx_GetPeriphCLKFreq+0x12ce>
 8008a0c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008a10:	bf18      	it	ne
 8008a12:	2000      	movne	r0, #0
 8008a14:	f47f a9e8 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a18:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a1c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a1e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a22:	0789      	lsls	r1, r1, #30
 8008a24:	f140 83bb 	bpl.w	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f040 83b8 	bne.w	800919e <HAL_RCCEx_GetPeriphCLKFreq+0x1452>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a2e:	6813      	ldr	r3, [r2, #0]
 8008a30:	482e      	ldr	r0, [pc, #184]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8008a32:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a36:	40d8      	lsrs	r0, r3
 8008a38:	f7ff b9d6 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a3c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008a40:	f000 82fd 	beq.w	800903e <HAL_RCCEx_GetPeriphCLKFreq+0x12f2>
 8008a44:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8008a48:	bf18      	it	ne
 8008a4a:	4618      	movne	r0, r3
 8008a4c:	f47f a9cc 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a50:	f8d1 30e8 	ldr.w	r3, [r1, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a54:	680a      	ldr	r2, [r1, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a56:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a5a:	0790      	lsls	r0, r2, #30
 8008a5c:	f140 83f9 	bpl.w	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f040 83f6 	bne.w	8009252 <HAL_RCCEx_GetPeriphCLKFreq+0x1506>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a66:	680b      	ldr	r3, [r1, #0]
 8008a68:	4820      	ldr	r0, [pc, #128]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8008a6a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008a6e:	40d8      	lsrs	r0, r3
 8008a70:	f7ff b9ba 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008a74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a78:	f000 82ea 	beq.w	8009050 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>
 8008a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a80:	bf18      	it	ne
 8008a82:	2000      	movne	r0, #0
 8008a84:	f47f a9b0 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a88:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a8c:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008a8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008a92:	0789      	lsls	r1, r1, #30
 8008a94:	f140 83f2 	bpl.w	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1530>
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f040 83ef 	bne.w	800927c <HAL_RCCEx_GetPeriphCLKFreq+0x1530>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008a9e:	6813      	ldr	r3, [r2, #0]
 8008aa0:	4812      	ldr	r0, [pc, #72]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8008aa2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008aa6:	40d8      	lsrs	r0, r3
 8008aa8:	f7ff b99e 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008aac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ab0:	f000 826d 	beq.w	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x1242>
 8008ab4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ab8:	bf18      	it	ne
 8008aba:	2000      	movne	r0, #0
 8008abc:	f47f a994 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ac0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ac4:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ac6:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008aca:	0789      	lsls	r1, r1, #30
 8008acc:	f140 82fe 	bpl.w	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f040 82fb 	bne.w	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x1380>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ad6:	6813      	ldr	r3, [r2, #0]
 8008ad8:	4804      	ldr	r0, [pc, #16]	; (8008aec <HAL_RCCEx_GetPeriphCLKFreq+0xda0>)
 8008ada:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008ade:	40d8      	lsrs	r0, r3
 8008ae0:	f7ff b982 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008ae4:	44020c00 	.word	0x44020c00
 8008ae8:	00bb8000 	.word	0x00bb8000
 8008aec:	017d7840 	.word	0x017d7840
        srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008af0:	4ba1      	ldr	r3, [pc, #644]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008af6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008afa:	2b20      	cmp	r3, #32
 8008afc:	d844      	bhi.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8008afe:	a201      	add	r2, pc, #4	; (adr r2, 8008b04 <HAL_RCCEx_GetPeriphCLKFreq+0xdb8>)
 8008b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b04:	08008913 	.word	0x08008913
 8008b08:	08008b89 	.word	0x08008b89
 8008b0c:	08008b89 	.word	0x08008b89
 8008b10:	08008b89 	.word	0x08008b89
 8008b14:	08008b89 	.word	0x08008b89
 8008b18:	08008b89 	.word	0x08008b89
 8008b1c:	08008b89 	.word	0x08008b89
 8008b20:	08008b89 	.word	0x08008b89
 8008b24:	08008575 	.word	0x08008575
 8008b28:	08008b89 	.word	0x08008b89
 8008b2c:	08008b89 	.word	0x08008b89
 8008b30:	08008b89 	.word	0x08008b89
 8008b34:	08008b89 	.word	0x08008b89
 8008b38:	08008b89 	.word	0x08008b89
 8008b3c:	08008b89 	.word	0x08008b89
 8008b40:	08008b89 	.word	0x08008b89
 8008b44:	0800891f 	.word	0x0800891f
 8008b48:	08008b89 	.word	0x08008b89
 8008b4c:	08008b89 	.word	0x08008b89
 8008b50:	08008b89 	.word	0x08008b89
 8008b54:	08008b89 	.word	0x08008b89
 8008b58:	08008b89 	.word	0x08008b89
 8008b5c:	08008b89 	.word	0x08008b89
 8008b60:	08008b89 	.word	0x08008b89
 8008b64:	08008bb5 	.word	0x08008bb5
 8008b68:	08008b89 	.word	0x08008b89
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	08008b89 	.word	0x08008b89
 8008b74:	08008b89 	.word	0x08008b89
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008b89 	.word	0x08008b89
 8008b80:	08008b89 	.word	0x08008b89
 8008b84:	08008b8f 	.word	0x08008b8f
 8008b88:	2000      	movs	r0, #0
 8008b8a:	f7ff b92d 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b8e:	4a7a      	ldr	r2, [pc, #488]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008b90:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b94:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008b96:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008b9a:	0789      	lsls	r1, r1, #30
 8008b9c:	f140 82ea 	bpl.w	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x1428>
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f040 82e7 	bne.w	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x1428>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008ba6:	6813      	ldr	r3, [r2, #0]
 8008ba8:	4874      	ldr	r0, [pc, #464]	; (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 8008baa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008bae:	40d8      	lsrs	r0, r3
 8008bb0:	f7ff b91a 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 8008bb4:	4872      	ldr	r0, [pc, #456]	; (8008d80 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>)
 8008bb6:	f7ff b917 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8008bba:	4a6f      	ldr	r2, [pc, #444]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008bbc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8008bc0:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
        switch (srcclk)
 8008bc4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc8:	f43f aea9 	beq.w	800891e <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
 8008bcc:	f200 8174 	bhi.w	8008eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f43f ae9e 	beq.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
 8008bd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008bda:	bf18      	it	ne
 8008bdc:	2000      	movne	r0, #0
 8008bde:	f43f acc9 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008be2:	f7ff b901 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008be6:	4a64      	ldr	r2, [pc, #400]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008be8:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8008bec:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
        switch (srcclk)
 8008bf0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008bf4:	f000 825c 	beq.w	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1364>
 8008bf8:	f200 8196 	bhi.w	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x11dc>
 8008bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c00:	f43f acb8 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008c04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c08:	f43f acf0 	beq.w	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f43f abdc 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
 8008c12:	2000      	movs	r0, #0
 8008c14:	f7ff b8e8 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USART11_SOURCE();
 8008c18:	4a57      	ldr	r2, [pc, #348]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008c1a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
        if (srcclk == RCC_USART11CLKSOURCE_PCLK1)
 8008c1e:	f013 0307 	ands.w	r3, r3, #7
 8008c22:	f43f abd2 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL2Q))
 8008c26:	6812      	ldr	r2, [r2, #0]
 8008c28:	0111      	lsls	r1, r2, #4
 8008c2a:	d502      	bpl.n	8008c32 <HAL_RCCEx_GetPeriphCLKFreq+0xee6>
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	f43f aebb 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USART11CLKSOURCE_PLL3Q))
 8008c32:	4a51      	ldr	r2, [pc, #324]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008c34:	6812      	ldr	r2, [r2, #0]
 8008c36:	0092      	lsls	r2, r2, #2
 8008c38:	d502      	bpl.n	8008c40 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	f43f aeba 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_HSI))
 8008c40:	4a4d      	ldr	r2, [pc, #308]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008c42:	6811      	ldr	r1, [r2, #0]
 8008c44:	0788      	lsls	r0, r1, #30
 8008c46:	d502      	bpl.n	8008c4e <HAL_RCCEx_GetPeriphCLKFreq+0xf02>
 8008c48:	2b03      	cmp	r3, #3
 8008c4a:	f000 833a 	beq.w	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1576>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_USART11CLKSOURCE_CSI))
 8008c4e:	4a4a      	ldr	r2, [pc, #296]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008c50:	6812      	ldr	r2, [r2, #0]
 8008c52:	0591      	lsls	r1, r2, #22
 8008c54:	d502      	bpl.n	8008c5c <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
 8008c56:	2b04      	cmp	r3, #4
 8008c58:	f000 83ee 	beq.w	8009438 <HAL_RCCEx_GetPeriphCLKFreq+0x16ec>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART11CLKSOURCE_LSE))
 8008c5c:	4a46      	ldr	r2, [pc, #280]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008c5e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008c62:	f010 0002 	ands.w	r0, r0, #2
 8008c66:	f43f a8bf 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008c6a:	2b05      	cmp	r3, #5
 8008c6c:	bf14      	ite	ne
 8008c6e:	2000      	movne	r0, #0
 8008c70:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008c74:	f7ff b8b8 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8008c78:	4a3f      	ldr	r2, [pc, #252]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008c7a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8008c7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (srcclk == RCC_USBCLKSOURCE_PLL1Q)
 8008c82:	2b10      	cmp	r3, #16
 8008c84:	f43f a9e9 	beq.w	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_USBCLKSOURCE_PLL3Q))
 8008c88:	6812      	ldr	r2, [r2, #0]
 8008c8a:	0092      	lsls	r2, r2, #2
 8008c8c:	d502      	bpl.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xf48>
 8008c8e:	2b20      	cmp	r3, #32
 8008c90:	f43f ae90 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_USBCLKSOURCE_HSI48))
 8008c94:	4a38      	ldr	r2, [pc, #224]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008c96:	6810      	ldr	r0, [r2, #0]
 8008c98:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8008c9c:	f43f a8a4 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSI48_VALUE;
 8008ca0:	2b30      	cmp	r3, #48	; 0x30
 8008ca2:	4838      	ldr	r0, [pc, #224]	; (8008d84 <HAL_RCCEx_GetPeriphCLKFreq+0x1038>)
 8008ca4:	bf18      	it	ne
 8008ca6:	2000      	movne	r0, #0
 8008ca8:	f7ff b89e 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008cac:	2bc0      	cmp	r3, #192	; 0xc0
 8008cae:	f000 816b 	beq.w	8008f88 <HAL_RCCEx_GetPeriphCLKFreq+0x123c>
 8008cb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb6:	f040 83f8 	bne.w	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x175e>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cba:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cbe:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008cc0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008cc4:	0788      	lsls	r0, r1, #30
 8008cc6:	f140 822b 	bpl.w	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f040 8228 	bne.w	8009120 <HAL_RCCEx_GetPeriphCLKFreq+0x13d4>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008cd0:	6813      	ldr	r3, [r2, #0]
 8008cd2:	482a      	ldr	r0, [pc, #168]	; (8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>)
 8008cd4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008cd8:	40d8      	lsrs	r0, r3
 8008cda:	f7ff b885 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_UART9_SOURCE();
 8008cde:	4a26      	ldr	r2, [pc, #152]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008ce0:	f8d2 30d8 	ldr.w	r3, [r2, #216]	; 0xd8
        if (srcclk == RCC_UART9CLKSOURCE_PCLK1)
 8008ce4:	f013 63e0 	ands.w	r3, r3, #117440512	; 0x7000000
 8008ce8:	f43f ab6f 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL2Q))
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	0111      	lsls	r1, r2, #4
 8008cf0:	d503      	bpl.n	8008cfa <HAL_RCCEx_GetPeriphCLKFreq+0xfae>
 8008cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cf6:	f43f ae57 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_UART9CLKSOURCE_PLL3Q))
 8008cfa:	4a1f      	ldr	r2, [pc, #124]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008cfc:	6812      	ldr	r2, [r2, #0]
 8008cfe:	0092      	lsls	r2, r2, #2
 8008d00:	d503      	bpl.n	8008d0a <HAL_RCCEx_GetPeriphCLKFreq+0xfbe>
 8008d02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008d06:	f43f ae55 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_HSI))
 8008d0a:	4a1b      	ldr	r2, [pc, #108]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008d0c:	6811      	ldr	r1, [r2, #0]
 8008d0e:	0788      	lsls	r0, r1, #30
 8008d10:	d503      	bpl.n	8008d1a <HAL_RCCEx_GetPeriphCLKFreq+0xfce>
 8008d12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008d16:	f000 8339 	beq.w	800938c <HAL_RCCEx_GetPeriphCLKFreq+0x1640>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_UART9CLKSOURCE_CSI))
 8008d1a:	4a17      	ldr	r2, [pc, #92]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008d1c:	6812      	ldr	r2, [r2, #0]
 8008d1e:	0591      	lsls	r1, r2, #22
 8008d20:	d503      	bpl.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
 8008d22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d26:	f000 8381 	beq.w	800942c <HAL_RCCEx_GetPeriphCLKFreq+0x16e0>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART9CLKSOURCE_LSE))
 8008d2a:	4a13      	ldr	r2, [pc, #76]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008d2c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
 8008d30:	f010 0002 	ands.w	r0, r0, #2
 8008d34:	f43f a858 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008d38:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8008d3c:	bf14      	ite	ne
 8008d3e:	2000      	movne	r0, #0
 8008d40:	f44f 4000 	moveq.w	r0, #32768	; 0x8000
 8008d44:	f7ff b850 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008d48:	4a0b      	ldr	r2, [pc, #44]	; (8008d78 <HAL_RCCEx_GetPeriphCLKFreq+0x102c>)
 8008d4a:	f8d2 30dc 	ldr.w	r3, [r2, #220]	; 0xdc
 8008d4e:	f403 03e0 	and.w	r3, r3, #7340032	; 0x700000
        switch (srcclk)
 8008d52:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d56:	f000 8199 	beq.w	800908c <HAL_RCCEx_GetPeriphCLKFreq+0x1340>
 8008d5a:	d848      	bhi.n	8008dee <HAL_RCCEx_GetPeriphCLKFreq+0x10a2>
 8008d5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d60:	f43f ac08 	beq.w	8008574 <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8008d64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d68:	f43f ac40 	beq.w	80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a0>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f43f aa97 	beq.w	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8008d72:	2000      	movs	r0, #0
 8008d74:	f7ff b838 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008d78:	44020c00 	.word	0x44020c00
 8008d7c:	017d7840 	.word	0x017d7840
 8008d80:	00bb8000 	.word	0x00bb8000
 8008d84:	02dc6c00 	.word	0x02dc6c00
        srcclk = __HAL_RCC_GET_SPI5_SOURCE();
 8008d88:	4abb      	ldr	r2, [pc, #748]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008d8a:	f8d2 30e0 	ldr.w	r3, [r2, #224]	; 0xe0
        if (srcclk == RCC_SPI5CLKSOURCE_PCLK3)
 8008d8e:	f413 43e0 	ands.w	r3, r3, #28672	; 0x7000
 8008d92:	f43f aa85 	beq.w	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL2Q))
 8008d96:	6812      	ldr	r2, [r2, #0]
 8008d98:	0111      	lsls	r1, r2, #4
 8008d9a:	d503      	bpl.n	8008da4 <HAL_RCCEx_GetPeriphCLKFreq+0x1058>
 8008d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008da0:	f43f ae02 	beq.w	80089a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY)) && (srcclk == RCC_SPI5CLKSOURCE_PLL3Q))
 8008da4:	4ab4      	ldr	r2, [pc, #720]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008da6:	6812      	ldr	r2, [r2, #0]
 8008da8:	0092      	lsls	r2, r2, #2
 8008daa:	d503      	bpl.n	8008db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1068>
 8008dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008db0:	f43f ae00 	beq.w	80089b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc68>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSI))
 8008db4:	4ab0      	ldr	r2, [pc, #704]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008db6:	6811      	ldr	r1, [r2, #0]
 8008db8:	0788      	lsls	r0, r1, #30
 8008dba:	d503      	bpl.n	8008dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1078>
 8008dbc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008dc0:	f000 82be 	beq.w	8009340 <HAL_RCCEx_GetPeriphCLKFreq+0x15f4>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk == RCC_SPI5CLKSOURCE_CSI))
 8008dc4:	4aac      	ldr	r2, [pc, #688]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	0591      	lsls	r1, r2, #22
 8008dca:	d503      	bpl.n	8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1088>
 8008dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dd0:	f000 8317 	beq.w	8009402 <HAL_RCCEx_GetPeriphCLKFreq+0x16b6>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_SPI5CLKSOURCE_HSE))
 8008dd4:	4aa8      	ldr	r2, [pc, #672]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008dd6:	6810      	ldr	r0, [r2, #0]
 8008dd8:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008ddc:	f43f a804 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8008de0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008de4:	48a5      	ldr	r0, [pc, #660]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8008de6:	bf18      	it	ne
 8008de8:	2000      	movne	r0, #0
 8008dea:	f7fe bffd 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008dee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008df2:	f000 8154 	beq.w	800909e <HAL_RCCEx_GetPeriphCLKFreq+0x1352>
 8008df6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8008dfa:	bf18      	it	ne
 8008dfc:	2000      	movne	r0, #0
 8008dfe:	f47e aff3 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e02:	4a9d      	ldr	r2, [pc, #628]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008e04:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e08:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008e0a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e0e:	0789      	lsls	r1, r1, #30
 8008e10:	f140 81ef 	bpl.w	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	f040 81ec 	bne.w	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a6>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008e1a:	6813      	ldr	r3, [r2, #0]
 8008e1c:	4897      	ldr	r0, [pc, #604]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8008e1e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008e22:	40d8      	lsrs	r0, r3
 8008e24:	f7fe bfe0 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008e28:	4a93      	ldr	r2, [pc, #588]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008e2a:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
 8008e2e:	f003 0303 	and.w	r3, r3, #3
        switch (srcclk)
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	f000 80c0 	beq.w	8008fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x126c>
 8008e38:	2b03      	cmp	r3, #3
 8008e3a:	f000 80ae 	beq.w	8008f9a <HAL_RCCEx_GetPeriphCLKFreq+0x124e>
 8008e3e:	2b01      	cmp	r3, #1
 8008e40:	f43f ad67 	beq.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0xbc6>
}
 8008e44:	b005      	add	sp, #20
 8008e46:	f85d eb04 	ldr.w	lr, [sp], #4
            frequency = HAL_RCC_GetHCLKFreq();
 8008e4a:	f7fc b9b1 	b.w	80051b0 <HAL_RCC_GetHCLKFreq>
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008e4e:	4b8a      	ldr	r3, [pc, #552]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008e50:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008e54:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
        srcclk = __HAL_RCC_GET_DAC_LP_SOURCE();
 8008e58:	f000 0008 	and.w	r0, r0, #8
        if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSE))
 8008e5c:	0792      	lsls	r2, r2, #30
 8008e5e:	f140 8086 	bpl.w	8008f6e <HAL_RCCEx_GetPeriphCLKFreq+0x1222>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f000 80c9 	beq.w	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x12ae>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008e68:	4b83      	ldr	r3, [pc, #524]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008e6a:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
          frequency = LSI_VALUE;
 8008e6e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8008e72:	bf18      	it	ne
 8008e74:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8008e78:	f7fe bfb6 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008e7c:	4a7e      	ldr	r2, [pc, #504]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008e7e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	; 0xe4
        if (srcclk == RCC_I2C3CLKSOURCE_PCLK3)
 8008e82:	f413 1340 	ands.w	r3, r3, #3145728	; 0x300000
 8008e86:	f43f aa0b 	beq.w	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
        else if (srcclk ==  RCC_I2C3CLKSOURCE_PLL3R)
 8008e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e8e:	d068      	beq.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C3CLKSOURCE_HSI))
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	0792      	lsls	r2, r2, #30
 8008e94:	d503      	bpl.n	8008e9e <HAL_RCCEx_GetPeriphCLKFreq+0x1152>
 8008e96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e9a:	f000 825f 	beq.w	800935c <HAL_RCCEx_GetPeriphCLKFreq+0x1610>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C3CLKSOURCE_CSI))
 8008e9e:	4a76      	ldr	r2, [pc, #472]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008ea0:	6810      	ldr	r0, [r2, #0]
 8008ea2:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8008ea6:	f43e af9f 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8008eaa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008eae:	4874      	ldr	r0, [pc, #464]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>)
 8008eb0:	bf18      	it	ne
 8008eb2:	2000      	movne	r0, #0
 8008eb4:	f7fe bf98 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008eb8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8008ebc:	d061      	beq.n	8008f82 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
 8008ebe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ec2:	f040 82ef 	bne.w	80094a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1758>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ec6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008eca:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ecc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ed0:	0789      	lsls	r1, r1, #30
 8008ed2:	f140 813a 	bpl.w	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f040 8137 	bne.w	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x13fe>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008edc:	6813      	ldr	r3, [r2, #0]
 8008ede:	4867      	ldr	r0, [pc, #412]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8008ee0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008ee4:	40d8      	lsrs	r0, r3
 8008ee6:	f7fe bf7f 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8008eea:	4b63      	ldr	r3, [pc, #396]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008eec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
        if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008ef0:	f413 3340 	ands.w	r3, r3, #196608	; 0x30000
 8008ef4:	f43f aa69 	beq.w	80083ca <HAL_RCCEx_GetPeriphCLKFreq+0x67e>
        else if (srcclk ==  RCC_I2C1CLKSOURCE_PLL3R)
 8008ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008efc:	d031      	beq.n	8008f62 <HAL_RCCEx_GetPeriphCLKFreq+0x1216>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008efe:	4a5e      	ldr	r2, [pc, #376]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008f00:	6811      	ldr	r1, [r2, #0]
 8008f02:	0788      	lsls	r0, r1, #30
 8008f04:	d503      	bpl.n	8008f0e <HAL_RCCEx_GetPeriphCLKFreq+0x11c2>
 8008f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f0a:	f000 822f 	beq.w	800936c <HAL_RCCEx_GetPeriphCLKFreq+0x1620>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (srcclk ==  RCC_I2C1CLKSOURCE_CSI))
 8008f0e:	4a5a      	ldr	r2, [pc, #360]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008f10:	6810      	ldr	r0, [r2, #0]
 8008f12:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8008f16:	f43e af67 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8008f1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008f1e:	4858      	ldr	r0, [pc, #352]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>)
 8008f20:	bf18      	it	ne
 8008f22:	2000      	movne	r0, #0
 8008f24:	f7fe bf60 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008f28:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f2c:	f000 8099 	beq.w	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x1316>
 8008f30:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008f34:	bf18      	it	ne
 8008f36:	2000      	movne	r0, #0
 8008f38:	f47e af56 	bne.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f3c:	4a4e      	ldr	r2, [pc, #312]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008f3e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f42:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f48:	0789      	lsls	r1, r1, #30
 8008f4a:	f140 816d 	bpl.w	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f040 816a 	bne.w	8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x14dc>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008f54:	6813      	ldr	r3, [r2, #0]
 8008f56:	4849      	ldr	r0, [pc, #292]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8008f58:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008f5c:	40d8      	lsrs	r0, r3
 8008f5e:	f7fe bf43 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f62:	a801      	add	r0, sp, #4
 8008f64:	f7fe fe34 	bl	8007bd0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8008f68:	9803      	ldr	r0, [sp, #12]
 8008f6a:	f7fe bf3d 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DACLPCLKSOURCE_LSI))
 8008f6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008f72:	011b      	lsls	r3, r3, #4
 8008f74:	d526      	bpl.n	8008fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x1278>
          frequency = LSI_VALUE;
 8008f76:	2800      	cmp	r0, #0
 8008f78:	bf18      	it	ne
 8008f7a:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8008f7e:	f7fe bf33 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            frequency = EXTERNAL_CLOCK_VALUE;
 8008f82:	4840      	ldr	r0, [pc, #256]	; (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 8008f84:	f7fe bf30 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008f88:	483e      	ldr	r0, [pc, #248]	; (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 8008f8a:	f7fe bf2d 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008f8e:	483d      	ldr	r0, [pc, #244]	; (8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x1338>)
 8008f90:	f7fe bf2a 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008f94:	2000      	movs	r0, #0
 8008f96:	f7fe bf27 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008f9a:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008f9e:	6811      	ldr	r1, [r2, #0]
            ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008fa0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fa4:	0789      	lsls	r1, r1, #30
 8008fa6:	d510      	bpl.n	8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8008fa8:	b97b      	cbnz	r3, 8008fca <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
              frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8008faa:	6813      	ldr	r3, [r2, #0]
 8008fac:	4833      	ldr	r0, [pc, #204]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8008fae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8008fb2:	40d8      	lsrs	r0, r3
 8008fb4:	f7fe bf18 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fb8:	a801      	add	r0, sp, #4
 8008fba:	f7fe fd4b 	bl	8007a54 <HAL_RCCEx_GetPLL2ClockFreq>
            frequency = pll2_clocks.PLL2_R_Frequency;
 8008fbe:	9803      	ldr	r0, [sp, #12]
            break;
 8008fc0:	f7fe bf12 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = 0U;
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f7fe bf0f 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fca:	4a2b      	ldr	r2, [pc, #172]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008fcc:	6812      	ldr	r2, [r2, #0]
 8008fce:	0592      	lsls	r2, r2, #22
 8008fd0:	d503      	bpl.n	8008fda <HAL_RCCEx_GetPeriphCLKFreq+0x128e>
 8008fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd6:	f000 8241 	beq.w	800945c <HAL_RCCEx_GetPeriphCLKFreq+0x1710>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fda:	4a27      	ldr	r2, [pc, #156]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8008fdc:	6810      	ldr	r0, [r2, #0]
 8008fde:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008fe2:	f43e af01 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8008fe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fea:	4824      	ldr	r0, [pc, #144]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8008fec:	bf18      	it	ne
 8008fee:	2000      	movne	r0, #0
 8008ff0:	f7fe befa 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8008ff4:	4821      	ldr	r0, [pc, #132]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x1330>)
 8008ff6:	f7fe bef7 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      frequency = LSE_VALUE;
 8008ffa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008ffe:	f7fe bef3 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSI48_VALUE;
 8009002:	4821      	ldr	r0, [pc, #132]	; (8009088 <HAL_RCCEx_GetPeriphCLKFreq+0x133c>)
 8009004:	f7fe bef0 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8009008:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 800900c:	f010 0002 	ands.w	r0, r0, #2
 8009010:	bf18      	it	ne
 8009012:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8009016:	f7fe bee7 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800901a:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 800901e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009022:	bf18      	it	ne
 8009024:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8009028:	f7fe bede 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800902c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 8009030:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009034:	bf18      	it	ne
 8009036:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800903a:	f7fe bed5 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800903e:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
          frequency = LSI_VALUE;
 8009042:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009046:	bf18      	it	ne
 8009048:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800904c:	f7fe becc 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009050:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 8009054:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009058:	bf18      	it	ne
 800905a:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 800905e:	f7fe bec3 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 8009062:	4b05      	ldr	r3, [pc, #20]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x132c>)
 8009064:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
          frequency = LSI_VALUE;
 8009068:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800906c:	bf18      	it	ne
 800906e:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 8009072:	f7fe beb9 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009076:	bf00      	nop
 8009078:	44020c00 	.word	0x44020c00
 800907c:	017d7840 	.word	0x017d7840
 8009080:	003d0900 	.word	0x003d0900
 8009084:	00bb8000 	.word	0x00bb8000
 8009088:	02dc6c00 	.word	0x02dc6c00
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800908c:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 8009090:	f010 0002 	ands.w	r0, r0, #2
 8009094:	bf18      	it	ne
 8009096:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 800909a:	f7fe bea5 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY))
 800909e:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
          frequency = LSI_VALUE;
 80090a2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80090a6:	bf18      	it	ne
 80090a8:	f44f 40fa 	movne.w	r0, #32000	; 0x7d00
 80090ac:	f7fe be9c 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80090b0:	f8d2 00f0 	ldr.w	r0, [r2, #240]	; 0xf0
      frequency = LSE_VALUE;
 80090b4:	f010 0002 	ands.w	r0, r0, #2
 80090b8:	bf18      	it	ne
 80090ba:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 80090be:	f7fe be93 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
}
 80090c2:	b005      	add	sp, #20
 80090c4:	f85d eb04 	ldr.w	lr, [sp], #4
          frequency = HAL_RCC_GetSysClockFreq();
 80090c8:	f7fb bf24 	b.w	8004f14 <HAL_RCC_GetSysClockFreq>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090cc:	4aad      	ldr	r2, [pc, #692]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80090ce:	6812      	ldr	r2, [r2, #0]
 80090d0:	0590      	lsls	r0, r2, #22
 80090d2:	d503      	bpl.n	80090dc <HAL_RCCEx_GetPeriphCLKFreq+0x1390>
 80090d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d8:	f000 81d2 	beq.w	8009480 <HAL_RCCEx_GetPeriphCLKFreq+0x1734>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80090dc:	4aa9      	ldr	r2, [pc, #676]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80090de:	6810      	ldr	r0, [r2, #0]
 80090e0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80090e4:	f43e ae80 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80090e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ec:	48a6      	ldr	r0, [pc, #664]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80090ee:	bf18      	it	ne
 80090f0:	2000      	movne	r0, #0
 80090f2:	f7fe be79 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80090f6:	4aa3      	ldr	r2, [pc, #652]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80090f8:	6812      	ldr	r2, [r2, #0]
 80090fa:	0590      	lsls	r0, r2, #22
 80090fc:	d503      	bpl.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x13ba>
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009102:	f000 81c9 	beq.w	8009498 <HAL_RCCEx_GetPeriphCLKFreq+0x174c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009106:	4a9f      	ldr	r2, [pc, #636]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009108:	6810      	ldr	r0, [r2, #0]
 800910a:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800910e:	f43e ae6b 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009116:	489c      	ldr	r0, [pc, #624]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009118:	bf18      	it	ne
 800911a:	2000      	movne	r0, #0
 800911c:	f7fe be64 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009120:	4a98      	ldr	r2, [pc, #608]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	0591      	lsls	r1, r2, #22
 8009126:	d503      	bpl.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x13e4>
 8009128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912c:	f000 81b1 	beq.w	8009492 <HAL_RCCEx_GetPeriphCLKFreq+0x1746>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009130:	4a94      	ldr	r2, [pc, #592]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009132:	6810      	ldr	r0, [r2, #0]
 8009134:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009138:	f43e ae56 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800913c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009140:	4891      	ldr	r0, [pc, #580]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009142:	bf18      	it	ne
 8009144:	2000      	movne	r0, #0
 8009146:	f7fe be4f 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800914a:	4a8e      	ldr	r2, [pc, #568]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800914c:	6812      	ldr	r2, [r2, #0]
 800914e:	0592      	lsls	r2, r2, #22
 8009150:	d503      	bpl.n	800915a <HAL_RCCEx_GetPeriphCLKFreq+0x140e>
 8009152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009156:	f000 8187 	beq.w	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x171c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800915a:	4a8a      	ldr	r2, [pc, #552]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800915c:	6810      	ldr	r0, [r2, #0]
 800915e:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009162:	f43e ae41 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009166:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800916a:	4887      	ldr	r0, [pc, #540]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800916c:	bf18      	it	ne
 800916e:	2000      	movne	r0, #0
 8009170:	f7fe be3a 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009174:	4a83      	ldr	r2, [pc, #524]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009176:	6812      	ldr	r2, [r2, #0]
 8009178:	0592      	lsls	r2, r2, #22
 800917a:	d503      	bpl.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x1438>
 800917c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009180:	f000 8184 	beq.w	800948c <HAL_RCCEx_GetPeriphCLKFreq+0x1740>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009184:	4a7f      	ldr	r2, [pc, #508]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009186:	6810      	ldr	r0, [r2, #0]
 8009188:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800918c:	f43e ae2c 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009194:	487c      	ldr	r0, [pc, #496]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009196:	bf18      	it	ne
 8009198:	2000      	movne	r0, #0
 800919a:	f7fe be25 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800919e:	4a79      	ldr	r2, [pc, #484]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80091a0:	6812      	ldr	r2, [r2, #0]
 80091a2:	0590      	lsls	r0, r2, #22
 80091a4:	d503      	bpl.n	80091ae <HAL_RCCEx_GetPeriphCLKFreq+0x1462>
 80091a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091aa:	f000 816c 	beq.w	8009486 <HAL_RCCEx_GetPeriphCLKFreq+0x173a>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091ae:	4a75      	ldr	r2, [pc, #468]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80091b0:	6810      	ldr	r0, [r2, #0]
 80091b2:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80091b6:	f43e ae17 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80091ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091be:	4872      	ldr	r0, [pc, #456]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80091c0:	bf18      	it	ne
 80091c2:	2000      	movne	r0, #0
 80091c4:	f7fe be10 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091c8:	4a6e      	ldr	r2, [pc, #440]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80091ca:	6812      	ldr	r2, [r2, #0]
 80091cc:	0592      	lsls	r2, r2, #22
 80091ce:	d503      	bpl.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x148c>
 80091d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091d4:	f000 8151 	beq.w	800947a <HAL_RCCEx_GetPeriphCLKFreq+0x172e>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091d8:	4a6a      	ldr	r2, [pc, #424]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80091da:	6810      	ldr	r0, [r2, #0]
 80091dc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80091e0:	f43e ae02 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 80091e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e8:	4867      	ldr	r0, [pc, #412]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80091ea:	bf18      	it	ne
 80091ec:	2000      	movne	r0, #0
 80091ee:	f7fe bdfb 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80091f2:	4a64      	ldr	r2, [pc, #400]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 80091f4:	6812      	ldr	r2, [r2, #0]
 80091f6:	0590      	lsls	r0, r2, #22
 80091f8:	d503      	bpl.n	8009202 <HAL_RCCEx_GetPeriphCLKFreq+0x14b6>
 80091fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091fe:	f000 8130 	beq.w	8009462 <HAL_RCCEx_GetPeriphCLKFreq+0x1716>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009202:	4a60      	ldr	r2, [pc, #384]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009204:	6810      	ldr	r0, [r2, #0]
 8009206:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800920a:	f43e aded 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800920e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009212:	485d      	ldr	r0, [pc, #372]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009214:	bf18      	it	ne
 8009216:	2000      	movne	r0, #0
 8009218:	f7fe bde6 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800921c:	a801      	add	r0, sp, #4
 800921e:	f7fe fc19 	bl	8007a54 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009222:	9803      	ldr	r0, [sp, #12]
 8009224:	f7fe bde0 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009228:	4a56      	ldr	r2, [pc, #344]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800922a:	6812      	ldr	r2, [r2, #0]
 800922c:	0590      	lsls	r0, r2, #22
 800922e:	d503      	bpl.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x14ec>
 8009230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009234:	f000 8133 	beq.w	800949e <HAL_RCCEx_GetPeriphCLKFreq+0x1752>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009238:	4a52      	ldr	r2, [pc, #328]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800923a:	6810      	ldr	r0, [r2, #0]
 800923c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009240:	f43e add2 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009244:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009248:	484f      	ldr	r0, [pc, #316]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800924a:	bf18      	it	ne
 800924c:	2000      	movne	r0, #0
 800924e:	f7fe bdcb 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009252:	4a4c      	ldr	r2, [pc, #304]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009254:	6812      	ldr	r2, [r2, #0]
 8009256:	0592      	lsls	r2, r2, #22
 8009258:	d503      	bpl.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x1516>
 800925a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800925e:	f000 8106 	beq.w	800946e <HAL_RCCEx_GetPeriphCLKFreq+0x1722>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009262:	4a48      	ldr	r2, [pc, #288]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 8009264:	6810      	ldr	r0, [r2, #0]
 8009266:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800926a:	f43e adbd 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 800926e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009272:	4845      	ldr	r0, [pc, #276]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009274:	bf18      	it	ne
 8009276:	2000      	movne	r0, #0
 8009278:	f7fe bdb6 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800927c:	4a41      	ldr	r2, [pc, #260]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800927e:	6812      	ldr	r2, [r2, #0]
 8009280:	0590      	lsls	r0, r2, #22
 8009282:	d503      	bpl.n	800928c <HAL_RCCEx_GetPeriphCLKFreq+0x1540>
 8009284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009288:	f000 80f4 	beq.w	8009474 <HAL_RCCEx_GetPeriphCLKFreq+0x1728>
            else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800928c:	4a3d      	ldr	r2, [pc, #244]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800928e:	6810      	ldr	r0, [r2, #0]
 8009290:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009294:	f43e ada8 	beq.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = HSE_VALUE;
 8009298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800929c:	483a      	ldr	r0, [pc, #232]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800929e:	bf18      	it	ne
 80092a0:	2000      	movne	r0, #0
 80092a2:	f7fe bda1 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092a6:	6813      	ldr	r3, [r2, #0]
 80092a8:	4837      	ldr	r0, [pc, #220]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80092aa:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092ae:	40d8      	lsrs	r0, r3
 80092b0:	f7fe bd9a 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092b4:	6813      	ldr	r3, [r2, #0]
 80092b6:	4834      	ldr	r0, [pc, #208]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80092b8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092bc:	40d8      	lsrs	r0, r3
 80092be:	f7fe bd93 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	4830      	ldr	r0, [pc, #192]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80092c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092ca:	40d8      	lsrs	r0, r3
 80092cc:	f7fe bd8c 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092d0:	6813      	ldr	r3, [r2, #0]
 80092d2:	482d      	ldr	r0, [pc, #180]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80092d4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092d8:	40d8      	lsrs	r0, r3
 80092da:	f7fe bd85 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092de:	6813      	ldr	r3, [r2, #0]
 80092e0:	4829      	ldr	r0, [pc, #164]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80092e2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092e6:	40d8      	lsrs	r0, r3
 80092e8:	f7fe bd7e 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092ec:	6813      	ldr	r3, [r2, #0]
 80092ee:	4826      	ldr	r0, [pc, #152]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80092f0:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092f4:	40d8      	lsrs	r0, r3
 80092f6:	f7fe bd77 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80092fa:	6813      	ldr	r3, [r2, #0]
 80092fc:	4822      	ldr	r0, [pc, #136]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 80092fe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009302:	40d8      	lsrs	r0, r3
 8009304:	f7fe bd70 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009308:	6813      	ldr	r3, [r2, #0]
 800930a:	481f      	ldr	r0, [pc, #124]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800930c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009310:	40d8      	lsrs	r0, r3
 8009312:	f7fe bd69 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009316:	6813      	ldr	r3, [r2, #0]
 8009318:	481b      	ldr	r0, [pc, #108]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 800931a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800931e:	40d8      	lsrs	r0, r3
 8009320:	f7fe bd62 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009324:	6813      	ldr	r3, [r2, #0]
 8009326:	4818      	ldr	r0, [pc, #96]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009328:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800932c:	40d8      	lsrs	r0, r3
 800932e:	f7fe bd5b 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009332:	6813      	ldr	r3, [r2, #0]
 8009334:	4814      	ldr	r0, [pc, #80]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009336:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800933a:	40d8      	lsrs	r0, r3
 800933c:	f7fe bd54 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 8009340:	6813      	ldr	r3, [r2, #0]
 8009342:	4811      	ldr	r0, [pc, #68]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009344:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009348:	40d8      	lsrs	r0, r3
 800934a:	f7fe bd4d 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800934e:	6813      	ldr	r3, [r2, #0]
 8009350:	480d      	ldr	r0, [pc, #52]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009352:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009356:	40d8      	lsrs	r0, r3
 8009358:	f7fe bd46 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800935c:	4b09      	ldr	r3, [pc, #36]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x1638>)
 800935e:	480a      	ldr	r0, [pc, #40]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009366:	40d8      	lsrs	r0, r3
 8009368:	f7fe bd3e 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800936c:	6813      	ldr	r3, [r2, #0]
 800936e:	4806      	ldr	r0, [pc, #24]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x163c>)
 8009370:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009374:	40d8      	lsrs	r0, r3
 8009376:	f7fe bd37 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSI_VALUE;
 800937a:	f44f 40fa 	mov.w	r0, #32000	; 0x7d00
 800937e:	f7fe bd33 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009382:	bf00      	nop
 8009384:	44020c00 	.word	0x44020c00
 8009388:	017d7840 	.word	0x017d7840
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800938c:	6813      	ldr	r3, [r2, #0]
 800938e:	484a      	ldr	r0, [pc, #296]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 8009390:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009394:	40d8      	lsrs	r0, r3
 8009396:	f7fe bd27 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 800939a:	6813      	ldr	r3, [r2, #0]
 800939c:	4846      	ldr	r0, [pc, #280]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800939e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093a2:	40d8      	lsrs	r0, r3
 80093a4:	f7fe bd20 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093a8:	6813      	ldr	r3, [r2, #0]
 80093aa:	4843      	ldr	r0, [pc, #268]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80093ac:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093b0:	40d8      	lsrs	r0, r3
 80093b2:	f7fe bd19 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093b6:	6813      	ldr	r3, [r2, #0]
 80093b8:	483f      	ldr	r0, [pc, #252]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80093ba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093be:	40d8      	lsrs	r0, r3
 80093c0:	f7fe bd12 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093c4:	6813      	ldr	r3, [r2, #0]
 80093c6:	483c      	ldr	r0, [pc, #240]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80093c8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093cc:	40d8      	lsrs	r0, r3
 80093ce:	f7fe bd0b 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = LSE_VALUE;
 80093d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80093d6:	f7fe bd07 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093da:	6813      	ldr	r3, [r2, #0]
 80093dc:	4836      	ldr	r0, [pc, #216]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80093de:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093e2:	40d8      	lsrs	r0, r3
 80093e4:	f7fe bd00 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> RCC_CR_HSIDIV_Pos));
 80093e8:	6813      	ldr	r3, [r2, #0]
 80093ea:	4833      	ldr	r0, [pc, #204]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 80093ec:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80093f0:	40d8      	lsrs	r0, r3
 80093f2:	f7fe bcf9 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 80093f6:	4831      	ldr	r0, [pc, #196]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 80093f8:	f7fe bcf6 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80093fc:	482f      	ldr	r0, [pc, #188]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 80093fe:	f7fe bcf3 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009402:	482e      	ldr	r0, [pc, #184]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009404:	f7fe bcf0 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009408:	482c      	ldr	r0, [pc, #176]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800940a:	f7fe bced 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800940e:	482b      	ldr	r0, [pc, #172]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009410:	f7fe bcea 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009414:	4829      	ldr	r0, [pc, #164]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009416:	f7fe bce7 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800941a:	4828      	ldr	r0, [pc, #160]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800941c:	f7fe bce4 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009420:	4826      	ldr	r0, [pc, #152]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009422:	f7fe bce1 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009426:	4825      	ldr	r0, [pc, #148]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009428:	f7fe bcde 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800942c:	4823      	ldr	r0, [pc, #140]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800942e:	f7fe bcdb 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009432:	4822      	ldr	r0, [pc, #136]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009434:	f7fe bcd8 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009438:	4820      	ldr	r0, [pc, #128]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800943a:	f7fe bcd5 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800943e:	481f      	ldr	r0, [pc, #124]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009440:	f7fe bcd2 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009444:	481d      	ldr	r0, [pc, #116]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009446:	f7fe bccf 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
          frequency = HSE_VALUE;
 800944a:	481b      	ldr	r0, [pc, #108]	; (80094b8 <HAL_RCCEx_GetPeriphCLKFreq+0x176c>)
 800944c:	f7fe bccc 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
              frequency = CSI_VALUE;
 8009450:	481a      	ldr	r0, [pc, #104]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009452:	f7fe bcc9 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009456:	4819      	ldr	r0, [pc, #100]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009458:	f7fe bcc6 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800945c:	4817      	ldr	r0, [pc, #92]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800945e:	f7fe bcc3 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009462:	4816      	ldr	r0, [pc, #88]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009464:	f7fe bcc0 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009468:	4814      	ldr	r0, [pc, #80]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800946a:	f7fe bcbd 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800946e:	4813      	ldr	r0, [pc, #76]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009470:	f7fe bcba 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009474:	4811      	ldr	r0, [pc, #68]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009476:	f7fe bcb7 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800947a:	4810      	ldr	r0, [pc, #64]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800947c:	f7fe bcb4 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009480:	480e      	ldr	r0, [pc, #56]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009482:	f7fe bcb1 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009486:	480d      	ldr	r0, [pc, #52]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009488:	f7fe bcae 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800948c:	480b      	ldr	r0, [pc, #44]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800948e:	f7fe bcab 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009492:	480a      	ldr	r0, [pc, #40]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 8009494:	f7fe bca8 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 8009498:	4808      	ldr	r0, [pc, #32]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 800949a:	f7fe bca5 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 800949e:	4807      	ldr	r0, [pc, #28]	; (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0x1770>)
 80094a0:	f7fe bca2 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80094a4:	2000      	movs	r0, #0
 80094a6:	f7fe bc9f 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80094aa:	2000      	movs	r0, #0
 80094ac:	f7fe bc9c 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80094b0:	2000      	movs	r0, #0
 80094b2:	f7fe bc99 	b.w	8007de8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
 80094b6:	bf00      	nop
 80094b8:	017d7840 	.word	0x017d7840
 80094bc:	003d0900 	.word	0x003d0900

080094c0 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 80094c0:	6803      	ldr	r3, [r0, #0]
 80094c2:	6959      	ldr	r1, [r3, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80094c4:	699a      	ldr	r2, [r3, #24]
 80094c6:	f042 0208 	orr.w	r2, r2, #8
 80094ca:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80094cc:	699a      	ldr	r2, [r3, #24]
 80094ce:	f042 0210 	orr.w	r2, r2, #16
 80094d2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094d4:	681a      	ldr	r2, [r3, #0]
 80094d6:	f022 0201 	bic.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80094dc:	691a      	ldr	r2, [r3, #16]
 80094de:	f422 725b 	bic.w	r2, r2, #876	; 0x36c
 80094e2:	f022 0203 	bic.w	r2, r2, #3
 80094e6:	611a      	str	r2, [r3, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80094e8:	689a      	ldr	r2, [r3, #8]
 80094ea:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80094ee:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80094f0:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 80094f4:	2a04      	cmp	r2, #4
 80094f6:	d001      	beq.n	80094fc <SPI_CloseTransfer+0x3c>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80094f8:	068a      	lsls	r2, r1, #26
 80094fa:	d431      	bmi.n	8009560 <SPI_CloseTransfer+0xa0>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80094fc:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
 8009500:	2a03      	cmp	r2, #3
 8009502:	d00f      	beq.n	8009524 <SPI_CloseTransfer+0x64>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009504:	064a      	lsls	r2, r1, #25
 8009506:	d509      	bpl.n	800951c <SPI_CloseTransfer+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009508:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800950c:	f042 0204 	orr.w	r2, r2, #4
 8009510:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800951a:	619a      	str	r2, [r3, #24]
    }

#if (USE_SPI_CRC != 0UL)
    /* Check if CRC error occurred */
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800951c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800951e:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 8009522:	d028      	beq.n	8009576 <SPI_CloseTransfer+0xb6>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009524:	058a      	lsls	r2, r1, #22
 8009526:	d509      	bpl.n	800953c <SPI_CloseTransfer+0x7c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009528:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800952c:	f042 0201 	orr.w	r2, r2, #1
 8009530:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009534:	699a      	ldr	r2, [r3, #24]
 8009536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800953a:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800953c:	05ca      	lsls	r2, r1, #23
 800953e:	d509      	bpl.n	8009554 <SPI_CloseTransfer+0x94>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009540:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009544:	f042 0208 	orr.w	r2, r2, #8
 8009548:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009552:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009554:	2300      	movs	r3, #0
 8009556:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 800955a:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
}
 800955e:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009560:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8009564:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009568:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800956c:	699a      	ldr	r2, [r3, #24]
 800956e:	f042 0220 	orr.w	r2, r2, #32
 8009572:	619a      	str	r2, [r3, #24]
 8009574:	e7c2      	b.n	80094fc <SPI_CloseTransfer+0x3c>
      if ((itflag & SPI_FLAG_CRCERR) != 0UL)
 8009576:	060a      	lsls	r2, r1, #24
 8009578:	d5d4      	bpl.n	8009524 <SPI_CloseTransfer+0x64>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800957a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800957e:	f042 0202 	orr.w	r2, r2, #2
 8009582:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
        __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800958c:	619a      	str	r2, [r3, #24]
 800958e:	e7c9      	b.n	8009524 <SPI_CloseTransfer+0x64>

08009590 <HAL_SPI_Init>:
  if (hspi == NULL)
 8009590:	2800      	cmp	r0, #0
 8009592:	f000 811e 	beq.w	80097d2 <HAL_SPI_Init+0x242>
{
 8009596:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800959a:	4a9b      	ldr	r2, [pc, #620]	; (8009808 <HAL_SPI_Init+0x278>)
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800959c:	6803      	ldr	r3, [r0, #0]
 800959e:	4604      	mov	r4, r0
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80095a0:	4293      	cmp	r3, r2
 80095a2:	f000 80a5 	beq.w	80096f0 <HAL_SPI_Init+0x160>
 80095a6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80095aa:	4293      	cmp	r3, r2
 80095ac:	f000 80a0 	beq.w	80096f0 <HAL_SPI_Init+0x160>
 80095b0:	4a96      	ldr	r2, [pc, #600]	; (800980c <HAL_SPI_Init+0x27c>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	f000 809c 	beq.w	80096f0 <HAL_SPI_Init+0x160>
 80095b8:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80095bc:	4293      	cmp	r3, r2
 80095be:	f000 8097 	beq.w	80096f0 <HAL_SPI_Init+0x160>
 80095c2:	4a93      	ldr	r2, [pc, #588]	; (8009810 <HAL_SPI_Init+0x280>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	f000 8093 	beq.w	80096f0 <HAL_SPI_Init+0x160>
 80095ca:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 80095ce:	4293      	cmp	r3, r2
 80095d0:	f000 808e 	beq.w	80096f0 <HAL_SPI_Init+0x160>
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80095d4:	68c2      	ldr	r2, [r0, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80095d6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80095d8:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80095dc:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 80095de:	08c9      	lsrs	r1, r1, #3

  return data_size * fifo_threashold;
 80095e0:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80095e4:	4d8b      	ldr	r5, [pc, #556]	; (8009814 <HAL_SPI_Init+0x284>)
 80095e6:	42ab      	cmp	r3, r5
 80095e8:	d010      	beq.n	800960c <HAL_SPI_Init+0x7c>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80095ea:	4d8b      	ldr	r5, [pc, #556]	; (8009818 <HAL_SPI_Init+0x288>)
 80095ec:	42ab      	cmp	r3, r5
 80095ee:	d00d      	beq.n	800960c <HAL_SPI_Init+0x7c>
 80095f0:	4d8a      	ldr	r5, [pc, #552]	; (800981c <HAL_SPI_Init+0x28c>)
 80095f2:	42ab      	cmp	r3, r5
 80095f4:	d00a      	beq.n	800960c <HAL_SPI_Init+0x7c>
 80095f6:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 80095fa:	42ab      	cmp	r3, r5
 80095fc:	d006      	beq.n	800960c <HAL_SPI_Init+0x7c>
 80095fe:	4d88      	ldr	r5, [pc, #544]	; (8009820 <HAL_SPI_Init+0x290>)
 8009600:	42ab      	cmp	r3, r5
 8009602:	d003      	beq.n	800960c <HAL_SPI_Init+0x7c>
 8009604:	f105 5580 	add.w	r5, r5, #268435456	; 0x10000000
 8009608:	42ab      	cmp	r3, r5
 800960a:	d101      	bne.n	8009610 <HAL_SPI_Init+0x80>
 800960c:	2910      	cmp	r1, #16
 800960e:	d87c      	bhi.n	800970a <HAL_SPI_Init+0x17a>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009610:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009612:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 8009616:	f000 810d 	beq.w	8009834 <HAL_SPI_Init+0x2a4>
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
 800961a:	0417      	lsls	r7, r2, #16
  if (hspi->State == HAL_SPI_STATE_RESET)
 800961c:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
 8009620:	f001 05ff 	and.w	r5, r1, #255	; 0xff
 8009624:	2900      	cmp	r1, #0
 8009626:	f000 80e5 	beq.w	80097f4 <HAL_SPI_Init+0x264>
  hspi->State = HAL_SPI_STATE_BUSY;
 800962a:	2102      	movs	r1, #2
 800962c:	f884 1089 	strb.w	r1, [r4, #137]	; 0x89
  __HAL_SPI_DISABLE(hspi);
 8009630:	6819      	ldr	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009632:	f8d4 8018 	ldr.w	r8, [r4, #24]
  __HAL_SPI_DISABLE(hspi);
 8009636:	f021 0101 	bic.w	r1, r1, #1
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800963a:	f1b8 6f80 	cmp.w	r8, #67108864	; 0x4000000
 800963e:	6865      	ldr	r5, [r4, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009640:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
  __HAL_SPI_DISABLE(hspi);
 8009644:	6019      	str	r1, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009646:	f000 80c6 	beq.w	80097d6 <HAL_SPI_Init+0x246>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800964a:	f415 0e80 	ands.w	lr, r5, #4194304	; 0x400000
 800964e:	f000 80cc 	beq.w	80097ea <HAL_SPI_Init+0x25a>
 8009652:	2a06      	cmp	r2, #6
 8009654:	f240 80c9 	bls.w	80097ea <HAL_SPI_Init+0x25a>
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009658:	6819      	ldr	r1, [r3, #0]
 800965a:	f421 7980 	bic.w	r9, r1, #256	; 0x100
 800965e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009660:	ea49 0101 	orr.w	r1, r9, r1
 8009664:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009666:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009668:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800966c:	ea48 0801 	orr.w	r8, r8, r1
 8009670:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009672:	ea48 0801 	orr.w	r8, r8, r1
 8009676:	6921      	ldr	r1, [r4, #16]
 8009678:	ea48 0801 	orr.w	r8, r8, r1
 800967c:	6961      	ldr	r1, [r4, #20]
 800967e:	ea48 0801 	orr.w	r8, r8, r1
 8009682:	6a21      	ldr	r1, [r4, #32]
 8009684:	ea48 0801 	orr.w	r8, r8, r1
 8009688:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800968a:	ea48 0801 	orr.w	r8, r8, r1
 800968e:	68a1      	ldr	r1, [r4, #8]
 8009690:	ea48 0801 	orr.w	r8, r8, r1
 8009694:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009696:	ea48 0801 	orr.w	r8, r8, r1
 800969a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800969c:	ea48 0801 	orr.w	r8, r8, r1
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80096a0:	69e1      	ldr	r1, [r4, #28]
 80096a2:	ea41 0100 	orr.w	r1, r1, r0
 80096a6:	ea41 0107 	orr.w	r1, r1, r7
 80096aa:	ea42 0201 	orr.w	r2, r2, r1
 80096ae:	ea42 0206 	orr.w	r2, r2, r6
 80096b2:	609a      	str	r2, [r3, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80096b4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80096b6:	ea48 0102 	orr.w	r1, r8, r2
 80096ba:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80096bc:	ea42 0201 	orr.w	r2, r2, r1
 80096c0:	ea42 0c0c 	orr.w	ip, r2, ip
 80096c4:	ea4c 0205 	orr.w	r2, ip, r5
 80096c8:	60da      	str	r2, [r3, #12]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096ca:	d021      	beq.n	8009710 <HAL_SPI_Init+0x180>
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80096cc:	2d00      	cmp	r5, #0
 80096ce:	d168      	bne.n	80097a2 <HAL_SPI_Init+0x212>
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG);
 80096d0:	689a      	ldr	r2, [r3, #8]
 80096d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096d6:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80096d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096da:	f022 0201 	bic.w	r2, r2, #1
 80096de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096e0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80096e2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80096e4:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80096e8:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
}
 80096ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80096f0:	68e2      	ldr	r2, [r4, #12]
 80096f2:	2a0f      	cmp	r2, #15
 80096f4:	d809      	bhi.n	800970a <HAL_SPI_Init+0x17a>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 80096f8:	f102 0108 	add.w	r1, r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096fc:	0945      	lsrs	r5, r0, #5
  data_size = (data_size + 7UL) / 8UL;
 80096fe:	08c9      	lsrs	r1, r1, #3
  return data_size * fifo_threashold;
 8009700:	fb05 1101 	mla	r1, r5, r1, r1
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009704:	2908      	cmp	r1, #8
 8009706:	f240 808d 	bls.w	8009824 <HAL_SPI_Init+0x294>
    return HAL_ERROR;
 800970a:	2001      	movs	r0, #1
}
 800970c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (hspi->Init.TxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8009710:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8009712:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	bf0c      	ite	eq
 8009718:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_TCRCINI);
 800971c:	f422 4200 	bicne.w	r2, r2, #32768	; 0x8000
 8009720:	601a      	str	r2, [r3, #0]
    if (hspi->Init.RxCRCInitializationPattern == SPI_CRC_INITIALIZATION_ALL_ONE_PATTERN)
 8009722:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009724:	2a01      	cmp	r2, #1
      SET_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	bf0c      	ite	eq
 800972a:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_RCRCINI);
 800972e:	f422 4280 	bicne.w	r2, r2, #16384	; 0x4000
 8009732:	601a      	str	r2, [r3, #0]
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 8009734:	4a34      	ldr	r2, [pc, #208]	; (8009808 <HAL_SPI_Init+0x278>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d041      	beq.n	80097be <HAL_SPI_Init+0x22e>
 800973a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800973e:	4293      	cmp	r3, r2
 8009740:	d03d      	beq.n	80097be <HAL_SPI_Init+0x22e>
 8009742:	4a32      	ldr	r2, [pc, #200]	; (800980c <HAL_SPI_Init+0x27c>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d03a      	beq.n	80097be <HAL_SPI_Init+0x22e>
 8009748:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800974c:	4293      	cmp	r3, r2
 800974e:	d036      	beq.n	80097be <HAL_SPI_Init+0x22e>
 8009750:	4a2f      	ldr	r2, [pc, #188]	; (8009810 <HAL_SPI_Init+0x280>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d033      	beq.n	80097be <HAL_SPI_Init+0x22e>
 8009756:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 800975a:	4293      	cmp	r3, r2
 800975c:	d02f      	beq.n	80097be <HAL_SPI_Init+0x22e>
 800975e:	4a2d      	ldr	r2, [pc, #180]	; (8009814 <HAL_SPI_Init+0x284>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d00e      	beq.n	8009782 <HAL_SPI_Init+0x1f2>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 8009764:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009768:	4293      	cmp	r3, r2
 800976a:	d00a      	beq.n	8009782 <HAL_SPI_Init+0x1f2>
 800976c:	4a2b      	ldr	r2, [pc, #172]	; (800981c <HAL_SPI_Init+0x28c>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d007      	beq.n	8009782 <HAL_SPI_Init+0x1f2>
 8009772:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009776:	4293      	cmp	r3, r2
 8009778:	d003      	beq.n	8009782 <HAL_SPI_Init+0x1f2>
 800977a:	4a29      	ldr	r2, [pc, #164]	; (8009820 <HAL_SPI_Init+0x290>)
 800977c:	4293      	cmp	r3, r2
 800977e:	f040 8086 	bne.w	800988e <HAL_SPI_Init+0x2fe>
 8009782:	f5b7 1ff8 	cmp.w	r7, #2031616	; 0x1f0000
 8009786:	d01d      	beq.n	80097c4 <HAL_SPI_Init+0x234>
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8009788:	2201      	movs	r2, #1
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800978a:	6819      	ldr	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 800978c:	0c3f      	lsrs	r7, r7, #16
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 800978e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009792:	6019      	str	r1, [r3, #0]
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8009794:	3701      	adds	r7, #1
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 8009796:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      crc_poly_msb_mask = (0x1UL << ((crc_length >> SPI_CFG1_CRCSIZE_Pos) + 0x1U));
 8009798:	40ba      	lsls	r2, r7
      WRITE_REG(hspi->Instance->CRCPOLY, (hspi->Init.CRCPolynomial) | crc_poly_msb_mask);
 800979a:	430a      	orrs	r2, r1
 800979c:	641a      	str	r2, [r3, #64]	; 0x40
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800979e:	2d00      	cmp	r5, #0
 80097a0:	d096      	beq.n	80096d0 <HAL_SPI_Init+0x140>
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80097a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097a4:	f022 0201 	bic.w	r2, r2, #1
 80097a8:	651a      	str	r2, [r3, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80097aa:	f1be 0f00 	cmp.w	lr, #0
 80097ae:	d097      	beq.n	80096e0 <HAL_SPI_Init+0x150>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80097b0:	68da      	ldr	r2, [r3, #12]
 80097b2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80097b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80097b8:	430a      	orrs	r2, r1
 80097ba:	60da      	str	r2, [r3, #12]
 80097bc:	e790      	b.n	80096e0 <HAL_SPI_Init+0x150>
    if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_16BIT)) ||
 80097be:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 80097c2:	d1e1      	bne.n	8009788 <HAL_SPI_Init+0x1f8>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRC33_17);
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80097ca:	601a      	str	r2, [r3, #0]
      WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
 80097cc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80097ce:	641a      	str	r2, [r3, #64]	; 0x40
 80097d0:	e77c      	b.n	80096cc <HAL_SPI_Init+0x13c>
    return HAL_ERROR;
 80097d2:	2001      	movs	r0, #1
}
 80097d4:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80097d6:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 80097da:	d04e      	beq.n	800987a <HAL_SPI_Init+0x2ea>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80097dc:	2d00      	cmp	r5, #0
 80097de:	f47f af34 	bne.w	800964a <HAL_SPI_Init+0xba>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80097e2:	f1bc 5f80 	cmp.w	ip, #268435456	; 0x10000000
 80097e6:	d04d      	beq.n	8009884 <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80097e8:	46ae      	mov	lr, r5
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80097ea:	6819      	ldr	r1, [r3, #0]
 80097ec:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80097f0:	6019      	str	r1, [r3, #0]
 80097f2:	e738      	b.n	8009666 <HAL_SPI_Init+0xd6>
    HAL_SPI_MspInit(hspi);
 80097f4:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80097f6:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    HAL_SPI_MspInit(hspi);
 80097fa:	f7f7 fce9 	bl	80011d0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80097fe:	6823      	ldr	r3, [r4, #0]
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009800:	68e2      	ldr	r2, [r4, #12]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009804:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8009806:	e710      	b.n	800962a <HAL_SPI_Init+0x9a>
 8009808:	40014c00 	.word	0x40014c00
 800980c:	44002000 	.word	0x44002000
 8009810:	40015000 	.word	0x40015000
 8009814:	40013000 	.word	0x40013000
 8009818:	50013000 	.word	0x50013000
 800981c:	40003800 	.word	0x40003800
 8009820:	40003c00 	.word	0x40003c00
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009824:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009826:	f5b6 0f80 	cmp.w	r6, #4194304	; 0x400000
 800982a:	f47f aef6 	bne.w	800961a <HAL_SPI_Init+0x8a>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 800982e:	491b      	ldr	r1, [pc, #108]	; (800989c <HAL_SPI_Init+0x30c>)
 8009830:	428b      	cmp	r3, r1
 8009832:	d01a      	beq.n	800986a <HAL_SPI_Init+0x2da>
 8009834:	491a      	ldr	r1, [pc, #104]	; (80098a0 <HAL_SPI_Init+0x310>)
 8009836:	428b      	cmp	r3, r1
 8009838:	d017      	beq.n	800986a <HAL_SPI_Init+0x2da>
 800983a:	491a      	ldr	r1, [pc, #104]	; (80098a4 <HAL_SPI_Init+0x314>)
 800983c:	428b      	cmp	r3, r1
 800983e:	d014      	beq.n	800986a <HAL_SPI_Init+0x2da>
 8009840:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 8009844:	428b      	cmp	r3, r1
 8009846:	d010      	beq.n	800986a <HAL_SPI_Init+0x2da>
 8009848:	4917      	ldr	r1, [pc, #92]	; (80098a8 <HAL_SPI_Init+0x318>)
 800984a:	428b      	cmp	r3, r1
 800984c:	d00d      	beq.n	800986a <HAL_SPI_Init+0x2da>
 800984e:	f101 5180 	add.w	r1, r1, #268435456	; 0x10000000
 8009852:	428b      	cmp	r3, r1
 8009854:	d009      	beq.n	800986a <HAL_SPI_Init+0x2da>
 8009856:	6b27      	ldr	r7, [r4, #48]	; 0x30
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009858:	b907      	cbnz	r7, 800985c <HAL_SPI_Init+0x2cc>
      crc_length = (hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) << SPI_CFG1_CRCSIZE_Pos;
 800985a:	0417      	lsls	r7, r2, #16
    if ((hspi->Init.DataSize >> SPI_CFG1_DSIZE_Pos) > (crc_length >> SPI_CFG1_CRCSIZE_Pos))
 800985c:	ebb2 4f17 	cmp.w	r2, r7, lsr #16
 8009860:	f63f af53 	bhi.w	800970a <HAL_SPI_Init+0x17a>
 8009864:	f44f 0680 	mov.w	r6, #4194304	; 0x400000
 8009868:	e6d8      	b.n	800961c <HAL_SPI_Init+0x8c>
    if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.CRCLength > SPI_CRC_LENGTH_16BIT))
 800986a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800986c:	f5b7 2f70 	cmp.w	r7, #983040	; 0xf0000
 8009870:	f63f af4b 	bhi.w	800970a <HAL_SPI_Init+0x17a>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009874:	2f00      	cmp	r7, #0
 8009876:	d1f1      	bne.n	800985c <HAL_SPI_Init+0x2cc>
 8009878:	e7ef      	b.n	800985a <HAL_SPI_Init+0x2ca>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800987a:	f1bc 0f00 	cmp.w	ip, #0
 800987e:	d001      	beq.n	8009884 <HAL_SPI_Init+0x2f4>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009880:	46ae      	mov	lr, r5
 8009882:	e6e6      	b.n	8009652 <HAL_SPI_Init+0xc2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009884:	6819      	ldr	r1, [r3, #0]
 8009886:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800988a:	6019      	str	r1, [r3, #0]
 800988c:	e6dd      	b.n	800964a <HAL_SPI_Init+0xba>
        ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (crc_length == SPI_CRC_LENGTH_32BIT)))
 800988e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009892:	4293      	cmp	r3, r2
 8009894:	f43f af75 	beq.w	8009782 <HAL_SPI_Init+0x1f2>
 8009898:	e776      	b.n	8009788 <HAL_SPI_Init+0x1f8>
 800989a:	bf00      	nop
 800989c:	40014c00 	.word	0x40014c00
 80098a0:	50014c00 	.word	0x50014c00
 80098a4:	44002000 	.word	0x44002000
 80098a8:	40015000 	.word	0x40015000

080098ac <HAL_SPI_Transmit>:
{
 80098ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098b0:	4604      	mov	r4, r0
 80098b2:	4690      	mov	r8, r2
 80098b4:	4689      	mov	r9, r1
 80098b6:	461d      	mov	r5, r3
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80098b8:	6807      	ldr	r7, [r0, #0]
  tickstart = HAL_GetTick();
 80098ba:	f7fa fd01 	bl	80042c0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80098be:	f894 2089 	ldrb.w	r2, [r4, #137]	; 0x89
 80098c2:	2a01      	cmp	r2, #1
 80098c4:	d172      	bne.n	80099ac <HAL_SPI_Transmit+0x100>
  if ((pData == NULL) || (Size == 0UL))
 80098c6:	b2d3      	uxtb	r3, r2
 80098c8:	f1b9 0f00 	cmp.w	r9, #0
 80098cc:	d06f      	beq.n	80099ae <HAL_SPI_Transmit+0x102>
 80098ce:	f1b8 0f00 	cmp.w	r8, #0
 80098d2:	d06c      	beq.n	80099ae <HAL_SPI_Transmit+0x102>
  __HAL_LOCK(hspi);
 80098d4:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
 80098d8:	2a01      	cmp	r2, #1
 80098da:	d067      	beq.n	80099ac <HAL_SPI_Transmit+0x100>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098dc:	2203      	movs	r2, #3
  __HAL_LOCK(hspi);
 80098de:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098e2:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80098e4:	f884 2089 	strb.w	r2, [r4, #137]	; 0x89
  hspi->pRxBuffPtr  = NULL;
 80098e8:	66e3      	str	r3, [r4, #108]	; 0x6c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80098ea:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  hspi->RxXferSize  = (uint16_t) 0UL;
 80098ee:	f8a4 3070 	strh.w	r3, [r4, #112]	; 0x70
  hspi->TxXferCount = Size;
 80098f2:	f8a4 806a 	strh.w	r8, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80098f6:	67e3      	str	r3, [r4, #124]	; 0x7c
  hspi->RxXferCount = (uint16_t) 0UL;
 80098f8:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
  hspi->RxISR       = NULL;
 80098fc:	67a3      	str	r3, [r4, #120]	; 0x78
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098fe:	68a3      	ldr	r3, [r4, #8]
 8009900:	4606      	mov	r6, r0
 8009902:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    SPI_1LINE_TX(hspi);
 8009906:	6821      	ldr	r1, [r4, #0]
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009908:	f8c4 9064 	str.w	r9, [r4, #100]	; 0x64
  hspi->TxXferSize  = Size;
 800990c:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009910:	f000 8121 	beq.w	8009b56 <HAL_SPI_Transmit+0x2aa>
    SPI_2LINES_TX(hspi);
 8009914:	68cb      	ldr	r3, [r1, #12]
 8009916:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800991a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800991e:	60cb      	str	r3, [r1, #12]
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009920:	684b      	ldr	r3, [r1, #4]
 8009922:	0c1b      	lsrs	r3, r3, #16
 8009924:	041b      	lsls	r3, r3, #16
 8009926:	ea43 0308 	orr.w	r3, r3, r8
 800992a:	604b      	str	r3, [r1, #4]
  __HAL_SPI_ENABLE(hspi);
 800992c:	680b      	ldr	r3, [r1, #0]
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	600b      	str	r3, [r1, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009934:	6863      	ldr	r3, [r4, #4]
 8009936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800993a:	d103      	bne.n	8009944 <HAL_SPI_Transmit+0x98>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800993c:	680b      	ldr	r3, [r1, #0]
 800993e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009942:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009944:	68e3      	ldr	r3, [r4, #12]
 8009946:	2b0f      	cmp	r3, #15
 8009948:	f200 808f 	bhi.w	8009a6a <HAL_SPI_Transmit+0x1be>
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800994c:	2b07      	cmp	r3, #7
 800994e:	d860      	bhi.n	8009a12 <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 8009950:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009954:	b29b      	uxth	r3, r3
 8009956:	b383      	cbz	r3, 80099ba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009958:	694b      	ldr	r3, [r1, #20]
 800995a:	0798      	lsls	r0, r3, #30
 800995c:	d51b      	bpl.n	8009996 <HAL_SPI_Transmit+0xea>
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800995e:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009962:	b29b      	uxth	r3, r3
 8009964:	2b03      	cmp	r3, #3
 8009966:	f240 80ba 	bls.w	8009ade <HAL_SPI_Transmit+0x232>
 800996a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800996c:	2b40      	cmp	r3, #64	; 0x40
 800996e:	f240 80b6 	bls.w	8009ade <HAL_SPI_Transmit+0x232>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009972:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009974:	f853 2b04 	ldr.w	r2, [r3], #4
 8009978:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800997a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 800997c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009980:	3b04      	subs	r3, #4
 8009982:	b29b      	uxth	r3, r3
 8009984:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8009988:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800998c:	b29b      	uxth	r3, r3
 800998e:	b1a3      	cbz	r3, 80099ba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009990:	694b      	ldr	r3, [r1, #20]
 8009992:	0798      	lsls	r0, r3, #30
 8009994:	d4e3      	bmi.n	800995e <HAL_SPI_Transmit+0xb2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009996:	f7fa fc93 	bl	80042c0 <HAL_GetTick>
 800999a:	1b80      	subs	r0, r0, r6
 800999c:	42a8      	cmp	r0, r5
 800999e:	f0c0 80d6 	bcc.w	8009b4e <HAL_SPI_Transmit+0x2a2>
 80099a2:	1c69      	adds	r1, r5, #1
 80099a4:	f040 80bf 	bne.w	8009b26 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80099a8:	6821      	ldr	r1, [r4, #0]
 80099aa:	e7d1      	b.n	8009950 <HAL_SPI_Transmit+0xa4>
    return HAL_BUSY;
 80099ac:	2302      	movs	r3, #2
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099b4:	1c6a      	adds	r2, r5, #1
 80099b6:	d10a      	bne.n	80099ce <HAL_SPI_Transmit+0x122>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80099b8:	6821      	ldr	r1, [r4, #0]
 80099ba:	694b      	ldr	r3, [r1, #20]
 80099bc:	071b      	lsls	r3, r3, #28
 80099be:	d40c      	bmi.n	80099da <HAL_SPI_Transmit+0x12e>
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80099c0:	f7fa fc7e 	bl	80042c0 <HAL_GetTick>
 80099c4:	1b80      	subs	r0, r0, r6
 80099c6:	4285      	cmp	r5, r0
 80099c8:	d9f4      	bls.n	80099b4 <HAL_SPI_Transmit+0x108>
 80099ca:	2d00      	cmp	r5, #0
 80099cc:	d1f4      	bne.n	80099b8 <HAL_SPI_Transmit+0x10c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099ce:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 80099d2:	f043 0320 	orr.w	r3, r3, #32
 80099d6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  SPI_CloseTransfer(hspi);
 80099da:	4620      	mov	r0, r4
 80099dc:	f7ff fd70 	bl	80094c0 <SPI_CloseTransfer>
  hspi->State = HAL_SPI_STATE_READY;
 80099e0:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 80099e2:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 80099e4:	f884 3089 	strb.w	r3, [r4, #137]	; 0x89
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099e8:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
  __HAL_UNLOCK(hspi);
 80099ec:	f884 2088 	strb.w	r2, [r4, #136]	; 0x88
    return HAL_BUSY;
 80099f0:	1a9b      	subs	r3, r3, r2
 80099f2:	bf18      	it	ne
 80099f4:	2301      	movne	r3, #1
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 80099fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099fe:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009a02:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a04:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 8009a06:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8009a12:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d0ce      	beq.n	80099ba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a1c:	694b      	ldr	r3, [r1, #20]
 8009a1e:	079a      	lsls	r2, r3, #30
 8009a20:	d51a      	bpl.n	8009a58 <HAL_SPI_Transmit+0x1ac>
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009a22:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d9e7      	bls.n	80099fc <HAL_SPI_Transmit+0x150>
 8009a2c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d0e4      	beq.n	80099fc <HAL_SPI_Transmit+0x150>
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009a32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a38:	620a      	str	r2, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009a3a:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009a3c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009a40:	3b02      	subs	r3, #2
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8009a48:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009a4c:	b29b      	uxth	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d0b3      	beq.n	80099ba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a52:	694b      	ldr	r3, [r1, #20]
 8009a54:	079a      	lsls	r2, r3, #30
 8009a56:	d4e4      	bmi.n	8009a22 <HAL_SPI_Transmit+0x176>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a58:	f7fa fc32 	bl	80042c0 <HAL_GetTick>
 8009a5c:	1b80      	subs	r0, r0, r6
 8009a5e:	42a8      	cmp	r0, r5
 8009a60:	d372      	bcc.n	8009b48 <HAL_SPI_Transmit+0x29c>
 8009a62:	1c6b      	adds	r3, r5, #1
 8009a64:	d15f      	bne.n	8009b26 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009a66:	6821      	ldr	r1, [r4, #0]
 8009a68:	e7d3      	b.n	8009a12 <HAL_SPI_Transmit+0x166>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8009a6a:	4b3d      	ldr	r3, [pc, #244]	; (8009b60 <HAL_SPI_Transmit+0x2b4>)
 8009a6c:	4299      	cmp	r1, r3
 8009a6e:	d011      	beq.n	8009a94 <HAL_SPI_Transmit+0x1e8>
 8009a70:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8009a74:	4299      	cmp	r1, r3
 8009a76:	d00d      	beq.n	8009a94 <HAL_SPI_Transmit+0x1e8>
 8009a78:	4b3a      	ldr	r3, [pc, #232]	; (8009b64 <HAL_SPI_Transmit+0x2b8>)
 8009a7a:	4299      	cmp	r1, r3
 8009a7c:	d00a      	beq.n	8009a94 <HAL_SPI_Transmit+0x1e8>
 8009a7e:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8009a82:	4299      	cmp	r1, r3
 8009a84:	d006      	beq.n	8009a94 <HAL_SPI_Transmit+0x1e8>
 8009a86:	4b38      	ldr	r3, [pc, #224]	; (8009b68 <HAL_SPI_Transmit+0x2bc>)
 8009a88:	4299      	cmp	r1, r3
 8009a8a:	d003      	beq.n	8009a94 <HAL_SPI_Transmit+0x1e8>
 8009a8c:	f103 5380 	add.w	r3, r3, #268435456	; 0x10000000
 8009a90:	4299      	cmp	r1, r3
 8009a92:	d1be      	bne.n	8009a12 <HAL_SPI_Transmit+0x166>
    while (hspi->TxXferCount > 0UL)
 8009a94:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d08d      	beq.n	80099ba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009a9e:	694b      	ldr	r3, [r1, #20]
 8009aa0:	0798      	lsls	r0, r3, #30
 8009aa2:	d513      	bpl.n	8009acc <HAL_SPI_Transmit+0x220>
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009aa4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009aa6:	f852 3b04 	ldr.w	r3, [r2], #4
 8009aaa:	620b      	str	r3, [r1, #32]
        hspi->TxXferCount--;
 8009aac:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ab0:	6662      	str	r2, [r4, #100]	; 0x64
        hspi->TxXferCount--;
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    while (hspi->TxXferCount > 0UL)
 8009aba:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	f43f af7a 	beq.w	80099ba <HAL_SPI_Transmit+0x10e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009ac6:	694b      	ldr	r3, [r1, #20]
 8009ac8:	0798      	lsls	r0, r3, #30
 8009aca:	d4eb      	bmi.n	8009aa4 <HAL_SPI_Transmit+0x1f8>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009acc:	f7fa fbf8 	bl	80042c0 <HAL_GetTick>
 8009ad0:	1b80      	subs	r0, r0, r6
 8009ad2:	42a8      	cmp	r0, r5
 8009ad4:	d325      	bcc.n	8009b22 <HAL_SPI_Transmit+0x276>
 8009ad6:	1c69      	adds	r1, r5, #1
 8009ad8:	d125      	bne.n	8009b26 <HAL_SPI_Transmit+0x27a>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009ada:	6821      	ldr	r1, [r4, #0]
 8009adc:	e7da      	b.n	8009a94 <HAL_SPI_Transmit+0x1e8>
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009ade:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009ae2:	b29b      	uxth	r3, r3
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d90d      	bls.n	8009b04 <HAL_SPI_Transmit+0x258>
 8009ae8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009aea:	b15b      	cbz	r3, 8009b04 <HAL_SPI_Transmit+0x258>
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8009aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aee:	f833 2b02 	ldrh.w	r2, [r3], #2
 8009af2:	843a      	strh	r2, [r7, #32]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009af4:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8009af6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009afa:	3b02      	subs	r3, #2
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8009b02:	e725      	b.n	8009950 <HAL_SPI_Transmit+0xa4>
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	f881 3020 	strb.w	r3, [r1, #32]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b0e:	6821      	ldr	r1, [r4, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009b10:	3301      	adds	r3, #1
 8009b12:	6663      	str	r3, [r4, #100]	; 0x64
          hspi->TxXferCount--;
 8009b14:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8009b18:	3b01      	subs	r3, #1
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 8009b20:	e716      	b.n	8009950 <HAL_SPI_Transmit+0xa4>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b22:	2d00      	cmp	r5, #0
 8009b24:	d1d9      	bne.n	8009ada <HAL_SPI_Transmit+0x22e>
          SPI_CloseTransfer(hspi);
 8009b26:	4620      	mov	r0, r4
 8009b28:	f7ff fcca 	bl	80094c0 <SPI_CloseTransfer>
          hspi->State = HAL_SPI_STATE_READY;
 8009b2c:	2401      	movs	r4, #1
          __HAL_UNLOCK(hspi);
 8009b2e:	2100      	movs	r1, #0
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b30:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
          return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b3a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
          __HAL_UNLOCK(hspi);
 8009b3e:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
          hspi->State = HAL_SPI_STATE_READY;
 8009b42:	f880 4089 	strb.w	r4, [r0, #137]	; 0x89
          return HAL_TIMEOUT;
 8009b46:	e732      	b.n	80099ae <HAL_SPI_Transmit+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b48:	2d00      	cmp	r5, #0
 8009b4a:	d18c      	bne.n	8009a66 <HAL_SPI_Transmit+0x1ba>
 8009b4c:	e7eb      	b.n	8009b26 <HAL_SPI_Transmit+0x27a>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b4e:	2d00      	cmp	r5, #0
 8009b50:	f47f af2a 	bne.w	80099a8 <HAL_SPI_Transmit+0xfc>
 8009b54:	e7e7      	b.n	8009b26 <HAL_SPI_Transmit+0x27a>
    SPI_1LINE_TX(hspi);
 8009b56:	680b      	ldr	r3, [r1, #0]
 8009b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b5c:	600b      	str	r3, [r1, #0]
 8009b5e:	e6df      	b.n	8009920 <HAL_SPI_Transmit+0x74>
 8009b60:	40013000 	.word	0x40013000
 8009b64:	40003800 	.word	0x40003800
 8009b68:	40003c00 	.word	0x40003c00

08009b6c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop

08009b70 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b70:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d14b      	bne.n	8009c10 <HAL_TIM_Base_Start_IT+0xa0>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b78:	2202      	movs	r2, #2

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b7a:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b80:	68da      	ldr	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b82:	4925      	ldr	r1, [pc, #148]	; (8009c18 <HAL_TIM_Base_Start_IT+0xa8>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b84:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b88:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b8a:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b8c:	d032      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009b8e:	4a23      	ldr	r2, [pc, #140]	; (8009c1c <HAL_TIM_Base_Start_IT+0xac>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d02f      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b98:	d02c      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009b9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b9e:	d029      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009ba0:	4a1f      	ldr	r2, [pc, #124]	; (8009c20 <HAL_TIM_Base_Start_IT+0xb0>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d026      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009ba6:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d022      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bae:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <HAL_TIM_Base_Start_IT+0xb4>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d01f      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bb4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d01b      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bbc:	4a1a      	ldr	r2, [pc, #104]	; (8009c28 <HAL_TIM_Base_Start_IT+0xb8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d018      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bc2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d014      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bca:	4a18      	ldr	r2, [pc, #96]	; (8009c2c <HAL_TIM_Base_Start_IT+0xbc>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d011      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bd0:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d00d      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bd8:	4a15      	ldr	r2, [pc, #84]	; (8009c30 <HAL_TIM_Base_Start_IT+0xc0>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d00a      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bde:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d006      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009be6:	4a13      	ldr	r2, [pc, #76]	; (8009c34 <HAL_TIM_Base_Start_IT+0xc4>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d003      	beq.n	8009bf4 <HAL_TIM_Base_Start_IT+0x84>
 8009bec:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d107      	bne.n	8009c04 <HAL_TIM_Base_Start_IT+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bf4:	6899      	ldr	r1, [r3, #8]
 8009bf6:	4a10      	ldr	r2, [pc, #64]	; (8009c38 <HAL_TIM_Base_Start_IT+0xc8>)
 8009bf8:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bfa:	2a06      	cmp	r2, #6
 8009bfc:	d00a      	beq.n	8009c14 <HAL_TIM_Base_Start_IT+0xa4>
 8009bfe:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8009c02:	d007      	beq.n	8009c14 <HAL_TIM_Base_Start_IT+0xa4>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c04:	681a      	ldr	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c06:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8009c08:	f042 0201 	orr.w	r2, r2, #1
 8009c0c:	601a      	str	r2, [r3, #0]
 8009c0e:	4770      	bx	lr
    return HAL_ERROR;
 8009c10:	2001      	movs	r0, #1
 8009c12:	4770      	bx	lr
  return HAL_OK;
 8009c14:	2000      	movs	r0, #0
}
 8009c16:	4770      	bx	lr
 8009c18:	40012c00 	.word	0x40012c00
 8009c1c:	50012c00 	.word	0x50012c00
 8009c20:	40000400 	.word	0x40000400
 8009c24:	40000800 	.word	0x40000800
 8009c28:	40000c00 	.word	0x40000c00
 8009c2c:	40013400 	.word	0x40013400
 8009c30:	40001800 	.word	0x40001800
 8009c34:	40014000 	.word	0x40014000
 8009c38:	00010007 	.word	0x00010007

08009c3c <HAL_TIM_OC_DelayElapsedCallback>:
 8009c3c:	4770      	bx	lr
 8009c3e:	bf00      	nop

08009c40 <HAL_TIM_IC_CaptureCallback>:
 8009c40:	4770      	bx	lr
 8009c42:	bf00      	nop

08009c44 <HAL_TIM_PWM_PulseFinishedCallback>:
 8009c44:	4770      	bx	lr
 8009c46:	bf00      	nop

08009c48 <HAL_TIM_TriggerCallback>:
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop

08009c4c <HAL_TIM_IRQHandler>:
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  uint32_t itsource = htim->Instance->DIER;
 8009c4c:	6803      	ldr	r3, [r0, #0]
{
 8009c4e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8009c50:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009c52:	691c      	ldr	r4, [r3, #16]
{
 8009c54:	4605      	mov	r5, r0

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009c56:	07a2      	lsls	r2, r4, #30
 8009c58:	d501      	bpl.n	8009c5e <HAL_TIM_IRQHandler+0x12>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009c5a:	07b1      	lsls	r1, r6, #30
 8009c5c:	d46c      	bmi.n	8009d38 <HAL_TIM_IRQHandler+0xec>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c5e:	0763      	lsls	r3, r4, #29
 8009c60:	d501      	bpl.n	8009c66 <HAL_TIM_IRQHandler+0x1a>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c62:	0770      	lsls	r0, r6, #29
 8009c64:	d455      	bmi.n	8009d12 <HAL_TIM_IRQHandler+0xc6>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c66:	0721      	lsls	r1, r4, #28
 8009c68:	d501      	bpl.n	8009c6e <HAL_TIM_IRQHandler+0x22>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c6a:	0732      	lsls	r2, r6, #28
 8009c6c:	d43e      	bmi.n	8009cec <HAL_TIM_IRQHandler+0xa0>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c6e:	06e0      	lsls	r0, r4, #27
 8009c70:	d501      	bpl.n	8009c76 <HAL_TIM_IRQHandler+0x2a>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c72:	06f1      	lsls	r1, r6, #27
 8009c74:	d426      	bmi.n	8009cc4 <HAL_TIM_IRQHandler+0x78>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009c76:	07e2      	lsls	r2, r4, #31
 8009c78:	d501      	bpl.n	8009c7e <HAL_TIM_IRQHandler+0x32>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009c7a:	07f3      	lsls	r3, r6, #31
 8009c7c:	d47a      	bmi.n	8009d74 <HAL_TIM_IRQHandler+0x128>
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009c7e:	f414 5f02 	tst.w	r4, #8320	; 0x2080
 8009c82:	d069      	beq.n	8009d58 <HAL_TIM_IRQHandler+0x10c>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009c84:	0630      	lsls	r0, r6, #24
 8009c86:	d47d      	bmi.n	8009d84 <HAL_TIM_IRQHandler+0x138>
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009c88:	0660      	lsls	r0, r4, #25
 8009c8a:	d502      	bpl.n	8009c92 <HAL_TIM_IRQHandler+0x46>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009c8c:	0671      	lsls	r1, r6, #25
 8009c8e:	f100 808b 	bmi.w	8009da8 <HAL_TIM_IRQHandler+0x15c>
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009c92:	06a2      	lsls	r2, r4, #26
 8009c94:	d502      	bpl.n	8009c9c <HAL_TIM_IRQHandler+0x50>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009c96:	06b3      	lsls	r3, r6, #26
 8009c98:	f100 808e 	bmi.w	8009db8 <HAL_TIM_IRQHandler+0x16c>
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009c9c:	02e0      	lsls	r0, r4, #11
 8009c9e:	d502      	bpl.n	8009ca6 <HAL_TIM_IRQHandler+0x5a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8009ca0:	02f1      	lsls	r1, r6, #11
 8009ca2:	f100 8091 	bmi.w	8009dc8 <HAL_TIM_IRQHandler+0x17c>
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009ca6:	02a2      	lsls	r2, r4, #10
 8009ca8:	d502      	bpl.n	8009cb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8009caa:	02b3      	lsls	r3, r6, #10
 8009cac:	f100 8094 	bmi.w	8009dd8 <HAL_TIM_IRQHandler+0x18c>
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009cb0:	0260      	lsls	r0, r4, #9
 8009cb2:	d502      	bpl.n	8009cba <HAL_TIM_IRQHandler+0x6e>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009cb4:	0271      	lsls	r1, r6, #9
 8009cb6:	f100 8097 	bmi.w	8009de8 <HAL_TIM_IRQHandler+0x19c>
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009cba:	0222      	lsls	r2, r4, #8
 8009cbc:	d501      	bpl.n	8009cc2 <HAL_TIM_IRQHandler+0x76>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009cbe:	0233      	lsls	r3, r6, #8
 8009cc0:	d44f      	bmi.n	8009d62 <HAL_TIM_IRQHandler+0x116>
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cc2:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009cc4:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cc8:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009cca:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8009ccc:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009cce:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cd0:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cd2:	69db      	ldr	r3, [r3, #28]
 8009cd4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009cd8:	f040 8097 	bne.w	8009e0a <HAL_TIM_IRQHandler+0x1be>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cdc:	f7ff ffae 	bl	8009c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f7ff ffaf 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	772b      	strb	r3, [r5, #28]
 8009cea:	e7c4      	b.n	8009c76 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009cec:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cf0:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009cf2:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8009cf4:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009cf6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009cf8:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	079b      	lsls	r3, r3, #30
 8009cfe:	f040 8081 	bne.w	8009e04 <HAL_TIM_IRQHandler+0x1b8>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d02:	f7ff ff9b 	bl	8009c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d06:	4628      	mov	r0, r5
 8009d08:	f7ff ff9c 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	772b      	strb	r3, [r5, #28]
 8009d10:	e7ad      	b.n	8009c6e <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d12:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d16:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d18:	682b      	ldr	r3, [r5, #0]
        HAL_TIM_IC_CaptureCallback(htim);
 8009d1a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009d1c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d1e:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d20:	699b      	ldr	r3, [r3, #24]
 8009d22:	f413 7f40 	tst.w	r3, #768	; 0x300
 8009d26:	d16a      	bne.n	8009dfe <HAL_TIM_IRQHandler+0x1b2>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d28:	f7ff ff88 	bl	8009c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	f7ff ff89 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d32:	2300      	movs	r3, #0
 8009d34:	772b      	strb	r3, [r5, #28]
 8009d36:	e796      	b.n	8009c66 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009d38:	f06f 0202 	mvn.w	r2, #2
 8009d3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009d3e:	2201      	movs	r2, #1
 8009d40:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	079a      	lsls	r2, r3, #30
 8009d46:	d157      	bne.n	8009df8 <HAL_TIM_IRQHandler+0x1ac>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d48:	f7ff ff78 	bl	8009c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	f7ff ff79 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d52:	2300      	movs	r3, #0
 8009d54:	772b      	strb	r3, [r5, #28]
 8009d56:	e782      	b.n	8009c5e <HAL_TIM_IRQHandler+0x12>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009d58:	05e2      	lsls	r2, r4, #23
 8009d5a:	d595      	bpl.n	8009c88 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d5c:	0633      	lsls	r3, r6, #24
 8009d5e:	d41b      	bmi.n	8009d98 <HAL_TIM_IRQHandler+0x14c>
 8009d60:	e792      	b.n	8009c88 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009d62:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009d66:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009d68:	4628      	mov	r0, r5
}
 8009d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009d6e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009d70:	f000 b94e 	b.w	800a010 <HAL_TIMEx_TransitionErrorCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d74:	f06f 0201 	mvn.w	r2, #1
 8009d78:	682b      	ldr	r3, [r5, #0]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d7a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009d7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d7e:	f7f8 fa79 	bl	8002274 <HAL_TIM_PeriodElapsedCallback>
 8009d82:	e77c      	b.n	8009c7e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009d84:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8009d88:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_BreakCallback(htim);
 8009d8a:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009d8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8009d8e:	f000 f935 	bl	8009ffc <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009d92:	05e1      	lsls	r1, r4, #23
 8009d94:	f57f af78 	bpl.w	8009c88 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d98:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d9c:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_Break2Callback(htim);
 8009d9e:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009da0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8009da2:	f000 f92d 	bl	800a000 <HAL_TIMEx_Break2Callback>
 8009da6:	e76f      	b.n	8009c88 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009da8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009dac:	682b      	ldr	r3, [r5, #0]
      HAL_TIM_TriggerCallback(htim);
 8009dae:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009db0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009db2:	f7ff ff49 	bl	8009c48 <HAL_TIM_TriggerCallback>
 8009db6:	e76c      	b.n	8009c92 <HAL_TIM_IRQHandler+0x46>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009db8:	f06f 0220 	mvn.w	r2, #32
 8009dbc:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_CommutCallback(htim);
 8009dbe:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009dc0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8009dc2:	f000 f919 	bl	8009ff8 <HAL_TIMEx_CommutCallback>
 8009dc6:	e769      	b.n	8009c9c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009dc8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009dcc:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009dce:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009dd0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009dd2:	f000 f917 	bl	800a004 <HAL_TIMEx_EncoderIndexCallback>
 8009dd6:	e766      	b.n	8009ca6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009dd8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009ddc:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009dde:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009de0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009de2:	f000 f911 	bl	800a008 <HAL_TIMEx_DirectionChangeCallback>
 8009de6:	e763      	b.n	8009cb0 <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009de8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009dec:	682b      	ldr	r3, [r5, #0]
      HAL_TIMEx_IndexErrorCallback(htim);
 8009dee:	4628      	mov	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009df0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 8009df2:	f000 f90b 	bl	800a00c <HAL_TIMEx_IndexErrorCallback>
 8009df6:	e760      	b.n	8009cba <HAL_TIM_IRQHandler+0x6e>
          HAL_TIM_IC_CaptureCallback(htim);
 8009df8:	f7ff ff22 	bl	8009c40 <HAL_TIM_IC_CaptureCallback>
 8009dfc:	e7a9      	b.n	8009d52 <HAL_TIM_IRQHandler+0x106>
        HAL_TIM_IC_CaptureCallback(htim);
 8009dfe:	f7ff ff1f 	bl	8009c40 <HAL_TIM_IC_CaptureCallback>
 8009e02:	e796      	b.n	8009d32 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8009e04:	f7ff ff1c 	bl	8009c40 <HAL_TIM_IC_CaptureCallback>
 8009e08:	e780      	b.n	8009d0c <HAL_TIM_IRQHandler+0xc0>
        HAL_TIM_IC_CaptureCallback(htim);
 8009e0a:	f7ff ff19 	bl	8009c40 <HAL_TIM_IC_CaptureCallback>
 8009e0e:	e76a      	b.n	8009ce6 <HAL_TIM_IRQHandler+0x9a>

08009e10 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e10:	4a54      	ldr	r2, [pc, #336]	; (8009f64 <TIM_Base_SetConfig+0x154>)
{
 8009e12:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e14:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8009e16:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e18:	d059      	beq.n	8009ece <TIM_Base_SetConfig+0xbe>
 8009e1a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e1e:	4290      	cmp	r0, r2
 8009e20:	d055      	beq.n	8009ece <TIM_Base_SetConfig+0xbe>
 8009e22:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009e26:	d070      	beq.n	8009f0a <TIM_Base_SetConfig+0xfa>
 8009e28:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 8009e2c:	d06d      	beq.n	8009f0a <TIM_Base_SetConfig+0xfa>
 8009e2e:	4a4e      	ldr	r2, [pc, #312]	; (8009f68 <TIM_Base_SetConfig+0x158>)
 8009e30:	4290      	cmp	r0, r2
 8009e32:	d06a      	beq.n	8009f0a <TIM_Base_SetConfig+0xfa>
 8009e34:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e38:	4290      	cmp	r0, r2
 8009e3a:	d066      	beq.n	8009f0a <TIM_Base_SetConfig+0xfa>
 8009e3c:	4a4b      	ldr	r2, [pc, #300]	; (8009f6c <TIM_Base_SetConfig+0x15c>)
 8009e3e:	4290      	cmp	r0, r2
 8009e40:	d063      	beq.n	8009f0a <TIM_Base_SetConfig+0xfa>
 8009e42:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e46:	4290      	cmp	r0, r2
 8009e48:	d05f      	beq.n	8009f0a <TIM_Base_SetConfig+0xfa>
 8009e4a:	4a49      	ldr	r2, [pc, #292]	; (8009f70 <TIM_Base_SetConfig+0x160>)
 8009e4c:	4290      	cmp	r0, r2
 8009e4e:	d05c      	beq.n	8009f0a <TIM_Base_SetConfig+0xfa>
 8009e50:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e54:	4290      	cmp	r0, r2
 8009e56:	d058      	beq.n	8009f0a <TIM_Base_SetConfig+0xfa>
 8009e58:	4a46      	ldr	r2, [pc, #280]	; (8009f74 <TIM_Base_SetConfig+0x164>)
 8009e5a:	4290      	cmp	r0, r2
 8009e5c:	d067      	beq.n	8009f2e <TIM_Base_SetConfig+0x11e>
 8009e5e:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e62:	4290      	cmp	r0, r2
 8009e64:	d063      	beq.n	8009f2e <TIM_Base_SetConfig+0x11e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e66:	4a44      	ldr	r2, [pc, #272]	; (8009f78 <TIM_Base_SetConfig+0x168>)
 8009e68:	4290      	cmp	r0, r2
 8009e6a:	d052      	beq.n	8009f12 <TIM_Base_SetConfig+0x102>
 8009e6c:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e70:	4290      	cmp	r0, r2
 8009e72:	d04e      	beq.n	8009f12 <TIM_Base_SetConfig+0x102>
 8009e74:	4a41      	ldr	r2, [pc, #260]	; (8009f7c <TIM_Base_SetConfig+0x16c>)
 8009e76:	4290      	cmp	r0, r2
 8009e78:	d04b      	beq.n	8009f12 <TIM_Base_SetConfig+0x102>
 8009e7a:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e7e:	4290      	cmp	r0, r2
 8009e80:	d047      	beq.n	8009f12 <TIM_Base_SetConfig+0x102>
 8009e82:	4a3f      	ldr	r2, [pc, #252]	; (8009f80 <TIM_Base_SetConfig+0x170>)
 8009e84:	4290      	cmp	r0, r2
 8009e86:	d044      	beq.n	8009f12 <TIM_Base_SetConfig+0x102>
 8009e88:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e8c:	4290      	cmp	r0, r2
 8009e8e:	d040      	beq.n	8009f12 <TIM_Base_SetConfig+0x102>
 8009e90:	4a3c      	ldr	r2, [pc, #240]	; (8009f84 <TIM_Base_SetConfig+0x174>)
 8009e92:	4290      	cmp	r0, r2
 8009e94:	d050      	beq.n	8009f38 <TIM_Base_SetConfig+0x128>
 8009e96:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009e9a:	4290      	cmp	r0, r2
 8009e9c:	d052      	beq.n	8009f44 <TIM_Base_SetConfig+0x134>
 8009e9e:	4a3a      	ldr	r2, [pc, #232]	; (8009f88 <TIM_Base_SetConfig+0x178>)
 8009ea0:	4290      	cmp	r0, r2
 8009ea2:	d049      	beq.n	8009f38 <TIM_Base_SetConfig+0x128>
 8009ea4:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009ea8:	4290      	cmp	r0, r2
 8009eaa:	d045      	beq.n	8009f38 <TIM_Base_SetConfig+0x128>
 8009eac:	4a37      	ldr	r2, [pc, #220]	; (8009f8c <TIM_Base_SetConfig+0x17c>)
 8009eae:	4290      	cmp	r0, r2
 8009eb0:	d042      	beq.n	8009f38 <TIM_Base_SetConfig+0x128>
 8009eb2:	f102 5280 	add.w	r2, r2, #268435456	; 0x10000000
 8009eb6:	4290      	cmp	r0, r2
 8009eb8:	d03e      	beq.n	8009f38 <TIM_Base_SetConfig+0x128>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009eba:	694d      	ldr	r5, [r1, #20]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ebc:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009ebe:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ec4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8009ec6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ec8:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009eca:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009ecc:	e012      	b.n	8009ef4 <TIM_Base_SetConfig+0xe4>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ece:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ed0:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009ed6:	4323      	orrs	r3, r4
    tmpcr1 &= ~TIM_CR1_CKD;
 8009ed8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009edc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009ede:	694a      	ldr	r2, [r1, #20]
 8009ee0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ee4:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009ee6:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ee8:	688b      	ldr	r3, [r1, #8]
 8009eea:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009eec:	680b      	ldr	r3, [r1, #0]
 8009eee:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ef0:	690b      	ldr	r3, [r1, #16]
 8009ef2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009ef8:	6903      	ldr	r3, [r0, #16]
 8009efa:	07db      	lsls	r3, r3, #31
 8009efc:	d503      	bpl.n	8009f06 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009efe:	6903      	ldr	r3, [r0, #16]
 8009f00:	f023 0301 	bic.w	r3, r3, #1
 8009f04:	6103      	str	r3, [r0, #16]
  }
}
 8009f06:	bc30      	pop	{r4, r5}
 8009f08:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8009f0a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f10:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f12:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f18:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f1a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f20:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f22:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8009f24:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 8009f26:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f28:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f2a:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f2c:	e7e2      	b.n	8009ef4 <TIM_Base_SetConfig+0xe4>
    tmpcr1 |= Structure->CounterMode;
 8009f2e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f30:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8009f36:	e7ce      	b.n	8009ed6 <TIM_Base_SetConfig+0xc6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f38:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f3e:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f40:	4323      	orrs	r3, r4
 8009f42:	e7cd      	b.n	8009ee0 <TIM_Base_SetConfig+0xd0>
 8009f44:	68cc      	ldr	r4, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f4a:	694a      	ldr	r2, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f4c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f52:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8009f54:	4a0e      	ldr	r2, [pc, #56]	; (8009f90 <TIM_Base_SetConfig+0x180>)
 8009f56:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f58:	688b      	ldr	r3, [r1, #8]
 8009f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8009f5c:	680b      	ldr	r3, [r1, #0]
 8009f5e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f60:	e7c6      	b.n	8009ef0 <TIM_Base_SetConfig+0xe0>
 8009f62:	bf00      	nop
 8009f64:	40012c00 	.word	0x40012c00
 8009f68:	40000400 	.word	0x40000400
 8009f6c:	40000800 	.word	0x40000800
 8009f70:	40000c00 	.word	0x40000c00
 8009f74:	40013400 	.word	0x40013400
 8009f78:	40001800 	.word	0x40001800
 8009f7c:	40001c00 	.word	0x40001c00
 8009f80:	40002000 	.word	0x40002000
 8009f84:	40014000 	.word	0x40014000
 8009f88:	40014400 	.word	0x40014400
 8009f8c:	40014800 	.word	0x40014800
 8009f90:	50014000 	.word	0x50014000

08009f94 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8009f94:	b370      	cbz	r0, 8009ff4 <HAL_TIM_Base_Init+0x60>
{
 8009f96:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8009f98:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009fa2:	b313      	cbz	r3, 8009fea <HAL_TIM_Base_Init+0x56>
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fa6:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8009fa8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fac:	f851 0b04 	ldr.w	r0, [r1], #4
 8009fb0:	f7ff ff2e 	bl	8009e10 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fba:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8009fbe:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8009fc2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009fc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8009fca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009fd2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8009fd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fda:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8009fde:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8009fe2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8009fe6:	2000      	movs	r0, #0
}
 8009fe8:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8009fea:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8009fee:	f7ff fdbd 	bl	8009b6c <HAL_TIM_Base_MspInit>
 8009ff2:	e7d7      	b.n	8009fa4 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8009ff4:	2001      	movs	r0, #1
}
 8009ff6:	4770      	bx	lr

08009ff8 <HAL_TIMEx_CommutCallback>:
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop

08009ffc <HAL_TIMEx_BreakCallback>:
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop

0800a000 <HAL_TIMEx_Break2Callback>:
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop

0800a004 <HAL_TIMEx_EncoderIndexCallback>:
 800a004:	4770      	bx	lr
 800a006:	bf00      	nop

0800a008 <HAL_TIMEx_DirectionChangeCallback>:
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop

0800a00c <HAL_TIMEx_IndexErrorCallback>:
 800a00c:	4770      	bx	lr
 800a00e:	bf00      	nop

0800a010 <HAL_TIMEx_TransitionErrorCallback>:
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop

0800a014 <HAL_InitTick>:
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a014:	4b26      	ldr	r3, [pc, #152]	; (800a0b0 <HAL_InitTick+0x9c>)
{
 800a016:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a018:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
{
 800a01c:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a01e:	f042 0210 	orr.w	r2, r2, #16
 800a022:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800a026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
{
 800a02a:	4604      	mov	r4, r0
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	9301      	str	r3, [sp, #4]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a032:	4669      	mov	r1, sp
 800a034:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM6_CLK_ENABLE();
 800a036:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a038:	f7fb fc6e 	bl	8005918 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800a03c:	9b05      	ldr	r3, [sp, #20]
 800a03e:	b9e3      	cbnz	r3, 800a07a <HAL_InitTick+0x66>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800a040:	f7fb fc0a 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 800a044:	4603      	mov	r3, r0
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (100000U / 1000U) - 1U;
  htim6.Init.Prescaler = uwPrescalerValue;
  htim6.Init.ClockDivision = 0;
 800a046:	2200      	movs	r2, #0
  htim6.Init.Period = (100000U / 1000U) - 1U;
 800a048:	2163      	movs	r1, #99	; 0x63
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800a04a:	481a      	ldr	r0, [pc, #104]	; (800a0b4 <HAL_InitTick+0xa0>)
 800a04c:	095b      	lsrs	r3, r3, #5
 800a04e:	fba0 0303 	umull	r0, r3, r0, r3
  htim6.Instance = TIM6;
 800a052:	4d19      	ldr	r5, [pc, #100]	; (800a0b8 <HAL_InitTick+0xa4>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000U) - 1U);
 800a054:	09db      	lsrs	r3, r3, #7
 800a056:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800a058:	606b      	str	r3, [r5, #4]
  htim6.Instance = TIM6;
 800a05a:	4b18      	ldr	r3, [pc, #96]	; (800a0bc <HAL_InitTick+0xa8>)
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim6);
 800a05c:	4628      	mov	r0, r5
  htim6.Init.ClockDivision = 0;
 800a05e:	e9c5 1203 	strd	r1, r2, [r5, #12]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a062:	60aa      	str	r2, [r5, #8]
  htim6.Instance = TIM6;
 800a064:	602b      	str	r3, [r5, #0]
  status = HAL_TIM_Base_Init(&htim6);
 800a066:	f7ff ff95 	bl	8009f94 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 800a06a:	4606      	mov	r6, r0
 800a06c:	b148      	cbz	r0, 800a082 <HAL_InitTick+0x6e>
      }
    }
}

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800a06e:	2031      	movs	r0, #49	; 0x31
 800a070:	f7fa f97c 	bl	800436c <HAL_NVIC_EnableIRQ>

  /* Return function status */
  return status;
}
 800a074:	4630      	mov	r0, r6
 800a076:	b008      	add	sp, #32
 800a078:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800a07a:	f7fb fbed 	bl	8005858 <HAL_RCC_GetPCLK1Freq>
 800a07e:	0043      	lsls	r3, r0, #1
 800a080:	e7e1      	b.n	800a046 <HAL_InitTick+0x32>
    status = HAL_TIM_Base_Start_IT(&htim6);
 800a082:	4628      	mov	r0, r5
 800a084:	f7ff fd74 	bl	8009b70 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 800a088:	4606      	mov	r6, r0
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d1ef      	bne.n	800a06e <HAL_InitTick+0x5a>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a08e:	2c0f      	cmp	r4, #15
 800a090:	d906      	bls.n	800a0a0 <HAL_InitTick+0x8c>
        status = HAL_ERROR;
 800a092:	2601      	movs	r6, #1
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800a094:	2031      	movs	r0, #49	; 0x31
 800a096:	f7fa f969 	bl	800436c <HAL_NVIC_EnableIRQ>
}
 800a09a:	4630      	mov	r0, r6
 800a09c:	b008      	add	sp, #32
 800a09e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	4621      	mov	r1, r4
 800a0a4:	2031      	movs	r0, #49	; 0x31
 800a0a6:	f7fa f923 	bl	80042f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a0aa:	4b05      	ldr	r3, [pc, #20]	; (800a0c0 <HAL_InitTick+0xac>)
 800a0ac:	601c      	str	r4, [r3, #0]
 800a0ae:	e7de      	b.n	800a06e <HAL_InitTick+0x5a>
 800a0b0:	44020c00 	.word	0x44020c00
 800a0b4:	0a7c5ac5 	.word	0x0a7c5ac5
 800a0b8:	20001cc4 	.word	0x20001cc4
 800a0bc:	40001000 	.word	0x40001000
 800a0c0:	20000008 	.word	0x20000008

0800a0c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a0c4:	b410      	push	{r4}
 800a0c6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a0cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d0:	e842 3100 	strex	r1, r3, [r2]
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	d1f7      	bne.n	800a0c8 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a0d8:	4c14      	ldr	r4, [pc, #80]	; (800a12c <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0da:	f102 0308 	add.w	r3, r2, #8
 800a0de:	e853 3f00 	ldrex	r3, [r3]
 800a0e2:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	f102 0c08 	add.w	ip, r2, #8
 800a0e8:	e84c 3100 	strex	r1, r3, [ip]
 800a0ec:	2900      	cmp	r1, #0
 800a0ee:	d1f4      	bne.n	800a0da <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a0f0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d008      	beq.n	800a108 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0f6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800a0f8:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
}
 800a0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
  huart->RxState = HAL_UART_STATE_READY;
 800a0fe:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  huart->RxISR = NULL;
 800a102:	6743      	str	r3, [r0, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a104:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800a106:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a108:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a10c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a110:	e842 3100 	strex	r1, r3, [r2]
 800a114:	2900      	cmp	r1, #0
 800a116:	d0ee      	beq.n	800a0f6 <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a118:	e852 3f00 	ldrex	r3, [r2]
 800a11c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a120:	e842 3100 	strex	r1, r3, [r2]
 800a124:	2900      	cmp	r1, #0
 800a126:	d1ef      	bne.n	800a108 <UART_EndRxTransfer+0x44>
 800a128:	e7e5      	b.n	800a0f6 <UART_EndRxTransfer+0x32>
 800a12a:	bf00      	nop
 800a12c:	effffffe 	.word	0xeffffffe

0800a130 <HAL_UART_Transmit_DMA>:
{
 800a130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800a132:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800a136:	2b20      	cmp	r3, #32
 800a138:	d13d      	bne.n	800a1b6 <HAL_UART_Transmit_DMA+0x86>
    if ((pData == NULL) || (Size == 0U))
 800a13a:	2900      	cmp	r1, #0
 800a13c:	d039      	beq.n	800a1b2 <HAL_UART_Transmit_DMA+0x82>
 800a13e:	2a00      	cmp	r2, #0
 800a140:	d037      	beq.n	800a1b2 <HAL_UART_Transmit_DMA+0x82>
    huart->pTxBuffPtr  = pData;
 800a142:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a144:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a146:	2721      	movs	r7, #33	; 0x21
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a148:	2640      	movs	r6, #64	; 0x40
 800a14a:	6805      	ldr	r5, [r0, #0]
    huart->TxXferCount = Size;
 800a14c:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
    huart->pTxBuffPtr  = pData;
 800a150:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800a152:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
    if (huart->hdmatx != NULL)
 800a156:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a158:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a15c:	f8c4 7088 	str.w	r7, [r4, #136]	; 0x88
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a160:	622e      	str	r6, [r5, #32]
    if (huart->hdmatx != NULL)
 800a162:	b1c8      	cbz	r0, 800a198 <HAL_UART_Transmit_DMA+0x68>
      huart->hdmatx->XferAbortCallback = NULL;
 800a164:	66c3      	str	r3, [r0, #108]	; 0x6c
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a166:	4b1f      	ldr	r3, [pc, #124]	; (800a1e4 <HAL_UART_Transmit_DMA+0xb4>)
 800a168:	6603      	str	r3, [r0, #96]	; 0x60
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a16a:	4b1f      	ldr	r3, [pc, #124]	; (800a1e8 <HAL_UART_Transmit_DMA+0xb8>)
 800a16c:	6643      	str	r3, [r0, #100]	; 0x64
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a16e:	4b1f      	ldr	r3, [pc, #124]	; (800a1ec <HAL_UART_Transmit_DMA+0xbc>)
 800a170:	6683      	str	r3, [r0, #104]	; 0x68
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a172:	68a3      	ldr	r3, [r4, #8]
 800a174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a178:	d01f      	beq.n	800a1ba <HAL_UART_Transmit_DMA+0x8a>
      if ((huart->hdmatx->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800a17a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a17c:	061b      	lsls	r3, r3, #24
 800a17e:	d522      	bpl.n	800a1c6 <HAL_UART_Transmit_DMA+0x96>
        if ((huart->hdmatx->LinkedListQueue != NULL) && (huart->hdmatx->LinkedListQueue->Head != NULL))
 800a180:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a182:	b33b      	cbz	r3, 800a1d4 <HAL_UART_Transmit_DMA+0xa4>
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	b32b      	cbz	r3, 800a1d4 <HAL_UART_Transmit_DMA+0xa4>
            (uint32_t)&huart->Instance->TDR;
 800a188:	3528      	adds	r5, #40	; 0x28
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] =
 800a18a:	e9c3 1503 	strd	r1, r5, [r3, #12]
          huart->hdmatx->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = nbByte;
 800a18e:	609a      	str	r2, [r3, #8]
          status = HAL_DMAEx_List_Start_IT(huart->hdmatx);
 800a190:	f7fa fcdc 	bl	8004b4c <HAL_DMAEx_List_Start_IT>
      if (status != HAL_OK)
 800a194:	b9f0      	cbnz	r0, 800a1d4 <HAL_UART_Transmit_DMA+0xa4>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a196:	6825      	ldr	r5, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a198:	f105 0308 	add.w	r3, r5, #8
 800a19c:	e853 3f00 	ldrex	r3, [r3]
 800a1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a4:	f105 0208 	add.w	r2, r5, #8
 800a1a8:	e842 3000 	strex	r0, r3, [r2]
 800a1ac:	2800      	cmp	r0, #0
 800a1ae:	d1f3      	bne.n	800a198 <HAL_UART_Transmit_DMA+0x68>
}
 800a1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800a1b2:	2001      	movs	r0, #1
}
 800a1b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800a1b6:	2002      	movs	r0, #2
}
 800a1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1ba:	6923      	ldr	r3, [r4, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1dc      	bne.n	800a17a <HAL_UART_Transmit_DMA+0x4a>
        nbByte = Size * 2U;
 800a1c0:	0052      	lsls	r2, r2, #1
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	e7d9      	b.n	800a17a <HAL_UART_Transmit_DMA+0x4a>
        status = HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, nbByte);
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	f105 0228 	add.w	r2, r5, #40	; 0x28
 800a1cc:	f7fa fb2a 	bl	8004824 <HAL_DMA_Start_IT>
      if (status != HAL_OK)
 800a1d0:	2800      	cmp	r0, #0
 800a1d2:	d0e0      	beq.n	800a196 <HAL_UART_Transmit_DMA+0x66>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1d4:	2210      	movs	r2, #16
        huart->gState = HAL_UART_STATE_READY;
 800a1d6:	2320      	movs	r3, #32
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a1d8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        return HAL_ERROR;
 800a1dc:	2001      	movs	r0, #1
        huart->gState = HAL_UART_STATE_READY;
 800a1de:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
 800a1e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e4:	0800a1f1 	.word	0x0800a1f1
 800a1e8:	0800a221 	.word	0x0800a221
 800a1ec:	0800a22d 	.word	0x0800a22d

0800a1f0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a1f0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* Check if DMA in circular mode */
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800a1f2:	6d03      	ldr	r3, [r0, #80]	; 0x50
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a1f4:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  if (hdma->Mode != DMA_LINKEDLIST_CIRCULAR)
 800a1f6:	2b81      	cmp	r3, #129	; 0x81
 800a1f8:	d00c      	beq.n	800a214 <UART_DMATransmitCplt+0x24>
  {
    huart->TxXferCount = 0U;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	6802      	ldr	r2, [r0, #0]
 800a1fe:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a202:	e852 3f00 	ldrex	r3, [r2]
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);

#endif /* !USART_DMAREQUESTS_SW_WA */
    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a20a:	e842 3100 	strex	r1, r3, [r2]
 800a20e:	2900      	cmp	r1, #0
 800a210:	d1f7      	bne.n	800a202 <UART_DMATransmitCplt+0x12>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a212:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800a214:	f7f7 faf2 	bl	80017fc <HAL_UART_TxCpltCallback>
}
 800a218:	bd08      	pop	{r3, pc}
 800a21a:	bf00      	nop

0800a21c <HAL_UART_TxHalfCpltCallback>:
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop

0800a220 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a220:	b508      	push	{r3, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a222:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 800a224:	f7ff fffa 	bl	800a21c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a228:	bd08      	pop	{r3, pc}
 800a22a:	bf00      	nop

0800a22c <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a22c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
{
 800a22e:	b510      	push	{r4, lr}

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a230:	6803      	ldr	r3, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a232:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a236:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a23a:	689a      	ldr	r2, [r3, #8]
 800a23c:	0612      	lsls	r2, r2, #24
 800a23e:	d501      	bpl.n	800a244 <UART_DMAError+0x18>
 800a240:	2921      	cmp	r1, #33	; 0x21
 800a242:	d013      	beq.n	800a26c <UART_DMAError+0x40>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	065b      	lsls	r3, r3, #25
 800a248:	d501      	bpl.n	800a24e <UART_DMAError+0x22>
 800a24a:	2c22      	cmp	r4, #34	; 0x22
 800a24c:	d008      	beq.n	800a260 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a24e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 800a252:	f043 0310 	orr.w	r3, r3, #16
 800a256:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a25a:	f7f7 fad3 	bl	8001804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a25e:	bd10      	pop	{r4, pc}
    huart->RxXferCount = 0U;
 800a260:	2300      	movs	r3, #0
 800a262:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a266:	f7ff ff2d 	bl	800a0c4 <UART_EndRxTransfer>
 800a26a:	e7f0      	b.n	800a24e <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 800a26c:	2200      	movs	r2, #0
 800a26e:	f8a0 2056 	strh.w	r2, [r0, #86]	; 0x56
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a272:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a276:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a27a:	e843 2100 	strex	r1, r2, [r3]
 800a27e:	2900      	cmp	r1, #0
 800a280:	d1f7      	bne.n	800a272 <UART_DMAError+0x46>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a282:	f103 0208 	add.w	r2, r3, #8
 800a286:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a28a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28e:	f103 0c08 	add.w	ip, r3, #8
 800a292:	e84c 2100 	strex	r1, r2, [ip]
 800a296:	2900      	cmp	r1, #0
 800a298:	d1f3      	bne.n	800a282 <UART_DMAError+0x56>
  huart->gState = HAL_UART_STATE_READY;
 800a29a:	2220      	movs	r2, #32
 800a29c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
}
 800a2a0:	e7d0      	b.n	800a244 <UART_DMAError+0x18>
 800a2a2:	bf00      	nop

0800a2a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2a4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 800a2a6:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2a8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
  huart->RxXferCount = 0U;
 800a2aa:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a2ae:	f7f7 faa9 	bl	8001804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2b2:	bd08      	pop	{r3, pc}

0800a2b4 <HAL_UART_IRQHandler>:
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a2b4:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a2b8:	6803      	ldr	r3, [r0, #0]
{
 800a2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a2be:	69da      	ldr	r2, [r3, #28]
{
 800a2c0:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800a2c2:	ea12 0f0c 	tst.w	r2, ip
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a2c6:	681d      	ldr	r5, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a2c8:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
 800a2ca:	f000 80d8 	beq.w	800a47e <HAL_UART_IRQHandler+0x1ca>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2ce:	4eae      	ldr	r6, [pc, #696]	; (800a588 <HAL_UART_IRQHandler+0x2d4>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2d0:	48ae      	ldr	r0, [pc, #696]	; (800a58c <HAL_UART_IRQHandler+0x2d8>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2d2:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2d6:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a2d8:	ea5c 0600 	orrs.w	r6, ip, r0
 800a2dc:	d16b      	bne.n	800a3b6 <HAL_UART_IRQHandler+0x102>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800a2e0:	2801      	cmp	r0, #1
 800a2e2:	d01e      	beq.n	800a322 <HAL_UART_IRQHandler+0x6e>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2e4:	02d7      	lsls	r7, r2, #11
 800a2e6:	d502      	bpl.n	800a2ee <HAL_UART_IRQHandler+0x3a>
 800a2e8:	024e      	lsls	r6, r1, #9
 800a2ea:	f100 80fe 	bmi.w	800a4ea <HAL_UART_IRQHandler+0x236>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a2ee:	0610      	lsls	r0, r2, #24
 800a2f0:	d506      	bpl.n	800a300 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a2f2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a2f6:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a2fa:	4301      	orrs	r1, r0
 800a2fc:	f040 80ed 	bne.w	800a4da <HAL_UART_IRQHandler+0x226>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a300:	0657      	lsls	r7, r2, #25
 800a302:	d502      	bpl.n	800a30a <HAL_UART_IRQHandler+0x56>
 800a304:	066e      	lsls	r6, r5, #25
 800a306:	f100 80cb 	bmi.w	800a4a0 <HAL_UART_IRQHandler+0x1ec>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a30a:	0210      	lsls	r0, r2, #8
 800a30c:	d502      	bpl.n	800a314 <HAL_UART_IRQHandler+0x60>
 800a30e:	0069      	lsls	r1, r5, #1
 800a310:	f100 80f7 	bmi.w	800a502 <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a314:	01d3      	lsls	r3, r2, #7
 800a316:	d502      	bpl.n	800a31e <HAL_UART_IRQHandler+0x6a>
 800a318:	2d00      	cmp	r5, #0
 800a31a:	f2c0 813d 	blt.w	800a598 <HAL_UART_IRQHandler+0x2e4>
}
 800a31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a322:	06d6      	lsls	r6, r2, #27
 800a324:	d5de      	bpl.n	800a2e4 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a326:	06e8      	lsls	r0, r5, #27
 800a328:	d5dc      	bpl.n	800a2e4 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a32a:	2210      	movs	r2, #16
 800a32c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	0652      	lsls	r2, r2, #25
 800a332:	f140 80f2 	bpl.w	800a51a <HAL_UART_IRQHandler+0x266>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a336:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a33a:	6802      	ldr	r2, [r0, #0]
 800a33c:	6c91      	ldr	r1, [r2, #72]	; 0x48
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a33e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a342:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800a344:	2900      	cmp	r1, #0
 800a346:	f000 8131 	beq.w	800a5ac <HAL_UART_IRQHandler+0x2f8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a34a:	428a      	cmp	r2, r1
 800a34c:	f240 812e 	bls.w	800a5ac <HAL_UART_IRQHandler+0x2f8>
        huart->RxXferCount = nb_remaining_rx_data;
 800a350:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
        if (huart->hdmarx->Mode != DMA_LINKEDLIST_CIRCULAR)
 800a354:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800a356:	2981      	cmp	r1, #129	; 0x81
 800a358:	d023      	beq.n	800a3a2 <HAL_UART_IRQHandler+0xee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a35a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a35e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	e843 2100 	strex	r1, r2, [r3]
 800a366:	2900      	cmp	r1, #0
 800a368:	d1f7      	bne.n	800a35a <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36a:	f103 0208 	add.w	r2, r3, #8
 800a36e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a372:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a376:	f103 0508 	add.w	r5, r3, #8
 800a37a:	e845 2100 	strex	r1, r2, [r5]
 800a37e:	2900      	cmp	r1, #0
 800a380:	d1f3      	bne.n	800a36a <HAL_UART_IRQHandler+0xb6>
          huart->RxState = HAL_UART_STATE_READY;
 800a382:	2220      	movs	r2, #32
 800a384:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a388:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a38e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a392:	e843 2100 	strex	r1, r2, [r3]
 800a396:	2900      	cmp	r1, #0
 800a398:	d1f7      	bne.n	800a38a <HAL_UART_IRQHandler+0xd6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a39a:	f7fa fa8b 	bl	80048b4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a39e:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a3a2:	2302      	movs	r3, #2
 800a3a4:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a3a6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800a3aa:	4620      	mov	r0, r4
 800a3ac:	1ad2      	subs	r2, r2, r3
 800a3ae:	b291      	uxth	r1, r2
 800a3b0:	f7f7 fa26 	bl	8001800 <HAL_UARTEx_RxEventCallback>
 800a3b4:	e7b3      	b.n	800a31e <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a3b6:	07d6      	lsls	r6, r2, #31
 800a3b8:	461f      	mov	r7, r3
 800a3ba:	d509      	bpl.n	800a3d0 <HAL_UART_IRQHandler+0x11c>
 800a3bc:	05ee      	lsls	r6, r5, #23
 800a3be:	d507      	bpl.n	800a3d0 <HAL_UART_IRQHandler+0x11c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a3c0:	2601      	movs	r6, #1
 800a3c2:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a3c4:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800a3c8:	f046 0601 	orr.w	r6, r6, #1
 800a3cc:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3d0:	0796      	lsls	r6, r2, #30
 800a3d2:	d575      	bpl.n	800a4c0 <HAL_UART_IRQHandler+0x20c>
 800a3d4:	07ce      	lsls	r6, r1, #31
 800a3d6:	d509      	bpl.n	800a3ec <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a3d8:	2602      	movs	r6, #2
 800a3da:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a3dc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800a3e0:	f046 0604 	orr.w	r6, r6, #4
 800a3e4:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a3e8:	0756      	lsls	r6, r2, #29
 800a3ea:	d46d      	bmi.n	800a4c8 <HAL_UART_IRQHandler+0x214>
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a3ec:	0716      	lsls	r6, r2, #28
 800a3ee:	d50b      	bpl.n	800a408 <HAL_UART_IRQHandler+0x154>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a3f0:	f005 0620 	and.w	r6, r5, #32
 800a3f4:	4330      	orrs	r0, r6
 800a3f6:	d007      	beq.n	800a408 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3f8:	2008      	movs	r0, #8
 800a3fa:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a3fc:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
 800a400:	f040 0008 	orr.w	r0, r0, #8
 800a404:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a408:	0516      	lsls	r6, r2, #20
 800a40a:	d50a      	bpl.n	800a422 <HAL_UART_IRQHandler+0x16e>
 800a40c:	0168      	lsls	r0, r5, #5
 800a40e:	d508      	bpl.n	800a422 <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a410:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a414:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a416:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a41a:	f043 0320 	orr.w	r3, r3, #32
 800a41e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a422:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800a426:	2b00      	cmp	r3, #0
 800a428:	f43f af79 	beq.w	800a31e <HAL_UART_IRQHandler+0x6a>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a42c:	0693      	lsls	r3, r2, #26
 800a42e:	d506      	bpl.n	800a43e <HAL_UART_IRQHandler+0x18a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a430:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a434:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 800a438:	ea55 0301 	orrs.w	r3, r5, r1
 800a43c:	d166      	bne.n	800a50c <HAL_UART_IRQHandler+0x258>
      errorcode = huart->ErrorCode;
 800a43e:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a442:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a444:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44c:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 800a44e:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a450:	f000 80a7 	beq.w	800a5a2 <HAL_UART_IRQHandler+0x2ee>
        UART_EndRxTransfer(huart);
 800a454:	f7ff fe36 	bl	800a0c4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a458:	6823      	ldr	r3, [r4, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	065f      	lsls	r7, r3, #25
 800a45e:	d54c      	bpl.n	800a4fa <HAL_UART_IRQHandler+0x246>
          if (huart->hdmarx != NULL)
 800a460:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a464:	2800      	cmp	r0, #0
 800a466:	d048      	beq.n	800a4fa <HAL_UART_IRQHandler+0x246>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a468:	4b49      	ldr	r3, [pc, #292]	; (800a590 <HAL_UART_IRQHandler+0x2dc>)
 800a46a:	66c3      	str	r3, [r0, #108]	; 0x6c
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a46c:	f7fa fa74 	bl	8004958 <HAL_DMA_Abort_IT>
 800a470:	2800      	cmp	r0, #0
 800a472:	f43f af54 	beq.w	800a31e <HAL_UART_IRQHandler+0x6a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a476:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800a47a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800a47c:	e00d      	b.n	800a49a <HAL_UART_IRQHandler+0x1e6>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a47e:	0697      	lsls	r7, r2, #26
 800a480:	f57f af2d 	bpl.w	800a2de <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a484:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a488:	f001 5780 	and.w	r7, r1, #268435456	; 0x10000000
 800a48c:	433e      	orrs	r6, r7
 800a48e:	f43f af26 	beq.w	800a2de <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
 800a492:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800a494:	2b00      	cmp	r3, #0
 800a496:	f43f af42 	beq.w	800a31e <HAL_UART_IRQHandler+0x6a>
}
 800a49a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a49e:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a0:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4a8:	e843 2100 	strex	r1, r2, [r3]
 800a4ac:	2900      	cmp	r1, #0
 800a4ae:	d1f7      	bne.n	800a4a0 <HAL_UART_IRQHandler+0x1ec>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4b0:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a4b2:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800a4b4:	67a1      	str	r1, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800a4b6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  HAL_UART_TxCpltCallback(huart);
 800a4ba:	f7f7 f99f 	bl	80017fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4be:	e72e      	b.n	800a31e <HAL_UART_IRQHandler+0x6a>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4c0:	0756      	lsls	r6, r2, #29
 800a4c2:	d593      	bpl.n	800a3ec <HAL_UART_IRQHandler+0x138>
 800a4c4:	07ce      	lsls	r6, r1, #31
 800a4c6:	d591      	bpl.n	800a3ec <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a4c8:	2604      	movs	r6, #4
 800a4ca:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a4cc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
 800a4d0:	f046 0602 	orr.w	r6, r6, #2
 800a4d4:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
 800a4d8:	e788      	b.n	800a3ec <HAL_UART_IRQHandler+0x138>
    if (huart->TxISR != NULL)
 800a4da:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f43f af1e 	beq.w	800a31e <HAL_UART_IRQHandler+0x6a>
      huart->TxISR(huart);
 800a4e2:	4620      	mov	r0, r4
}
 800a4e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 800a4e8:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a4ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800a4ee:	4620      	mov	r0, r4
}
 800a4f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a4f4:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800a4f6:	f000 badf 	b.w	800aab8 <HAL_UARTEx_WakeupCallback>
            HAL_UART_ErrorCallback(huart);
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f7f7 f982 	bl	8001804 <HAL_UART_ErrorCallback>
 800a500:	e70d      	b.n	800a31e <HAL_UART_IRQHandler+0x6a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a502:	4620      	mov	r0, r4
}
 800a504:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a508:	f000 bada 	b.w	800aac0 <HAL_UARTEx_TxFifoEmptyCallback>
        if (huart->RxISR != NULL)
 800a50c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d095      	beq.n	800a43e <HAL_UART_IRQHandler+0x18a>
          huart->RxISR(huart);
 800a512:	4620      	mov	r0, r4
 800a514:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a516:	6827      	ldr	r7, [r4, #0]
 800a518:	e791      	b.n	800a43e <HAL_UART_IRQHandler+0x18a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a51a:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      if ((huart->RxXferCount > 0U)
 800a51e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a522:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800a524:	b292      	uxth	r2, r2
 800a526:	2a00      	cmp	r2, #0
 800a528:	f43f aef9 	beq.w	800a31e <HAL_UART_IRQHandler+0x6a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a52c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800a530:	1a51      	subs	r1, r2, r1
 800a532:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800a534:	2900      	cmp	r1, #0
 800a536:	f43f aef2 	beq.w	800a31e <HAL_UART_IRQHandler+0x6a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53a:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a53e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	e843 2000 	strex	r0, r2, [r3]
 800a546:	2800      	cmp	r0, #0
 800a548:	d1f7      	bne.n	800a53a <HAL_UART_IRQHandler+0x286>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a54a:	4d12      	ldr	r5, [pc, #72]	; (800a594 <HAL_UART_IRQHandler+0x2e0>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a54c:	f103 0208 	add.w	r2, r3, #8
 800a550:	e852 2f00 	ldrex	r2, [r2]
 800a554:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a556:	f103 0608 	add.w	r6, r3, #8
 800a55a:	e846 2000 	strex	r0, r2, [r6]
 800a55e:	2800      	cmp	r0, #0
 800a560:	d1f4      	bne.n	800a54c <HAL_UART_IRQHandler+0x298>
        huart->RxState = HAL_UART_STATE_READY;
 800a562:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800a564:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a566:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a56a:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a570:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a574:	e843 2000 	strex	r0, r2, [r3]
 800a578:	2800      	cmp	r0, #0
 800a57a:	d1f7      	bne.n	800a56c <HAL_UART_IRQHandler+0x2b8>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a57c:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a57e:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a580:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a582:	f7f7 f93d 	bl	8001800 <HAL_UARTEx_RxEventCallback>
 800a586:	e6ca      	b.n	800a31e <HAL_UART_IRQHandler+0x6a>
 800a588:	04000120 	.word	0x04000120
 800a58c:	10000001 	.word	0x10000001
 800a590:	0800a2a5 	.word	0x0800a2a5
 800a594:	effffffe 	.word	0xeffffffe
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a598:	4620      	mov	r0, r4
}
 800a59a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a59e:	f000 ba8d 	b.w	800aabc <HAL_UARTEx_RxFifoFullCallback>
        HAL_UART_ErrorCallback(huart);
 800a5a2:	f7f7 f92f 	bl	8001804 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5a6:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
 800a5aa:	e6b8      	b.n	800a31e <HAL_UART_IRQHandler+0x6a>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a5ac:	4291      	cmp	r1, r2
 800a5ae:	f47f aeb6 	bne.w	800a31e <HAL_UART_IRQHandler+0x6a>
          if (huart->hdmarx->Mode == DMA_LINKEDLIST_CIRCULAR)
 800a5b2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800a5b4:	2b81      	cmp	r3, #129	; 0x81
 800a5b6:	f47f aeb2 	bne.w	800a31e <HAL_UART_IRQHandler+0x6a>
 800a5ba:	e7df      	b.n	800a57c <HAL_UART_IRQHandler+0x2c8>

0800a5bc <UART_SetConfig>:
{
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5c0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5c2:	69c5      	ldr	r5, [r0, #28]
 800a5c4:	6882      	ldr	r2, [r0, #8]
 800a5c6:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5c8:	4987      	ldr	r1, [pc, #540]	; (800a7e8 <UART_SetConfig+0x22c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5ca:	4302      	orrs	r2, r0
 800a5cc:	6960      	ldr	r0, [r4, #20]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5ce:	4e87      	ldr	r6, [pc, #540]	; (800a7ec <UART_SetConfig+0x230>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5d0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5d2:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5d4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5d6:	4001      	ands	r1, r0
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	68e1      	ldr	r1, [r4, #12]
 800a5e0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800a5e4:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5e6:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5e8:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5ea:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5ec:	f000 80bb 	beq.w	800a766 <UART_SetConfig+0x1aa>
 800a5f0:	497f      	ldr	r1, [pc, #508]	; (800a7f0 <UART_SetConfig+0x234>)
 800a5f2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a5f4:	6899      	ldr	r1, [r3, #8]
 800a5f6:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800a5fa:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a5fe:	d02a      	beq.n	800a656 <UART_SetConfig+0x9a>
    tmpreg |= huart->Init.OneBitSampling;
 800a600:	6a20      	ldr	r0, [r4, #32]
 800a602:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a604:	430a      	orrs	r2, r1
 800a606:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a60a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a60c:	f022 020f 	bic.w	r2, r2, #15
 800a610:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a612:	4978      	ldr	r1, [pc, #480]	; (800a7f4 <UART_SetConfig+0x238>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a614:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a616:	428b      	cmp	r3, r1
 800a618:	d17a      	bne.n	800a710 <UART_SetConfig+0x154>
 800a61a:	2001      	movs	r0, #1
 800a61c:	2100      	movs	r1, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a61e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
 800a622:	d05d      	beq.n	800a6e0 <UART_SetConfig+0x124>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a624:	f7fd fb92 	bl	8007d4c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800a628:	2800      	cmp	r0, #0
 800a62a:	d051      	beq.n	800a6d0 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a62e:	4b72      	ldr	r3, [pc, #456]	; (800a7f8 <UART_SetConfig+0x23c>)
 800a630:	6862      	ldr	r2, [r4, #4]
 800a632:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a636:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a63a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a63e:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800a642:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a646:	f1a3 0210 	sub.w	r2, r3, #16
 800a64a:	428a      	cmp	r2, r1
 800a64c:	d85e      	bhi.n	800a70c <UART_SetConfig+0x150>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a64e:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a650:	2000      	movs	r0, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a652:	60d3      	str	r3, [r2, #12]
 800a654:	e03d      	b.n	800a6d2 <UART_SetConfig+0x116>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a656:	430a      	orrs	r2, r1
 800a658:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a65c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a65e:	f022 020f 	bic.w	r2, r2, #15
 800a662:	430a      	orrs	r2, r1
 800a664:	62da      	str	r2, [r3, #44]	; 0x2c
  if (UART_INSTANCE_LOWPOWER(huart))
 800a666:	4a62      	ldr	r2, [pc, #392]	; (800a7f0 <UART_SetConfig+0x234>)
 800a668:	2000      	movs	r0, #0
 800a66a:	4293      	cmp	r3, r2
 800a66c:	f04f 0100 	mov.w	r1, #0
 800a670:	d1d5      	bne.n	800a61e <UART_SetConfig+0x62>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a672:	f7fd fb6b 	bl	8007d4c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800a676:	b358      	cbz	r0, 800a6d0 <UART_SetConfig+0x114>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a678:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a67a:	4a5f      	ldr	r2, [pc, #380]	; (800a7f8 <UART_SetConfig+0x23c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a67c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a67e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a682:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a686:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a68a:	4299      	cmp	r1, r3
 800a68c:	d83e      	bhi.n	800a70c <UART_SetConfig+0x150>
 800a68e:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800a692:	d83b      	bhi.n	800a70c <UART_SetConfig+0x150>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a694:	2300      	movs	r3, #0
 800a696:	4619      	mov	r1, r3
 800a698:	f7f6 fac8 	bl	8000c2c <__aeabi_uldivmod>
 800a69c:	4606      	mov	r6, r0
 800a69e:	462a      	mov	r2, r5
 800a6a0:	ea4f 0c55 	mov.w	ip, r5, lsr #1
 800a6a4:	0209      	lsls	r1, r1, #8
 800a6a6:	0235      	lsls	r5, r6, #8
 800a6a8:	eb15 000c 	adds.w	r0, r5, ip
 800a6ac:	ea41 6116 	orr.w	r1, r1, r6, lsr #24
 800a6b0:	f04f 0300 	mov.w	r3, #0
 800a6b4:	f141 0100 	adc.w	r1, r1, #0
 800a6b8:	f7f6 fab8 	bl	8000c2c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6bc:	4a4f      	ldr	r2, [pc, #316]	; (800a7fc <UART_SetConfig+0x240>)
 800a6be:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 800a6c2:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c4:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6c6:	d821      	bhi.n	800a70c <UART_SetConfig+0x150>
          huart->Instance->BRR = usartdiv;
 800a6c8:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6ca:	2000      	movs	r0, #0
          huart->Instance->BRR = usartdiv;
 800a6cc:	60d3      	str	r3, [r2, #12]
 800a6ce:	e000      	b.n	800a6d2 <UART_SetConfig+0x116>
  HAL_StatusTypeDef ret               = HAL_OK;
 800a6d0:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800a6d2:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800a6d4:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 800a6d8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800a6da:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800a6dc:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800a6de:	bd70      	pop	{r4, r5, r6, pc}
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a6e0:	f7fd fb34 	bl	8007d4c <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d0f3      	beq.n	800a6d0 <UART_SetConfig+0x114>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6e8:	4b43      	ldr	r3, [pc, #268]	; (800a7f8 <UART_SetConfig+0x23c>)
 800a6ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a6ec:	6862      	ldr	r2, [r4, #4]
 800a6ee:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800a6f2:	0853      	lsrs	r3, r2, #1
 800a6f4:	fbb0 f0f1 	udiv	r0, r0, r1
 800a6f8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800a6fc:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a700:	f64f 71ef 	movw	r1, #65519	; 0xffef
 800a704:	f1a0 0310 	sub.w	r3, r0, #16
 800a708:	428b      	cmp	r3, r1
 800a70a:	d94c      	bls.n	800a7a6 <UART_SetConfig+0x1ea>
        ret = HAL_ERROR;
 800a70c:	2001      	movs	r0, #1
 800a70e:	e7e0      	b.n	800a6d2 <UART_SetConfig+0x116>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a710:	4a3b      	ldr	r2, [pc, #236]	; (800a800 <UART_SetConfig+0x244>)
 800a712:	4293      	cmp	r3, r2
 800a714:	d038      	beq.n	800a788 <UART_SetConfig+0x1cc>
 800a716:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d03a      	beq.n	800a794 <UART_SetConfig+0x1d8>
 800a71e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a722:	4293      	cmp	r3, r2
 800a724:	d039      	beq.n	800a79a <UART_SetConfig+0x1de>
 800a726:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d02f      	beq.n	800a78e <UART_SetConfig+0x1d2>
 800a72e:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800a732:	4293      	cmp	r3, r2
 800a734:	d034      	beq.n	800a7a0 <UART_SetConfig+0x1e4>
 800a736:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d040      	beq.n	800a7c0 <UART_SetConfig+0x204>
 800a73e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a742:	4293      	cmp	r3, r2
 800a744:	d039      	beq.n	800a7ba <UART_SetConfig+0x1fe>
 800a746:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d03b      	beq.n	800a7c6 <UART_SetConfig+0x20a>
 800a74e:	f5a2 52c0 	sub.w	r2, r2, #6144	; 0x1800
 800a752:	4293      	cmp	r3, r2
 800a754:	d03b      	beq.n	800a7ce <UART_SetConfig+0x212>
 800a756:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d13b      	bne.n	800a7d6 <UART_SetConfig+0x21a>
 800a75e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a762:	2100      	movs	r1, #0
 800a764:	e75b      	b.n	800a61e <UART_SetConfig+0x62>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a766:	6899      	ldr	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a768:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a76c:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 800a770:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a774:	430a      	orrs	r2, r1
 800a776:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a77a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a77c:	f022 020f 	bic.w	r2, r2, #15
 800a780:	430a      	orrs	r2, r1
 800a782:	62da      	str	r2, [r3, #44]	; 0x2c
 800a784:	2100      	movs	r1, #0
 800a786:	e774      	b.n	800a672 <UART_SetConfig+0xb6>
 800a788:	2002      	movs	r0, #2
 800a78a:	2100      	movs	r1, #0
 800a78c:	e747      	b.n	800a61e <UART_SetConfig+0x62>
 800a78e:	2010      	movs	r0, #16
 800a790:	2100      	movs	r1, #0
 800a792:	e744      	b.n	800a61e <UART_SetConfig+0x62>
 800a794:	2004      	movs	r0, #4
 800a796:	2100      	movs	r1, #0
 800a798:	e741      	b.n	800a61e <UART_SetConfig+0x62>
 800a79a:	2008      	movs	r0, #8
 800a79c:	2100      	movs	r1, #0
 800a79e:	e73e      	b.n	800a61e <UART_SetConfig+0x62>
 800a7a0:	2020      	movs	r0, #32
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	e73b      	b.n	800a61e <UART_SetConfig+0x62>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7a6:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 800a7aa:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7ac:	f3c0 0042 	ubfx	r0, r0, #1, #3
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7b0:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
 800a7b2:	4303      	orrs	r3, r0
 800a7b4:	60d3      	str	r3, [r2, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a7b6:	2000      	movs	r0, #0
 800a7b8:	e78b      	b.n	800a6d2 <UART_SetConfig+0x116>
 800a7ba:	2080      	movs	r0, #128	; 0x80
 800a7bc:	2100      	movs	r1, #0
 800a7be:	e72e      	b.n	800a61e <UART_SetConfig+0x62>
 800a7c0:	2040      	movs	r0, #64	; 0x40
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	e72b      	b.n	800a61e <UART_SetConfig+0x62>
 800a7c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a7ca:	2100      	movs	r1, #0
 800a7cc:	e727      	b.n	800a61e <UART_SetConfig+0x62>
 800a7ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	e723      	b.n	800a61e <UART_SetConfig+0x62>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a7d6:	f502 52c0 	add.w	r2, r2, #6144	; 0x1800
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	f47f af43 	bne.w	800a666 <UART_SetConfig+0xaa>
 800a7e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a7e4:	2100      	movs	r1, #0
  if (UART_INSTANCE_LOWPOWER(huart))
 800a7e6:	e71a      	b.n	800a61e <UART_SetConfig+0x62>
 800a7e8:	cfff69f3 	.word	0xcfff69f3
 800a7ec:	44002400 	.word	0x44002400
 800a7f0:	54002400 	.word	0x54002400
 800a7f4:	40013800 	.word	0x40013800
 800a7f8:	0801bc40 	.word	0x0801bc40
 800a7fc:	000ffcff 	.word	0x000ffcff
 800a800:	40004400 	.word	0x40004400

0800a804 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a804:	6a83      	ldr	r3, [r0, #40]	; 0x28
{
 800a806:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a808:	071a      	lsls	r2, r3, #28
 800a80a:	d506      	bpl.n	800a81a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a80c:	6801      	ldr	r1, [r0, #0]
 800a80e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800a810:	684a      	ldr	r2, [r1, #4]
 800a812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a816:	4322      	orrs	r2, r4
 800a818:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a81a:	07dc      	lsls	r4, r3, #31
 800a81c:	d506      	bpl.n	800a82c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a81e:	6801      	ldr	r1, [r0, #0]
 800a820:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800a822:	684a      	ldr	r2, [r1, #4]
 800a824:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a828:	4322      	orrs	r2, r4
 800a82a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a82c:	0799      	lsls	r1, r3, #30
 800a82e:	d506      	bpl.n	800a83e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a830:	6801      	ldr	r1, [r0, #0]
 800a832:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800a834:	684a      	ldr	r2, [r1, #4]
 800a836:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a83a:	4322      	orrs	r2, r4
 800a83c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a83e:	075a      	lsls	r2, r3, #29
 800a840:	d506      	bpl.n	800a850 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a842:	6801      	ldr	r1, [r0, #0]
 800a844:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800a846:	684a      	ldr	r2, [r1, #4]
 800a848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a84c:	4322      	orrs	r2, r4
 800a84e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a850:	06dc      	lsls	r4, r3, #27
 800a852:	d506      	bpl.n	800a862 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a854:	6801      	ldr	r1, [r0, #0]
 800a856:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800a858:	688a      	ldr	r2, [r1, #8]
 800a85a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a85e:	4322      	orrs	r2, r4
 800a860:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a862:	0699      	lsls	r1, r3, #26
 800a864:	d506      	bpl.n	800a874 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a866:	6801      	ldr	r1, [r0, #0]
 800a868:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800a86a:	688a      	ldr	r2, [r1, #8]
 800a86c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a870:	4322      	orrs	r2, r4
 800a872:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a874:	065a      	lsls	r2, r3, #25
 800a876:	d50a      	bpl.n	800a88e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a878:	6801      	ldr	r1, [r0, #0]
 800a87a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800a87c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a87e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a882:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800a886:	ea42 0204 	orr.w	r2, r2, r4
 800a88a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a88c:	d00b      	beq.n	800a8a6 <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a88e:	061b      	lsls	r3, r3, #24
 800a890:	d506      	bpl.n	800a8a0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a892:	6802      	ldr	r2, [r0, #0]
 800a894:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800a896:	6853      	ldr	r3, [r2, #4]
 800a898:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800a89c:	430b      	orrs	r3, r1
 800a89e:	6053      	str	r3, [r2, #4]
}
 800a8a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8a4:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8a6:	684a      	ldr	r2, [r1, #4]
 800a8a8:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800a8aa:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800a8ae:	4322      	orrs	r2, r4
 800a8b0:	604a      	str	r2, [r1, #4]
 800a8b2:	e7ec      	b.n	800a88e <UART_AdvFeatureConfig+0x8a>

0800a8b4 <UART_WaitOnFlagUntilTimeout>:
{
 800a8b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8b8:	9f08      	ldr	r7, [sp, #32]
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	4680      	mov	r8, r0
 800a8be:	4616      	mov	r6, r2
 800a8c0:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8c2:	6801      	ldr	r1, [r0, #0]
 800a8c4:	e001      	b.n	800a8ca <UART_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800a8c6:	1c78      	adds	r0, r7, #1
 800a8c8:	d10d      	bne.n	800a8e6 <UART_WaitOnFlagUntilTimeout+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ca:	69cc      	ldr	r4, [r1, #28]
 800a8cc:	ea35 0304 	bics.w	r3, r5, r4
 800a8d0:	bf0c      	ite	eq
 800a8d2:	f04f 0c01 	moveq.w	ip, #1
 800a8d6:	f04f 0c00 	movne.w	ip, #0
 800a8da:	45b4      	cmp	ip, r6
 800a8dc:	d0f3      	beq.n	800a8c6 <UART_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800a8de:	2300      	movs	r3, #0
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8e6:	f7f9 fceb 	bl	80042c0 <HAL_GetTick>
 800a8ea:	eba0 0009 	sub.w	r0, r0, r9
 800a8ee:	42b8      	cmp	r0, r7
 800a8f0:	d81d      	bhi.n	800a92e <UART_WaitOnFlagUntilTimeout+0x7a>
 800a8f2:	b1e7      	cbz	r7, 800a92e <UART_WaitOnFlagUntilTimeout+0x7a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a8f4:	f8d8 1000 	ldr.w	r1, [r8]
 800a8f8:	680b      	ldr	r3, [r1, #0]
 800a8fa:	075a      	lsls	r2, r3, #29
 800a8fc:	d5e5      	bpl.n	800a8ca <UART_WaitOnFlagUntilTimeout+0x16>
 800a8fe:	2d80      	cmp	r5, #128	; 0x80
 800a900:	d0e3      	beq.n	800a8ca <UART_WaitOnFlagUntilTimeout+0x16>
 800a902:	2d40      	cmp	r5, #64	; 0x40
 800a904:	d0e1      	beq.n	800a8ca <UART_WaitOnFlagUntilTimeout+0x16>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a906:	69cc      	ldr	r4, [r1, #28]
 800a908:	f014 0408 	ands.w	r4, r4, #8
 800a90c:	d111      	bne.n	800a932 <UART_WaitOnFlagUntilTimeout+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a90e:	69cb      	ldr	r3, [r1, #28]
 800a910:	051b      	lsls	r3, r3, #20
 800a912:	d5da      	bpl.n	800a8ca <UART_WaitOnFlagUntilTimeout+0x16>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a914:	f44f 6300 	mov.w	r3, #2048	; 0x800
          UART_EndRxTransfer(huart);
 800a918:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a91a:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800a91c:	f7ff fbd2 	bl	800a0c4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a920:	2220      	movs	r2, #32
          return HAL_TIMEOUT;
 800a922:	2303      	movs	r3, #3
          __HAL_UNLOCK(huart);
 800a924:	f888 4084 	strb.w	r4, [r8, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a928:	f8c8 2090 	str.w	r2, [r8, #144]	; 0x90
          return HAL_TIMEOUT;
 800a92c:	e7d8      	b.n	800a8e0 <UART_WaitOnFlagUntilTimeout+0x2c>
        return HAL_TIMEOUT;
 800a92e:	2303      	movs	r3, #3
 800a930:	e7d6      	b.n	800a8e0 <UART_WaitOnFlagUntilTimeout+0x2c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a932:	2408      	movs	r4, #8
          UART_EndRxTransfer(huart);
 800a934:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a936:	620c      	str	r4, [r1, #32]
          UART_EndRxTransfer(huart);
 800a938:	f7ff fbc4 	bl	800a0c4 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800a93c:	2200      	movs	r2, #0
          return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a940:	f8c8 4090 	str.w	r4, [r8, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800a944:	f888 2084 	strb.w	r2, [r8, #132]	; 0x84
          return HAL_ERROR;
 800a948:	e7ca      	b.n	800a8e0 <UART_WaitOnFlagUntilTimeout+0x2c>
 800a94a:	bf00      	nop

0800a94c <UART_CheckIdleState>:
{
 800a94c:	b5f0      	push	{r4, r5, r6, r7, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a94e:	2600      	movs	r6, #0
{
 800a950:	4604      	mov	r4, r0
 800a952:	b083      	sub	sp, #12
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a954:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800a958:	f7f9 fcb2 	bl	80042c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a95c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800a95e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	0712      	lsls	r2, r2, #28
 800a964:	d40f      	bmi.n	800a986 <UART_CheckIdleState+0x3a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	075b      	lsls	r3, r3, #29
 800a96a:	d428      	bmi.n	800a9be <UART_CheckIdleState+0x72>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a96c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800a96e:	2220      	movs	r2, #32
  return HAL_OK;
 800a970:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800a972:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800a976:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a97a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a97e:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a980:	6723      	str	r3, [r4, #112]	; 0x70
}
 800a982:	b003      	add	sp, #12
 800a984:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a986:	f06f 477e 	mvn.w	r7, #4261412864	; 0xfe000000
 800a98a:	4603      	mov	r3, r0
 800a98c:	4632      	mov	r2, r6
 800a98e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a992:	4620      	mov	r0, r4
 800a994:	9700      	str	r7, [sp, #0]
 800a996:	f7ff ff8d 	bl	800a8b4 <UART_WaitOnFlagUntilTimeout>
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	2800      	cmp	r0, #0
 800a99e:	d0e2      	beq.n	800a966 <UART_CheckIdleState+0x1a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a9a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9a8:	e843 2100 	strex	r1, r2, [r3]
 800a9ac:	2900      	cmp	r1, #0
 800a9ae:	d1f7      	bne.n	800a9a0 <UART_CheckIdleState+0x54>
      huart->gState = HAL_UART_STATE_READY;
 800a9b0:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800a9b2:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800a9b4:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 800a9b8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800a9bc:	e7e1      	b.n	800a982 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9be:	f06f 467e 	mvn.w	r6, #4261412864	; 0xfe000000
 800a9c2:	462b      	mov	r3, r5
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	9600      	str	r6, [sp, #0]
 800a9ce:	f7ff ff71 	bl	800a8b4 <UART_WaitOnFlagUntilTimeout>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d0ca      	beq.n	800a96c <UART_CheckIdleState+0x20>
 800a9d6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e0:	e843 2100 	strex	r1, r2, [r3]
 800a9e4:	2900      	cmp	r1, #0
 800a9e6:	d1f7      	bne.n	800a9d8 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e8:	f103 0208 	add.w	r2, r3, #8
 800a9ec:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9f0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9f4:	f103 0008 	add.w	r0, r3, #8
 800a9f8:	e840 2100 	strex	r1, r2, [r0]
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	d1f3      	bne.n	800a9e8 <UART_CheckIdleState+0x9c>
      huart->RxState = HAL_UART_STATE_READY;
 800aa00:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 800aa02:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800aa04:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 800aa08:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 800aa0c:	e7b9      	b.n	800a982 <UART_CheckIdleState+0x36>
 800aa0e:	bf00      	nop

0800aa10 <HAL_UART_Init>:
  if (huart == NULL)
 800aa10:	b380      	cbz	r0, 800aa74 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800aa12:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 800aa16:	b510      	push	{r4, lr}
 800aa18:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800aa1a:	b333      	cbz	r3, 800aa6a <HAL_UART_Init+0x5a>
  huart->gState = HAL_UART_STATE_BUSY;
 800aa1c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800aa1e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800aa20:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800aa24:	6813      	ldr	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  __HAL_UART_DISABLE(huart);
 800aa28:	f023 0301 	bic.w	r3, r3, #1
 800aa2c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800aa2e:	b9c1      	cbnz	r1, 800aa62 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800aa30:	4620      	mov	r0, r4
 800aa32:	f7ff fdc3 	bl	800a5bc <UART_SetConfig>
 800aa36:	2801      	cmp	r0, #1
 800aa38:	d011      	beq.n	800aa5e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa3a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800aa3c:	4620      	mov	r0, r4
}
 800aa3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800aa48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800aa4a:	689a      	ldr	r2, [r3, #8]
 800aa4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800aa50:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800aa52:	681a      	ldr	r2, [r3, #0]
 800aa54:	f042 0201 	orr.w	r2, r2, #1
 800aa58:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800aa5a:	f7ff bf77 	b.w	800a94c <UART_CheckIdleState>
}
 800aa5e:	2001      	movs	r0, #1
 800aa60:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800aa62:	4620      	mov	r0, r4
 800aa64:	f7ff fece 	bl	800a804 <UART_AdvFeatureConfig>
 800aa68:	e7e2      	b.n	800aa30 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 800aa6a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800aa6e:	f7f6 fd77 	bl	8001560 <HAL_UART_MspInit>
 800aa72:	e7d3      	b.n	800aa1c <HAL_UART_Init+0xc>
}
 800aa74:	2001      	movs	r0, #1
 800aa76:	4770      	bx	lr

0800aa78 <UARTEx_SetNbDataToProcess.part.0>:
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa78:	6803      	ldr	r3, [r0, #0]
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
 800aa7a:	b430      	push	{r4, r5}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa7c:	6899      	ldr	r1, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa7e:	689b      	ldr	r3, [r3, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa80:	4d0b      	ldr	r5, [pc, #44]	; (800aab0 <UARTEx_SetNbDataToProcess.part.0+0x38>)
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa82:	4c0c      	ldr	r4, [pc, #48]	; (800aab4 <UARTEx_SetNbDataToProcess.part.0+0x3c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa84:	ea4f 7c53 	mov.w	ip, r3, lsr #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa88:	f3c1 6142 	ubfx	r1, r1, #25, #3
 800aa8c:	5c6b      	ldrb	r3, [r5, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa8e:	f815 200c 	ldrb.w	r2, [r5, ip]
                               (uint16_t)denominator[rx_fifo_threshold];
 800aa92:	5c61      	ldrb	r1, [r4, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800aa94:	f814 500c 	ldrb.w	r5, [r4, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa98:	00d2      	lsls	r2, r2, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aa9a:	00db      	lsls	r3, r3, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa9c:	fbb2 f2f5 	udiv	r2, r2, r5
  }
}
 800aaa0:	bc30      	pop	{r4, r5}
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaa2:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aaa6:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaaa:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
}
 800aaae:	4770      	bx	lr
 800aab0:	0801bc60 	.word	0x0801bc60
 800aab4:	0801bc58 	.word	0x0801bc58

0800aab8 <HAL_UARTEx_WakeupCallback>:
}
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop

0800aabc <HAL_UARTEx_RxFifoFullCallback>:
 800aabc:	4770      	bx	lr
 800aabe:	bf00      	nop

0800aac0 <HAL_UARTEx_TxFifoEmptyCallback>:
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop

0800aac4 <HAL_UARTEx_EnableFifoMode>:
{
 800aac4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800aac6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d01b      	beq.n	800ab06 <HAL_UARTEx_EnableFifoMode+0x42>
 800aace:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 800aad0:	2224      	movs	r2, #36	; 0x24
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800aad2:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aad6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800aad8:	f880 1084 	strb.w	r1, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800aadc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aae0:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800aae2:	6819      	ldr	r1, [r3, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aae4:	432a      	orrs	r2, r5
  __HAL_UART_DISABLE(huart);
 800aae6:	f021 0101 	bic.w	r1, r1, #1
 800aaea:	6019      	str	r1, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800aaec:	6645      	str	r5, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	f7ff ffc2 	bl	800aa78 <UARTEx_SetNbDataToProcess.part.0>
 800aaf4:	4604      	mov	r4, r0
  __HAL_UNLOCK(huart);
 800aaf6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 800aaf8:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800aafa:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  return HAL_OK;
 800aafe:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800ab00:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800ab04:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800ab06:	2002      	movs	r0, #2
}
 800ab08:	bd38      	pop	{r3, r4, r5, pc}
 800ab0a:	bf00      	nop

0800ab0c <HAL_UARTEx_SetTxFifoThreshold>:
  __HAL_LOCK(huart);
 800ab0c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d023      	beq.n	800ab5c <HAL_UARTEx_SetTxFifoThreshold+0x50>
{
 800ab14:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800ab16:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 800ab18:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab1a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800ab1c:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800ab20:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab24:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ab26:	681a      	ldr	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab28:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800ab2a:	f022 0201 	bic.w	r2, r2, #1
 800ab2e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab30:	689a      	ldr	r2, [r3, #8]
 800ab32:	4604      	mov	r4, r0
 800ab34:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 800ab38:	4311      	orrs	r1, r2
 800ab3a:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab3c:	b156      	cbz	r6, 800ab54 <HAL_UARTEx_SetTxFifoThreshold+0x48>
 800ab3e:	f7ff ff9b 	bl	800aa78 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab42:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 800ab44:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800ab46:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab48:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 800ab4a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800ab4e:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800ab52:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800ab54:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800ab58:	6682      	str	r2, [r0, #104]	; 0x68
 800ab5a:	e7f3      	b.n	800ab44 <HAL_UARTEx_SetTxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 800ab5c:	2002      	movs	r0, #2
}
 800ab5e:	4770      	bx	lr

0800ab60 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 800ab60:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d023      	beq.n	800abb0 <HAL_UARTEx_SetRxFifoThreshold+0x50>
{
 800ab68:	b570      	push	{r4, r5, r6, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 800ab6a:	2224      	movs	r2, #36	; 0x24
  __HAL_LOCK(huart);
 800ab6c:	2501      	movs	r5, #1
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab6e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(huart);
 800ab70:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800ab74:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab78:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800ab7a:	681a      	ldr	r2, [r3, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab7c:	6e46      	ldr	r6, [r0, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 800ab7e:	f022 0201 	bic.w	r2, r2, #1
 800ab82:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab84:	689a      	ldr	r2, [r3, #8]
 800ab86:	4604      	mov	r4, r0
 800ab88:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 800ab8c:	4311      	orrs	r1, r2
 800ab8e:	6099      	str	r1, [r3, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ab90:	b156      	cbz	r6, 800aba8 <HAL_UARTEx_SetRxFifoThreshold+0x48>
 800ab92:	f7ff ff71 	bl	800aa78 <UARTEx_SetNbDataToProcess.part.0>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab96:	6803      	ldr	r3, [r0, #0]
  __HAL_UNLOCK(huart);
 800ab98:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800ab9a:	2220      	movs	r2, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab9c:	601d      	str	r5, [r3, #0]
  __HAL_UNLOCK(huart);
 800ab9e:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
  huart->gState = HAL_UART_STATE_READY;
 800aba2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
}
 800aba6:	bd70      	pop	{r4, r5, r6, pc}
    huart->NbRxDataToProcess = 1U;
 800aba8:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800abac:	6682      	str	r2, [r0, #104]	; 0x68
 800abae:	e7f3      	b.n	800ab98 <HAL_UARTEx_SetRxFifoThreshold+0x38>
  __HAL_LOCK(huart);
 800abb0:	2002      	movs	r0, #2
}
 800abb2:	4770      	bx	lr

0800abb4 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800abb4:	4770      	bx	lr
 800abb6:	bf00      	nop

0800abb8 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800abb8:	e7fe      	b.n	800abb8 <HardFault_Handler>
 800abba:	bf00      	nop

0800abbc <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800abbc:	e7fe      	b.n	800abbc <MemManage_Handler>
 800abbe:	bf00      	nop

0800abc0 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800abc0:	e7fe      	b.n	800abc0 <BusFault_Handler>
 800abc2:	bf00      	nop

0800abc4 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800abc4:	e7fe      	b.n	800abc4 <UsageFault_Handler>
 800abc6:	bf00      	nop

0800abc8 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
  while (1)
 800abc8:	e7fe      	b.n	800abc8 <DebugMon_Handler>
 800abca:	bf00      	nop

0800abcc <GPDMA1_Channel0_IRQHandler>:
void GPDMA1_Channel0_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel0_IRQn 0 */

  /* USER CODE END GPDMA1_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel0);
 800abcc:	4801      	ldr	r0, [pc, #4]	; (800abd4 <GPDMA1_Channel0_IRQHandler+0x8>)
 800abce:	f7f9 bedb 	b.w	8004988 <HAL_DMA_IRQHandler>
 800abd2:	bf00      	nop
 800abd4:	20000900 	.word	0x20000900

0800abd8 <GPDMA1_Channel1_IRQHandler>:
void GPDMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 800abd8:	4801      	ldr	r0, [pc, #4]	; (800abe0 <GPDMA1_Channel1_IRQHandler+0x8>)
 800abda:	f7f9 bed5 	b.w	8004988 <HAL_DMA_IRQHandler>
 800abde:	bf00      	nop
 800abe0:	20000978 	.word	0x20000978

0800abe4 <GPDMA1_Channel2_IRQHandler>:
void GPDMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel2_IRQn 0 */

  /* USER CODE END GPDMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel2);
 800abe4:	4801      	ldr	r0, [pc, #4]	; (800abec <GPDMA1_Channel2_IRQHandler+0x8>)
 800abe6:	f7f9 becf 	b.w	8004988 <HAL_DMA_IRQHandler>
 800abea:	bf00      	nop
 800abec:	200009f0 	.word	0x200009f0

0800abf0 <GPDMA1_Channel3_IRQHandler>:
void GPDMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN GPDMA1_Channel3_IRQn 0 */

  /* USER CODE END GPDMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel3);
 800abf0:	4801      	ldr	r0, [pc, #4]	; (800abf8 <GPDMA1_Channel3_IRQHandler+0x8>)
 800abf2:	f7f9 bec9 	b.w	8004988 <HAL_DMA_IRQHandler>
 800abf6:	bf00      	nop
 800abf8:	20000a68 	.word	0x20000a68

0800abfc <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800abfc:	4801      	ldr	r0, [pc, #4]	; (800ac04 <TIM6_IRQHandler+0x8>)
 800abfe:	f7ff b825 	b.w	8009c4c <HAL_TIM_IRQHandler>
 800ac02:	bf00      	nop
 800ac04:	20001cc4 	.word	0x20001cc4

0800ac08 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800ac08:	4801      	ldr	r0, [pc, #4]	; (800ac10 <USART2_IRQHandler+0x8>)
 800ac0a:	f7ff bb53 	b.w	800a2b4 <HAL_UART_IRQHandler>
 800ac0e:	bf00      	nop
 800ac10:	20000ae0 	.word	0x20000ae0

0800ac14 <UART4_IRQHandler>:
void UART4_IRQHandler(void)
{
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ac14:	4801      	ldr	r0, [pc, #4]	; (800ac1c <UART4_IRQHandler+0x8>)
 800ac16:	f7ff bb4d 	b.w	800a2b4 <HAL_UART_IRQHandler>
 800ac1a:	bf00      	nop
 800ac1c:	20000b74 	.word	0x20000b74

0800ac20 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800ac20:	b4f0      	push	{r4, r5, r6, r7}
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR = RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800ac22:	2200      	movs	r2, #0
  RCC->CR = RCC_CR_HSION;
 800ac24:	2701      	movs	r7, #1

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ac26:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800ac2a:	491d      	ldr	r1, [pc, #116]	; (800aca0 <SystemInit+0x80>)
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800ac2c:	4c1d      	ldr	r4, [pc, #116]	; (800aca4 <SystemInit+0x84>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800ac2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
  RCC->PLL1DIVR = 0x01010280U;
 800ac32:	481d      	ldr	r0, [pc, #116]	; (800aca8 <SystemInit+0x88>)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800ac34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR = RCC_CR_HSION;
 800ac3c:	4b1b      	ldr	r3, [pc, #108]	; (800acac <SystemInit+0x8c>)
  #endif /* VECT_TAB_SRAM */

  /* Check OPSR register to verify if there is an ongoing swap or option bytes update interrupted by a reset */
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800ac3e:	4d1c      	ldr	r5, [pc, #112]	; (800acb0 <SystemInit+0x90>)
  RCC->CR = RCC_CR_HSION;
 800ac40:	601f      	str	r7, [r3, #0]
  RCC->CFGR1 = 0U;
 800ac42:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800ac44:	621a      	str	r2, [r3, #32]
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_HSECSSON | RCC_CR_HSEBYP | RCC_CR_HSEEXT | RCC_CR_HSIDIV | RCC_CR_HSIKERON | \
 800ac46:	681f      	ldr	r7, [r3, #0]
 800ac48:	403c      	ands	r4, r7
 800ac4a:	601c      	str	r4, [r3, #0]
  RCC->PLL1CFGR = 0U;
 800ac4c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLL2CFGR = 0U;
 800ac4e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL3CFGR = 0U;
 800ac50:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1DIVR = 0x01010280U;
 800ac52:	6358      	str	r0, [r3, #52]	; 0x34
  RCC->PLL1FRACR = 0x00000000U;
 800ac54:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2DIVR = 0x01010280U;
 800ac56:	63d8      	str	r0, [r3, #60]	; 0x3c
  RCC->PLL2FRACR = 0x00000000U;
 800ac58:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3DIVR = 0x01010280U;
 800ac5a:	6458      	str	r0, [r3, #68]	; 0x44
  RCC->PLL3FRACR = 0x00000000U;
 800ac5c:	649a      	str	r2, [r3, #72]	; 0x48
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800ac5e:	6818      	ldr	r0, [r3, #0]
 800ac60:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800ac64:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0U;
 800ac66:	651a      	str	r2, [r3, #80]	; 0x50
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ac68:	608e      	str	r6, [r1, #8]
  reg_opsr = FLASH->OPSR & FLASH_OPSR_CODE_OP;
 800ac6a:	69ab      	ldr	r3, [r5, #24]
  if ((reg_opsr == FLASH_OPSR_CODE_OP) || (reg_opsr == (FLASH_OPSR_CODE_OP_2 | FLASH_OPSR_CODE_OP_1)))
 800ac6c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800ac70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800ac74:	d001      	beq.n	800ac7a <SystemInit+0x5a>
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;

    /* Lock the FLASH Option Control Register access */
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
  }
}
 800ac76:	bcf0      	pop	{r4, r5, r6, r7}
 800ac78:	4770      	bx	lr
    if ((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != 0U)
 800ac7a:	69eb      	ldr	r3, [r5, #28]
 800ac7c:	07db      	lsls	r3, r3, #31
 800ac7e:	d503      	bpl.n	800ac88 <SystemInit+0x68>
      FLASH->OPTKEYR = 0x08192A3BU;
 800ac80:	4a0c      	ldr	r2, [pc, #48]	; (800acb4 <SystemInit+0x94>)
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800ac82:	4b0d      	ldr	r3, [pc, #52]	; (800acb8 <SystemInit+0x98>)
      FLASH->OPTKEYR = 0x08192A3BU;
 800ac84:	60ea      	str	r2, [r5, #12]
      FLASH->OPTKEYR = 0x4C5D6E7FU;
 800ac86:	60eb      	str	r3, [r5, #12]
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800ac88:	4b09      	ldr	r3, [pc, #36]	; (800acb0 <SystemInit+0x90>)
}
 800ac8a:	bcf0      	pop	{r4, r5, r6, r7}
    FLASH->OPTCR |= FLASH_OPTCR_OPTSTART;
 800ac8c:	69da      	ldr	r2, [r3, #28]
 800ac8e:	f042 0202 	orr.w	r2, r2, #2
 800ac92:	61da      	str	r2, [r3, #28]
    FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800ac94:	69da      	ldr	r2, [r3, #28]
 800ac96:	f042 0201 	orr.w	r2, r2, #1
 800ac9a:	61da      	str	r2, [r3, #28]
}
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	e000ed00 	.word	0xe000ed00
 800aca4:	eae2eae3 	.word	0xeae2eae3
 800aca8:	01010280 	.word	0x01010280
 800acac:	44020c00 	.word	0x44020c00
 800acb0:	40022000 	.word	0x40022000
 800acb4:	08192a3b 	.word	0x08192a3b
 800acb8:	4c5d6e7f 	.word	0x4c5d6e7f

0800acbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800acbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acc0:	4604      	mov	r4, r0
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800acc2:	f7f7 fb13 	bl	80022ec <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800acc6:	4a3e      	ldr	r2, [pc, #248]	; (800adc0 <prvAddNewTaskToReadyList+0x104>)

            if( pxCurrentTCB == NULL )
 800acc8:	4d3e      	ldr	r5, [pc, #248]	; (800adc4 <prvAddNewTaskToReadyList+0x108>)
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 800acca:	6813      	ldr	r3, [r2, #0]
 800accc:	3301      	adds	r3, #1
 800acce:	6013      	str	r3, [r2, #0]
            if( pxCurrentTCB == NULL )
 800acd0:	682b      	ldr	r3, [r5, #0]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d042      	beq.n	800ad5c <prvAddNewTaskToReadyList+0xa0>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800acd6:	4f3c      	ldr	r7, [pc, #240]	; (800adc8 <prvAddNewTaskToReadyList+0x10c>)
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d036      	beq.n	800ad4c <prvAddNewTaskToReadyList+0x90>
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 800acde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ace0:	4e3a      	ldr	r6, [pc, #232]	; (800adcc <prvAddNewTaskToReadyList+0x110>)
 800ace2:	f04f 0e01 	mov.w	lr, #1
 800ace6:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800acea:	eb06 0083 	add.w	r0, r6, r3, lsl #2
 800acee:	6841      	ldr	r1, [r0, #4]
 800acf0:	fa0e fe02 	lsl.w	lr, lr, r2
            uxTaskNumber++;
 800acf4:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 800ade4 <prvAddNewTaskToReadyList+0x128>
            prvAddTaskToReadyList( pxNewTCB );
 800acf8:	688a      	ldr	r2, [r1, #8]
 800acfa:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800ade8 <prvAddNewTaskToReadyList+0x12c>
 800acfe:	60e2      	str	r2, [r4, #12]
            uxTaskNumber++;
 800ad00:	f8d9 2000 	ldr.w	r2, [r9]
            prvAddTaskToReadyList( pxNewTCB );
 800ad04:	009b      	lsls	r3, r3, #2
            uxTaskNumber++;
 800ad06:	3201      	adds	r2, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ad08:	6462      	str	r2, [r4, #68]	; 0x44
            uxTaskNumber++;
 800ad0a:	f8c9 2000 	str.w	r2, [r9]
            prvAddTaskToReadyList( pxNewTCB );
 800ad0e:	f8d8 2000 	ldr.w	r2, [r8]
 800ad12:	60a1      	str	r1, [r4, #8]
 800ad14:	ea4e 0202 	orr.w	r2, lr, r2
 800ad18:	f8c8 2000 	str.w	r2, [r8]
 800ad1c:	58f2      	ldr	r2, [r6, r3]
 800ad1e:	f104 0e04 	add.w	lr, r4, #4
 800ad22:	f102 0c01 	add.w	ip, r2, #1
 800ad26:	688a      	ldr	r2, [r1, #8]
 800ad28:	f8c2 e004 	str.w	lr, [r2, #4]
 800ad2c:	f8c1 e008 	str.w	lr, [r1, #8]
 800ad30:	6160      	str	r0, [r4, #20]
 800ad32:	f846 c003 	str.w	ip, [r6, r3]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800ad36:	f7f7 fae7 	bl	8002308 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	b123      	cbz	r3, 800ad48 <prvAddNewTaskToReadyList+0x8c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800ad3e:	682a      	ldr	r2, [r5, #0]
 800ad40:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800ad42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d311      	bcc.n	800ad6c <prvAddNewTaskToReadyList+0xb0>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800ad48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ad50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad52:	4e1e      	ldr	r6, [pc, #120]	; (800adcc <prvAddNewTaskToReadyList+0x110>)
 800ad54:	4293      	cmp	r3, r2
                        pxCurrentTCB = pxNewTCB;
 800ad56:	bf98      	it	ls
 800ad58:	602c      	strls	r4, [r5, #0]
 800ad5a:	e7c2      	b.n	800ace2 <prvAddNewTaskToReadyList+0x26>
                pxCurrentTCB = pxNewTCB;
 800ad5c:	602c      	str	r4, [r5, #0]
                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ad5e:	6813      	ldr	r3, [r2, #0]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d007      	beq.n	800ad74 <prvAddNewTaskToReadyList+0xb8>
            prvAddTaskToReadyList( pxNewTCB );
 800ad64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ad66:	4e19      	ldr	r6, [pc, #100]	; (800adcc <prvAddNewTaskToReadyList+0x110>)
 800ad68:	4f17      	ldr	r7, [pc, #92]	; (800adc8 <prvAddNewTaskToReadyList+0x10c>)
 800ad6a:	e7ba      	b.n	800ace2 <prvAddNewTaskToReadyList+0x26>
    }
 800ad6c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800ad70:	f7f7 bab0 	b.w	80022d4 <vPortYield>
 800ad74:	4e15      	ldr	r6, [pc, #84]	; (800adcc <prvAddNewTaskToReadyList+0x110>)
 800ad76:	4637      	mov	r7, r6
 800ad78:	f106 08c8 	add.w	r8, r6, #200	; 0xc8
{
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad7c:	4638      	mov	r0, r7
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad7e:	3714      	adds	r7, #20
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ad80:	f7f7 f990 	bl	80020a4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ad84:	45b8      	cmp	r8, r7
 800ad86:	d1f9      	bne.n	800ad7c <prvAddNewTaskToReadyList+0xc0>
    }

    vListInitialise( &xDelayedTaskList1 );
 800ad88:	f8df 9060 	ldr.w	r9, [pc, #96]	; 800adec <prvAddNewTaskToReadyList+0x130>
    vListInitialise( &xDelayedTaskList2 );
 800ad8c:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800adf0 <prvAddNewTaskToReadyList+0x134>
    vListInitialise( &xDelayedTaskList1 );
 800ad90:	4648      	mov	r0, r9
 800ad92:	f7f7 f987 	bl	80020a4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800ad96:	4640      	mov	r0, r8
 800ad98:	f7f7 f984 	bl	80020a4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800ad9c:	480c      	ldr	r0, [pc, #48]	; (800add0 <prvAddNewTaskToReadyList+0x114>)
 800ad9e:	f7f7 f981 	bl	80020a4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800ada2:	480c      	ldr	r0, [pc, #48]	; (800add4 <prvAddNewTaskToReadyList+0x118>)
 800ada4:	f7f7 f97e 	bl	80020a4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800ada8:	480b      	ldr	r0, [pc, #44]	; (800add8 <prvAddNewTaskToReadyList+0x11c>)
 800adaa:	f7f7 f97b 	bl	80020a4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800adae:	4b0b      	ldr	r3, [pc, #44]	; (800addc <prvAddNewTaskToReadyList+0x120>)
 800adb0:	4f05      	ldr	r7, [pc, #20]	; (800adc8 <prvAddNewTaskToReadyList+0x10c>)
 800adb2:	f8c3 9000 	str.w	r9, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adb6:	4b0a      	ldr	r3, [pc, #40]	; (800ade0 <prvAddNewTaskToReadyList+0x124>)
            prvAddTaskToReadyList( pxNewTCB );
 800adb8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800adba:	f8c3 8000 	str.w	r8, [r3]
}
 800adbe:	e790      	b.n	800ace2 <prvAddNewTaskToReadyList+0x26>
 800adc0:	20001de4 	.word	0x20001de4
 800adc4:	20001d10 	.word	0x20001d10
 800adc8:	200022a0 	.word	0x200022a0
 800adcc:	20001d1c 	.word	0x20001d1c
 800add0:	2000228c 	.word	0x2000228c
 800add4:	200022b8 	.word	0x200022b8
 800add8:	200022a4 	.word	0x200022a4
 800addc:	20001d14 	.word	0x20001d14
 800ade0:	20001d18 	.word	0x20001d18
 800ade4:	20001ff0 	.word	0x20001ff0
 800ade8:	200021f4 	.word	0x200021f4
 800adec:	200021f8 	.word	0x200021f8
 800adf0:	2000220c 	.word	0x2000220c

0800adf4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800adf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
    List_t * const pxDelayedList = pxDelayedTaskList;
 800adf8:	4a24      	ldr	r2, [pc, #144]	; (800ae8c <prvAddCurrentTaskToDelayedList+0x98>)
{
 800adfa:	4605      	mov	r5, r0
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800adfc:	4b24      	ldr	r3, [pc, #144]	; (800ae90 <prvAddCurrentTaskToDelayedList+0x9c>)
    const TickType_t xConstTickCount = xTickCount;
 800adfe:	4825      	ldr	r0, [pc, #148]	; (800ae94 <prvAddCurrentTaskToDelayedList+0xa0>)
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae00:	4e25      	ldr	r6, [pc, #148]	; (800ae98 <prvAddCurrentTaskToDelayedList+0xa4>)
    const TickType_t xConstTickCount = xTickCount;
 800ae02:	6804      	ldr	r4, [r0, #0]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800ae04:	f8d2 8000 	ldr.w	r8, [r2]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800ae08:	f8d3 9000 	ldr.w	r9, [r3]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae0c:	6830      	ldr	r0, [r6, #0]
{
 800ae0e:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae10:	3004      	adds	r0, #4
 800ae12:	f7f7 f96f 	bl	80020f4 <uxListRemove>
 800ae16:	b948      	cbnz	r0, 800ae2c <prvAddCurrentTaskToDelayedList+0x38>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800ae18:	2301      	movs	r3, #1
 800ae1a:	6832      	ldr	r2, [r6, #0]
 800ae1c:	491f      	ldr	r1, [pc, #124]	; (800ae9c <prvAddCurrentTaskToDelayedList+0xa8>)
 800ae1e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ae20:	fa03 f202 	lsl.w	r2, r3, r2
 800ae24:	680b      	ldr	r3, [r1, #0]
 800ae26:	ea23 0302 	bic.w	r3, r3, r2
 800ae2a:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae2c:	1c6b      	adds	r3, r5, #1
 800ae2e:	d015      	beq.n	800ae5c <prvAddCurrentTaskToDelayedList+0x68>
             * does not occur.  This may overflow but this doesn't matter, the
             * kernel will manage it correctly. */
            xTimeToWake = xConstTickCount + xTicksToWait;

            /* The list item will be inserted in wake time order. */
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae30:	6833      	ldr	r3, [r6, #0]
 800ae32:	1964      	adds	r4, r4, r5
            if( xTimeToWake < xConstTickCount )
            {
                /* Wake time has overflowed.  Place this item in the overflow
                 * list. */
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800ae34:	6831      	ldr	r1, [r6, #0]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ae36:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800ae38:	d20a      	bcs.n	800ae50 <prvAddCurrentTaskToDelayedList+0x5c>
            else
            {
                /* The wake time has not overflowed, so the current block list
                 * is used. */
                traceMOVED_TASK_TO_DELAYED_LIST();
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800ae3a:	4640      	mov	r0, r8
 800ae3c:	3104      	adds	r1, #4
 800ae3e:	f7f7 f941 	bl	80020c4 <vListInsert>

                /* If the task entering the blocked state was placed at the
                 * head of the list of blocked tasks then xNextTaskUnblockTime
                 * needs to be updated too. */
                if( xTimeToWake < xNextTaskUnblockTime )
 800ae42:	4b17      	ldr	r3, [pc, #92]	; (800aea0 <prvAddCurrentTaskToDelayedList+0xac>)
 800ae44:	681a      	ldr	r2, [r3, #0]
 800ae46:	42a2      	cmp	r2, r4
                {
                    xNextTaskUnblockTime = xTimeToWake;
 800ae48:	bf88      	it	hi
 800ae4a:	601c      	strhi	r4, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800ae4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800ae50:	4648      	mov	r0, r9
}
 800ae52:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800ae56:	3104      	adds	r1, #4
 800ae58:	f7f7 b934 	b.w	80020c4 <vListInsert>
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ae5c:	2f00      	cmp	r7, #0
 800ae5e:	d0e7      	beq.n	800ae30 <prvAddCurrentTaskToDelayedList+0x3c>
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ae60:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ae62:	6830      	ldr	r0, [r6, #0]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	6831      	ldr	r1, [r6, #0]
 800ae68:	6082      	str	r2, [r0, #8]
 800ae6a:	6890      	ldr	r0, [r2, #8]
 800ae6c:	60c8      	str	r0, [r1, #12]
 800ae6e:	6831      	ldr	r1, [r6, #0]
 800ae70:	6890      	ldr	r0, [r2, #8]
 800ae72:	3104      	adds	r1, #4
 800ae74:	6041      	str	r1, [r0, #4]
 800ae76:	6830      	ldr	r0, [r6, #0]
 800ae78:	6819      	ldr	r1, [r3, #0]
 800ae7a:	6834      	ldr	r4, [r6, #0]
 800ae7c:	3004      	adds	r0, #4
 800ae7e:	3101      	adds	r1, #1
 800ae80:	6090      	str	r0, [r2, #8]
 800ae82:	6019      	str	r1, [r3, #0]
 800ae84:	6163      	str	r3, [r4, #20]
}
 800ae86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20001d14 	.word	0x20001d14
 800ae90:	20001d18 	.word	0x20001d18
 800ae94:	200022cc 	.word	0x200022cc
 800ae98:	20001d10 	.word	0x20001d10
 800ae9c:	200021f4 	.word	0x200021f4
 800aea0:	20002280 	.word	0x20002280
 800aea4:	200022a4 	.word	0x200022a4

0800aea8 <vTaskSwitchContext.part.0>:
            xYieldPendings[ 0 ] = pdFALSE;
 800aea8:	2200      	movs	r2, #0
 800aeaa:	4b1d      	ldr	r3, [pc, #116]	; (800af20 <vTaskSwitchContext.part.0+0x78>)
    void vTaskSwitchContext( void )
 800aeac:	b510      	push	{r4, lr}
            taskCHECK_FOR_STACK_OVERFLOW();
 800aeae:	4c1d      	ldr	r4, [pc, #116]	; (800af24 <vTaskSwitchContext.part.0+0x7c>)
            xYieldPendings[ 0 ] = pdFALSE;
 800aeb0:	601a      	str	r2, [r3, #0]
            taskCHECK_FOR_STACK_OVERFLOW();
 800aeb2:	6823      	ldr	r3, [r4, #0]
 800aeb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800aebc:	d103      	bne.n	800aec6 <vTaskSwitchContext.part.0+0x1e>
 800aebe:	685a      	ldr	r2, [r3, #4]
 800aec0:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800aec4:	d022      	beq.n	800af0c <vTaskSwitchContext.part.0+0x64>
 800aec6:	6821      	ldr	r1, [r4, #0]
 800aec8:	6820      	ldr	r0, [r4, #0]
 800aeca:	3134      	adds	r1, #52	; 0x34
 800aecc:	f7f6 f92e 	bl	800112c <vApplicationStackOverflowHook>
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800aed0:	4b15      	ldr	r3, [pc, #84]	; (800af28 <vTaskSwitchContext.part.0+0x80>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 */
    static portFORCE_INLINE uint32_t ulPortCountLeadingZeros( uint32_t ulBitmap )
    {
        uint32_t ulReturn;

        __asm volatile ( "clz %0, %1" : "=r" ( ulReturn ) : "r" ( ulBitmap ) : "memory" );
 800aed4:	fab3 f383 	clz	r3, r3
 800aed8:	f1c3 031f 	rsb	r3, r3, #31
 800aedc:	4a13      	ldr	r2, [pc, #76]	; (800af2c <vTaskSwitchContext.part.0+0x84>)
 800aede:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800aee2:	0099      	lsls	r1, r3, #2
 800aee4:	5850      	ldr	r0, [r2, r1]
 800aee6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aeea:	b160      	cbz	r0, 800af06 <vTaskSwitchContext.part.0+0x5e>
 800aeec:	6858      	ldr	r0, [r3, #4]
 800aeee:	3108      	adds	r1, #8
 800aef0:	6840      	ldr	r0, [r0, #4]
 800aef2:	440a      	add	r2, r1
 800aef4:	4290      	cmp	r0, r2
 800aef6:	6058      	str	r0, [r3, #4]
 800aef8:	bf04      	itt	eq
 800aefa:	68d8      	ldreq	r0, [r3, #12]
 800aefc:	6058      	streq	r0, [r3, #4]
 800aefe:	68c3      	ldr	r3, [r0, #12]
 800af00:	6023      	str	r3, [r4, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800af02:	6823      	ldr	r3, [r4, #0]
    }
 800af04:	bd10      	pop	{r4, pc}
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800af06:	f7f7 fb25 	bl	8002554 <ulSetInterruptMask>
 800af0a:	e7fe      	b.n	800af0a <vTaskSwitchContext.part.0+0x62>
            taskCHECK_FOR_STACK_OVERFLOW();
 800af0c:	689a      	ldr	r2, [r3, #8]
 800af0e:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
 800af12:	d1d8      	bne.n	800aec6 <vTaskSwitchContext.part.0+0x1e>
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
 800af1a:	d1d4      	bne.n	800aec6 <vTaskSwitchContext.part.0+0x1e>
 800af1c:	e7d8      	b.n	800aed0 <vTaskSwitchContext.part.0+0x28>
 800af1e:	bf00      	nop
 800af20:	2000232c 	.word	0x2000232c
 800af24:	20001d10 	.word	0x20001d10
 800af28:	200021f4 	.word	0x200021f4
 800af2c:	20001d1c 	.word	0x20001d1c

0800af30 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800af30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	460c      	mov	r4, r1
 800af36:	9d0a      	ldr	r5, [sp, #40]	; 0x28
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800af38:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800af3c:	4607      	mov	r7, r0
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800af3e:	21a5      	movs	r1, #165	; 0xa5
 800af40:	464a      	mov	r2, r9
 800af42:	6b28      	ldr	r0, [r5, #48]	; 0x30
static void prvInitialiseNewTask( TaskFunction_t pxTaskCode,
 800af44:	4698      	mov	r8, r3
 800af46:	9e08      	ldr	r6, [sp, #32]
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800af48:	f001 f8da 	bl	800c100 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800af4c:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
    if( pcName != NULL )
 800af50:	b174      	cbz	r4, 800af70 <prvInitialiseNewTask.constprop.0+0x40>
 800af52:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
 800af56:	f105 0e33 	add.w	lr, r5, #51	; 0x33
 800af5a:	340f      	adds	r4, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af5c:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800af60:	f80e 1f01 	strb.w	r1, [lr, #1]!
            if( pcName[ x ] == ( char ) 0x00 )
 800af64:	b109      	cbz	r1, 800af6a <prvInitialiseNewTask.constprop.0+0x3a>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af66:	45a4      	cmp	ip, r4
 800af68:	d1f8      	bne.n	800af5c <prvInitialiseNewTask.constprop.0+0x2c>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800af6a:	2300      	movs	r3, #0
 800af6c:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800af70:	2e09      	cmp	r6, #9
 800af72:	d902      	bls.n	800af7a <prvInitialiseNewTask.constprop.0+0x4a>
 800af74:	f7f7 faee 	bl	8002554 <ulSetInterruptMask>
 800af78:	e7fe      	b.n	800af78 <prvInitialiseNewTask.constprop.0+0x48>
    pxNewTCB->uxPriority = uxPriority;
 800af7a:	62ee      	str	r6, [r5, #44]	; 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 800af7c:	64ee      	str	r6, [r5, #76]	; 0x4c
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af7e:	1d28      	adds	r0, r5, #4
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800af80:	f1a9 0904 	sub.w	r9, r9, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af84:	f7f7 f89a 	bl	80020bc <vListInitialiseItem>
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800af88:	44d1      	add	r9, sl
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af8a:	f105 0018 	add.w	r0, r5, #24
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800af8e:	f1c6 060a 	rsb	r6, r6, #10
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af92:	f7f7 f893 	bl	80020bc <vListInitialiseItem>
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800af96:	4643      	mov	r3, r8
 800af98:	463a      	mov	r2, r7
 800af9a:	6b29      	ldr	r1, [r5, #48]	; 0x30
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800af9c:	61ae      	str	r6, [r5, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af9e:	612d      	str	r5, [r5, #16]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afa0:	626d      	str	r5, [r5, #36]	; 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800afa2:	f029 0007 	bic.w	r0, r9, #7
 800afa6:	f7f7 f9f1 	bl	800238c <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 800afaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800afac:	6028      	str	r0, [r5, #0]
    if( pxCreatedTask != NULL )
 800afae:	b103      	cbz	r3, 800afb2 <prvInitialiseNewTask.constprop.0+0x82>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afb0:	601d      	str	r5, [r3, #0]
}
 800afb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afb6:	bf00      	nop

0800afb8 <prvCheckTasksWaitingTermination>:
{
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afba:	4d17      	ldr	r5, [pc, #92]	; (800b018 <prvCheckTasksWaitingTermination+0x60>)
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	b31b      	cbz	r3, 800b008 <prvCheckTasksWaitingTermination+0x50>
 800afc0:	4f16      	ldr	r7, [pc, #88]	; (800b01c <prvCheckTasksWaitingTermination+0x64>)
 800afc2:	4e17      	ldr	r6, [pc, #92]	; (800b020 <prvCheckTasksWaitingTermination+0x68>)
                taskENTER_CRITICAL();
 800afc4:	f7f7 f992 	bl	80022ec <vPortEnterCritical>
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	68dc      	ldr	r4, [r3, #12]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afcc:	1d20      	adds	r0, r4, #4
 800afce:	f7f7 f891 	bl	80020f4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 800afd2:	6833      	ldr	r3, [r6, #0]
 800afd4:	3b01      	subs	r3, #1
 800afd6:	6033      	str	r3, [r6, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800afd8:	682b      	ldr	r3, [r5, #0]
 800afda:	3b01      	subs	r3, #1
 800afdc:	602b      	str	r3, [r5, #0]
                taskEXIT_CRITICAL();
 800afde:	f7f7 f993 	bl	8002308 <vPortExitCritical>
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800afe2:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 800afe6:	b133      	cbz	r3, 800aff6 <prvCheckTasksWaitingTermination+0x3e>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800afe8:	2b01      	cmp	r3, #1
 800afea:	d00e      	beq.n	800b00a <prvCheckTasksWaitingTermination+0x52>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800afec:	2b02      	cmp	r3, #2
 800afee:	d008      	beq.n	800b002 <prvCheckTasksWaitingTermination+0x4a>
 800aff0:	f7f7 fab0 	bl	8002554 <ulSetInterruptMask>
 800aff4:	e7fe      	b.n	800aff4 <prvCheckTasksWaitingTermination+0x3c>
                vPortFreeStack( pxTCB->pxStack );
 800aff6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800aff8:	f7f6 ffca 	bl	8001f90 <vPortFree>
                vPortFree( pxTCB );
 800affc:	4620      	mov	r0, r4
 800affe:	f7f6 ffc7 	bl	8001f90 <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b002:	682b      	ldr	r3, [r5, #0]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d1dd      	bne.n	800afc4 <prvCheckTasksWaitingTermination+0xc>
}
 800b008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                vPortFree( pxTCB );
 800b00a:	4620      	mov	r0, r4
 800b00c:	f7f6 ffc0 	bl	8001f90 <vPortFree>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b010:	682b      	ldr	r3, [r5, #0]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d1d6      	bne.n	800afc4 <prvCheckTasksWaitingTermination+0xc>
 800b016:	e7f7      	b.n	800b008 <prvCheckTasksWaitingTermination+0x50>
 800b018:	20001de8 	.word	0x20001de8
 800b01c:	200022b8 	.word	0x200022b8
 800b020:	20001de4 	.word	0x20001de4

0800b024 <prvIdleTask>:
{
 800b024:	b508      	push	{r3, lr}
 800b026:	4c04      	ldr	r4, [pc, #16]	; (800b038 <prvIdleTask+0x14>)
        prvCheckTasksWaitingTermination();
 800b028:	f7ff ffc6 	bl	800afb8 <prvCheckTasksWaitingTermination>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	2b01      	cmp	r3, #1
 800b030:	d9fa      	bls.n	800b028 <prvIdleTask+0x4>
                taskYIELD();
 800b032:	f7f7 f94f 	bl	80022d4 <vPortYield>
 800b036:	e7f7      	b.n	800b028 <prvIdleTask+0x4>
 800b038:	20001d1c 	.word	0x20001d1c

0800b03c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b040:	4b61      	ldr	r3, [pc, #388]	; (800b1c8 <xTaskIncrementTick.part.0+0x18c>)
BaseType_t xTaskIncrementTick( void )
 800b042:	b085      	sub	sp, #20
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b044:	681c      	ldr	r4, [r3, #0]
 800b046:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 800b048:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U )
 800b04a:	2c00      	cmp	r4, #0
 800b04c:	d07a      	beq.n	800b144 <xTaskIncrementTick.part.0+0x108>
 800b04e:	4b5f      	ldr	r3, [pc, #380]	; (800b1cc <xTaskIncrementTick.part.0+0x190>)
 800b050:	9303      	str	r3, [sp, #12]
        if( xConstTickCount >= xNextTaskUnblockTime )
 800b052:	9b03      	ldr	r3, [sp, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	429c      	cmp	r4, r3
 800b058:	d37b      	bcc.n	800b152 <xTaskIncrementTick.part.0+0x116>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b05a:	4d5d      	ldr	r5, [pc, #372]	; (800b1d0 <xTaskIncrementTick.part.0+0x194>)
 800b05c:	682b      	ldr	r3, [r5, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b00      	cmp	r3, #0
 800b062:	f000 80a8 	beq.w	800b1b6 <xTaskIncrementTick.part.0+0x17a>
    BaseType_t xSwitchRequired = pdFALSE;
 800b066:	f04f 0c00 	mov.w	ip, #0
 800b06a:	4b5a      	ldr	r3, [pc, #360]	; (800b1d4 <xTaskIncrementTick.part.0+0x198>)
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b06c:	4667      	mov	r7, ip
 800b06e:	485a      	ldr	r0, [pc, #360]	; (800b1d8 <xTaskIncrementTick.part.0+0x19c>)
                    prvAddTaskToReadyList( pxTCB );
 800b070:	4e5a      	ldr	r6, [pc, #360]	; (800b1dc <xTaskIncrementTick.part.0+0x1a0>)
 800b072:	9301      	str	r3, [sp, #4]
 800b074:	9402      	str	r4, [sp, #8]
 800b076:	e058      	b.n	800b12a <xTaskIncrementTick.part.0+0xee>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b078:	f8d3 e014 	ldr.w	lr, [r3, #20]
 800b07c:	e9d3 2902 	ldrd	r2, r9, [r3, #8]
 800b080:	f8c2 9008 	str.w	r9, [r2, #8]
 800b084:	f8c9 2004 	str.w	r2, [r9, #4]
 800b088:	f8de 2004 	ldr.w	r2, [lr, #4]
 800b08c:	428a      	cmp	r2, r1
 800b08e:	f8de 2000 	ldr.w	r2, [lr]
 800b092:	bf08      	it	eq
 800b094:	f8ce 9004 	streq.w	r9, [lr, #4]
 800b098:	3a01      	subs	r2, #1
 800b09a:	615f      	str	r7, [r3, #20]
 800b09c:	f8ce 2000 	str.w	r2, [lr]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0a0:	f8d3 e028 	ldr.w	lr, [r3, #40]	; 0x28
 800b0a4:	f1be 0f00 	cmp.w	lr, #0
 800b0a8:	d012      	beq.n	800b0d0 <xTaskIncrementTick.part.0+0x94>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b0aa:	e9d3 9207 	ldrd	r9, r2, [r3, #28]
 800b0ae:	f8de 4004 	ldr.w	r4, [lr, #4]
 800b0b2:	f8c9 2008 	str.w	r2, [r9, #8]
 800b0b6:	6a1a      	ldr	r2, [r3, #32]
 800b0b8:	4544      	cmp	r4, r8
 800b0ba:	f8c2 9004 	str.w	r9, [r2, #4]
 800b0be:	bf08      	it	eq
 800b0c0:	f8ce 2004 	streq.w	r2, [lr, #4]
 800b0c4:	f8de 2000 	ldr.w	r2, [lr]
 800b0c8:	629f      	str	r7, [r3, #40]	; 0x28
 800b0ca:	3a01      	subs	r2, #1
 800b0cc:	f8ce 2000 	str.w	r2, [lr]
                    prvAddTaskToReadyList( pxTCB );
 800b0d0:	2401      	movs	r4, #1
 800b0d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d4:	f8d6 b000 	ldr.w	fp, [r6]
 800b0d8:	eb02 0882 	add.w	r8, r2, r2, lsl #2
 800b0dc:	eb00 0988 	add.w	r9, r0, r8, lsl #2
 800b0e0:	f8d9 e004 	ldr.w	lr, [r9, #4]
 800b0e4:	fa04 fa02 	lsl.w	sl, r4, r2
 800b0e8:	f8de 4008 	ldr.w	r4, [lr, #8]
 800b0ec:	ea4a 0a0b 	orr.w	sl, sl, fp
 800b0f0:	60dc      	str	r4, [r3, #12]
 800b0f2:	f850 4028 	ldr.w	r4, [r0, r8, lsl #2]
 800b0f6:	f8c6 a000 	str.w	sl, [r6]
 800b0fa:	f104 0a01 	add.w	sl, r4, #1
 800b0fe:	f8de 4008 	ldr.w	r4, [lr, #8]
 800b102:	f8c3 e008 	str.w	lr, [r3, #8]
 800b106:	6061      	str	r1, [r4, #4]
 800b108:	f8ce 1008 	str.w	r1, [lr, #8]
 800b10c:	f8c3 9014 	str.w	r9, [r3, #20]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b110:	9b01      	ldr	r3, [sp, #4]
                    prvAddTaskToReadyList( pxTCB );
 800b112:	f840 a028 	str.w	sl, [r0, r8, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b116:	6819      	ldr	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b118:	682b      	ldr	r3, [r5, #0]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b11a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b11c:	681b      	ldr	r3, [r3, #0]
                                xSwitchRequired = pdTRUE;
 800b11e:	428a      	cmp	r2, r1
 800b120:	bf88      	it	hi
 800b122:	f04f 0c01 	movhi.w	ip, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b126:	2b00      	cmp	r3, #0
 800b128:	d049      	beq.n	800b1be <xTaskIncrementTick.part.0+0x182>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b12a:	682b      	ldr	r3, [r5, #0]
                    if( xConstTickCount < xItemValue )
 800b12c:	9c02      	ldr	r4, [sp, #8]
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b12e:	68db      	ldr	r3, [r3, #12]
 800b130:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b132:	685a      	ldr	r2, [r3, #4]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b134:	1d19      	adds	r1, r3, #4
                    if( xConstTickCount < xItemValue )
 800b136:	4294      	cmp	r4, r2
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b138:	f103 0818 	add.w	r8, r3, #24
                    if( xConstTickCount < xItemValue )
 800b13c:	d29c      	bcs.n	800b078 <xTaskIncrementTick.part.0+0x3c>
                        xNextTaskUnblockTime = xItemValue;
 800b13e:	9b03      	ldr	r3, [sp, #12]
 800b140:	601a      	str	r2, [r3, #0]
                        break;
 800b142:	e00b      	b.n	800b15c <xTaskIncrementTick.part.0+0x120>
            taskSWITCH_DELAYED_LISTS();
 800b144:	4b22      	ldr	r3, [pc, #136]	; (800b1d0 <xTaskIncrementTick.part.0+0x194>)
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	6812      	ldr	r2, [r2, #0]
 800b14a:	b1da      	cbz	r2, 800b184 <xTaskIncrementTick.part.0+0x148>
 800b14c:	f7f7 fa02 	bl	8002554 <ulSetInterruptMask>
 800b150:	e7fe      	b.n	800b150 <xTaskIncrementTick.part.0+0x114>
    BaseType_t xSwitchRequired = pdFALSE;
 800b152:	f04f 0c00 	mov.w	ip, #0
 800b156:	4b1f      	ldr	r3, [pc, #124]	; (800b1d4 <xTaskIncrementTick.part.0+0x198>)
 800b158:	481f      	ldr	r0, [pc, #124]	; (800b1d8 <xTaskIncrementTick.part.0+0x19c>)
 800b15a:	9301      	str	r3, [sp, #4]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800b15c:	9b01      	ldr	r3, [sp, #4]
                if( xYieldPendings[ 0 ] != pdFALSE )
 800b15e:	4a20      	ldr	r2, [pc, #128]	; (800b1e0 <xTaskIncrementTick.part.0+0x1a4>)
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800b160:	681b      	ldr	r3, [r3, #0]
                if( xYieldPendings[ 0 ] != pdFALSE )
 800b162:	6812      	ldr	r2, [r2, #0]
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800b164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b166:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800b16a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                    xSwitchRequired = pdTRUE;
 800b16e:	2b02      	cmp	r3, #2
 800b170:	bf28      	it	cs
 800b172:	f04f 0c01 	movcs.w	ip, #1
                    xSwitchRequired = pdTRUE;
 800b176:	2a00      	cmp	r2, #0
}
 800b178:	bf0c      	ite	eq
 800b17a:	4660      	moveq	r0, ip
 800b17c:	2001      	movne	r0, #1
 800b17e:	b005      	add	sp, #20
 800b180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            taskSWITCH_DELAYED_LISTS();
 800b184:	4a17      	ldr	r2, [pc, #92]	; (800b1e4 <xTaskIncrementTick.part.0+0x1a8>)
 800b186:	6818      	ldr	r0, [r3, #0]
 800b188:	6811      	ldr	r1, [r2, #0]
 800b18a:	6019      	str	r1, [r3, #0]
 800b18c:	4916      	ldr	r1, [pc, #88]	; (800b1e8 <xTaskIncrementTick.part.0+0x1ac>)
 800b18e:	6010      	str	r0, [r2, #0]
 800b190:	680a      	ldr	r2, [r1, #0]
 800b192:	3201      	adds	r2, #1
 800b194:	600a      	str	r2, [r1, #0]
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	6812      	ldr	r2, [r2, #0]
 800b19a:	b92a      	cbnz	r2, 800b1a8 <xTaskIncrementTick.part.0+0x16c>
        xNextTaskUnblockTime = portMAX_DELAY;
 800b19c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1a0:	4a0a      	ldr	r2, [pc, #40]	; (800b1cc <xTaskIncrementTick.part.0+0x190>)
 800b1a2:	9203      	str	r2, [sp, #12]
 800b1a4:	6013      	str	r3, [r2, #0]
 800b1a6:	e754      	b.n	800b052 <xTaskIncrementTick.part.0+0x16>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a08      	ldr	r2, [pc, #32]	; (800b1cc <xTaskIncrementTick.part.0+0x190>)
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	9203      	str	r2, [sp, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	6013      	str	r3, [r2, #0]
}
 800b1b4:	e74d      	b.n	800b052 <xTaskIncrementTick.part.0+0x16>
    BaseType_t xSwitchRequired = pdFALSE;
 800b1b6:	469c      	mov	ip, r3
 800b1b8:	4b06      	ldr	r3, [pc, #24]	; (800b1d4 <xTaskIncrementTick.part.0+0x198>)
 800b1ba:	4807      	ldr	r0, [pc, #28]	; (800b1d8 <xTaskIncrementTick.part.0+0x19c>)
 800b1bc:	9301      	str	r3, [sp, #4]
                    xNextTaskUnblockTime = portMAX_DELAY;
 800b1be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1c2:	9a03      	ldr	r2, [sp, #12]
 800b1c4:	6013      	str	r3, [r2, #0]
                    break;
 800b1c6:	e7c9      	b.n	800b15c <xTaskIncrementTick.part.0+0x120>
 800b1c8:	200022cc 	.word	0x200022cc
 800b1cc:	20002280 	.word	0x20002280
 800b1d0:	20001d14 	.word	0x20001d14
 800b1d4:	20001d10 	.word	0x20001d10
 800b1d8:	20001d1c 	.word	0x20001d1c
 800b1dc:	200021f4 	.word	0x200021f4
 800b1e0:	2000232c 	.word	0x2000232c
 800b1e4:	20001d18 	.word	0x20001d18
 800b1e8:	20002284 	.word	0x20002284

0800b1ec <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800b1ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800b1f0:	4f53      	ldr	r7, [pc, #332]	; (800b340 <xTaskResumeAll.part.0+0x154>)
BaseType_t xTaskResumeAll( void )
 800b1f2:	b083      	sub	sp, #12
            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	3b01      	subs	r3, #1
 800b1f8:	603b      	str	r3, [r7, #0]
            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b1fa:	f8d7 8000 	ldr.w	r8, [r7]
 800b1fe:	f1b8 0f00 	cmp.w	r8, #0
 800b202:	f040 808d 	bne.w	800b320 <xTaskResumeAll.part.0+0x134>
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b206:	4b4f      	ldr	r3, [pc, #316]	; (800b344 <xTaskResumeAll.part.0+0x158>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f000 8088 	beq.w	800b320 <xTaskResumeAll.part.0+0x134>
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b210:	f8df c14c 	ldr.w	ip, [pc, #332]	; 800b360 <xTaskResumeAll.part.0+0x174>
 800b214:	f8dc 3000 	ldr.w	r3, [ip]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 808e 	beq.w	800b33a <xTaskResumeAll.part.0+0x14e>
                        prvAddTaskToReadyList( pxTCB );
 800b21e:	f04f 0b01 	mov.w	fp, #1
 800b222:	46c2      	mov	sl, r8
 800b224:	4b48      	ldr	r3, [pc, #288]	; (800b348 <xTaskResumeAll.part.0+0x15c>)
 800b226:	f8df e13c 	ldr.w	lr, [pc, #316]	; 800b364 <xTaskResumeAll.part.0+0x178>
 800b22a:	4d48      	ldr	r5, [pc, #288]	; (800b34c <xTaskResumeAll.part.0+0x160>)
 800b22c:	9301      	str	r3, [sp, #4]
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800b22e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800b232:	68db      	ldr	r3, [r3, #12]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800b234:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b236:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 800b23a:	6081      	str	r1, [r0, #8]
 800b23c:	6048      	str	r0, [r1, #4]
 800b23e:	6850      	ldr	r0, [r2, #4]
 800b240:	f103 0418 	add.w	r4, r3, #24
 800b244:	42a0      	cmp	r0, r4
 800b246:	bf08      	it	eq
 800b248:	6051      	streq	r1, [r2, #4]
 800b24a:	6811      	ldr	r1, [r2, #0]
 800b24c:	f8c3 a028 	str.w	sl, [r3, #40]	; 0x28
 800b250:	3901      	subs	r1, #1
 800b252:	6011      	str	r1, [r2, #0]
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b254:	6958      	ldr	r0, [r3, #20]
 800b256:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 800b25a:	6091      	str	r1, [r2, #8]
 800b25c:	604a      	str	r2, [r1, #4]
 800b25e:	6842      	ldr	r2, [r0, #4]
 800b260:	1d1e      	adds	r6, r3, #4
 800b262:	42b2      	cmp	r2, r6
 800b264:	bf08      	it	eq
 800b266:	6041      	streq	r1, [r0, #4]
 800b268:	6801      	ldr	r1, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 800b26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800b26c:	3901      	subs	r1, #1
 800b26e:	6001      	str	r1, [r0, #0]
                        prvAddTaskToReadyList( pxTCB );
 800b270:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800b274:	f8de 9000 	ldr.w	r9, [lr]
 800b278:	eb05 0880 	add.w	r8, r5, r0, lsl #2
 800b27c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b280:	fa0b f402 	lsl.w	r4, fp, r2
 800b284:	ea44 0409 	orr.w	r4, r4, r9
 800b288:	f8ce 4000 	str.w	r4, [lr]
 800b28c:	688c      	ldr	r4, [r1, #8]
 800b28e:	6099      	str	r1, [r3, #8]
 800b290:	60dc      	str	r4, [r3, #12]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b292:	4c2f      	ldr	r4, [pc, #188]	; (800b350 <xTaskResumeAll.part.0+0x164>)
 800b294:	6824      	ldr	r4, [r4, #0]
 800b296:	f8d4 902c 	ldr.w	r9, [r4, #44]	; 0x2c
                        prvAddTaskToReadyList( pxTCB );
 800b29a:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b29e:	454a      	cmp	r2, r9
                        prvAddTaskToReadyList( pxTCB );
 800b2a0:	f104 0401 	add.w	r4, r4, #1
 800b2a4:	9400      	str	r4, [sp, #0]
 800b2a6:	688c      	ldr	r4, [r1, #8]
 800b2a8:	6066      	str	r6, [r4, #4]
 800b2aa:	608e      	str	r6, [r1, #8]
 800b2ac:	f8c3 8014 	str.w	r8, [r3, #20]
 800b2b0:	9b00      	ldr	r3, [sp, #0]
 800b2b2:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
                                xYieldPendings[ xCoreID ] = pdTRUE;
 800b2b6:	bf84      	itt	hi
 800b2b8:	9b01      	ldrhi	r3, [sp, #4]
 800b2ba:	f8c3 b000 	strhi.w	fp, [r3]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2be:	f8dc 3000 	ldr.w	r3, [ip]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1b3      	bne.n	800b22e <xTaskResumeAll.part.0+0x42>
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2c6:	4b23      	ldr	r3, [pc, #140]	; (800b354 <xTaskResumeAll.part.0+0x168>)
 800b2c8:	681a      	ldr	r2, [r3, #0]
 800b2ca:	6812      	ldr	r2, [r2, #0]
 800b2cc:	2a00      	cmp	r2, #0
 800b2ce:	d02f      	beq.n	800b330 <xTaskResumeAll.part.0+0x144>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	4b21      	ldr	r3, [pc, #132]	; (800b358 <xTaskResumeAll.part.0+0x16c>)
 800b2d4:	68d2      	ldr	r2, [r2, #12]
 800b2d6:	6812      	ldr	r2, [r2, #0]
 800b2d8:	601a      	str	r2, [r3, #0]
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2da:	4d20      	ldr	r5, [pc, #128]	; (800b35c <xTaskResumeAll.part.0+0x170>)
 800b2dc:	682c      	ldr	r4, [r5, #0]
                        if( xPendedCounts > ( TickType_t ) 0U )
 800b2de:	b1a4      	cbz	r4, 800b30a <xTaskResumeAll.part.0+0x11e>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800b2e0:	2601      	movs	r6, #1
 800b2e2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b2e6:	e006      	b.n	800b2f6 <xTaskResumeAll.part.0+0x10a>
 800b2e8:	f7ff fea8 	bl	800b03c <xTaskIncrementTick.part.0>
                                if( xTaskIncrementTick() != pdFALSE )
 800b2ec:	b108      	cbz	r0, 800b2f2 <xTaskResumeAll.part.0+0x106>
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 800b2ee:	f8c8 6000 	str.w	r6, [r8]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800b2f2:	3c01      	subs	r4, #1
 800b2f4:	d008      	beq.n	800b308 <xTaskResumeAll.part.0+0x11c>
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d0f5      	beq.n	800b2e8 <xTaskResumeAll.part.0+0xfc>
        xPendedTicks += 1U;
 800b2fc:	682b      	ldr	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800b2fe:	3c01      	subs	r4, #1
        xPendedTicks += 1U;
 800b300:	f103 0301 	add.w	r3, r3, #1
 800b304:	602b      	str	r3, [r5, #0]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 800b306:	d1f6      	bne.n	800b2f6 <xTaskResumeAll.part.0+0x10a>
                            xPendedTicks = 0;
 800b308:	602c      	str	r4, [r5, #0]
                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	b13b      	cbz	r3, 800b320 <xTaskResumeAll.part.0+0x134>
                            xAlreadyYielded = pdTRUE;
 800b310:	2001      	movs	r0, #1
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800b312:	4b0f      	ldr	r3, [pc, #60]	; (800b350 <xTaskResumeAll.part.0+0x164>)
                            xAlreadyYielded = pdTRUE;
 800b314:	9000      	str	r0, [sp, #0]
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f7f6 ffdc 	bl	80022d4 <vPortYield>
 800b31c:	9800      	ldr	r0, [sp, #0]
 800b31e:	e000      	b.n	800b322 <xTaskResumeAll.part.0+0x136>
    BaseType_t xAlreadyYielded = pdFALSE;
 800b320:	2000      	movs	r0, #0
 800b322:	9000      	str	r0, [sp, #0]
        taskEXIT_CRITICAL();
 800b324:	f7f6 fff0 	bl	8002308 <vPortExitCritical>
}
 800b328:	9800      	ldr	r0, [sp, #0]
 800b32a:	b003      	add	sp, #12
 800b32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        xNextTaskUnblockTime = portMAX_DELAY;
 800b330:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b334:	4b08      	ldr	r3, [pc, #32]	; (800b358 <xTaskResumeAll.part.0+0x16c>)
 800b336:	601a      	str	r2, [r3, #0]
 800b338:	e7cf      	b.n	800b2da <xTaskResumeAll.part.0+0xee>
 800b33a:	4b03      	ldr	r3, [pc, #12]	; (800b348 <xTaskResumeAll.part.0+0x15c>)
 800b33c:	9301      	str	r3, [sp, #4]
 800b33e:	e7cc      	b.n	800b2da <xTaskResumeAll.part.0+0xee>
 800b340:	20001fec 	.word	0x20001fec
 800b344:	20001de4 	.word	0x20001de4
 800b348:	2000232c 	.word	0x2000232c
 800b34c:	20001d1c 	.word	0x20001d1c
 800b350:	20001d10 	.word	0x20001d10
 800b354:	20001d14 	.word	0x20001d14
 800b358:	20002280 	.word	0x20002280
 800b35c:	20002288 	.word	0x20002288
 800b360:	2000228c 	.word	0x2000228c
 800b364:	200021f4 	.word	0x200021f4

0800b368 <xTaskCreateStatic>:
    {
 800b368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        TaskHandle_t xReturn = NULL;
 800b36c:	2700      	movs	r7, #0
    {
 800b36e:	b087      	sub	sp, #28
 800b370:	4698      	mov	r8, r3
        configASSERT( puxStackBuffer != NULL );
 800b372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    {
 800b374:	9e10      	ldr	r6, [sp, #64]	; 0x40
        TaskHandle_t xReturn = NULL;
 800b376:	9704      	str	r7, [sp, #16]
        configASSERT( puxStackBuffer != NULL );
 800b378:	b33b      	cbz	r3, 800b3ca <xTaskCreateStatic+0x62>
        configASSERT( pxTaskBuffer != NULL );
 800b37a:	b34e      	cbz	r6, 800b3d0 <xTaskCreateStatic+0x68>
 800b37c:	4691      	mov	r9, r2
            volatile size_t xSize = sizeof( StaticTask_t );
 800b37e:	225c      	movs	r2, #92	; 0x5c
 800b380:	9205      	str	r2, [sp, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800b382:	9a05      	ldr	r2, [sp, #20]
 800b384:	2a5c      	cmp	r2, #92	; 0x5c
 800b386:	d002      	beq.n	800b38e <xTaskCreateStatic+0x26>
 800b388:	f7f7 f8e4 	bl	8002554 <ulSetInterruptMask>
 800b38c:	e7fe      	b.n	800b38c <xTaskCreateStatic+0x24>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 800b38e:	4604      	mov	r4, r0
 800b390:	460d      	mov	r5, r1
 800b392:	9805      	ldr	r0, [sp, #20]
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b394:	4639      	mov	r1, r7
 800b396:	4630      	mov	r0, r6
 800b398:	f000 feb2 	bl	800c100 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b39c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b39e:	4620      	mov	r0, r4
 800b3a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3a2:	6333      	str	r3, [r6, #48]	; 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3a4:	9400      	str	r4, [sp, #0]
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3a6:	2402      	movs	r4, #2
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3a8:	9602      	str	r6, [sp, #8]
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3aa:	f886 4059 	strb.w	r4, [r6, #89]	; 0x59
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b3ae:	ac04      	add	r4, sp, #16
 800b3b0:	4643      	mov	r3, r8
 800b3b2:	464a      	mov	r2, r9
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	9401      	str	r4, [sp, #4]
 800b3b8:	f7ff fdba 	bl	800af30 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b3bc:	4630      	mov	r0, r6
 800b3be:	f7ff fc7d 	bl	800acbc <prvAddNewTaskToReadyList>
    }
 800b3c2:	9804      	ldr	r0, [sp, #16]
 800b3c4:	b007      	add	sp, #28
 800b3c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        configASSERT( puxStackBuffer != NULL );
 800b3ca:	f7f7 f8c3 	bl	8002554 <ulSetInterruptMask>
 800b3ce:	e7fe      	b.n	800b3ce <xTaskCreateStatic+0x66>
        configASSERT( pxTaskBuffer != NULL );
 800b3d0:	f7f7 f8c0 	bl	8002554 <ulSetInterruptMask>
 800b3d4:	e7fe      	b.n	800b3d4 <xTaskCreateStatic+0x6c>
 800b3d6:	bf00      	nop

0800b3d8 <xTaskCreate>:
    {
 800b3d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b3dc:	4607      	mov	r7, r0
 800b3de:	b085      	sub	sp, #20
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800b3e0:	0090      	lsls	r0, r2, #2
    {
 800b3e2:	4616      	mov	r6, r2
 800b3e4:	4688      	mov	r8, r1
 800b3e6:	4699      	mov	r9, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 800b3e8:	f7f6 fd20 	bl	8001e2c <pvPortMalloc>
            if( pxStack != NULL )
 800b3ec:	b1e0      	cbz	r0, 800b428 <xTaskCreate+0x50>
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800b3ee:	4604      	mov	r4, r0
 800b3f0:	205c      	movs	r0, #92	; 0x5c
 800b3f2:	f7f6 fd1b 	bl	8001e2c <pvPortMalloc>
                if( pxNewTCB != NULL )
 800b3f6:	4605      	mov	r5, r0
 800b3f8:	b1d8      	cbz	r0, 800b432 <xTaskCreate+0x5a>
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800b3fa:	225c      	movs	r2, #92	; 0x5c
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	f000 fe7f 	bl	800c100 <memset>
                    pxNewTCB->pxStack = pxStack;
 800b402:	632c      	str	r4, [r5, #48]	; 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b404:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800b406:	464b      	mov	r3, r9
 800b408:	9401      	str	r4, [sp, #4]
 800b40a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b40c:	4632      	mov	r2, r6
 800b40e:	4641      	mov	r1, r8
 800b410:	4638      	mov	r0, r7
 800b412:	9502      	str	r5, [sp, #8]
 800b414:	9400      	str	r4, [sp, #0]
 800b416:	f7ff fd8b 	bl	800af30 <prvInitialiseNewTask.constprop.0>
            prvAddNewTaskToReadyList( pxNewTCB );
 800b41a:	4628      	mov	r0, r5
 800b41c:	f7ff fc4e 	bl	800acbc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800b420:	2001      	movs	r0, #1
    }
 800b422:	b005      	add	sp, #20
 800b424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 800b42c:	b005      	add	sp, #20
 800b42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                    vPortFreeStack( pxStack );
 800b432:	4620      	mov	r0, r4
 800b434:	f7f6 fdac 	bl	8001f90 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
 800b43c:	b005      	add	sp, #20
 800b43e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b442:	bf00      	nop

0800b444 <vTaskDelay>:
        if( xTicksToDelay > ( TickType_t ) 0U )
 800b444:	b1e0      	cbz	r0, 800b480 <vTaskDelay+0x3c>
    {
 800b446:	b510      	push	{r4, lr}
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800b448:	4c0e      	ldr	r4, [pc, #56]	; (800b484 <vTaskDelay+0x40>)
 800b44a:	6823      	ldr	r3, [r4, #0]
 800b44c:	3301      	adds	r3, #1
 800b44e:	6023      	str	r3, [r4, #0]
                configASSERT( uxSchedulerSuspended == 1U );
 800b450:	6823      	ldr	r3, [r4, #0]
 800b452:	2b01      	cmp	r3, #1
 800b454:	d002      	beq.n	800b45c <vTaskDelay+0x18>
 800b456:	f7f7 f87d 	bl	8002554 <ulSetInterruptMask>
 800b45a:	e7fe      	b.n	800b45a <vTaskDelay+0x16>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b45c:	2100      	movs	r1, #0
 800b45e:	f7ff fcc9 	bl	800adf4 <prvAddCurrentTaskToDelayedList>
        taskENTER_CRITICAL();
 800b462:	f7f6 ff43 	bl	80022ec <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 800b466:	6823      	ldr	r3, [r4, #0]
 800b468:	b11b      	cbz	r3, 800b472 <vTaskDelay+0x2e>
 800b46a:	f7ff febf 	bl	800b1ec <xTaskResumeAll.part.0>
        if( xAlreadyYielded == pdFALSE )
 800b46e:	b118      	cbz	r0, 800b478 <vTaskDelay+0x34>
    }
 800b470:	bd10      	pop	{r4, pc}
            configASSERT( uxSchedulerSuspended != 0U );
 800b472:	f7f7 f86f 	bl	8002554 <ulSetInterruptMask>
 800b476:	e7fe      	b.n	800b476 <vTaskDelay+0x32>
    }
 800b478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            taskYIELD_WITHIN_API();
 800b47c:	f7f6 bf2a 	b.w	80022d4 <vPortYield>
 800b480:	f7f6 bf28 	b.w	80022d4 <vPortYield>
 800b484:	20001fec 	.word	0x20001fec

0800b488 <vTaskStartScheduler>:
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800b488:	2149      	movs	r1, #73	; 0x49
{
 800b48a:	b530      	push	{r4, r5, lr}
 800b48c:	4a19      	ldr	r2, [pc, #100]	; (800b4f4 <vTaskStartScheduler+0x6c>)
 800b48e:	b089      	sub	sp, #36	; 0x24
 800b490:	f10d 0311 	add.w	r3, sp, #17
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800b494:	f88d 1010 	strb.w	r1, [sp, #16]
 800b498:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800b49c:	f803 4b01 	strb.w	r4, [r3], #1
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800b4a0:	2c00      	cmp	r4, #0
 800b4a2:	d1f9      	bne.n	800b498 <vTaskStartScheduler+0x10>
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800b4a4:	4814      	ldr	r0, [pc, #80]	; (800b4f8 <vTaskStartScheduler+0x70>)
 800b4a6:	4915      	ldr	r1, [pc, #84]	; (800b4fc <vTaskStartScheduler+0x74>)
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800b4ae:	2280      	movs	r2, #128	; 0x80
 800b4b0:	4813      	ldr	r0, [pc, #76]	; (800b500 <vTaskStartScheduler+0x78>)
 800b4b2:	9400      	str	r4, [sp, #0]
 800b4b4:	a904      	add	r1, sp, #16
 800b4b6:	f7ff ff57 	bl	800b368 <xTaskCreateStatic>
 800b4ba:	4b12      	ldr	r3, [pc, #72]	; (800b504 <vTaskStartScheduler+0x7c>)
 800b4bc:	6018      	str	r0, [r3, #0]
            if( xIdleTaskHandles[ xCoreID ] != NULL )
 800b4be:	b180      	cbz	r0, 800b4e2 <vTaskStartScheduler+0x5a>
            xReturn = xTimerCreateTimerTask();
 800b4c0:	f000 fb0c 	bl	800badc <xTimerCreateTimerTask>
    if( xReturn == pdPASS )
 800b4c4:	2801      	cmp	r0, #1
            xReturn = xTimerCreateTimerTask();
 800b4c6:	4605      	mov	r5, r0
    if( xReturn == pdPASS )
 800b4c8:	d10f      	bne.n	800b4ea <vTaskStartScheduler+0x62>
        portDISABLE_INTERRUPTS();
 800b4ca:	f7f7 f843 	bl	8002554 <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
 800b4ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4d2:	490d      	ldr	r1, [pc, #52]	; (800b508 <vTaskStartScheduler+0x80>)
        xSchedulerRunning = pdTRUE;
 800b4d4:	4a0d      	ldr	r2, [pc, #52]	; (800b50c <vTaskStartScheduler+0x84>)
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4d6:	4b0e      	ldr	r3, [pc, #56]	; (800b510 <vTaskStartScheduler+0x88>)
        xNextTaskUnblockTime = portMAX_DELAY;
 800b4d8:	6008      	str	r0, [r1, #0]
        xSchedulerRunning = pdTRUE;
 800b4da:	6015      	str	r5, [r2, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b4dc:	601c      	str	r4, [r3, #0]
        ( void ) xPortStartScheduler();
 800b4de:	f7f6 ff93 	bl	8002408 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <vTaskStartScheduler+0x8c>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
}
 800b4e6:	b009      	add	sp, #36	; 0x24
 800b4e8:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4ea:	3501      	adds	r5, #1
 800b4ec:	d1f9      	bne.n	800b4e2 <vTaskStartScheduler+0x5a>
 800b4ee:	f7f7 f831 	bl	8002554 <ulSetInterruptMask>
 800b4f2:	e7fe      	b.n	800b4f2 <vTaskStartScheduler+0x6a>
 800b4f4:	0801bc80 	.word	0x0801bc80
 800b4f8:	20002224 	.word	0x20002224
 800b4fc:	20001dec 	.word	0x20001dec
 800b500:	0800b025 	.word	0x0800b025
 800b504:	20002220 	.word	0x20002220
 800b508:	20002280 	.word	0x20002280
 800b50c:	200022a0 	.word	0x200022a0
 800b510:	200022cc 	.word	0x200022cc
 800b514:	20000010 	.word	0x20000010

0800b518 <vTaskSuspendAll>:
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800b518:	4a02      	ldr	r2, [pc, #8]	; (800b524 <vTaskSuspendAll+0xc>)
 800b51a:	6813      	ldr	r3, [r2, #0]
 800b51c:	3301      	adds	r3, #1
 800b51e:	6013      	str	r3, [r2, #0]
}
 800b520:	4770      	bx	lr
 800b522:	bf00      	nop
 800b524:	20001fec 	.word	0x20001fec

0800b528 <xTaskResumeAll>:
{
 800b528:	b508      	push	{r3, lr}
        taskENTER_CRITICAL();
 800b52a:	f7f6 fedf 	bl	80022ec <vPortEnterCritical>
            configASSERT( uxSchedulerSuspended != 0U );
 800b52e:	4b05      	ldr	r3, [pc, #20]	; (800b544 <xTaskResumeAll+0x1c>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	b11b      	cbz	r3, 800b53c <xTaskResumeAll+0x14>
}
 800b534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b538:	f7ff be58 	b.w	800b1ec <xTaskResumeAll.part.0>
            configASSERT( uxSchedulerSuspended != 0U );
 800b53c:	f7f7 f80a 	bl	8002554 <ulSetInterruptMask>
 800b540:	e7fe      	b.n	800b540 <xTaskResumeAll+0x18>
 800b542:	bf00      	nop
 800b544:	20001fec 	.word	0x20001fec

0800b548 <xTaskGetTickCount>:
        xTicks = xTickCount;
 800b548:	4b01      	ldr	r3, [pc, #4]	; (800b550 <xTaskGetTickCount+0x8>)
 800b54a:	6818      	ldr	r0, [r3, #0]
}
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	200022cc 	.word	0x200022cc

0800b554 <xTaskIncrementTick>:
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b554:	4b05      	ldr	r3, [pc, #20]	; (800b56c <xTaskIncrementTick+0x18>)
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	b90b      	cbnz	r3, 800b55e <xTaskIncrementTick+0xa>
 800b55a:	f7ff bd6f 	b.w	800b03c <xTaskIncrementTick.part.0>
        xPendedTicks += 1U;
 800b55e:	4a04      	ldr	r2, [pc, #16]	; (800b570 <xTaskIncrementTick+0x1c>)
}
 800b560:	2000      	movs	r0, #0
        xPendedTicks += 1U;
 800b562:	6813      	ldr	r3, [r2, #0]
 800b564:	3301      	adds	r3, #1
 800b566:	6013      	str	r3, [r2, #0]
}
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	20001fec 	.word	0x20001fec
 800b570:	20002288 	.word	0x20002288

0800b574 <vTaskSwitchContext>:
        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800b574:	4b04      	ldr	r3, [pc, #16]	; (800b588 <vTaskSwitchContext+0x14>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	b11b      	cbz	r3, 800b582 <vTaskSwitchContext+0xe>
            xYieldPendings[ 0 ] = pdTRUE;
 800b57a:	2201      	movs	r2, #1
 800b57c:	4b03      	ldr	r3, [pc, #12]	; (800b58c <vTaskSwitchContext+0x18>)
 800b57e:	601a      	str	r2, [r3, #0]
    }
 800b580:	4770      	bx	lr
 800b582:	f7ff bc91 	b.w	800aea8 <vTaskSwitchContext.part.0>
 800b586:	bf00      	nop
 800b588:	20001fec 	.word	0x20001fec
 800b58c:	2000232c 	.word	0x2000232c

0800b590 <vTaskPlaceOnEventList>:
{
 800b590:	b510      	push	{r4, lr}
    configASSERT( pxEventList );
 800b592:	b158      	cbz	r0, 800b5ac <vTaskPlaceOnEventList+0x1c>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b594:	460c      	mov	r4, r1
 800b596:	4b07      	ldr	r3, [pc, #28]	; (800b5b4 <vTaskPlaceOnEventList+0x24>)
 800b598:	6819      	ldr	r1, [r3, #0]
 800b59a:	3118      	adds	r1, #24
 800b59c:	f7f6 fd92 	bl	80020c4 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5a0:	4620      	mov	r0, r4
}
 800b5a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	f7ff bc24 	b.w	800adf4 <prvAddCurrentTaskToDelayedList>
    configASSERT( pxEventList );
 800b5ac:	f7f6 ffd2 	bl	8002554 <ulSetInterruptMask>
 800b5b0:	e7fe      	b.n	800b5b0 <vTaskPlaceOnEventList+0x20>
 800b5b2:	bf00      	nop
 800b5b4:	20001d10 	.word	0x20001d10

0800b5b8 <vTaskPlaceOnEventListRestricted>:
    {
 800b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        configASSERT( pxEventList );
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	b1f8      	cbz	r0, 800b5fe <vTaskPlaceOnEventListRestricted+0x46>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5be:	4c11      	ldr	r4, [pc, #68]	; (800b604 <vTaskPlaceOnEventListRestricted+0x4c>)
 800b5c0:	685d      	ldr	r5, [r3, #4]
 800b5c2:	4608      	mov	r0, r1
            xTicksToWait = portMAX_DELAY;
 800b5c4:	2a00      	cmp	r2, #0
 800b5c6:	4611      	mov	r1, r2
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5c8:	6822      	ldr	r2, [r4, #0]
 800b5ca:	68ae      	ldr	r6, [r5, #8]
 800b5cc:	61d5      	str	r5, [r2, #28]
 800b5ce:	6822      	ldr	r2, [r4, #0]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5d0:	bf18      	it	ne
 800b5d2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5d6:	6216      	str	r6, [r2, #32]
 800b5d8:	6826      	ldr	r6, [r4, #0]
 800b5da:	6822      	ldr	r2, [r4, #0]
 800b5dc:	6827      	ldr	r7, [r4, #0]
 800b5de:	f102 0418 	add.w	r4, r2, #24
 800b5e2:	681a      	ldr	r2, [r3, #0]
 800b5e4:	3618      	adds	r6, #24
 800b5e6:	f102 0c01 	add.w	ip, r2, #1
 800b5ea:	68aa      	ldr	r2, [r5, #8]
 800b5ec:	6056      	str	r6, [r2, #4]
 800b5ee:	60ac      	str	r4, [r5, #8]
 800b5f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5f2:	f8c3 c000 	str.w	ip, [r3]
    }
 800b5f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b5fa:	f7ff bbfb 	b.w	800adf4 <prvAddCurrentTaskToDelayedList>
        configASSERT( pxEventList );
 800b5fe:	f7f6 ffa9 	bl	8002554 <ulSetInterruptMask>
 800b602:	e7fe      	b.n	800b602 <vTaskPlaceOnEventListRestricted+0x4a>
 800b604:	20001d10 	.word	0x20001d10

0800b608 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b608:	68c3      	ldr	r3, [r0, #12]
{
 800b60a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800b60e:	68db      	ldr	r3, [r3, #12]
    configASSERT( pxUnblockedTCB );
 800b610:	2b00      	cmp	r3, #0
 800b612:	d05e      	beq.n	800b6d2 <xTaskRemoveFromEventList+0xca>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800b614:	e9d3 4107 	ldrd	r4, r1, [r3, #28]
 800b618:	2500      	movs	r5, #0
 800b61a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b61c:	60a1      	str	r1, [r4, #8]
 800b61e:	604c      	str	r4, [r1, #4]
 800b620:	6854      	ldr	r4, [r2, #4]
 800b622:	f103 0018 	add.w	r0, r3, #24
 800b626:	4284      	cmp	r4, r0
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b628:	4c2b      	ldr	r4, [pc, #172]	; (800b6d8 <xTaskRemoveFromEventList+0xd0>)
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800b62a:	bf08      	it	eq
 800b62c:	6051      	streq	r1, [r2, #4]
 800b62e:	6811      	ldr	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b630:	6824      	ldr	r4, [r4, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800b632:	3901      	subs	r1, #1
 800b634:	629d      	str	r5, [r3, #40]	; 0x28
 800b636:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b638:	b1bc      	cbz	r4, 800b66a <xTaskRemoveFromEventList+0x62>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b63a:	4928      	ldr	r1, [pc, #160]	; (800b6dc <xTaskRemoveFromEventList+0xd4>)
 800b63c:	684a      	ldr	r2, [r1, #4]
 800b63e:	6894      	ldr	r4, [r2, #8]
 800b640:	e9c3 2407 	strd	r2, r4, [r3, #28]
 800b644:	6894      	ldr	r4, [r2, #8]
 800b646:	6060      	str	r0, [r4, #4]
 800b648:	6090      	str	r0, [r2, #8]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b64a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b64c:	6299      	str	r1, [r3, #40]	; 0x28
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b64e:	4b24      	ldr	r3, [pc, #144]	; (800b6e0 <xTaskRemoveFromEventList+0xd8>)
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b650:	680c      	ldr	r4, [r1, #0]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b652:	681b      	ldr	r3, [r3, #0]
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b654:	3401      	adds	r4, #1
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b658:	600c      	str	r4, [r1, #0]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d236      	bcs.n	800b6cc <xTaskRemoveFromEventList+0xc4>
            xYieldPendings[ 0 ] = pdTRUE;
 800b65e:	2301      	movs	r3, #1
 800b660:	4a20      	ldr	r2, [pc, #128]	; (800b6e4 <xTaskRemoveFromEventList+0xdc>)
            xReturn = pdTRUE;
 800b662:	4618      	mov	r0, r3
            xYieldPendings[ 0 ] = pdTRUE;
 800b664:	6013      	str	r3, [r2, #0]
}
 800b666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800b66a:	6959      	ldr	r1, [r3, #20]
 800b66c:	e9d3 2002 	ldrd	r2, r0, [r3, #8]
 800b670:	6090      	str	r0, [r2, #8]
 800b672:	68d8      	ldr	r0, [r3, #12]
 800b674:	1d1f      	adds	r7, r3, #4
 800b676:	6042      	str	r2, [r0, #4]
 800b678:	684a      	ldr	r2, [r1, #4]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b67a:	4d1b      	ldr	r5, [pc, #108]	; (800b6e8 <xTaskRemoveFromEventList+0xe0>)
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800b67c:	42ba      	cmp	r2, r7
 800b67e:	bf08      	it	eq
 800b680:	6048      	streq	r0, [r1, #4]
 800b682:	6808      	ldr	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800b686:	3801      	subs	r0, #1
 800b688:	6008      	str	r0, [r1, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b68a:	2001      	movs	r0, #1
 800b68c:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800b690:	eb05 0c81 	add.w	ip, r5, r1, lsl #2
 800b694:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800b698:	f8df e050 	ldr.w	lr, [pc, #80]	; 800b6ec <xTaskRemoveFromEventList+0xe4>
 800b69c:	68a6      	ldr	r6, [r4, #8]
 800b69e:	0089      	lsls	r1, r1, #2
 800b6a0:	60de      	str	r6, [r3, #12]
 800b6a2:	586e      	ldr	r6, [r5, r1]
 800b6a4:	f8de 8000 	ldr.w	r8, [lr]
 800b6a8:	4406      	add	r6, r0
 800b6aa:	4090      	lsls	r0, r2
 800b6ac:	ea40 0008 	orr.w	r0, r0, r8
 800b6b0:	f8ce 0000 	str.w	r0, [lr]
 800b6b4:	68a0      	ldr	r0, [r4, #8]
 800b6b6:	609c      	str	r4, [r3, #8]
 800b6b8:	6047      	str	r7, [r0, #4]
 800b6ba:	60a7      	str	r7, [r4, #8]
 800b6bc:	f8c3 c014 	str.w	ip, [r3, #20]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6c0:	4b07      	ldr	r3, [pc, #28]	; (800b6e0 <xTaskRemoveFromEventList+0xd8>)
        prvAddTaskToReadyList( pxUnblockedTCB );
 800b6c2:	506e      	str	r6, [r5, r1]
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d3c8      	bcc.n	800b65e <xTaskRemoveFromEventList+0x56>
            xReturn = pdFALSE;
 800b6cc:	2000      	movs	r0, #0
}
 800b6ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    configASSERT( pxUnblockedTCB );
 800b6d2:	f7f6 ff3f 	bl	8002554 <ulSetInterruptMask>
 800b6d6:	e7fe      	b.n	800b6d6 <xTaskRemoveFromEventList+0xce>
 800b6d8:	20001fec 	.word	0x20001fec
 800b6dc:	2000228c 	.word	0x2000228c
 800b6e0:	20001d10 	.word	0x20001d10
 800b6e4:	2000232c 	.word	0x2000232c
 800b6e8:	20001d1c 	.word	0x20001d1c
 800b6ec:	200021f4 	.word	0x200021f4

0800b6f0 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6f0:	4a03      	ldr	r2, [pc, #12]	; (800b700 <vTaskInternalSetTimeOutState+0x10>)
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b6f2:	4b04      	ldr	r3, [pc, #16]	; (800b704 <vTaskInternalSetTimeOutState+0x14>)
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b6f4:	6812      	ldr	r2, [r2, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	e9c0 2300 	strd	r2, r3, [r0]
}
 800b6fc:	4770      	bx	lr
 800b6fe:	bf00      	nop
 800b700:	20002284 	.word	0x20002284
 800b704:	200022cc 	.word	0x200022cc

0800b708 <xTaskCheckForTimeOut>:
{
 800b708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b70a:	b083      	sub	sp, #12
    configASSERT( pxTimeOut );
 800b70c:	b370      	cbz	r0, 800b76c <xTaskCheckForTimeOut+0x64>
    configASSERT( pxTicksToWait );
 800b70e:	460d      	mov	r5, r1
 800b710:	b339      	cbz	r1, 800b762 <xTaskCheckForTimeOut+0x5a>
 800b712:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 800b714:	f7f6 fdea 	bl	80022ec <vPortEnterCritical>
            if( *pxTicksToWait == portMAX_DELAY )
 800b718:	682b      	ldr	r3, [r5, #0]
        const TickType_t xConstTickCount = xTickCount;
 800b71a:	4a16      	ldr	r2, [pc, #88]	; (800b774 <xTaskCheckForTimeOut+0x6c>)
            if( *pxTicksToWait == portMAX_DELAY )
 800b71c:	1c58      	adds	r0, r3, #1
        const TickType_t xConstTickCount = xTickCount;
 800b71e:	6811      	ldr	r1, [r2, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 800b720:	d022      	beq.n	800b768 <xTaskCheckForTimeOut+0x60>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800b722:	e9d4 6000 	ldrd	r6, r0, [r4]
 800b726:	f8df c050 	ldr.w	ip, [pc, #80]	; 800b778 <xTaskCheckForTimeOut+0x70>
 800b72a:	f8dc 7000 	ldr.w	r7, [ip]
 800b72e:	42be      	cmp	r6, r7
 800b730:	d00a      	beq.n	800b748 <xTaskCheckForTimeOut+0x40>
 800b732:	4288      	cmp	r0, r1
 800b734:	d808      	bhi.n	800b748 <xTaskCheckForTimeOut+0x40>
            *pxTicksToWait = ( TickType_t ) 0;
 800b736:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 800b738:	2001      	movs	r0, #1
            *pxTicksToWait = ( TickType_t ) 0;
 800b73a:	602b      	str	r3, [r5, #0]
 800b73c:	9001      	str	r0, [sp, #4]
    taskEXIT_CRITICAL();
 800b73e:	f7f6 fde3 	bl	8002308 <vPortExitCritical>
}
 800b742:	9801      	ldr	r0, [sp, #4]
 800b744:	b003      	add	sp, #12
 800b746:	bdf0      	pop	{r4, r5, r6, r7, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b748:	1a0f      	subs	r7, r1, r0
        else if( xElapsedTime < *pxTicksToWait )
 800b74a:	42bb      	cmp	r3, r7
 800b74c:	d9f3      	bls.n	800b736 <xTaskCheckForTimeOut+0x2e>
            *pxTicksToWait -= xElapsedTime;
 800b74e:	1a5b      	subs	r3, r3, r1
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b750:	f8dc 1000 	ldr.w	r1, [ip]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b754:	6812      	ldr	r2, [r2, #0]
            *pxTicksToWait -= xElapsedTime;
 800b756:	4403      	add	r3, r0
 800b758:	602b      	str	r3, [r5, #0]
            xReturn = pdFALSE;
 800b75a:	2000      	movs	r0, #0
    pxTimeOut->xTimeOnEntering = xTickCount;
 800b75c:	e9c4 1200 	strd	r1, r2, [r4]
            xReturn = pdFALSE;
 800b760:	e7ec      	b.n	800b73c <xTaskCheckForTimeOut+0x34>
    configASSERT( pxTicksToWait );
 800b762:	f7f6 fef7 	bl	8002554 <ulSetInterruptMask>
 800b766:	e7fe      	b.n	800b766 <xTaskCheckForTimeOut+0x5e>
                xReturn = pdFALSE;
 800b768:	2000      	movs	r0, #0
 800b76a:	e7e7      	b.n	800b73c <xTaskCheckForTimeOut+0x34>
    configASSERT( pxTimeOut );
 800b76c:	f7f6 fef2 	bl	8002554 <ulSetInterruptMask>
 800b770:	e7fe      	b.n	800b770 <xTaskCheckForTimeOut+0x68>
 800b772:	bf00      	nop
 800b774:	200022cc 	.word	0x200022cc
 800b778:	20002284 	.word	0x20002284

0800b77c <vTaskMissedYield>:
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 800b77c:	2201      	movs	r2, #1
 800b77e:	4b01      	ldr	r3, [pc, #4]	; (800b784 <vTaskMissedYield+0x8>)
 800b780:	601a      	str	r2, [r3, #0]
}
 800b782:	4770      	bx	lr
 800b784:	2000232c 	.word	0x2000232c

0800b788 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 800b788:	4b05      	ldr	r3, [pc, #20]	; (800b7a0 <xTaskGetSchedulerState+0x18>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	b133      	cbz	r3, 800b79c <xTaskGetSchedulerState+0x14>
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800b78e:	4b05      	ldr	r3, [pc, #20]	; (800b7a4 <xTaskGetSchedulerState+0x1c>)
 800b790:	681b      	ldr	r3, [r3, #0]
                    xReturn = taskSCHEDULER_SUSPENDED;
 800b792:	2b00      	cmp	r3, #0
 800b794:	bf0c      	ite	eq
 800b796:	2002      	moveq	r0, #2
 800b798:	2000      	movne	r0, #0
 800b79a:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 800b79c:	2001      	movs	r0, #1
    }
 800b79e:	4770      	bx	lr
 800b7a0:	200022a0 	.word	0x200022a0
 800b7a4:	20001fec 	.word	0x20001fec

0800b7a8 <vApplicationGetTimerTaskMemory>:
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800b7a8:	2380      	movs	r3, #128	; 0x80
    {
 800b7aa:	b430      	push	{r4, r5}
        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 800b7ac:	4d03      	ldr	r5, [pc, #12]	; (800b7bc <vApplicationGetTimerTaskMemory+0x14>)
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 800b7ae:	4c04      	ldr	r4, [pc, #16]	; (800b7c0 <vApplicationGetTimerTaskMemory+0x18>)
        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 800b7b0:	6005      	str	r5, [r0, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 800b7b2:	600c      	str	r4, [r1, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800b7b4:	6013      	str	r3, [r2, #0]
    }
 800b7b6:	bc30      	pop	{r4, r5}
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	200022d0 	.word	0x200022d0
 800b7c0:	20001ff4 	.word	0x20001ff4

0800b7c4 <prvCheckForValidListAndQueue>:
        pxOverflowTimerList = pxTemp;
    }
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
        {
            if( xTimerQueue == NULL )
 800b7c6:	4c12      	ldr	r4, [pc, #72]	; (800b810 <prvCheckForValidListAndQueue+0x4c>)
    {
 800b7c8:	b083      	sub	sp, #12
        taskENTER_CRITICAL();
 800b7ca:	f7f6 fd8f 	bl	80022ec <vPortEnterCritical>
            if( xTimerQueue == NULL )
 800b7ce:	6825      	ldr	r5, [r4, #0]
 800b7d0:	b125      	cbz	r5, 800b7dc <prvCheckForValidListAndQueue+0x18>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    }
 800b7d2:	b003      	add	sp, #12
 800b7d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 800b7d8:	f7f6 bd96 	b.w	8002308 <vPortExitCritical>
                vListInitialise( &xActiveTimerList1 );
 800b7dc:	4f0d      	ldr	r7, [pc, #52]	; (800b814 <prvCheckForValidListAndQueue+0x50>)
                vListInitialise( &xActiveTimerList2 );
 800b7de:	4e0e      	ldr	r6, [pc, #56]	; (800b818 <prvCheckForValidListAndQueue+0x54>)
                vListInitialise( &xActiveTimerList1 );
 800b7e0:	4638      	mov	r0, r7
 800b7e2:	f7f6 fc5f 	bl	80020a4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7f6 fc5c 	bl	80020a4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b7ec:	4a0b      	ldr	r2, [pc, #44]	; (800b81c <prvCheckForValidListAndQueue+0x58>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7ee:	9500      	str	r5, [sp, #0]
                pxCurrentTimerList = &xActiveTimerList1;
 800b7f0:	6017      	str	r7, [r2, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b7f2:	4a0b      	ldr	r2, [pc, #44]	; (800b820 <prvCheckForValidListAndQueue+0x5c>)
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7f4:	2110      	movs	r1, #16
                pxOverflowTimerList = &xActiveTimerList2;
 800b7f6:	6016      	str	r6, [r2, #0]
                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <prvCheckForValidListAndQueue+0x60>)
 800b7fa:	4a0b      	ldr	r2, [pc, #44]	; (800b828 <prvCheckForValidListAndQueue+0x64>)
 800b7fc:	200a      	movs	r0, #10
 800b7fe:	f7f6 ff79 	bl	80026f4 <xQueueGenericCreateStatic>
 800b802:	6020      	str	r0, [r4, #0]
    }
 800b804:	b003      	add	sp, #12
 800b806:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        taskEXIT_CRITICAL();
 800b80a:	f7f6 bd7d 	b.w	8002308 <vPortExitCritical>
 800b80e:	bf00      	nop
 800b810:	20002454 	.word	0x20002454
 800b814:	200023d8 	.word	0x200023d8
 800b818:	200023ec 	.word	0x200023ec
 800b81c:	20002330 	.word	0x20002330
 800b820:	20002334 	.word	0x20002334
 800b824:	20002404 	.word	0x20002404
 800b828:	20002338 	.word	0x20002338

0800b82c <prvReloadTimer>:
    {
 800b82c:	b570      	push	{r4, r5, r6, lr}
 800b82e:	4604      	mov	r4, r0
 800b830:	4616      	mov	r6, r2
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b832:	e005      	b.n	800b840 <prvReloadTimer+0x14>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800b834:	4293      	cmp	r3, r2
 800b836:	d818      	bhi.n	800b86a <prvReloadTimer+0x3e>
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b838:	4620      	mov	r0, r4
 800b83a:	6a23      	ldr	r3, [r4, #32]
 800b83c:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800b83e:	4629      	mov	r1, r5
 800b840:	69a3      	ldr	r3, [r4, #24]
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800b842:	1a72      	subs	r2, r6, r1
 800b844:	185d      	adds	r5, r3, r1
 800b846:	bf2c      	ite	cs
 800b848:	2001      	movcs	r0, #1
 800b84a:	2000      	movcc	r0, #0
        if( xNextExpiryTime <= xTimeNow )
 800b84c:	42b5      	cmp	r5, r6
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b84e:	6065      	str	r5, [r4, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b850:	6124      	str	r4, [r4, #16]
        if( xNextExpiryTime <= xTimeNow )
 800b852:	d9ef      	bls.n	800b834 <prvReloadTimer+0x8>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b854:	42b1      	cmp	r1, r6
 800b856:	d901      	bls.n	800b85c <prvReloadTimer+0x30>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d0ed      	beq.n	800b838 <prvReloadTimer+0xc>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b85c:	4b06      	ldr	r3, [pc, #24]	; (800b878 <prvReloadTimer+0x4c>)
 800b85e:	1d21      	adds	r1, r4, #4
 800b860:	6818      	ldr	r0, [r3, #0]
    }
 800b862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b866:	f7f6 bc2d 	b.w	80020c4 <vListInsert>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b86a:	4b04      	ldr	r3, [pc, #16]	; (800b87c <prvReloadTimer+0x50>)
 800b86c:	1d21      	adds	r1, r4, #4
 800b86e:	6818      	ldr	r0, [r3, #0]
    }
 800b870:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b874:	f7f6 bc26 	b.w	80020c4 <vListInsert>
 800b878:	20002330 	.word	0x20002330
 800b87c:	20002334 	.word	0x20002334

0800b880 <prvProcessExpiredTimer>:
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b880:	4a10      	ldr	r2, [pc, #64]	; (800b8c4 <prvProcessExpiredTimer+0x44>)
    {
 800b882:	b570      	push	{r4, r5, r6, lr}
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b884:	6812      	ldr	r2, [r2, #0]
    {
 800b886:	4605      	mov	r5, r0
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b888:	68d2      	ldr	r2, [r2, #12]
    {
 800b88a:	460e      	mov	r6, r1
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b88c:	68d4      	ldr	r4, [r2, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b88e:	1d20      	adds	r0, r4, #4
 800b890:	f7f6 fc30 	bl	80020f4 <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800b894:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800b898:	075a      	lsls	r2, r3, #29
 800b89a:	d408      	bmi.n	800b8ae <prvProcessExpiredTimer+0x2e>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b89c:	f023 0301 	bic.w	r3, r3, #1
 800b8a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	6a23      	ldr	r3, [r4, #32]
    }
 800b8a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8ac:	4718      	bx	r3
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	4632      	mov	r2, r6
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7ff ffba 	bl	800b82c <prvReloadTimer>
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	6a23      	ldr	r3, [r4, #32]
    }
 800b8bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8c0:	4718      	bx	r3
 800b8c2:	bf00      	nop
 800b8c4:	20002330 	.word	0x20002330

0800b8c8 <prvTimerTask>:
    {
 800b8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8cc:	2600      	movs	r6, #0
 800b8ce:	4d7f      	ldr	r5, [pc, #508]	; (800bacc <prvTimerTask+0x204>)
 800b8d0:	4f7f      	ldr	r7, [pc, #508]	; (800bad0 <prvTimerTask+0x208>)
 800b8d2:	f8df 8204 	ldr.w	r8, [pc, #516]	; 800bad8 <prvTimerTask+0x210>
 800b8d6:	4c7f      	ldr	r4, [pc, #508]	; (800bad4 <prvTimerTask+0x20c>)
 800b8d8:	b084      	sub	sp, #16
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b8da:	682b      	ldr	r3, [r5, #0]
 800b8dc:	f8d3 a000 	ldr.w	sl, [r3]
 800b8e0:	f1ba 0f00 	cmp.w	sl, #0
 800b8e4:	f000 80bf 	beq.w	800ba66 <prvTimerTask+0x19e>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	f8d3 a000 	ldr.w	sl, [r3]
        vTaskSuspendAll();
 800b8ee:	f7ff fe13 	bl	800b518 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 800b8f2:	f7ff fe29 	bl	800b548 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800b8f6:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800b8f8:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 800b8fa:	4283      	cmp	r3, r0
 800b8fc:	d83f      	bhi.n	800b97e <prvTimerTask+0xb6>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8fe:	4582      	cmp	sl, r0
        xLastTime = xTimeNow;
 800b900:	6038      	str	r0, [r7, #0]
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b902:	f240 80cf 	bls.w	800baa4 <prvTimerTask+0x1dc>
 800b906:	2200      	movs	r2, #0
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b908:	6820      	ldr	r0, [r4, #0]
 800b90a:	ebaa 0109 	sub.w	r1, sl, r9
 800b90e:	f7f6 ffc3 	bl	8002898 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b912:	f7ff fe09 	bl	800b528 <xTaskResumeAll>
 800b916:	2800      	cmp	r0, #0
 800b918:	f000 80b6 	beq.w	800ba88 <prvTimerTask+0x1c0>
        DaemonTaskMessage_t xMessage = { 0 };
 800b91c:	e9cd 6600 	strd	r6, r6, [sp]
 800b920:	e9cd 6602 	strd	r6, r6, [sp, #8]
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 800b924:	2200      	movs	r2, #0
 800b926:	4669      	mov	r1, sp
 800b928:	6820      	ldr	r0, [r4, #0]
 800b92a:	f7f6 ff19 	bl	8002760 <xQueueReceive>
 800b92e:	2800      	cmp	r0, #0
 800b930:	d0d3      	beq.n	800b8da <prvTimerTask+0x12>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b932:	9b00      	ldr	r3, [sp, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	f2c0 808d 	blt.w	800ba54 <prvTimerTask+0x18c>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b93a:	f8dd 9008 	ldr.w	r9, [sp, #8]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 800b93e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800b942:	b11b      	cbz	r3, 800b94c <prvTimerTask+0x84>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b944:	f109 0004 	add.w	r0, r9, #4
 800b948:	f7f6 fbd4 	bl	80020f4 <uxListRemove>
        xTimeNow = xTaskGetTickCount();
 800b94c:	f7ff fdfc 	bl	800b548 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800b950:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800b952:	4682      	mov	sl, r0
        if( xTimeNow < xLastTime )
 800b954:	4298      	cmp	r0, r3
 800b956:	d326      	bcc.n	800b9a6 <prvTimerTask+0xde>
                switch( xMessage.xMessageID )
 800b958:	9b00      	ldr	r3, [sp, #0]
        xLastTime = xTimeNow;
 800b95a:	f8c7 a000 	str.w	sl, [r7]
                switch( xMessage.xMessageID )
 800b95e:	3b01      	subs	r3, #1
 800b960:	2b08      	cmp	r3, #8
 800b962:	d8df      	bhi.n	800b924 <prvTimerTask+0x5c>
 800b964:	e8df f003 	tbb	[pc, r3]
 800b968:	4d662929 	.word	0x4d662929
 800b96c:	6629296d 	.word	0x6629296d
 800b970:	4d          	.byte	0x4d
 800b971:	00          	.byte	0x00
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b972:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800b974:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b978:	6818      	ldr	r0, [r3, #0]
 800b97a:	f7ff ff81 	bl	800b880 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b97e:	682b      	ldr	r3, [r5, #0]
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	2a00      	cmp	r2, #0
 800b984:	d1f5      	bne.n	800b972 <prvTimerTask+0xaa>
        pxCurrentTimerList = pxOverflowTimerList;
 800b986:	f8d8 2000 	ldr.w	r2, [r8]
        xLastTime = xTimeNow;
 800b98a:	f8c7 9000 	str.w	r9, [r7]
        pxCurrentTimerList = pxOverflowTimerList;
 800b98e:	602a      	str	r2, [r5, #0]
        pxOverflowTimerList = pxTemp;
 800b990:	f8c8 3000 	str.w	r3, [r8]
                ( void ) xTaskResumeAll();
 800b994:	f7ff fdc8 	bl	800b528 <xTaskResumeAll>
 800b998:	e7c0      	b.n	800b91c <prvTimerTask+0x54>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b99a:	68db      	ldr	r3, [r3, #12]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800b99c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800b9a0:	6818      	ldr	r0, [r3, #0]
 800b9a2:	f7ff ff6d 	bl	800b880 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b9a6:	682b      	ldr	r3, [r5, #0]
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	2a00      	cmp	r2, #0
 800b9ac:	d1f5      	bne.n	800b99a <prvTimerTask+0xd2>
        pxCurrentTimerList = pxOverflowTimerList;
 800b9ae:	f8d8 2000 	ldr.w	r2, [r8]
        pxOverflowTimerList = pxTemp;
 800b9b2:	f8c8 3000 	str.w	r3, [r8]
        pxCurrentTimerList = pxOverflowTimerList;
 800b9b6:	602a      	str	r2, [r5, #0]
            *pxTimerListsWereSwitched = pdTRUE;
 800b9b8:	e7ce      	b.n	800b958 <prvTimerTask+0x90>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800b9ba:	f899 0028 	ldrb.w	r0, [r9, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9be:	9b01      	ldr	r3, [sp, #4]
 800b9c0:	f8d9 2018 	ldr.w	r2, [r9, #24]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800b9c4:	f040 0c01 	orr.w	ip, r0, #1
 800b9c8:	1899      	adds	r1, r3, r2
 800b9ca:	f889 c028 	strb.w	ip, [r9, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9ce:	bf2c      	ite	cs
 800b9d0:	f04f 0c01 	movcs.w	ip, #1
 800b9d4:	f04f 0c00 	movcc.w	ip, #0
        if( xNextExpiryTime <= xTimeNow )
 800b9d8:	4551      	cmp	r1, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9da:	f8c9 1004 	str.w	r1, [r9, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9de:	f8c9 9010 	str.w	r9, [r9, #16]
        if( xNextExpiryTime <= xTimeNow )
 800b9e2:	d854      	bhi.n	800ba8e <prvTimerTask+0x1c6>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800b9e4:	ebaa 0303 	sub.w	r3, sl, r3
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d81c      	bhi.n	800ba26 <prvTimerTask+0x15e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 800b9ec:	0743      	lsls	r3, r0, #29
 800b9ee:	d464      	bmi.n	800baba <prvTimerTask+0x1f2>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800b9f0:	f020 0001 	bic.w	r0, r0, #1
 800b9f4:	f889 0028 	strb.w	r0, [r9, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9f8:	4648      	mov	r0, r9
 800b9fa:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800b9fe:	4798      	blx	r3
 800ba00:	e790      	b.n	800b924 <prvTimerTask+0x5c>
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800ba02:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba06:	9b01      	ldr	r3, [sp, #4]
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800ba08:	f042 0201 	orr.w	r2, r2, #1
 800ba0c:	f889 2028 	strb.w	r2, [r9, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba10:	f8c9 3018 	str.w	r3, [r9, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d055      	beq.n	800bac4 <prvTimerTask+0x1fc>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba18:	4453      	add	r3, sl
        if( xNextExpiryTime <= xTimeNow )
 800ba1a:	4553      	cmp	r3, sl
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ba1c:	f8c9 3004 	str.w	r3, [r9, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ba20:	f8c9 9010 	str.w	r9, [r9, #16]
        if( xNextExpiryTime <= xTimeNow )
 800ba24:	d838      	bhi.n	800ba98 <prvTimerTask+0x1d0>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ba26:	f8d8 0000 	ldr.w	r0, [r8]
 800ba2a:	f109 0104 	add.w	r1, r9, #4
 800ba2e:	f7f6 fb49 	bl	80020c4 <vListInsert>
        return xProcessTimerNow;
 800ba32:	e777      	b.n	800b924 <prvTimerTask+0x5c>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ba34:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800ba38:	f023 0301 	bic.w	r3, r3, #1
 800ba3c:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
                        break;
 800ba40:	e770      	b.n	800b924 <prvTimerTask+0x5c>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba42:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
 800ba46:	079a      	lsls	r2, r3, #30
 800ba48:	d533      	bpl.n	800bab2 <prvTimerTask+0x1ea>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800ba4a:	f023 0301 	bic.w	r3, r3, #1
 800ba4e:	f889 3028 	strb.w	r3, [r9, #40]	; 0x28
 800ba52:	e767      	b.n	800b924 <prvTimerTask+0x5c>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ba54:	9b01      	ldr	r3, [sp, #4]
 800ba56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba5a:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba5c:	9b00      	ldr	r3, [sp, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f6ff af60 	blt.w	800b924 <prvTimerTask+0x5c>
 800ba64:	e769      	b.n	800b93a <prvTimerTask+0x72>
        vTaskSuspendAll();
 800ba66:	f7ff fd57 	bl	800b518 <vTaskSuspendAll>
        xTimeNow = xTaskGetTickCount();
 800ba6a:	f7ff fd6d 	bl	800b548 <xTaskGetTickCount>
        if( xTimeNow < xLastTime )
 800ba6e:	683b      	ldr	r3, [r7, #0]
        xTimeNow = xTaskGetTickCount();
 800ba70:	4681      	mov	r9, r0
        if( xTimeNow < xLastTime )
 800ba72:	4298      	cmp	r0, r3
 800ba74:	d383      	bcc.n	800b97e <prvTimerTask+0xb6>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba76:	f8d8 3000 	ldr.w	r3, [r8]
        xLastTime = xTimeNow;
 800ba7a:	f8c7 9000 	str.w	r9, [r7]
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	fab2 f282 	clz	r2, r2
 800ba84:	0952      	lsrs	r2, r2, #5
 800ba86:	e73f      	b.n	800b908 <prvTimerTask+0x40>
                        taskYIELD_WITHIN_API();
 800ba88:	f7f6 fc24 	bl	80022d4 <vPortYield>
 800ba8c:	e746      	b.n	800b91c <prvTimerTask+0x54>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba8e:	4553      	cmp	r3, sl
 800ba90:	d902      	bls.n	800ba98 <prvTimerTask+0x1d0>
 800ba92:	f1bc 0f00 	cmp.w	ip, #0
 800ba96:	d0a9      	beq.n	800b9ec <prvTimerTask+0x124>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba98:	6828      	ldr	r0, [r5, #0]
 800ba9a:	f109 0104 	add.w	r1, r9, #4
 800ba9e:	f7f6 fb11 	bl	80020c4 <vListInsert>
 800baa2:	e73f      	b.n	800b924 <prvTimerTask+0x5c>
                    ( void ) xTaskResumeAll();
 800baa4:	f7ff fd40 	bl	800b528 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800baa8:	4649      	mov	r1, r9
 800baaa:	4650      	mov	r0, sl
 800baac:	f7ff fee8 	bl	800b880 <prvProcessExpiredTimer>
 800bab0:	e734      	b.n	800b91c <prvTimerTask+0x54>
                                vPortFree( pxTimer );
 800bab2:	4648      	mov	r0, r9
 800bab4:	f7f6 fa6c 	bl	8001f90 <vPortFree>
 800bab8:	e734      	b.n	800b924 <prvTimerTask+0x5c>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800baba:	4652      	mov	r2, sl
 800babc:	4648      	mov	r0, r9
 800babe:	f7ff feb5 	bl	800b82c <prvReloadTimer>
 800bac2:	e799      	b.n	800b9f8 <prvTimerTask+0x130>
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bac4:	f7f6 fd46 	bl	8002554 <ulSetInterruptMask>
 800bac8:	e7fe      	b.n	800bac8 <prvTimerTask+0x200>
 800baca:	bf00      	nop
 800bacc:	20002330 	.word	0x20002330
 800bad0:	20002400 	.word	0x20002400
 800bad4:	20002454 	.word	0x20002454
 800bad8:	20002334 	.word	0x20002334

0800badc <xTimerCreateTimerTask>:
    {
 800badc:	b530      	push	{r4, r5, lr}
 800bade:	b089      	sub	sp, #36	; 0x24
        prvCheckForValidListAndQueue();
 800bae0:	f7ff fe70 	bl	800b7c4 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 800bae4:	4b0f      	ldr	r3, [pc, #60]	; (800bb24 <xTimerCreateTimerTask+0x48>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	b1cb      	cbz	r3, 800bb1e <xTimerCreateTimerTask+0x42>
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 800baea:	2400      	movs	r4, #0
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800baec:	2509      	movs	r5, #9
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800baee:	aa07      	add	r2, sp, #28
 800baf0:	a906      	add	r1, sp, #24
 800baf2:	a805      	add	r0, sp, #20
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 800baf4:	e9cd 4405 	strd	r4, r4, [sp, #20]
                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 800baf8:	f7ff fe56 	bl	800b7a8 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 800bafc:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800bb00:	4623      	mov	r3, r4
 800bb02:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800bb06:	9a07      	ldr	r2, [sp, #28]
 800bb08:	4907      	ldr	r1, [pc, #28]	; (800bb28 <xTimerCreateTimerTask+0x4c>)
 800bb0a:	4808      	ldr	r0, [pc, #32]	; (800bb2c <xTimerCreateTimerTask+0x50>)
 800bb0c:	9500      	str	r5, [sp, #0]
 800bb0e:	f7ff fc2b 	bl	800b368 <xTaskCreateStatic>
 800bb12:	4b07      	ldr	r3, [pc, #28]	; (800bb30 <xTimerCreateTimerTask+0x54>)
 800bb14:	6018      	str	r0, [r3, #0]
                    if( xTimerTaskHandle != NULL )
 800bb16:	b110      	cbz	r0, 800bb1e <xTimerCreateTimerTask+0x42>
    }
 800bb18:	2001      	movs	r0, #1
 800bb1a:	b009      	add	sp, #36	; 0x24
 800bb1c:	bd30      	pop	{r4, r5, pc}
        configASSERT( xReturn );
 800bb1e:	f7f6 fd19 	bl	8002554 <ulSetInterruptMask>
 800bb22:	e7fe      	b.n	800bb22 <xTimerCreateTimerTask+0x46>
 800bb24:	20002454 	.word	0x20002454
 800bb28:	0801bc88 	.word	0x0801bc88
 800bb2c:	0800b8c9 	.word	0x0800b8c9
 800bb30:	20002458 	.word	0x20002458

0800bb34 <__libc_init_array>:
 800bb34:	b570      	push	{r4, r5, r6, lr}
 800bb36:	4e0d      	ldr	r6, [pc, #52]	; (800bb6c <__libc_init_array+0x38>)
 800bb38:	4d0d      	ldr	r5, [pc, #52]	; (800bb70 <__libc_init_array+0x3c>)
 800bb3a:	1b76      	subs	r6, r6, r5
 800bb3c:	10b6      	asrs	r6, r6, #2
 800bb3e:	d006      	beq.n	800bb4e <__libc_init_array+0x1a>
 800bb40:	2400      	movs	r4, #0
 800bb42:	3401      	adds	r4, #1
 800bb44:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb48:	4798      	blx	r3
 800bb4a:	42a6      	cmp	r6, r4
 800bb4c:	d1f9      	bne.n	800bb42 <__libc_init_array+0xe>
 800bb4e:	4e09      	ldr	r6, [pc, #36]	; (800bb74 <__libc_init_array+0x40>)
 800bb50:	f000 fd4c 	bl	800c5ec <_init>
 800bb54:	4d08      	ldr	r5, [pc, #32]	; (800bb78 <__libc_init_array+0x44>)
 800bb56:	1b76      	subs	r6, r6, r5
 800bb58:	10b6      	asrs	r6, r6, #2
 800bb5a:	d006      	beq.n	800bb6a <__libc_init_array+0x36>
 800bb5c:	2400      	movs	r4, #0
 800bb5e:	3401      	adds	r4, #1
 800bb60:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb64:	4798      	blx	r3
 800bb66:	42a6      	cmp	r6, r4
 800bb68:	d1f9      	bne.n	800bb5e <__libc_init_array+0x2a>
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}
 800bb6c:	0801bc9c 	.word	0x0801bc9c
 800bb70:	0801bc9c 	.word	0x0801bc9c
 800bb74:	0801bca4 	.word	0x0801bca4
 800bb78:	0801bc9c 	.word	0x0801bc9c

0800bb7c <malloc>:
 800bb7c:	4b02      	ldr	r3, [pc, #8]	; (800bb88 <malloc+0xc>)
 800bb7e:	4601      	mov	r1, r0
 800bb80:	6818      	ldr	r0, [r3, #0]
 800bb82:	f000 b803 	b.w	800bb8c <_malloc_r>
 800bb86:	bf00      	nop
 800bb88:	20000014 	.word	0x20000014

0800bb8c <_malloc_r>:
 800bb8c:	f101 030b 	add.w	r3, r1, #11
 800bb90:	2b16      	cmp	r3, #22
 800bb92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb96:	4605      	mov	r5, r0
 800bb98:	b083      	sub	sp, #12
 800bb9a:	d824      	bhi.n	800bbe6 <_malloc_r+0x5a>
 800bb9c:	2910      	cmp	r1, #16
 800bb9e:	f200 80f5 	bhi.w	800bd8c <_malloc_r+0x200>
 800bba2:	f000 faff 	bl	800c1a4 <__malloc_lock>
 800bba6:	2410      	movs	r4, #16
 800bba8:	2218      	movs	r2, #24
 800bbaa:	2002      	movs	r0, #2
 800bbac:	4ec0      	ldr	r6, [pc, #768]	; (800beb0 <_malloc_r+0x324>)
 800bbae:	4432      	add	r2, r6
 800bbb0:	6853      	ldr	r3, [r2, #4]
 800bbb2:	f1a2 0108 	sub.w	r1, r2, #8
 800bbb6:	428b      	cmp	r3, r1
 800bbb8:	f000 80ef 	beq.w	800bd9a <_malloc_r+0x20e>
 800bbbc:	685a      	ldr	r2, [r3, #4]
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f022 0203 	bic.w	r2, r2, #3
 800bbc4:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 800bbc8:	441a      	add	r2, r3
 800bbca:	60e1      	str	r1, [r4, #12]
 800bbcc:	608c      	str	r4, [r1, #8]
 800bbce:	f103 0408 	add.w	r4, r3, #8
 800bbd2:	6853      	ldr	r3, [r2, #4]
 800bbd4:	f043 0301 	orr.w	r3, r3, #1
 800bbd8:	6053      	str	r3, [r2, #4]
 800bbda:	f000 fae9 	bl	800c1b0 <__malloc_unlock>
 800bbde:	4620      	mov	r0, r4
 800bbe0:	b003      	add	sp, #12
 800bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	f023 0407 	bic.w	r4, r3, #7
 800bbec:	f2c0 80ce 	blt.w	800bd8c <_malloc_r+0x200>
 800bbf0:	42a1      	cmp	r1, r4
 800bbf2:	f200 80cb 	bhi.w	800bd8c <_malloc_r+0x200>
 800bbf6:	f000 fad5 	bl	800c1a4 <__malloc_lock>
 800bbfa:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800bbfe:	f0c0 81c2 	bcc.w	800bf86 <_malloc_r+0x3fa>
 800bc02:	0a63      	lsrs	r3, r4, #9
 800bc04:	f000 8133 	beq.w	800be6e <_malloc_r+0x2e2>
 800bc08:	2b04      	cmp	r3, #4
 800bc0a:	f200 8198 	bhi.w	800bf3e <_malloc_r+0x3b2>
 800bc0e:	09a3      	lsrs	r3, r4, #6
 800bc10:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800bc14:	f103 0738 	add.w	r7, r3, #56	; 0x38
 800bc18:	00c3      	lsls	r3, r0, #3
 800bc1a:	4ea5      	ldr	r6, [pc, #660]	; (800beb0 <_malloc_r+0x324>)
 800bc1c:	4433      	add	r3, r6
 800bc1e:	f1a3 0c08 	sub.w	ip, r3, #8
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	459c      	cmp	ip, r3
 800bc26:	d107      	bne.n	800bc38 <_malloc_r+0xac>
 800bc28:	e0bc      	b.n	800bda4 <_malloc_r+0x218>
 800bc2a:	2900      	cmp	r1, #0
 800bc2c:	f280 8150 	bge.w	800bed0 <_malloc_r+0x344>
 800bc30:	68db      	ldr	r3, [r3, #12]
 800bc32:	459c      	cmp	ip, r3
 800bc34:	f000 80b6 	beq.w	800bda4 <_malloc_r+0x218>
 800bc38:	685a      	ldr	r2, [r3, #4]
 800bc3a:	f022 0203 	bic.w	r2, r2, #3
 800bc3e:	1b11      	subs	r1, r2, r4
 800bc40:	290f      	cmp	r1, #15
 800bc42:	ddf2      	ble.n	800bc2a <_malloc_r+0x9e>
 800bc44:	6933      	ldr	r3, [r6, #16]
 800bc46:	4638      	mov	r0, r7
 800bc48:	f8df e27c 	ldr.w	lr, [pc, #636]	; 800bec8 <_malloc_r+0x33c>
 800bc4c:	4573      	cmp	r3, lr
 800bc4e:	f040 80af 	bne.w	800bdb0 <_malloc_r+0x224>
 800bc52:	1083      	asrs	r3, r0, #2
 800bc54:	2101      	movs	r1, #1
 800bc56:	6872      	ldr	r2, [r6, #4]
 800bc58:	4099      	lsls	r1, r3
 800bc5a:	4291      	cmp	r1, r2
 800bc5c:	f240 80d1 	bls.w	800be02 <_malloc_r+0x276>
 800bc60:	68b7      	ldr	r7, [r6, #8]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f023 0903 	bic.w	r9, r3, #3
 800bc68:	eba9 0304 	sub.w	r3, r9, r4
 800bc6c:	2b0f      	cmp	r3, #15
 800bc6e:	dd02      	ble.n	800bc76 <_malloc_r+0xea>
 800bc70:	454c      	cmp	r4, r9
 800bc72:	f240 810c 	bls.w	800be8e <_malloc_r+0x302>
 800bc76:	4b8f      	ldr	r3, [pc, #572]	; (800beb4 <_malloc_r+0x328>)
 800bc78:	eb07 0b09 	add.w	fp, r7, r9
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	eb04 0803 	add.w	r8, r4, r3
 800bc82:	4b8d      	ldr	r3, [pc, #564]	; (800beb8 <_malloc_r+0x32c>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	3201      	adds	r2, #1
 800bc88:	f000 81cb 	beq.w	800c022 <_malloc_r+0x496>
 800bc8c:	f241 020f 	movw	r2, #4111	; 0x100f
 800bc90:	4442      	add	r2, r8
 800bc92:	f8df 8238 	ldr.w	r8, [pc, #568]	; 800becc <_malloc_r+0x340>
 800bc96:	ea02 0808 	and.w	r8, r2, r8
 800bc9a:	4641      	mov	r1, r8
 800bc9c:	4628      	mov	r0, r5
 800bc9e:	f000 fa8d 	bl	800c1bc <_sbrk_r>
 800bca2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bca6:	4682      	mov	sl, r0
 800bca8:	4b83      	ldr	r3, [pc, #524]	; (800beb8 <_malloc_r+0x32c>)
 800bcaa:	f000 81a9 	beq.w	800c000 <_malloc_r+0x474>
 800bcae:	42b7      	cmp	r7, r6
 800bcb0:	d002      	beq.n	800bcb8 <_malloc_r+0x12c>
 800bcb2:	4583      	cmp	fp, r0
 800bcb4:	f200 81a4 	bhi.w	800c000 <_malloc_r+0x474>
 800bcb8:	4a80      	ldr	r2, [pc, #512]	; (800bebc <_malloc_r+0x330>)
 800bcba:	45d3      	cmp	fp, sl
 800bcbc:	6811      	ldr	r1, [r2, #0]
 800bcbe:	4441      	add	r1, r8
 800bcc0:	6011      	str	r1, [r2, #0]
 800bcc2:	f000 81a0 	beq.w	800c006 <_malloc_r+0x47a>
 800bcc6:	6818      	ldr	r0, [r3, #0]
 800bcc8:	3001      	adds	r0, #1
 800bcca:	f000 81a7 	beq.w	800c01c <_malloc_r+0x490>
 800bcce:	ebaa 0b0b 	sub.w	fp, sl, fp
 800bcd2:	4459      	add	r1, fp
 800bcd4:	6011      	str	r1, [r2, #0]
 800bcd6:	f01a 0307 	ands.w	r3, sl, #7
 800bcda:	f000 81ac 	beq.w	800c036 <_malloc_r+0x4aa>
 800bcde:	f1c3 0108 	rsb	r1, r3, #8
 800bce2:	4628      	mov	r0, r5
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	448a      	add	sl, r1
 800bce8:	f241 0108 	movw	r1, #4104	; 0x1008
 800bcec:	44d0      	add	r8, sl
 800bcee:	1ac9      	subs	r1, r1, r3
 800bcf0:	eba1 0108 	sub.w	r1, r1, r8
 800bcf4:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
 800bcf8:	4659      	mov	r1, fp
 800bcfa:	f000 fa5f 	bl	800c1bc <_sbrk_r>
 800bcfe:	1c42      	adds	r2, r0, #1
 800bd00:	9b01      	ldr	r3, [sp, #4]
 800bd02:	4a6e      	ldr	r2, [pc, #440]	; (800bebc <_malloc_r+0x330>)
 800bd04:	f000 81de 	beq.w	800c0c4 <_malloc_r+0x538>
 800bd08:	eba0 000a 	sub.w	r0, r0, sl
 800bd0c:	eb00 080b 	add.w	r8, r0, fp
 800bd10:	6810      	ldr	r0, [r2, #0]
 800bd12:	f048 0301 	orr.w	r3, r8, #1
 800bd16:	42b7      	cmp	r7, r6
 800bd18:	f8c6 a008 	str.w	sl, [r6, #8]
 800bd1c:	eb0b 0100 	add.w	r1, fp, r0
 800bd20:	f8ca 3004 	str.w	r3, [sl, #4]
 800bd24:	6011      	str	r1, [r2, #0]
 800bd26:	f000 81a9 	beq.w	800c07c <_malloc_r+0x4f0>
 800bd2a:	f1b9 0f0f 	cmp.w	r9, #15
 800bd2e:	f240 81a7 	bls.w	800c080 <_malloc_r+0x4f4>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f1a9 000c 	sub.w	r0, r9, #12
 800bd38:	f04f 0c05 	mov.w	ip, #5
 800bd3c:	f020 0007 	bic.w	r0, r0, #7
 800bd40:	f003 0301 	and.w	r3, r3, #1
 800bd44:	4303      	orrs	r3, r0
 800bd46:	280f      	cmp	r0, #15
 800bd48:	607b      	str	r3, [r7, #4]
 800bd4a:	eb07 0300 	add.w	r3, r7, r0
 800bd4e:	e9c3 cc01 	strd	ip, ip, [r3, #4]
 800bd52:	f200 81ad 	bhi.w	800c0b0 <_malloc_r+0x524>
 800bd56:	f8da 3004 	ldr.w	r3, [sl, #4]
 800bd5a:	4657      	mov	r7, sl
 800bd5c:	4a58      	ldr	r2, [pc, #352]	; (800bec0 <_malloc_r+0x334>)
 800bd5e:	6810      	ldr	r0, [r2, #0]
 800bd60:	4288      	cmp	r0, r1
 800bd62:	bf38      	it	cc
 800bd64:	6011      	strcc	r1, [r2, #0]
 800bd66:	4a57      	ldr	r2, [pc, #348]	; (800bec4 <_malloc_r+0x338>)
 800bd68:	6810      	ldr	r0, [r2, #0]
 800bd6a:	4288      	cmp	r0, r1
 800bd6c:	bf38      	it	cc
 800bd6e:	6011      	strcc	r1, [r2, #0]
 800bd70:	f023 0803 	bic.w	r8, r3, #3
 800bd74:	4544      	cmp	r4, r8
 800bd76:	eba8 0304 	sub.w	r3, r8, r4
 800bd7a:	d802      	bhi.n	800bd82 <_malloc_r+0x1f6>
 800bd7c:	2b0f      	cmp	r3, #15
 800bd7e:	f300 8086 	bgt.w	800be8e <_malloc_r+0x302>
 800bd82:	4628      	mov	r0, r5
 800bd84:	2400      	movs	r4, #0
 800bd86:	f000 fa13 	bl	800c1b0 <__malloc_unlock>
 800bd8a:	e728      	b.n	800bbde <_malloc_r+0x52>
 800bd8c:	2400      	movs	r4, #0
 800bd8e:	230c      	movs	r3, #12
 800bd90:	4620      	mov	r0, r4
 800bd92:	602b      	str	r3, [r5, #0]
 800bd94:	b003      	add	sp, #12
 800bd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd9a:	68d3      	ldr	r3, [r2, #12]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	f47f af0d 	bne.w	800bbbc <_malloc_r+0x30>
 800bda2:	3002      	adds	r0, #2
 800bda4:	6933      	ldr	r3, [r6, #16]
 800bda6:	f8df e120 	ldr.w	lr, [pc, #288]	; 800bec8 <_malloc_r+0x33c>
 800bdaa:	4573      	cmp	r3, lr
 800bdac:	f43f af51 	beq.w	800bc52 <_malloc_r+0xc6>
 800bdb0:	6859      	ldr	r1, [r3, #4]
 800bdb2:	f021 0103 	bic.w	r1, r1, #3
 800bdb6:	1b0a      	subs	r2, r1, r4
 800bdb8:	2a0f      	cmp	r2, #15
 800bdba:	f300 80e8 	bgt.w	800bf8e <_malloc_r+0x402>
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	e9c6 ee04 	strd	lr, lr, [r6, #16]
 800bdc4:	da58      	bge.n	800be78 <_malloc_r+0x2ec>
 800bdc6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bdca:	f080 8093 	bcs.w	800bef4 <_malloc_r+0x368>
 800bdce:	ea4f 0cd1 	mov.w	ip, r1, lsr #3
 800bdd2:	2201      	movs	r2, #1
 800bdd4:	0949      	lsrs	r1, r1, #5
 800bdd6:	f10c 0c01 	add.w	ip, ip, #1
 800bdda:	408a      	lsls	r2, r1
 800bddc:	6871      	ldr	r1, [r6, #4]
 800bdde:	f856 703c 	ldr.w	r7, [r6, ip, lsl #3]
 800bde2:	430a      	orrs	r2, r1
 800bde4:	eb06 01cc 	add.w	r1, r6, ip, lsl #3
 800bde8:	3908      	subs	r1, #8
 800bdea:	6072      	str	r2, [r6, #4]
 800bdec:	e9c3 7102 	strd	r7, r1, [r3, #8]
 800bdf0:	f846 303c 	str.w	r3, [r6, ip, lsl #3]
 800bdf4:	60fb      	str	r3, [r7, #12]
 800bdf6:	1083      	asrs	r3, r0, #2
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	4099      	lsls	r1, r3
 800bdfc:	4291      	cmp	r1, r2
 800bdfe:	f63f af2f 	bhi.w	800bc60 <_malloc_r+0xd4>
 800be02:	4211      	tst	r1, r2
 800be04:	d105      	bne.n	800be12 <_malloc_r+0x286>
 800be06:	f020 0003 	bic.w	r0, r0, #3
 800be0a:	0049      	lsls	r1, r1, #1
 800be0c:	3004      	adds	r0, #4
 800be0e:	4211      	tst	r1, r2
 800be10:	d0fb      	beq.n	800be0a <_malloc_r+0x27e>
 800be12:	eb06 09c0 	add.w	r9, r6, r0, lsl #3
 800be16:	4680      	mov	r8, r0
 800be18:	46cc      	mov	ip, r9
 800be1a:	f8dc 700c 	ldr.w	r7, [ip, #12]
 800be1e:	45bc      	cmp	ip, r7
 800be20:	d107      	bne.n	800be32 <_malloc_r+0x2a6>
 800be22:	e098      	b.n	800bf56 <_malloc_r+0x3ca>
 800be24:	2b00      	cmp	r3, #0
 800be26:	f280 809f 	bge.w	800bf68 <_malloc_r+0x3dc>
 800be2a:	68ff      	ldr	r7, [r7, #12]
 800be2c:	45bc      	cmp	ip, r7
 800be2e:	f000 8092 	beq.w	800bf56 <_malloc_r+0x3ca>
 800be32:	687a      	ldr	r2, [r7, #4]
 800be34:	f022 0203 	bic.w	r2, r2, #3
 800be38:	1b13      	subs	r3, r2, r4
 800be3a:	2b0f      	cmp	r3, #15
 800be3c:	ddf2      	ble.n	800be24 <_malloc_r+0x298>
 800be3e:	1939      	adds	r1, r7, r4
 800be40:	f044 0401 	orr.w	r4, r4, #1
 800be44:	4628      	mov	r0, r5
 800be46:	607c      	str	r4, [r7, #4]
 800be48:	f043 0401 	orr.w	r4, r3, #1
 800be4c:	e9d7 c502 	ldrd	ip, r5, [r7, #8]
 800be50:	f8cc 500c 	str.w	r5, [ip, #12]
 800be54:	f8c5 c008 	str.w	ip, [r5, #8]
 800be58:	e9c6 1104 	strd	r1, r1, [r6, #16]
 800be5c:	604c      	str	r4, [r1, #4]
 800be5e:	f107 0408 	add.w	r4, r7, #8
 800be62:	e9c1 ee02 	strd	lr, lr, [r1, #8]
 800be66:	50bb      	str	r3, [r7, r2]
 800be68:	f000 f9a2 	bl	800c1b0 <__malloc_unlock>
 800be6c:	e6b7      	b.n	800bbde <_malloc_r+0x52>
 800be6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be72:	2040      	movs	r0, #64	; 0x40
 800be74:	273f      	movs	r7, #63	; 0x3f
 800be76:	e6d0      	b.n	800bc1a <_malloc_r+0x8e>
 800be78:	4419      	add	r1, r3
 800be7a:	f103 0408 	add.w	r4, r3, #8
 800be7e:	4628      	mov	r0, r5
 800be80:	684b      	ldr	r3, [r1, #4]
 800be82:	f043 0301 	orr.w	r3, r3, #1
 800be86:	604b      	str	r3, [r1, #4]
 800be88:	f000 f992 	bl	800c1b0 <__malloc_unlock>
 800be8c:	e6a7      	b.n	800bbde <_malloc_r+0x52>
 800be8e:	193a      	adds	r2, r7, r4
 800be90:	f044 0401 	orr.w	r4, r4, #1
 800be94:	f043 0301 	orr.w	r3, r3, #1
 800be98:	4628      	mov	r0, r5
 800be9a:	607c      	str	r4, [r7, #4]
 800be9c:	f107 0408 	add.w	r4, r7, #8
 800bea0:	60b2      	str	r2, [r6, #8]
 800bea2:	6053      	str	r3, [r2, #4]
 800bea4:	f000 f984 	bl	800c1b0 <__malloc_unlock>
 800bea8:	4620      	mov	r0, r4
 800beaa:	b003      	add	sp, #12
 800beac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb0:	20000440 	.word	0x20000440
 800beb4:	2000248c 	.word	0x2000248c
 800beb8:	20000848 	.word	0x20000848
 800bebc:	2000245c 	.word	0x2000245c
 800bec0:	20002484 	.word	0x20002484
 800bec4:	20002488 	.word	0x20002488
 800bec8:	20000448 	.word	0x20000448
 800becc:	fffff000 	.word	0xfffff000
 800bed0:	441a      	add	r2, r3
 800bed2:	f103 0408 	add.w	r4, r3, #8
 800bed6:	4628      	mov	r0, r5
 800bed8:	e9d3 6102 	ldrd	r6, r1, [r3, #8]
 800bedc:	6853      	ldr	r3, [r2, #4]
 800bede:	60f1      	str	r1, [r6, #12]
 800bee0:	f043 0301 	orr.w	r3, r3, #1
 800bee4:	608e      	str	r6, [r1, #8]
 800bee6:	6053      	str	r3, [r2, #4]
 800bee8:	f000 f962 	bl	800c1b0 <__malloc_unlock>
 800beec:	4620      	mov	r0, r4
 800beee:	b003      	add	sp, #12
 800bef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bef4:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800bef8:	ea4f 2251 	mov.w	r2, r1, lsr #9
 800befc:	d359      	bcc.n	800bfb2 <_malloc_r+0x426>
 800befe:	2a14      	cmp	r2, #20
 800bf00:	f200 80aa 	bhi.w	800c058 <_malloc_r+0x4cc>
 800bf04:	f102 075c 	add.w	r7, r2, #92	; 0x5c
 800bf08:	325b      	adds	r2, #91	; 0x5b
 800bf0a:	00ff      	lsls	r7, r7, #3
 800bf0c:	eb06 0c07 	add.w	ip, r6, r7
 800bf10:	59f7      	ldr	r7, [r6, r7]
 800bf12:	f1ac 0c08 	sub.w	ip, ip, #8
 800bf16:	45bc      	cmp	ip, r7
 800bf18:	f000 8086 	beq.w	800c028 <_malloc_r+0x49c>
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	f022 0203 	bic.w	r2, r2, #3
 800bf22:	428a      	cmp	r2, r1
 800bf24:	d902      	bls.n	800bf2c <_malloc_r+0x3a0>
 800bf26:	68bf      	ldr	r7, [r7, #8]
 800bf28:	45bc      	cmp	ip, r7
 800bf2a:	d1f7      	bne.n	800bf1c <_malloc_r+0x390>
 800bf2c:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800bf30:	6872      	ldr	r2, [r6, #4]
 800bf32:	e9c3 7c02 	strd	r7, ip, [r3, #8]
 800bf36:	f8cc 3008 	str.w	r3, [ip, #8]
 800bf3a:	60fb      	str	r3, [r7, #12]
 800bf3c:	e75b      	b.n	800bdf6 <_malloc_r+0x26a>
 800bf3e:	2b14      	cmp	r3, #20
 800bf40:	d93d      	bls.n	800bfbe <_malloc_r+0x432>
 800bf42:	2b54      	cmp	r3, #84	; 0x54
 800bf44:	f200 8090 	bhi.w	800c068 <_malloc_r+0x4dc>
 800bf48:	0b23      	lsrs	r3, r4, #12
 800bf4a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800bf4e:	f103 076e 	add.w	r7, r3, #110	; 0x6e
 800bf52:	00c3      	lsls	r3, r0, #3
 800bf54:	e661      	b.n	800bc1a <_malloc_r+0x8e>
 800bf56:	f108 0801 	add.w	r8, r8, #1
 800bf5a:	f10c 0c08 	add.w	ip, ip, #8
 800bf5e:	f018 0f03 	tst.w	r8, #3
 800bf62:	f47f af5a 	bne.w	800be1a <_malloc_r+0x28e>
 800bf66:	e035      	b.n	800bfd4 <_malloc_r+0x448>
 800bf68:	443a      	add	r2, r7
 800bf6a:	463c      	mov	r4, r7
 800bf6c:	68f9      	ldr	r1, [r7, #12]
 800bf6e:	4628      	mov	r0, r5
 800bf70:	6853      	ldr	r3, [r2, #4]
 800bf72:	f043 0301 	orr.w	r3, r3, #1
 800bf76:	6053      	str	r3, [r2, #4]
 800bf78:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800bf7c:	60d9      	str	r1, [r3, #12]
 800bf7e:	608b      	str	r3, [r1, #8]
 800bf80:	f000 f916 	bl	800c1b0 <__malloc_unlock>
 800bf84:	e62b      	b.n	800bbde <_malloc_r+0x52>
 800bf86:	08e0      	lsrs	r0, r4, #3
 800bf88:	f104 0208 	add.w	r2, r4, #8
 800bf8c:	e60e      	b.n	800bbac <_malloc_r+0x20>
 800bf8e:	4628      	mov	r0, r5
 800bf90:	191d      	adds	r5, r3, r4
 800bf92:	f044 0401 	orr.w	r4, r4, #1
 800bf96:	605c      	str	r4, [r3, #4]
 800bf98:	f042 0401 	orr.w	r4, r2, #1
 800bf9c:	e9c6 5504 	strd	r5, r5, [r6, #16]
 800bfa0:	606c      	str	r4, [r5, #4]
 800bfa2:	f103 0408 	add.w	r4, r3, #8
 800bfa6:	e9c5 ee02 	strd	lr, lr, [r5, #8]
 800bfaa:	505a      	str	r2, [r3, r1]
 800bfac:	f000 f900 	bl	800c1b0 <__malloc_unlock>
 800bfb0:	e615      	b.n	800bbde <_malloc_r+0x52>
 800bfb2:	098a      	lsrs	r2, r1, #6
 800bfb4:	f102 0739 	add.w	r7, r2, #57	; 0x39
 800bfb8:	3238      	adds	r2, #56	; 0x38
 800bfba:	00ff      	lsls	r7, r7, #3
 800bfbc:	e7a6      	b.n	800bf0c <_malloc_r+0x380>
 800bfbe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800bfc2:	f103 075b 	add.w	r7, r3, #91	; 0x5b
 800bfc6:	00c3      	lsls	r3, r0, #3
 800bfc8:	e627      	b.n	800bc1a <_malloc_r+0x8e>
 800bfca:	f859 3908 	ldr.w	r3, [r9], #-8
 800bfce:	454b      	cmp	r3, r9
 800bfd0:	f040 8092 	bne.w	800c0f8 <_malloc_r+0x56c>
 800bfd4:	f010 0f03 	tst.w	r0, #3
 800bfd8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800bfdc:	d1f5      	bne.n	800bfca <_malloc_r+0x43e>
 800bfde:	6873      	ldr	r3, [r6, #4]
 800bfe0:	ea23 0301 	bic.w	r3, r3, r1
 800bfe4:	6073      	str	r3, [r6, #4]
 800bfe6:	0049      	lsls	r1, r1, #1
 800bfe8:	f43f ae3a 	beq.w	800bc60 <_malloc_r+0xd4>
 800bfec:	4299      	cmp	r1, r3
 800bfee:	d903      	bls.n	800bff8 <_malloc_r+0x46c>
 800bff0:	e636      	b.n	800bc60 <_malloc_r+0xd4>
 800bff2:	0049      	lsls	r1, r1, #1
 800bff4:	f108 0804 	add.w	r8, r8, #4
 800bff8:	4219      	tst	r1, r3
 800bffa:	d0fa      	beq.n	800bff2 <_malloc_r+0x466>
 800bffc:	4640      	mov	r0, r8
 800bffe:	e708      	b.n	800be12 <_malloc_r+0x286>
 800c000:	68b7      	ldr	r7, [r6, #8]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	e6b4      	b.n	800bd70 <_malloc_r+0x1e4>
 800c006:	f3cb 000b 	ubfx	r0, fp, #0, #12
 800c00a:	2800      	cmp	r0, #0
 800c00c:	f47f ae5b 	bne.w	800bcc6 <_malloc_r+0x13a>
 800c010:	44c8      	add	r8, r9
 800c012:	68b7      	ldr	r7, [r6, #8]
 800c014:	f048 0301 	orr.w	r3, r8, #1
 800c018:	607b      	str	r3, [r7, #4]
 800c01a:	e69f      	b.n	800bd5c <_malloc_r+0x1d0>
 800c01c:	f8c3 a000 	str.w	sl, [r3]
 800c020:	e659      	b.n	800bcd6 <_malloc_r+0x14a>
 800c022:	f108 0810 	add.w	r8, r8, #16
 800c026:	e638      	b.n	800bc9a <_malloc_r+0x10e>
 800c028:	1092      	asrs	r2, r2, #2
 800c02a:	2101      	movs	r1, #1
 800c02c:	4091      	lsls	r1, r2
 800c02e:	6872      	ldr	r2, [r6, #4]
 800c030:	430a      	orrs	r2, r1
 800c032:	6072      	str	r2, [r6, #4]
 800c034:	e77d      	b.n	800bf32 <_malloc_r+0x3a6>
 800c036:	eb0a 0108 	add.w	r1, sl, r8
 800c03a:	4628      	mov	r0, r5
 800c03c:	9301      	str	r3, [sp, #4]
 800c03e:	4249      	negs	r1, r1
 800c040:	f3c1 0b0b 	ubfx	fp, r1, #0, #12
 800c044:	4659      	mov	r1, fp
 800c046:	f000 f8b9 	bl	800c1bc <_sbrk_r>
 800c04a:	1c43      	adds	r3, r0, #1
 800c04c:	4a2b      	ldr	r2, [pc, #172]	; (800c0fc <_malloc_r+0x570>)
 800c04e:	9b01      	ldr	r3, [sp, #4]
 800c050:	f47f ae5a 	bne.w	800bd08 <_malloc_r+0x17c>
 800c054:	469b      	mov	fp, r3
 800c056:	e65b      	b.n	800bd10 <_malloc_r+0x184>
 800c058:	2a54      	cmp	r2, #84	; 0x54
 800c05a:	d815      	bhi.n	800c088 <_malloc_r+0x4fc>
 800c05c:	0b0a      	lsrs	r2, r1, #12
 800c05e:	f102 076f 	add.w	r7, r2, #111	; 0x6f
 800c062:	326e      	adds	r2, #110	; 0x6e
 800c064:	00ff      	lsls	r7, r7, #3
 800c066:	e751      	b.n	800bf0c <_malloc_r+0x380>
 800c068:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c06c:	d815      	bhi.n	800c09a <_malloc_r+0x50e>
 800c06e:	0be3      	lsrs	r3, r4, #15
 800c070:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800c074:	f103 0777 	add.w	r7, r3, #119	; 0x77
 800c078:	00c3      	lsls	r3, r0, #3
 800c07a:	e5ce      	b.n	800bc1a <_malloc_r+0x8e>
 800c07c:	4657      	mov	r7, sl
 800c07e:	e66d      	b.n	800bd5c <_malloc_r+0x1d0>
 800c080:	2301      	movs	r3, #1
 800c082:	f8ca 3004 	str.w	r3, [sl, #4]
 800c086:	e67c      	b.n	800bd82 <_malloc_r+0x1f6>
 800c088:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c08c:	d821      	bhi.n	800c0d2 <_malloc_r+0x546>
 800c08e:	0bca      	lsrs	r2, r1, #15
 800c090:	f102 0778 	add.w	r7, r2, #120	; 0x78
 800c094:	3277      	adds	r2, #119	; 0x77
 800c096:	00ff      	lsls	r7, r7, #3
 800c098:	e738      	b.n	800bf0c <_malloc_r+0x380>
 800c09a:	f240 5254 	movw	r2, #1364	; 0x554
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d821      	bhi.n	800c0e6 <_malloc_r+0x55a>
 800c0a2:	0ca3      	lsrs	r3, r4, #18
 800c0a4:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800c0a8:	f103 077c 	add.w	r7, r3, #124	; 0x7c
 800c0ac:	00c3      	lsls	r3, r0, #3
 800c0ae:	e5b4      	b.n	800bc1a <_malloc_r+0x8e>
 800c0b0:	f107 0108 	add.w	r1, r7, #8
 800c0b4:	4628      	mov	r0, r5
 800c0b6:	f000 f937 	bl	800c328 <_free_r>
 800c0ba:	68b7      	ldr	r7, [r6, #8]
 800c0bc:	4a0f      	ldr	r2, [pc, #60]	; (800c0fc <_malloc_r+0x570>)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	6811      	ldr	r1, [r2, #0]
 800c0c2:	e64b      	b.n	800bd5c <_malloc_r+0x1d0>
 800c0c4:	3b08      	subs	r3, #8
 800c0c6:	f04f 0b00 	mov.w	fp, #0
 800c0ca:	4498      	add	r8, r3
 800c0cc:	eba8 080a 	sub.w	r8, r8, sl
 800c0d0:	e61e      	b.n	800bd10 <_malloc_r+0x184>
 800c0d2:	f240 5754 	movw	r7, #1364	; 0x554
 800c0d6:	42ba      	cmp	r2, r7
 800c0d8:	d80a      	bhi.n	800c0f0 <_malloc_r+0x564>
 800c0da:	0c8a      	lsrs	r2, r1, #18
 800c0dc:	f102 077d 	add.w	r7, r2, #125	; 0x7d
 800c0e0:	327c      	adds	r2, #124	; 0x7c
 800c0e2:	00ff      	lsls	r7, r7, #3
 800c0e4:	e712      	b.n	800bf0c <_malloc_r+0x380>
 800c0e6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800c0ea:	207f      	movs	r0, #127	; 0x7f
 800c0ec:	277e      	movs	r7, #126	; 0x7e
 800c0ee:	e594      	b.n	800bc1a <_malloc_r+0x8e>
 800c0f0:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
 800c0f4:	227e      	movs	r2, #126	; 0x7e
 800c0f6:	e709      	b.n	800bf0c <_malloc_r+0x380>
 800c0f8:	6873      	ldr	r3, [r6, #4]
 800c0fa:	e774      	b.n	800bfe6 <_malloc_r+0x45a>
 800c0fc:	2000245c 	.word	0x2000245c

0800c100 <memset>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	0786      	lsls	r6, r0, #30
 800c104:	d048      	beq.n	800c198 <memset+0x98>
 800c106:	1e54      	subs	r4, r2, #1
 800c108:	2a00      	cmp	r2, #0
 800c10a:	d03f      	beq.n	800c18c <memset+0x8c>
 800c10c:	b2ca      	uxtb	r2, r1
 800c10e:	4603      	mov	r3, r0
 800c110:	e001      	b.n	800c116 <memset+0x16>
 800c112:	3c01      	subs	r4, #1
 800c114:	d33a      	bcc.n	800c18c <memset+0x8c>
 800c116:	f803 2b01 	strb.w	r2, [r3], #1
 800c11a:	079d      	lsls	r5, r3, #30
 800c11c:	d1f9      	bne.n	800c112 <memset+0x12>
 800c11e:	2c03      	cmp	r4, #3
 800c120:	d92d      	bls.n	800c17e <memset+0x7e>
 800c122:	b2cd      	uxtb	r5, r1
 800c124:	2c0f      	cmp	r4, #15
 800c126:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800c12a:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800c12e:	d936      	bls.n	800c19e <memset+0x9e>
 800c130:	f1a4 0c10 	sub.w	ip, r4, #16
 800c134:	f103 0e20 	add.w	lr, r3, #32
 800c138:	f103 0210 	add.w	r2, r3, #16
 800c13c:	f02c 060f 	bic.w	r6, ip, #15
 800c140:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 800c144:	44b6      	add	lr, r6
 800c146:	e942 5504 	strd	r5, r5, [r2, #-16]
 800c14a:	e942 5502 	strd	r5, r5, [r2, #-8]
 800c14e:	3210      	adds	r2, #16
 800c150:	4572      	cmp	r2, lr
 800c152:	d1f8      	bne.n	800c146 <memset+0x46>
 800c154:	f10c 0201 	add.w	r2, ip, #1
 800c158:	f014 0f0c 	tst.w	r4, #12
 800c15c:	f004 0c0f 	and.w	ip, r4, #15
 800c160:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800c164:	d013      	beq.n	800c18e <memset+0x8e>
 800c166:	f1ac 0304 	sub.w	r3, ip, #4
 800c16a:	f023 0303 	bic.w	r3, r3, #3
 800c16e:	3304      	adds	r3, #4
 800c170:	4413      	add	r3, r2
 800c172:	f842 5b04 	str.w	r5, [r2], #4
 800c176:	4293      	cmp	r3, r2
 800c178:	d1fb      	bne.n	800c172 <memset+0x72>
 800c17a:	f00c 0403 	and.w	r4, ip, #3
 800c17e:	b12c      	cbz	r4, 800c18c <memset+0x8c>
 800c180:	b2ca      	uxtb	r2, r1
 800c182:	441c      	add	r4, r3
 800c184:	f803 2b01 	strb.w	r2, [r3], #1
 800c188:	429c      	cmp	r4, r3
 800c18a:	d1fb      	bne.n	800c184 <memset+0x84>
 800c18c:	bd70      	pop	{r4, r5, r6, pc}
 800c18e:	4664      	mov	r4, ip
 800c190:	4613      	mov	r3, r2
 800c192:	2c00      	cmp	r4, #0
 800c194:	d1f4      	bne.n	800c180 <memset+0x80>
 800c196:	e7f9      	b.n	800c18c <memset+0x8c>
 800c198:	4603      	mov	r3, r0
 800c19a:	4614      	mov	r4, r2
 800c19c:	e7bf      	b.n	800c11e <memset+0x1e>
 800c19e:	461a      	mov	r2, r3
 800c1a0:	46a4      	mov	ip, r4
 800c1a2:	e7e0      	b.n	800c166 <memset+0x66>

0800c1a4 <__malloc_lock>:
 800c1a4:	4801      	ldr	r0, [pc, #4]	; (800c1ac <__malloc_lock+0x8>)
 800c1a6:	f000 b9c5 	b.w	800c534 <__retarget_lock_acquire_recursive>
 800c1aa:	bf00      	nop
 800c1ac:	20002494 	.word	0x20002494

0800c1b0 <__malloc_unlock>:
 800c1b0:	4801      	ldr	r0, [pc, #4]	; (800c1b8 <__malloc_unlock+0x8>)
 800c1b2:	f000 b9c1 	b.w	800c538 <__retarget_lock_release_recursive>
 800c1b6:	bf00      	nop
 800c1b8:	20002494 	.word	0x20002494

0800c1bc <_sbrk_r>:
 800c1bc:	b538      	push	{r3, r4, r5, lr}
 800c1be:	2200      	movs	r2, #0
 800c1c0:	4d06      	ldr	r5, [pc, #24]	; (800c1dc <_sbrk_r+0x20>)
 800c1c2:	4604      	mov	r4, r0
 800c1c4:	4608      	mov	r0, r1
 800c1c6:	602a      	str	r2, [r5, #0]
 800c1c8:	f000 fa00 	bl	800c5cc <_sbrk>
 800c1cc:	1c43      	adds	r3, r0, #1
 800c1ce:	d000      	beq.n	800c1d2 <_sbrk_r+0x16>
 800c1d0:	bd38      	pop	{r3, r4, r5, pc}
 800c1d2:	682b      	ldr	r3, [r5, #0]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d0fb      	beq.n	800c1d0 <_sbrk_r+0x14>
 800c1d8:	6023      	str	r3, [r4, #0]
 800c1da:	bd38      	pop	{r3, r4, r5, pc}
 800c1dc:	20002498 	.word	0x20002498

0800c1e0 <strlen>:
 800c1e0:	f020 0103 	bic.w	r1, r0, #3
 800c1e4:	f010 0003 	ands.w	r0, r0, #3
 800c1e8:	f1c0 0000 	rsb	r0, r0, #0
 800c1ec:	f851 3b04 	ldr.w	r3, [r1], #4
 800c1f0:	f100 0c04 	add.w	ip, r0, #4
 800c1f4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800c1f8:	f06f 0200 	mvn.w	r2, #0
 800c1fc:	bf1c      	itt	ne
 800c1fe:	fa22 f20c 	lsrne.w	r2, r2, ip
 800c202:	4313      	orrne	r3, r2
 800c204:	f04f 0c01 	mov.w	ip, #1
 800c208:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800c20c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 800c210:	eba3 020c 	sub.w	r2, r3, ip
 800c214:	ea22 0203 	bic.w	r2, r2, r3
 800c218:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800c21c:	bf04      	itt	eq
 800c21e:	f851 3b04 	ldreq.w	r3, [r1], #4
 800c222:	3004      	addeq	r0, #4
 800c224:	d0f4      	beq.n	800c210 <strlen+0x30>
 800c226:	f1c2 0100 	rsb	r1, r2, #0
 800c22a:	ea02 0201 	and.w	r2, r2, r1
 800c22e:	fab2 f282 	clz	r2, r2
 800c232:	f1c2 021f 	rsb	r2, r2, #31
 800c236:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800c23a:	4770      	bx	lr

0800c23c <register_fini>:
 800c23c:	4b02      	ldr	r3, [pc, #8]	; (800c248 <register_fini+0xc>)
 800c23e:	b113      	cbz	r3, 800c246 <register_fini+0xa>
 800c240:	4802      	ldr	r0, [pc, #8]	; (800c24c <register_fini+0x10>)
 800c242:	f000 b805 	b.w	800c250 <atexit>
 800c246:	4770      	bx	lr
 800c248:	00000000 	.word	0x00000000
 800c24c:	0800c25d 	.word	0x0800c25d

0800c250 <atexit>:
 800c250:	2300      	movs	r3, #0
 800c252:	4601      	mov	r1, r0
 800c254:	461a      	mov	r2, r3
 800c256:	4618      	mov	r0, r3
 800c258:	f000 b970 	b.w	800c53c <__register_exitproc>

0800c25c <__libc_fini_array>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4b08      	ldr	r3, [pc, #32]	; (800c280 <__libc_fini_array+0x24>)
 800c260:	4d08      	ldr	r5, [pc, #32]	; (800c284 <__libc_fini_array+0x28>)
 800c262:	1b5b      	subs	r3, r3, r5
 800c264:	109c      	asrs	r4, r3, #2
 800c266:	d007      	beq.n	800c278 <__libc_fini_array+0x1c>
 800c268:	3b04      	subs	r3, #4
 800c26a:	441d      	add	r5, r3
 800c26c:	3c01      	subs	r4, #1
 800c26e:	f855 3904 	ldr.w	r3, [r5], #-4
 800c272:	4798      	blx	r3
 800c274:	2c00      	cmp	r4, #0
 800c276:	d1f9      	bne.n	800c26c <__libc_fini_array+0x10>
 800c278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c27c:	f000 b9bc 	b.w	800c5f8 <_fini>
 800c280:	0801bca8 	.word	0x0801bca8
 800c284:	0801bca4 	.word	0x0801bca4

0800c288 <_malloc_trim_r>:
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	4f23      	ldr	r7, [pc, #140]	; (800c318 <_malloc_trim_r+0x90>)
 800c28c:	460c      	mov	r4, r1
 800c28e:	4606      	mov	r6, r0
 800c290:	f7ff ff88 	bl	800c1a4 <__malloc_lock>
 800c294:	68ba      	ldr	r2, [r7, #8]
 800c296:	f640 73ef 	movw	r3, #4079	; 0xfef
 800c29a:	6855      	ldr	r5, [r2, #4]
 800c29c:	1b1b      	subs	r3, r3, r4
 800c29e:	4c1f      	ldr	r4, [pc, #124]	; (800c31c <_malloc_trim_r+0x94>)
 800c2a0:	f025 0503 	bic.w	r5, r5, #3
 800c2a4:	442b      	add	r3, r5
 800c2a6:	401c      	ands	r4, r3
 800c2a8:	f5a4 5480 	sub.w	r4, r4, #4096	; 0x1000
 800c2ac:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800c2b0:	db07      	blt.n	800c2c2 <_malloc_trim_r+0x3a>
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f7ff ff81 	bl	800c1bc <_sbrk_r>
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	442b      	add	r3, r5
 800c2be:	4298      	cmp	r0, r3
 800c2c0:	d004      	beq.n	800c2cc <_malloc_trim_r+0x44>
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f7ff ff74 	bl	800c1b0 <__malloc_unlock>
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2cc:	4261      	negs	r1, r4
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f7ff ff74 	bl	800c1bc <_sbrk_r>
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	d00d      	beq.n	800c2f4 <_malloc_trim_r+0x6c>
 800c2d8:	1b2d      	subs	r5, r5, r4
 800c2da:	4b11      	ldr	r3, [pc, #68]	; (800c320 <_malloc_trim_r+0x98>)
 800c2dc:	68ba      	ldr	r2, [r7, #8]
 800c2de:	4630      	mov	r0, r6
 800c2e0:	f045 0501 	orr.w	r5, r5, #1
 800c2e4:	6055      	str	r5, [r2, #4]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	1b12      	subs	r2, r2, r4
 800c2ea:	601a      	str	r2, [r3, #0]
 800c2ec:	f7ff ff60 	bl	800c1b0 <__malloc_unlock>
 800c2f0:	2001      	movs	r0, #1
 800c2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2f4:	2100      	movs	r1, #0
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f7ff ff60 	bl	800c1bc <_sbrk_r>
 800c2fc:	68ba      	ldr	r2, [r7, #8]
 800c2fe:	1a83      	subs	r3, r0, r2
 800c300:	2b0f      	cmp	r3, #15
 800c302:	ddde      	ble.n	800c2c2 <_malloc_trim_r+0x3a>
 800c304:	f043 0301 	orr.w	r3, r3, #1
 800c308:	4905      	ldr	r1, [pc, #20]	; (800c320 <_malloc_trim_r+0x98>)
 800c30a:	6053      	str	r3, [r2, #4]
 800c30c:	4b05      	ldr	r3, [pc, #20]	; (800c324 <_malloc_trim_r+0x9c>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	1ac0      	subs	r0, r0, r3
 800c312:	6008      	str	r0, [r1, #0]
 800c314:	e7d5      	b.n	800c2c2 <_malloc_trim_r+0x3a>
 800c316:	bf00      	nop
 800c318:	20000440 	.word	0x20000440
 800c31c:	fffff000 	.word	0xfffff000
 800c320:	2000245c 	.word	0x2000245c
 800c324:	20000848 	.word	0x20000848

0800c328 <_free_r>:
 800c328:	2900      	cmp	r1, #0
 800c32a:	d061      	beq.n	800c3f0 <_free_r+0xc8>
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	460c      	mov	r4, r1
 800c330:	4606      	mov	r6, r0
 800c332:	f7ff ff37 	bl	800c1a4 <__malloc_lock>
 800c336:	4f7c      	ldr	r7, [pc, #496]	; (800c528 <_free_r+0x200>)
 800c338:	f854 2c04 	ldr.w	r2, [r4, #-4]
 800c33c:	f1a4 0508 	sub.w	r5, r4, #8
 800c340:	68b8      	ldr	r0, [r7, #8]
 800c342:	f022 0101 	bic.w	r1, r2, #1
 800c346:	eb05 0c01 	add.w	ip, r5, r1
 800c34a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800c34e:	4560      	cmp	r0, ip
 800c350:	f023 0303 	bic.w	r3, r3, #3
 800c354:	f000 808b 	beq.w	800c46e <_free_r+0x146>
 800c358:	07d2      	lsls	r2, r2, #31
 800c35a:	f8cc 3004 	str.w	r3, [ip, #4]
 800c35e:	d432      	bmi.n	800c3c6 <_free_r+0x9e>
 800c360:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800c364:	f107 0008 	add.w	r0, r7, #8
 800c368:	1aad      	subs	r5, r5, r2
 800c36a:	4411      	add	r1, r2
 800c36c:	68aa      	ldr	r2, [r5, #8]
 800c36e:	4282      	cmp	r2, r0
 800c370:	d06a      	beq.n	800c448 <_free_r+0x120>
 800c372:	eb0c 0403 	add.w	r4, ip, r3
 800c376:	f8d4 e004 	ldr.w	lr, [r4, #4]
 800c37a:	68ec      	ldr	r4, [r5, #12]
 800c37c:	f01e 0f01 	tst.w	lr, #1
 800c380:	60d4      	str	r4, [r2, #12]
 800c382:	60a2      	str	r2, [r4, #8]
 800c384:	f000 8097 	beq.w	800c4b6 <_free_r+0x18e>
 800c388:	f041 0301 	orr.w	r3, r1, #1
 800c38c:	606b      	str	r3, [r5, #4]
 800c38e:	f8cc 1000 	str.w	r1, [ip]
 800c392:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c396:	d235      	bcs.n	800c404 <_free_r+0xdc>
 800c398:	094a      	lsrs	r2, r1, #5
 800c39a:	08cb      	lsrs	r3, r1, #3
 800c39c:	2101      	movs	r1, #1
 800c39e:	3301      	adds	r3, #1
 800c3a0:	4091      	lsls	r1, r2
 800c3a2:	687a      	ldr	r2, [r7, #4]
 800c3a4:	4311      	orrs	r1, r2
 800c3a6:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 800c3aa:	6079      	str	r1, [r7, #4]
 800c3ac:	3a08      	subs	r2, #8
 800c3ae:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
 800c3b2:	e9c5 1202 	strd	r1, r2, [r5, #8]
 800c3b6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
 800c3ba:	60cd      	str	r5, [r1, #12]
 800c3bc:	4630      	mov	r0, r6
 800c3be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c3c2:	f7ff bef5 	b.w	800c1b0 <__malloc_unlock>
 800c3c6:	eb0c 0203 	add.w	r2, ip, r3
 800c3ca:	6852      	ldr	r2, [r2, #4]
 800c3cc:	07d0      	lsls	r0, r2, #31
 800c3ce:	d410      	bmi.n	800c3f2 <_free_r+0xca>
 800c3d0:	4419      	add	r1, r3
 800c3d2:	f107 0008 	add.w	r0, r7, #8
 800c3d6:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800c3da:	4283      	cmp	r3, r0
 800c3dc:	d073      	beq.n	800c4c6 <_free_r+0x19e>
 800c3de:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800c3e2:	60da      	str	r2, [r3, #12]
 800c3e4:	6093      	str	r3, [r2, #8]
 800c3e6:	f041 0301 	orr.w	r3, r1, #1
 800c3ea:	606b      	str	r3, [r5, #4]
 800c3ec:	5069      	str	r1, [r5, r1]
 800c3ee:	e7d0      	b.n	800c392 <_free_r+0x6a>
 800c3f0:	4770      	bx	lr
 800c3f2:	f041 0301 	orr.w	r3, r1, #1
 800c3f6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c3fa:	f844 3c04 	str.w	r3, [r4, #-4]
 800c3fe:	f8cc 1000 	str.w	r1, [ip]
 800c402:	d3c9      	bcc.n	800c398 <_free_r+0x70>
 800c404:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
 800c408:	ea4f 2351 	mov.w	r3, r1, lsr #9
 800c40c:	d248      	bcs.n	800c4a0 <_free_r+0x178>
 800c40e:	098b      	lsrs	r3, r1, #6
 800c410:	f103 0039 	add.w	r0, r3, #57	; 0x39
 800c414:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c418:	00c3      	lsls	r3, r0, #3
 800c41a:	18f8      	adds	r0, r7, r3
 800c41c:	58fb      	ldr	r3, [r7, r3]
 800c41e:	3808      	subs	r0, #8
 800c420:	4298      	cmp	r0, r3
 800c422:	d059      	beq.n	800c4d8 <_free_r+0x1b0>
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	f022 0203 	bic.w	r2, r2, #3
 800c42a:	428a      	cmp	r2, r1
 800c42c:	d902      	bls.n	800c434 <_free_r+0x10c>
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	4298      	cmp	r0, r3
 800c432:	d1f7      	bne.n	800c424 <_free_r+0xfc>
 800c434:	68d8      	ldr	r0, [r3, #12]
 800c436:	e9c5 3002 	strd	r3, r0, [r5, #8]
 800c43a:	6085      	str	r5, [r0, #8]
 800c43c:	4630      	mov	r0, r6
 800c43e:	60dd      	str	r5, [r3, #12]
 800c440:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c444:	f7ff beb4 	b.w	800c1b0 <__malloc_unlock>
 800c448:	eb0c 0203 	add.w	r2, ip, r3
 800c44c:	6852      	ldr	r2, [r2, #4]
 800c44e:	07d2      	lsls	r2, r2, #31
 800c450:	d463      	bmi.n	800c51a <_free_r+0x1f2>
 800c452:	440b      	add	r3, r1
 800c454:	4630      	mov	r0, r6
 800c456:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
 800c45a:	60ca      	str	r2, [r1, #12]
 800c45c:	6091      	str	r1, [r2, #8]
 800c45e:	f043 0201 	orr.w	r2, r3, #1
 800c462:	606a      	str	r2, [r5, #4]
 800c464:	50eb      	str	r3, [r5, r3]
 800c466:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c46a:	f7ff bea1 	b.w	800c1b0 <__malloc_unlock>
 800c46e:	440b      	add	r3, r1
 800c470:	07d1      	lsls	r1, r2, #31
 800c472:	d407      	bmi.n	800c484 <_free_r+0x15c>
 800c474:	f854 2c08 	ldr.w	r2, [r4, #-8]
 800c478:	1aad      	subs	r5, r5, r2
 800c47a:	4413      	add	r3, r2
 800c47c:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
 800c480:	60ca      	str	r2, [r1, #12]
 800c482:	6091      	str	r1, [r2, #8]
 800c484:	f043 0201 	orr.w	r2, r3, #1
 800c488:	606a      	str	r2, [r5, #4]
 800c48a:	4a28      	ldr	r2, [pc, #160]	; (800c52c <_free_r+0x204>)
 800c48c:	60bd      	str	r5, [r7, #8]
 800c48e:	6812      	ldr	r2, [r2, #0]
 800c490:	429a      	cmp	r2, r3
 800c492:	d893      	bhi.n	800c3bc <_free_r+0x94>
 800c494:	4b26      	ldr	r3, [pc, #152]	; (800c530 <_free_r+0x208>)
 800c496:	4630      	mov	r0, r6
 800c498:	6819      	ldr	r1, [r3, #0]
 800c49a:	f7ff fef5 	bl	800c288 <_malloc_trim_r>
 800c49e:	e78d      	b.n	800c3bc <_free_r+0x94>
 800c4a0:	2b14      	cmp	r3, #20
 800c4a2:	d90a      	bls.n	800c4ba <_free_r+0x192>
 800c4a4:	2b54      	cmp	r3, #84	; 0x54
 800c4a6:	d81f      	bhi.n	800c4e8 <_free_r+0x1c0>
 800c4a8:	0b0b      	lsrs	r3, r1, #12
 800c4aa:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 800c4ae:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 800c4b2:	00c3      	lsls	r3, r0, #3
 800c4b4:	e7b1      	b.n	800c41a <_free_r+0xf2>
 800c4b6:	4419      	add	r1, r3
 800c4b8:	e78d      	b.n	800c3d6 <_free_r+0xae>
 800c4ba:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800c4be:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 800c4c2:	00c3      	lsls	r3, r0, #3
 800c4c4:	e7a9      	b.n	800c41a <_free_r+0xf2>
 800c4c6:	f041 0301 	orr.w	r3, r1, #1
 800c4ca:	e9c7 5504 	strd	r5, r5, [r7, #16]
 800c4ce:	e9c5 0002 	strd	r0, r0, [r5, #8]
 800c4d2:	606b      	str	r3, [r5, #4]
 800c4d4:	5069      	str	r1, [r5, r1]
 800c4d6:	e771      	b.n	800c3bc <_free_r+0x94>
 800c4d8:	2101      	movs	r1, #1
 800c4da:	1092      	asrs	r2, r2, #2
 800c4dc:	fa01 f202 	lsl.w	r2, r1, r2
 800c4e0:	6879      	ldr	r1, [r7, #4]
 800c4e2:	430a      	orrs	r2, r1
 800c4e4:	607a      	str	r2, [r7, #4]
 800c4e6:	e7a6      	b.n	800c436 <_free_r+0x10e>
 800c4e8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800c4ec:	d806      	bhi.n	800c4fc <_free_r+0x1d4>
 800c4ee:	0bcb      	lsrs	r3, r1, #15
 800c4f0:	f103 0078 	add.w	r0, r3, #120	; 0x78
 800c4f4:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800c4f8:	00c3      	lsls	r3, r0, #3
 800c4fa:	e78e      	b.n	800c41a <_free_r+0xf2>
 800c4fc:	f240 5254 	movw	r2, #1364	; 0x554
 800c500:	4293      	cmp	r3, r2
 800c502:	d806      	bhi.n	800c512 <_free_r+0x1ea>
 800c504:	0c8b      	lsrs	r3, r1, #18
 800c506:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 800c50a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800c50e:	00c3      	lsls	r3, r0, #3
 800c510:	e783      	b.n	800c41a <_free_r+0xf2>
 800c512:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800c516:	227e      	movs	r2, #126	; 0x7e
 800c518:	e77f      	b.n	800c41a <_free_r+0xf2>
 800c51a:	f041 0301 	orr.w	r3, r1, #1
 800c51e:	606b      	str	r3, [r5, #4]
 800c520:	f8cc 1000 	str.w	r1, [ip]
 800c524:	e74a      	b.n	800c3bc <_free_r+0x94>
 800c526:	bf00      	nop
 800c528:	20000440 	.word	0x20000440
 800c52c:	2000084c 	.word	0x2000084c
 800c530:	2000248c 	.word	0x2000248c

0800c534 <__retarget_lock_acquire_recursive>:
 800c534:	4770      	bx	lr
 800c536:	bf00      	nop

0800c538 <__retarget_lock_release_recursive>:
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop

0800c53c <__register_exitproc>:
 800c53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c540:	f8df a084 	ldr.w	sl, [pc, #132]	; 800c5c8 <__register_exitproc+0x8c>
 800c544:	4606      	mov	r6, r0
 800c546:	4698      	mov	r8, r3
 800c548:	460f      	mov	r7, r1
 800c54a:	f8da 0000 	ldr.w	r0, [sl]
 800c54e:	4691      	mov	r9, r2
 800c550:	f7ff fff0 	bl	800c534 <__retarget_lock_acquire_recursive>
 800c554:	4b1b      	ldr	r3, [pc, #108]	; (800c5c4 <__register_exitproc+0x88>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800c55c:	b334      	cbz	r4, 800c5ac <__register_exitproc+0x70>
 800c55e:	6865      	ldr	r5, [r4, #4]
 800c560:	2d1f      	cmp	r5, #31
 800c562:	dc28      	bgt.n	800c5b6 <__register_exitproc+0x7a>
 800c564:	b95e      	cbnz	r6, 800c57e <__register_exitproc+0x42>
 800c566:	1c6b      	adds	r3, r5, #1
 800c568:	3502      	adds	r5, #2
 800c56a:	f8da 0000 	ldr.w	r0, [sl]
 800c56e:	6063      	str	r3, [r4, #4]
 800c570:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800c574:	f7ff ffe0 	bl	800c538 <__retarget_lock_release_recursive>
 800c578:	2000      	movs	r0, #0
 800c57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c57e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800c582:	2301      	movs	r3, #1
 800c584:	2e02      	cmp	r6, #2
 800c586:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800c58a:	fa03 f305 	lsl.w	r3, r3, r5
 800c58e:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 800c592:	ea42 0203 	orr.w	r2, r2, r3
 800c596:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 800c59a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800c59e:	d1e2      	bne.n	800c566 <__register_exitproc+0x2a>
 800c5a0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 800c5aa:	e7dc      	b.n	800c566 <__register_exitproc+0x2a>
 800c5ac:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800c5b0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800c5b4:	e7d3      	b.n	800c55e <__register_exitproc+0x22>
 800c5b6:	f8da 0000 	ldr.w	r0, [sl]
 800c5ba:	f7ff ffbd 	bl	800c538 <__retarget_lock_release_recursive>
 800c5be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5c2:	e7da      	b.n	800c57a <__register_exitproc+0x3e>
 800c5c4:	0801bc90 	.word	0x0801bc90
 800c5c8:	20000850 	.word	0x20000850

0800c5cc <_sbrk>:
 800c5cc:	4a05      	ldr	r2, [pc, #20]	; (800c5e4 <_sbrk+0x18>)
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	6810      	ldr	r0, [r2, #0]
 800c5d2:	b110      	cbz	r0, 800c5da <_sbrk+0xe>
 800c5d4:	4403      	add	r3, r0
 800c5d6:	6013      	str	r3, [r2, #0]
 800c5d8:	4770      	bx	lr
 800c5da:	4803      	ldr	r0, [pc, #12]	; (800c5e8 <_sbrk+0x1c>)
 800c5dc:	4403      	add	r3, r0
 800c5de:	6013      	str	r3, [r2, #0]
 800c5e0:	4770      	bx	lr
 800c5e2:	bf00      	nop
 800c5e4:	2000249c 	.word	0x2000249c
 800c5e8:	200024a0 	.word	0x200024a0

0800c5ec <_init>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr

0800c5f8 <_fini>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	bf00      	nop
 800c5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5fe:	bc08      	pop	{r3}
 800c600:	469e      	mov	lr, r3
 800c602:	4770      	bx	lr
